/**
 * API for the COVID-19 Tracking QR Code Signin Server.
 * This is the API for the COVID-19 Contact Tracing QRCode Signin Server
 *
 * The version of the OpenAPI document: 1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAttendeesSigninsApi_H
#define OAI_OAIAttendeesSigninsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInvalidToken.h"
#include "OAIKeyFailure.h"
#include "OAISignin.h"
#include "OAISigninResponse.h"
#include "OAIUserRecord.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAttendeesSigninsApi : public QObject {
    Q_OBJECT

public:
    OAIAttendeesSigninsApi(const int timeOut = 0);
    ~OAIAttendeesSigninsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_signin OAISignin [optional]
    */
    virtual void signinPost(const ::OpenAPI::OptionalParam<OAISignin> &oai_signin = ::OpenAPI::OptionalParam<OAISignin>());

    /**
    * @param[in]  signin_id qint32 [required]
    */
    virtual void signinSigninIdDelete(const qint32 &signin_id);

    /**
    * @param[in]  signin_id qint32 [required]
    */
    virtual void signinSigninIdGet(const qint32 &signin_id);

    /**
    * @param[in]  signin_id qint32 [required]
    * @param[in]  oai_signin OAISignin [optional]
    */
    virtual void signinSigninIdPut(const qint32 &signin_id, const ::OpenAPI::OptionalParam<OAISignin> &oai_signin = ::OpenAPI::OptionalParam<OAISignin>());

    /**
    * @param[in]  less_than qint32 [optional]
    * @param[in]  return_count qint32 [optional]
    */
    virtual void signinsGet(const ::OpenAPI::OptionalParam<qint32> &less_than = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &return_count = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void signinPostCallback(OAIHttpRequestWorker *worker);
    void signinSigninIdDeleteCallback(OAIHttpRequestWorker *worker);
    void signinSigninIdGetCallback(OAIHttpRequestWorker *worker);
    void signinSigninIdPutCallback(OAIHttpRequestWorker *worker);
    void signinsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void signinPostSignal(OAISigninResponse summary);
    void signinSigninIdDeleteSignal();
    void signinSigninIdGetSignal(OAISignin summary);
    void signinSigninIdPutSignal(OAIUserRecord summary);
    void signinsGetSignal(QList<OAISignin> summary);


    void signinPostSignalFull(OAIHttpRequestWorker *worker, OAISigninResponse summary);
    void signinSigninIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void signinSigninIdGetSignalFull(OAIHttpRequestWorker *worker, OAISignin summary);
    void signinSigninIdPutSignalFull(OAIHttpRequestWorker *worker, OAIUserRecord summary);
    void signinsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISignin> summary);

    Q_DECL_DEPRECATED_X("Use signinPostSignalError() instead")
    void signinPostSignalE(OAISigninResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signinPostSignalError(OAISigninResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signinSigninIdDeleteSignalError() instead")
    void signinSigninIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void signinSigninIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signinSigninIdGetSignalError() instead")
    void signinSigninIdGetSignalE(OAISignin summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signinSigninIdGetSignalError(OAISignin summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signinSigninIdPutSignalError() instead")
    void signinSigninIdPutSignalE(OAIUserRecord summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signinSigninIdPutSignalError(OAIUserRecord summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signinsGetSignalError() instead")
    void signinsGetSignalE(QList<OAISignin> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signinsGetSignalError(QList<OAISignin> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use signinPostSignalErrorFull() instead")
    void signinPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signinPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signinSigninIdDeleteSignalErrorFull() instead")
    void signinSigninIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signinSigninIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signinSigninIdGetSignalErrorFull() instead")
    void signinSigninIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signinSigninIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signinSigninIdPutSignalErrorFull() instead")
    void signinSigninIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signinSigninIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signinsGetSignalErrorFull() instead")
    void signinsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signinsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
