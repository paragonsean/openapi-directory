/**
 * API for the COVID-19 Tracking QR Code Signin Server.
 * This is the API for the COVID-19 Contact Tracing QRCode Signin Server
 *
 * The version of the OpenAPI document: 1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISignin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISignin::OAISignin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISignin::OAISignin() {
    this->initializeModel();
}

OAISignin::~OAISignin() {}

void OAISignin::initializeModel() {

    m_dt_isSet = false;
    m_dt_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;
}

void OAISignin::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISignin::fromJsonObject(QJsonObject json) {

    m_dt_isValid = ::OpenAPI::fromJsonValue(m_dt, json[QString("dt")]);
    m_dt_isSet = !json[QString("dt")].isNull() && m_dt_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;
}

QString OAISignin::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISignin::asJsonObject() const {
    QJsonObject obj;
    if (m_dt_isSet) {
        obj.insert(QString("dt"), ::OpenAPI::toJsonValue(m_dt));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    return obj;
}

double OAISignin::getDt() const {
    return m_dt;
}
void OAISignin::setDt(const double &dt) {
    m_dt = dt;
    m_dt_isSet = true;
}

bool OAISignin::is_dt_Set() const{
    return m_dt_isSet;
}

bool OAISignin::is_dt_Valid() const{
    return m_dt_isValid;
}

QString OAISignin::getEmail() const {
    return m_email;
}
void OAISignin::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISignin::is_email_Set() const{
    return m_email_isSet;
}

bool OAISignin::is_email_Valid() const{
    return m_email_isValid;
}

qint32 OAISignin::getId() const {
    return m_id;
}
void OAISignin::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISignin::is_id_Set() const{
    return m_id_isSet;
}

bool OAISignin::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISignin::getName() const {
    return m_name;
}
void OAISignin::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISignin::is_name_Set() const{
    return m_name_isSet;
}

bool OAISignin::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISignin::getPhone() const {
    return m_phone;
}
void OAISignin::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAISignin::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAISignin::is_phone_Valid() const{
    return m_phone_isValid;
}

bool OAISignin::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISignin::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_phone_isValid && true;
}

} // namespace OpenAPI
