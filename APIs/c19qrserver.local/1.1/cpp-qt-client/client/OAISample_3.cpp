/**
 * API for the COVID-19 Tracking QR Code Signin Server.
 * This is the API for the COVID-19 Contact Tracing QRCode Signin Server
 *
 * The version of the OpenAPI document: 1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISample_3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISample_3::OAISample_3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISample_3::OAISample_3() {
    this->initializeModel();
}

OAISample_3::~OAISample_3() {}

void OAISample_3::initializeModel() {

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;
}

void OAISample_3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISample_3::fromJsonObject(QJsonObject json) {

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("read_only")]);
    m_read_only_isSet = !json[QString("read_only")].isNull() && m_read_only_isValid;
}

QString OAISample_3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISample_3::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("read_only"), ::OpenAPI::toJsonValue(m_read_only));
    }
    return obj;
}

bool OAISample_3::isAdmin() const {
    return m_admin;
}
void OAISample_3::setAdmin(const bool &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAISample_3::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAISample_3::is_admin_Valid() const{
    return m_admin_isValid;
}

QString OAISample_3::getEmail() const {
    return m_email;
}
void OAISample_3::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISample_3::is_email_Set() const{
    return m_email_isSet;
}

bool OAISample_3::is_email_Valid() const{
    return m_email_isValid;
}

QString OAISample_3::getName() const {
    return m_name;
}
void OAISample_3::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISample_3::is_name_Set() const{
    return m_name_isSet;
}

bool OAISample_3::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISample_3::isReadOnly() const {
    return m_read_only;
}
void OAISample_3::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAISample_3::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAISample_3::is_read_only_Valid() const{
    return m_read_only_isValid;
}

bool OAISample_3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISample_3::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
