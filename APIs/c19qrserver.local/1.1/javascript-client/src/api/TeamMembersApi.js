/**
 * API for the COVID-19 Tracking QR Code Signin Server.
 * This is the API for the COVID-19 Contact Tracing QRCode Signin Server
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUserResponse from '../model/CreateUserResponse';
import InvalidToken from '../model/InvalidToken';
import Sample3 from '../model/Sample3';
import UserRecord from '../model/UserRecord';

/**
* TeamMembers service.
* @module api/TeamMembersApi
* @version 1.1
*/
export default class TeamMembersApi {

    /**
    * Constructs a new TeamMembersApi. 
    * @alias module:api/TeamMembersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userPost operation.
     * @callback module:api/TeamMembersApi~userPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a user
     * Use this endpoint to create a team member (user) record
     * @param {module:model/Sample3} sample3 Create User Payload
     * @param {module:api/TeamMembersApi~userPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUserResponse}
     */
    userPost(sample3, callback) {
      let postBody = sample3;
      // verify the required parameter 'sample3' is set
      if (sample3 === undefined || sample3 === null) {
        throw new Error("Missing the required parameter 'sample3' when calling userPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUserResponse;
      return this.apiClient.callApi(
        '/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userUserIdDelete operation.
     * @callback module:api/TeamMembersApi~userUserIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a team member's user record
     * To preserve referential integrity in the database, the user account  will not be deleted from the database. Rather, the password will be set to the empty string, effectively preventing that user from logging in. Furthermore, all active sessions for that user will be deleted, as will any password reset tokens.  
     * @param {Number} userId The ID of the user record to be deleted.
     * @param {module:api/TeamMembersApi~userUserIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userUserIdDelete(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userUserIdDelete");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userUserIdGet operation.
     * @callback module:api/TeamMembersApi~userUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the information associated with a team member's user record
     * Retrieve the information associated with a user's account 
     * @param {Number} userId The ID of the user record to be retrieved.
     * @param {module:api/TeamMembersApi~userUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRecord}
     */
    userUserIdGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userUserIdGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserRecord;
      return this.apiClient.callApi(
        '/user/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/TeamMembersApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserRecord>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the information associated with all team members' user records
     * Retrieve the information associated with all team members' user records 
     * @param {module:api/TeamMembersApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserRecord>}
     */
    usersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserRecord];
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
