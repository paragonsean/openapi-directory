/**
 * API for the COVID-19 Tracking QR Code Signin Server.
 * This is the API for the COVID-19 Contact Tracing QRCode Signin Server
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InvalidToken from '../model/InvalidToken';
import RequestPasswordResetResponse from '../model/RequestPasswordResetResponse';
import Sample from '../model/Sample';
import Sample2 from '../model/Sample2';
import Sample4 from '../model/Sample4';

/**
* Passwords service.
* @module api/PasswordsApi
* @version 1.1
*/
export default class PasswordsApi {

    /**
    * Constructs a new PasswordsApi. 
    * @alias module:api/PasswordsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changePasswordPost operation.
     * @callback module:api/PasswordsApi~changePasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used for changing your password
     * Pass in your old password and your new password
     * @param {module:model/Sample} sample Change Password Payload
     * @param {module:api/PasswordsApi~changePasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changePasswordPost(sample, callback) {
      let postBody = sample;
      // verify the required parameter 'sample' is set
      if (sample === undefined || sample === null) {
        throw new Error("Missing the required parameter 'sample' when calling changePasswordPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/changePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestPasswordResetPost operation.
     * @callback module:api/PasswordsApi~requestPasswordResetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestPasswordResetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used for requesting a password reset code
     * The admin should run this on behalf of a user who forgot their password.  The API will generate a password reset code which the admin should then provide to the user. The user can use their client to reset their password. Normally the password reset code is mailed to the user, but I didn't want to do this in this case because I didn't want to  introduce the complicated dependency of having an SMTP server just for this purpose. Doing it this way makes it easy for people to adopt this  API. 
     * @param {module:model/Sample2} sample2 Request Password Reset Payload
     * @param {module:api/PasswordsApi~requestPasswordResetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestPasswordResetResponse}
     */
    requestPasswordResetPost(sample2, callback) {
      let postBody = sample2;
      // verify the required parameter 'sample2' is set
      if (sample2 === undefined || sample2 === null) {
        throw new Error("Missing the required parameter 'sample2' when calling requestPasswordResetPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RequestPasswordResetResponse;
      return this.apiClient.callApi(
        '/requestPasswordReset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyPasswordChangePost operation.
     * @callback module:api/PasswordsApi~verifyPasswordChangePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used for resetting your password when you forgot it
     * Another endpoint will generate a password reset code for you. You should  use the client app to submit the reset code along with the new password to change your password. 
     * @param {module:model/Sample4} sample4 Password Reset Payload
     * @param {module:api/PasswordsApi~verifyPasswordChangePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    verifyPasswordChangePost(sample4, callback) {
      let postBody = sample4;
      // verify the required parameter 'sample4' is set
      if (sample4 === undefined || sample4 === null) {
        throw new Error("Missing the required parameter 'sample4' when calling verifyPasswordChangePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['TokenHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/verifyPasswordChange', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
