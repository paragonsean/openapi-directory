/**
 * API for the COVID-19 Tracking QR Code Signin Server.
 * This is the API for the COVID-19 Contact Tracing QRCode Signin Server
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Signin model module.
 * @module model/Signin
 * @version 1.1
 */
class Signin {
    /**
     * Constructs a new <code>Signin</code>.
     * Payload of signin object
     * @alias module:model/Signin
     * @param name {String} The person's name
     * @param phone {String} The person's phone number
     */
    constructor(name, phone) { 
        
        Signin.initialize(this, name, phone);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, phone) { 
        obj['name'] = name;
        obj['phone'] = phone;
    }

    /**
     * Constructs a <code>Signin</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Signin} obj Optional instance to populate.
     * @return {module:model/Signin} The populated <code>Signin</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Signin();

            if (data.hasOwnProperty('dt')) {
                obj['dt'] = ApiClient.convertToType(data['dt'], 'Number');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Signin</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Signin</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Signin.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }

        return true;
    }


}

Signin.RequiredProperties = ["name", "phone"];

/**
 * The original scan time in number of seconds since 1/1/1970 (GMT)
 * @member {Number} dt
 */
Signin.prototype['dt'] = undefined;

/**
 * The person's email
 * @member {String} email
 */
Signin.prototype['email'] = undefined;

/**
 * The record id
 * @member {Number} id
 */
Signin.prototype['id'] = undefined;

/**
 * The person's name
 * @member {String} name
 */
Signin.prototype['name'] = undefined;

/**
 * The person's phone number
 * @member {String} phone
 */
Signin.prototype['phone'] = undefined;






export default Signin;

