/*
 * API for the COVID-19 Tracking QR Code Signin Server.
 * This is the API for the COVID-19 Contact Tracing QRCode Signin Server
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InvalidToken;
import org.openapitools.client.model.KeyFailure;
import org.openapitools.client.model.Signin;
import org.openapitools.client.model.SigninResponse;
import org.openapitools.client.model.UserRecord;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AttendeesSigninsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AttendeesSigninsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AttendeesSigninsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for signinPost
     * @param signin  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Key Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signinPostCall(Signin signin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signin;

        // create path and map variables
        String localVarPath = "/signin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signinPostValidateBeforeCall(Signin signin, final ApiCallback _callback) throws ApiException {
        return signinPostCall(signin, _callback);

    }

    /**
     * 
     * Create a new signin record
     * @param signin  (optional)
     * @return SigninResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Key Failure </td><td>  -  </td></tr>
     </table>
     */
    public SigninResponse signinPost(Signin signin) throws ApiException {
        ApiResponse<SigninResponse> localVarResp = signinPostWithHttpInfo(signin);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new signin record
     * @param signin  (optional)
     * @return ApiResponse&lt;SigninResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Key Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SigninResponse> signinPostWithHttpInfo(Signin signin) throws ApiException {
        okhttp3.Call localVarCall = signinPostValidateBeforeCall(signin, null);
        Type localVarReturnType = new TypeToken<SigninResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new signin record
     * @param signin  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Key Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signinPostAsync(Signin signin, final ApiCallback<SigninResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = signinPostValidateBeforeCall(signin, _callback);
        Type localVarReturnType = new TypeToken<SigninResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signinSigninIdDelete
     * @param signinId The ID of the signin record to be deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signinSigninIdDeleteCall(Integer signinId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/signin/{signinId}"
            .replace("{" + "signinId" + "}", localVarApiClient.escapeString(signinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signinSigninIdDeleteValidateBeforeCall(Integer signinId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signinId' is set
        if (signinId == null) {
            throw new ApiException("Missing the required parameter 'signinId' when calling signinSigninIdDelete(Async)");
        }

        return signinSigninIdDeleteCall(signinId, _callback);

    }

    /**
     * Delete a signin record
     * Delete a signin record       
     * @param signinId The ID of the signin record to be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public void signinSigninIdDelete(Integer signinId) throws ApiException {
        signinSigninIdDeleteWithHttpInfo(signinId);
    }

    /**
     * Delete a signin record
     * Delete a signin record       
     * @param signinId The ID of the signin record to be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> signinSigninIdDeleteWithHttpInfo(Integer signinId) throws ApiException {
        okhttp3.Call localVarCall = signinSigninIdDeleteValidateBeforeCall(signinId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a signin record (asynchronously)
     * Delete a signin record       
     * @param signinId The ID of the signin record to be deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signinSigninIdDeleteAsync(Integer signinId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = signinSigninIdDeleteValidateBeforeCall(signinId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for signinSigninIdGet
     * @param signinId The ID of the signin record to be retrieved. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signinSigninIdGetCall(Integer signinId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/signin/{signinId}"
            .replace("{" + "signinId" + "}", localVarApiClient.escapeString(signinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signinSigninIdGetValidateBeforeCall(Integer signinId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signinId' is set
        if (signinId == null) {
            throw new ApiException("Missing the required parameter 'signinId' when calling signinSigninIdGet(Async)");
        }

        return signinSigninIdGetCall(signinId, _callback);

    }

    /**
     * Retrieve the information associated with a signin record
     * Retrieve the information associated with a signin record 
     * @param signinId The ID of the signin record to be retrieved. (required)
     * @return Signin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public Signin signinSigninIdGet(Integer signinId) throws ApiException {
        ApiResponse<Signin> localVarResp = signinSigninIdGetWithHttpInfo(signinId);
        return localVarResp.getData();
    }

    /**
     * Retrieve the information associated with a signin record
     * Retrieve the information associated with a signin record 
     * @param signinId The ID of the signin record to be retrieved. (required)
     * @return ApiResponse&lt;Signin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Signin> signinSigninIdGetWithHttpInfo(Integer signinId) throws ApiException {
        okhttp3.Call localVarCall = signinSigninIdGetValidateBeforeCall(signinId, null);
        Type localVarReturnType = new TypeToken<Signin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the information associated with a signin record (asynchronously)
     * Retrieve the information associated with a signin record 
     * @param signinId The ID of the signin record to be retrieved. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signinSigninIdGetAsync(Integer signinId, final ApiCallback<Signin> _callback) throws ApiException {

        okhttp3.Call localVarCall = signinSigninIdGetValidateBeforeCall(signinId, _callback);
        Type localVarReturnType = new TypeToken<Signin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signinSigninIdPut
     * @param signinId The ID of the signin record to be retrieved. (required)
     * @param signin  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signinSigninIdPutCall(Integer signinId, Signin signin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signin;

        // create path and map variables
        String localVarPath = "/signin/{signinId}"
            .replace("{" + "signinId" + "}", localVarApiClient.escapeString(signinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signinSigninIdPutValidateBeforeCall(Integer signinId, Signin signin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signinId' is set
        if (signinId == null) {
            throw new ApiException("Missing the required parameter 'signinId' when calling signinSigninIdPut(Async)");
        }

        return signinSigninIdPutCall(signinId, signin, _callback);

    }

    /**
     * Update a signin record
     * Update a signin record 
     * @param signinId The ID of the signin record to be retrieved. (required)
     * @param signin  (optional)
     * @return UserRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public UserRecord signinSigninIdPut(Integer signinId, Signin signin) throws ApiException {
        ApiResponse<UserRecord> localVarResp = signinSigninIdPutWithHttpInfo(signinId, signin);
        return localVarResp.getData();
    }

    /**
     * Update a signin record
     * Update a signin record 
     * @param signinId The ID of the signin record to be retrieved. (required)
     * @param signin  (optional)
     * @return ApiResponse&lt;UserRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserRecord> signinSigninIdPutWithHttpInfo(Integer signinId, Signin signin) throws ApiException {
        okhttp3.Call localVarCall = signinSigninIdPutValidateBeforeCall(signinId, signin, null);
        Type localVarReturnType = new TypeToken<UserRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a signin record (asynchronously)
     * Update a signin record 
     * @param signinId The ID of the signin record to be retrieved. (required)
     * @param signin  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signinSigninIdPutAsync(Integer signinId, Signin signin, final ApiCallback<UserRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = signinSigninIdPutValidateBeforeCall(signinId, signin, _callback);
        Type localVarReturnType = new TypeToken<UserRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signinsGet
     * @param lessThan Return signins with IDs less than this value. (optional)
     * @param returnCount Return this many objects (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Key Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signinsGetCall(Integer lessThan, Integer returnCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/signins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lessThan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("less_than", lessThan));
        }

        if (returnCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return_count", returnCount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "TokenHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signinsGetValidateBeforeCall(Integer lessThan, Integer returnCount, final ApiCallback _callback) throws ApiException {
        return signinsGetCall(lessThan, returnCount, _callback);

    }

    /**
     * Get signin info
     * Returns a list of signin objects sorted by signin ID descending.
     * @param lessThan Return signins with IDs less than this value. (optional)
     * @param returnCount Return this many objects (optional, default to 100)
     * @return List&lt;Signin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Key Failure </td><td>  -  </td></tr>
     </table>
     */
    public List<Signin> signinsGet(Integer lessThan, Integer returnCount) throws ApiException {
        ApiResponse<List<Signin>> localVarResp = signinsGetWithHttpInfo(lessThan, returnCount);
        return localVarResp.getData();
    }

    /**
     * Get signin info
     * Returns a list of signin objects sorted by signin ID descending.
     * @param lessThan Return signins with IDs less than this value. (optional)
     * @param returnCount Return this many objects (optional, default to 100)
     * @return ApiResponse&lt;List&lt;Signin&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Key Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Signin>> signinsGetWithHttpInfo(Integer lessThan, Integer returnCount) throws ApiException {
        okhttp3.Call localVarCall = signinsGetValidateBeforeCall(lessThan, returnCount, null);
        Type localVarReturnType = new TypeToken<List<Signin>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get signin info (asynchronously)
     * Returns a list of signin objects sorted by signin ID descending.
     * @param lessThan Return signins with IDs less than this value. (optional)
     * @param returnCount Return this many objects (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Key Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signinsGetAsync(Integer lessThan, Integer returnCount, final ApiCallback<List<Signin>> _callback) throws ApiException {

        okhttp3.Call localVarCall = signinsGetValidateBeforeCall(lessThan, returnCount, _callback);
        Type localVarReturnType = new TypeToken<List<Signin>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
