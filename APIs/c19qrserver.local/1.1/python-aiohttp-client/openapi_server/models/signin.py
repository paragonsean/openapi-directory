# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Signin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dt: float=None, email: str=None, id: int=None, name: str=None, phone: str=None):
        """Signin - a model defined in OpenAPI

        :param dt: The dt of this Signin.
        :param email: The email of this Signin.
        :param id: The id of this Signin.
        :param name: The name of this Signin.
        :param phone: The phone of this Signin.
        """
        self.openapi_types = {
            'dt': float,
            'email': str,
            'id': int,
            'name': str,
            'phone': str
        }

        self.attribute_map = {
            'dt': 'dt',
            'email': 'email',
            'id': 'id',
            'name': 'name',
            'phone': 'phone'
        }

        self._dt = dt
        self._email = email
        self._id = id
        self._name = name
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Signin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The signin of this Signin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dt(self):
        """Gets the dt of this Signin.

        The original scan time in number of seconds since 1/1/1970 (GMT)

        :return: The dt of this Signin.
        :rtype: float
        """
        return self._dt

    @dt.setter
    def dt(self, dt):
        """Sets the dt of this Signin.

        The original scan time in number of seconds since 1/1/1970 (GMT)

        :param dt: The dt of this Signin.
        :type dt: float
        """

        self._dt = dt

    @property
    def email(self):
        """Gets the email of this Signin.

        The person's email

        :return: The email of this Signin.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Signin.

        The person's email

        :param email: The email of this Signin.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this Signin.

        The record id

        :return: The id of this Signin.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Signin.

        The record id

        :param id: The id of this Signin.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Signin.

        The person's name

        :return: The name of this Signin.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Signin.

        The person's name

        :param name: The name of this Signin.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this Signin.

        The person's phone number

        :return: The phone of this Signin.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Signin.

        The person's phone number

        :param phone: The phone of this Signin.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")

        self._phone = phone
