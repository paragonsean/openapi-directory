# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin: bool=None, email: str=None, id: int=None, name: str=None, read_only: bool=None):
        """UserRecord - a model defined in OpenAPI

        :param admin: The admin of this UserRecord.
        :param email: The email of this UserRecord.
        :param id: The id of this UserRecord.
        :param name: The name of this UserRecord.
        :param read_only: The read_only of this UserRecord.
        """
        self.openapi_types = {
            'admin': bool,
            'email': str,
            'id': int,
            'name': str,
            'read_only': bool
        }

        self.attribute_map = {
            'admin': 'admin',
            'email': 'email',
            'id': 'id',
            'name': 'name',
            'read_only': 'read_only'
        }

        self._admin = admin
        self._email = email
        self._id = id
        self._name = name
        self._read_only = read_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The userRecord of this UserRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin(self):
        """Gets the admin of this UserRecord.

        If the user has admin privileges then the user will be able to create password reset requests on behalf of other users, and will also be able to view and edit  the data of other users. 

        :return: The admin of this UserRecord.
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this UserRecord.

        If the user has admin privileges then the user will be able to create password reset requests on behalf of other users, and will also be able to view and edit  the data of other users. 

        :param admin: The admin of this UserRecord.
        :type admin: bool
        """

        self._admin = admin

    @property
    def email(self):
        """Gets the email of this UserRecord.

        The user's email address

        :return: The email of this UserRecord.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserRecord.

        The user's email address

        :param email: The email of this UserRecord.
        :type email: str
        """

        self._email = email

    @property
    def id(self):
        """Gets the id of this UserRecord.

        The id of the user's record

        :return: The id of this UserRecord.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserRecord.

        The id of the user's record

        :param id: The id of this UserRecord.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this UserRecord.

        The user's name

        :return: The name of this UserRecord.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserRecord.

        The user's name

        :param name: The name of this UserRecord.
        :type name: str
        """

        self._name = name

    @property
    def read_only(self):
        """Gets the read_only of this UserRecord.

        Not used in this version of the API. For future use.

        :return: The read_only of this UserRecord.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this UserRecord.

        Not used in this version of the API. For future use.

        :param read_only: The read_only of this UserRecord.
        :type read_only: bool
        """

        self._read_only = read_only
