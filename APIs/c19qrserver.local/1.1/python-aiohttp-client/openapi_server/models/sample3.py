# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Sample3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin: bool=None, email: str=None, name: str=None, read_only: bool=None):
        """Sample3 - a model defined in OpenAPI

        :param admin: The admin of this Sample3.
        :param email: The email of this Sample3.
        :param name: The name of this Sample3.
        :param read_only: The read_only of this Sample3.
        """
        self.openapi_types = {
            'admin': bool,
            'email': str,
            'name': str,
            'read_only': bool
        }

        self.attribute_map = {
            'admin': 'admin',
            'email': 'email',
            'name': 'name',
            'read_only': 'read_only'
        }

        self._admin = admin
        self._email = email
        self._name = name
        self._read_only = read_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sample3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sample_3 of this Sample3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin(self):
        """Gets the admin of this Sample3.

        If the user has admin privileges then the user will be able to create password reset requests on behalf of other users, and will also be able to view and edit  the data of other users. 

        :return: The admin of this Sample3.
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this Sample3.

        If the user has admin privileges then the user will be able to create password reset requests on behalf of other users, and will also be able to view and edit  the data of other users. 

        :param admin: The admin of this Sample3.
        :type admin: bool
        """

        self._admin = admin

    @property
    def email(self):
        """Gets the email of this Sample3.

        The email address of the user record you want to create

        :return: The email of this Sample3.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Sample3.

        The email address of the user record you want to create

        :param email: The email of this Sample3.
        :type email: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this Sample3.

        The name of the user record you want to create

        :return: The name of this Sample3.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sample3.

        The name of the user record you want to create

        :param name: The name of this Sample3.
        :type name: str
        """

        self._name = name

    @property
    def read_only(self):
        """Gets the read_only of this Sample3.

        Not used in this version of the API. For future use.

        :return: The read_only of this Sample3.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this Sample3.

        Not used in this version of the API. For future use.

        :param read_only: The read_only of this Sample3.
        :type read_only: bool
        """

        self._read_only = read_only
