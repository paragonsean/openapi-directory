# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoginResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin: bool=None, login_id: int=None, name: str=None, read_only: bool=None, token: str=None):
        """LoginResponse - a model defined in OpenAPI

        :param admin: The admin of this LoginResponse.
        :param login_id: The login_id of this LoginResponse.
        :param name: The name of this LoginResponse.
        :param read_only: The read_only of this LoginResponse.
        :param token: The token of this LoginResponse.
        """
        self.openapi_types = {
            'admin': bool,
            'login_id': int,
            'name': str,
            'read_only': bool,
            'token': str
        }

        self.attribute_map = {
            'admin': 'admin',
            'login_id': 'login_id',
            'name': 'name',
            'read_only': 'read_only',
            'token': 'token'
        }

        self._admin = admin
        self._login_id = login_id
        self._name = name
        self._read_only = read_only
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoginResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The loginResponse of this LoginResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin(self):
        """Gets the admin of this LoginResponse.

        True if this user is an admin. False otherwise

        :return: The admin of this LoginResponse.
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this LoginResponse.

        True if this user is an admin. False otherwise

        :param admin: The admin of this LoginResponse.
        :type admin: bool
        """

        self._admin = admin

    @property
    def login_id(self):
        """Gets the login_id of this LoginResponse.

        The login id for this user

        :return: The login_id of this LoginResponse.
        :rtype: int
        """
        return self._login_id

    @login_id.setter
    def login_id(self, login_id):
        """Sets the login_id of this LoginResponse.

        The login id for this user

        :param login_id: The login_id of this LoginResponse.
        :type login_id: int
        """

        self._login_id = login_id

    @property
    def name(self):
        """Gets the name of this LoginResponse.

        This user's name

        :return: The name of this LoginResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoginResponse.

        This user's name

        :param name: The name of this LoginResponse.
        :type name: str
        """

        self._name = name

    @property
    def read_only(self):
        """Gets the read_only of this LoginResponse.

        True if this user has permissions to write to the database. False otherwise

        :return: The read_only of this LoginResponse.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this LoginResponse.

        True if this user has permissions to write to the database. False otherwise

        :param read_only: The read_only of this LoginResponse.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def token(self):
        """Gets the token of this LoginResponse.

        The API key that will be used to authenticate the user.

        :return: The token of this LoginResponse.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this LoginResponse.

        The API key that will be used to authenticate the user.

        :param token: The token of this LoginResponse.
        :type token: str
        """

        self._token = token
