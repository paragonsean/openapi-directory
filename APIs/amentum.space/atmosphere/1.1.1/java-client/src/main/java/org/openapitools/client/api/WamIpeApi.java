/*
 * Atmosphere API
 * Instantly access empirical models of atmospheric density and  composition that are recommended by the Committee on Space Research (COSPAR) for  satellite drag calculations. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2021. 
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppApiWfsEndpointsWFSGetValues200Response;
import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WamIpeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WamIpeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WamIpeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appApiWfsEndpointsWFSGetValues
     * @param latitude Latitude (deg) -90 to 90 deg (required)
     * @param longitude Longitude (deg) 0 to 360 deg or -180 to 180 deg (required)
     * @param altitude Altitude in (km) (required)
     * @param year Year in YYYY format (required)
     * @param month Month in MM format (required)
     * @param day Day in DD format (required)
     * @param hour UTC Hour of the day in 24 hour format (required)
     * @param minute Minute of the given hour (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful wam-ipe calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiWfsEndpointsWFSGetValuesCall(BigDecimal latitude, BigDecimal longitude, BigDecimal altitude, Integer year, Integer month, Integer day, Integer hour, Integer minute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wam-ipe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (altitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("altitude", altitude));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (day != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day", day));
        }

        if (hour != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hour", hour));
        }

        if (minute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minute", minute));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appApiWfsEndpointsWFSGetValuesValidateBeforeCall(BigDecimal latitude, BigDecimal longitude, BigDecimal altitude, Integer year, Integer month, Integer day, Integer hour, Integer minute, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling appApiWfsEndpointsWFSGetValues(Async)");
        }

        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling appApiWfsEndpointsWFSGetValues(Async)");
        }

        // verify the required parameter 'altitude' is set
        if (altitude == null) {
            throw new ApiException("Missing the required parameter 'altitude' when calling appApiWfsEndpointsWFSGetValues(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling appApiWfsEndpointsWFSGetValues(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling appApiWfsEndpointsWFSGetValues(Async)");
        }

        // verify the required parameter 'day' is set
        if (day == null) {
            throw new ApiException("Missing the required parameter 'day' when calling appApiWfsEndpointsWFSGetValues(Async)");
        }

        // verify the required parameter 'hour' is set
        if (hour == null) {
            throw new ApiException("Missing the required parameter 'hour' when calling appApiWfsEndpointsWFSGetValues(Async)");
        }

        // verify the required parameter 'minute' is set
        if (minute == null) {
            throw new ApiException("Missing the required parameter 'minute' when calling appApiWfsEndpointsWFSGetValues(Async)");
        }

        return appApiWfsEndpointsWFSGetValuesCall(latitude, longitude, altitude, year, month, day, hour, minute, _callback);

    }

    /**
     * Forecast winds, ion and molecular densities, and temperatures in the atmosphere 
     * at a given position and time on 42-48 hour forecast horizon (10 minute resolution). NOTE: latitudes outside the interval (-90,90) are clipped to the endpoints; longitudes outside (0,360) are wrapped.    
     * @param latitude Latitude (deg) -90 to 90 deg (required)
     * @param longitude Longitude (deg) 0 to 360 deg or -180 to 180 deg (required)
     * @param altitude Altitude in (km) (required)
     * @param year Year in YYYY format (required)
     * @param month Month in MM format (required)
     * @param day Day in DD format (required)
     * @param hour UTC Hour of the day in 24 hour format (required)
     * @param minute Minute of the given hour (required)
     * @return AppApiWfsEndpointsWFSGetValues200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful wam-ipe calculation </td><td>  -  </td></tr>
     </table>
     */
    public AppApiWfsEndpointsWFSGetValues200Response appApiWfsEndpointsWFSGetValues(BigDecimal latitude, BigDecimal longitude, BigDecimal altitude, Integer year, Integer month, Integer day, Integer hour, Integer minute) throws ApiException {
        ApiResponse<AppApiWfsEndpointsWFSGetValues200Response> localVarResp = appApiWfsEndpointsWFSGetValuesWithHttpInfo(latitude, longitude, altitude, year, month, day, hour, minute);
        return localVarResp.getData();
    }

    /**
     * Forecast winds, ion and molecular densities, and temperatures in the atmosphere 
     * at a given position and time on 42-48 hour forecast horizon (10 minute resolution). NOTE: latitudes outside the interval (-90,90) are clipped to the endpoints; longitudes outside (0,360) are wrapped.    
     * @param latitude Latitude (deg) -90 to 90 deg (required)
     * @param longitude Longitude (deg) 0 to 360 deg or -180 to 180 deg (required)
     * @param altitude Altitude in (km) (required)
     * @param year Year in YYYY format (required)
     * @param month Month in MM format (required)
     * @param day Day in DD format (required)
     * @param hour UTC Hour of the day in 24 hour format (required)
     * @param minute Minute of the given hour (required)
     * @return ApiResponse&lt;AppApiWfsEndpointsWFSGetValues200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful wam-ipe calculation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppApiWfsEndpointsWFSGetValues200Response> appApiWfsEndpointsWFSGetValuesWithHttpInfo(BigDecimal latitude, BigDecimal longitude, BigDecimal altitude, Integer year, Integer month, Integer day, Integer hour, Integer minute) throws ApiException {
        okhttp3.Call localVarCall = appApiWfsEndpointsWFSGetValuesValidateBeforeCall(latitude, longitude, altitude, year, month, day, hour, minute, null);
        Type localVarReturnType = new TypeToken<AppApiWfsEndpointsWFSGetValues200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Forecast winds, ion and molecular densities, and temperatures in the atmosphere  (asynchronously)
     * at a given position and time on 42-48 hour forecast horizon (10 minute resolution). NOTE: latitudes outside the interval (-90,90) are clipped to the endpoints; longitudes outside (0,360) are wrapped.    
     * @param latitude Latitude (deg) -90 to 90 deg (required)
     * @param longitude Longitude (deg) 0 to 360 deg or -180 to 180 deg (required)
     * @param altitude Altitude in (km) (required)
     * @param year Year in YYYY format (required)
     * @param month Month in MM format (required)
     * @param day Day in DD format (required)
     * @param hour UTC Hour of the day in 24 hour format (required)
     * @param minute Minute of the given hour (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful wam-ipe calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiWfsEndpointsWFSGetValuesAsync(BigDecimal latitude, BigDecimal longitude, BigDecimal altitude, Integer year, Integer month, Integer day, Integer hour, Integer minute, final ApiCallback<AppApiWfsEndpointsWFSGetValues200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appApiWfsEndpointsWFSGetValuesValidateBeforeCall(latitude, longitude, altitude, year, month, day, hour, minute, _callback);
        Type localVarReturnType = new TypeToken<AppApiWfsEndpointsWFSGetValues200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
