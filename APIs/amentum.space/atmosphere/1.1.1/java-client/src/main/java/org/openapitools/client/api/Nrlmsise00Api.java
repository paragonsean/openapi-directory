/*
 * Atmosphere API
 * Instantly access empirical models of atmospheric density and  composition that are recommended by the Committee on Space Research (COSPAR) for  satellite drag calculations. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2021. 
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppApiEndpointsNRLMSISE00SampleAtmosphere200Response;
import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Nrlmsise00Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Nrlmsise00Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Nrlmsise00Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appApiEndpointsNRLMSISE00SampleAtmosphere
     * @param year Year in YYYY format (required)
     * @param month Month in MM format (required)
     * @param day Day in DD format (required)
     * @param altitude Altitude in (km) (required)
     * @param geodeticLatitude GeodeticLatitude (deg) -90 to 90 deg (required)
     * @param geodeticLongitude GeodeticLongitude (deg) 0 to 360 deg (required)
     * @param utc Coordinated Universal Time (hrs) (required)
     * @param f107a (Optional) 81 day average of F10.7 flux (SFU) centered on the specified day. F107 and F107A values correspond to the 10.7 cm radio flux at the actual distance of Earth from Sun rather than radio flux at 1 AU. F107, F107A, AP effects can be neglected below 80 km. If unspecified, values provided by the US National Oceanic and  Atmospheric Administration are retrieved automatically.  (optional)
     * @param f107 (Optional) Daily F10.7 cm radio flux for previous day (SFU). F107 and F107A values correspond to the 10.7 cm radio flux at the actual distance of Earth from Sun rather than radio flux at 1 AU. F107, F107A, AP effects can be neglected below 80 km. If unspecified, values provided by the US National Oceanic and  Atmospheric Administration are retrieved automatically.  (optional)
     * @param ap (Optional) The Ap-index provides a daily average level for geomagnetic activity F107, F107A, AP effects can be neglected below 80 km. If unspecified, the average of values in the 24 hours preceding the date-time  are automatically calculated from data provided by GFZ German Research Centre  for Geosciences.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful atmospheric density calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiEndpointsNRLMSISE00SampleAtmosphereCall(Integer year, Integer month, Integer day, BigDecimal altitude, BigDecimal geodeticLatitude, BigDecimal geodeticLongitude, BigDecimal utc, BigDecimal f107a, BigDecimal f107, BigDecimal ap, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nrlmsise00";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (day != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day", day));
        }

        if (altitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("altitude", altitude));
        }

        if (geodeticLatitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geodetic_latitude", geodeticLatitude));
        }

        if (geodeticLongitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geodetic_longitude", geodeticLongitude));
        }

        if (utc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("utc", utc));
        }

        if (f107a != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f107a", f107a));
        }

        if (f107 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f107", f107));
        }

        if (ap != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ap", ap));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appApiEndpointsNRLMSISE00SampleAtmosphereValidateBeforeCall(Integer year, Integer month, Integer day, BigDecimal altitude, BigDecimal geodeticLatitude, BigDecimal geodeticLongitude, BigDecimal utc, BigDecimal f107a, BigDecimal f107, BigDecimal ap, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling appApiEndpointsNRLMSISE00SampleAtmosphere(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling appApiEndpointsNRLMSISE00SampleAtmosphere(Async)");
        }

        // verify the required parameter 'day' is set
        if (day == null) {
            throw new ApiException("Missing the required parameter 'day' when calling appApiEndpointsNRLMSISE00SampleAtmosphere(Async)");
        }

        // verify the required parameter 'altitude' is set
        if (altitude == null) {
            throw new ApiException("Missing the required parameter 'altitude' when calling appApiEndpointsNRLMSISE00SampleAtmosphere(Async)");
        }

        // verify the required parameter 'geodeticLatitude' is set
        if (geodeticLatitude == null) {
            throw new ApiException("Missing the required parameter 'geodeticLatitude' when calling appApiEndpointsNRLMSISE00SampleAtmosphere(Async)");
        }

        // verify the required parameter 'geodeticLongitude' is set
        if (geodeticLongitude == null) {
            throw new ApiException("Missing the required parameter 'geodeticLongitude' when calling appApiEndpointsNRLMSISE00SampleAtmosphere(Async)");
        }

        // verify the required parameter 'utc' is set
        if (utc == null) {
            throw new ApiException("Missing the required parameter 'utc' when calling appApiEndpointsNRLMSISE00SampleAtmosphere(Async)");
        }

        return appApiEndpointsNRLMSISE00SampleAtmosphereCall(year, month, day, altitude, geodeticLatitude, geodeticLongitude, utc, f107a, f107, ap, _callback);

    }

    /**
     * Compute atmospheric composition, density, and temperatures 
     * at specified conditions. 
     * @param year Year in YYYY format (required)
     * @param month Month in MM format (required)
     * @param day Day in DD format (required)
     * @param altitude Altitude in (km) (required)
     * @param geodeticLatitude GeodeticLatitude (deg) -90 to 90 deg (required)
     * @param geodeticLongitude GeodeticLongitude (deg) 0 to 360 deg (required)
     * @param utc Coordinated Universal Time (hrs) (required)
     * @param f107a (Optional) 81 day average of F10.7 flux (SFU) centered on the specified day. F107 and F107A values correspond to the 10.7 cm radio flux at the actual distance of Earth from Sun rather than radio flux at 1 AU. F107, F107A, AP effects can be neglected below 80 km. If unspecified, values provided by the US National Oceanic and  Atmospheric Administration are retrieved automatically.  (optional)
     * @param f107 (Optional) Daily F10.7 cm radio flux for previous day (SFU). F107 and F107A values correspond to the 10.7 cm radio flux at the actual distance of Earth from Sun rather than radio flux at 1 AU. F107, F107A, AP effects can be neglected below 80 km. If unspecified, values provided by the US National Oceanic and  Atmospheric Administration are retrieved automatically.  (optional)
     * @param ap (Optional) The Ap-index provides a daily average level for geomagnetic activity F107, F107A, AP effects can be neglected below 80 km. If unspecified, the average of values in the 24 hours preceding the date-time  are automatically calculated from data provided by GFZ German Research Centre  for Geosciences.  (optional)
     * @return AppApiEndpointsNRLMSISE00SampleAtmosphere200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful atmospheric density calculation </td><td>  -  </td></tr>
     </table>
     */
    public AppApiEndpointsNRLMSISE00SampleAtmosphere200Response appApiEndpointsNRLMSISE00SampleAtmosphere(Integer year, Integer month, Integer day, BigDecimal altitude, BigDecimal geodeticLatitude, BigDecimal geodeticLongitude, BigDecimal utc, BigDecimal f107a, BigDecimal f107, BigDecimal ap) throws ApiException {
        ApiResponse<AppApiEndpointsNRLMSISE00SampleAtmosphere200Response> localVarResp = appApiEndpointsNRLMSISE00SampleAtmosphereWithHttpInfo(year, month, day, altitude, geodeticLatitude, geodeticLongitude, utc, f107a, f107, ap);
        return localVarResp.getData();
    }

    /**
     * Compute atmospheric composition, density, and temperatures 
     * at specified conditions. 
     * @param year Year in YYYY format (required)
     * @param month Month in MM format (required)
     * @param day Day in DD format (required)
     * @param altitude Altitude in (km) (required)
     * @param geodeticLatitude GeodeticLatitude (deg) -90 to 90 deg (required)
     * @param geodeticLongitude GeodeticLongitude (deg) 0 to 360 deg (required)
     * @param utc Coordinated Universal Time (hrs) (required)
     * @param f107a (Optional) 81 day average of F10.7 flux (SFU) centered on the specified day. F107 and F107A values correspond to the 10.7 cm radio flux at the actual distance of Earth from Sun rather than radio flux at 1 AU. F107, F107A, AP effects can be neglected below 80 km. If unspecified, values provided by the US National Oceanic and  Atmospheric Administration are retrieved automatically.  (optional)
     * @param f107 (Optional) Daily F10.7 cm radio flux for previous day (SFU). F107 and F107A values correspond to the 10.7 cm radio flux at the actual distance of Earth from Sun rather than radio flux at 1 AU. F107, F107A, AP effects can be neglected below 80 km. If unspecified, values provided by the US National Oceanic and  Atmospheric Administration are retrieved automatically.  (optional)
     * @param ap (Optional) The Ap-index provides a daily average level for geomagnetic activity F107, F107A, AP effects can be neglected below 80 km. If unspecified, the average of values in the 24 hours preceding the date-time  are automatically calculated from data provided by GFZ German Research Centre  for Geosciences.  (optional)
     * @return ApiResponse&lt;AppApiEndpointsNRLMSISE00SampleAtmosphere200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful atmospheric density calculation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppApiEndpointsNRLMSISE00SampleAtmosphere200Response> appApiEndpointsNRLMSISE00SampleAtmosphereWithHttpInfo(Integer year, Integer month, Integer day, BigDecimal altitude, BigDecimal geodeticLatitude, BigDecimal geodeticLongitude, BigDecimal utc, BigDecimal f107a, BigDecimal f107, BigDecimal ap) throws ApiException {
        okhttp3.Call localVarCall = appApiEndpointsNRLMSISE00SampleAtmosphereValidateBeforeCall(year, month, day, altitude, geodeticLatitude, geodeticLongitude, utc, f107a, f107, ap, null);
        Type localVarReturnType = new TypeToken<AppApiEndpointsNRLMSISE00SampleAtmosphere200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compute atmospheric composition, density, and temperatures  (asynchronously)
     * at specified conditions. 
     * @param year Year in YYYY format (required)
     * @param month Month in MM format (required)
     * @param day Day in DD format (required)
     * @param altitude Altitude in (km) (required)
     * @param geodeticLatitude GeodeticLatitude (deg) -90 to 90 deg (required)
     * @param geodeticLongitude GeodeticLongitude (deg) 0 to 360 deg (required)
     * @param utc Coordinated Universal Time (hrs) (required)
     * @param f107a (Optional) 81 day average of F10.7 flux (SFU) centered on the specified day. F107 and F107A values correspond to the 10.7 cm radio flux at the actual distance of Earth from Sun rather than radio flux at 1 AU. F107, F107A, AP effects can be neglected below 80 km. If unspecified, values provided by the US National Oceanic and  Atmospheric Administration are retrieved automatically.  (optional)
     * @param f107 (Optional) Daily F10.7 cm radio flux for previous day (SFU). F107 and F107A values correspond to the 10.7 cm radio flux at the actual distance of Earth from Sun rather than radio flux at 1 AU. F107, F107A, AP effects can be neglected below 80 km. If unspecified, values provided by the US National Oceanic and  Atmospheric Administration are retrieved automatically.  (optional)
     * @param ap (Optional) The Ap-index provides a daily average level for geomagnetic activity F107, F107A, AP effects can be neglected below 80 km. If unspecified, the average of values in the 24 hours preceding the date-time  are automatically calculated from data provided by GFZ German Research Centre  for Geosciences.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful atmospheric density calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiEndpointsNRLMSISE00SampleAtmosphereAsync(Integer year, Integer month, Integer day, BigDecimal altitude, BigDecimal geodeticLatitude, BigDecimal geodeticLongitude, BigDecimal utc, BigDecimal f107a, BigDecimal f107, BigDecimal ap, final ApiCallback<AppApiEndpointsNRLMSISE00SampleAtmosphere200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appApiEndpointsNRLMSISE00SampleAtmosphereValidateBeforeCall(year, month, day, altitude, geodeticLatitude, geodeticLongitude, utc, f107a, f107, ap, _callback);
        Type localVarReturnType = new TypeToken<AppApiEndpointsNRLMSISE00SampleAtmosphere200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
