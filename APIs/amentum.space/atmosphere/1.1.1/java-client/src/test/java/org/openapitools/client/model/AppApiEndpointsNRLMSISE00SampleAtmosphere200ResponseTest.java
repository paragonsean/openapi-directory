/*
 * Atmosphere API
 * Instantly access empirical models of atmospheric density and  composition that are recommended by the Committee on Space Research (COSPAR) for  satellite drag calculations. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2021. 
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AppApiEndpointsJB2008SampleAtmosphere200ResponseAtAltTemp;
import org.openapitools.client.model.AppApiEndpointsNRLMSISE00SampleAtmosphere200ResponseAp;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AppApiEndpointsNRLMSISE00SampleAtmosphere200Response
 */
public class AppApiEndpointsNRLMSISE00SampleAtmosphere200ResponseTest {
    private final AppApiEndpointsNRLMSISE00SampleAtmosphere200Response model = new AppApiEndpointsNRLMSISE00SampleAtmosphere200Response();

    /**
     * Model tests for AppApiEndpointsNRLMSISE00SampleAtmosphere200Response
     */
    @Test
    public void testAppApiEndpointsNRLMSISE00SampleAtmosphere200Response() {
        // TODO: test AppApiEndpointsNRLMSISE00SampleAtmosphere200Response
    }

    /**
     * Test the property 'arDensity'
     */
    @Test
    public void arDensityTest() {
        // TODO: test arDensity
    }

    /**
     * Test the property 'hDensity'
     */
    @Test
    public void hDensityTest() {
        // TODO: test hDensity
    }

    /**
     * Test the property 'heDensity'
     */
    @Test
    public void heDensityTest() {
        // TODO: test heDensity
    }

    /**
     * Test the property 'n2Density'
     */
    @Test
    public void n2DensityTest() {
        // TODO: test n2Density
    }

    /**
     * Test the property 'nDensity'
     */
    @Test
    public void nDensityTest() {
        // TODO: test nDensity
    }

    /**
     * Test the property 'o2Density'
     */
    @Test
    public void o2DensityTest() {
        // TODO: test o2Density
    }

    /**
     * Test the property 'oDensity'
     */
    @Test
    public void oDensityTest() {
        // TODO: test oDensity
    }

    /**
     * Test the property 'anomalousODensity'
     */
    @Test
    public void anomalousODensityTest() {
        // TODO: test anomalousODensity
    }

    /**
     * Test the property 'ap'
     */
    @Test
    public void apTest() {
        // TODO: test ap
    }

    /**
     * Test the property 'atAltTemp'
     */
    @Test
    public void atAltTempTest() {
        // TODO: test atAltTemp
    }

    /**
     * Test the property 'exosphericTemp'
     */
    @Test
    public void exosphericTempTest() {
        // TODO: test exosphericTemp
    }

    /**
     * Test the property 'f107'
     */
    @Test
    public void f107Test() {
        // TODO: test f107
    }

    /**
     * Test the property 'f107a'
     */
    @Test
    public void f107aTest() {
        // TODO: test f107a
    }

    /**
     * Test the property 'totalMassDensity'
     */
    @Test
    public void totalMassDensityTest() {
        // TODO: test totalMassDensity
    }

}
