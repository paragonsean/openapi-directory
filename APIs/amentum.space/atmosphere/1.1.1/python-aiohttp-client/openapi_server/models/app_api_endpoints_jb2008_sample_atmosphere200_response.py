# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_api_endpoints_jb2008_sample_atmosphere200_response_at_alt_temp import AppApiEndpointsJB2008SampleAtmosphere200ResponseAtAltTemp
from openapi_server import util


class AppApiEndpointsJB2008SampleAtmosphere200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, at_alt_temp: AppApiEndpointsJB2008SampleAtmosphere200ResponseAtAltTemp=None, exospheric_temp: AppApiEndpointsJB2008SampleAtmosphere200ResponseAtAltTemp=None, total_mass_density: AppApiEndpointsJB2008SampleAtmosphere200ResponseAtAltTemp=None):
        """AppApiEndpointsJB2008SampleAtmosphere200Response - a model defined in OpenAPI

        :param at_alt_temp: The at_alt_temp of this AppApiEndpointsJB2008SampleAtmosphere200Response.
        :param exospheric_temp: The exospheric_temp of this AppApiEndpointsJB2008SampleAtmosphere200Response.
        :param total_mass_density: The total_mass_density of this AppApiEndpointsJB2008SampleAtmosphere200Response.
        """
        self.openapi_types = {
            'at_alt_temp': AppApiEndpointsJB2008SampleAtmosphere200ResponseAtAltTemp,
            'exospheric_temp': AppApiEndpointsJB2008SampleAtmosphere200ResponseAtAltTemp,
            'total_mass_density': AppApiEndpointsJB2008SampleAtmosphere200ResponseAtAltTemp
        }

        self.attribute_map = {
            'at_alt_temp': 'at_alt_temp',
            'exospheric_temp': 'exospheric_temp',
            'total_mass_density': 'total_mass_density'
        }

        self._at_alt_temp = at_alt_temp
        self._exospheric_temp = exospheric_temp
        self._total_mass_density = total_mass_density

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppApiEndpointsJB2008SampleAtmosphere200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The app_api_endpoints_JB2008_sample_atmosphere_200_response of this AppApiEndpointsJB2008SampleAtmosphere200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def at_alt_temp(self):
        """Gets the at_alt_temp of this AppApiEndpointsJB2008SampleAtmosphere200Response.


        :return: The at_alt_temp of this AppApiEndpointsJB2008SampleAtmosphere200Response.
        :rtype: AppApiEndpointsJB2008SampleAtmosphere200ResponseAtAltTemp
        """
        return self._at_alt_temp

    @at_alt_temp.setter
    def at_alt_temp(self, at_alt_temp):
        """Sets the at_alt_temp of this AppApiEndpointsJB2008SampleAtmosphere200Response.


        :param at_alt_temp: The at_alt_temp of this AppApiEndpointsJB2008SampleAtmosphere200Response.
        :type at_alt_temp: AppApiEndpointsJB2008SampleAtmosphere200ResponseAtAltTemp
        """

        self._at_alt_temp = at_alt_temp

    @property
    def exospheric_temp(self):
        """Gets the exospheric_temp of this AppApiEndpointsJB2008SampleAtmosphere200Response.


        :return: The exospheric_temp of this AppApiEndpointsJB2008SampleAtmosphere200Response.
        :rtype: AppApiEndpointsJB2008SampleAtmosphere200ResponseAtAltTemp
        """
        return self._exospheric_temp

    @exospheric_temp.setter
    def exospheric_temp(self, exospheric_temp):
        """Sets the exospheric_temp of this AppApiEndpointsJB2008SampleAtmosphere200Response.


        :param exospheric_temp: The exospheric_temp of this AppApiEndpointsJB2008SampleAtmosphere200Response.
        :type exospheric_temp: AppApiEndpointsJB2008SampleAtmosphere200ResponseAtAltTemp
        """

        self._exospheric_temp = exospheric_temp

    @property
    def total_mass_density(self):
        """Gets the total_mass_density of this AppApiEndpointsJB2008SampleAtmosphere200Response.


        :return: The total_mass_density of this AppApiEndpointsJB2008SampleAtmosphere200Response.
        :rtype: AppApiEndpointsJB2008SampleAtmosphere200ResponseAtAltTemp
        """
        return self._total_mass_density

    @total_mass_density.setter
    def total_mass_density(self, total_mass_density):
        """Sets the total_mass_density of this AppApiEndpointsJB2008SampleAtmosphere200Response.


        :param total_mass_density: The total_mass_density of this AppApiEndpointsJB2008SampleAtmosphere200Response.
        :type total_mass_density: AppApiEndpointsJB2008SampleAtmosphere200ResponseAtAltTemp
        """

        self._total_mass_density = total_mass_density
