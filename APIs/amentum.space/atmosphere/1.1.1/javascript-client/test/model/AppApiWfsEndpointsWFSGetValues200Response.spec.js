/**
 * Atmosphere API
 * Instantly access empirical models of atmospheric density and  composition that are recommended by the Committee on Space Research (COSPAR) for  satellite drag calculations. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2021. 
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AtmosphereApi);
  }
}(this, function(expect, AtmosphereApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AtmosphereApi.AppApiWfsEndpointsWFSGetValues200Response();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AppApiWfsEndpointsWFSGetValues200Response', function() {
    it('should create an instance of AppApiWfsEndpointsWFSGetValues200Response', function() {
      // uncomment below and update the code to test AppApiWfsEndpointsWFSGetValues200Response
      //var instance = new AtmosphereApi.AppApiWfsEndpointsWFSGetValues200Response();
      //expect(instance).to.be.a(AtmosphereApi.AppApiWfsEndpointsWFSGetValues200Response);
    });

    it('should have the property n2Density (base name: "N2_density")', function() {
      // uncomment below and update the code to test the property n2Density
      //var instance = new AtmosphereApi.AppApiWfsEndpointsWFSGetValues200Response();
      //expect(instance).to.be();
    });

    it('should have the property o2Density (base name: "O2_density")', function() {
      // uncomment below and update the code to test the property o2Density
      //var instance = new AtmosphereApi.AppApiWfsEndpointsWFSGetValues200Response();
      //expect(instance).to.be();
    });

    it('should have the property oDensity (base name: "O_density")', function() {
      // uncomment below and update the code to test the property oDensity
      //var instance = new AtmosphereApi.AppApiWfsEndpointsWFSGetValues200Response();
      //expect(instance).to.be();
    });

    it('should have the property eastwardWindNeutral (base name: "eastward_wind_neutral")', function() {
      // uncomment below and update the code to test the property eastwardWindNeutral
      //var instance = new AtmosphereApi.AppApiWfsEndpointsWFSGetValues200Response();
      //expect(instance).to.be();
    });

    it('should have the property northwardWindNeutral (base name: "northward_wind_neutral")', function() {
      // uncomment below and update the code to test the property northwardWindNeutral
      //var instance = new AtmosphereApi.AppApiWfsEndpointsWFSGetValues200Response();
      //expect(instance).to.be();
    });

    it('should have the property point (base name: "point")', function() {
      // uncomment below and update the code to test the property point
      //var instance = new AtmosphereApi.AppApiWfsEndpointsWFSGetValues200Response();
      //expect(instance).to.be();
    });

    it('should have the property tempNeutral (base name: "temp_neutral")', function() {
      // uncomment below and update the code to test the property tempNeutral
      //var instance = new AtmosphereApi.AppApiWfsEndpointsWFSGetValues200Response();
      //expect(instance).to.be();
    });

    it('should have the property totalMassDensity (base name: "total_mass_density")', function() {
      // uncomment below and update the code to test the property totalMassDensity
      //var instance = new AtmosphereApi.AppApiWfsEndpointsWFSGetValues200Response();
      //expect(instance).to.be();
    });

    it('should have the property upwardWindNeutral (base name: "upward_wind_neutral")', function() {
      // uncomment below and update the code to test the property upwardWindNeutral
      //var instance = new AtmosphereApi.AppApiWfsEndpointsWFSGetValues200Response();
      //expect(instance).to.be();
    });

  });

}));
