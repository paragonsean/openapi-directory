/**
 * Atmosphere API
 * Instantly access empirical models of atmospheric density and  composition that are recommended by the Committee on Space Research (COSPAR) for  satellite drag calculations. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2021. 
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppApiEndpointsJB2008SampleAtmosphere200Response from '../model/AppApiEndpointsJB2008SampleAtmosphere200Response';

/**
* Jb2008 service.
* @module api/Jb2008Api
* @version 1.1.1
*/
export default class Jb2008Api {

    /**
    * Constructs a new Jb2008Api. 
    * @alias module:api/Jb2008Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiEndpointsJB2008SampleAtmosphere operation.
     * @callback module:api/Jb2008Api~appApiEndpointsJB2008SampleAtmosphereCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppApiEndpointsJB2008SampleAtmosphere200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compute atmospheric density and temperatures 
     * under given conditions. 
     * @param {Number} year Year in YYYY format
     * @param {Number} month Month in MM format
     * @param {Number} day Day in DD format
     * @param {Number} altitude Altitude in (km)
     * @param {Number} geodeticLatitude GeodeticLatitude (deg) -90 to 90 deg
     * @param {Number} geodeticLongitude GeodeticLongitude (deg) 0 to 360 deg
     * @param {Number} utc Coordinated Universal Time (hrs)
     * @param {module:api/Jb2008Api~appApiEndpointsJB2008SampleAtmosphereCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppApiEndpointsJB2008SampleAtmosphere200Response}
     */
    appApiEndpointsJB2008SampleAtmosphere(year, month, day, altitude, geodeticLatitude, geodeticLongitude, utc, callback) {
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling appApiEndpointsJB2008SampleAtmosphere");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling appApiEndpointsJB2008SampleAtmosphere");
      }
      // verify the required parameter 'day' is set
      if (day === undefined || day === null) {
        throw new Error("Missing the required parameter 'day' when calling appApiEndpointsJB2008SampleAtmosphere");
      }
      // verify the required parameter 'altitude' is set
      if (altitude === undefined || altitude === null) {
        throw new Error("Missing the required parameter 'altitude' when calling appApiEndpointsJB2008SampleAtmosphere");
      }
      // verify the required parameter 'geodeticLatitude' is set
      if (geodeticLatitude === undefined || geodeticLatitude === null) {
        throw new Error("Missing the required parameter 'geodeticLatitude' when calling appApiEndpointsJB2008SampleAtmosphere");
      }
      // verify the required parameter 'geodeticLongitude' is set
      if (geodeticLongitude === undefined || geodeticLongitude === null) {
        throw new Error("Missing the required parameter 'geodeticLongitude' when calling appApiEndpointsJB2008SampleAtmosphere");
      }
      // verify the required parameter 'utc' is set
      if (utc === undefined || utc === null) {
        throw new Error("Missing the required parameter 'utc' when calling appApiEndpointsJB2008SampleAtmosphere");
      }

      let pathParams = {
      };
      let queryParams = {
        'year': year,
        'month': month,
        'day': day,
        'altitude': altitude,
        'geodetic_latitude': geodeticLatitude,
        'geodetic_longitude': geodeticLongitude,
        'utc': utc
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppApiEndpointsJB2008SampleAtmosphere200Response;
      return this.apiClient.callApi(
        '/jb2008', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
