/**
 * Atmosphere API
 * Instantly access empirical models of atmospheric density and  composition that are recommended by the Committee on Space Research (COSPAR) for  satellite drag calculations. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2021. 
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppApiEndpointsNRLMSISE00SampleAtmosphere200Response from '../model/AppApiEndpointsNRLMSISE00SampleAtmosphere200Response';

/**
* Nrlmsise00 service.
* @module api/Nrlmsise00Api
* @version 1.1.1
*/
export default class Nrlmsise00Api {

    /**
    * Constructs a new Nrlmsise00Api. 
    * @alias module:api/Nrlmsise00Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiEndpointsNRLMSISE00SampleAtmosphere operation.
     * @callback module:api/Nrlmsise00Api~appApiEndpointsNRLMSISE00SampleAtmosphereCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppApiEndpointsNRLMSISE00SampleAtmosphere200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compute atmospheric composition, density, and temperatures 
     * at specified conditions. 
     * @param {Number} year Year in YYYY format
     * @param {Number} month Month in MM format
     * @param {Number} day Day in DD format
     * @param {Number} altitude Altitude in (km)
     * @param {Number} geodeticLatitude GeodeticLatitude (deg) -90 to 90 deg
     * @param {Number} geodeticLongitude GeodeticLongitude (deg) 0 to 360 deg
     * @param {Number} utc Coordinated Universal Time (hrs)
     * @param {Object} opts Optional parameters
     * @param {Number} [f107a] (Optional) 81 day average of F10.7 flux (SFU) centered on the specified day. F107 and F107A values correspond to the 10.7 cm radio flux at the actual distance of Earth from Sun rather than radio flux at 1 AU. F107, F107A, AP effects can be neglected below 80 km. If unspecified, values provided by the US National Oceanic and  Atmospheric Administration are retrieved automatically. 
     * @param {Number} [f107] (Optional) Daily F10.7 cm radio flux for previous day (SFU). F107 and F107A values correspond to the 10.7 cm radio flux at the actual distance of Earth from Sun rather than radio flux at 1 AU. F107, F107A, AP effects can be neglected below 80 km. If unspecified, values provided by the US National Oceanic and  Atmospheric Administration are retrieved automatically. 
     * @param {Number} [ap] (Optional) The Ap-index provides a daily average level for geomagnetic activity F107, F107A, AP effects can be neglected below 80 km. If unspecified, the average of values in the 24 hours preceding the date-time  are automatically calculated from data provided by GFZ German Research Centre  for Geosciences. 
     * @param {module:api/Nrlmsise00Api~appApiEndpointsNRLMSISE00SampleAtmosphereCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppApiEndpointsNRLMSISE00SampleAtmosphere200Response}
     */
    appApiEndpointsNRLMSISE00SampleAtmosphere(year, month, day, altitude, geodeticLatitude, geodeticLongitude, utc, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling appApiEndpointsNRLMSISE00SampleAtmosphere");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling appApiEndpointsNRLMSISE00SampleAtmosphere");
      }
      // verify the required parameter 'day' is set
      if (day === undefined || day === null) {
        throw new Error("Missing the required parameter 'day' when calling appApiEndpointsNRLMSISE00SampleAtmosphere");
      }
      // verify the required parameter 'altitude' is set
      if (altitude === undefined || altitude === null) {
        throw new Error("Missing the required parameter 'altitude' when calling appApiEndpointsNRLMSISE00SampleAtmosphere");
      }
      // verify the required parameter 'geodeticLatitude' is set
      if (geodeticLatitude === undefined || geodeticLatitude === null) {
        throw new Error("Missing the required parameter 'geodeticLatitude' when calling appApiEndpointsNRLMSISE00SampleAtmosphere");
      }
      // verify the required parameter 'geodeticLongitude' is set
      if (geodeticLongitude === undefined || geodeticLongitude === null) {
        throw new Error("Missing the required parameter 'geodeticLongitude' when calling appApiEndpointsNRLMSISE00SampleAtmosphere");
      }
      // verify the required parameter 'utc' is set
      if (utc === undefined || utc === null) {
        throw new Error("Missing the required parameter 'utc' when calling appApiEndpointsNRLMSISE00SampleAtmosphere");
      }

      let pathParams = {
      };
      let queryParams = {
        'year': year,
        'month': month,
        'day': day,
        'altitude': altitude,
        'geodetic_latitude': geodeticLatitude,
        'geodetic_longitude': geodeticLongitude,
        'utc': utc,
        'f107a': opts['f107a'],
        'f107': opts['f107'],
        'ap': opts['ap']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppApiEndpointsNRLMSISE00SampleAtmosphere200Response;
      return this.apiClient.callApi(
        '/nrlmsise00', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
