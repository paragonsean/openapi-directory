/**
 * Atmosphere API
 * Instantly access empirical models of atmospheric density and  composition that are recommended by the Committee on Space Research (COSPAR) for  satellite drag calculations. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2021. 
 *
 * The version of the OpenAPI document: 1.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response() {
    this->initializeModel();
}

OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::~OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response() {}

void OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::initializeModel() {

    m_ar_density_isSet = false;
    m_ar_density_isValid = false;

    m_h_density_isSet = false;
    m_h_density_isValid = false;

    m_he_density_isSet = false;
    m_he_density_isValid = false;

    m_n2_density_isSet = false;
    m_n2_density_isValid = false;

    m_n_density_isSet = false;
    m_n_density_isValid = false;

    m_o2_density_isSet = false;
    m_o2_density_isValid = false;

    m_o_density_isSet = false;
    m_o_density_isValid = false;

    m_anomalous_o_density_isSet = false;
    m_anomalous_o_density_isValid = false;

    m_ap_isSet = false;
    m_ap_isValid = false;

    m_at_alt_temp_isSet = false;
    m_at_alt_temp_isValid = false;

    m_exospheric_temp_isSet = false;
    m_exospheric_temp_isValid = false;

    m_f107_isSet = false;
    m_f107_isValid = false;

    m_f107a_isSet = false;
    m_f107a_isValid = false;

    m_total_mass_density_isSet = false;
    m_total_mass_density_isValid = false;
}

void OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::fromJsonObject(QJsonObject json) {

    m_ar_density_isValid = ::OpenAPI::fromJsonValue(m_ar_density, json[QString("Ar_density")]);
    m_ar_density_isSet = !json[QString("Ar_density")].isNull() && m_ar_density_isValid;

    m_h_density_isValid = ::OpenAPI::fromJsonValue(m_h_density, json[QString("H_density")]);
    m_h_density_isSet = !json[QString("H_density")].isNull() && m_h_density_isValid;

    m_he_density_isValid = ::OpenAPI::fromJsonValue(m_he_density, json[QString("He_density")]);
    m_he_density_isSet = !json[QString("He_density")].isNull() && m_he_density_isValid;

    m_n2_density_isValid = ::OpenAPI::fromJsonValue(m_n2_density, json[QString("N2_density")]);
    m_n2_density_isSet = !json[QString("N2_density")].isNull() && m_n2_density_isValid;

    m_n_density_isValid = ::OpenAPI::fromJsonValue(m_n_density, json[QString("N_density")]);
    m_n_density_isSet = !json[QString("N_density")].isNull() && m_n_density_isValid;

    m_o2_density_isValid = ::OpenAPI::fromJsonValue(m_o2_density, json[QString("O2_density")]);
    m_o2_density_isSet = !json[QString("O2_density")].isNull() && m_o2_density_isValid;

    m_o_density_isValid = ::OpenAPI::fromJsonValue(m_o_density, json[QString("O_density")]);
    m_o_density_isSet = !json[QString("O_density")].isNull() && m_o_density_isValid;

    m_anomalous_o_density_isValid = ::OpenAPI::fromJsonValue(m_anomalous_o_density, json[QString("anomalous_O_density")]);
    m_anomalous_o_density_isSet = !json[QString("anomalous_O_density")].isNull() && m_anomalous_o_density_isValid;

    m_ap_isValid = ::OpenAPI::fromJsonValue(m_ap, json[QString("ap")]);
    m_ap_isSet = !json[QString("ap")].isNull() && m_ap_isValid;

    m_at_alt_temp_isValid = ::OpenAPI::fromJsonValue(m_at_alt_temp, json[QString("at_alt_temp")]);
    m_at_alt_temp_isSet = !json[QString("at_alt_temp")].isNull() && m_at_alt_temp_isValid;

    m_exospheric_temp_isValid = ::OpenAPI::fromJsonValue(m_exospheric_temp, json[QString("exospheric_temp")]);
    m_exospheric_temp_isSet = !json[QString("exospheric_temp")].isNull() && m_exospheric_temp_isValid;

    m_f107_isValid = ::OpenAPI::fromJsonValue(m_f107, json[QString("f107")]);
    m_f107_isSet = !json[QString("f107")].isNull() && m_f107_isValid;

    m_f107a_isValid = ::OpenAPI::fromJsonValue(m_f107a, json[QString("f107a")]);
    m_f107a_isSet = !json[QString("f107a")].isNull() && m_f107a_isValid;

    m_total_mass_density_isValid = ::OpenAPI::fromJsonValue(m_total_mass_density, json[QString("total_mass_density")]);
    m_total_mass_density_isSet = !json[QString("total_mass_density")].isNull() && m_total_mass_density_isValid;
}

QString OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_ar_density.isSet()) {
        obj.insert(QString("Ar_density"), ::OpenAPI::toJsonValue(m_ar_density));
    }
    if (m_h_density.isSet()) {
        obj.insert(QString("H_density"), ::OpenAPI::toJsonValue(m_h_density));
    }
    if (m_he_density.isSet()) {
        obj.insert(QString("He_density"), ::OpenAPI::toJsonValue(m_he_density));
    }
    if (m_n2_density.isSet()) {
        obj.insert(QString("N2_density"), ::OpenAPI::toJsonValue(m_n2_density));
    }
    if (m_n_density.isSet()) {
        obj.insert(QString("N_density"), ::OpenAPI::toJsonValue(m_n_density));
    }
    if (m_o2_density.isSet()) {
        obj.insert(QString("O2_density"), ::OpenAPI::toJsonValue(m_o2_density));
    }
    if (m_o_density.isSet()) {
        obj.insert(QString("O_density"), ::OpenAPI::toJsonValue(m_o_density));
    }
    if (m_anomalous_o_density.isSet()) {
        obj.insert(QString("anomalous_O_density"), ::OpenAPI::toJsonValue(m_anomalous_o_density));
    }
    if (m_ap.isSet()) {
        obj.insert(QString("ap"), ::OpenAPI::toJsonValue(m_ap));
    }
    if (m_at_alt_temp.isSet()) {
        obj.insert(QString("at_alt_temp"), ::OpenAPI::toJsonValue(m_at_alt_temp));
    }
    if (m_exospheric_temp.isSet()) {
        obj.insert(QString("exospheric_temp"), ::OpenAPI::toJsonValue(m_exospheric_temp));
    }
    if (m_f107.isSet()) {
        obj.insert(QString("f107"), ::OpenAPI::toJsonValue(m_f107));
    }
    if (m_f107a.isSet()) {
        obj.insert(QString("f107a"), ::OpenAPI::toJsonValue(m_f107a));
    }
    if (m_total_mass_density.isSet()) {
        obj.insert(QString("total_mass_density"), ::OpenAPI::toJsonValue(m_total_mass_density));
    }
    return obj;
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::getArDensity() const {
    return m_ar_density;
}
void OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::setArDensity(const OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp &ar_density) {
    m_ar_density = ar_density;
    m_ar_density_isSet = true;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_ar_density_Set() const{
    return m_ar_density_isSet;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_ar_density_Valid() const{
    return m_ar_density_isValid;
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::getHDensity() const {
    return m_h_density;
}
void OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::setHDensity(const OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp &h_density) {
    m_h_density = h_density;
    m_h_density_isSet = true;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_h_density_Set() const{
    return m_h_density_isSet;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_h_density_Valid() const{
    return m_h_density_isValid;
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::getHeDensity() const {
    return m_he_density;
}
void OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::setHeDensity(const OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp &he_density) {
    m_he_density = he_density;
    m_he_density_isSet = true;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_he_density_Set() const{
    return m_he_density_isSet;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_he_density_Valid() const{
    return m_he_density_isValid;
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::getN2Density() const {
    return m_n2_density;
}
void OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::setN2Density(const OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp &n2_density) {
    m_n2_density = n2_density;
    m_n2_density_isSet = true;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_n2_density_Set() const{
    return m_n2_density_isSet;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_n2_density_Valid() const{
    return m_n2_density_isValid;
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::getNDensity() const {
    return m_n_density;
}
void OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::setNDensity(const OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp &n_density) {
    m_n_density = n_density;
    m_n_density_isSet = true;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_n_density_Set() const{
    return m_n_density_isSet;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_n_density_Valid() const{
    return m_n_density_isValid;
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::getO2Density() const {
    return m_o2_density;
}
void OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::setO2Density(const OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp &o2_density) {
    m_o2_density = o2_density;
    m_o2_density_isSet = true;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_o2_density_Set() const{
    return m_o2_density_isSet;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_o2_density_Valid() const{
    return m_o2_density_isValid;
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::getODensity() const {
    return m_o_density;
}
void OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::setODensity(const OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp &o_density) {
    m_o_density = o_density;
    m_o_density_isSet = true;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_o_density_Set() const{
    return m_o_density_isSet;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_o_density_Valid() const{
    return m_o_density_isValid;
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::getAnomalousODensity() const {
    return m_anomalous_o_density;
}
void OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::setAnomalousODensity(const OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp &anomalous_o_density) {
    m_anomalous_o_density = anomalous_o_density;
    m_anomalous_o_density_isSet = true;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_anomalous_o_density_Set() const{
    return m_anomalous_o_density_isSet;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_anomalous_o_density_Valid() const{
    return m_anomalous_o_density_isValid;
}

OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response_ap OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::getAp() const {
    return m_ap;
}
void OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::setAp(const OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response_ap &ap) {
    m_ap = ap;
    m_ap_isSet = true;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_ap_Set() const{
    return m_ap_isSet;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_ap_Valid() const{
    return m_ap_isValid;
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::getAtAltTemp() const {
    return m_at_alt_temp;
}
void OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::setAtAltTemp(const OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp &at_alt_temp) {
    m_at_alt_temp = at_alt_temp;
    m_at_alt_temp_isSet = true;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_at_alt_temp_Set() const{
    return m_at_alt_temp_isSet;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_at_alt_temp_Valid() const{
    return m_at_alt_temp_isValid;
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::getExosphericTemp() const {
    return m_exospheric_temp;
}
void OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::setExosphericTemp(const OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp &exospheric_temp) {
    m_exospheric_temp = exospheric_temp;
    m_exospheric_temp_isSet = true;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_exospheric_temp_Set() const{
    return m_exospheric_temp_isSet;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_exospheric_temp_Valid() const{
    return m_exospheric_temp_isValid;
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::getF107() const {
    return m_f107;
}
void OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::setF107(const OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp &f107) {
    m_f107 = f107;
    m_f107_isSet = true;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_f107_Set() const{
    return m_f107_isSet;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_f107_Valid() const{
    return m_f107_isValid;
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::getF107a() const {
    return m_f107a;
}
void OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::setF107a(const OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp &f107a) {
    m_f107a = f107a;
    m_f107a_isSet = true;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_f107a_Set() const{
    return m_f107a_isSet;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_f107a_Valid() const{
    return m_f107a_isValid;
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::getTotalMassDensity() const {
    return m_total_mass_density;
}
void OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::setTotalMassDensity(const OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp &total_mass_density) {
    m_total_mass_density = total_mass_density;
    m_total_mass_density_isSet = true;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_total_mass_density_Set() const{
    return m_total_mass_density_isSet;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::is_total_mass_density_Valid() const{
    return m_total_mass_density_isValid;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ar_density.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_h_density.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_he_density.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_n2_density.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_n_density.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_o2_density.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_o_density.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomalous_o_density.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ap.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_at_alt_temp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exospheric_temp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_f107.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_f107a.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_mass_density.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApp_api_endpoints_NRLMSISE00_sample_atmosphere_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
