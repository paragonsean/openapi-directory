/**
 * Atmosphere API
 * Instantly access empirical models of atmospheric density and  composition that are recommended by the Committee on Space Research (COSPAR) for  satellite drag calculations. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2021. 
 *
 * The version of the OpenAPI document: 1.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response() {
    this->initializeModel();
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::~OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response() {}

void OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::initializeModel() {

    m_at_alt_temp_isSet = false;
    m_at_alt_temp_isValid = false;

    m_exospheric_temp_isSet = false;
    m_exospheric_temp_isValid = false;

    m_total_mass_density_isSet = false;
    m_total_mass_density_isValid = false;
}

void OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::fromJsonObject(QJsonObject json) {

    m_at_alt_temp_isValid = ::OpenAPI::fromJsonValue(m_at_alt_temp, json[QString("at_alt_temp")]);
    m_at_alt_temp_isSet = !json[QString("at_alt_temp")].isNull() && m_at_alt_temp_isValid;

    m_exospheric_temp_isValid = ::OpenAPI::fromJsonValue(m_exospheric_temp, json[QString("exospheric_temp")]);
    m_exospheric_temp_isSet = !json[QString("exospheric_temp")].isNull() && m_exospheric_temp_isValid;

    m_total_mass_density_isValid = ::OpenAPI::fromJsonValue(m_total_mass_density, json[QString("total_mass_density")]);
    m_total_mass_density_isSet = !json[QString("total_mass_density")].isNull() && m_total_mass_density_isValid;
}

QString OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_at_alt_temp.isSet()) {
        obj.insert(QString("at_alt_temp"), ::OpenAPI::toJsonValue(m_at_alt_temp));
    }
    if (m_exospheric_temp.isSet()) {
        obj.insert(QString("exospheric_temp"), ::OpenAPI::toJsonValue(m_exospheric_temp));
    }
    if (m_total_mass_density.isSet()) {
        obj.insert(QString("total_mass_density"), ::OpenAPI::toJsonValue(m_total_mass_density));
    }
    return obj;
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::getAtAltTemp() const {
    return m_at_alt_temp;
}
void OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::setAtAltTemp(const OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp &at_alt_temp) {
    m_at_alt_temp = at_alt_temp;
    m_at_alt_temp_isSet = true;
}

bool OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::is_at_alt_temp_Set() const{
    return m_at_alt_temp_isSet;
}

bool OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::is_at_alt_temp_Valid() const{
    return m_at_alt_temp_isValid;
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::getExosphericTemp() const {
    return m_exospheric_temp;
}
void OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::setExosphericTemp(const OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp &exospheric_temp) {
    m_exospheric_temp = exospheric_temp;
    m_exospheric_temp_isSet = true;
}

bool OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::is_exospheric_temp_Set() const{
    return m_exospheric_temp_isSet;
}

bool OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::is_exospheric_temp_Valid() const{
    return m_exospheric_temp_isValid;
}

OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::getTotalMassDensity() const {
    return m_total_mass_density;
}
void OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::setTotalMassDensity(const OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response_at_alt_temp &total_mass_density) {
    m_total_mass_density = total_mass_density;
    m_total_mass_density_isSet = true;
}

bool OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::is_total_mass_density_Set() const{
    return m_total_mass_density_isSet;
}

bool OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::is_total_mass_density_Valid() const{
    return m_total_mass_density_isValid;
}

bool OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_at_alt_temp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exospheric_temp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_mass_density.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApp_api_endpoints_JB2008_sample_atmosphere_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
