/**
 * Atmosphere API
 * Instantly access empirical models of atmospheric density and  composition that are recommended by the Committee on Space Research (COSPAR) for  satellite drag calculations. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2021. 
 *
 * The version of the OpenAPI document: 1.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density() {
    this->initializeModel();
}

OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::~OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density() {}

void OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::initializeModel() {

    m_units_isSet = false;
    m_units_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::fromJsonObject(QJsonObject json) {

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::asJsonObject() const {
    QJsonObject obj;
    if (m_units_isSet) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::getUnits() const {
    return m_units;
}
void OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::setUnits(const QString &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::is_units_Set() const{
    return m_units_isSet;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::is_units_Valid() const{
    return m_units_isValid;
}

double OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::getValue() const {
    return m_value;
}
void OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::is_value_Set() const{
    return m_value_isSet;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
