/**
 * Atmosphere API
 * Instantly access empirical models of atmospheric density and  composition that are recommended by the Committee on Space Research (COSPAR) for  satellite drag calculations. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2021. 
 *
 * The version of the OpenAPI document: 1.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWamIpeApi_H
#define OAI_OAIWamIpeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApp_api_wfs_endpoints_WFS_get_values_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWamIpeApi : public QObject {
    Q_OBJECT

public:
    OAIWamIpeApi(const int timeOut = 0);
    ~OAIWamIpeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  latitude double [required]
    * @param[in]  longitude double [required]
    * @param[in]  altitude double [required]
    * @param[in]  year qint32 [required]
    * @param[in]  month qint32 [required]
    * @param[in]  day qint32 [required]
    * @param[in]  hour qint32 [required]
    * @param[in]  minute qint32 [required]
    */
    virtual void app_apiWfs_endpoints_WFS_getValues(const double &latitude, const double &longitude, const double &altitude, const qint32 &year, const qint32 &month, const qint32 &day, const qint32 &hour, const qint32 &minute);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void app_apiWfs_endpoints_WFS_getValuesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void app_apiWfs_endpoints_WFS_getValuesSignal(OAIApp_api_wfs_endpoints_WFS_get_values_200_response summary);


    void app_apiWfs_endpoints_WFS_getValuesSignalFull(OAIHttpRequestWorker *worker, OAIApp_api_wfs_endpoints_WFS_get_values_200_response summary);

    Q_DECL_DEPRECATED_X("Use app_apiWfs_endpoints_WFS_getValuesSignalError() instead")
    void app_apiWfs_endpoints_WFS_getValuesSignalE(OAIApp_api_wfs_endpoints_WFS_get_values_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void app_apiWfs_endpoints_WFS_getValuesSignalError(OAIApp_api_wfs_endpoints_WFS_get_values_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use app_apiWfs_endpoints_WFS_getValuesSignalErrorFull() instead")
    void app_apiWfs_endpoints_WFS_getValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void app_apiWfs_endpoints_WFS_getValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
