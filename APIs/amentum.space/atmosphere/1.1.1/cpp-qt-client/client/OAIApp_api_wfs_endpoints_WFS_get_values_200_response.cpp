/**
 * Atmosphere API
 * Instantly access empirical models of atmospheric density and  composition that are recommended by the Committee on Space Research (COSPAR) for  satellite drag calculations. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2021. 
 *
 * The version of the OpenAPI document: 1.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApp_api_wfs_endpoints_WFS_get_values_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApp_api_wfs_endpoints_WFS_get_values_200_response::OAIApp_api_wfs_endpoints_WFS_get_values_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApp_api_wfs_endpoints_WFS_get_values_200_response::OAIApp_api_wfs_endpoints_WFS_get_values_200_response() {
    this->initializeModel();
}

OAIApp_api_wfs_endpoints_WFS_get_values_200_response::~OAIApp_api_wfs_endpoints_WFS_get_values_200_response() {}

void OAIApp_api_wfs_endpoints_WFS_get_values_200_response::initializeModel() {

    m_n2_density_isSet = false;
    m_n2_density_isValid = false;

    m_o2_density_isSet = false;
    m_o2_density_isValid = false;

    m_o_density_isSet = false;
    m_o_density_isValid = false;

    m_eastward_wind_neutral_isSet = false;
    m_eastward_wind_neutral_isValid = false;

    m_northward_wind_neutral_isSet = false;
    m_northward_wind_neutral_isValid = false;

    m_point_isSet = false;
    m_point_isValid = false;

    m_temp_neutral_isSet = false;
    m_temp_neutral_isValid = false;

    m_total_mass_density_isSet = false;
    m_total_mass_density_isValid = false;

    m_upward_wind_neutral_isSet = false;
    m_upward_wind_neutral_isValid = false;
}

void OAIApp_api_wfs_endpoints_WFS_get_values_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApp_api_wfs_endpoints_WFS_get_values_200_response::fromJsonObject(QJsonObject json) {

    m_n2_density_isValid = ::OpenAPI::fromJsonValue(m_n2_density, json[QString("N2_density")]);
    m_n2_density_isSet = !json[QString("N2_density")].isNull() && m_n2_density_isValid;

    m_o2_density_isValid = ::OpenAPI::fromJsonValue(m_o2_density, json[QString("O2_density")]);
    m_o2_density_isSet = !json[QString("O2_density")].isNull() && m_o2_density_isValid;

    m_o_density_isValid = ::OpenAPI::fromJsonValue(m_o_density, json[QString("O_density")]);
    m_o_density_isSet = !json[QString("O_density")].isNull() && m_o_density_isValid;

    m_eastward_wind_neutral_isValid = ::OpenAPI::fromJsonValue(m_eastward_wind_neutral, json[QString("eastward_wind_neutral")]);
    m_eastward_wind_neutral_isSet = !json[QString("eastward_wind_neutral")].isNull() && m_eastward_wind_neutral_isValid;

    m_northward_wind_neutral_isValid = ::OpenAPI::fromJsonValue(m_northward_wind_neutral, json[QString("northward_wind_neutral")]);
    m_northward_wind_neutral_isSet = !json[QString("northward_wind_neutral")].isNull() && m_northward_wind_neutral_isValid;

    m_point_isValid = ::OpenAPI::fromJsonValue(m_point, json[QString("point")]);
    m_point_isSet = !json[QString("point")].isNull() && m_point_isValid;

    m_temp_neutral_isValid = ::OpenAPI::fromJsonValue(m_temp_neutral, json[QString("temp_neutral")]);
    m_temp_neutral_isSet = !json[QString("temp_neutral")].isNull() && m_temp_neutral_isValid;

    m_total_mass_density_isValid = ::OpenAPI::fromJsonValue(m_total_mass_density, json[QString("total_mass_density")]);
    m_total_mass_density_isSet = !json[QString("total_mass_density")].isNull() && m_total_mass_density_isValid;

    m_upward_wind_neutral_isValid = ::OpenAPI::fromJsonValue(m_upward_wind_neutral, json[QString("upward_wind_neutral")]);
    m_upward_wind_neutral_isSet = !json[QString("upward_wind_neutral")].isNull() && m_upward_wind_neutral_isValid;
}

QString OAIApp_api_wfs_endpoints_WFS_get_values_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApp_api_wfs_endpoints_WFS_get_values_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_n2_density.isSet()) {
        obj.insert(QString("N2_density"), ::OpenAPI::toJsonValue(m_n2_density));
    }
    if (m_o2_density.isSet()) {
        obj.insert(QString("O2_density"), ::OpenAPI::toJsonValue(m_o2_density));
    }
    if (m_o_density.isSet()) {
        obj.insert(QString("O_density"), ::OpenAPI::toJsonValue(m_o_density));
    }
    if (m_eastward_wind_neutral.isSet()) {
        obj.insert(QString("eastward_wind_neutral"), ::OpenAPI::toJsonValue(m_eastward_wind_neutral));
    }
    if (m_northward_wind_neutral.isSet()) {
        obj.insert(QString("northward_wind_neutral"), ::OpenAPI::toJsonValue(m_northward_wind_neutral));
    }
    if (m_point.isSet()) {
        obj.insert(QString("point"), ::OpenAPI::toJsonValue(m_point));
    }
    if (m_temp_neutral.isSet()) {
        obj.insert(QString("temp_neutral"), ::OpenAPI::toJsonValue(m_temp_neutral));
    }
    if (m_total_mass_density.isSet()) {
        obj.insert(QString("total_mass_density"), ::OpenAPI::toJsonValue(m_total_mass_density));
    }
    if (m_upward_wind_neutral.isSet()) {
        obj.insert(QString("upward_wind_neutral"), ::OpenAPI::toJsonValue(m_upward_wind_neutral));
    }
    return obj;
}

OAIApp_api_wfs_endpoints_WFS_get_values_200_response_N2_density OAIApp_api_wfs_endpoints_WFS_get_values_200_response::getN2Density() const {
    return m_n2_density;
}
void OAIApp_api_wfs_endpoints_WFS_get_values_200_response::setN2Density(const OAIApp_api_wfs_endpoints_WFS_get_values_200_response_N2_density &n2_density) {
    m_n2_density = n2_density;
    m_n2_density_isSet = true;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_n2_density_Set() const{
    return m_n2_density_isSet;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_n2_density_Valid() const{
    return m_n2_density_isValid;
}

OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density OAIApp_api_wfs_endpoints_WFS_get_values_200_response::getO2Density() const {
    return m_o2_density;
}
void OAIApp_api_wfs_endpoints_WFS_get_values_200_response::setO2Density(const OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O2_density &o2_density) {
    m_o2_density = o2_density;
    m_o2_density_isSet = true;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_o2_density_Set() const{
    return m_o2_density_isSet;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_o2_density_Valid() const{
    return m_o2_density_isValid;
}

OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O_density OAIApp_api_wfs_endpoints_WFS_get_values_200_response::getODensity() const {
    return m_o_density;
}
void OAIApp_api_wfs_endpoints_WFS_get_values_200_response::setODensity(const OAIApp_api_wfs_endpoints_WFS_get_values_200_response_O_density &o_density) {
    m_o_density = o_density;
    m_o_density_isSet = true;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_o_density_Set() const{
    return m_o_density_isSet;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_o_density_Valid() const{
    return m_o_density_isValid;
}

OAIApp_api_wfs_endpoints_WFS_get_values_200_response_eastward_wind_neutral OAIApp_api_wfs_endpoints_WFS_get_values_200_response::getEastwardWindNeutral() const {
    return m_eastward_wind_neutral;
}
void OAIApp_api_wfs_endpoints_WFS_get_values_200_response::setEastwardWindNeutral(const OAIApp_api_wfs_endpoints_WFS_get_values_200_response_eastward_wind_neutral &eastward_wind_neutral) {
    m_eastward_wind_neutral = eastward_wind_neutral;
    m_eastward_wind_neutral_isSet = true;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_eastward_wind_neutral_Set() const{
    return m_eastward_wind_neutral_isSet;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_eastward_wind_neutral_Valid() const{
    return m_eastward_wind_neutral_isValid;
}

OAIApp_api_wfs_endpoints_WFS_get_values_200_response_northward_wind_neutral OAIApp_api_wfs_endpoints_WFS_get_values_200_response::getNorthwardWindNeutral() const {
    return m_northward_wind_neutral;
}
void OAIApp_api_wfs_endpoints_WFS_get_values_200_response::setNorthwardWindNeutral(const OAIApp_api_wfs_endpoints_WFS_get_values_200_response_northward_wind_neutral &northward_wind_neutral) {
    m_northward_wind_neutral = northward_wind_neutral;
    m_northward_wind_neutral_isSet = true;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_northward_wind_neutral_Set() const{
    return m_northward_wind_neutral_isSet;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_northward_wind_neutral_Valid() const{
    return m_northward_wind_neutral_isValid;
}

OAIApp_api_wfs_endpoints_WFS_get_values_200_response_point OAIApp_api_wfs_endpoints_WFS_get_values_200_response::getPoint() const {
    return m_point;
}
void OAIApp_api_wfs_endpoints_WFS_get_values_200_response::setPoint(const OAIApp_api_wfs_endpoints_WFS_get_values_200_response_point &point) {
    m_point = point;
    m_point_isSet = true;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_point_Set() const{
    return m_point_isSet;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_point_Valid() const{
    return m_point_isValid;
}

OAIApp_api_wfs_endpoints_WFS_get_values_200_response_temp_neutral OAIApp_api_wfs_endpoints_WFS_get_values_200_response::getTempNeutral() const {
    return m_temp_neutral;
}
void OAIApp_api_wfs_endpoints_WFS_get_values_200_response::setTempNeutral(const OAIApp_api_wfs_endpoints_WFS_get_values_200_response_temp_neutral &temp_neutral) {
    m_temp_neutral = temp_neutral;
    m_temp_neutral_isSet = true;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_temp_neutral_Set() const{
    return m_temp_neutral_isSet;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_temp_neutral_Valid() const{
    return m_temp_neutral_isValid;
}

OAIApp_api_wfs_endpoints_WFS_get_values_200_response_total_mass_density OAIApp_api_wfs_endpoints_WFS_get_values_200_response::getTotalMassDensity() const {
    return m_total_mass_density;
}
void OAIApp_api_wfs_endpoints_WFS_get_values_200_response::setTotalMassDensity(const OAIApp_api_wfs_endpoints_WFS_get_values_200_response_total_mass_density &total_mass_density) {
    m_total_mass_density = total_mass_density;
    m_total_mass_density_isSet = true;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_total_mass_density_Set() const{
    return m_total_mass_density_isSet;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_total_mass_density_Valid() const{
    return m_total_mass_density_isValid;
}

OAIApp_api_wfs_endpoints_WFS_get_values_200_response_upward_wind_neutral OAIApp_api_wfs_endpoints_WFS_get_values_200_response::getUpwardWindNeutral() const {
    return m_upward_wind_neutral;
}
void OAIApp_api_wfs_endpoints_WFS_get_values_200_response::setUpwardWindNeutral(const OAIApp_api_wfs_endpoints_WFS_get_values_200_response_upward_wind_neutral &upward_wind_neutral) {
    m_upward_wind_neutral = upward_wind_neutral;
    m_upward_wind_neutral_isSet = true;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_upward_wind_neutral_Set() const{
    return m_upward_wind_neutral_isSet;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::is_upward_wind_neutral_Valid() const{
    return m_upward_wind_neutral_isValid;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_n2_density.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_o2_density.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_o_density.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eastward_wind_neutral.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_northward_wind_neutral.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_temp_neutral.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_mass_density.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upward_wind_neutral.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApp_api_wfs_endpoints_WFS_get_values_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
