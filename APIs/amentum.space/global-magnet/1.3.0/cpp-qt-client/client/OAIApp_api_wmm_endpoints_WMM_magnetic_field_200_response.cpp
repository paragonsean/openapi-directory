/**
 * Geomag API
 *  The World Magnetic Model calculates the intensity and direction of the Earth's magnetic field on a specific date-time, geodetic altitude, latitude, and longitude. It is relied upon throughout the world for navigation, mineral exploration, atmospheric and space science, and is installed on billions of devices.  <br><br> A comprehensive description of the World Magnetic Model, including its  limitations, can be found <a href='https://www.ngdc.noaa.gov/geomag/WMM/'>here</a>.  <br><br> We provide a RESTful API to access the out-of-cycle  World Magnetic Model (WMM2015v2) valid for years 2015.0 - 2020.0 and WMM2020 valid for years 2020.0 - 2025.0<br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2021. 
 *
 * The version of the OpenAPI document: 1.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response() {
    this->initializeModel();
}

OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::~OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response() {}

void OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::initializeModel() {

    m_declination_isSet = false;
    m_declination_isValid = false;

    m_grid_variation_isSet = false;
    m_grid_variation_isValid = false;

    m_inclination_isSet = false;
    m_inclination_isValid = false;

    m_total_intensity_isSet = false;
    m_total_intensity_isValid = false;
}

void OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::fromJsonObject(QJsonObject json) {

    m_declination_isValid = ::OpenAPI::fromJsonValue(m_declination, json[QString("declination")]);
    m_declination_isSet = !json[QString("declination")].isNull() && m_declination_isValid;

    m_grid_variation_isValid = ::OpenAPI::fromJsonValue(m_grid_variation, json[QString("grid_variation")]);
    m_grid_variation_isSet = !json[QString("grid_variation")].isNull() && m_grid_variation_isValid;

    m_inclination_isValid = ::OpenAPI::fromJsonValue(m_inclination, json[QString("inclination")]);
    m_inclination_isSet = !json[QString("inclination")].isNull() && m_inclination_isValid;

    m_total_intensity_isValid = ::OpenAPI::fromJsonValue(m_total_intensity, json[QString("total_intensity")]);
    m_total_intensity_isSet = !json[QString("total_intensity")].isNull() && m_total_intensity_isValid;
}

QString OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_declination.isSet()) {
        obj.insert(QString("declination"), ::OpenAPI::toJsonValue(m_declination));
    }
    if (m_grid_variation.isSet()) {
        obj.insert(QString("grid_variation"), ::OpenAPI::toJsonValue(m_grid_variation));
    }
    if (m_inclination.isSet()) {
        obj.insert(QString("inclination"), ::OpenAPI::toJsonValue(m_inclination));
    }
    if (m_total_intensity.isSet()) {
        obj.insert(QString("total_intensity"), ::OpenAPI::toJsonValue(m_total_intensity));
    }
    return obj;
}

OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response_declination OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::getDeclination() const {
    return m_declination;
}
void OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::setDeclination(const OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response_declination &declination) {
    m_declination = declination;
    m_declination_isSet = true;
}

bool OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::is_declination_Set() const{
    return m_declination_isSet;
}

bool OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::is_declination_Valid() const{
    return m_declination_isValid;
}

OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response_grid_variation OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::getGridVariation() const {
    return m_grid_variation;
}
void OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::setGridVariation(const OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response_grid_variation &grid_variation) {
    m_grid_variation = grid_variation;
    m_grid_variation_isSet = true;
}

bool OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::is_grid_variation_Set() const{
    return m_grid_variation_isSet;
}

bool OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::is_grid_variation_Valid() const{
    return m_grid_variation_isValid;
}

OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response_inclination OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::getInclination() const {
    return m_inclination;
}
void OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::setInclination(const OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response_inclination &inclination) {
    m_inclination = inclination;
    m_inclination_isSet = true;
}

bool OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::is_inclination_Set() const{
    return m_inclination_isSet;
}

bool OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::is_inclination_Valid() const{
    return m_inclination_isValid;
}

OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response_total_intensity OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::getTotalIntensity() const {
    return m_total_intensity;
}
void OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::setTotalIntensity(const OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response_total_intensity &total_intensity) {
    m_total_intensity = total_intensity;
    m_total_intensity_isSet = true;
}

bool OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::is_total_intensity_Set() const{
    return m_total_intensity_isSet;
}

bool OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::is_total_intensity_Valid() const{
    return m_total_intensity_isValid;
}

bool OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_declination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grid_variation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_intensity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApp_api_wmm_endpoints_WMM_magnetic_field_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
