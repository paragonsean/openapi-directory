/*
 * Gravity API
 * The gravitational field of the earth is non-uniform.  The <a href='https://en.wikipedia.org/wiki/Geoid'>geoid</a> is the shape the  ocean surface would take if only gravity and the rotation of the Earth   were considered. The geoid is the surface that defines zero elevation.<br><br>  The geoid height is the difference between an ideal reference ellipsoid  and the geoid.<br><br> The gravity anomaly is the difference between the acceleration due to gravity on the Earth's surface and the value calculated assuming the reference ellipsoid.<br><br> The official Earth Gravitational Model <a href=https://en.wikipedia.org/wiki/Earth_Gravitational_Model#EGM2008/>EGM2008</a> was developed and  released to the public by the National Geospatial-Intelligence Agency (NGA).<br><br> Our EGM2008 API provides on-demand access to the EGM2008 model, as implemented by the open-source GeographicLib  <a href=https://geographiclib.sourceforge.io/html/gravity.html>Gravity</a> library.<br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2021. 
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Anomaly;
import java.math.BigDecimal;
import org.openapitools.client.model.Height;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Egm2008Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Egm2008Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Egm2008Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appApiEgm2008EndpointsEGM2008CalculateAnomaly
     * @param latitude Geographic latitude (-90 to 90 deg). (required)
     * @param longitude Geographic longitude (-180 to 180 deg). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful anomaly calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiEgm2008EndpointsEGM2008CalculateAnomalyCall(BigDecimal latitude, BigDecimal longitude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/egm2008/gravity_anomaly";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appApiEgm2008EndpointsEGM2008CalculateAnomalyValidateBeforeCall(BigDecimal latitude, BigDecimal longitude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling appApiEgm2008EndpointsEGM2008CalculateAnomaly(Async)");
        }

        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling appApiEgm2008EndpointsEGM2008CalculateAnomaly(Async)");
        }

        return appApiEgm2008EndpointsEGM2008CalculateAnomalyCall(latitude, longitude, _callback);

    }

    /**
     * Calculate gravity anomaly values 
     * for a given latitude / longitude. 
     * @param latitude Geographic latitude (-90 to 90 deg). (required)
     * @param longitude Geographic longitude (-180 to 180 deg). (required)
     * @return Anomaly
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful anomaly calculation </td><td>  -  </td></tr>
     </table>
     */
    public Anomaly appApiEgm2008EndpointsEGM2008CalculateAnomaly(BigDecimal latitude, BigDecimal longitude) throws ApiException {
        ApiResponse<Anomaly> localVarResp = appApiEgm2008EndpointsEGM2008CalculateAnomalyWithHttpInfo(latitude, longitude);
        return localVarResp.getData();
    }

    /**
     * Calculate gravity anomaly values 
     * for a given latitude / longitude. 
     * @param latitude Geographic latitude (-90 to 90 deg). (required)
     * @param longitude Geographic longitude (-180 to 180 deg). (required)
     * @return ApiResponse&lt;Anomaly&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful anomaly calculation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Anomaly> appApiEgm2008EndpointsEGM2008CalculateAnomalyWithHttpInfo(BigDecimal latitude, BigDecimal longitude) throws ApiException {
        okhttp3.Call localVarCall = appApiEgm2008EndpointsEGM2008CalculateAnomalyValidateBeforeCall(latitude, longitude, null);
        Type localVarReturnType = new TypeToken<Anomaly>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate gravity anomaly values  (asynchronously)
     * for a given latitude / longitude. 
     * @param latitude Geographic latitude (-90 to 90 deg). (required)
     * @param longitude Geographic longitude (-180 to 180 deg). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful anomaly calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiEgm2008EndpointsEGM2008CalculateAnomalyAsync(BigDecimal latitude, BigDecimal longitude, final ApiCallback<Anomaly> _callback) throws ApiException {

        okhttp3.Call localVarCall = appApiEgm2008EndpointsEGM2008CalculateAnomalyValidateBeforeCall(latitude, longitude, _callback);
        Type localVarReturnType = new TypeToken<Anomaly>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appApiEgm2008EndpointsEGM2008CalculateHeight
     * @param latitude Geographic latitude (-90 to 90 deg). (required)
     * @param longitude Geographic longitude (-180 to 180 deg). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful geoid height calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiEgm2008EndpointsEGM2008CalculateHeightCall(BigDecimal latitude, BigDecimal longitude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/egm2008/geoid_height";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appApiEgm2008EndpointsEGM2008CalculateHeightValidateBeforeCall(BigDecimal latitude, BigDecimal longitude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling appApiEgm2008EndpointsEGM2008CalculateHeight(Async)");
        }

        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling appApiEgm2008EndpointsEGM2008CalculateHeight(Async)");
        }

        return appApiEgm2008EndpointsEGM2008CalculateHeightCall(latitude, longitude, _callback);

    }

    /**
     * Calculate the geoid height 
     * for a given latitude / longitude.  
     * @param latitude Geographic latitude (-90 to 90 deg). (required)
     * @param longitude Geographic longitude (-180 to 180 deg). (required)
     * @return Height
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful geoid height calculation </td><td>  -  </td></tr>
     </table>
     */
    public Height appApiEgm2008EndpointsEGM2008CalculateHeight(BigDecimal latitude, BigDecimal longitude) throws ApiException {
        ApiResponse<Height> localVarResp = appApiEgm2008EndpointsEGM2008CalculateHeightWithHttpInfo(latitude, longitude);
        return localVarResp.getData();
    }

    /**
     * Calculate the geoid height 
     * for a given latitude / longitude.  
     * @param latitude Geographic latitude (-90 to 90 deg). (required)
     * @param longitude Geographic longitude (-180 to 180 deg). (required)
     * @return ApiResponse&lt;Height&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful geoid height calculation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Height> appApiEgm2008EndpointsEGM2008CalculateHeightWithHttpInfo(BigDecimal latitude, BigDecimal longitude) throws ApiException {
        okhttp3.Call localVarCall = appApiEgm2008EndpointsEGM2008CalculateHeightValidateBeforeCall(latitude, longitude, null);
        Type localVarReturnType = new TypeToken<Height>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate the geoid height  (asynchronously)
     * for a given latitude / longitude.  
     * @param latitude Geographic latitude (-90 to 90 deg). (required)
     * @param longitude Geographic longitude (-180 to 180 deg). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful geoid height calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiEgm2008EndpointsEGM2008CalculateHeightAsync(BigDecimal latitude, BigDecimal longitude, final ApiCallback<Height> _callback) throws ApiException {

        okhttp3.Call localVarCall = appApiEgm2008EndpointsEGM2008CalculateHeightValidateBeforeCall(latitude, longitude, _callback);
        Type localVarReturnType = new TypeToken<Height>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
