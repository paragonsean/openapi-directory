/**
 * Gravity API
 * The gravitational field of the earth is non-uniform.  The <a href='https://en.wikipedia.org/wiki/Geoid'>geoid</a> is the shape the  ocean surface would take if only gravity and the rotation of the Earth   were considered. The geoid is the surface that defines zero elevation.<br><br>  The geoid height is the difference between an ideal reference ellipsoid  and the geoid.<br><br> The gravity anomaly is the difference between the acceleration due to gravity on the Earth's surface and the value calculated assuming the reference ellipsoid.<br><br> The official Earth Gravitational Model <a href=https://en.wikipedia.org/wiki/Earth_Gravitational_Model#EGM2008/>EGM2008</a> was developed and  released to the public by the National Geospatial-Intelligence Agency (NGA).<br><br> Our EGM2008 API provides on-demand access to the EGM2008 model, as implemented by the open-source GeographicLib  <a href=https://geographiclib.sourceforge.io/html/gravity.html>Gravity</a> library.<br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2021. 
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Anomaly from '../model/Anomaly';
import Height from '../model/Height';

/**
* Egm2008 service.
* @module api/Egm2008Api
* @version 1.1.1
*/
export default class Egm2008Api {

    /**
    * Constructs a new Egm2008Api. 
    * @alias module:api/Egm2008Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiEgm2008EndpointsEGM2008CalculateAnomaly operation.
     * @callback module:api/Egm2008Api~appApiEgm2008EndpointsEGM2008CalculateAnomalyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Anomaly} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate gravity anomaly values 
     * for a given latitude / longitude. 
     * @param {Number} latitude Geographic latitude (-90 to 90 deg).
     * @param {Number} longitude Geographic longitude (-180 to 180 deg).
     * @param {module:api/Egm2008Api~appApiEgm2008EndpointsEGM2008CalculateAnomalyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Anomaly}
     */
    appApiEgm2008EndpointsEGM2008CalculateAnomaly(latitude, longitude, callback) {
      let postBody = null;
      // verify the required parameter 'latitude' is set
      if (latitude === undefined || latitude === null) {
        throw new Error("Missing the required parameter 'latitude' when calling appApiEgm2008EndpointsEGM2008CalculateAnomaly");
      }
      // verify the required parameter 'longitude' is set
      if (longitude === undefined || longitude === null) {
        throw new Error("Missing the required parameter 'longitude' when calling appApiEgm2008EndpointsEGM2008CalculateAnomaly");
      }

      let pathParams = {
      };
      let queryParams = {
        'latitude': latitude,
        'longitude': longitude
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Anomaly;
      return this.apiClient.callApi(
        '/egm2008/gravity_anomaly', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiEgm2008EndpointsEGM2008CalculateHeight operation.
     * @callback module:api/Egm2008Api~appApiEgm2008EndpointsEGM2008CalculateHeightCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Height} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate the geoid height 
     * for a given latitude / longitude.  
     * @param {Number} latitude Geographic latitude (-90 to 90 deg).
     * @param {Number} longitude Geographic longitude (-180 to 180 deg).
     * @param {module:api/Egm2008Api~appApiEgm2008EndpointsEGM2008CalculateHeightCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Height}
     */
    appApiEgm2008EndpointsEGM2008CalculateHeight(latitude, longitude, callback) {
      let postBody = null;
      // verify the required parameter 'latitude' is set
      if (latitude === undefined || latitude === null) {
        throw new Error("Missing the required parameter 'latitude' when calling appApiEgm2008EndpointsEGM2008CalculateHeight");
      }
      // verify the required parameter 'longitude' is set
      if (longitude === undefined || longitude === null) {
        throw new Error("Missing the required parameter 'longitude' when calling appApiEgm2008EndpointsEGM2008CalculateHeight");
      }

      let pathParams = {
      };
      let queryParams = {
        'latitude': latitude,
        'longitude': longitude
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Height;
      return this.apiClient.callApi(
        '/egm2008/geoid_height', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
