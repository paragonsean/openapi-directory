/**
 * Gravity API
 * The gravitational field of the earth is non-uniform.  The <a href='https://en.wikipedia.org/wiki/Geoid'>geoid</a> is the shape the  ocean surface would take if only gravity and the rotation of the Earth   were considered. The geoid is the surface that defines zero elevation.<br><br>  The geoid height is the difference between an ideal reference ellipsoid  and the geoid.<br><br> The gravity anomaly is the difference between the acceleration due to gravity on the Earth's surface and the value calculated assuming the reference ellipsoid.<br><br> The official Earth Gravitational Model <a href=https://en.wikipedia.org/wiki/Earth_Gravitational_Model#EGM2008/>EGM2008</a> was developed and  released to the public by the National Geospatial-Intelligence Agency (NGA).<br><br> Our EGM2008 API provides on-demand access to the EGM2008 model, as implemented by the open-source GeographicLib  <a href=https://geographiclib.sourceforge.io/html/gravity.html>Gravity</a> library.<br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2021. 
 *
 * The version of the OpenAPI document: 1.1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnomaly.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnomaly::OAIAnomaly(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnomaly::OAIAnomaly() {
    this->initializeModel();
}

OAIAnomaly::~OAIAnomaly() {}

void OAIAnomaly::initializeModel() {

    m_eta_isSet = false;
    m_eta_isValid = false;

    m_gravity_anomaly_isSet = false;
    m_gravity_anomaly_isValid = false;

    m_xi_isSet = false;
    m_xi_isValid = false;
}

void OAIAnomaly::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnomaly::fromJsonObject(QJsonObject json) {

    m_eta_isValid = ::OpenAPI::fromJsonValue(m_eta, json[QString("eta")]);
    m_eta_isSet = !json[QString("eta")].isNull() && m_eta_isValid;

    m_gravity_anomaly_isValid = ::OpenAPI::fromJsonValue(m_gravity_anomaly, json[QString("gravity_anomaly")]);
    m_gravity_anomaly_isSet = !json[QString("gravity_anomaly")].isNull() && m_gravity_anomaly_isValid;

    m_xi_isValid = ::OpenAPI::fromJsonValue(m_xi, json[QString("xi")]);
    m_xi_isSet = !json[QString("xi")].isNull() && m_xi_isValid;
}

QString OAIAnomaly::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnomaly::asJsonObject() const {
    QJsonObject obj;
    if (m_eta.isSet()) {
        obj.insert(QString("eta"), ::OpenAPI::toJsonValue(m_eta));
    }
    if (m_gravity_anomaly.isSet()) {
        obj.insert(QString("gravity_anomaly"), ::OpenAPI::toJsonValue(m_gravity_anomaly));
    }
    if (m_xi.isSet()) {
        obj.insert(QString("xi"), ::OpenAPI::toJsonValue(m_xi));
    }
    return obj;
}

OAIAnomaly_eta OAIAnomaly::getEta() const {
    return m_eta;
}
void OAIAnomaly::setEta(const OAIAnomaly_eta &eta) {
    m_eta = eta;
    m_eta_isSet = true;
}

bool OAIAnomaly::is_eta_Set() const{
    return m_eta_isSet;
}

bool OAIAnomaly::is_eta_Valid() const{
    return m_eta_isValid;
}

OAIAnomaly_gravity_anomaly OAIAnomaly::getGravityAnomaly() const {
    return m_gravity_anomaly;
}
void OAIAnomaly::setGravityAnomaly(const OAIAnomaly_gravity_anomaly &gravity_anomaly) {
    m_gravity_anomaly = gravity_anomaly;
    m_gravity_anomaly_isSet = true;
}

bool OAIAnomaly::is_gravity_anomaly_Set() const{
    return m_gravity_anomaly_isSet;
}

bool OAIAnomaly::is_gravity_anomaly_Valid() const{
    return m_gravity_anomaly_isValid;
}

OAIAnomaly_xi OAIAnomaly::getXi() const {
    return m_xi;
}
void OAIAnomaly::setXi(const OAIAnomaly_xi &xi) {
    m_xi = xi;
    m_xi_isSet = true;
}

bool OAIAnomaly::is_xi_Set() const{
    return m_xi_isSet;
}

bool OAIAnomaly::is_xi_Valid() const{
    return m_xi_isValid;
}

bool OAIAnomaly::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gravity_anomaly.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xi.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnomaly::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
