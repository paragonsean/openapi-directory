/**
 * Space Radiation API
 * Space has a hostile radiation environment that increases the risk of cancers in humans and malfunctions in spacecraft electronics. The types of space  radiation of primary concern are:   <ul>     <li>         Galactic Cosmic Rays from outside our solar system generated by          supernovae and other phenomena;     </li>     <li>         Solar Energetic Particles produced by the Sun during intense and         sporadic bursts of activity; and     </li>     <li>         Trapped Radiation: energetic particles confined by Earth's magnetic         field, usually comprising an inner belt of mostly high energy protons          and an outer belt dominated by lower energy electrons and plasma.     </li>   </ul>   Understanding the space radiation environment for a particular mission profile is becoming increasingly important. Commercial off-the-shelf electronic components  that aren't resilient to space radiation are now prevalent. Longer duration  missions to cislunar space, Mars, and beyond are placing astronauts at greater  risk of radiation exposure. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2022. 
 *
 * The version of the OpenAPI document: 1.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFluxAtEnergy_flux.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFluxAtEnergy_flux::OAIFluxAtEnergy_flux(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFluxAtEnergy_flux::OAIFluxAtEnergy_flux() {
    this->initializeModel();
}

OAIFluxAtEnergy_flux::~OAIFluxAtEnergy_flux() {}

void OAIFluxAtEnergy_flux::initializeModel() {

    m_units_isSet = false;
    m_units_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIFluxAtEnergy_flux::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFluxAtEnergy_flux::fromJsonObject(QJsonObject json) {

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIFluxAtEnergy_flux::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFluxAtEnergy_flux::asJsonObject() const {
    QJsonObject obj;
    if (m_units_isSet) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIFluxAtEnergy_flux::getUnits() const {
    return m_units;
}
void OAIFluxAtEnergy_flux::setUnits(const QString &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAIFluxAtEnergy_flux::is_units_Set() const{
    return m_units_isSet;
}

bool OAIFluxAtEnergy_flux::is_units_Valid() const{
    return m_units_isValid;
}

double OAIFluxAtEnergy_flux::getValue() const {
    return m_value;
}
void OAIFluxAtEnergy_flux::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFluxAtEnergy_flux::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFluxAtEnergy_flux::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIFluxAtEnergy_flux::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFluxAtEnergy_flux::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
