/**
 * Space Radiation API
 * Space has a hostile radiation environment that increases the risk of cancers in humans and malfunctions in spacecraft electronics. The types of space  radiation of primary concern are:   <ul>     <li>         Galactic Cosmic Rays from outside our solar system generated by          supernovae and other phenomena;     </li>     <li>         Solar Energetic Particles produced by the Sun during intense and         sporadic bursts of activity; and     </li>     <li>         Trapped Radiation: energetic particles confined by Earth's magnetic         field, usually comprising an inner belt of mostly high energy protons          and an outer belt dominated by lower energy electrons and plasma.     </li>   </ul>   Understanding the space radiation environment for a particular mission profile is becoming increasingly important. Commercial off-the-shelf electronic components  that aren't resilient to space radiation are now prevalent. Longer duration  missions to cislunar space, Mars, and beyond are placing astronauts at greater  risk of radiation exposure. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2022. 
 *
 * The version of the OpenAPI document: 1.1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITrappedApi_H
#define OAI_OAITrappedApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFlux.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITrappedApi : public QObject {
    Q_OBJECT

public:
    OAITrappedApi(const int timeOut = 0);
    ~OAITrappedApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  model QString [required]
    * @param[in]  coord_sys QString [required]
    * @param[in]  coord_units QString [required]
    * @param[in]  coord1 double [required]
    * @param[in]  coord2 double [required]
    * @param[in]  coord3 double [required]
    * @param[in]  year qint32 [required]
    * @param[in]  month qint32 [required]
    * @param[in]  day qint32 [required]
    * @param[in]  hour qint32 [required]
    * @param[in]  minute qint32 [required]
    * @param[in]  second qint32 [required]
    */
    virtual void app_api_endpoints_TrappedRadiation_calculateFluxMean(const QString &model, const QString &coord_sys, const QString &coord_units, const double &coord1, const double &coord2, const double &coord3, const qint32 &year, const qint32 &month, const qint32 &day, const qint32 &hour, const qint32 &minute, const qint32 &second);

    /**
    * @param[in]  model QString [required]
    * @param[in]  coord_sys QString [required]
    * @param[in]  coord_units QString [required]
    * @param[in]  coord1 double [required]
    * @param[in]  coord2 double [required]
    * @param[in]  coord3 double [required]
    * @param[in]  year qint32 [required]
    * @param[in]  month qint32 [required]
    * @param[in]  day qint32 [required]
    * @param[in]  hour qint32 [required]
    * @param[in]  minute qint32 [required]
    * @param[in]  second qint32 [required]
    * @param[in]  percentile qint32 [required]
    */
    virtual void app_api_endpoints_TrappedRadiation_calculateFluxPercentile(const QString &model, const QString &coord_sys, const QString &coord_units, const double &coord1, const double &coord2, const double &coord3, const qint32 &year, const qint32 &month, const qint32 &day, const qint32 &hour, const qint32 &minute, const qint32 &second, const qint32 &percentile);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void app_api_endpoints_TrappedRadiation_calculateFluxMeanCallback(OAIHttpRequestWorker *worker);
    void app_api_endpoints_TrappedRadiation_calculateFluxPercentileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void app_api_endpoints_TrappedRadiation_calculateFluxMeanSignal(OAIFlux summary);
    void app_api_endpoints_TrappedRadiation_calculateFluxPercentileSignal(OAIFlux summary);


    void app_api_endpoints_TrappedRadiation_calculateFluxMeanSignalFull(OAIHttpRequestWorker *worker, OAIFlux summary);
    void app_api_endpoints_TrappedRadiation_calculateFluxPercentileSignalFull(OAIHttpRequestWorker *worker, OAIFlux summary);

    Q_DECL_DEPRECATED_X("Use app_api_endpoints_TrappedRadiation_calculateFluxMeanSignalError() instead")
    void app_api_endpoints_TrappedRadiation_calculateFluxMeanSignalE(OAIFlux summary, QNetworkReply::NetworkError error_type, QString error_str);
    void app_api_endpoints_TrappedRadiation_calculateFluxMeanSignalError(OAIFlux summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use app_api_endpoints_TrappedRadiation_calculateFluxPercentileSignalError() instead")
    void app_api_endpoints_TrappedRadiation_calculateFluxPercentileSignalE(OAIFlux summary, QNetworkReply::NetworkError error_type, QString error_str);
    void app_api_endpoints_TrappedRadiation_calculateFluxPercentileSignalError(OAIFlux summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use app_api_endpoints_TrappedRadiation_calculateFluxMeanSignalErrorFull() instead")
    void app_api_endpoints_TrappedRadiation_calculateFluxMeanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void app_api_endpoints_TrappedRadiation_calculateFluxMeanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use app_api_endpoints_TrappedRadiation_calculateFluxPercentileSignalErrorFull() instead")
    void app_api_endpoints_TrappedRadiation_calculateFluxPercentileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void app_api_endpoints_TrappedRadiation_calculateFluxPercentileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
