/*
 * Space Radiation API
 * Space has a hostile radiation environment that increases the risk of cancers in humans and malfunctions in spacecraft electronics. The types of space  radiation of primary concern are:   <ul>     <li>         Galactic Cosmic Rays from outside our solar system generated by          supernovae and other phenomena;     </li>     <li>         Solar Energetic Particles produced by the Sun during intense and         sporadic bursts of activity; and     </li>     <li>         Trapped Radiation: energetic particles confined by Earth's magnetic         field, usually comprising an inner belt of mostly high energy protons          and an outer belt dominated by lower energy electrons and plasma.     </li>   </ul>   Understanding the space radiation environment for a particular mission profile is becoming increasingly important. Commercial off-the-shelf electronic components  that aren't resilient to space radiation are now prevalent. Longer duration  missions to cislunar space, Mars, and beyond are placing astronauts at greater  risk of radiation exposure. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2022. 
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FluxEnergies;
import org.openapitools.client.model.FluxFlux;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Flux
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:34.402738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Flux {
  public static final String SERIALIZED_NAME_ENERGIES = "energies";
  @SerializedName(SERIALIZED_NAME_ENERGIES)
  private FluxEnergies energies;

  public static final String SERIALIZED_NAME_FLUX = "flux";
  @SerializedName(SERIALIZED_NAME_FLUX)
  private FluxFlux flux;

  public Flux() {
  }

  public Flux energies(FluxEnergies energies) {
    this.energies = energies;
    return this;
  }

  /**
   * Get energies
   * @return energies
   */
  @javax.annotation.Nullable
  public FluxEnergies getEnergies() {
    return energies;
  }

  public void setEnergies(FluxEnergies energies) {
    this.energies = energies;
  }


  public Flux flux(FluxFlux flux) {
    this.flux = flux;
    return this;
  }

  /**
   * Get flux
   * @return flux
   */
  @javax.annotation.Nullable
  public FluxFlux getFlux() {
    return flux;
  }

  public void setFlux(FluxFlux flux) {
    this.flux = flux;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Flux flux = (Flux) o;
    return Objects.equals(this.energies, flux.energies) &&
        Objects.equals(this.flux, flux.flux);
  }

  @Override
  public int hashCode() {
    return Objects.hash(energies, flux);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Flux {\n");
    sb.append("    energies: ").append(toIndentedString(energies)).append("\n");
    sb.append("    flux: ").append(toIndentedString(flux)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("energies");
    openapiFields.add("flux");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Flux
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Flux.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Flux is not found in the empty JSON string", Flux.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Flux.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Flux` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `energies`
      if (jsonObj.get("energies") != null && !jsonObj.get("energies").isJsonNull()) {
        FluxEnergies.validateJsonElement(jsonObj.get("energies"));
      }
      // validate the optional field `flux`
      if (jsonObj.get("flux") != null && !jsonObj.get("flux").isJsonNull()) {
        FluxFlux.validateJsonElement(jsonObj.get("flux"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Flux.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Flux' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Flux> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Flux.class));

       return (TypeAdapter<T>) new TypeAdapter<Flux>() {
           @Override
           public void write(JsonWriter out, Flux value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Flux read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Flux given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Flux
   * @throws IOException if the JSON string is invalid with respect to Flux
   */
  public static Flux fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Flux.class);
  }

  /**
   * Convert an instance of Flux to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

