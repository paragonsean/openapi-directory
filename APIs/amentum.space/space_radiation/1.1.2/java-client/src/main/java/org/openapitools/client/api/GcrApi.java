/*
 * Space Radiation API
 * Space has a hostile radiation environment that increases the risk of cancers in humans and malfunctions in spacecraft electronics. The types of space  radiation of primary concern are:   <ul>     <li>         Galactic Cosmic Rays from outside our solar system generated by          supernovae and other phenomena;     </li>     <li>         Solar Energetic Particles produced by the Sun during intense and         sporadic bursts of activity; and     </li>     <li>         Trapped Radiation: energetic particles confined by Earth's magnetic         field, usually comprising an inner belt of mostly high energy protons          and an outer belt dominated by lower energy electrons and plasma.     </li>   </ul>   Understanding the space radiation environment for a particular mission profile is becoming increasingly important. Commercial off-the-shelf electronic components  that aren't resilient to space radiation are now prevalent. Longer duration  missions to cislunar space, Mars, and beyond are placing astronauts at greater  risk of radiation exposure. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2022. 
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.FluxAtEnergy;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GcrApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GcrApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GcrApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appApiEndpointsGCRCalculateDlrFlux
     * @param year &lt;br&gt; (required)
     * @param month &lt;br&gt; (required)
     * @param day &lt;br&gt; (required)
     * @param z &lt;br&gt;Particle atomic number (required)
     * @param energy &lt;br&gt;Particle energy in MeV/n&lt;br&gt; Valid range: [0, 10&lt;sup&gt;6&lt;/sup&gt;] MeV/n&lt;br&gt;   (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful flux calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiEndpointsGCRCalculateDlrFluxCall(Integer year, Integer month, Integer day, BigDecimal z, BigDecimal energy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gcr/flux_dlr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (day != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day", day));
        }

        if (z != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("z", z));
        }

        if (energy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("energy", energy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appApiEndpointsGCRCalculateDlrFluxValidateBeforeCall(Integer year, Integer month, Integer day, BigDecimal z, BigDecimal energy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling appApiEndpointsGCRCalculateDlrFlux(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling appApiEndpointsGCRCalculateDlrFlux(Async)");
        }

        // verify the required parameter 'day' is set
        if (day == null) {
            throw new ApiException("Missing the required parameter 'day' when calling appApiEndpointsGCRCalculateDlrFlux(Async)");
        }

        // verify the required parameter 'z' is set
        if (z == null) {
            throw new ApiException("Missing the required parameter 'z' when calling appApiEndpointsGCRCalculateDlrFlux(Async)");
        }

        // verify the required parameter 'energy' is set
        if (energy == null) {
            throw new ApiException("Missing the required parameter 'energy' when calling appApiEndpointsGCRCalculateDlrFlux(Async)");
        }

        return appApiEndpointsGCRCalculateDlrFluxCall(year, month, day, z, energy, _callback);

    }

    /**
     * Calculate particle flux  
     * for the given energy, atomic number, and date. 
     * @param year &lt;br&gt; (required)
     * @param month &lt;br&gt; (required)
     * @param day &lt;br&gt; (required)
     * @param z &lt;br&gt;Particle atomic number (required)
     * @param energy &lt;br&gt;Particle energy in MeV/n&lt;br&gt; Valid range: [0, 10&lt;sup&gt;6&lt;/sup&gt;] MeV/n&lt;br&gt;   (required)
     * @return FluxAtEnergy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful flux calculation </td><td>  -  </td></tr>
     </table>
     */
    public FluxAtEnergy appApiEndpointsGCRCalculateDlrFlux(Integer year, Integer month, Integer day, BigDecimal z, BigDecimal energy) throws ApiException {
        ApiResponse<FluxAtEnergy> localVarResp = appApiEndpointsGCRCalculateDlrFluxWithHttpInfo(year, month, day, z, energy);
        return localVarResp.getData();
    }

    /**
     * Calculate particle flux  
     * for the given energy, atomic number, and date. 
     * @param year &lt;br&gt; (required)
     * @param month &lt;br&gt; (required)
     * @param day &lt;br&gt; (required)
     * @param z &lt;br&gt;Particle atomic number (required)
     * @param energy &lt;br&gt;Particle energy in MeV/n&lt;br&gt; Valid range: [0, 10&lt;sup&gt;6&lt;/sup&gt;] MeV/n&lt;br&gt;   (required)
     * @return ApiResponse&lt;FluxAtEnergy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful flux calculation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FluxAtEnergy> appApiEndpointsGCRCalculateDlrFluxWithHttpInfo(Integer year, Integer month, Integer day, BigDecimal z, BigDecimal energy) throws ApiException {
        okhttp3.Call localVarCall = appApiEndpointsGCRCalculateDlrFluxValidateBeforeCall(year, month, day, z, energy, null);
        Type localVarReturnType = new TypeToken<FluxAtEnergy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate particle flux   (asynchronously)
     * for the given energy, atomic number, and date. 
     * @param year &lt;br&gt; (required)
     * @param month &lt;br&gt; (required)
     * @param day &lt;br&gt; (required)
     * @param z &lt;br&gt;Particle atomic number (required)
     * @param energy &lt;br&gt;Particle energy in MeV/n&lt;br&gt; Valid range: [0, 10&lt;sup&gt;6&lt;/sup&gt;] MeV/n&lt;br&gt;   (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful flux calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiEndpointsGCRCalculateDlrFluxAsync(Integer year, Integer month, Integer day, BigDecimal z, BigDecimal energy, final ApiCallback<FluxAtEnergy> _callback) throws ApiException {

        okhttp3.Call localVarCall = appApiEndpointsGCRCalculateDlrFluxValidateBeforeCall(year, month, day, z, energy, _callback);
        Type localVarReturnType = new TypeToken<FluxAtEnergy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
