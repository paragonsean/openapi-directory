/*
 * Space Radiation API
 * Space has a hostile radiation environment that increases the risk of cancers in humans and malfunctions in spacecraft electronics. The types of space  radiation of primary concern are:   <ul>     <li>         Galactic Cosmic Rays from outside our solar system generated by          supernovae and other phenomena;     </li>     <li>         Solar Energetic Particles produced by the Sun during intense and         sporadic bursts of activity; and     </li>     <li>         Trapped Radiation: energetic particles confined by Earth's magnetic         field, usually comprising an inner belt of mostly high energy protons          and an outer belt dominated by lower energy electrons and plasma.     </li>   </ul>   Understanding the space radiation environment for a particular mission profile is becoming increasingly important. Commercial off-the-shelf electronic components  that aren't resilient to space radiation are now prevalent. Longer duration  missions to cislunar space, Mars, and beyond are placing astronauts at greater  risk of radiation exposure. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2022. 
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Flux;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrappedApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TrappedApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrappedApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appApiEndpointsTrappedRadiationCalculateFluxMean
     * @param model &lt;br&gt;Which model to use: &lt;br&gt;&lt;br&gt; - Energetic electrons (AE9) &lt;br&gt; - Energetic protons (AP9)  &lt;br&gt; - Space plasma model for electrons (SPME) &lt;br&gt; - for hydrogen (SPMH) &lt;br&gt; - for helium (SPMHE) &lt;br&gt; - for oxygen (SPMO)   (required)
     * @param coordSys &lt;br&gt;Coordinate system to use:  &lt;br&gt;&lt;br&gt; - Geodetic/WGS84 (GDZ) &lt;br&gt; - Geocentric Cartesian (GEO) &lt;br&gt; - Geocentric Earth Inertial (GEI) &lt;br&gt; See \&quot;Bhavnani, K. H., &amp; Vancour, R. P. (1991).  Coordinate systems for space and geophysical applications\&quot;  for coord system definitions.  (required)
     * @param coordUnits &lt;br&gt;Coordinate units to use: km (KM) or Earth Radii (RE)  (required)
     * @param coord1 &lt;br&gt;First coordinate value to specify position. &lt;br&gt;&lt;br&gt; Ordering for GEI, GEO coords:X, Y, Z&lt;br&gt; Ordering for GDZ coords: Alt, Lat, Long&lt;br&gt;  Valid ranges for latitude: -90, 90&lt;br&gt;  Valid ranges for longitude: 0, 360&lt;br&gt;   (required)
     * @param coord2 &lt;br&gt;Second coordinate value. (required)
     * @param coord3 &lt;br&gt;Third coordinate value. (required)
     * @param year &lt;br&gt; (required)
     * @param month &lt;br&gt; (required)
     * @param day &lt;br&gt; (required)
     * @param hour &lt;br&gt; (required)
     * @param minute &lt;br&gt; (required)
     * @param second &lt;br&gt; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful flux calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiEndpointsTrappedRadiationCalculateFluxMeanCall(String model, String coordSys, String coordUnits, BigDecimal coord1, BigDecimal coord2, BigDecimal coord3, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trapped/flux_mean";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (coordSys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coord_sys", coordSys));
        }

        if (coordUnits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coord_units", coordUnits));
        }

        if (coord1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coord1", coord1));
        }

        if (coord2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coord2", coord2));
        }

        if (coord3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coord3", coord3));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (day != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day", day));
        }

        if (hour != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hour", hour));
        }

        if (minute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minute", minute));
        }

        if (second != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("second", second));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appApiEndpointsTrappedRadiationCalculateFluxMeanValidateBeforeCall(String model, String coordSys, String coordUnits, BigDecimal coord1, BigDecimal coord2, BigDecimal coord3, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling appApiEndpointsTrappedRadiationCalculateFluxMean(Async)");
        }

        // verify the required parameter 'coordSys' is set
        if (coordSys == null) {
            throw new ApiException("Missing the required parameter 'coordSys' when calling appApiEndpointsTrappedRadiationCalculateFluxMean(Async)");
        }

        // verify the required parameter 'coordUnits' is set
        if (coordUnits == null) {
            throw new ApiException("Missing the required parameter 'coordUnits' when calling appApiEndpointsTrappedRadiationCalculateFluxMean(Async)");
        }

        // verify the required parameter 'coord1' is set
        if (coord1 == null) {
            throw new ApiException("Missing the required parameter 'coord1' when calling appApiEndpointsTrappedRadiationCalculateFluxMean(Async)");
        }

        // verify the required parameter 'coord2' is set
        if (coord2 == null) {
            throw new ApiException("Missing the required parameter 'coord2' when calling appApiEndpointsTrappedRadiationCalculateFluxMean(Async)");
        }

        // verify the required parameter 'coord3' is set
        if (coord3 == null) {
            throw new ApiException("Missing the required parameter 'coord3' when calling appApiEndpointsTrappedRadiationCalculateFluxMean(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling appApiEndpointsTrappedRadiationCalculateFluxMean(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling appApiEndpointsTrappedRadiationCalculateFluxMean(Async)");
        }

        // verify the required parameter 'day' is set
        if (day == null) {
            throw new ApiException("Missing the required parameter 'day' when calling appApiEndpointsTrappedRadiationCalculateFluxMean(Async)");
        }

        // verify the required parameter 'hour' is set
        if (hour == null) {
            throw new ApiException("Missing the required parameter 'hour' when calling appApiEndpointsTrappedRadiationCalculateFluxMean(Async)");
        }

        // verify the required parameter 'minute' is set
        if (minute == null) {
            throw new ApiException("Missing the required parameter 'minute' when calling appApiEndpointsTrappedRadiationCalculateFluxMean(Async)");
        }

        // verify the required parameter 'second' is set
        if (second == null) {
            throw new ApiException("Missing the required parameter 'second' when calling appApiEndpointsTrappedRadiationCalculateFluxMean(Async)");
        }

        return appApiEndpointsTrappedRadiationCalculateFluxMeanCall(model, coordSys, coordUnits, coord1, coord2, coord3, year, month, day, hour, minute, second, _callback);

    }

    /**
     * Calculate mean particle flux 
     * at given coordinates and date-time. 
     * @param model &lt;br&gt;Which model to use: &lt;br&gt;&lt;br&gt; - Energetic electrons (AE9) &lt;br&gt; - Energetic protons (AP9)  &lt;br&gt; - Space plasma model for electrons (SPME) &lt;br&gt; - for hydrogen (SPMH) &lt;br&gt; - for helium (SPMHE) &lt;br&gt; - for oxygen (SPMO)   (required)
     * @param coordSys &lt;br&gt;Coordinate system to use:  &lt;br&gt;&lt;br&gt; - Geodetic/WGS84 (GDZ) &lt;br&gt; - Geocentric Cartesian (GEO) &lt;br&gt; - Geocentric Earth Inertial (GEI) &lt;br&gt; See \&quot;Bhavnani, K. H., &amp; Vancour, R. P. (1991).  Coordinate systems for space and geophysical applications\&quot;  for coord system definitions.  (required)
     * @param coordUnits &lt;br&gt;Coordinate units to use: km (KM) or Earth Radii (RE)  (required)
     * @param coord1 &lt;br&gt;First coordinate value to specify position. &lt;br&gt;&lt;br&gt; Ordering for GEI, GEO coords:X, Y, Z&lt;br&gt; Ordering for GDZ coords: Alt, Lat, Long&lt;br&gt;  Valid ranges for latitude: -90, 90&lt;br&gt;  Valid ranges for longitude: 0, 360&lt;br&gt;   (required)
     * @param coord2 &lt;br&gt;Second coordinate value. (required)
     * @param coord3 &lt;br&gt;Third coordinate value. (required)
     * @param year &lt;br&gt; (required)
     * @param month &lt;br&gt; (required)
     * @param day &lt;br&gt; (required)
     * @param hour &lt;br&gt; (required)
     * @param minute &lt;br&gt; (required)
     * @param second &lt;br&gt; (required)
     * @return Flux
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful flux calculation </td><td>  -  </td></tr>
     </table>
     */
    public Flux appApiEndpointsTrappedRadiationCalculateFluxMean(String model, String coordSys, String coordUnits, BigDecimal coord1, BigDecimal coord2, BigDecimal coord3, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second) throws ApiException {
        ApiResponse<Flux> localVarResp = appApiEndpointsTrappedRadiationCalculateFluxMeanWithHttpInfo(model, coordSys, coordUnits, coord1, coord2, coord3, year, month, day, hour, minute, second);
        return localVarResp.getData();
    }

    /**
     * Calculate mean particle flux 
     * at given coordinates and date-time. 
     * @param model &lt;br&gt;Which model to use: &lt;br&gt;&lt;br&gt; - Energetic electrons (AE9) &lt;br&gt; - Energetic protons (AP9)  &lt;br&gt; - Space plasma model for electrons (SPME) &lt;br&gt; - for hydrogen (SPMH) &lt;br&gt; - for helium (SPMHE) &lt;br&gt; - for oxygen (SPMO)   (required)
     * @param coordSys &lt;br&gt;Coordinate system to use:  &lt;br&gt;&lt;br&gt; - Geodetic/WGS84 (GDZ) &lt;br&gt; - Geocentric Cartesian (GEO) &lt;br&gt; - Geocentric Earth Inertial (GEI) &lt;br&gt; See \&quot;Bhavnani, K. H., &amp; Vancour, R. P. (1991).  Coordinate systems for space and geophysical applications\&quot;  for coord system definitions.  (required)
     * @param coordUnits &lt;br&gt;Coordinate units to use: km (KM) or Earth Radii (RE)  (required)
     * @param coord1 &lt;br&gt;First coordinate value to specify position. &lt;br&gt;&lt;br&gt; Ordering for GEI, GEO coords:X, Y, Z&lt;br&gt; Ordering for GDZ coords: Alt, Lat, Long&lt;br&gt;  Valid ranges for latitude: -90, 90&lt;br&gt;  Valid ranges for longitude: 0, 360&lt;br&gt;   (required)
     * @param coord2 &lt;br&gt;Second coordinate value. (required)
     * @param coord3 &lt;br&gt;Third coordinate value. (required)
     * @param year &lt;br&gt; (required)
     * @param month &lt;br&gt; (required)
     * @param day &lt;br&gt; (required)
     * @param hour &lt;br&gt; (required)
     * @param minute &lt;br&gt; (required)
     * @param second &lt;br&gt; (required)
     * @return ApiResponse&lt;Flux&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful flux calculation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Flux> appApiEndpointsTrappedRadiationCalculateFluxMeanWithHttpInfo(String model, String coordSys, String coordUnits, BigDecimal coord1, BigDecimal coord2, BigDecimal coord3, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second) throws ApiException {
        okhttp3.Call localVarCall = appApiEndpointsTrappedRadiationCalculateFluxMeanValidateBeforeCall(model, coordSys, coordUnits, coord1, coord2, coord3, year, month, day, hour, minute, second, null);
        Type localVarReturnType = new TypeToken<Flux>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate mean particle flux  (asynchronously)
     * at given coordinates and date-time. 
     * @param model &lt;br&gt;Which model to use: &lt;br&gt;&lt;br&gt; - Energetic electrons (AE9) &lt;br&gt; - Energetic protons (AP9)  &lt;br&gt; - Space plasma model for electrons (SPME) &lt;br&gt; - for hydrogen (SPMH) &lt;br&gt; - for helium (SPMHE) &lt;br&gt; - for oxygen (SPMO)   (required)
     * @param coordSys &lt;br&gt;Coordinate system to use:  &lt;br&gt;&lt;br&gt; - Geodetic/WGS84 (GDZ) &lt;br&gt; - Geocentric Cartesian (GEO) &lt;br&gt; - Geocentric Earth Inertial (GEI) &lt;br&gt; See \&quot;Bhavnani, K. H., &amp; Vancour, R. P. (1991).  Coordinate systems for space and geophysical applications\&quot;  for coord system definitions.  (required)
     * @param coordUnits &lt;br&gt;Coordinate units to use: km (KM) or Earth Radii (RE)  (required)
     * @param coord1 &lt;br&gt;First coordinate value to specify position. &lt;br&gt;&lt;br&gt; Ordering for GEI, GEO coords:X, Y, Z&lt;br&gt; Ordering for GDZ coords: Alt, Lat, Long&lt;br&gt;  Valid ranges for latitude: -90, 90&lt;br&gt;  Valid ranges for longitude: 0, 360&lt;br&gt;   (required)
     * @param coord2 &lt;br&gt;Second coordinate value. (required)
     * @param coord3 &lt;br&gt;Third coordinate value. (required)
     * @param year &lt;br&gt; (required)
     * @param month &lt;br&gt; (required)
     * @param day &lt;br&gt; (required)
     * @param hour &lt;br&gt; (required)
     * @param minute &lt;br&gt; (required)
     * @param second &lt;br&gt; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful flux calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiEndpointsTrappedRadiationCalculateFluxMeanAsync(String model, String coordSys, String coordUnits, BigDecimal coord1, BigDecimal coord2, BigDecimal coord3, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, final ApiCallback<Flux> _callback) throws ApiException {

        okhttp3.Call localVarCall = appApiEndpointsTrappedRadiationCalculateFluxMeanValidateBeforeCall(model, coordSys, coordUnits, coord1, coord2, coord3, year, month, day, hour, minute, second, _callback);
        Type localVarReturnType = new TypeToken<Flux>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appApiEndpointsTrappedRadiationCalculateFluxPercentile
     * @param model &lt;br&gt;Which model to use: &lt;br&gt;&lt;br&gt; - Energetic electrons (AE9) &lt;br&gt; - Energetic protons (AP9)  &lt;br&gt; - Space plasma model for electrons (SPME) &lt;br&gt; - for hydrogen (SPMH) &lt;br&gt; - for helium (SPMHE) &lt;br&gt; - for oxygen (SPMO)   (required)
     * @param coordSys &lt;br&gt;Coordinate system to use:  &lt;br&gt;&lt;br&gt; - Geodetic/WGS84 (GDZ) &lt;br&gt; - Geocentric Cartesian (GEO) &lt;br&gt; - Geocentric Earth Inertial (GEI) &lt;br&gt; See \&quot;Bhavnani, K. H., &amp; Vancour, R. P. (1991).  Coordinate systems for space and geophysical applications\&quot;  for coord system definitions.  (required)
     * @param coordUnits &lt;br&gt;Coordinate units to use: km (KM) or Earth Radii (RE)  (required)
     * @param coord1 &lt;br&gt;First coordinate value to specify position. &lt;br&gt;&lt;br&gt; Ordering for GEI, GEO coords:X, Y, Z&lt;br&gt; Ordering for GDZ coords: Alt, Lat, Long&lt;br&gt;  Valid ranges for latitude: -90, 90&lt;br&gt;  Valid ranges for longitude: 0, 360&lt;br&gt;   (required)
     * @param coord2 &lt;br&gt;Second coordinate value. (required)
     * @param coord3 &lt;br&gt;Third coordinate value. (required)
     * @param year &lt;br&gt; (required)
     * @param month &lt;br&gt; (required)
     * @param day &lt;br&gt; (required)
     * @param hour &lt;br&gt; (required)
     * @param minute &lt;br&gt; (required)
     * @param second &lt;br&gt; (required)
     * @param percentile &lt;br&gt;Integer percentile at which to calc flux (50 is the median value).  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful flux calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiEndpointsTrappedRadiationCalculateFluxPercentileCall(String model, String coordSys, String coordUnits, BigDecimal coord1, BigDecimal coord2, BigDecimal coord3, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, Integer percentile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trapped/flux_percentile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (coordSys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coord_sys", coordSys));
        }

        if (coordUnits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coord_units", coordUnits));
        }

        if (coord1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coord1", coord1));
        }

        if (coord2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coord2", coord2));
        }

        if (coord3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coord3", coord3));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (day != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day", day));
        }

        if (hour != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hour", hour));
        }

        if (minute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minute", minute));
        }

        if (second != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("second", second));
        }

        if (percentile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("percentile", percentile));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appApiEndpointsTrappedRadiationCalculateFluxPercentileValidateBeforeCall(String model, String coordSys, String coordUnits, BigDecimal coord1, BigDecimal coord2, BigDecimal coord3, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, Integer percentile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile(Async)");
        }

        // verify the required parameter 'coordSys' is set
        if (coordSys == null) {
            throw new ApiException("Missing the required parameter 'coordSys' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile(Async)");
        }

        // verify the required parameter 'coordUnits' is set
        if (coordUnits == null) {
            throw new ApiException("Missing the required parameter 'coordUnits' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile(Async)");
        }

        // verify the required parameter 'coord1' is set
        if (coord1 == null) {
            throw new ApiException("Missing the required parameter 'coord1' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile(Async)");
        }

        // verify the required parameter 'coord2' is set
        if (coord2 == null) {
            throw new ApiException("Missing the required parameter 'coord2' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile(Async)");
        }

        // verify the required parameter 'coord3' is set
        if (coord3 == null) {
            throw new ApiException("Missing the required parameter 'coord3' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile(Async)");
        }

        // verify the required parameter 'day' is set
        if (day == null) {
            throw new ApiException("Missing the required parameter 'day' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile(Async)");
        }

        // verify the required parameter 'hour' is set
        if (hour == null) {
            throw new ApiException("Missing the required parameter 'hour' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile(Async)");
        }

        // verify the required parameter 'minute' is set
        if (minute == null) {
            throw new ApiException("Missing the required parameter 'minute' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile(Async)");
        }

        // verify the required parameter 'second' is set
        if (second == null) {
            throw new ApiException("Missing the required parameter 'second' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile(Async)");
        }

        // verify the required parameter 'percentile' is set
        if (percentile == null) {
            throw new ApiException("Missing the required parameter 'percentile' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile(Async)");
        }

        return appApiEndpointsTrappedRadiationCalculateFluxPercentileCall(model, coordSys, coordUnits, coord1, coord2, coord3, year, month, day, hour, minute, second, percentile, _callback);

    }

    /**
     * Calculate percentile particle flux 
     * at given coordinates and date-time. 
     * @param model &lt;br&gt;Which model to use: &lt;br&gt;&lt;br&gt; - Energetic electrons (AE9) &lt;br&gt; - Energetic protons (AP9)  &lt;br&gt; - Space plasma model for electrons (SPME) &lt;br&gt; - for hydrogen (SPMH) &lt;br&gt; - for helium (SPMHE) &lt;br&gt; - for oxygen (SPMO)   (required)
     * @param coordSys &lt;br&gt;Coordinate system to use:  &lt;br&gt;&lt;br&gt; - Geodetic/WGS84 (GDZ) &lt;br&gt; - Geocentric Cartesian (GEO) &lt;br&gt; - Geocentric Earth Inertial (GEI) &lt;br&gt; See \&quot;Bhavnani, K. H., &amp; Vancour, R. P. (1991).  Coordinate systems for space and geophysical applications\&quot;  for coord system definitions.  (required)
     * @param coordUnits &lt;br&gt;Coordinate units to use: km (KM) or Earth Radii (RE)  (required)
     * @param coord1 &lt;br&gt;First coordinate value to specify position. &lt;br&gt;&lt;br&gt; Ordering for GEI, GEO coords:X, Y, Z&lt;br&gt; Ordering for GDZ coords: Alt, Lat, Long&lt;br&gt;  Valid ranges for latitude: -90, 90&lt;br&gt;  Valid ranges for longitude: 0, 360&lt;br&gt;   (required)
     * @param coord2 &lt;br&gt;Second coordinate value. (required)
     * @param coord3 &lt;br&gt;Third coordinate value. (required)
     * @param year &lt;br&gt; (required)
     * @param month &lt;br&gt; (required)
     * @param day &lt;br&gt; (required)
     * @param hour &lt;br&gt; (required)
     * @param minute &lt;br&gt; (required)
     * @param second &lt;br&gt; (required)
     * @param percentile &lt;br&gt;Integer percentile at which to calc flux (50 is the median value).  (required)
     * @return Flux
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful flux calculation </td><td>  -  </td></tr>
     </table>
     */
    public Flux appApiEndpointsTrappedRadiationCalculateFluxPercentile(String model, String coordSys, String coordUnits, BigDecimal coord1, BigDecimal coord2, BigDecimal coord3, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, Integer percentile) throws ApiException {
        ApiResponse<Flux> localVarResp = appApiEndpointsTrappedRadiationCalculateFluxPercentileWithHttpInfo(model, coordSys, coordUnits, coord1, coord2, coord3, year, month, day, hour, minute, second, percentile);
        return localVarResp.getData();
    }

    /**
     * Calculate percentile particle flux 
     * at given coordinates and date-time. 
     * @param model &lt;br&gt;Which model to use: &lt;br&gt;&lt;br&gt; - Energetic electrons (AE9) &lt;br&gt; - Energetic protons (AP9)  &lt;br&gt; - Space plasma model for electrons (SPME) &lt;br&gt; - for hydrogen (SPMH) &lt;br&gt; - for helium (SPMHE) &lt;br&gt; - for oxygen (SPMO)   (required)
     * @param coordSys &lt;br&gt;Coordinate system to use:  &lt;br&gt;&lt;br&gt; - Geodetic/WGS84 (GDZ) &lt;br&gt; - Geocentric Cartesian (GEO) &lt;br&gt; - Geocentric Earth Inertial (GEI) &lt;br&gt; See \&quot;Bhavnani, K. H., &amp; Vancour, R. P. (1991).  Coordinate systems for space and geophysical applications\&quot;  for coord system definitions.  (required)
     * @param coordUnits &lt;br&gt;Coordinate units to use: km (KM) or Earth Radii (RE)  (required)
     * @param coord1 &lt;br&gt;First coordinate value to specify position. &lt;br&gt;&lt;br&gt; Ordering for GEI, GEO coords:X, Y, Z&lt;br&gt; Ordering for GDZ coords: Alt, Lat, Long&lt;br&gt;  Valid ranges for latitude: -90, 90&lt;br&gt;  Valid ranges for longitude: 0, 360&lt;br&gt;   (required)
     * @param coord2 &lt;br&gt;Second coordinate value. (required)
     * @param coord3 &lt;br&gt;Third coordinate value. (required)
     * @param year &lt;br&gt; (required)
     * @param month &lt;br&gt; (required)
     * @param day &lt;br&gt; (required)
     * @param hour &lt;br&gt; (required)
     * @param minute &lt;br&gt; (required)
     * @param second &lt;br&gt; (required)
     * @param percentile &lt;br&gt;Integer percentile at which to calc flux (50 is the median value).  (required)
     * @return ApiResponse&lt;Flux&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful flux calculation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Flux> appApiEndpointsTrappedRadiationCalculateFluxPercentileWithHttpInfo(String model, String coordSys, String coordUnits, BigDecimal coord1, BigDecimal coord2, BigDecimal coord3, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, Integer percentile) throws ApiException {
        okhttp3.Call localVarCall = appApiEndpointsTrappedRadiationCalculateFluxPercentileValidateBeforeCall(model, coordSys, coordUnits, coord1, coord2, coord3, year, month, day, hour, minute, second, percentile, null);
        Type localVarReturnType = new TypeToken<Flux>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate percentile particle flux  (asynchronously)
     * at given coordinates and date-time. 
     * @param model &lt;br&gt;Which model to use: &lt;br&gt;&lt;br&gt; - Energetic electrons (AE9) &lt;br&gt; - Energetic protons (AP9)  &lt;br&gt; - Space plasma model for electrons (SPME) &lt;br&gt; - for hydrogen (SPMH) &lt;br&gt; - for helium (SPMHE) &lt;br&gt; - for oxygen (SPMO)   (required)
     * @param coordSys &lt;br&gt;Coordinate system to use:  &lt;br&gt;&lt;br&gt; - Geodetic/WGS84 (GDZ) &lt;br&gt; - Geocentric Cartesian (GEO) &lt;br&gt; - Geocentric Earth Inertial (GEI) &lt;br&gt; See \&quot;Bhavnani, K. H., &amp; Vancour, R. P. (1991).  Coordinate systems for space and geophysical applications\&quot;  for coord system definitions.  (required)
     * @param coordUnits &lt;br&gt;Coordinate units to use: km (KM) or Earth Radii (RE)  (required)
     * @param coord1 &lt;br&gt;First coordinate value to specify position. &lt;br&gt;&lt;br&gt; Ordering for GEI, GEO coords:X, Y, Z&lt;br&gt; Ordering for GDZ coords: Alt, Lat, Long&lt;br&gt;  Valid ranges for latitude: -90, 90&lt;br&gt;  Valid ranges for longitude: 0, 360&lt;br&gt;   (required)
     * @param coord2 &lt;br&gt;Second coordinate value. (required)
     * @param coord3 &lt;br&gt;Third coordinate value. (required)
     * @param year &lt;br&gt; (required)
     * @param month &lt;br&gt; (required)
     * @param day &lt;br&gt; (required)
     * @param hour &lt;br&gt; (required)
     * @param minute &lt;br&gt; (required)
     * @param second &lt;br&gt; (required)
     * @param percentile &lt;br&gt;Integer percentile at which to calc flux (50 is the median value).  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful flux calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiEndpointsTrappedRadiationCalculateFluxPercentileAsync(String model, String coordSys, String coordUnits, BigDecimal coord1, BigDecimal coord2, BigDecimal coord3, Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second, Integer percentile, final ApiCallback<Flux> _callback) throws ApiException {

        okhttp3.Call localVarCall = appApiEndpointsTrappedRadiationCalculateFluxPercentileValidateBeforeCall(model, coordSys, coordUnits, coord1, coord2, coord3, year, month, day, hour, minute, second, percentile, _callback);
        Type localVarReturnType = new TypeToken<Flux>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
