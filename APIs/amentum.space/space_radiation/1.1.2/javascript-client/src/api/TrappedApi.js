/**
 * Space Radiation API
 * Space has a hostile radiation environment that increases the risk of cancers in humans and malfunctions in spacecraft electronics. The types of space  radiation of primary concern are:   <ul>     <li>         Galactic Cosmic Rays from outside our solar system generated by          supernovae and other phenomena;     </li>     <li>         Solar Energetic Particles produced by the Sun during intense and         sporadic bursts of activity; and     </li>     <li>         Trapped Radiation: energetic particles confined by Earth's magnetic         field, usually comprising an inner belt of mostly high energy protons          and an outer belt dominated by lower energy electrons and plasma.     </li>   </ul>   Understanding the space radiation environment for a particular mission profile is becoming increasingly important. Commercial off-the-shelf electronic components  that aren't resilient to space radiation are now prevalent. Longer duration  missions to cislunar space, Mars, and beyond are placing astronauts at greater  risk of radiation exposure. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2022. 
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Flux from '../model/Flux';

/**
* Trapped service.
* @module api/TrappedApi
* @version 1.1.2
*/
export default class TrappedApi {

    /**
    * Constructs a new TrappedApi. 
    * @alias module:api/TrappedApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiEndpointsTrappedRadiationCalculateFluxMean operation.
     * @callback module:api/TrappedApi~appApiEndpointsTrappedRadiationCalculateFluxMeanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Flux} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate mean particle flux 
     * at given coordinates and date-time. 
     * @param {module:model/String} model <br>Which model to use: <br><br> - Energetic electrons (AE9) <br> - Energetic protons (AP9)  <br> - Space plasma model for electrons (SPME) <br> - for hydrogen (SPMH) <br> - for helium (SPMHE) <br> - for oxygen (SPMO)  
     * @param {module:model/String} coordSys <br>Coordinate system to use:  <br><br> - Geodetic/WGS84 (GDZ) <br> - Geocentric Cartesian (GEO) <br> - Geocentric Earth Inertial (GEI) <br> See \"Bhavnani, K. H., & Vancour, R. P. (1991).  Coordinate systems for space and geophysical applications\"  for coord system definitions. 
     * @param {module:model/String} coordUnits <br>Coordinate units to use: km (KM) or Earth Radii (RE) 
     * @param {Number} coord1 <br>First coordinate value to specify position. <br><br> Ordering for GEI, GEO coords:X, Y, Z<br> Ordering for GDZ coords: Alt, Lat, Long<br>  Valid ranges for latitude: -90, 90<br>  Valid ranges for longitude: 0, 360<br>  
     * @param {Number} coord2 <br>Second coordinate value.
     * @param {Number} coord3 <br>Third coordinate value.
     * @param {Number} year <br>
     * @param {Number} month <br>
     * @param {Number} day <br>
     * @param {Number} hour <br>
     * @param {Number} minute <br>
     * @param {Number} second <br>
     * @param {module:api/TrappedApi~appApiEndpointsTrappedRadiationCalculateFluxMeanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Flux}
     */
    appApiEndpointsTrappedRadiationCalculateFluxMean(model, coordSys, coordUnits, coord1, coord2, coord3, year, month, day, hour, minute, second, callback) {
      let postBody = null;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling appApiEndpointsTrappedRadiationCalculateFluxMean");
      }
      // verify the required parameter 'coordSys' is set
      if (coordSys === undefined || coordSys === null) {
        throw new Error("Missing the required parameter 'coordSys' when calling appApiEndpointsTrappedRadiationCalculateFluxMean");
      }
      // verify the required parameter 'coordUnits' is set
      if (coordUnits === undefined || coordUnits === null) {
        throw new Error("Missing the required parameter 'coordUnits' when calling appApiEndpointsTrappedRadiationCalculateFluxMean");
      }
      // verify the required parameter 'coord1' is set
      if (coord1 === undefined || coord1 === null) {
        throw new Error("Missing the required parameter 'coord1' when calling appApiEndpointsTrappedRadiationCalculateFluxMean");
      }
      // verify the required parameter 'coord2' is set
      if (coord2 === undefined || coord2 === null) {
        throw new Error("Missing the required parameter 'coord2' when calling appApiEndpointsTrappedRadiationCalculateFluxMean");
      }
      // verify the required parameter 'coord3' is set
      if (coord3 === undefined || coord3 === null) {
        throw new Error("Missing the required parameter 'coord3' when calling appApiEndpointsTrappedRadiationCalculateFluxMean");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling appApiEndpointsTrappedRadiationCalculateFluxMean");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling appApiEndpointsTrappedRadiationCalculateFluxMean");
      }
      // verify the required parameter 'day' is set
      if (day === undefined || day === null) {
        throw new Error("Missing the required parameter 'day' when calling appApiEndpointsTrappedRadiationCalculateFluxMean");
      }
      // verify the required parameter 'hour' is set
      if (hour === undefined || hour === null) {
        throw new Error("Missing the required parameter 'hour' when calling appApiEndpointsTrappedRadiationCalculateFluxMean");
      }
      // verify the required parameter 'minute' is set
      if (minute === undefined || minute === null) {
        throw new Error("Missing the required parameter 'minute' when calling appApiEndpointsTrappedRadiationCalculateFluxMean");
      }
      // verify the required parameter 'second' is set
      if (second === undefined || second === null) {
        throw new Error("Missing the required parameter 'second' when calling appApiEndpointsTrappedRadiationCalculateFluxMean");
      }

      let pathParams = {
      };
      let queryParams = {
        'model': model,
        'coord_sys': coordSys,
        'coord_units': coordUnits,
        'coord1': coord1,
        'coord2': coord2,
        'coord3': coord3,
        'year': year,
        'month': month,
        'day': day,
        'hour': hour,
        'minute': minute,
        'second': second
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Flux;
      return this.apiClient.callApi(
        '/trapped/flux_mean', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiEndpointsTrappedRadiationCalculateFluxPercentile operation.
     * @callback module:api/TrappedApi~appApiEndpointsTrappedRadiationCalculateFluxPercentileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Flux} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate percentile particle flux 
     * at given coordinates and date-time. 
     * @param {module:model/String} model <br>Which model to use: <br><br> - Energetic electrons (AE9) <br> - Energetic protons (AP9)  <br> - Space plasma model for electrons (SPME) <br> - for hydrogen (SPMH) <br> - for helium (SPMHE) <br> - for oxygen (SPMO)  
     * @param {module:model/String} coordSys <br>Coordinate system to use:  <br><br> - Geodetic/WGS84 (GDZ) <br> - Geocentric Cartesian (GEO) <br> - Geocentric Earth Inertial (GEI) <br> See \"Bhavnani, K. H., & Vancour, R. P. (1991).  Coordinate systems for space and geophysical applications\"  for coord system definitions. 
     * @param {module:model/String} coordUnits <br>Coordinate units to use: km (KM) or Earth Radii (RE) 
     * @param {Number} coord1 <br>First coordinate value to specify position. <br><br> Ordering for GEI, GEO coords:X, Y, Z<br> Ordering for GDZ coords: Alt, Lat, Long<br>  Valid ranges for latitude: -90, 90<br>  Valid ranges for longitude: 0, 360<br>  
     * @param {Number} coord2 <br>Second coordinate value.
     * @param {Number} coord3 <br>Third coordinate value.
     * @param {Number} year <br>
     * @param {Number} month <br>
     * @param {Number} day <br>
     * @param {Number} hour <br>
     * @param {Number} minute <br>
     * @param {Number} second <br>
     * @param {Number} percentile <br>Integer percentile at which to calc flux (50 is the median value). 
     * @param {module:api/TrappedApi~appApiEndpointsTrappedRadiationCalculateFluxPercentileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Flux}
     */
    appApiEndpointsTrappedRadiationCalculateFluxPercentile(model, coordSys, coordUnits, coord1, coord2, coord3, year, month, day, hour, minute, second, percentile, callback) {
      let postBody = null;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile");
      }
      // verify the required parameter 'coordSys' is set
      if (coordSys === undefined || coordSys === null) {
        throw new Error("Missing the required parameter 'coordSys' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile");
      }
      // verify the required parameter 'coordUnits' is set
      if (coordUnits === undefined || coordUnits === null) {
        throw new Error("Missing the required parameter 'coordUnits' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile");
      }
      // verify the required parameter 'coord1' is set
      if (coord1 === undefined || coord1 === null) {
        throw new Error("Missing the required parameter 'coord1' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile");
      }
      // verify the required parameter 'coord2' is set
      if (coord2 === undefined || coord2 === null) {
        throw new Error("Missing the required parameter 'coord2' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile");
      }
      // verify the required parameter 'coord3' is set
      if (coord3 === undefined || coord3 === null) {
        throw new Error("Missing the required parameter 'coord3' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile");
      }
      // verify the required parameter 'day' is set
      if (day === undefined || day === null) {
        throw new Error("Missing the required parameter 'day' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile");
      }
      // verify the required parameter 'hour' is set
      if (hour === undefined || hour === null) {
        throw new Error("Missing the required parameter 'hour' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile");
      }
      // verify the required parameter 'minute' is set
      if (minute === undefined || minute === null) {
        throw new Error("Missing the required parameter 'minute' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile");
      }
      // verify the required parameter 'second' is set
      if (second === undefined || second === null) {
        throw new Error("Missing the required parameter 'second' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile");
      }
      // verify the required parameter 'percentile' is set
      if (percentile === undefined || percentile === null) {
        throw new Error("Missing the required parameter 'percentile' when calling appApiEndpointsTrappedRadiationCalculateFluxPercentile");
      }

      let pathParams = {
      };
      let queryParams = {
        'model': model,
        'coord_sys': coordSys,
        'coord_units': coordUnits,
        'coord1': coord1,
        'coord2': coord2,
        'coord3': coord3,
        'year': year,
        'month': month,
        'day': day,
        'hour': hour,
        'minute': minute,
        'second': second,
        'percentile': percentile
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Flux;
      return this.apiClient.callApi(
        '/trapped/flux_percentile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
