/**
 * Aviation Radiation API
 * Our atmosphere protects us from a hostile space radiation environment comprising high energy particles of solar and intergalactic origin. Solar radiation is significant during unpredictable and short lived solar flares and coronal mass ejections (CMEs); however, galactic cosmic radiation (GCR) is omnipresent. The GCR intensity varies with latitude, longitude, and time due to effects of solar activity on the interplanetary magnetic field, as well as the Earth's magnetic field. Space radiation collides with gases in the atmosphere, leading to a complex shower of high energy radiation, the intensity and composition of which varies spatially and temporally. Excessive exposure to radiation can damage DNA and lead to long-term health effects such as an increased risk of cancer.  <br><br> Resulting radiation levels at commercial aircraft altitudes are greater than at sea level. Aircrew are classified as radiation workers in some countries; however, planning to limit their exposure, and monitoring, is generally lacking. Both real-time measurements and predictive models of radiation in the atmosphere are important to mitigate the radiation risk to crew. <br><br> We host a RESTful API to models of cosmic ray induced ionising radiation in the atmosphere.  The CARI7 and PARMA endpoints use models developed by the US Federal Aviation Administration and the Japan Atomic Energy Agency to  calculate cosmic radiation doses at a point.  The Route Dose API calculates the same quantities along a great circle route between two airports using CARI7. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2022. 
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppApiIcaroEndpointsICAROAmbientDose200Response from '../model/AppApiIcaroEndpointsICAROAmbientDose200Response';
import AppApiIcaroEndpointsICAROEffectiveDose200Response from '../model/AppApiIcaroEndpointsICAROEffectiveDose200Response';

/**
* Routedose service.
* @module api/RoutedoseApi
* @version 1.5.0
*/
export default class RoutedoseApi {

    /**
    * Constructs a new RoutedoseApi. 
    * @alias module:api/RoutedoseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appApiIcaroEndpointsICAROAmbientDose operation.
     * @callback module:api/RoutedoseApi~appApiIcaroEndpointsICAROAmbientDoseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppApiIcaroEndpointsICAROAmbientDose200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate the ambient equivalent dose along a great circle flight route. 
     * The ambient dose equivalent, H*(10), is an operational quantity that simulates the  human body by measuring the dose equivalent at a depth of 10 mm within a tissue  equivalent sphere of 300 mm diameter. It is a measurable quantity that is  used to calibrate area monitors (radiation detectors) for mixed radiation fields.  <br> <br> Use this endpoint if you are comparing model predictions to measurements. <br> <br> This API can run in two modes: <br> <br> Either specify <br> <b>altitude</b>, <b>duration</b><br> for constant altitude calculations; <br> <br> Or specify <br> <b>initial_altitude</b>, <b>cruising_altitudes</b>, <b>climb_times</b>, <b>cruising_times</b>, <b>descent_time</b>, <b>final_altitude</b><br> to calculate dose accounting for a step climb. <br> <br> Note: the airport codes or coordinates (depending on which was specified), and the date in DD/MM/YYYY format, are echoed in the json response as strings. 
     * @param {String} origin The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the origin airport.
     * @param {String} destination The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the destination airport.
     * @param {Number} year Year in YYYY.
     * @param {Number} month Month in MM.
     * @param {Number} day Day in DD.
     * @param {Object} opts Optional parameters
     * @param {Number} [altitude] Altitude (in km). The minimum is 0 m, the maximum is 20 km.
     * @param {Number} [duration] The flight duration in hours. The minimum is 0, the maximum is 20 hrs.
     * @param {Number} [initialAltitude] Initial altitude (in km). The minimum is 0 m, the maximum is 20 km.
     * @param {Array.<Number>} [cruisingAltitudes] Cruising altitudes (in km). The minimum is 0 m, the maximum is 20 km.
     * @param {Array.<Number>} [climbTimes] Climb times for each cruising altitude (hours).
     * @param {Array.<Number>} [cruisingTimes] Cruising times at each cruising altitude (hours).
     * @param {Number} [descentTime] Descent time from last cruising altitude to final altitude (hours).
     * @param {Number} [finalAltitude] Final altitude (in km).
     * @param {module:api/RoutedoseApi~appApiIcaroEndpointsICAROAmbientDoseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppApiIcaroEndpointsICAROAmbientDose200Response}
     */
    appApiIcaroEndpointsICAROAmbientDose(origin, destination, year, month, day, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling appApiIcaroEndpointsICAROAmbientDose");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling appApiIcaroEndpointsICAROAmbientDose");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling appApiIcaroEndpointsICAROAmbientDose");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling appApiIcaroEndpointsICAROAmbientDose");
      }
      // verify the required parameter 'day' is set
      if (day === undefined || day === null) {
        throw new Error("Missing the required parameter 'day' when calling appApiIcaroEndpointsICAROAmbientDose");
      }

      let pathParams = {
      };
      let queryParams = {
        'origin': origin,
        'destination': destination,
        'altitude': opts['altitude'],
        'duration': opts['duration'],
        'initial_altitude': opts['initialAltitude'],
        'cruising_altitudes': this.apiClient.buildCollectionParam(opts['cruisingAltitudes'], 'multi'),
        'climb_times': this.apiClient.buildCollectionParam(opts['climbTimes'], 'multi'),
        'cruising_times': this.apiClient.buildCollectionParam(opts['cruisingTimes'], 'multi'),
        'descent_time': opts['descentTime'],
        'final_altitude': opts['finalAltitude'],
        'year': year,
        'month': month,
        'day': day
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppApiIcaroEndpointsICAROAmbientDose200Response;
      return this.apiClient.callApi(
        '/route/ambient_dose', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appApiIcaroEndpointsICAROEffectiveDose operation.
     * @callback module:api/RoutedoseApi~appApiIcaroEndpointsICAROEffectiveDoseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppApiIcaroEndpointsICAROEffectiveDose200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate the total effective dose along a great circle flight route. 
     * Effective Dose is a radiation protection quantity defined by the International Commission on  Radiological Protection (ICRP) and represents the stochastic health  risk to the human body at low levels of radiation. It accounts for the different sensitivities of organs to ionising radiation, as well as the different effectiveness of various types of radiation. <br> <br> Use this endpoint if you need to estimate radiation exposures of personnel. <br> <br> This API can run in two modes: <br> <br> Either specify <br> <b>altitude</b>, <b>duration</b><br> for constant altitude calculations; <br> <br> Or specify <br> <b>initial_altitude</b>, <b>cruising_altitudes</b>, <b>climb_times</b>, <b>cruising_times</b>, <b>descent_time</b>, <b>final_altitude</b><br> to calculate dose accounting for a step climb. <br> <br> Note: the airport codes or coordinates (depending on which was specified), and the date in DD/MM/YYYY format, are echoed in the json response as strings. 
     * @param {String} origin The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the origin airport.
     * @param {String} destination The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the destination airport.
     * @param {Number} year Year in YYYY.
     * @param {Number} month Month in MM.
     * @param {Number} day Day in DD.
     * @param {Object} opts Optional parameters
     * @param {Number} [altitude] Altitude (in km). The minimum is 0 m, the maximum is 20 km.
     * @param {Number} [duration] The flight duration in hours. The minimum is 0, the maximum is 20 hrs.
     * @param {Number} [initialAltitude] Initial altitude (in km). The minimum is 0 m, the maximum is 20 km.
     * @param {Array.<Number>} [cruisingAltitudes] Cruising altitudes (in km). The minimum is 0 m, the maximum is 20 km.
     * @param {Array.<Number>} [climbTimes] Climb times for each cruising altitude (hours).
     * @param {Array.<Number>} [cruisingTimes] Cruising times at each cruising altitude (hours).
     * @param {Number} [descentTime] Descent time from last cruising altitude to final altitude (hours).
     * @param {Number} [finalAltitude] Final altitude (in km).
     * @param {module:api/RoutedoseApi~appApiIcaroEndpointsICAROEffectiveDoseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppApiIcaroEndpointsICAROEffectiveDose200Response}
     */
    appApiIcaroEndpointsICAROEffectiveDose(origin, destination, year, month, day, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling appApiIcaroEndpointsICAROEffectiveDose");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling appApiIcaroEndpointsICAROEffectiveDose");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling appApiIcaroEndpointsICAROEffectiveDose");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling appApiIcaroEndpointsICAROEffectiveDose");
      }
      // verify the required parameter 'day' is set
      if (day === undefined || day === null) {
        throw new Error("Missing the required parameter 'day' when calling appApiIcaroEndpointsICAROEffectiveDose");
      }

      let pathParams = {
      };
      let queryParams = {
        'origin': origin,
        'destination': destination,
        'altitude': opts['altitude'],
        'duration': opts['duration'],
        'initial_altitude': opts['initialAltitude'],
        'cruising_altitudes': this.apiClient.buildCollectionParam(opts['cruisingAltitudes'], 'multi'),
        'climb_times': this.apiClient.buildCollectionParam(opts['climbTimes'], 'multi'),
        'cruising_times': this.apiClient.buildCollectionParam(opts['cruisingTimes'], 'multi'),
        'descent_time': opts['descentTime'],
        'final_altitude': opts['finalAltitude'],
        'year': year,
        'month': month,
        'day': day
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppApiIcaroEndpointsICAROEffectiveDose200Response;
      return this.apiClient.callApi(
        '/route/effective_dose', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
