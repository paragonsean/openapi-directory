/**
 * Aviation Radiation API
 * Our atmosphere protects us from a hostile space radiation environment comprising high energy particles of solar and intergalactic origin. Solar radiation is significant during unpredictable and short lived solar flares and coronal mass ejections (CMEs); however, galactic cosmic radiation (GCR) is omnipresent. The GCR intensity varies with latitude, longitude, and time due to effects of solar activity on the interplanetary magnetic field, as well as the Earth's magnetic field. Space radiation collides with gases in the atmosphere, leading to a complex shower of high energy radiation, the intensity and composition of which varies spatially and temporally. Excessive exposure to radiation can damage DNA and lead to long-term health effects such as an increased risk of cancer.  <br><br> Resulting radiation levels at commercial aircraft altitudes are greater than at sea level. Aircrew are classified as radiation workers in some countries; however, planning to limit their exposure, and monitoring, is generally lacking. Both real-time measurements and predictive models of radiation in the atmosphere are important to mitigate the radiation risk to crew. <br><br> We host a RESTful API to models of cosmic ray induced ionising radiation in the atmosphere.  The CARI7 and PARMA endpoints use models developed by the US Federal Aviation Administration and the Japan Atomic Energy Agency to  calculate cosmic radiation doses at a point.  The Route Dose API calculates the same quantities along a great circle route between two airports using CARI7. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2022. 
 *
 * The version of the OpenAPI document: 1.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRoutedoseApi_H
#define OAI_OAIRoutedoseApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApp_api_icaro_endpoints_ICARO_ambient_dose_200_response.h"
#include "OAIApp_api_icaro_endpoints_ICARO_effective_dose_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRoutedoseApi : public QObject {
    Q_OBJECT

public:
    OAIRoutedoseApi(const int timeOut = 0);
    ~OAIRoutedoseApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  origin QString [required]
    * @param[in]  destination QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  month qint32 [required]
    * @param[in]  day qint32 [required]
    * @param[in]  altitude double [optional]
    * @param[in]  duration double [optional]
    * @param[in]  initial_altitude double [optional]
    * @param[in]  cruising_altitudes QList<double> [optional]
    * @param[in]  climb_times QList<double> [optional]
    * @param[in]  cruising_times QList<double> [optional]
    * @param[in]  descent_time double [optional]
    * @param[in]  final_altitude double [optional]
    */
    virtual void app_apiIcaro_endpoints_ICARO_ambientDose(const QString &origin, const QString &destination, const qint32 &year, const qint32 &month, const qint32 &day, const ::OpenAPI::OptionalParam<double> &altitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &duration = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &initial_altitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QList<double>> &cruising_altitudes = ::OpenAPI::OptionalParam<QList<double>>(), const ::OpenAPI::OptionalParam<QList<double>> &climb_times = ::OpenAPI::OptionalParam<QList<double>>(), const ::OpenAPI::OptionalParam<QList<double>> &cruising_times = ::OpenAPI::OptionalParam<QList<double>>(), const ::OpenAPI::OptionalParam<double> &descent_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &final_altitude = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  origin QString [required]
    * @param[in]  destination QString [required]
    * @param[in]  year qint32 [required]
    * @param[in]  month qint32 [required]
    * @param[in]  day qint32 [required]
    * @param[in]  altitude double [optional]
    * @param[in]  duration double [optional]
    * @param[in]  initial_altitude double [optional]
    * @param[in]  cruising_altitudes QList<double> [optional]
    * @param[in]  climb_times QList<double> [optional]
    * @param[in]  cruising_times QList<double> [optional]
    * @param[in]  descent_time double [optional]
    * @param[in]  final_altitude double [optional]
    */
    virtual void app_apiIcaro_endpoints_ICARO_effectiveDose(const QString &origin, const QString &destination, const qint32 &year, const qint32 &month, const qint32 &day, const ::OpenAPI::OptionalParam<double> &altitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &duration = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &initial_altitude = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QList<double>> &cruising_altitudes = ::OpenAPI::OptionalParam<QList<double>>(), const ::OpenAPI::OptionalParam<QList<double>> &climb_times = ::OpenAPI::OptionalParam<QList<double>>(), const ::OpenAPI::OptionalParam<QList<double>> &cruising_times = ::OpenAPI::OptionalParam<QList<double>>(), const ::OpenAPI::OptionalParam<double> &descent_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &final_altitude = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void app_apiIcaro_endpoints_ICARO_ambientDoseCallback(OAIHttpRequestWorker *worker);
    void app_apiIcaro_endpoints_ICARO_effectiveDoseCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void app_apiIcaro_endpoints_ICARO_ambientDoseSignal(OAIApp_api_icaro_endpoints_ICARO_ambient_dose_200_response summary);
    void app_apiIcaro_endpoints_ICARO_effectiveDoseSignal(OAIApp_api_icaro_endpoints_ICARO_effective_dose_200_response summary);


    void app_apiIcaro_endpoints_ICARO_ambientDoseSignalFull(OAIHttpRequestWorker *worker, OAIApp_api_icaro_endpoints_ICARO_ambient_dose_200_response summary);
    void app_apiIcaro_endpoints_ICARO_effectiveDoseSignalFull(OAIHttpRequestWorker *worker, OAIApp_api_icaro_endpoints_ICARO_effective_dose_200_response summary);

    Q_DECL_DEPRECATED_X("Use app_apiIcaro_endpoints_ICARO_ambientDoseSignalError() instead")
    void app_apiIcaro_endpoints_ICARO_ambientDoseSignalE(OAIApp_api_icaro_endpoints_ICARO_ambient_dose_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void app_apiIcaro_endpoints_ICARO_ambientDoseSignalError(OAIApp_api_icaro_endpoints_ICARO_ambient_dose_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use app_apiIcaro_endpoints_ICARO_effectiveDoseSignalError() instead")
    void app_apiIcaro_endpoints_ICARO_effectiveDoseSignalE(OAIApp_api_icaro_endpoints_ICARO_effective_dose_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void app_apiIcaro_endpoints_ICARO_effectiveDoseSignalError(OAIApp_api_icaro_endpoints_ICARO_effective_dose_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use app_apiIcaro_endpoints_ICARO_ambientDoseSignalErrorFull() instead")
    void app_apiIcaro_endpoints_ICARO_ambientDoseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void app_apiIcaro_endpoints_ICARO_ambientDoseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use app_apiIcaro_endpoints_ICARO_effectiveDoseSignalErrorFull() instead")
    void app_apiIcaro_endpoints_ICARO_effectiveDoseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void app_apiIcaro_endpoints_ICARO_effectiveDoseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
