/*
 * Aviation Radiation API
 * Our atmosphere protects us from a hostile space radiation environment comprising high energy particles of solar and intergalactic origin. Solar radiation is significant during unpredictable and short lived solar flares and coronal mass ejections (CMEs); however, galactic cosmic radiation (GCR) is omnipresent. The GCR intensity varies with latitude, longitude, and time due to effects of solar activity on the interplanetary magnetic field, as well as the Earth's magnetic field. Space radiation collides with gases in the atmosphere, leading to a complex shower of high energy radiation, the intensity and composition of which varies spatially and temporally. Excessive exposure to radiation can damage DNA and lead to long-term health effects such as an increased risk of cancer.  <br><br> Resulting radiation levels at commercial aircraft altitudes are greater than at sea level. Aircrew are classified as radiation workers in some countries; however, planning to limit their exposure, and monitoring, is generally lacking. Both real-time measurements and predictive models of radiation in the atmosphere are important to mitigate the radiation risk to crew. <br><br> We host a RESTful API to models of cosmic ray induced ionising radiation in the atmosphere.  The CARI7 and PARMA endpoints use models developed by the US Federal Aviation Administration and the Japan Atomic Energy Agency to  calculate cosmic radiation doses at a point.  The Route Dose API calculates the same quantities along a great circle route between two airports using CARI7. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2022. 
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppApiIcaroEndpointsICAROAmbientDose200Response;
import org.openapitools.client.model.AppApiIcaroEndpointsICAROEffectiveDose200Response;
import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RoutedoseApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RoutedoseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoutedoseApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appApiIcaroEndpointsICAROAmbientDose
     * @param origin The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the origin airport. (required)
     * @param destination The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the destination airport. (required)
     * @param year Year in YYYY. (required)
     * @param month Month in MM. (required)
     * @param day Day in DD. (required)
     * @param altitude Altitude (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param duration The flight duration in hours. The minimum is 0, the maximum is 20 hrs. (optional)
     * @param initialAltitude Initial altitude (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param cruisingAltitudes Cruising altitudes (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param climbTimes Climb times for each cruising altitude (hours). (optional)
     * @param cruisingTimes Cruising times at each cruising altitude (hours). (optional)
     * @param descentTime Descent time from last cruising altitude to final altitude (hours). (optional)
     * @param finalAltitude Final altitude (in km). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful dose calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiIcaroEndpointsICAROAmbientDoseCall(String origin, String destination, Integer year, Integer month, Integer day, BigDecimal altitude, BigDecimal duration, BigDecimal initialAltitude, List<BigDecimal> cruisingAltitudes, List<BigDecimal> climbTimes, List<BigDecimal> cruisingTimes, BigDecimal descentTime, BigDecimal finalAltitude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/route/ambient_dose";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin", origin));
        }

        if (destination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination", destination));
        }

        if (altitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("altitude", altitude));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
        }

        if (initialAltitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("initial_altitude", initialAltitude));
        }

        if (cruisingAltitudes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cruising_altitudes", cruisingAltitudes));
        }

        if (climbTimes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "climb_times", climbTimes));
        }

        if (cruisingTimes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cruising_times", cruisingTimes));
        }

        if (descentTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("descent_time", descentTime));
        }

        if (finalAltitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("final_altitude", finalAltitude));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (day != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day", day));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appApiIcaroEndpointsICAROAmbientDoseValidateBeforeCall(String origin, String destination, Integer year, Integer month, Integer day, BigDecimal altitude, BigDecimal duration, BigDecimal initialAltitude, List<BigDecimal> cruisingAltitudes, List<BigDecimal> climbTimes, List<BigDecimal> cruisingTimes, BigDecimal descentTime, BigDecimal finalAltitude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling appApiIcaroEndpointsICAROAmbientDose(Async)");
        }

        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling appApiIcaroEndpointsICAROAmbientDose(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling appApiIcaroEndpointsICAROAmbientDose(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling appApiIcaroEndpointsICAROAmbientDose(Async)");
        }

        // verify the required parameter 'day' is set
        if (day == null) {
            throw new ApiException("Missing the required parameter 'day' when calling appApiIcaroEndpointsICAROAmbientDose(Async)");
        }

        return appApiIcaroEndpointsICAROAmbientDoseCall(origin, destination, year, month, day, altitude, duration, initialAltitude, cruisingAltitudes, climbTimes, cruisingTimes, descentTime, finalAltitude, _callback);

    }

    /**
     * Calculate the ambient equivalent dose along a great circle flight route. 
     * The ambient dose equivalent, H*(10), is an operational quantity that simulates the  human body by measuring the dose equivalent at a depth of 10 mm within a tissue  equivalent sphere of 300 mm diameter. It is a measurable quantity that is  used to calibrate area monitors (radiation detectors) for mixed radiation fields.  &lt;br&gt; &lt;br&gt; Use this endpoint if you are comparing model predictions to measurements. &lt;br&gt; &lt;br&gt; This API can run in two modes: &lt;br&gt; &lt;br&gt; Either specify &lt;br&gt; &lt;b&gt;altitude&lt;/b&gt;, &lt;b&gt;duration&lt;/b&gt;&lt;br&gt; for constant altitude calculations; &lt;br&gt; &lt;br&gt; Or specify &lt;br&gt; &lt;b&gt;initial_altitude&lt;/b&gt;, &lt;b&gt;cruising_altitudes&lt;/b&gt;, &lt;b&gt;climb_times&lt;/b&gt;, &lt;b&gt;cruising_times&lt;/b&gt;, &lt;b&gt;descent_time&lt;/b&gt;, &lt;b&gt;final_altitude&lt;/b&gt;&lt;br&gt; to calculate dose accounting for a step climb. &lt;br&gt; &lt;br&gt; Note: the airport codes or coordinates (depending on which was specified), and the date in DD/MM/YYYY format, are echoed in the json response as strings. 
     * @param origin The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the origin airport. (required)
     * @param destination The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the destination airport. (required)
     * @param year Year in YYYY. (required)
     * @param month Month in MM. (required)
     * @param day Day in DD. (required)
     * @param altitude Altitude (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param duration The flight duration in hours. The minimum is 0, the maximum is 20 hrs. (optional)
     * @param initialAltitude Initial altitude (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param cruisingAltitudes Cruising altitudes (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param climbTimes Climb times for each cruising altitude (hours). (optional)
     * @param cruisingTimes Cruising times at each cruising altitude (hours). (optional)
     * @param descentTime Descent time from last cruising altitude to final altitude (hours). (optional)
     * @param finalAltitude Final altitude (in km). (optional)
     * @return AppApiIcaroEndpointsICAROAmbientDose200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful dose calculation </td><td>  -  </td></tr>
     </table>
     */
    public AppApiIcaroEndpointsICAROAmbientDose200Response appApiIcaroEndpointsICAROAmbientDose(String origin, String destination, Integer year, Integer month, Integer day, BigDecimal altitude, BigDecimal duration, BigDecimal initialAltitude, List<BigDecimal> cruisingAltitudes, List<BigDecimal> climbTimes, List<BigDecimal> cruisingTimes, BigDecimal descentTime, BigDecimal finalAltitude) throws ApiException {
        ApiResponse<AppApiIcaroEndpointsICAROAmbientDose200Response> localVarResp = appApiIcaroEndpointsICAROAmbientDoseWithHttpInfo(origin, destination, year, month, day, altitude, duration, initialAltitude, cruisingAltitudes, climbTimes, cruisingTimes, descentTime, finalAltitude);
        return localVarResp.getData();
    }

    /**
     * Calculate the ambient equivalent dose along a great circle flight route. 
     * The ambient dose equivalent, H*(10), is an operational quantity that simulates the  human body by measuring the dose equivalent at a depth of 10 mm within a tissue  equivalent sphere of 300 mm diameter. It is a measurable quantity that is  used to calibrate area monitors (radiation detectors) for mixed radiation fields.  &lt;br&gt; &lt;br&gt; Use this endpoint if you are comparing model predictions to measurements. &lt;br&gt; &lt;br&gt; This API can run in two modes: &lt;br&gt; &lt;br&gt; Either specify &lt;br&gt; &lt;b&gt;altitude&lt;/b&gt;, &lt;b&gt;duration&lt;/b&gt;&lt;br&gt; for constant altitude calculations; &lt;br&gt; &lt;br&gt; Or specify &lt;br&gt; &lt;b&gt;initial_altitude&lt;/b&gt;, &lt;b&gt;cruising_altitudes&lt;/b&gt;, &lt;b&gt;climb_times&lt;/b&gt;, &lt;b&gt;cruising_times&lt;/b&gt;, &lt;b&gt;descent_time&lt;/b&gt;, &lt;b&gt;final_altitude&lt;/b&gt;&lt;br&gt; to calculate dose accounting for a step climb. &lt;br&gt; &lt;br&gt; Note: the airport codes or coordinates (depending on which was specified), and the date in DD/MM/YYYY format, are echoed in the json response as strings. 
     * @param origin The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the origin airport. (required)
     * @param destination The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the destination airport. (required)
     * @param year Year in YYYY. (required)
     * @param month Month in MM. (required)
     * @param day Day in DD. (required)
     * @param altitude Altitude (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param duration The flight duration in hours. The minimum is 0, the maximum is 20 hrs. (optional)
     * @param initialAltitude Initial altitude (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param cruisingAltitudes Cruising altitudes (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param climbTimes Climb times for each cruising altitude (hours). (optional)
     * @param cruisingTimes Cruising times at each cruising altitude (hours). (optional)
     * @param descentTime Descent time from last cruising altitude to final altitude (hours). (optional)
     * @param finalAltitude Final altitude (in km). (optional)
     * @return ApiResponse&lt;AppApiIcaroEndpointsICAROAmbientDose200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful dose calculation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppApiIcaroEndpointsICAROAmbientDose200Response> appApiIcaroEndpointsICAROAmbientDoseWithHttpInfo(String origin, String destination, Integer year, Integer month, Integer day, BigDecimal altitude, BigDecimal duration, BigDecimal initialAltitude, List<BigDecimal> cruisingAltitudes, List<BigDecimal> climbTimes, List<BigDecimal> cruisingTimes, BigDecimal descentTime, BigDecimal finalAltitude) throws ApiException {
        okhttp3.Call localVarCall = appApiIcaroEndpointsICAROAmbientDoseValidateBeforeCall(origin, destination, year, month, day, altitude, duration, initialAltitude, cruisingAltitudes, climbTimes, cruisingTimes, descentTime, finalAltitude, null);
        Type localVarReturnType = new TypeToken<AppApiIcaroEndpointsICAROAmbientDose200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate the ambient equivalent dose along a great circle flight route.  (asynchronously)
     * The ambient dose equivalent, H*(10), is an operational quantity that simulates the  human body by measuring the dose equivalent at a depth of 10 mm within a tissue  equivalent sphere of 300 mm diameter. It is a measurable quantity that is  used to calibrate area monitors (radiation detectors) for mixed radiation fields.  &lt;br&gt; &lt;br&gt; Use this endpoint if you are comparing model predictions to measurements. &lt;br&gt; &lt;br&gt; This API can run in two modes: &lt;br&gt; &lt;br&gt; Either specify &lt;br&gt; &lt;b&gt;altitude&lt;/b&gt;, &lt;b&gt;duration&lt;/b&gt;&lt;br&gt; for constant altitude calculations; &lt;br&gt; &lt;br&gt; Or specify &lt;br&gt; &lt;b&gt;initial_altitude&lt;/b&gt;, &lt;b&gt;cruising_altitudes&lt;/b&gt;, &lt;b&gt;climb_times&lt;/b&gt;, &lt;b&gt;cruising_times&lt;/b&gt;, &lt;b&gt;descent_time&lt;/b&gt;, &lt;b&gt;final_altitude&lt;/b&gt;&lt;br&gt; to calculate dose accounting for a step climb. &lt;br&gt; &lt;br&gt; Note: the airport codes or coordinates (depending on which was specified), and the date in DD/MM/YYYY format, are echoed in the json response as strings. 
     * @param origin The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the origin airport. (required)
     * @param destination The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the destination airport. (required)
     * @param year Year in YYYY. (required)
     * @param month Month in MM. (required)
     * @param day Day in DD. (required)
     * @param altitude Altitude (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param duration The flight duration in hours. The minimum is 0, the maximum is 20 hrs. (optional)
     * @param initialAltitude Initial altitude (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param cruisingAltitudes Cruising altitudes (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param climbTimes Climb times for each cruising altitude (hours). (optional)
     * @param cruisingTimes Cruising times at each cruising altitude (hours). (optional)
     * @param descentTime Descent time from last cruising altitude to final altitude (hours). (optional)
     * @param finalAltitude Final altitude (in km). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful dose calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiIcaroEndpointsICAROAmbientDoseAsync(String origin, String destination, Integer year, Integer month, Integer day, BigDecimal altitude, BigDecimal duration, BigDecimal initialAltitude, List<BigDecimal> cruisingAltitudes, List<BigDecimal> climbTimes, List<BigDecimal> cruisingTimes, BigDecimal descentTime, BigDecimal finalAltitude, final ApiCallback<AppApiIcaroEndpointsICAROAmbientDose200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appApiIcaroEndpointsICAROAmbientDoseValidateBeforeCall(origin, destination, year, month, day, altitude, duration, initialAltitude, cruisingAltitudes, climbTimes, cruisingTimes, descentTime, finalAltitude, _callback);
        Type localVarReturnType = new TypeToken<AppApiIcaroEndpointsICAROAmbientDose200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appApiIcaroEndpointsICAROEffectiveDose
     * @param origin The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the origin airport. (required)
     * @param destination The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the destination airport. (required)
     * @param year Year in YYYY. (required)
     * @param month Month in MM. (required)
     * @param day Day in DD. (required)
     * @param altitude Altitude (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param duration The flight duration in hours. The minimum is 0, the maximum is 20 hrs. (optional)
     * @param initialAltitude Initial altitude (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param cruisingAltitudes Cruising altitudes (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param climbTimes Climb times for each cruising altitude (hours). (optional)
     * @param cruisingTimes Cruising times at each cruising altitude (hours). (optional)
     * @param descentTime Descent time from last cruising altitude to final altitude (hours). (optional)
     * @param finalAltitude Final altitude (in km). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful dose calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiIcaroEndpointsICAROEffectiveDoseCall(String origin, String destination, Integer year, Integer month, Integer day, BigDecimal altitude, BigDecimal duration, BigDecimal initialAltitude, List<BigDecimal> cruisingAltitudes, List<BigDecimal> climbTimes, List<BigDecimal> cruisingTimes, BigDecimal descentTime, BigDecimal finalAltitude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/route/effective_dose";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin", origin));
        }

        if (destination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination", destination));
        }

        if (altitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("altitude", altitude));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
        }

        if (initialAltitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("initial_altitude", initialAltitude));
        }

        if (cruisingAltitudes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cruising_altitudes", cruisingAltitudes));
        }

        if (climbTimes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "climb_times", climbTimes));
        }

        if (cruisingTimes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "cruising_times", cruisingTimes));
        }

        if (descentTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("descent_time", descentTime));
        }

        if (finalAltitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("final_altitude", finalAltitude));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (month != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("month", month));
        }

        if (day != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("day", day));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appApiIcaroEndpointsICAROEffectiveDoseValidateBeforeCall(String origin, String destination, Integer year, Integer month, Integer day, BigDecimal altitude, BigDecimal duration, BigDecimal initialAltitude, List<BigDecimal> cruisingAltitudes, List<BigDecimal> climbTimes, List<BigDecimal> cruisingTimes, BigDecimal descentTime, BigDecimal finalAltitude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling appApiIcaroEndpointsICAROEffectiveDose(Async)");
        }

        // verify the required parameter 'destination' is set
        if (destination == null) {
            throw new ApiException("Missing the required parameter 'destination' when calling appApiIcaroEndpointsICAROEffectiveDose(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling appApiIcaroEndpointsICAROEffectiveDose(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling appApiIcaroEndpointsICAROEffectiveDose(Async)");
        }

        // verify the required parameter 'day' is set
        if (day == null) {
            throw new ApiException("Missing the required parameter 'day' when calling appApiIcaroEndpointsICAROEffectiveDose(Async)");
        }

        return appApiIcaroEndpointsICAROEffectiveDoseCall(origin, destination, year, month, day, altitude, duration, initialAltitude, cruisingAltitudes, climbTimes, cruisingTimes, descentTime, finalAltitude, _callback);

    }

    /**
     * Calculate the total effective dose along a great circle flight route. 
     * Effective Dose is a radiation protection quantity defined by the International Commission on  Radiological Protection (ICRP) and represents the stochastic health  risk to the human body at low levels of radiation. It accounts for the different sensitivities of organs to ionising radiation, as well as the different effectiveness of various types of radiation. &lt;br&gt; &lt;br&gt; Use this endpoint if you need to estimate radiation exposures of personnel. &lt;br&gt; &lt;br&gt; This API can run in two modes: &lt;br&gt; &lt;br&gt; Either specify &lt;br&gt; &lt;b&gt;altitude&lt;/b&gt;, &lt;b&gt;duration&lt;/b&gt;&lt;br&gt; for constant altitude calculations; &lt;br&gt; &lt;br&gt; Or specify &lt;br&gt; &lt;b&gt;initial_altitude&lt;/b&gt;, &lt;b&gt;cruising_altitudes&lt;/b&gt;, &lt;b&gt;climb_times&lt;/b&gt;, &lt;b&gt;cruising_times&lt;/b&gt;, &lt;b&gt;descent_time&lt;/b&gt;, &lt;b&gt;final_altitude&lt;/b&gt;&lt;br&gt; to calculate dose accounting for a step climb. &lt;br&gt; &lt;br&gt; Note: the airport codes or coordinates (depending on which was specified), and the date in DD/MM/YYYY format, are echoed in the json response as strings. 
     * @param origin The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the origin airport. (required)
     * @param destination The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the destination airport. (required)
     * @param year Year in YYYY. (required)
     * @param month Month in MM. (required)
     * @param day Day in DD. (required)
     * @param altitude Altitude (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param duration The flight duration in hours. The minimum is 0, the maximum is 20 hrs. (optional)
     * @param initialAltitude Initial altitude (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param cruisingAltitudes Cruising altitudes (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param climbTimes Climb times for each cruising altitude (hours). (optional)
     * @param cruisingTimes Cruising times at each cruising altitude (hours). (optional)
     * @param descentTime Descent time from last cruising altitude to final altitude (hours). (optional)
     * @param finalAltitude Final altitude (in km). (optional)
     * @return AppApiIcaroEndpointsICAROEffectiveDose200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful dose calculation </td><td>  -  </td></tr>
     </table>
     */
    public AppApiIcaroEndpointsICAROEffectiveDose200Response appApiIcaroEndpointsICAROEffectiveDose(String origin, String destination, Integer year, Integer month, Integer day, BigDecimal altitude, BigDecimal duration, BigDecimal initialAltitude, List<BigDecimal> cruisingAltitudes, List<BigDecimal> climbTimes, List<BigDecimal> cruisingTimes, BigDecimal descentTime, BigDecimal finalAltitude) throws ApiException {
        ApiResponse<AppApiIcaroEndpointsICAROEffectiveDose200Response> localVarResp = appApiIcaroEndpointsICAROEffectiveDoseWithHttpInfo(origin, destination, year, month, day, altitude, duration, initialAltitude, cruisingAltitudes, climbTimes, cruisingTimes, descentTime, finalAltitude);
        return localVarResp.getData();
    }

    /**
     * Calculate the total effective dose along a great circle flight route. 
     * Effective Dose is a radiation protection quantity defined by the International Commission on  Radiological Protection (ICRP) and represents the stochastic health  risk to the human body at low levels of radiation. It accounts for the different sensitivities of organs to ionising radiation, as well as the different effectiveness of various types of radiation. &lt;br&gt; &lt;br&gt; Use this endpoint if you need to estimate radiation exposures of personnel. &lt;br&gt; &lt;br&gt; This API can run in two modes: &lt;br&gt; &lt;br&gt; Either specify &lt;br&gt; &lt;b&gt;altitude&lt;/b&gt;, &lt;b&gt;duration&lt;/b&gt;&lt;br&gt; for constant altitude calculations; &lt;br&gt; &lt;br&gt; Or specify &lt;br&gt; &lt;b&gt;initial_altitude&lt;/b&gt;, &lt;b&gt;cruising_altitudes&lt;/b&gt;, &lt;b&gt;climb_times&lt;/b&gt;, &lt;b&gt;cruising_times&lt;/b&gt;, &lt;b&gt;descent_time&lt;/b&gt;, &lt;b&gt;final_altitude&lt;/b&gt;&lt;br&gt; to calculate dose accounting for a step climb. &lt;br&gt; &lt;br&gt; Note: the airport codes or coordinates (depending on which was specified), and the date in DD/MM/YYYY format, are echoed in the json response as strings. 
     * @param origin The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the origin airport. (required)
     * @param destination The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the destination airport. (required)
     * @param year Year in YYYY. (required)
     * @param month Month in MM. (required)
     * @param day Day in DD. (required)
     * @param altitude Altitude (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param duration The flight duration in hours. The minimum is 0, the maximum is 20 hrs. (optional)
     * @param initialAltitude Initial altitude (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param cruisingAltitudes Cruising altitudes (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param climbTimes Climb times for each cruising altitude (hours). (optional)
     * @param cruisingTimes Cruising times at each cruising altitude (hours). (optional)
     * @param descentTime Descent time from last cruising altitude to final altitude (hours). (optional)
     * @param finalAltitude Final altitude (in km). (optional)
     * @return ApiResponse&lt;AppApiIcaroEndpointsICAROEffectiveDose200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful dose calculation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppApiIcaroEndpointsICAROEffectiveDose200Response> appApiIcaroEndpointsICAROEffectiveDoseWithHttpInfo(String origin, String destination, Integer year, Integer month, Integer day, BigDecimal altitude, BigDecimal duration, BigDecimal initialAltitude, List<BigDecimal> cruisingAltitudes, List<BigDecimal> climbTimes, List<BigDecimal> cruisingTimes, BigDecimal descentTime, BigDecimal finalAltitude) throws ApiException {
        okhttp3.Call localVarCall = appApiIcaroEndpointsICAROEffectiveDoseValidateBeforeCall(origin, destination, year, month, day, altitude, duration, initialAltitude, cruisingAltitudes, climbTimes, cruisingTimes, descentTime, finalAltitude, null);
        Type localVarReturnType = new TypeToken<AppApiIcaroEndpointsICAROEffectiveDose200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate the total effective dose along a great circle flight route.  (asynchronously)
     * Effective Dose is a radiation protection quantity defined by the International Commission on  Radiological Protection (ICRP) and represents the stochastic health  risk to the human body at low levels of radiation. It accounts for the different sensitivities of organs to ionising radiation, as well as the different effectiveness of various types of radiation. &lt;br&gt; &lt;br&gt; Use this endpoint if you need to estimate radiation exposures of personnel. &lt;br&gt; &lt;br&gt; This API can run in two modes: &lt;br&gt; &lt;br&gt; Either specify &lt;br&gt; &lt;b&gt;altitude&lt;/b&gt;, &lt;b&gt;duration&lt;/b&gt;&lt;br&gt; for constant altitude calculations; &lt;br&gt; &lt;br&gt; Or specify &lt;br&gt; &lt;b&gt;initial_altitude&lt;/b&gt;, &lt;b&gt;cruising_altitudes&lt;/b&gt;, &lt;b&gt;climb_times&lt;/b&gt;, &lt;b&gt;cruising_times&lt;/b&gt;, &lt;b&gt;descent_time&lt;/b&gt;, &lt;b&gt;final_altitude&lt;/b&gt;&lt;br&gt; to calculate dose accounting for a step climb. &lt;br&gt; &lt;br&gt; Note: the airport codes or coordinates (depending on which was specified), and the date in DD/MM/YYYY format, are echoed in the json response as strings. 
     * @param origin The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the origin airport. (required)
     * @param destination The ICAO code or IATA code or latitude,longitude pair (in decimal degrees) of the destination airport. (required)
     * @param year Year in YYYY. (required)
     * @param month Month in MM. (required)
     * @param day Day in DD. (required)
     * @param altitude Altitude (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param duration The flight duration in hours. The minimum is 0, the maximum is 20 hrs. (optional)
     * @param initialAltitude Initial altitude (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param cruisingAltitudes Cruising altitudes (in km). The minimum is 0 m, the maximum is 20 km. (optional)
     * @param climbTimes Climb times for each cruising altitude (hours). (optional)
     * @param cruisingTimes Cruising times at each cruising altitude (hours). (optional)
     * @param descentTime Descent time from last cruising altitude to final altitude (hours). (optional)
     * @param finalAltitude Final altitude (in km). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful dose calculation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiIcaroEndpointsICAROEffectiveDoseAsync(String origin, String destination, Integer year, Integer month, Integer day, BigDecimal altitude, BigDecimal duration, BigDecimal initialAltitude, List<BigDecimal> cruisingAltitudes, List<BigDecimal> climbTimes, List<BigDecimal> cruisingTimes, BigDecimal descentTime, BigDecimal finalAltitude, final ApiCallback<AppApiIcaroEndpointsICAROEffectiveDose200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appApiIcaroEndpointsICAROEffectiveDoseValidateBeforeCall(origin, destination, year, month, day, altitude, duration, initialAltitude, cruisingAltitudes, climbTimes, cruisingTimes, descentTime, finalAltitude, _callback);
        Type localVarReturnType = new TypeToken<AppApiIcaroEndpointsICAROEffectiveDose200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
