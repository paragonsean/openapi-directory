/*
 * Aviation Radiation API
 * Our atmosphere protects us from a hostile space radiation environment comprising high energy particles of solar and intergalactic origin. Solar radiation is significant during unpredictable and short lived solar flares and coronal mass ejections (CMEs); however, galactic cosmic radiation (GCR) is omnipresent. The GCR intensity varies with latitude, longitude, and time due to effects of solar activity on the interplanetary magnetic field, as well as the Earth's magnetic field. Space radiation collides with gases in the atmosphere, leading to a complex shower of high energy radiation, the intensity and composition of which varies spatially and temporally. Excessive exposure to radiation can damage DNA and lead to long-term health effects such as an increased risk of cancer.  <br><br> Resulting radiation levels at commercial aircraft altitudes are greater than at sea level. Aircrew are classified as radiation workers in some countries; however, planning to limit their exposure, and monitoring, is generally lacking. Both real-time measurements and predictive models of radiation in the atmosphere are important to mitigate the radiation risk to crew. <br><br> We host a RESTful API to models of cosmic ray induced ionising radiation in the atmosphere.  The CARI7 and PARMA endpoints use models developed by the US Federal Aviation Administration and the Japan Atomic Energy Agency to  calculate cosmic radiation doses at a point.  The Route Dose API calculates the same quantities along a great circle route between two airports using CARI7. <br><br> API requests must contain a key \"API-Key\" in the header (see code samples). Obtain a key from  <a href='https://developer.amentum.io'>here</a>. <br><br>  Help us improve the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\">here</a>.<br><br> Amentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br> Copyright <a href='https://amentum.space'>Amentum Pty Ltd</a> 2022. 
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AppApiIcaroEndpointsICAROAmbientDose200ResponseDose;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppApiIcaroEndpointsICAROEffectiveDose200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:31.360866-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppApiIcaroEndpointsICAROEffectiveDose200Response {
  public static final String SERIALIZED_NAME_DOSE = "dose";
  @SerializedName(SERIALIZED_NAME_DOSE)
  private AppApiIcaroEndpointsICAROAmbientDose200ResponseDose dose;

  public AppApiIcaroEndpointsICAROEffectiveDose200Response() {
  }

  public AppApiIcaroEndpointsICAROEffectiveDose200Response dose(AppApiIcaroEndpointsICAROAmbientDose200ResponseDose dose) {
    this.dose = dose;
    return this;
  }

  /**
   * Get dose
   * @return dose
   */
  @javax.annotation.Nullable
  public AppApiIcaroEndpointsICAROAmbientDose200ResponseDose getDose() {
    return dose;
  }

  public void setDose(AppApiIcaroEndpointsICAROAmbientDose200ResponseDose dose) {
    this.dose = dose;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppApiIcaroEndpointsICAROEffectiveDose200Response appApiIcaroEndpointsICAROEffectiveDose200Response = (AppApiIcaroEndpointsICAROEffectiveDose200Response) o;
    return Objects.equals(this.dose, appApiIcaroEndpointsICAROEffectiveDose200Response.dose);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dose);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppApiIcaroEndpointsICAROEffectiveDose200Response {\n");
    sb.append("    dose: ").append(toIndentedString(dose)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dose");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppApiIcaroEndpointsICAROEffectiveDose200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppApiIcaroEndpointsICAROEffectiveDose200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppApiIcaroEndpointsICAROEffectiveDose200Response is not found in the empty JSON string", AppApiIcaroEndpointsICAROEffectiveDose200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppApiIcaroEndpointsICAROEffectiveDose200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppApiIcaroEndpointsICAROEffectiveDose200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dose`
      if (jsonObj.get("dose") != null && !jsonObj.get("dose").isJsonNull()) {
        AppApiIcaroEndpointsICAROAmbientDose200ResponseDose.validateJsonElement(jsonObj.get("dose"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppApiIcaroEndpointsICAROEffectiveDose200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppApiIcaroEndpointsICAROEffectiveDose200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppApiIcaroEndpointsICAROEffectiveDose200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppApiIcaroEndpointsICAROEffectiveDose200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<AppApiIcaroEndpointsICAROEffectiveDose200Response>() {
           @Override
           public void write(JsonWriter out, AppApiIcaroEndpointsICAROEffectiveDose200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppApiIcaroEndpointsICAROEffectiveDose200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppApiIcaroEndpointsICAROEffectiveDose200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppApiIcaroEndpointsICAROEffectiveDose200Response
   * @throws IOException if the JSON string is invalid with respect to AppApiIcaroEndpointsICAROEffectiveDose200Response
   */
  public static AppApiIcaroEndpointsICAROEffectiveDose200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppApiIcaroEndpointsICAROEffectiveDose200Response.class);
  }

  /**
   * Convert an instance of AppApiIcaroEndpointsICAROEffectiveDose200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

