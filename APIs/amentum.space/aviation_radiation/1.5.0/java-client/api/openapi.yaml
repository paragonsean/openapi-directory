openapi: 3.0.0
info:
  contact:
    x-twitter: amentumspace
  description: "Our atmosphere protects us from a hostile space radiation environment\
    \ comprising high energy particles of solar and intergalactic origin. Solar radiation\
    \ is significant during unpredictable and short lived solar flares and coronal\
    \ mass ejections (CMEs); however, galactic cosmic radiation (GCR) is omnipresent.\
    \ The GCR intensity varies with latitude, longitude, and time due to effects of\
    \ solar activity on the interplanetary magnetic field, as well as the Earth's\
    \ magnetic field. Space radiation collides with gases in the atmosphere, leading\
    \ to a complex shower of high energy radiation, the intensity and composition\
    \ of which varies spatially and temporally. Excessive exposure to radiation can\
    \ damage DNA and lead to long-term health effects such as an increased risk of\
    \ cancer.  <br><br> Resulting radiation levels at commercial aircraft altitudes\
    \ are greater than at sea level. Aircrew are classified as radiation workers in\
    \ some countries; however, planning to limit their exposure, and monitoring, is\
    \ generally lacking. Both real-time measurements and predictive models of radiation\
    \ in the atmosphere are important to mitigate the radiation risk to crew. <br><br>\n\
    We host a RESTful API to models of cosmic ray induced ionising radiation in the\
    \ atmosphere. \nThe CARI7 and PARMA endpoints use models developed by the US Federal\
    \ Aviation Administration and the Japan Atomic Energy Agency to  calculate cosmic\
    \ radiation doses at a point. \nThe Route Dose API calculates the same quantities\
    \ along a great circle route between two airports using CARI7. <br><br>\nAPI requests\
    \ must contain a key \"API-Key\" in the header (see code samples). Obtain a key\
    \ from  <a href='https://developer.amentum.io'>here</a>. <br><br> \nHelp us improve\
    \ the quality of our web APIs by completing our 2 minute survey <a href=\"https://www.surveymonkey.com/r/CTDTRBN\"\
    >here</a>.<br><br>\nAmentum Pty Ltd is not responsible nor liable for any loss\
    \ or damage of any sort incurred as a result of using the API. <br><br>\nCopyright\
    \ <a href='https://amentum.space'>Amentum Pty Ltd</a> 2022.\n"
  title: Aviation Radiation API
  version: 1.5.0
  x-apisguru-categories:
  - location
  - open_data
  x-logo:
    altText: Amentum Aerospace
    backgroundColor: '#FFFFFF'
    url: https://twitter.com/amentumspace/profile_image?size=original
  x-origin:
  - format: openapi
    url: https://cosmicrays.amentum.space//openapi.json
    version: "3.0"
  x-providerName: amentum.space
  x-serviceName: aviation_radiation
servers:
- url: ""
tags:
- description: |
    Developed by the US Federal Aviation Administration's  Civil Aerospace Medical Institute, CARI7 calculates cosmic  ray doses in the atmosphere. See <a href="https://academic.oup.com/rpd/article/175/4/419/2884614">here</a> for a complete description of  CARI-7. The original source code and Terms and Conditions can be found <a href="https://www.faa.gov/data_research/research/med_humanfacs/aeromedical/radiobiology/cari7/">here</a><br><br> <br><br> Note: The dose is considered a monthly average. It accounts for for heliocentric potential modulation only, minor geomagnetic storm and forbush decreases are ignored.
  name: cari7
  x-displayName: CARI7 API
- description: |
    The Route Dose API estimates radiation doses along a flight route between two airports with known ICAO or IATA codes or coordinates as latitude/longitude. Waypoints are calculated assuming a great circle  route, and either a constant altitude (in kilometers) and a flight duration (in hours) or lists of altitudes and cruising times to define a step climb.  Dose rates are then calculated at each waypoint using CARI-7.  The dose rate profile is integrated along the route to obtain the total dose for the flight. <br><br> Note: Dose is considered a monthly average accounting for heliocentric potential (HP) modulation only, minor geomagnetic storm and forbush decrease corrections are ignored. The calculation relies on HP data from the US Federal Aviation Administration that is released monthly. Doses can be calculated on the current date and short-range forecasting  of several weeks is supported (the exact forecast horizon depends on the release date of the FAA data).
  name: routedose
  x-displayName: Route Dose API
- description: |
    The PARMA model was developed by the Japan Atomic Energy Agency (JAEA) and estimates fluxes of neutrons, protons, ions, muons, electrons, positrons, and photons on a given date, latitude, longitude, and altitude. A comprehensive description of PARMA can be found in the publications <a href="https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0160390">here</a> and <a href="https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0144679">here</a>.<br><br> <br><br> Note: the PARMA API only accounts for heliocentric potential modulation, minor geomagnetic storm and forbush decreases are ignored.
  name: parma
  x-displayName: PARMA API
paths:
  /cari7/ambient_dose:
    get:
      description: "The ambient dose equivalent, H*(10), is an operational quantity\
        \ that simulates the  human body by measuring the dose equivalent at a depth\
        \ of 10 mm within a tissue  equivalent sphere of 300 mm diameter. It is a\
        \ measurable quantity that is  used to calibrate area monitors (radiation\
        \ detectors) for mixed radiation fields. \nUse this endpoint if you are comparing\
        \ model predictions to measurements.\n"
      operationId: app.api_cari7.endpoints.CARI7.ambient_dose
      parameters:
      - description: "Altitude (in km). The minimum is 0 m, the maximum is 47 km (the\
          \ upper limit of the stratosphere)."
        explode: true
        in: query
        name: altitude
        required: true
        schema:
          example: 11
          type: number
        style: form
      - description: Latitude. -90 (S) to 90 (N).
        explode: true
        in: query
        name: latitude
        required: true
        schema:
          example: 30
          type: number
        style: form
      - description: Longitude. -180 (W) to 180 (E).
        explode: true
        in: query
        name: longitude
        required: true
        schema:
          example: 30
          type: number
        style: form
      - description: Year in YYYY.
        explode: true
        in: query
        name: year
        required: true
        schema:
          example: 2019
          type: integer
        style: form
      - description: Month in MM.
        explode: true
        in: query
        name: month
        required: true
        schema:
          example: 12
          type: integer
        style: form
      - description: Day in DD.
        explode: true
        in: query
        name: day
        required: true
        schema:
          example: 1
          type: integer
        style: form
      - description: Hour in 24 hour time.
        explode: true
        in: query
        name: utc
        required: true
        schema:
          example: 3
          type: integer
        style: form
      - description: |
          The particle type as a string. Specifying 'total' returns the dose for all particle types.
        explode: true
        in: query
        name: particle
        required: true
        schema:
          enum:
          - total
          - neutron
          - photon
          - e-
          - e+
          - mu-
          - mu+
          - proton
          - pi-
          - pi+
          - deuteron
          - triton
          - helion
          - alpha
          - Li
          - Be
          - B
          - C
          - "N"
          - O
          - F
          - Ne
          - Na
          - Mg
          - Al
          - Si
          - P
          - S
          - Cl
          - Ar
          - K
          - Ca
          - Sc
          - Ti
          - V
          - Cr
          - Mn
          - Fe
          example: total
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app_api_cari7_endpoints_CARI7_ambient_dose_200_response'
          description: Successful dose calculation
      summary: |
        The ambient dose equivalent rate calculated for a single particle type, or accumulated over all particle types.
      tags:
      - cari7
      x-codeSamples:
      - lang: Shell
        source: |
          curl -X GET "https://avrad.amentum.io/cari7/ambient_dose?altitude=11&latitude=30&longitude=30&year=2019&month=12&day=1&utc=3&particle=total" -H "API-Key: <your_key>" -H "accept: application/json"
      - lang: Python
        source: "import requests\n\nparams = {\n    \"altitude\" : 11, #km \n    \"\
          latitude\" : 30, #degrees (N)\n    \"longitude\" : 30, #degrees (E)\n  \
          \  \"year\" : 2019,  \n    \"month\" : 12,\n    \"day\" : 1,\n    \"particle\"\
          \ : \"total\",\n    \"utc\" : 3\n}\nheaders = {\"API-Key\" : \"<add_your_key>\"\
          }\nurl = \"https://avrad.amentum.io/cari7/ambient_dose\"\ntry:\n    response\
          \ = requests.get(url, params=params, headers=headers) \n    response.raise_for_status()\n\
          except requests.exceptions.HTTPError as e: \n    print(\"HTTP error\", e)\n\
          except requests.exceptions.RequestException as e: \n    print(\"Request\
          \ error\", e)\nelse:\n    # retrieve and return the dose rate\n    dose_rate\
          \ = response.json() \n    dose_rate_val = dose_rate['dose rate']['value']\n\
          \    units = dose_rate['dose rate']['units']\n\n    print(f\"Dose rate is\
          \ {dose_rate_val} {units}\")\n"
      - lang: Javascript
        source: "let url = 'https://avrad.amentum.io/cari7/ambient_dose?'\n\nvar params\
          \ = new URLSearchParams({\n    altitude : 11, // km \n    latitude : 30,\
          \ // degrees (N)\n    longitude : 30, // degrees (E)\n    year : 2019, \
          \ \n    month : 12,\n    day : 1,\n    particle : \"total\",\n    utc :\
          \ 3\n})\n\nvar requestOptions = {\n  method: 'GET',\n  redirect: 'follow',\n\
          \  headers: {'API-Key': '<add_your_key>'} \n};\n\nfetch(url + params, requestOptions)\n\
          \  .then(response => response.text())\n  .then(result => console.log(result))\n\
          \  .catch(error => console.log('error', error));\n"
      x-accepts:
      - application/json
  /cari7/effective_dose:
    get:
      description: |
        Effective Dose is a radiation protection quantity defined by the International Commission on
         Radiological Protection (ICRP) and represents the stochastic health
         risk to the human body at low levels of radiation.
        It accounts for the different sensitivities of organs to ionising radiation, as well as the different effectiveness of various types of radiation.
        Use this endpoint if you need to estimate radiation exposures of personnel.
      operationId: app.api_cari7.endpoints.CARI7.effective_dose
      parameters:
      - description: "Altitude (in km). The minimum is 0 m, the maximum is 47 km (the\
          \ upper limit of the stratosphere)."
        explode: true
        in: query
        name: altitude
        required: true
        schema:
          example: 11
          type: number
        style: form
      - description: Latitude. -90 (S) to 90 (N).
        explode: true
        in: query
        name: latitude
        required: true
        schema:
          example: 30
          type: number
        style: form
      - description: Longitude. -180 (W) to 180 (E).
        explode: true
        in: query
        name: longitude
        required: true
        schema:
          example: 30
          type: number
        style: form
      - description: Year in YYYY.
        explode: true
        in: query
        name: year
        required: true
        schema:
          example: 2019
          type: integer
        style: form
      - description: Month in MM.
        explode: true
        in: query
        name: month
        required: true
        schema:
          example: 12
          type: integer
        style: form
      - description: Day in DD.
        explode: true
        in: query
        name: day
        required: true
        schema:
          example: 1
          type: integer
        style: form
      - description: Hour in 24 hour time.
        explode: true
        in: query
        name: utc
        required: true
        schema:
          example: 3
          type: integer
        style: form
      - description: |
          The particle type as a string. Specifying 'total' returns the dose for all particle types.
        explode: true
        in: query
        name: particle
        required: true
        schema:
          enum:
          - total
          - neutron
          - photon
          - e-
          - e+
          - mu-
          - mu+
          - proton
          - pi-
          - pi+
          - deuteron
          - triton
          - helion
          - alpha
          - Li
          - Be
          - B
          - C
          - "N"
          - O
          - F
          - Ne
          - Na
          - Mg
          - Al
          - Si
          - P
          - S
          - Cl
          - Ar
          - K
          - Ca
          - Sc
          - Ti
          - V
          - Cr
          - Mn
          - Fe
          example: total
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app_api_cari7_endpoints_CARI7_effective_dose_200_response'
          description: Successful dose calculation
      summary: |
        The effective dose rate calculated for a single particle type, or accumulated over all particle types.
      tags:
      - cari7
      x-codeSamples:
      - lang: Shell
        source: |
          curl -X GET "https://avrad.amentum.io/cari7/effective_dose?altitude=11&latitude=30&longitude=30&year=2019&month=12&day=1&utc=3&particle=total" -H "API-Key: <your_key>" -H "accept: application/json"
      - lang: Python
        source: "import requests\n\nparams = {\n    \"altitude\" : 11, #km \n    \"\
          latitude\" : 30, #degrees (N)\n    \"longitude\" : 30, #degrees (E)\n  \
          \  \"year\" : 2019,  \n    \"month\" : 12,\n    \"day\" : 1,\n    \"particle\"\
          \ : \"total\",\n    \"utc\" : 3\n}\nheaders = {\"API-Key\" : \"<add_your_key>\"\
          }\nurl = \"https://avrad.amentum.io/cari7/effective_dose\"\ntry:\n    response\
          \ = requests.get(url, params=params, headers=headers) \n    response.raise_for_status()\n\
          except requests.exceptions.HTTPError as e: \n    print(\"HTTP error\", e)\n\
          except requests.exceptions.RequestException as e: \n    print(\"Request\
          \ error\", e)\nelse:\n    # retrieve and return the dose rate\n    dose_rate\
          \ = response.json() \n    dose_rate_val = dose_rate['dose rate']['value']\n\
          \    units = dose_rate['dose rate']['units']\n\n    print(f\"Dose rate is\
          \ {dose_rate_val} {units}\")\n"
      - lang: Javascript
        source: "let url = 'https://avrad.amentum.io/cari7/effective_dose?'\n\nvar\
          \ params = new URLSearchParams({\n    altitude : 11, // km \n    latitude\
          \ : 30, // degrees (N)\n    longitude : 30, // degrees (E)\n    year : 2019,\
          \  \n    month : 12,\n    day : 1,\n    particle : \"total\",\n    utc :\
          \ 3\n})\n\nvar requestOptions = {\n  method: 'GET',\n  redirect: 'follow',\n\
          \  headers: {'API-Key': '<add_your_key>'} \n};\n\nfetch(url + params, requestOptions)\n\
          \  .then(response => response.text())\n  .then(result => console.log(result))\n\
          \  .catch(error => console.log('error', error));\n"
      x-accepts:
      - application/json
  /parma/ambient_dose:
    get:
      description: "The ambient dose equivalent, H*(10), is an operational quantity\
        \ that simulates the  human body by measuring the dose equivalent at a depth\
        \ of 10 mm within a tissue  equivalent sphere of 300 mm diameter. It is a\
        \ measurable quantity that is  used to calibrate area monitors (radiation\
        \ detectors) for mixed radiation fields. \nUse this endpoint if you are comparing\
        \ model predictions to measurements.\n"
      operationId: app.api_parma.endpoints.PARMA.ambient_dose
      parameters:
      - description: "Altitude (in km). The minimum is 0 m, the maximum is 47 km (the\
          \ upper limit of the stratosphere)."
        explode: true
        in: query
        name: altitude
        required: false
        schema:
          example: 11
          type: number
        style: form
      - description: |
          Atmospheric depth from the top of the atmosphere (in units of g/cm2). The minimum is 0.913 g/cm2, the maximum is 1032.66 g/cm2. WARNING: you can specify either altitude OR atmospheric depth, not both.
        explode: true
        in: query
        name: atmospheric_depth
        required: false
        schema:
          example: 0.92
          type: number
        style: form
      - description: Latitude. -90 (S) to 90 (N).
        explode: true
        in: query
        name: latitude
        required: true
        schema:
          example: 30
          type: number
        style: form
      - description: Longitude. -180 (W) to 180 (E).
        explode: true
        in: query
        name: longitude
        required: true
        schema:
          example: 30
          type: number
        style: form
      - description: Year in YYYY.
        explode: true
        in: query
        name: year
        required: true
        schema:
          example: 2019
          type: integer
        style: form
      - description: Month in MM.
        explode: true
        in: query
        name: month
        required: true
        schema:
          example: 12
          type: integer
        style: form
      - description: Day in DD.
        explode: true
        in: query
        name: day
        required: true
        schema:
          example: 1
          type: integer
        style: form
      - description: |
          The particle type as a string. Specifying 'total', only used for the dose calculation, returns the dose for all particle types.
        explode: true
        in: query
        name: particle
        required: true
        schema:
          enum:
          - total
          - e-
          - e+
          - mu+
          - mu-
          - gamma
          - neutron
          - proton
          - alpha
          example: proton
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app_api_parma_endpoints_PARMA_ambient_dose_200_response'
          description: Successful dose read operation
      summary: |
        The ambient dose equivalent rate calculated for a single particle type, or accumulated over all particle types.
      tags:
      - parma
      x-codeSamples:
      - lang: Shell
        source: |
          curl -X GET "https://avrad.amentum.io/parma/ambient_dose?altitude=11&latitude=30&longitude=30&year=2019&month=12&day=1&particle=proton" -H "API-Key: <your_key>" -H  "accept: application/json"
      - lang: Python
        source: "import requests\n\nparams = {\n    \"altitude\" : 11, #km \n    \"\
          latitude\" : 30, #degrees (N)\n    \"longitude\" : 30, #degrees (E)\n  \
          \  \"year\" : 2019,  \n    \"month\" : 12,\n    \"day\" : 1,\n    \"particle\"\
          \ : \"proton\"\n}\nheaders = {\"API-Key\" : \"<add_your_key>\"}\nurl = \"\
          https://avrad.amentum.io/parma/ambient_dose\"\ntry:\n    response = requests.get(url,\
          \ params=params, headers=headers) \n    response.raise_for_status()\nexcept\
          \ requests.exceptions.HTTPError as e: \n    print(\"HTTP error\", e)\nexcept\
          \ requests.exceptions.RequestException as e: \n    print(\"Request error\"\
          , e)\nelse:\n    # retrieve and return the dose rate\n    dose_rate = response.json()\
          \ \n    dose_rate_val = dose_rate['dose rate']['value']\n    units = dose_rate['dose\
          \ rate']['units']\n\n    print(f\"Dose rate is {dose_rate_val} {units}\"\
          )\n"
      - lang: Javascript
        source: "let url = 'https://avrad.amentum.io/parma/ambient_dose?'\n\nvar params\
          \ = new URLSearchParams({\n    altitude : 11, // km \n    latitude : 30,\
          \ // degrees (N)\n    longitude : 30, // degrees (E)\n    year : 2019, \
          \ \n    month : 12,\n    day : 1,\n    particle : \"proton\"\n})\n\nvar\
          \ requestOptions = {\n  method: 'GET',\n  redirect: 'follow',\n  headers:\
          \ {'API-Key': '<add_your_key>'} \n};\n\nfetch(url + params, requestOptions)\n\
          \  .then(response => response.text())\n  .then(result => console.log(result))\n\
          \  .catch(error => console.log('error', error));"
      x-accepts:
      - application/json
  /parma/differential_intensity:
    get:
      description: |
        The differential intensity of a particle is a directional quantity that describes the number of particles per unit area, per unit solid angle, per unit energy, and per unit time. The API leverages the functionality of PARMA to calculate differential intensity distributions with energies in units of MeV and Intensity in units of /cm2/sr/MeV/s.
      operationId: app.api_parma.endpoints.PARMA.differential_intensity
      parameters:
      - description: "Altitude (in km). The minimum is 0 m, the maximum is 47 km (the\
          \ upper limit of the stratosphere)."
        explode: true
        in: query
        name: altitude
        required: false
        schema:
          example: 11
          type: number
        style: form
      - description: |
          Atmospheric depth from the top of the atmosphere (in units of g/cm2). The minimum is 0.913 g/cm2, the maximum is 1032.66 g/cm2. WARNING: you can specify either altitude OR atmospheric depth, not both.
        explode: true
        in: query
        name: atmospheric_depth
        required: false
        schema:
          example: 0.92
          type: number
        style: form
      - description: Latitude. -90 (S) to 90 (N).
        explode: true
        in: query
        name: latitude
        required: true
        schema:
          example: 30
          type: number
        style: form
      - description: Longitude. -180 (W) to 180 (E).
        explode: true
        in: query
        name: longitude
        required: true
        schema:
          example: 30
          type: number
        style: form
      - description: Year in YYYY.
        explode: true
        in: query
        name: year
        required: true
        schema:
          example: 2019
          type: integer
        style: form
      - description: Month in MM.
        explode: true
        in: query
        name: month
        required: true
        schema:
          example: 12
          type: integer
        style: form
      - description: Day in DD.
        explode: true
        in: query
        name: day
        required: true
        schema:
          example: 1
          type: integer
        style: form
      - description: |
          The particle type as a string. Specifying 'total', only used for the dose calculation, returns the dose for all particle types.
        explode: true
        in: query
        name: particle
        required: true
        schema:
          enum:
          - total
          - e-
          - e+
          - mu+
          - mu-
          - gamma
          - neutron
          - proton
          - alpha
          example: proton
          type: string
        style: form
      - description: Direction cosine. 1.0 is in the downward direction.
        explode: true
        in: query
        name: angle
        required: true
        schema:
          example: 1
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app_api_parma_endpoints_PARMA_differential_intensity_200_response'
          description: Successful read of intensity operation
      summary: The energy differential intensity of a particle at a given zenith angle.
      tags:
      - parma
      x-codeSamples:
      - lang: Shell
        source: |
          curl -X GET "https://avrad.amentum.io/parma/differential_intensity?altitude=11&latitude=30&longitude=30&year=2019&month=12&day=1&particle=proton&angle=1.0" -H "API-Key: <your_key>" -H  "accept: application/json"
      - lang: Python
        source: "import requests\n\nparams = {\n    \"altitude\" : 11, # km \n   \
          \ \"latitude\" : 30, # degrees (N)\n    \"longitude\" : 30, # degrees (E)\n\
          \    \"year\" : 2019, # \n    \"month\" : 12,\n    \"day\" : 1,\n    \"\
          particle\" : \"proton\",\n    \"angle\" : 1.0\n}\nheaders = {\"API-Key\"\
          \ : \"<add_your_key>\"}\n\nurl = \"https://avrad.amentum.io/parma/differential_intensity\"\
          \n\n# make the call and handle errors\ntry:\n    response = requests.get(url,\
          \ params=params, headers=headers) \n    response.raise_for_status()\nexcept\
          \ requests.exceptions.HTTPError as e: \n    print(\"HTTP error\", e)\nexcept\
          \ requests.exceptions.RequestException as e: \n    print(\"Request error\"\
          , e)\nelse:\n    # retrieve and return the flux\n    json_payload = response.json()\n\
          \n    kes = json_payload[\"energies\"][\"data\"] # MeV\n    flux = json_payload[\"\
          intensities\"][\"data\"] # /cm2/s/sr/MeV\n\n    print(f\"Kinetic energies:\
          \ {kes} MeV\")\n    print(f\"Intensities: {flux} /cm2/s/sr/MeV\")\n"
      - lang: Javascript
        source: "let url = 'https://avrad.amentum.io/parma/differential_intensity?'\n\
          \nvar params = new URLSearchParams({\n    altitude : 11, // km \n    latitude\
          \ : 30, // degrees (N)\n    longitude : 30, // degrees (E)\n    year : 2019,\
          \  \n    month : 12,\n    day : 1,\n    particle : 'proton',\n    angle\
          \ : 1.0\n})\n\nvar requestOptions = {\n  method: 'GET',\n  redirect: 'follow',\n\
          \  headers: {'API-Key': '<add_your_key>'} \n};\n\nfetch(url + params, requestOptions)\n\
          \  .then(response => response.text())\n  .then(result => console.log(result))\n\
          \  .catch(error => console.log('error', error));\n"
      x-accepts:
      - application/json
  /parma/effective_dose:
    get:
      description: |
        Effective dose is a radiation protection quantity defined by the International Commission on Radiological Protection (ICRP) and represents the stochastic health risk to the human body at low levels of radiation. It accounts for the different sensitivities of organs to ionising radiation, as well as the different effectiveness of various types of radiation.
        Use this endpoint if you need to estimate radiation exposures of personnel.
      operationId: app.api_parma.endpoints.PARMA.effective_dose
      parameters:
      - description: "Altitude (in km). The minimum is 0 m, the maximum is 47 km (the\
          \ upper limit of the stratosphere)."
        explode: true
        in: query
        name: altitude
        required: false
        schema:
          example: 11
          type: number
        style: form
      - description: |
          Atmospheric depth from the top of the atmosphere (in units of g/cm2). The minimum is 0.913 g/cm2, the maximum is 1032.66 g/cm2. WARNING: you can specify either altitude OR atmospheric depth, not both.
        explode: true
        in: query
        name: atmospheric_depth
        required: false
        schema:
          example: 0.92
          type: number
        style: form
      - description: Latitude. -90 (S) to 90 (N).
        explode: true
        in: query
        name: latitude
        required: true
        schema:
          example: 30
          type: number
        style: form
      - description: Longitude. -180 (W) to 180 (E).
        explode: true
        in: query
        name: longitude
        required: true
        schema:
          example: 30
          type: number
        style: form
      - description: Year in YYYY.
        explode: true
        in: query
        name: year
        required: true
        schema:
          example: 2019
          type: integer
        style: form
      - description: Month in MM.
        explode: true
        in: query
        name: month
        required: true
        schema:
          example: 12
          type: integer
        style: form
      - description: Day in DD.
        explode: true
        in: query
        name: day
        required: true
        schema:
          example: 1
          type: integer
        style: form
      - description: |
          The particle type as a string. Specifying 'total', only used for the dose calculation, returns the dose for all particle types.
        explode: true
        in: query
        name: particle
        required: true
        schema:
          enum:
          - total
          - e-
          - e+
          - mu+
          - mu-
          - gamma
          - neutron
          - proton
          - alpha
          example: proton
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app_api_parma_endpoints_PARMA_effective_dose_200_response'
          description: Successful dose read operation
      summary: |
        The effective dose rate calculated for a single particle type, or accumulated over all particle types.
      tags:
      - parma
      x-codeSamples:
      - lang: Shell
        source: "curl -X GET \"https://avrad.amentum.io/parma/effective_dose?altitude=11&latitude=30&longitude=30&year=2019&month=12&day=1&particle=total\"\
          \ -H \"API-Key: <your_key>\" -H  \"accept: application/json\" \n"
      - lang: Python
        source: "import requests\nparams = {\n    \"altitude\" : 11, #km \n    \"\
          latitude\" : 30, #degrees (N)\n    \"longitude\" : 30, #degrees (E)\n  \
          \  \"year\" : 2019,  \n    \"month\" : 12,\n    \"day\" : 1,\n    \"particle\"\
          \ : \"total\"\n}\nheaders = {\"API-Key\" : \"<add_your_key>\"}\nurl = \"\
          https://avrad.amentum.io/parma/effective_dose\"\ntry:\n    response = requests.get(url,\
          \ params=params, headers=headers) \n    response.raise_for_status()\nexcept\
          \ requests.exceptions.HTTPError as e: \n    print(\"HTTP error\", e)\nexcept\
          \ requests.exceptions.RequestException as e: \n    print(\"Request error\"\
          , e)\nelse:\n    # retrieve and return the dose rate\n    dose_rate = response.json()\
          \ \n    dose_rate_val = dose_rate['dose rate']['value']\n    units = dose_rate['dose\
          \ rate']['units']\n\n    print(f\"Dose rate is {dose_rate_val} {units}\"\
          )\n"
      - lang: Javascript
        source: "let url = 'https://avrad.amentum.io/parma/effective_dose?'\n\nvar\
          \ params = new URLSearchParams({\n    altitude : 11, // km \n    latitude\
          \ : 30, // degrees (N)\n    longitude : 30, // degrees (E)\n    year : 2019,\
          \  \n    month : 12,\n    day : 1,\n    particle : \"total\"\n})\n\nvar\
          \ requestOptions = {\n  method: 'GET',\n  redirect: 'follow',\n  headers:\
          \ {'API-Key': '<add_your_key>'} \n};\n\nfetch(url + params, requestOptions)\n\
          \  .then(response => response.text())\n  .then(result => console.log(result))\n\
          \  .catch(error => console.log('error', error));\n"
      x-accepts:
      - application/json
  /route/ambient_dose:
    get:
      description: |
        The ambient dose equivalent, H*(10), is an operational quantity that simulates the  human body by measuring the dose equivalent at a depth of 10 mm within a tissue  equivalent sphere of 300 mm diameter. It is a measurable quantity that is  used to calibrate area monitors (radiation detectors) for mixed radiation fields.  <br> <br> Use this endpoint if you are comparing model predictions to measurements. <br> <br> This API can run in two modes: <br> <br> Either specify <br> <b>altitude</b>, <b>duration</b><br> for constant altitude calculations; <br> <br> Or specify <br> <b>initial_altitude</b>, <b>cruising_altitudes</b>, <b>climb_times</b>, <b>cruising_times</b>, <b>descent_time</b>, <b>final_altitude</b><br> to calculate dose accounting for a step climb. <br> <br> Note: the airport codes or coordinates (depending on which was specified), and the date in DD/MM/YYYY format, are echoed in the json response as strings.
      operationId: app.api_icaro.endpoints.ICARO.ambient_dose
      parameters:
      - description: "The ICAO code or IATA code or latitude,longitude pair (in decimal\
          \ degrees) of the origin airport."
        explode: true
        in: query
        name: origin
        required: true
        schema:
          example: YSSY
          type: string
        style: form
      - description: "The ICAO code or IATA code or latitude,longitude pair (in decimal\
          \ degrees) of the destination airport."
        explode: true
        in: query
        name: destination
        required: true
        schema:
          example: "33.94250107,-118.4079971"
          type: string
        style: form
      - description: "Altitude (in km). The minimum is 0 m, the maximum is 20 km."
        explode: true
        in: query
        name: altitude
        required: false
        schema:
          example: 10.1
          type: number
        style: form
      - description: "The flight duration in hours. The minimum is 0, the maximum\
          \ is 20 hrs."
        explode: true
        in: query
        name: duration
        required: false
        schema:
          example: 5
          type: number
        style: form
      - description: "Initial altitude (in km). The minimum is 0 m, the maximum is\
          \ 20 km."
        explode: true
        in: query
        name: initial_altitude
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Cruising altitudes (in km). The minimum is 0 m, the maximum\
          \ is 20 km."
        explode: true
        in: query
        name: cruising_altitudes
        required: false
        schema:
          example:
          - 10
          - 15
          items:
            type: number
          type: array
        style: form
      - description: Climb times for each cruising altitude (hours).
        explode: true
        in: query
        name: climb_times
        required: false
        schema:
          example:
          - 0.1
          - 0.5
          items:
            type: number
          type: array
        style: form
      - description: Cruising times at each cruising altitude (hours).
        explode: true
        in: query
        name: cruising_times
        required: false
        schema:
          example:
          - 1
          - 2
          items:
            type: number
          type: array
        style: form
      - description: Descent time from last cruising altitude to final altitude (hours).
        explode: true
        in: query
        name: descent_time
        required: false
        schema:
          example: 0.5
          type: number
        style: form
      - description: Final altitude (in km).
        explode: true
        in: query
        name: final_altitude
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: Year in YYYY.
        explode: true
        in: query
        name: year
        required: true
        schema:
          example: 2019
          type: integer
        style: form
      - description: Month in MM.
        explode: true
        in: query
        name: month
        required: true
        schema:
          example: 5
          type: integer
        style: form
      - description: Day in DD.
        explode: true
        in: query
        name: day
        required: true
        schema:
          example: 21
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app_api_icaro_endpoints_ICARO_ambient_dose_200_response'
          description: Successful dose calculation
      summary: |
        Calculate the ambient equivalent dose along a great circle flight route.
      tags:
      - routedose
      x-codeSamples:
      - lang: Shell
        source: |
          curl -X GET "https://avrad.amentum.io/route/ambient_dose?origin=YSSY&destination=33.94250107,-118.4079971&altitude=10.1&duration=5&year=2019&month=5&day=21" -H "API-Key: <your_key>" -H  "accept: application/json"
      - label: "Python: Constant altitude"
        lang: Python
        source: |
          """
          Constant altitude code sample.

          In this example, we set:
            altitude and duration

          The following parameters are left unset:
            initial_altitude, cruising_altitudes, climb_times,
            cruising_times, descent_time and final_altitude
          """

          import requests

          params = {
            "origin" : "YSSY", # can be ICAO or iATA codes
            "destination" : "33.94250107,-118.4079971",
            "altitude" : 10.1, # km,
            "duration" : 5, # hours
            "year" : 2019,
            "month" : 5,
            "day" : 21
          }
          headers = {"API-Key" : "<add_your_key>"}
          try:
            response = requests.get("https://avrad.amentum.io/route/ambient_dose",
              params=params, headers=headers)
            response_json = response.json()
            response.raise_for_status()
          except requests.exceptions.HTTPError as e:
            print(response_json['error'])
          else:
            dose = response_json['dose']['value']
            print(f"Total Ambient Dose was {dose:.2f} uSv")
      - label: "Python: Step climb"
        lang: Python
        source: |
          """
          Step-climb code sample.

          In this example, we set:
            initial_altitude, cruising_altitudes, climb_times,
            cruising_times, descent_time and final_altitude

          The following parameters are left unset:
            altitude and duration
          """

          import requests

          params = {
            "origin" : "YSSY", # can be ICAO or iATA codes
            "destination" : "33.94250107,-118.4079971",
            "initial_altitude": 0.0,                      # km
            "cruising_altitudes": [12.0, 15.0, 18.0],     # km
            "climb_times": [0.5, 0.25, 0.1],              # hours
            "cruising_times": [1.5, 1.75, 5.0],           # hours
            "descent_time": 0.5,                          # hours
            "final_altitude": 0.0,                        # km
            "year" : 2019,
            "month" : 5,
            "day" : 21
          }
          headers = {"API-Key" : "<add_your_key>"}
          try:
            response = requests.get("https://avrad.amentum.io/route/ambient_dose",
              params=params, headers=headers)
            response_json = response.json()
            response.raise_for_status()
          except requests.exceptions.HTTPError as e:
            print(response_json['error'])
          else:
            dose = response_json['dose']['value']
            print(f"Total Ambient Dose was {dose:.2f} uSv")
      - lang: Javascript
        source: "let url = 'https://avrad.amentum.io/route/ambient_dose?'\n\nvar params\
          \ = new URLSearchParams({\n  origin : \"YSSY\", // can be ICAO or iATA codes\n\
          \  destination : \"33.94250107,-118.4079971\",\n  altitude : 10.1, // km,\n\
          \  duration : 5, // hours\n  year : 2019,\n  month : 5,\n  day : 21\n})\n\
          \nvar requestOptions = {\n  method: 'GET',\n  redirect: 'follow',\n  headers:\
          \ {'API-Key': '<add_your_key>'} \n};\n\nfetch(url + params, requestOptions)\n\
          \  .then(response => response.text())\n  .then(result => console.log(result))\n\
          \  .catch(error => console.log('error', error));\n"
      x-accepts:
      - application/json
  /route/effective_dose:
    get:
      description: |
        Effective Dose is a radiation protection quantity defined by the International Commission on
         Radiological Protection (ICRP) and represents the stochastic health
         risk to the human body at low levels of radiation.
        It accounts for the different sensitivities of organs to ionising radiation, as well as the different effectiveness of various types of radiation. <br> <br> Use this endpoint if you need to estimate radiation exposures of personnel. <br> <br> This API can run in two modes: <br> <br> Either specify <br> <b>altitude</b>, <b>duration</b><br> for constant altitude calculations; <br> <br> Or specify <br> <b>initial_altitude</b>, <b>cruising_altitudes</b>, <b>climb_times</b>, <b>cruising_times</b>, <b>descent_time</b>, <b>final_altitude</b><br> to calculate dose accounting for a step climb. <br> <br> Note: the airport codes or coordinates (depending on which was specified), and the date in DD/MM/YYYY format, are echoed in the json response as strings.
      operationId: app.api_icaro.endpoints.ICARO.effective_dose
      parameters:
      - description: "The ICAO code or IATA code or latitude,longitude pair (in decimal\
          \ degrees) of the origin airport."
        explode: true
        in: query
        name: origin
        required: true
        schema:
          example: YSSY
          type: string
        style: form
      - description: "The ICAO code or IATA code or latitude,longitude pair (in decimal\
          \ degrees) of the destination airport."
        explode: true
        in: query
        name: destination
        required: true
        schema:
          example: "33.94250107,-118.4079971"
          type: string
        style: form
      - description: "Altitude (in km). The minimum is 0 m, the maximum is 20 km."
        explode: true
        in: query
        name: altitude
        required: false
        schema:
          example: 10.1
          type: number
        style: form
      - description: "The flight duration in hours. The minimum is 0, the maximum\
          \ is 20 hrs."
        explode: true
        in: query
        name: duration
        required: false
        schema:
          example: 5
          type: number
        style: form
      - description: "Initial altitude (in km). The minimum is 0 m, the maximum is\
          \ 20 km."
        explode: true
        in: query
        name: initial_altitude
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Cruising altitudes (in km). The minimum is 0 m, the maximum\
          \ is 20 km."
        explode: true
        in: query
        name: cruising_altitudes
        required: false
        schema:
          example:
          - 10
          - 15
          items:
            type: number
          type: array
        style: form
      - description: Climb times for each cruising altitude (hours).
        explode: true
        in: query
        name: climb_times
        required: false
        schema:
          example:
          - 0.1
          - 0.5
          items:
            type: number
          type: array
        style: form
      - description: Cruising times at each cruising altitude (hours).
        explode: true
        in: query
        name: cruising_times
        required: false
        schema:
          example:
          - 1
          - 2
          items:
            type: number
          type: array
        style: form
      - description: Descent time from last cruising altitude to final altitude (hours).
        explode: true
        in: query
        name: descent_time
        required: false
        schema:
          example: 0.5
          type: number
        style: form
      - description: Final altitude (in km).
        explode: true
        in: query
        name: final_altitude
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: Year in YYYY.
        explode: true
        in: query
        name: year
        required: true
        schema:
          example: 2019
          type: integer
        style: form
      - description: Month in MM.
        explode: true
        in: query
        name: month
        required: true
        schema:
          example: 5
          type: integer
        style: form
      - description: Day in DD.
        explode: true
        in: query
        name: day
        required: true
        schema:
          example: 21
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app_api_icaro_endpoints_ICARO_effective_dose_200_response'
          description: Successful dose calculation
      summary: |
        Calculate the total effective dose along a great circle flight route.
      tags:
      - routedose
      x-codeSamples:
      - lang: Shell
        source: |
          curl -X GET "https://avrad.amentum.io/route/effective_dose?origin=YSSY&destination=33.94250107,-118.4079971&altitude=10.1&duration=5&year=2019&month=5&day=21" -H "API-Key: <your_key>" -H "accept: application/json"
      - label: "Python: Constant altitude"
        lang: Python
        source: "\"\"\"\nConstant altitude code sample.\n\nIn this example, we set:\n\
          \  altitude and duration\n\nThe following parameters are left unset:\n \
          \ initial_altitude, cruising_altitudes, climb_times,\n  cruising_times,\
          \ descent_time and final_altitude\n\"\"\"\n\nimport requests\n\nparams =\
          \ {\n  \"origin\" : \"YSSY\", # can be ICAO or iATA codes\n  \"destination\"\
          \ : \"33.94250107,-118.4079971\",\n  \"altitude\" : 10.1, # km,\n  \"duration\"\
          \ : 5, # hours\n  \"year\" : 2019,\n  \"month\" : 5,\n  \"day\" : 21\n}\
          \ \nheaders = {\"API-Key\" : \"<add_your_key>\"}\ntry:\n  response = requests.get(\"\
          https://avrad.amentum.io/route/effective_dose\",\n    params=params, headers=headers)\n\
          \  response_json = response.json()\n  response.raise_for_status()\nexcept\
          \ requests.exceptions.HTTPError as e:\n  print(response_json['error'])\n\
          else:\n  # Extract the dose\n  dose = response_json['dose']['value']\n \
          \ print(f\"Total Effective Dose was {dose:.2f} uSv\")\n"
      - label: "Python: Step climb"
        lang: Python
        source: |
          """
          Step-climb code sample.

          In this example, we set:
            initial_altitude, cruising_altitudes, climb_times,
            cruising_times, descent_time and final_altitude

          The following parameters are left unset:
            altitude and duration
          """

          import requests

          params = {
            "origin" : "YSSY", # can be ICAO or iATA codes
            "destination" : "33.94250107,-118.4079971",
            "initial_altitude": 0.0,                      # km
            "cruising_altitudes": [12.0, 15.0, 18.0],     # km
            "climb_times": [0.5, 0.25, 0.1],              # hours
            "cruising_times": [1.5, 1.75, 5.0],           # hours
            "descent_time": 0.5,                          # hours
            "final_altitude": 0.0,                        # km
            "year" : 2019,
            "month" : 5,
            "day" : 21
          }
          headers = {"API-Key" : "<add_your_key>"}
          try:
            response = requests.get("https://avrad.amentum.io/route/effective_dose",
              params=params, headers=headers)
            response_json = response.json()
            response.raise_for_status()
          except requests.exceptions.HTTPError as e:
            print(response_json['error'])
          else:
            # Extract the dose
            dose = response_json['dose']['value']
            print(f"Total Effective Dose was {dose:.2f} uSv")
      - lang: Javascript
        source: "let url = 'https://avrad.amentum.io/route/effective_dose?'\n\nvar\
          \ params = new URLSearchParams({\n  origin : \"YSSY\", // can be ICAO or\
          \ iATA codes\n  destination : \"33.94250107,-118.4079971\",\n  altitude\
          \ : 10.1, // km,\n  duration : 5, // hours\n  year : 2019,\n  month : 5,\n\
          \  day : 21\n})\n\nvar requestOptions = {\n  method: 'GET',\n  redirect:\
          \ 'follow',\n  headers: {'API-Key': '<add_your_key>'} \n};\n\nfetch(url\
          \ + params, requestOptions)\n  .then(response => response.text())\n  .then(result\
          \ => console.log(result))\n  .catch(error => console.log('error', error));\n"
      x-accepts:
      - application/json
components:
  schemas:
    app_api_parma_endpoints_PARMA_effective_dose_200_response:
      example:
        dose rate:
          units: uSv/hr
          value: 1.9456004308224644
      properties:
        dose rate:
          $ref: '#/components/schemas/app_api_cari7_endpoints_CARI7_ambient_dose_200_response_dose_rate'
      type: object
    app_api_icaro_endpoints_ICARO_ambient_dose_200_response:
      example:
        dose:
          date: 21/05/2019
          destination: "33.94250107,-118.4079971"
          origin: YSSY
          units: uSv
          value: 10.911498908287665
      properties:
        dose:
          $ref: '#/components/schemas/app_api_icaro_endpoints_ICARO_ambient_dose_200_response_dose'
      type: object
    app_api_parma_endpoints_PARMA_ambient_dose_200_response:
      example:
        dose rate:
          units: uSv/hr
          value: 0.26835067168474125
      properties:
        dose rate:
          $ref: '#/components/schemas/app_api_cari7_endpoints_CARI7_ambient_dose_200_response_dose_rate'
      type: object
    app_api_cari7_endpoints_CARI7_effective_dose_200_response:
      example:
        dose rate:
          units: uSv/hr
          value: 2.1532952875056712
      properties:
        dose rate:
          $ref: '#/components/schemas/app_api_cari7_endpoints_CARI7_ambient_dose_200_response_dose_rate'
      type: object
    app_api_parma_endpoints_PARMA_differential_intensity_200_response:
      example:
        energies:
          data:
          - 10.592537251772889
          - 11.885022274370186
          - 13.335214321633243
          - 14.96235656094434
          - 16.78804018122561
          - 18.836490894898017
          - 21.134890398366483
          - 23.71373705661657
          - 26.60725059798812
          - 29.853826189179625
          - 33.4965439157828
          - 37.583740428844465
          - 42.16965034285828
          - 47.31512589614811
          - 53.08844442309891
          - 59.56621435290114
          - 66.83439175686158
          - 74.98942093324571
          - 84.13951416451967
          - 94.40608762859253
          - 105.92537251772909
          - 118.85022274370202
          - 133.35214321633254
          - 149.62356560944343
          - 167.88040181225605
          - 188.36490894898
          - 211.34890398366454
          - 237.1373705661653
          - 266.0725059798806
          - 298.5382618917954
          - 334.9654391578269
          - 375.83740428844317
          - 421.69650342858097
          - 473.1512589614788
          - 530.8844442309862
          - 595.662143529008
          - 668.3439175686115
          - 749.894209332452
          - 841.3951416451905
          - 944.0608762859177
          - 1059.2537251772821
          - 1188.5022274370106
          - 1333.5214321633146
          - 1496.2356560944222
          - 1678.804018122547
          - 1883.6490894897847
          - 2113.4890398366283
          - 2371.3737056616337
          - 2660.725059798784
          - 2985.38261891793
          - 3349.6543915782418
          - 3758.374042884401
          - 4216.965034285775
          - 4731.512589614749
          - 5308.84444230982
          - 5956.621435290031
          - 6683.4391756860605
          - 7498.942093324459
          - 8413.951416451835
          - 9440.6087628591
          - 10592.537251772736
          - 11885.022274370007
          - 13335.214321633035
          - 14962.356560944098
          - 16788.04018122533
          - 18836.49089489769
          - 21134.890398366108
          - 23713.737056616137
          - 26607.250597987622
          - 29853.82618917905
          - 33496.543915782146
          - 37583.74042884371
          - 42169.65034285741
          - 47315.12589614711
          - 53088.44442309776
          - 59566.21435289981
          - 66834.39175686006
          - 74989.42093324398
          - 84139.51416451768
          - 94406.08762859023
          units: MeV
        intensities:
          data:
          - 1.5126557258481497E-5
          - 1.599438328728434E-5
          - 1.689468409778281E-5
          - 1.782700110028125E-5
          - 1.8789989894315395E-5
          - 1.9781312921179226E-5
          - 2.079773698769471E-5
          - 2.1835319990199245E-5
          - 2.288931588809045E-5
          - 2.3953698331015904E-5
          - 2.5020740419725837E-5
          - 2.608079723261754E-5
          - 2.712202346190026E-5
          - 2.8129941429425255E-5
          - 2.9086999403906575E-5
          - 2.9972245159538348E-5
          - 3.076112412042979E-5
          - 3.142535794905927E-5
          - 3.1932955656189876E-5
          - 3.2248618858073125E-5
          - 3.2334985958519275E-5
          - 3.2155208240777106E-5
          - 3.1677197295996437E-5
          - 3.0879552903400744E-5
          - 2.9726220825502388E-5
          - 2.8234425803141926E-5
          - 2.650516406182499E-5
          - 2.4602269634120444E-5
          - 2.2594819983033717E-5
          - 2.0552475431477016E-5
          - 1.853662594721251E-5
          - 1.6596094572091987E-5
          - 1.476576885147725E-5
          - 1.3067285256001253E-5
          - 1.1511187862538484E-5
          - 1.0100122716208363E-5
          - 8.83240101591408E-6
          - 7.703733932387032E-6
          - 6.70576631351448E-6
          - 5.822881145729626E-6
          - 5.046340372076868E-6
          - 4.369966582442526E-6
          - 3.781202020752834E-6
          - 3.2689518931964352E-6
          - 2.8234311080639376E-6
          - 2.436034648930342E-6
          - 2.0992258398508115E-6
          - 1.8064235849092022E-6
          - 1.5518898432506667E-6
          - 1.331051662285105E-6
          - 1.1394488995132188E-6
          - 9.726057340258263E-7
          - 8.265824310558272E-7
          - 6.998212586927555E-7
          - 5.894224376580005E-7
          - 4.93568138996158E-7
          - 4.116922090268701E-7
          - 3.460236317178158E-7
          - 3.037548828699797E-7
          - 2.9135185653116735E-7
          - 2.82520391784604E-7
          - 2.3785220594554244E-7
          - 1.7791153699257012E-7
          - 1.2924247345559558E-7
          - 9.48243126183575E-8
          - 7.043455232978242E-8
          - 5.2623996885656347E-8
          - 3.935459373084662E-8
          - 2.939334162588793E-8
          - 2.1909771678801793E-8
          - 1.6297871509147514E-8
          - 1.2099955678192665E-8
          - 8.967477745797399E-9
          - 6.635335072413951E-9
          - 4.902621621420823E-9
          - 3.6176621571186638E-9
          - 2.6663515657204105E-9
          - 1.963121398302903E-9
          - 1.4439864047128638E-9
          - 1.0612233263106733E-9
          units: /cm2/s/sr/MeV
      properties:
        energies:
          $ref: '#/components/schemas/app_api_parma_endpoints_PARMA_differential_intensity_200_response_energies'
        intensities:
          $ref: '#/components/schemas/app_api_parma_endpoints_PARMA_differential_intensity_200_response_energies'
      type: object
    app_api_cari7_endpoints_CARI7_ambient_dose_200_response:
      example:
        dose rate:
          units: uSv/hr
          value: 2.322303291477743
      properties:
        dose rate:
          $ref: '#/components/schemas/app_api_cari7_endpoints_CARI7_ambient_dose_200_response_dose_rate'
      type: object
    app_api_parma_endpoints_PARMA_differential_intensity_200_response_energies:
      properties:
        data:
          items:
            type: number
          type: array
        units:
          type: string
      type: object
    app_api_icaro_endpoints_ICARO_effective_dose_200_response:
      example:
        dose:
          date: 21/05/2019
          destination: "33.94250107,-118.4079971"
          origin: YSSY
          units: uSv
          value: 9.90406659800017
      properties:
        dose:
          $ref: '#/components/schemas/app_api_icaro_endpoints_ICARO_ambient_dose_200_response_dose'
      type: object
    app_api_cari7_endpoints_CARI7_ambient_dose_200_response_dose_rate:
      properties:
        units:
          type: string
        value:
          type: number
      type: object
    app_api_icaro_endpoints_ICARO_ambient_dose_200_response_dose:
      properties:
        date:
          type: string
        destination:
          type: string
        origin:
          type: string
        units:
          type: string
        value:
          type: number
      type: object
x-tagGroups:
- name: Calculate radiation dose along a great circle flight route
  tags:
  - routedose
- name: Calculate radiation intensity or dose at a point
  tags:
  - cari7
  - parma

