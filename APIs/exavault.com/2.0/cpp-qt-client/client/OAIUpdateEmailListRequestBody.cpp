/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateEmailListRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateEmailListRequestBody::OAIUpdateEmailListRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateEmailListRequestBody::OAIUpdateEmailListRequestBody() {
    this->initializeModel();
}

OAIUpdateEmailListRequestBody::~OAIUpdateEmailListRequestBody() {}

void OAIUpdateEmailListRequestBody::initializeModel() {

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIUpdateEmailListRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateEmailListRequestBody::fromJsonObject(QJsonObject json) {

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIUpdateEmailListRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateEmailListRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<QString> OAIUpdateEmailListRequestBody::getEmails() const {
    return m_emails;
}
void OAIUpdateEmailListRequestBody::setEmails(const QList<QString> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIUpdateEmailListRequestBody::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIUpdateEmailListRequestBody::is_emails_Valid() const{
    return m_emails_isValid;
}

QString OAIUpdateEmailListRequestBody::getName() const {
    return m_name;
}
void OAIUpdateEmailListRequestBody::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateEmailListRequestBody::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateEmailListRequestBody::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIUpdateEmailListRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateEmailListRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
