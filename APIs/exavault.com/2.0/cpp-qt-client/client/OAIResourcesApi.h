/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIResourcesApi_H
#define OAI_OAIResourcesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddFolderRequestBody.h"
#include "OAICompressFilesRequestBody.h"
#include "OAICopyResourcesRequestBody.h"
#include "OAIDeleteResourcesRequestBody.h"
#include "OAIEmptyResponse.h"
#include "OAIExtractFilesRequestBody.h"
#include "OAIHttpFileElement.h"
#include "OAIMoveResourcesRequestBody.h"
#include "OAIPreviewFileResponse.h"
#include "OAIResourceCollectionResponse.h"
#include "OAIResourceCopyMove.h"
#include "OAIResourceMultiResponse.h"
#include "OAIResourceResponse.h"
#include "OAIUpdateResourceByIdRequestBody.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIResourcesApi : public QObject {
    Q_OBJECT

public:
    OAIResourcesApi(const int timeOut = 0);
    ~OAIResourcesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  oai_add_folder_request_body OAIAddFolderRequestBody [optional]
    */
    virtual void addFolder(const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<OAIAddFolderRequestBody> &oai_add_folder_request_body = ::OpenAPI::OptionalParam<OAIAddFolderRequestBody>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  oai_compress_files_request_body OAICompressFilesRequestBody [optional]
    */
    virtual void compressFiles(const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<OAICompressFilesRequestBody> &oai_compress_files_request_body = ::OpenAPI::OptionalParam<OAICompressFilesRequestBody>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  oai_copy_resources_request_body OAICopyResourcesRequestBody [optional]
    */
    virtual void copyResources(const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<OAICopyResourcesRequestBody> &oai_copy_resources_request_body = ::OpenAPI::OptionalParam<OAICopyResourcesRequestBody>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    */
    virtual void deleteResourceById(const qint64 &id, const QString &ev_api_key, const QString &ev_access_token);

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  oai_delete_resources_request_body OAIDeleteResourcesRequestBody [optional]
    */
    virtual void deleteResources(const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<OAIDeleteResourcesRequestBody> &oai_delete_resources_request_body = ::OpenAPI::OptionalParam<OAIDeleteResourcesRequestBody>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  resources QList<QString> [required]
    * @param[in]  download_archive_name QString [optional]
    */
    virtual void download(const QString &ev_api_key, const QString &ev_access_token, const QList<QString> &resources, const ::OpenAPI::OptionalParam<QString> &download_archive_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  oai_extract_files_request_body OAIExtractFilesRequestBody [optional]
    */
    virtual void extractFiles(const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<OAIExtractFilesRequestBody> &oai_extract_files_request_body = ::OpenAPI::OptionalParam<OAIExtractFilesRequestBody>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  resource QString [required]
    * @param[in]  size QString [required]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getPreviewImage(const QString &ev_api_key, const QString &ev_access_token, const QString &resource, const QString &size, const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  resource QString [required]
    * @param[in]  include QString [optional]
    */
    virtual void getResourceInfo(const QString &ev_api_key, const QString &ev_access_token, const QString &resource, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  include QString [optional]
    */
    virtual void getResourceInfoById(const qint64 &id, const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  sort QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  include QString [optional]
    */
    virtual void listResourceContents(const QString &ev_api_key, const QString &ev_access_token, const qint64 &id, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  resource QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  include QString [optional]
    */
    virtual void listResources(const QString &ev_api_key, const QString &ev_access_token, const QString &resource, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  oai_move_resources_request_body OAIMoveResourcesRequestBody [optional]
    */
    virtual void moveResources(const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<OAIMoveResourcesRequestBody> &oai_move_resources_request_body = ::OpenAPI::OptionalParam<OAIMoveResourcesRequestBody>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  ev_api_key QString [required]
    * @param[in]  oai_update_resource_by_id_request_body OAIUpdateResourceByIdRequestBody [optional]
    */
    virtual void updateResourceById(const qint64 &id, const QString &ev_access_token, const QString &ev_api_key, const ::OpenAPI::OptionalParam<OAIUpdateResourceByIdRequestBody> &oai_update_resource_by_id_request_body = ::OpenAPI::OptionalParam<OAIUpdateResourceByIdRequestBody>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  path QString [required]
    * @param[in]  file_size qint32 [required]
    * @param[in]  offset_bytes qint32 [optional]
    * @param[in]  resume bool [optional]
    * @param[in]  allow_overwrite bool [optional]
    * @param[in]  file OAIHttpFileElement [optional]
    */
    virtual void uploadFile(const QString &ev_api_key, const QString &ev_access_token, const QString &path, const qint32 &file_size, const ::OpenAPI::OptionalParam<qint32> &offset_bytes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &resume = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_overwrite = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addFolderCallback(OAIHttpRequestWorker *worker);
    void compressFilesCallback(OAIHttpRequestWorker *worker);
    void copyResourcesCallback(OAIHttpRequestWorker *worker);
    void deleteResourceByIdCallback(OAIHttpRequestWorker *worker);
    void deleteResourcesCallback(OAIHttpRequestWorker *worker);
    void downloadCallback(OAIHttpRequestWorker *worker);
    void extractFilesCallback(OAIHttpRequestWorker *worker);
    void getPreviewImageCallback(OAIHttpRequestWorker *worker);
    void getResourceInfoCallback(OAIHttpRequestWorker *worker);
    void getResourceInfoByIdCallback(OAIHttpRequestWorker *worker);
    void listResourceContentsCallback(OAIHttpRequestWorker *worker);
    void listResourcesCallback(OAIHttpRequestWorker *worker);
    void moveResourcesCallback(OAIHttpRequestWorker *worker);
    void updateResourceByIdCallback(OAIHttpRequestWorker *worker);
    void uploadFileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addFolderSignal(OAIResourceResponse summary);
    void compressFilesSignal(OAIResourceResponse summary);
    void copyResourcesSignal(OAIResourceCopyMove summary);
    void deleteResourceByIdSignal(OAIEmptyResponse summary);
    void deleteResourcesSignal(OAIEmptyResponse summary);
    void downloadSignal(OAIHttpFileElement summary);
    void extractFilesSignal(OAIResourceCollectionResponse summary);
    void getPreviewImageSignal(OAIPreviewFileResponse summary);
    void getResourceInfoSignal(OAIResourceResponse summary);
    void getResourceInfoByIdSignal(OAIResourceResponse summary);
    void listResourceContentsSignal(OAIResourceCollectionResponse summary);
    void listResourcesSignal(OAIResourceCollectionResponse summary);
    void moveResourcesSignal(OAIResourceCopyMove summary);
    void updateResourceByIdSignal(OAIResourceResponse summary);
    void uploadFileSignal(OAIResourceResponse summary);


    void addFolderSignalFull(OAIHttpRequestWorker *worker, OAIResourceResponse summary);
    void compressFilesSignalFull(OAIHttpRequestWorker *worker, OAIResourceResponse summary);
    void copyResourcesSignalFull(OAIHttpRequestWorker *worker, OAIResourceCopyMove summary);
    void deleteResourceByIdSignalFull(OAIHttpRequestWorker *worker, OAIEmptyResponse summary);
    void deleteResourcesSignalFull(OAIHttpRequestWorker *worker, OAIEmptyResponse summary);
    void downloadSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void extractFilesSignalFull(OAIHttpRequestWorker *worker, OAIResourceCollectionResponse summary);
    void getPreviewImageSignalFull(OAIHttpRequestWorker *worker, OAIPreviewFileResponse summary);
    void getResourceInfoSignalFull(OAIHttpRequestWorker *worker, OAIResourceResponse summary);
    void getResourceInfoByIdSignalFull(OAIHttpRequestWorker *worker, OAIResourceResponse summary);
    void listResourceContentsSignalFull(OAIHttpRequestWorker *worker, OAIResourceCollectionResponse summary);
    void listResourcesSignalFull(OAIHttpRequestWorker *worker, OAIResourceCollectionResponse summary);
    void moveResourcesSignalFull(OAIHttpRequestWorker *worker, OAIResourceCopyMove summary);
    void updateResourceByIdSignalFull(OAIHttpRequestWorker *worker, OAIResourceResponse summary);
    void uploadFileSignalFull(OAIHttpRequestWorker *worker, OAIResourceResponse summary);

    Q_DECL_DEPRECATED_X("Use addFolderSignalError() instead")
    void addFolderSignalE(OAIResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addFolderSignalError(OAIResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use compressFilesSignalError() instead")
    void compressFilesSignalE(OAIResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void compressFilesSignalError(OAIResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyResourcesSignalError() instead")
    void copyResourcesSignalE(OAIResourceCopyMove summary, QNetworkReply::NetworkError error_type, QString error_str);
    void copyResourcesSignalError(OAIResourceCopyMove summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteResourceByIdSignalError() instead")
    void deleteResourceByIdSignalE(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResourceByIdSignalError(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteResourcesSignalError() instead")
    void deleteResourcesSignalE(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResourcesSignalError(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadSignalError() instead")
    void downloadSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractFilesSignalError() instead")
    void extractFilesSignalE(OAIResourceCollectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extractFilesSignalError(OAIResourceCollectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPreviewImageSignalError() instead")
    void getPreviewImageSignalE(OAIPreviewFileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPreviewImageSignalError(OAIPreviewFileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResourceInfoSignalError() instead")
    void getResourceInfoSignalE(OAIResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getResourceInfoSignalError(OAIResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResourceInfoByIdSignalError() instead")
    void getResourceInfoByIdSignalE(OAIResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getResourceInfoByIdSignalError(OAIResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResourceContentsSignalError() instead")
    void listResourceContentsSignalE(OAIResourceCollectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listResourceContentsSignalError(OAIResourceCollectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResourcesSignalError() instead")
    void listResourcesSignalE(OAIResourceCollectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listResourcesSignalError(OAIResourceCollectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveResourcesSignalError() instead")
    void moveResourcesSignalE(OAIResourceCopyMove summary, QNetworkReply::NetworkError error_type, QString error_str);
    void moveResourcesSignalError(OAIResourceCopyMove summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateResourceByIdSignalError() instead")
    void updateResourceByIdSignalE(OAIResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResourceByIdSignalError(OAIResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileSignalError() instead")
    void uploadFileSignalE(OAIResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalError(OAIResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addFolderSignalErrorFull() instead")
    void addFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use compressFilesSignalErrorFull() instead")
    void compressFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void compressFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyResourcesSignalErrorFull() instead")
    void copyResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void copyResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteResourceByIdSignalErrorFull() instead")
    void deleteResourceByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResourceByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteResourcesSignalErrorFull() instead")
    void deleteResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadSignalErrorFull() instead")
    void downloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractFilesSignalErrorFull() instead")
    void extractFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPreviewImageSignalErrorFull() instead")
    void getPreviewImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPreviewImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResourceInfoSignalErrorFull() instead")
    void getResourceInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResourceInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResourceInfoByIdSignalErrorFull() instead")
    void getResourceInfoByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResourceInfoByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResourceContentsSignalErrorFull() instead")
    void listResourceContentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listResourceContentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResourcesSignalErrorFull() instead")
    void listResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveResourcesSignalErrorFull() instead")
    void moveResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateResourceByIdSignalErrorFull() instead")
    void updateResourceByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResourceByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileSignalErrorFull() instead")
    void uploadFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
