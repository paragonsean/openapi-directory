/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFormByIdRequestBody_elements_inner_settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFormByIdRequestBody_elements_inner_settings::OAIUpdateFormByIdRequestBody_elements_inner_settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFormByIdRequestBody_elements_inner_settings::OAIUpdateFormByIdRequestBody_elements_inner_settings() {
    this->initializeModel();
}

OAIUpdateFormByIdRequestBody_elements_inner_settings::~OAIUpdateFormByIdRequestBody_elements_inner_settings() {}

void OAIUpdateFormByIdRequestBody_elements_inner_settings::initializeModel() {

    m_is_required_isSet = false;
    m_is_required_isValid = false;

    m_sender_email_isSet = false;
    m_sender_email_isValid = false;

    m_use_as_folder_name_isSet = false;
    m_use_as_folder_name_isValid = false;
}

void OAIUpdateFormByIdRequestBody_elements_inner_settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFormByIdRequestBody_elements_inner_settings::fromJsonObject(QJsonObject json) {

    m_is_required_isValid = ::OpenAPI::fromJsonValue(m_is_required, json[QString("isRequired")]);
    m_is_required_isSet = !json[QString("isRequired")].isNull() && m_is_required_isValid;

    m_sender_email_isValid = ::OpenAPI::fromJsonValue(m_sender_email, json[QString("senderEmail")]);
    m_sender_email_isSet = !json[QString("senderEmail")].isNull() && m_sender_email_isValid;

    m_use_as_folder_name_isValid = ::OpenAPI::fromJsonValue(m_use_as_folder_name, json[QString("useAsFolderName")]);
    m_use_as_folder_name_isSet = !json[QString("useAsFolderName")].isNull() && m_use_as_folder_name_isValid;
}

QString OAIUpdateFormByIdRequestBody_elements_inner_settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFormByIdRequestBody_elements_inner_settings::asJsonObject() const {
    QJsonObject obj;
    if (m_is_required_isSet) {
        obj.insert(QString("isRequired"), ::OpenAPI::toJsonValue(m_is_required));
    }
    if (m_sender_email_isSet) {
        obj.insert(QString("senderEmail"), ::OpenAPI::toJsonValue(m_sender_email));
    }
    if (m_use_as_folder_name_isSet) {
        obj.insert(QString("useAsFolderName"), ::OpenAPI::toJsonValue(m_use_as_folder_name));
    }
    return obj;
}

bool OAIUpdateFormByIdRequestBody_elements_inner_settings::isIsRequired() const {
    return m_is_required;
}
void OAIUpdateFormByIdRequestBody_elements_inner_settings::setIsRequired(const bool &is_required) {
    m_is_required = is_required;
    m_is_required_isSet = true;
}

bool OAIUpdateFormByIdRequestBody_elements_inner_settings::is_is_required_Set() const{
    return m_is_required_isSet;
}

bool OAIUpdateFormByIdRequestBody_elements_inner_settings::is_is_required_Valid() const{
    return m_is_required_isValid;
}

bool OAIUpdateFormByIdRequestBody_elements_inner_settings::isSenderEmail() const {
    return m_sender_email;
}
void OAIUpdateFormByIdRequestBody_elements_inner_settings::setSenderEmail(const bool &sender_email) {
    m_sender_email = sender_email;
    m_sender_email_isSet = true;
}

bool OAIUpdateFormByIdRequestBody_elements_inner_settings::is_sender_email_Set() const{
    return m_sender_email_isSet;
}

bool OAIUpdateFormByIdRequestBody_elements_inner_settings::is_sender_email_Valid() const{
    return m_sender_email_isValid;
}

bool OAIUpdateFormByIdRequestBody_elements_inner_settings::isUseAsFolderName() const {
    return m_use_as_folder_name;
}
void OAIUpdateFormByIdRequestBody_elements_inner_settings::setUseAsFolderName(const bool &use_as_folder_name) {
    m_use_as_folder_name = use_as_folder_name;
    m_use_as_folder_name_isSet = true;
}

bool OAIUpdateFormByIdRequestBody_elements_inner_settings::is_use_as_folder_name_Set() const{
    return m_use_as_folder_name_isSet;
}

bool OAIUpdateFormByIdRequestBody_elements_inner_settings::is_use_as_folder_name_Valid() const{
    return m_use_as_folder_name_isValid;
}

bool OAIUpdateFormByIdRequestBody_elements_inner_settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_as_folder_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFormByIdRequestBody_elements_inner_settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
