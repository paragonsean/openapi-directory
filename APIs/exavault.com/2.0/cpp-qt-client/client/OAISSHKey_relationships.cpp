/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISSHKey_relationships.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISSHKey_relationships::OAISSHKey_relationships(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISSHKey_relationships::OAISSHKey_relationships() {
    this->initializeModel();
}

OAISSHKey_relationships::~OAISSHKey_relationships() {}

void OAISSHKey_relationships::initializeModel() {

    m_owner_user_isSet = false;
    m_owner_user_isValid = false;
}

void OAISSHKey_relationships::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISSHKey_relationships::fromJsonObject(QJsonObject json) {

    m_owner_user_isValid = ::OpenAPI::fromJsonValue(m_owner_user, json[QString("ownerUser")]);
    m_owner_user_isSet = !json[QString("ownerUser")].isNull() && m_owner_user_isValid;
}

QString OAISSHKey_relationships::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISSHKey_relationships::asJsonObject() const {
    QJsonObject obj;
    if (m_owner_user.isSet()) {
        obj.insert(QString("ownerUser"), ::OpenAPI::toJsonValue(m_owner_user));
    }
    return obj;
}

OAISSHKey_relationships_ownerUser OAISSHKey_relationships::getOwnerUser() const {
    return m_owner_user;
}
void OAISSHKey_relationships::setOwnerUser(const OAISSHKey_relationships_ownerUser &owner_user) {
    m_owner_user = owner_user;
    m_owner_user_isSet = true;
}

bool OAISSHKey_relationships::is_owner_user_Set() const{
    return m_owner_user_isSet;
}

bool OAISSHKey_relationships::is_owner_user_Valid() const{
    return m_owner_user_isValid;
}

bool OAISSHKey_relationships::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_owner_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISSHKey_relationships::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
