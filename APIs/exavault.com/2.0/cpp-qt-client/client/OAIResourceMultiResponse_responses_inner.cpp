/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceMultiResponse_responses_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceMultiResponse_responses_inner::OAIResourceMultiResponse_responses_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceMultiResponse_responses_inner::OAIResourceMultiResponse_responses_inner() {
    this->initializeModel();
}

OAIResourceMultiResponse_responses_inner::~OAIResourceMultiResponse_responses_inner() {}

void OAIResourceMultiResponse_responses_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIResourceMultiResponse_responses_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceMultiResponse_responses_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIResourceMultiResponse_responses_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceMultiResponse_responses_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_meta_isSet) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint64 OAIResourceMultiResponse_responses_inner::getId() const {
    return m_id;
}
void OAIResourceMultiResponse_responses_inner::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIResourceMultiResponse_responses_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResourceMultiResponse_responses_inner::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAIResourceMultiResponse_responses_inner::getMeta() const {
    return m_meta;
}
void OAIResourceMultiResponse_responses_inner::setMeta(const OAIObject &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIResourceMultiResponse_responses_inner::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIResourceMultiResponse_responses_inner::is_meta_Valid() const{
    return m_meta_isValid;
}

QString OAIResourceMultiResponse_responses_inner::getType() const {
    return m_type;
}
void OAIResourceMultiResponse_responses_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIResourceMultiResponse_responses_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIResourceMultiResponse_responses_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIResourceMultiResponse_responses_inner::getCode() const {
    return m_code;
}
void OAIResourceMultiResponse_responses_inner::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIResourceMultiResponse_responses_inner::is_code_Set() const{
    return m_code_isSet;
}

bool OAIResourceMultiResponse_responses_inner::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIResourceMultiResponse_responses_inner::getDetail() const {
    return m_detail;
}
void OAIResourceMultiResponse_responses_inner::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIResourceMultiResponse_responses_inner::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIResourceMultiResponse_responses_inner::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIResourceMultiResponse_responses_inner::getTitle() const {
    return m_title;
}
void OAIResourceMultiResponse_responses_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIResourceMultiResponse_responses_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIResourceMultiResponse_responses_inner::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIResourceMultiResponse_responses_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceMultiResponse_responses_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
