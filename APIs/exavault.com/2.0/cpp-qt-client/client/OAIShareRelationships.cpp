/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShareRelationships.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShareRelationships::OAIShareRelationships(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShareRelationships::OAIShareRelationships() {
    this->initializeModel();
}

OAIShareRelationships::~OAIShareRelationships() {}

void OAIShareRelationships::initializeModel() {

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;
}

void OAIShareRelationships::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShareRelationships::fromJsonObject(QJsonObject json) {

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;
}

QString OAIShareRelationships::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShareRelationships::asJsonObject() const {
    QJsonObject obj;
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_notifications.size() > 0) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    return obj;
}

QList<OAIShareRelationshipsMessage> OAIShareRelationships::getMessages() const {
    return m_messages;
}
void OAIShareRelationships::setMessages(const QList<OAIShareRelationshipsMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIShareRelationships::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIShareRelationships::is_messages_Valid() const{
    return m_messages_isValid;
}

QList<OAIShareRelationshipsNotification> OAIShareRelationships::getNotifications() const {
    return m_notifications;
}
void OAIShareRelationships::setNotifications(const QList<OAIShareRelationshipsNotification> &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAIShareRelationships::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAIShareRelationships::is_notifications_Valid() const{
    return m_notifications_isValid;
}

OAIShareRelationshipsOwner OAIShareRelationships::getOwner() const {
    return m_owner;
}
void OAIShareRelationships::setOwner(const OAIShareRelationshipsOwner &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIShareRelationships::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIShareRelationships::is_owner_Valid() const{
    return m_owner_isValid;
}

QList<OAIShareRelationshipsResource> OAIShareRelationships::getResources() const {
    return m_resources;
}
void OAIShareRelationships::setResources(const QList<OAIShareRelationshipsResource> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIShareRelationships::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIShareRelationships::is_resources_Valid() const{
    return m_resources_isValid;
}

bool OAIShareRelationships::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShareRelationships::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
