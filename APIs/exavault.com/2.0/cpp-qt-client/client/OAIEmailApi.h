/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEmailApi_H
#define OAI_OAIEmailApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEmptyResponse.h"
#include "OAISendReferralEmailRequestBody.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEmailApi : public QObject {
    Q_OBJECT

public:
    OAIEmailApi(const int timeOut = 0);
    ~OAIEmailApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  oai_send_referral_email_request_body OAISendReferralEmailRequestBody [optional]
    */
    virtual void sendReferralEmail(const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<OAISendReferralEmailRequestBody> &oai_send_referral_email_request_body = ::OpenAPI::OptionalParam<OAISendReferralEmailRequestBody>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  username QString [required]
    */
    virtual void sendWelcomeEmail(const QString &ev_api_key, const QString &ev_access_token, const QString &username);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void sendReferralEmailCallback(OAIHttpRequestWorker *worker);
    void sendWelcomeEmailCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void sendReferralEmailSignal(OAIEmptyResponse summary);
    void sendWelcomeEmailSignal(OAIEmptyResponse summary);


    void sendReferralEmailSignalFull(OAIHttpRequestWorker *worker, OAIEmptyResponse summary);
    void sendWelcomeEmailSignalFull(OAIHttpRequestWorker *worker, OAIEmptyResponse summary);

    Q_DECL_DEPRECATED_X("Use sendReferralEmailSignalError() instead")
    void sendReferralEmailSignalE(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendReferralEmailSignalError(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendWelcomeEmailSignalError() instead")
    void sendWelcomeEmailSignalE(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendWelcomeEmailSignalError(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use sendReferralEmailSignalErrorFull() instead")
    void sendReferralEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendReferralEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendWelcomeEmailSignalErrorFull() instead")
    void sendWelcomeEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendWelcomeEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
