/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteResourcesRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteResourcesRequestBody::OAIDeleteResourcesRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteResourcesRequestBody::OAIDeleteResourcesRequestBody() {
    this->initializeModel();
}

OAIDeleteResourcesRequestBody::~OAIDeleteResourcesRequestBody() {}

void OAIDeleteResourcesRequestBody::initializeModel() {

    m_resources_isSet = false;
    m_resources_isValid = false;
}

void OAIDeleteResourcesRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteResourcesRequestBody::fromJsonObject(QJsonObject json) {

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;
}

QString OAIDeleteResourcesRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteResourcesRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    return obj;
}

QList<QString> OAIDeleteResourcesRequestBody::getResources() const {
    return m_resources;
}
void OAIDeleteResourcesRequestBody::setResources(const QList<QString> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIDeleteResourcesRequestBody::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIDeleteResourcesRequestBody::is_resources_Valid() const{
    return m_resources_isValid;
}

bool OAIDeleteResourcesRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteResourcesRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resources_isValid && true;
}

} // namespace OpenAPI
