/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddSSHKeyRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddSSHKeyRequestBody::OAIAddSSHKeyRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddSSHKeyRequestBody::OAIAddSSHKeyRequestBody() {
    this->initializeModel();
}

OAIAddSSHKeyRequestBody::~OAIAddSSHKeyRequestBody() {}

void OAIAddSSHKeyRequestBody::initializeModel() {

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAddSSHKeyRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddSSHKeyRequestBody::fromJsonObject(QJsonObject json) {

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("publicKey")]);
    m_public_key_isSet = !json[QString("publicKey")].isNull() && m_public_key_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIAddSSHKeyRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddSSHKeyRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_public_key_isSet) {
        obj.insert(QString("publicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIAddSSHKeyRequestBody::getPublicKey() const {
    return m_public_key;
}
void OAIAddSSHKeyRequestBody::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIAddSSHKeyRequestBody::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIAddSSHKeyRequestBody::is_public_key_Valid() const{
    return m_public_key_isValid;
}

qint32 OAIAddSSHKeyRequestBody::getUserId() const {
    return m_user_id;
}
void OAIAddSSHKeyRequestBody::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAddSSHKeyRequestBody::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAddSSHKeyRequestBody::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAddSSHKeyRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddSSHKeyRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_public_key_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
