/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEmailListsApi_H
#define OAI_OAIEmailListsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddEmailListRequestBody.h"
#include "OAIEmailListCollectionResponse.h"
#include "OAIEmailListResponse.h"
#include "OAIEmptyResponse.h"
#include "OAIUpdateEmailListRequestBody.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEmailListsApi : public QObject {
    Q_OBJECT

public:
    OAIEmailListsApi(const int timeOut = 0);
    ~OAIEmailListsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  oai_add_email_list_request_body OAIAddEmailListRequestBody [optional]
    */
    virtual void addEmailList(const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<OAIAddEmailListRequestBody> &oai_add_email_list_request_body = ::OpenAPI::OptionalParam<OAIAddEmailListRequestBody>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  id qint32 [required]
    */
    virtual void deleteEmailListById(const QString &ev_api_key, const QString &ev_access_token, const qint32 &id);

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  id qint32 [required]
    * @param[in]  include QString [optional]
    */
    virtual void getEmailListById(const QString &ev_api_key, const QString &ev_access_token, const qint32 &id, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  include QString [optional]
    */
    virtual void getEmailLists(const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  id qint32 [required]
    * @param[in]  oai_update_email_list_request_body OAIUpdateEmailListRequestBody [optional]
    */
    virtual void updateEmailListById(const QString &ev_api_key, const QString &ev_access_token, const qint32 &id, const ::OpenAPI::OptionalParam<OAIUpdateEmailListRequestBody> &oai_update_email_list_request_body = ::OpenAPI::OptionalParam<OAIUpdateEmailListRequestBody>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addEmailListCallback(OAIHttpRequestWorker *worker);
    void deleteEmailListByIdCallback(OAIHttpRequestWorker *worker);
    void getEmailListByIdCallback(OAIHttpRequestWorker *worker);
    void getEmailListsCallback(OAIHttpRequestWorker *worker);
    void updateEmailListByIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addEmailListSignal(OAIEmailListResponse summary);
    void deleteEmailListByIdSignal(OAIEmptyResponse summary);
    void getEmailListByIdSignal(OAIEmailListResponse summary);
    void getEmailListsSignal(OAIEmailListCollectionResponse summary);
    void updateEmailListByIdSignal(OAIEmailListResponse summary);


    void addEmailListSignalFull(OAIHttpRequestWorker *worker, OAIEmailListResponse summary);
    void deleteEmailListByIdSignalFull(OAIHttpRequestWorker *worker, OAIEmptyResponse summary);
    void getEmailListByIdSignalFull(OAIHttpRequestWorker *worker, OAIEmailListResponse summary);
    void getEmailListsSignalFull(OAIHttpRequestWorker *worker, OAIEmailListCollectionResponse summary);
    void updateEmailListByIdSignalFull(OAIHttpRequestWorker *worker, OAIEmailListResponse summary);

    Q_DECL_DEPRECATED_X("Use addEmailListSignalError() instead")
    void addEmailListSignalE(OAIEmailListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addEmailListSignalError(OAIEmailListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmailListByIdSignalError() instead")
    void deleteEmailListByIdSignalE(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmailListByIdSignalError(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmailListByIdSignalError() instead")
    void getEmailListByIdSignalE(OAIEmailListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmailListByIdSignalError(OAIEmailListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmailListsSignalError() instead")
    void getEmailListsSignalE(OAIEmailListCollectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmailListsSignalError(OAIEmailListCollectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEmailListByIdSignalError() instead")
    void updateEmailListByIdSignalE(OAIEmailListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEmailListByIdSignalError(OAIEmailListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addEmailListSignalErrorFull() instead")
    void addEmailListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addEmailListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmailListByIdSignalErrorFull() instead")
    void deleteEmailListByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmailListByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmailListByIdSignalErrorFull() instead")
    void getEmailListByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmailListByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmailListsSignalErrorFull() instead")
    void getEmailListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmailListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEmailListByIdSignalErrorFull() instead")
    void updateEmailListByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEmailListByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
