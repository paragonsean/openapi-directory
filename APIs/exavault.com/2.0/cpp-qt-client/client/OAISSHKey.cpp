/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISSHKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISSHKey::OAISSHKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISSHKey::OAISSHKey() {
    this->initializeModel();
}

OAISSHKey::~OAISSHKey() {}

void OAISSHKey::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_relationships_isSet = false;
    m_relationships_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISSHKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISSHKey::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_relationships_isValid = ::OpenAPI::fromJsonValue(m_relationships, json[QString("relationships")]);
    m_relationships_isSet = !json[QString("relationships")].isNull() && m_relationships_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISSHKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISSHKey::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_relationships.isSet()) {
        obj.insert(QString("relationships"), ::OpenAPI::toJsonValue(m_relationships));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAISSHKeyAttributes OAISSHKey::getAttributes() const {
    return m_attributes;
}
void OAISSHKey::setAttributes(const OAISSHKeyAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAISSHKey::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAISSHKey::is_attributes_Valid() const{
    return m_attributes_isValid;
}

qint32 OAISSHKey::getId() const {
    return m_id;
}
void OAISSHKey::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISSHKey::is_id_Set() const{
    return m_id_isSet;
}

bool OAISSHKey::is_id_Valid() const{
    return m_id_isValid;
}

OAISSHKey_relationships OAISSHKey::getRelationships() const {
    return m_relationships;
}
void OAISSHKey::setRelationships(const OAISSHKey_relationships &relationships) {
    m_relationships = relationships;
    m_relationships_isSet = true;
}

bool OAISSHKey::is_relationships_Set() const{
    return m_relationships_isSet;
}

bool OAISSHKey::is_relationships_Valid() const{
    return m_relationships_isValid;
}

QString OAISSHKey::getType() const {
    return m_type;
}
void OAISSHKey::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISSHKey::is_type_Set() const{
    return m_type_isSet;
}

bool OAISSHKey::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISSHKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationships.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISSHKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
