/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormField_settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormField_settings::OAIFormField_settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormField_settings::OAIFormField_settings() {
    this->initializeModel();
}

OAIFormField_settings::~OAIFormField_settings() {}

void OAIFormField_settings::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_required_isSet = false;
    m_is_required_isValid = false;

    m_sender_email_isSet = false;
    m_sender_email_isValid = false;

    m_use_as_folder_name_isSet = false;
    m_use_as_folder_name_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIFormField_settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormField_settings::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_required_isValid = ::OpenAPI::fromJsonValue(m_is_required, json[QString("isRequired")]);
    m_is_required_isSet = !json[QString("isRequired")].isNull() && m_is_required_isValid;

    m_sender_email_isValid = ::OpenAPI::fromJsonValue(m_sender_email, json[QString("senderEmail")]);
    m_sender_email_isSet = !json[QString("senderEmail")].isNull() && m_sender_email_isValid;

    m_use_as_folder_name_isValid = ::OpenAPI::fromJsonValue(m_use_as_folder_name, json[QString("useAsFolderName")]);
    m_use_as_folder_name_isSet = !json[QString("useAsFolderName")].isNull() && m_use_as_folder_name_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIFormField_settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormField_settings::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_required_isSet) {
        obj.insert(QString("isRequired"), ::OpenAPI::toJsonValue(m_is_required));
    }
    if (m_sender_email_isSet) {
        obj.insert(QString("senderEmail"), ::OpenAPI::toJsonValue(m_sender_email));
    }
    if (m_use_as_folder_name_isSet) {
        obj.insert(QString("useAsFolderName"), ::OpenAPI::toJsonValue(m_use_as_folder_name));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIFormField_settings::getDescription() const {
    return m_description;
}
void OAIFormField_settings::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFormField_settings::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFormField_settings::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIFormField_settings::isIsRequired() const {
    return m_is_required;
}
void OAIFormField_settings::setIsRequired(const bool &is_required) {
    m_is_required = is_required;
    m_is_required_isSet = true;
}

bool OAIFormField_settings::is_is_required_Set() const{
    return m_is_required_isSet;
}

bool OAIFormField_settings::is_is_required_Valid() const{
    return m_is_required_isValid;
}

bool OAIFormField_settings::isSenderEmail() const {
    return m_sender_email;
}
void OAIFormField_settings::setSenderEmail(const bool &sender_email) {
    m_sender_email = sender_email;
    m_sender_email_isSet = true;
}

bool OAIFormField_settings::is_sender_email_Set() const{
    return m_sender_email_isSet;
}

bool OAIFormField_settings::is_sender_email_Valid() const{
    return m_sender_email_isValid;
}

bool OAIFormField_settings::isUseAsFolderName() const {
    return m_use_as_folder_name;
}
void OAIFormField_settings::setUseAsFolderName(const bool &use_as_folder_name) {
    m_use_as_folder_name = use_as_folder_name;
    m_use_as_folder_name_isSet = true;
}

bool OAIFormField_settings::is_use_as_folder_name_Set() const{
    return m_use_as_folder_name_isSet;
}

bool OAIFormField_settings::is_use_as_folder_name_Valid() const{
    return m_use_as_folder_name_isValid;
}

float OAIFormField_settings::getWidth() const {
    return m_width;
}
void OAIFormField_settings::setWidth(const float &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIFormField_settings::is_width_Set() const{
    return m_width_isSet;
}

bool OAIFormField_settings::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIFormField_settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_as_folder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormField_settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
