/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMasterUser_masterUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMasterUser_masterUser::OAIMasterUser_masterUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMasterUser_masterUser::OAIMasterUser_masterUser() {
    this->initializeModel();
}

OAIMasterUser_masterUser::~OAIMasterUser_masterUser() {}

void OAIMasterUser_masterUser::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;
}

void OAIMasterUser_masterUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMasterUser_masterUser::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;
}

QString OAIMasterUser_masterUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMasterUser_masterUser::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    return obj;
}

OAIMasterUser_masterUser_data OAIMasterUser_masterUser::getData() const {
    return m_data;
}
void OAIMasterUser_masterUser::setData(const OAIMasterUser_masterUser_data &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIMasterUser_masterUser::is_data_Set() const{
    return m_data_isSet;
}

bool OAIMasterUser_masterUser::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIMasterUser_masterUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMasterUser_masterUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
