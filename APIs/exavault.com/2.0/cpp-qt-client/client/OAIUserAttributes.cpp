/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserAttributes::OAIUserAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserAttributes::OAIUserAttributes() {
    this->initializeModel();
}

OAIUserAttributes::~OAIUserAttributes() {}

void OAIUserAttributes::initializeModel() {

    m_access_timestamp_isSet = false;
    m_access_timestamp_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_first_login_isSet = false;
    m_first_login_isValid = false;

    m_home_path_isSet = false;
    m_home_path_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_onboarding_isSet = false;
    m_onboarding_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUserAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserAttributes::fromJsonObject(QJsonObject json) {

    m_access_timestamp_isValid = ::OpenAPI::fromJsonValue(m_access_timestamp, json[QString("accessTimestamp")]);
    m_access_timestamp_isSet = !json[QString("accessTimestamp")].isNull() && m_access_timestamp_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_first_login_isValid = ::OpenAPI::fromJsonValue(m_first_login, json[QString("firstLogin")]);
    m_first_login_isSet = !json[QString("firstLogin")].isNull() && m_first_login_isValid;

    m_home_path_isValid = ::OpenAPI::fromJsonValue(m_home_path, json[QString("homePath")]);
    m_home_path_isSet = !json[QString("homePath")].isNull() && m_home_path_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_onboarding_isValid = ::OpenAPI::fromJsonValue(m_onboarding, json[QString("onboarding")]);
    m_onboarding_isSet = !json[QString("onboarding")].isNull() && m_onboarding_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUserAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_access_timestamp_isSet) {
        obj.insert(QString("accessTimestamp"), ::OpenAPI::toJsonValue(m_access_timestamp));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_first_login_isSet) {
        obj.insert(QString("firstLogin"), ::OpenAPI::toJsonValue(m_first_login));
    }
    if (m_home_path_isSet) {
        obj.insert(QString("homePath"), ::OpenAPI::toJsonValue(m_home_path));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_onboarding_isSet) {
        obj.insert(QString("onboarding"), ::OpenAPI::toJsonValue(m_onboarding));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIUserAttributes::getAccessTimestamp() const {
    return m_access_timestamp;
}
void OAIUserAttributes::setAccessTimestamp(const QString &access_timestamp) {
    m_access_timestamp = access_timestamp;
    m_access_timestamp_isSet = true;
}

bool OAIUserAttributes::is_access_timestamp_Set() const{
    return m_access_timestamp_isSet;
}

bool OAIUserAttributes::is_access_timestamp_Valid() const{
    return m_access_timestamp_isValid;
}

QString OAIUserAttributes::getAccountName() const {
    return m_account_name;
}
void OAIUserAttributes::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIUserAttributes::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIUserAttributes::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QDateTime OAIUserAttributes::getCreated() const {
    return m_created;
}
void OAIUserAttributes::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIUserAttributes::is_created_Set() const{
    return m_created_isSet;
}

bool OAIUserAttributes::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIUserAttributes::getEmail() const {
    return m_email;
}
void OAIUserAttributes::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserAttributes::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserAttributes::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserAttributes::getExpiration() const {
    return m_expiration;
}
void OAIUserAttributes::setExpiration(const QString &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIUserAttributes::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIUserAttributes::is_expiration_Valid() const{
    return m_expiration_isValid;
}

bool OAIUserAttributes::isFirstLogin() const {
    return m_first_login;
}
void OAIUserAttributes::setFirstLogin(const bool &first_login) {
    m_first_login = first_login;
    m_first_login_isSet = true;
}

bool OAIUserAttributes::is_first_login_Set() const{
    return m_first_login_isSet;
}

bool OAIUserAttributes::is_first_login_Valid() const{
    return m_first_login_isValid;
}

QString OAIUserAttributes::getHomePath() const {
    return m_home_path;
}
void OAIUserAttributes::setHomePath(const QString &home_path) {
    m_home_path = home_path;
    m_home_path_isSet = true;
}

bool OAIUserAttributes::is_home_path_Set() const{
    return m_home_path_isSet;
}

bool OAIUserAttributes::is_home_path_Valid() const{
    return m_home_path_isValid;
}

bool OAIUserAttributes::isLocked() const {
    return m_locked;
}
void OAIUserAttributes::setLocked(const bool &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAIUserAttributes::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIUserAttributes::is_locked_Valid() const{
    return m_locked_isValid;
}

QDateTime OAIUserAttributes::getModified() const {
    return m_modified;
}
void OAIUserAttributes::setModified(const QDateTime &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAIUserAttributes::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAIUserAttributes::is_modified_Valid() const{
    return m_modified_isValid;
}

QString OAIUserAttributes::getNickname() const {
    return m_nickname;
}
void OAIUserAttributes::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAIUserAttributes::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAIUserAttributes::is_nickname_Valid() const{
    return m_nickname_isValid;
}

bool OAIUserAttributes::isOnboarding() const {
    return m_onboarding;
}
void OAIUserAttributes::setOnboarding(const bool &onboarding) {
    m_onboarding = onboarding;
    m_onboarding_isSet = true;
}

bool OAIUserAttributes::is_onboarding_Set() const{
    return m_onboarding_isSet;
}

bool OAIUserAttributes::is_onboarding_Valid() const{
    return m_onboarding_isValid;
}

OAIUserPermissions OAIUserAttributes::getPermissions() const {
    return m_permissions;
}
void OAIUserAttributes::setPermissions(const OAIUserPermissions &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIUserAttributes::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIUserAttributes::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIUserAttributes::getRole() const {
    return m_role;
}
void OAIUserAttributes::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIUserAttributes::is_role_Set() const{
    return m_role_isSet;
}

bool OAIUserAttributes::is_role_Valid() const{
    return m_role_isValid;
}

qint32 OAIUserAttributes::getStatus() const {
    return m_status;
}
void OAIUserAttributes::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUserAttributes::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUserAttributes::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUserAttributes::getTimeZone() const {
    return m_time_zone;
}
void OAIUserAttributes::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIUserAttributes::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIUserAttributes::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAIUserAttributes::getUsername() const {
    return m_username;
}
void OAIUserAttributes::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUserAttributes::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUserAttributes::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUserAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_onboarding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_name_isValid && m_created_isValid && m_modified_isValid && m_nickname_isValid && m_onboarding_isValid && m_permissions_isValid && m_role_isValid && m_status_isValid && m_time_zone_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
