/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlanDetails_webhookOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlanDetails_webhookOptions::OAIPlanDetails_webhookOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlanDetails_webhookOptions::OAIPlanDetails_webhookOptions() {
    this->initializeModel();
}

OAIPlanDetails_webhookOptions::~OAIPlanDetails_webhookOptions() {}

void OAIPlanDetails_webhookOptions::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_include_triggers_isSet = false;
    m_include_triggers_isValid = false;

    m_restriction_types_isSet = false;
    m_restriction_types_isValid = false;
}

void OAIPlanDetails_webhookOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlanDetails_webhookOptions::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_include_triggers_isValid = ::OpenAPI::fromJsonValue(m_include_triggers, json[QString("includeTriggers")]);
    m_include_triggers_isSet = !json[QString("includeTriggers")].isNull() && m_include_triggers_isValid;

    m_restriction_types_isValid = ::OpenAPI::fromJsonValue(m_restriction_types, json[QString("restrictionTypes")]);
    m_restriction_types_isSet = !json[QString("restrictionTypes")].isNull() && m_restriction_types_isValid;
}

QString OAIPlanDetails_webhookOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlanDetails_webhookOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_include_triggers_isSet) {
        obj.insert(QString("includeTriggers"), ::OpenAPI::toJsonValue(m_include_triggers));
    }
    if (m_restriction_types.size() > 0) {
        obj.insert(QString("restrictionTypes"), ::OpenAPI::toJsonValue(m_restriction_types));
    }
    return obj;
}

qint32 OAIPlanDetails_webhookOptions::getAmount() const {
    return m_amount;
}
void OAIPlanDetails_webhookOptions::setAmount(const qint32 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPlanDetails_webhookOptions::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPlanDetails_webhookOptions::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIPlanDetails_webhookOptions::getIncludeTriggers() const {
    return m_include_triggers;
}
void OAIPlanDetails_webhookOptions::setIncludeTriggers(const QString &include_triggers) {
    m_include_triggers = include_triggers;
    m_include_triggers_isSet = true;
}

bool OAIPlanDetails_webhookOptions::is_include_triggers_Set() const{
    return m_include_triggers_isSet;
}

bool OAIPlanDetails_webhookOptions::is_include_triggers_Valid() const{
    return m_include_triggers_isValid;
}

QList<QString> OAIPlanDetails_webhookOptions::getRestrictionTypes() const {
    return m_restriction_types;
}
void OAIPlanDetails_webhookOptions::setRestrictionTypes(const QList<QString> &restriction_types) {
    m_restriction_types = restriction_types;
    m_restriction_types_isSet = true;
}

bool OAIPlanDetails_webhookOptions::is_restriction_types_Set() const{
    return m_restriction_types_isSet;
}

bool OAIPlanDetails_webhookOptions::is_restriction_types_Valid() const{
    return m_restriction_types_isValid;
}

bool OAIPlanDetails_webhookOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_triggers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restriction_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlanDetails_webhookOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
