/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceCopyMove.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceCopyMove::OAIResourceCopyMove(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceCopyMove::OAIResourceCopyMove() {
    this->initializeModel();
}

OAIResourceCopyMove::~OAIResourceCopyMove() {}

void OAIResourceCopyMove::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;
}

void OAIResourceCopyMove::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceCopyMove::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;
}

QString OAIResourceCopyMove::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceCopyMove::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_meta_isSet) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    return obj;
}

OAIResource OAIResourceCopyMove::getData() const {
    return m_data;
}
void OAIResourceCopyMove::setData(const OAIResource &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIResourceCopyMove::is_data_Set() const{
    return m_data_isSet;
}

bool OAIResourceCopyMove::is_data_Valid() const{
    return m_data_isValid;
}

OAIObject OAIResourceCopyMove::getMeta() const {
    return m_meta;
}
void OAIResourceCopyMove::setMeta(const OAIObject &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIResourceCopyMove::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIResourceCopyMove::is_meta_Valid() const{
    return m_meta_isValid;
}

bool OAIResourceCopyMove::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceCopyMove::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
