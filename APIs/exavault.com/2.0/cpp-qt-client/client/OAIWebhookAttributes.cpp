/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookAttributes::OAIWebhookAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookAttributes::OAIWebhookAttributes() {
    this->initializeModel();
}

OAIWebhookAttributes::~OAIWebhookAttributes() {}

void OAIWebhookAttributes::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_endpoint_url_isSet = false;
    m_endpoint_url_isValid = false;

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_response_version_isSet = false;
    m_response_version_isValid = false;

    m_triggers_isSet = false;
    m_triggers_isValid = false;

    m_verification_token_isSet = false;
    m_verification_token_isValid = false;
}

void OAIWebhookAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookAttributes::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_endpoint_url_isValid = ::OpenAPI::fromJsonValue(m_endpoint_url, json[QString("endpointUrl")]);
    m_endpoint_url_isSet = !json[QString("endpointUrl")].isNull() && m_endpoint_url_isValid;

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_response_version_isValid = ::OpenAPI::fromJsonValue(m_response_version, json[QString("responseVersion")]);
    m_response_version_isSet = !json[QString("responseVersion")].isNull() && m_response_version_isValid;

    m_triggers_isValid = ::OpenAPI::fromJsonValue(m_triggers, json[QString("triggers")]);
    m_triggers_isSet = !json[QString("triggers")].isNull() && m_triggers_isValid;

    m_verification_token_isValid = ::OpenAPI::fromJsonValue(m_verification_token, json[QString("verificationToken")]);
    m_verification_token_isSet = !json[QString("verificationToken")].isNull() && m_verification_token_isValid;
}

QString OAIWebhookAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_endpoint_url_isSet) {
        obj.insert(QString("endpointUrl"), ::OpenAPI::toJsonValue(m_endpoint_url));
    }
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_response_version_isSet) {
        obj.insert(QString("responseVersion"), ::OpenAPI::toJsonValue(m_response_version));
    }
    if (m_triggers.isSet()) {
        obj.insert(QString("triggers"), ::OpenAPI::toJsonValue(m_triggers));
    }
    if (m_verification_token_isSet) {
        obj.insert(QString("verificationToken"), ::OpenAPI::toJsonValue(m_verification_token));
    }
    return obj;
}

QDateTime OAIWebhookAttributes::getCreated() const {
    return m_created;
}
void OAIWebhookAttributes::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWebhookAttributes::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWebhookAttributes::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIWebhookAttributes::getEndpointUrl() const {
    return m_endpoint_url;
}
void OAIWebhookAttributes::setEndpointUrl(const QString &endpoint_url) {
    m_endpoint_url = endpoint_url;
    m_endpoint_url_isSet = true;
}

bool OAIWebhookAttributes::is_endpoint_url_Set() const{
    return m_endpoint_url_isSet;
}

bool OAIWebhookAttributes::is_endpoint_url_Valid() const{
    return m_endpoint_url_isValid;
}

bool OAIWebhookAttributes::isFailed() const {
    return m_failed;
}
void OAIWebhookAttributes::setFailed(const bool &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAIWebhookAttributes::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAIWebhookAttributes::is_failed_Valid() const{
    return m_failed_isValid;
}

QDateTime OAIWebhookAttributes::getModified() const {
    return m_modified;
}
void OAIWebhookAttributes::setModified(const QDateTime &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAIWebhookAttributes::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAIWebhookAttributes::is_modified_Valid() const{
    return m_modified_isValid;
}

QString OAIWebhookAttributes::getResponseVersion() const {
    return m_response_version;
}
void OAIWebhookAttributes::setResponseVersion(const QString &response_version) {
    m_response_version = response_version;
    m_response_version_isSet = true;
}

bool OAIWebhookAttributes::is_response_version_Set() const{
    return m_response_version_isSet;
}

bool OAIWebhookAttributes::is_response_version_Valid() const{
    return m_response_version_isValid;
}

OAIWebhookTriggers OAIWebhookAttributes::getTriggers() const {
    return m_triggers;
}
void OAIWebhookAttributes::setTriggers(const OAIWebhookTriggers &triggers) {
    m_triggers = triggers;
    m_triggers_isSet = true;
}

bool OAIWebhookAttributes::is_triggers_Set() const{
    return m_triggers_isSet;
}

bool OAIWebhookAttributes::is_triggers_Valid() const{
    return m_triggers_isValid;
}

QString OAIWebhookAttributes::getVerificationToken() const {
    return m_verification_token;
}
void OAIWebhookAttributes::setVerificationToken(const QString &verification_token) {
    m_verification_token = verification_token;
    m_verification_token_isSet = true;
}

bool OAIWebhookAttributes::is_verification_token_Set() const{
    return m_verification_token_isSet;
}

bool OAIWebhookAttributes::is_verification_token_Valid() const{
    return m_verification_token_isValid;
}

bool OAIWebhookAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
