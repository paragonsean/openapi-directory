/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotificationsApi_H
#define OAI_OAINotificationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddNotificationRequestBody.h"
#include "OAIEmptyResponse.h"
#include "OAINotificationCollectionResponse.h"
#include "OAINotificationResponse.h"
#include "OAIUpdateNotificationByIdRequestBody.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotificationsApi : public QObject {
    Q_OBJECT

public:
    OAINotificationsApi(const int timeOut = 0);
    ~OAINotificationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  oai_add_notification_request_body OAIAddNotificationRequestBody [optional]
    */
    virtual void addNotification(const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<OAIAddNotificationRequestBody> &oai_add_notification_request_body = ::OpenAPI::OptionalParam<OAIAddNotificationRequestBody>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  id qint32 [required]
    */
    virtual void deleteNotificationById(const QString &ev_api_key, const QString &ev_access_token, const qint32 &id);

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  id qint32 [required]
    * @param[in]  include QString [optional]
    */
    virtual void getNotificationById(const QString &ev_api_key, const QString &ev_access_token, const qint32 &id, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  type QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QString [optional]
    * @param[in]  action QString [optional]
    */
    virtual void listNotifications(const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  id qint32 [required]
    * @param[in]  oai_update_notification_by_id_request_body OAIUpdateNotificationByIdRequestBody [optional]
    */
    virtual void updateNotificationById(const QString &ev_api_key, const QString &ev_access_token, const qint32 &id, const ::OpenAPI::OptionalParam<OAIUpdateNotificationByIdRequestBody> &oai_update_notification_by_id_request_body = ::OpenAPI::OptionalParam<OAIUpdateNotificationByIdRequestBody>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addNotificationCallback(OAIHttpRequestWorker *worker);
    void deleteNotificationByIdCallback(OAIHttpRequestWorker *worker);
    void getNotificationByIdCallback(OAIHttpRequestWorker *worker);
    void listNotificationsCallback(OAIHttpRequestWorker *worker);
    void updateNotificationByIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addNotificationSignal(OAINotificationResponse summary);
    void deleteNotificationByIdSignal(OAIEmptyResponse summary);
    void getNotificationByIdSignal(OAINotificationResponse summary);
    void listNotificationsSignal(OAINotificationCollectionResponse summary);
    void updateNotificationByIdSignal(OAINotificationResponse summary);


    void addNotificationSignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);
    void deleteNotificationByIdSignalFull(OAIHttpRequestWorker *worker, OAIEmptyResponse summary);
    void getNotificationByIdSignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);
    void listNotificationsSignalFull(OAIHttpRequestWorker *worker, OAINotificationCollectionResponse summary);
    void updateNotificationByIdSignalFull(OAIHttpRequestWorker *worker, OAINotificationResponse summary);

    Q_DECL_DEPRECATED_X("Use addNotificationSignalError() instead")
    void addNotificationSignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addNotificationSignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNotificationByIdSignalError() instead")
    void deleteNotificationByIdSignalE(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNotificationByIdSignalError(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationByIdSignalError() instead")
    void getNotificationByIdSignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationByIdSignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNotificationsSignalError() instead")
    void listNotificationsSignalE(OAINotificationCollectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listNotificationsSignalError(OAINotificationCollectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNotificationByIdSignalError() instead")
    void updateNotificationByIdSignalE(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNotificationByIdSignalError(OAINotificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addNotificationSignalErrorFull() instead")
    void addNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNotificationByIdSignalErrorFull() instead")
    void deleteNotificationByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNotificationByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNotificationByIdSignalErrorFull() instead")
    void getNotificationByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNotificationByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNotificationsSignalErrorFull() instead")
    void listNotificationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listNotificationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNotificationByIdSignalErrorFull() instead")
    void updateNotificationByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNotificationByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
