/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountAttributes::OAIAccountAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountAttributes::OAIAccountAttributes() {
    this->initializeModel();
}

OAIAccountAttributes::~OAIAccountAttributes() {}

void OAIAccountAttributes::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_onboarding_isSet = false;
    m_account_onboarding_isValid = false;

    m_allowed_ip_isSet = false;
    m_allowed_ip_isValid = false;

    m_branding_isSet = false;
    m_branding_isValid = false;

    m_branding_settings_isSet = false;
    m_branding_settings_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_complex_passwords_isSet = false;
    m_complex_passwords_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_domain_isSet = false;
    m_custom_domain_isValid = false;

    m_custom_signature_isSet = false;
    m_custom_signature_isValid = false;

    m_external_domains_isSet = false;
    m_external_domains_isValid = false;

    m_max_users_isSet = false;
    m_max_users_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_plan_details_isSet = false;
    m_plan_details_isValid = false;

    m_quota_isSet = false;
    m_quota_isValid = false;

    m_secure_only_isSet = false;
    m_secure_only_isValid = false;

    m_show_referral_links_isSet = false;
    m_show_referral_links_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_user_count_isSet = false;
    m_user_count_isValid = false;

    m_welcome_email_content_isSet = false;
    m_welcome_email_content_isValid = false;

    m_welcome_email_subject_isSet = false;
    m_welcome_email_subject_isValid = false;
}

void OAIAccountAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountAttributes::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_account_onboarding_isValid = ::OpenAPI::fromJsonValue(m_account_onboarding, json[QString("accountOnboarding")]);
    m_account_onboarding_isSet = !json[QString("accountOnboarding")].isNull() && m_account_onboarding_isValid;

    m_allowed_ip_isValid = ::OpenAPI::fromJsonValue(m_allowed_ip, json[QString("allowedIp")]);
    m_allowed_ip_isSet = !json[QString("allowedIp")].isNull() && m_allowed_ip_isValid;

    m_branding_isValid = ::OpenAPI::fromJsonValue(m_branding, json[QString("branding")]);
    m_branding_isSet = !json[QString("branding")].isNull() && m_branding_isValid;

    m_branding_settings_isValid = ::OpenAPI::fromJsonValue(m_branding_settings, json[QString("brandingSettings")]);
    m_branding_settings_isSet = !json[QString("brandingSettings")].isNull() && m_branding_settings_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_complex_passwords_isValid = ::OpenAPI::fromJsonValue(m_complex_passwords, json[QString("complexPasswords")]);
    m_complex_passwords_isSet = !json[QString("complexPasswords")].isNull() && m_complex_passwords_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_domain_isValid = ::OpenAPI::fromJsonValue(m_custom_domain, json[QString("customDomain")]);
    m_custom_domain_isSet = !json[QString("customDomain")].isNull() && m_custom_domain_isValid;

    m_custom_signature_isValid = ::OpenAPI::fromJsonValue(m_custom_signature, json[QString("customSignature")]);
    m_custom_signature_isSet = !json[QString("customSignature")].isNull() && m_custom_signature_isValid;

    m_external_domains_isValid = ::OpenAPI::fromJsonValue(m_external_domains, json[QString("externalDomains")]);
    m_external_domains_isSet = !json[QString("externalDomains")].isNull() && m_external_domains_isValid;

    m_max_users_isValid = ::OpenAPI::fromJsonValue(m_max_users, json[QString("maxUsers")]);
    m_max_users_isSet = !json[QString("maxUsers")].isNull() && m_max_users_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_plan_details_isValid = ::OpenAPI::fromJsonValue(m_plan_details, json[QString("planDetails")]);
    m_plan_details_isSet = !json[QString("planDetails")].isNull() && m_plan_details_isValid;

    m_quota_isValid = ::OpenAPI::fromJsonValue(m_quota, json[QString("quota")]);
    m_quota_isSet = !json[QString("quota")].isNull() && m_quota_isValid;

    m_secure_only_isValid = ::OpenAPI::fromJsonValue(m_secure_only, json[QString("secureOnly")]);
    m_secure_only_isSet = !json[QString("secureOnly")].isNull() && m_secure_only_isValid;

    m_show_referral_links_isValid = ::OpenAPI::fromJsonValue(m_show_referral_links, json[QString("showReferralLinks")]);
    m_show_referral_links_isSet = !json[QString("showReferralLinks")].isNull() && m_show_referral_links_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_user_count_isValid = ::OpenAPI::fromJsonValue(m_user_count, json[QString("userCount")]);
    m_user_count_isSet = !json[QString("userCount")].isNull() && m_user_count_isValid;

    m_welcome_email_content_isValid = ::OpenAPI::fromJsonValue(m_welcome_email_content, json[QString("welcomeEmailContent")]);
    m_welcome_email_content_isSet = !json[QString("welcomeEmailContent")].isNull() && m_welcome_email_content_isValid;

    m_welcome_email_subject_isValid = ::OpenAPI::fromJsonValue(m_welcome_email_subject, json[QString("welcomeEmailSubject")]);
    m_welcome_email_subject_isSet = !json[QString("welcomeEmailSubject")].isNull() && m_welcome_email_subject_isValid;
}

QString OAIAccountAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_account_onboarding_isSet) {
        obj.insert(QString("accountOnboarding"), ::OpenAPI::toJsonValue(m_account_onboarding));
    }
    if (m_allowed_ip.size() > 0) {
        obj.insert(QString("allowedIp"), ::OpenAPI::toJsonValue(m_allowed_ip));
    }
    if (m_branding_isSet) {
        obj.insert(QString("branding"), ::OpenAPI::toJsonValue(m_branding));
    }
    if (m_branding_settings.isSet()) {
        obj.insert(QString("brandingSettings"), ::OpenAPI::toJsonValue(m_branding_settings));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_complex_passwords_isSet) {
        obj.insert(QString("complexPasswords"), ::OpenAPI::toJsonValue(m_complex_passwords));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_domain_isSet) {
        obj.insert(QString("customDomain"), ::OpenAPI::toJsonValue(m_custom_domain));
    }
    if (m_custom_signature_isSet) {
        obj.insert(QString("customSignature"), ::OpenAPI::toJsonValue(m_custom_signature));
    }
    if (m_external_domains.size() > 0) {
        obj.insert(QString("externalDomains"), ::OpenAPI::toJsonValue(m_external_domains));
    }
    if (m_max_users_isSet) {
        obj.insert(QString("maxUsers"), ::OpenAPI::toJsonValue(m_max_users));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_plan_details.isSet()) {
        obj.insert(QString("planDetails"), ::OpenAPI::toJsonValue(m_plan_details));
    }
    if (m_quota.isSet()) {
        obj.insert(QString("quota"), ::OpenAPI::toJsonValue(m_quota));
    }
    if (m_secure_only_isSet) {
        obj.insert(QString("secureOnly"), ::OpenAPI::toJsonValue(m_secure_only));
    }
    if (m_show_referral_links_isSet) {
        obj.insert(QString("showReferralLinks"), ::OpenAPI::toJsonValue(m_show_referral_links));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_user_count_isSet) {
        obj.insert(QString("userCount"), ::OpenAPI::toJsonValue(m_user_count));
    }
    if (m_welcome_email_content_isSet) {
        obj.insert(QString("welcomeEmailContent"), ::OpenAPI::toJsonValue(m_welcome_email_content));
    }
    if (m_welcome_email_subject_isSet) {
        obj.insert(QString("welcomeEmailSubject"), ::OpenAPI::toJsonValue(m_welcome_email_subject));
    }
    return obj;
}

QString OAIAccountAttributes::getAccountName() const {
    return m_account_name;
}
void OAIAccountAttributes::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIAccountAttributes::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIAccountAttributes::is_account_name_Valid() const{
    return m_account_name_isValid;
}

bool OAIAccountAttributes::isAccountOnboarding() const {
    return m_account_onboarding;
}
void OAIAccountAttributes::setAccountOnboarding(const bool &account_onboarding) {
    m_account_onboarding = account_onboarding;
    m_account_onboarding_isSet = true;
}

bool OAIAccountAttributes::is_account_onboarding_Set() const{
    return m_account_onboarding_isSet;
}

bool OAIAccountAttributes::is_account_onboarding_Valid() const{
    return m_account_onboarding_isValid;
}

QList<OAIAccountAttributes_allowedIp_inner> OAIAccountAttributes::getAllowedIp() const {
    return m_allowed_ip;
}
void OAIAccountAttributes::setAllowedIp(const QList<OAIAccountAttributes_allowedIp_inner> &allowed_ip) {
    m_allowed_ip = allowed_ip;
    m_allowed_ip_isSet = true;
}

bool OAIAccountAttributes::is_allowed_ip_Set() const{
    return m_allowed_ip_isSet;
}

bool OAIAccountAttributes::is_allowed_ip_Valid() const{
    return m_allowed_ip_isValid;
}

bool OAIAccountAttributes::isBranding() const {
    return m_branding;
}
void OAIAccountAttributes::setBranding(const bool &branding) {
    m_branding = branding;
    m_branding_isSet = true;
}

bool OAIAccountAttributes::is_branding_Set() const{
    return m_branding_isSet;
}

bool OAIAccountAttributes::is_branding_Valid() const{
    return m_branding_isValid;
}

OAIBrandingSettings OAIAccountAttributes::getBrandingSettings() const {
    return m_branding_settings;
}
void OAIAccountAttributes::setBrandingSettings(const OAIBrandingSettings &branding_settings) {
    m_branding_settings = branding_settings;
    m_branding_settings_isSet = true;
}

bool OAIAccountAttributes::is_branding_settings_Set() const{
    return m_branding_settings_isSet;
}

bool OAIAccountAttributes::is_branding_settings_Valid() const{
    return m_branding_settings_isValid;
}

qint32 OAIAccountAttributes::getClientId() const {
    return m_client_id;
}
void OAIAccountAttributes::setClientId(const qint32 &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIAccountAttributes::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIAccountAttributes::is_client_id_Valid() const{
    return m_client_id_isValid;
}

bool OAIAccountAttributes::isComplexPasswords() const {
    return m_complex_passwords;
}
void OAIAccountAttributes::setComplexPasswords(const bool &complex_passwords) {
    m_complex_passwords = complex_passwords;
    m_complex_passwords_isSet = true;
}

bool OAIAccountAttributes::is_complex_passwords_Set() const{
    return m_complex_passwords_isSet;
}

bool OAIAccountAttributes::is_complex_passwords_Valid() const{
    return m_complex_passwords_isValid;
}

QDateTime OAIAccountAttributes::getCreated() const {
    return m_created;
}
void OAIAccountAttributes::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIAccountAttributes::is_created_Set() const{
    return m_created_isSet;
}

bool OAIAccountAttributes::is_created_Valid() const{
    return m_created_isValid;
}

bool OAIAccountAttributes::isCustomDomain() const {
    return m_custom_domain;
}
void OAIAccountAttributes::setCustomDomain(const bool &custom_domain) {
    m_custom_domain = custom_domain;
    m_custom_domain_isSet = true;
}

bool OAIAccountAttributes::is_custom_domain_Set() const{
    return m_custom_domain_isSet;
}

bool OAIAccountAttributes::is_custom_domain_Valid() const{
    return m_custom_domain_isValid;
}

QString OAIAccountAttributes::getCustomSignature() const {
    return m_custom_signature;
}
void OAIAccountAttributes::setCustomSignature(const QString &custom_signature) {
    m_custom_signature = custom_signature;
    m_custom_signature_isSet = true;
}

bool OAIAccountAttributes::is_custom_signature_Set() const{
    return m_custom_signature_isSet;
}

bool OAIAccountAttributes::is_custom_signature_Valid() const{
    return m_custom_signature_isValid;
}

QList<QString> OAIAccountAttributes::getExternalDomains() const {
    return m_external_domains;
}
void OAIAccountAttributes::setExternalDomains(const QList<QString> &external_domains) {
    m_external_domains = external_domains;
    m_external_domains_isSet = true;
}

bool OAIAccountAttributes::is_external_domains_Set() const{
    return m_external_domains_isSet;
}

bool OAIAccountAttributes::is_external_domains_Valid() const{
    return m_external_domains_isValid;
}

qint32 OAIAccountAttributes::getMaxUsers() const {
    return m_max_users;
}
void OAIAccountAttributes::setMaxUsers(const qint32 &max_users) {
    m_max_users = max_users;
    m_max_users_isSet = true;
}

bool OAIAccountAttributes::is_max_users_Set() const{
    return m_max_users_isSet;
}

bool OAIAccountAttributes::is_max_users_Valid() const{
    return m_max_users_isValid;
}

QDateTime OAIAccountAttributes::getModified() const {
    return m_modified;
}
void OAIAccountAttributes::setModified(const QDateTime &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAIAccountAttributes::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAIAccountAttributes::is_modified_Valid() const{
    return m_modified_isValid;
}

OAIPlanDetails OAIAccountAttributes::getPlanDetails() const {
    return m_plan_details;
}
void OAIAccountAttributes::setPlanDetails(const OAIPlanDetails &plan_details) {
    m_plan_details = plan_details;
    m_plan_details_isSet = true;
}

bool OAIAccountAttributes::is_plan_details_Set() const{
    return m_plan_details_isSet;
}

bool OAIAccountAttributes::is_plan_details_Valid() const{
    return m_plan_details_isValid;
}

OAIQuota OAIAccountAttributes::getQuota() const {
    return m_quota;
}
void OAIAccountAttributes::setQuota(const OAIQuota &quota) {
    m_quota = quota;
    m_quota_isSet = true;
}

bool OAIAccountAttributes::is_quota_Set() const{
    return m_quota_isSet;
}

bool OAIAccountAttributes::is_quota_Valid() const{
    return m_quota_isValid;
}

bool OAIAccountAttributes::isSecureOnly() const {
    return m_secure_only;
}
void OAIAccountAttributes::setSecureOnly(const bool &secure_only) {
    m_secure_only = secure_only;
    m_secure_only_isSet = true;
}

bool OAIAccountAttributes::is_secure_only_Set() const{
    return m_secure_only_isSet;
}

bool OAIAccountAttributes::is_secure_only_Valid() const{
    return m_secure_only_isValid;
}

bool OAIAccountAttributes::isShowReferralLinks() const {
    return m_show_referral_links;
}
void OAIAccountAttributes::setShowReferralLinks(const bool &show_referral_links) {
    m_show_referral_links = show_referral_links;
    m_show_referral_links_isSet = true;
}

bool OAIAccountAttributes::is_show_referral_links_Set() const{
    return m_show_referral_links_isSet;
}

bool OAIAccountAttributes::is_show_referral_links_Valid() const{
    return m_show_referral_links_isValid;
}

qint32 OAIAccountAttributes::getStatus() const {
    return m_status;
}
void OAIAccountAttributes::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAccountAttributes::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAccountAttributes::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIAccountAttributes::getUserCount() const {
    return m_user_count;
}
void OAIAccountAttributes::setUserCount(const qint32 &user_count) {
    m_user_count = user_count;
    m_user_count_isSet = true;
}

bool OAIAccountAttributes::is_user_count_Set() const{
    return m_user_count_isSet;
}

bool OAIAccountAttributes::is_user_count_Valid() const{
    return m_user_count_isValid;
}

QString OAIAccountAttributes::getWelcomeEmailContent() const {
    return m_welcome_email_content;
}
void OAIAccountAttributes::setWelcomeEmailContent(const QString &welcome_email_content) {
    m_welcome_email_content = welcome_email_content;
    m_welcome_email_content_isSet = true;
}

bool OAIAccountAttributes::is_welcome_email_content_Set() const{
    return m_welcome_email_content_isSet;
}

bool OAIAccountAttributes::is_welcome_email_content_Valid() const{
    return m_welcome_email_content_isValid;
}

QString OAIAccountAttributes::getWelcomeEmailSubject() const {
    return m_welcome_email_subject;
}
void OAIAccountAttributes::setWelcomeEmailSubject(const QString &welcome_email_subject) {
    m_welcome_email_subject = welcome_email_subject;
    m_welcome_email_subject_isSet = true;
}

bool OAIAccountAttributes::is_welcome_email_subject_Set() const{
    return m_welcome_email_subject_isSet;
}

bool OAIAccountAttributes::is_welcome_email_subject_Valid() const{
    return m_welcome_email_subject_isValid;
}

bool OAIAccountAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_onboarding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_ip.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_branding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branding_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complex_passwords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_referral_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_welcome_email_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_welcome_email_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
