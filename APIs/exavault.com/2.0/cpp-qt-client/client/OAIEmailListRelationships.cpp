/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailListRelationships.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailListRelationships::OAIEmailListRelationships(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailListRelationships::OAIEmailListRelationships() {
    this->initializeModel();
}

OAIEmailListRelationships::~OAIEmailListRelationships() {}

void OAIEmailListRelationships::initializeModel() {

    m_owner_user_isSet = false;
    m_owner_user_isValid = false;
}

void OAIEmailListRelationships::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailListRelationships::fromJsonObject(QJsonObject json) {

    m_owner_user_isValid = ::OpenAPI::fromJsonValue(m_owner_user, json[QString("ownerUser")]);
    m_owner_user_isSet = !json[QString("ownerUser")].isNull() && m_owner_user_isValid;
}

QString OAIEmailListRelationships::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailListRelationships::asJsonObject() const {
    QJsonObject obj;
    if (m_owner_user.isSet()) {
        obj.insert(QString("ownerUser"), ::OpenAPI::toJsonValue(m_owner_user));
    }
    return obj;
}

OAIEmailListOwnerUser OAIEmailListRelationships::getOwnerUser() const {
    return m_owner_user;
}
void OAIEmailListRelationships::setOwnerUser(const OAIEmailListOwnerUser &owner_user) {
    m_owner_user = owner_user;
    m_owner_user_isSet = true;
}

bool OAIEmailListRelationships::is_owner_user_Set() const{
    return m_owner_user_isSet;
}

bool OAIEmailListRelationships::is_owner_user_Valid() const{
    return m_owner_user_isValid;
}

bool OAIEmailListRelationships::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_owner_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailListRelationships::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
