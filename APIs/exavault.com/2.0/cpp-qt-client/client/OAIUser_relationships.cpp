/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_relationships.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_relationships::OAIUser_relationships(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_relationships::OAIUser_relationships() {
    this->initializeModel();
}

OAIUser_relationships::~OAIUser_relationships() {}

void OAIUser_relationships::initializeModel() {

    m_home_resource_isSet = false;
    m_home_resource_isValid = false;

    m_owner_account_isSet = false;
    m_owner_account_isValid = false;
}

void OAIUser_relationships::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_relationships::fromJsonObject(QJsonObject json) {

    m_home_resource_isValid = ::OpenAPI::fromJsonValue(m_home_resource, json[QString("homeResource")]);
    m_home_resource_isSet = !json[QString("homeResource")].isNull() && m_home_resource_isValid;

    m_owner_account_isValid = ::OpenAPI::fromJsonValue(m_owner_account, json[QString("ownerAccount")]);
    m_owner_account_isSet = !json[QString("ownerAccount")].isNull() && m_owner_account_isValid;
}

QString OAIUser_relationships::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_relationships::asJsonObject() const {
    QJsonObject obj;
    if (m_home_resource.isSet()) {
        obj.insert(QString("homeResource"), ::OpenAPI::toJsonValue(m_home_resource));
    }
    if (m_owner_account.isSet()) {
        obj.insert(QString("ownerAccount"), ::OpenAPI::toJsonValue(m_owner_account));
    }
    return obj;
}

OAIUser_relationships_homeResource OAIUser_relationships::getHomeResource() const {
    return m_home_resource;
}
void OAIUser_relationships::setHomeResource(const OAIUser_relationships_homeResource &home_resource) {
    m_home_resource = home_resource;
    m_home_resource_isSet = true;
}

bool OAIUser_relationships::is_home_resource_Set() const{
    return m_home_resource_isSet;
}

bool OAIUser_relationships::is_home_resource_Valid() const{
    return m_home_resource_isValid;
}

OAIUser_relationships_ownerAccount OAIUser_relationships::getOwnerAccount() const {
    return m_owner_account;
}
void OAIUser_relationships::setOwnerAccount(const OAIUser_relationships_ownerAccount &owner_account) {
    m_owner_account = owner_account;
    m_owner_account_isSet = true;
}

bool OAIUser_relationships::is_owner_account_Set() const{
    return m_owner_account_isSet;
}

bool OAIUser_relationships::is_owner_account_Valid() const{
    return m_owner_account_isValid;
}

bool OAIUser_relationships::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_home_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_account.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_relationships::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_owner_account_isValid && true;
}

} // namespace OpenAPI
