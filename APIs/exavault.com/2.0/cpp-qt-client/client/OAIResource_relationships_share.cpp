/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResource_relationships_share.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResource_relationships_share::OAIResource_relationships_share(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResource_relationships_share::OAIResource_relationships_share() {
    this->initializeModel();
}

OAIResource_relationships_share::~OAIResource_relationships_share() {}

void OAIResource_relationships_share::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;
}

void OAIResource_relationships_share::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResource_relationships_share::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;
}

QString OAIResource_relationships_share::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResource_relationships_share::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    return obj;
}

OAIResource_relationships_share_data OAIResource_relationships_share::getData() const {
    return m_data;
}
void OAIResource_relationships_share::setData(const OAIResource_relationships_share_data &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIResource_relationships_share::is_data_Set() const{
    return m_data_isSet;
}

bool OAIResource_relationships_share::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIResource_relationships_share::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResource_relationships_share::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
