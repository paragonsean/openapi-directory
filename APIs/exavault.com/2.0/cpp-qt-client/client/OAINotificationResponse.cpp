/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationResponse::OAINotificationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationResponse::OAINotificationResponse() {
    this->initializeModel();
}

OAINotificationResponse::~OAINotificationResponse() {}

void OAINotificationResponse::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_included_isSet = false;
    m_included_isValid = false;

    m_response_status_isSet = false;
    m_response_status_isValid = false;
}

void OAINotificationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationResponse::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_included_isValid = ::OpenAPI::fromJsonValue(m_included, json[QString("included")]);
    m_included_isSet = !json[QString("included")].isNull() && m_included_isValid;

    m_response_status_isValid = ::OpenAPI::fromJsonValue(m_response_status, json[QString("responseStatus")]);
    m_response_status_isSet = !json[QString("responseStatus")].isNull() && m_response_status_isValid;
}

QString OAINotificationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_included.size() > 0) {
        obj.insert(QString("included"), ::OpenAPI::toJsonValue(m_included));
    }
    if (m_response_status_isSet) {
        obj.insert(QString("responseStatus"), ::OpenAPI::toJsonValue(m_response_status));
    }
    return obj;
}

OAINotification OAINotificationResponse::getData() const {
    return m_data;
}
void OAINotificationResponse::setData(const OAINotification &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAINotificationResponse::is_data_Set() const{
    return m_data_isSet;
}

bool OAINotificationResponse::is_data_Valid() const{
    return m_data_isValid;
}

QList<OAINotificationCollectionResponse_included_inner> OAINotificationResponse::getIncluded() const {
    return m_included;
}
void OAINotificationResponse::setIncluded(const QList<OAINotificationCollectionResponse_included_inner> &included) {
    m_included = included;
    m_included_isSet = true;
}

bool OAINotificationResponse::is_included_Set() const{
    return m_included_isSet;
}

bool OAINotificationResponse::is_included_Valid() const{
    return m_included_isValid;
}

qint32 OAINotificationResponse::getResponseStatus() const {
    return m_response_status;
}
void OAINotificationResponse::setResponseStatus(const qint32 &response_status) {
    m_response_status = response_status;
    m_response_status_isSet = true;
}

bool OAINotificationResponse::is_response_status_Set() const{
    return m_response_status_isSet;
}

bool OAINotificationResponse::is_response_status_Valid() const{
    return m_response_status_isValid;
}

bool OAINotificationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_included.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
