/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQuota.h
 *
 * 
 */

#ifndef OAIQuota_H
#define OAIQuota_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIQuota : public OAIObject {
public:
    OAIQuota();
    OAIQuota(QString json);
    ~OAIQuota() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getBandwidthLimit() const;
    void setBandwidthLimit(const qint64 &bandwidth_limit);
    bool is_bandwidth_limit_Set() const;
    bool is_bandwidth_limit_Valid() const;

    qint64 getBandwidthUsed() const;
    void setBandwidthUsed(const qint64 &bandwidth_used);
    bool is_bandwidth_used_Set() const;
    bool is_bandwidth_used_Valid() const;

    qint64 getDiskLimit() const;
    void setDiskLimit(const qint64 &disk_limit);
    bool is_disk_limit_Set() const;
    bool is_disk_limit_Valid() const;

    qint64 getDiskUsed() const;
    void setDiskUsed(const qint64 &disk_used);
    bool is_disk_used_Set() const;
    bool is_disk_used_Valid() const;

    bool isNoticeEnabled() const;
    void setNoticeEnabled(const bool &notice_enabled);
    bool is_notice_enabled_Set() const;
    bool is_notice_enabled_Valid() const;

    qint32 getNoticeThreshold() const;
    void setNoticeThreshold(const qint32 &notice_threshold);
    bool is_notice_threshold_Set() const;
    bool is_notice_threshold_Valid() const;

    qint32 getTransactionsLimit() const;
    void setTransactionsLimit(const qint32 &transactions_limit);
    bool is_transactions_limit_Set() const;
    bool is_transactions_limit_Valid() const;

    bool isTransactionsNoticeEnabled() const;
    void setTransactionsNoticeEnabled(const bool &transactions_notice_enabled);
    bool is_transactions_notice_enabled_Set() const;
    bool is_transactions_notice_enabled_Valid() const;

    qint32 getTransactionsNoticeThreshold() const;
    void setTransactionsNoticeThreshold(const qint32 &transactions_notice_threshold);
    bool is_transactions_notice_threshold_Set() const;
    bool is_transactions_notice_threshold_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_bandwidth_limit;
    bool m_bandwidth_limit_isSet;
    bool m_bandwidth_limit_isValid;

    qint64 m_bandwidth_used;
    bool m_bandwidth_used_isSet;
    bool m_bandwidth_used_isValid;

    qint64 m_disk_limit;
    bool m_disk_limit_isSet;
    bool m_disk_limit_isValid;

    qint64 m_disk_used;
    bool m_disk_used_isSet;
    bool m_disk_used_isValid;

    bool m_notice_enabled;
    bool m_notice_enabled_isSet;
    bool m_notice_enabled_isValid;

    qint32 m_notice_threshold;
    bool m_notice_threshold_isSet;
    bool m_notice_threshold_isValid;

    qint32 m_transactions_limit;
    bool m_transactions_limit_isSet;
    bool m_transactions_limit_isValid;

    bool m_transactions_notice_enabled;
    bool m_transactions_notice_enabled_isSet;
    bool m_transactions_notice_enabled_isValid;

    qint32 m_transactions_notice_threshold;
    bool m_transactions_notice_threshold_isSet;
    bool m_transactions_notice_threshold_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQuota)

#endif // OAIQuota_H
