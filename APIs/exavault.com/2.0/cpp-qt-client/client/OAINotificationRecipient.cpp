/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationRecipient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationRecipient::OAINotificationRecipient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationRecipient::OAINotificationRecipient() {
    this->initializeModel();
}

OAINotificationRecipient::~OAINotificationRecipient() {}

void OAINotificationRecipient::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_notification_id_isSet = false;
    m_notification_id_isValid = false;
}

void OAINotificationRecipient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationRecipient::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_notification_id_isValid = ::OpenAPI::fromJsonValue(m_notification_id, json[QString("notificationId")]);
    m_notification_id_isSet = !json[QString("notificationId")].isNull() && m_notification_id_isValid;
}

QString OAINotificationRecipient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationRecipient::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_notification_id_isSet) {
        obj.insert(QString("notificationId"), ::OpenAPI::toJsonValue(m_notification_id));
    }
    return obj;
}

QDateTime OAINotificationRecipient::getCreated() const {
    return m_created;
}
void OAINotificationRecipient::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAINotificationRecipient::is_created_Set() const{
    return m_created_isSet;
}

bool OAINotificationRecipient::is_created_Valid() const{
    return m_created_isValid;
}

QString OAINotificationRecipient::getEmail() const {
    return m_email;
}
void OAINotificationRecipient::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAINotificationRecipient::is_email_Set() const{
    return m_email_isSet;
}

bool OAINotificationRecipient::is_email_Valid() const{
    return m_email_isValid;
}

qint32 OAINotificationRecipient::getId() const {
    return m_id;
}
void OAINotificationRecipient::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINotificationRecipient::is_id_Set() const{
    return m_id_isSet;
}

bool OAINotificationRecipient::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAINotificationRecipient::getModified() const {
    return m_modified;
}
void OAINotificationRecipient::setModified(const QDateTime &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAINotificationRecipient::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAINotificationRecipient::is_modified_Valid() const{
    return m_modified_isValid;
}

qint32 OAINotificationRecipient::getNotificationId() const {
    return m_notification_id;
}
void OAINotificationRecipient::setNotificationId(const qint32 &notification_id) {
    m_notification_id = notification_id;
    m_notification_id_isSet = true;
}

bool OAINotificationRecipient::is_notification_id_Set() const{
    return m_notification_id_isSet;
}

bool OAINotificationRecipient::is_notification_id_Valid() const{
    return m_notification_id_isValid;
}

bool OAINotificationRecipient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationRecipient::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
