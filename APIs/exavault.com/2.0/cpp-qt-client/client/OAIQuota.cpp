/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuota::OAIQuota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuota::OAIQuota() {
    this->initializeModel();
}

OAIQuota::~OAIQuota() {}

void OAIQuota::initializeModel() {

    m_bandwidth_limit_isSet = false;
    m_bandwidth_limit_isValid = false;

    m_bandwidth_used_isSet = false;
    m_bandwidth_used_isValid = false;

    m_disk_limit_isSet = false;
    m_disk_limit_isValid = false;

    m_disk_used_isSet = false;
    m_disk_used_isValid = false;

    m_notice_enabled_isSet = false;
    m_notice_enabled_isValid = false;

    m_notice_threshold_isSet = false;
    m_notice_threshold_isValid = false;

    m_transactions_limit_isSet = false;
    m_transactions_limit_isValid = false;

    m_transactions_notice_enabled_isSet = false;
    m_transactions_notice_enabled_isValid = false;

    m_transactions_notice_threshold_isSet = false;
    m_transactions_notice_threshold_isValid = false;
}

void OAIQuota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuota::fromJsonObject(QJsonObject json) {

    m_bandwidth_limit_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_limit, json[QString("bandwidthLimit")]);
    m_bandwidth_limit_isSet = !json[QString("bandwidthLimit")].isNull() && m_bandwidth_limit_isValid;

    m_bandwidth_used_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_used, json[QString("bandwidthUsed")]);
    m_bandwidth_used_isSet = !json[QString("bandwidthUsed")].isNull() && m_bandwidth_used_isValid;

    m_disk_limit_isValid = ::OpenAPI::fromJsonValue(m_disk_limit, json[QString("diskLimit")]);
    m_disk_limit_isSet = !json[QString("diskLimit")].isNull() && m_disk_limit_isValid;

    m_disk_used_isValid = ::OpenAPI::fromJsonValue(m_disk_used, json[QString("diskUsed")]);
    m_disk_used_isSet = !json[QString("diskUsed")].isNull() && m_disk_used_isValid;

    m_notice_enabled_isValid = ::OpenAPI::fromJsonValue(m_notice_enabled, json[QString("noticeEnabled")]);
    m_notice_enabled_isSet = !json[QString("noticeEnabled")].isNull() && m_notice_enabled_isValid;

    m_notice_threshold_isValid = ::OpenAPI::fromJsonValue(m_notice_threshold, json[QString("noticeThreshold")]);
    m_notice_threshold_isSet = !json[QString("noticeThreshold")].isNull() && m_notice_threshold_isValid;

    m_transactions_limit_isValid = ::OpenAPI::fromJsonValue(m_transactions_limit, json[QString("transactionsLimit")]);
    m_transactions_limit_isSet = !json[QString("transactionsLimit")].isNull() && m_transactions_limit_isValid;

    m_transactions_notice_enabled_isValid = ::OpenAPI::fromJsonValue(m_transactions_notice_enabled, json[QString("transactionsNoticeEnabled")]);
    m_transactions_notice_enabled_isSet = !json[QString("transactionsNoticeEnabled")].isNull() && m_transactions_notice_enabled_isValid;

    m_transactions_notice_threshold_isValid = ::OpenAPI::fromJsonValue(m_transactions_notice_threshold, json[QString("transactionsNoticeThreshold")]);
    m_transactions_notice_threshold_isSet = !json[QString("transactionsNoticeThreshold")].isNull() && m_transactions_notice_threshold_isValid;
}

QString OAIQuota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuota::asJsonObject() const {
    QJsonObject obj;
    if (m_bandwidth_limit_isSet) {
        obj.insert(QString("bandwidthLimit"), ::OpenAPI::toJsonValue(m_bandwidth_limit));
    }
    if (m_bandwidth_used_isSet) {
        obj.insert(QString("bandwidthUsed"), ::OpenAPI::toJsonValue(m_bandwidth_used));
    }
    if (m_disk_limit_isSet) {
        obj.insert(QString("diskLimit"), ::OpenAPI::toJsonValue(m_disk_limit));
    }
    if (m_disk_used_isSet) {
        obj.insert(QString("diskUsed"), ::OpenAPI::toJsonValue(m_disk_used));
    }
    if (m_notice_enabled_isSet) {
        obj.insert(QString("noticeEnabled"), ::OpenAPI::toJsonValue(m_notice_enabled));
    }
    if (m_notice_threshold_isSet) {
        obj.insert(QString("noticeThreshold"), ::OpenAPI::toJsonValue(m_notice_threshold));
    }
    if (m_transactions_limit_isSet) {
        obj.insert(QString("transactionsLimit"), ::OpenAPI::toJsonValue(m_transactions_limit));
    }
    if (m_transactions_notice_enabled_isSet) {
        obj.insert(QString("transactionsNoticeEnabled"), ::OpenAPI::toJsonValue(m_transactions_notice_enabled));
    }
    if (m_transactions_notice_threshold_isSet) {
        obj.insert(QString("transactionsNoticeThreshold"), ::OpenAPI::toJsonValue(m_transactions_notice_threshold));
    }
    return obj;
}

qint64 OAIQuota::getBandwidthLimit() const {
    return m_bandwidth_limit;
}
void OAIQuota::setBandwidthLimit(const qint64 &bandwidth_limit) {
    m_bandwidth_limit = bandwidth_limit;
    m_bandwidth_limit_isSet = true;
}

bool OAIQuota::is_bandwidth_limit_Set() const{
    return m_bandwidth_limit_isSet;
}

bool OAIQuota::is_bandwidth_limit_Valid() const{
    return m_bandwidth_limit_isValid;
}

qint64 OAIQuota::getBandwidthUsed() const {
    return m_bandwidth_used;
}
void OAIQuota::setBandwidthUsed(const qint64 &bandwidth_used) {
    m_bandwidth_used = bandwidth_used;
    m_bandwidth_used_isSet = true;
}

bool OAIQuota::is_bandwidth_used_Set() const{
    return m_bandwidth_used_isSet;
}

bool OAIQuota::is_bandwidth_used_Valid() const{
    return m_bandwidth_used_isValid;
}

qint64 OAIQuota::getDiskLimit() const {
    return m_disk_limit;
}
void OAIQuota::setDiskLimit(const qint64 &disk_limit) {
    m_disk_limit = disk_limit;
    m_disk_limit_isSet = true;
}

bool OAIQuota::is_disk_limit_Set() const{
    return m_disk_limit_isSet;
}

bool OAIQuota::is_disk_limit_Valid() const{
    return m_disk_limit_isValid;
}

qint64 OAIQuota::getDiskUsed() const {
    return m_disk_used;
}
void OAIQuota::setDiskUsed(const qint64 &disk_used) {
    m_disk_used = disk_used;
    m_disk_used_isSet = true;
}

bool OAIQuota::is_disk_used_Set() const{
    return m_disk_used_isSet;
}

bool OAIQuota::is_disk_used_Valid() const{
    return m_disk_used_isValid;
}

bool OAIQuota::isNoticeEnabled() const {
    return m_notice_enabled;
}
void OAIQuota::setNoticeEnabled(const bool &notice_enabled) {
    m_notice_enabled = notice_enabled;
    m_notice_enabled_isSet = true;
}

bool OAIQuota::is_notice_enabled_Set() const{
    return m_notice_enabled_isSet;
}

bool OAIQuota::is_notice_enabled_Valid() const{
    return m_notice_enabled_isValid;
}

qint32 OAIQuota::getNoticeThreshold() const {
    return m_notice_threshold;
}
void OAIQuota::setNoticeThreshold(const qint32 &notice_threshold) {
    m_notice_threshold = notice_threshold;
    m_notice_threshold_isSet = true;
}

bool OAIQuota::is_notice_threshold_Set() const{
    return m_notice_threshold_isSet;
}

bool OAIQuota::is_notice_threshold_Valid() const{
    return m_notice_threshold_isValid;
}

qint32 OAIQuota::getTransactionsLimit() const {
    return m_transactions_limit;
}
void OAIQuota::setTransactionsLimit(const qint32 &transactions_limit) {
    m_transactions_limit = transactions_limit;
    m_transactions_limit_isSet = true;
}

bool OAIQuota::is_transactions_limit_Set() const{
    return m_transactions_limit_isSet;
}

bool OAIQuota::is_transactions_limit_Valid() const{
    return m_transactions_limit_isValid;
}

bool OAIQuota::isTransactionsNoticeEnabled() const {
    return m_transactions_notice_enabled;
}
void OAIQuota::setTransactionsNoticeEnabled(const bool &transactions_notice_enabled) {
    m_transactions_notice_enabled = transactions_notice_enabled;
    m_transactions_notice_enabled_isSet = true;
}

bool OAIQuota::is_transactions_notice_enabled_Set() const{
    return m_transactions_notice_enabled_isSet;
}

bool OAIQuota::is_transactions_notice_enabled_Valid() const{
    return m_transactions_notice_enabled_isValid;
}

qint32 OAIQuota::getTransactionsNoticeThreshold() const {
    return m_transactions_notice_threshold;
}
void OAIQuota::setTransactionsNoticeThreshold(const qint32 &transactions_notice_threshold) {
    m_transactions_notice_threshold = transactions_notice_threshold;
    m_transactions_notice_threshold_isSet = true;
}

bool OAIQuota::is_transactions_notice_threshold_Set() const{
    return m_transactions_notice_threshold_isSet;
}

bool OAIQuota::is_transactions_notice_threshold_Valid() const{
    return m_transactions_notice_threshold_isValid;
}

bool OAIQuota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bandwidth_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bandwidth_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notice_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notice_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions_notice_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions_notice_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuota::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
