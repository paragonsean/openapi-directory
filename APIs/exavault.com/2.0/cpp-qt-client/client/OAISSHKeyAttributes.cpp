/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISSHKeyAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISSHKeyAttributes::OAISSHKeyAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISSHKeyAttributes::OAISSHKeyAttributes() {
    this->initializeModel();
}

OAISSHKeyAttributes::~OAISSHKeyAttributes() {}

void OAISSHKeyAttributes::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_last_login_isSet = false;
    m_last_login_isValid = false;
}

void OAISSHKeyAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISSHKeyAttributes::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_last_login_isValid = ::OpenAPI::fromJsonValue(m_last_login, json[QString("lastLogin")]);
    m_last_login_isSet = !json[QString("lastLogin")].isNull() && m_last_login_isValid;
}

QString OAISSHKeyAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISSHKeyAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_last_login_isSet) {
        obj.insert(QString("lastLogin"), ::OpenAPI::toJsonValue(m_last_login));
    }
    return obj;
}

QDateTime OAISSHKeyAttributes::getCreated() const {
    return m_created;
}
void OAISSHKeyAttributes::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAISSHKeyAttributes::is_created_Set() const{
    return m_created_isSet;
}

bool OAISSHKeyAttributes::is_created_Valid() const{
    return m_created_isValid;
}

QString OAISSHKeyAttributes::getFingerprint() const {
    return m_fingerprint;
}
void OAISSHKeyAttributes::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAISSHKeyAttributes::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAISSHKeyAttributes::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QDateTime OAISSHKeyAttributes::getLastLogin() const {
    return m_last_login;
}
void OAISSHKeyAttributes::setLastLogin(const QDateTime &last_login) {
    m_last_login = last_login;
    m_last_login_isSet = true;
}

bool OAISSHKeyAttributes::is_last_login_Set() const{
    return m_last_login_isSet;
}

bool OAISSHKeyAttributes::is_last_login_Valid() const{
    return m_last_login_isValid;
}

bool OAISSHKeyAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_login_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISSHKeyAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
