/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFormByIdRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFormByIdRequestBody::OAIUpdateFormByIdRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFormByIdRequestBody::OAIUpdateFormByIdRequestBody() {
    this->initializeModel();
}

OAIUpdateFormByIdRequestBody::~OAIUpdateFormByIdRequestBody() {}

void OAIUpdateFormByIdRequestBody::initializeModel() {

    m_css_styles_isSet = false;
    m_css_styles_isValid = false;

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_form_description_isSet = false;
    m_form_description_isValid = false;

    m_submit_button_text_isSet = false;
    m_submit_button_text_isValid = false;

    m_success_message_isSet = false;
    m_success_message_isValid = false;
}

void OAIUpdateFormByIdRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFormByIdRequestBody::fromJsonObject(QJsonObject json) {

    m_css_styles_isValid = ::OpenAPI::fromJsonValue(m_css_styles, json[QString("cssStyles")]);
    m_css_styles_isSet = !json[QString("cssStyles")].isNull() && m_css_styles_isValid;

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_form_description_isValid = ::OpenAPI::fromJsonValue(m_form_description, json[QString("formDescription")]);
    m_form_description_isSet = !json[QString("formDescription")].isNull() && m_form_description_isValid;

    m_submit_button_text_isValid = ::OpenAPI::fromJsonValue(m_submit_button_text, json[QString("submitButtonText")]);
    m_submit_button_text_isSet = !json[QString("submitButtonText")].isNull() && m_submit_button_text_isValid;

    m_success_message_isValid = ::OpenAPI::fromJsonValue(m_success_message, json[QString("successMessage")]);
    m_success_message_isSet = !json[QString("successMessage")].isNull() && m_success_message_isValid;
}

QString OAIUpdateFormByIdRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFormByIdRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_css_styles_isSet) {
        obj.insert(QString("cssStyles"), ::OpenAPI::toJsonValue(m_css_styles));
    }
    if (m_elements.size() > 0) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_form_description_isSet) {
        obj.insert(QString("formDescription"), ::OpenAPI::toJsonValue(m_form_description));
    }
    if (m_submit_button_text_isSet) {
        obj.insert(QString("submitButtonText"), ::OpenAPI::toJsonValue(m_submit_button_text));
    }
    if (m_success_message_isSet) {
        obj.insert(QString("successMessage"), ::OpenAPI::toJsonValue(m_success_message));
    }
    return obj;
}

QString OAIUpdateFormByIdRequestBody::getCssStyles() const {
    return m_css_styles;
}
void OAIUpdateFormByIdRequestBody::setCssStyles(const QString &css_styles) {
    m_css_styles = css_styles;
    m_css_styles_isSet = true;
}

bool OAIUpdateFormByIdRequestBody::is_css_styles_Set() const{
    return m_css_styles_isSet;
}

bool OAIUpdateFormByIdRequestBody::is_css_styles_Valid() const{
    return m_css_styles_isValid;
}

QList<OAIUpdateFormByIdRequestBody_elements_inner> OAIUpdateFormByIdRequestBody::getElements() const {
    return m_elements;
}
void OAIUpdateFormByIdRequestBody::setElements(const QList<OAIUpdateFormByIdRequestBody_elements_inner> &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIUpdateFormByIdRequestBody::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIUpdateFormByIdRequestBody::is_elements_Valid() const{
    return m_elements_isValid;
}

QString OAIUpdateFormByIdRequestBody::getFormDescription() const {
    return m_form_description;
}
void OAIUpdateFormByIdRequestBody::setFormDescription(const QString &form_description) {
    m_form_description = form_description;
    m_form_description_isSet = true;
}

bool OAIUpdateFormByIdRequestBody::is_form_description_Set() const{
    return m_form_description_isSet;
}

bool OAIUpdateFormByIdRequestBody::is_form_description_Valid() const{
    return m_form_description_isValid;
}

QString OAIUpdateFormByIdRequestBody::getSubmitButtonText() const {
    return m_submit_button_text;
}
void OAIUpdateFormByIdRequestBody::setSubmitButtonText(const QString &submit_button_text) {
    m_submit_button_text = submit_button_text;
    m_submit_button_text_isSet = true;
}

bool OAIUpdateFormByIdRequestBody::is_submit_button_text_Set() const{
    return m_submit_button_text_isSet;
}

bool OAIUpdateFormByIdRequestBody::is_submit_button_text_Valid() const{
    return m_submit_button_text_isValid;
}

QString OAIUpdateFormByIdRequestBody::getSuccessMessage() const {
    return m_success_message;
}
void OAIUpdateFormByIdRequestBody::setSuccessMessage(const QString &success_message) {
    m_success_message = success_message;
    m_success_message_isSet = true;
}

bool OAIUpdateFormByIdRequestBody::is_success_message_Set() const{
    return m_success_message_isSet;
}

bool OAIUpdateFormByIdRequestBody::is_success_message_Valid() const{
    return m_success_message_isValid;
}

bool OAIUpdateFormByIdRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_css_styles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submit_button_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFormByIdRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
