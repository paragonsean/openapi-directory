/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceMultiResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceMultiResponse::OAIResourceMultiResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceMultiResponse::OAIResourceMultiResponse() {
    this->initializeModel();
}

OAIResourceMultiResponse::~OAIResourceMultiResponse() {}

void OAIResourceMultiResponse::initializeModel() {

    m_responses_isSet = false;
    m_responses_isValid = false;
}

void OAIResourceMultiResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceMultiResponse::fromJsonObject(QJsonObject json) {

    m_responses_isValid = ::OpenAPI::fromJsonValue(m_responses, json[QString("responses")]);
    m_responses_isSet = !json[QString("responses")].isNull() && m_responses_isValid;
}

QString OAIResourceMultiResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceMultiResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_responses.size() > 0) {
        obj.insert(QString("responses"), ::OpenAPI::toJsonValue(m_responses));
    }
    return obj;
}

QList<OAIResourceMultiResponse_responses_inner> OAIResourceMultiResponse::getResponses() const {
    return m_responses;
}
void OAIResourceMultiResponse::setResponses(const QList<OAIResourceMultiResponse_responses_inner> &responses) {
    m_responses = responses;
    m_responses_isSet = true;
}

bool OAIResourceMultiResponse::is_responses_Set() const{
    return m_responses_isSet;
}

bool OAIResourceMultiResponse::is_responses_Valid() const{
    return m_responses_isValid;
}

bool OAIResourceMultiResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_responses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceMultiResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
