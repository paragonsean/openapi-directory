/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookActivityEntry_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookActivityEntry_attributes::OAIWebhookActivityEntry_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookActivityEntry_attributes::OAIWebhookActivityEntry_attributes() {
    this->initializeModel();
}

OAIWebhookActivityEntry_attributes::~OAIWebhookActivityEntry_attributes() {}

void OAIWebhookActivityEntry_attributes::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_attempt_id_isSet = false;
    m_attempt_id_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_endpoint_url_isSet = false;
    m_endpoint_url_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_resend_isSet = false;
    m_resend_isValid = false;

    m_resource_path_isSet = false;
    m_resource_path_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_webhook_format_isSet = false;
    m_webhook_format_isValid = false;

    m_webhook_id_isSet = false;
    m_webhook_id_isValid = false;

    m_webhook_path_isSet = false;
    m_webhook_path_isValid = false;
}

void OAIWebhookActivityEntry_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookActivityEntry_attributes::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_attempt_id_isValid = ::OpenAPI::fromJsonValue(m_attempt_id, json[QString("attemptId")]);
    m_attempt_id_isSet = !json[QString("attemptId")].isNull() && m_attempt_id_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_endpoint_url_isValid = ::OpenAPI::fromJsonValue(m_endpoint_url, json[QString("endpointUrl")]);
    m_endpoint_url_isSet = !json[QString("endpointUrl")].isNull() && m_endpoint_url_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_resend_isValid = ::OpenAPI::fromJsonValue(m_resend, json[QString("resend")]);
    m_resend_isSet = !json[QString("resend")].isNull() && m_resend_isValid;

    m_resource_path_isValid = ::OpenAPI::fromJsonValue(m_resource_path, json[QString("resourcePath")]);
    m_resource_path_isSet = !json[QString("resourcePath")].isNull() && m_resource_path_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_webhook_format_isValid = ::OpenAPI::fromJsonValue(m_webhook_format, json[QString("webhookFormat")]);
    m_webhook_format_isSet = !json[QString("webhookFormat")].isNull() && m_webhook_format_isValid;

    m_webhook_id_isValid = ::OpenAPI::fromJsonValue(m_webhook_id, json[QString("webhookId")]);
    m_webhook_id_isSet = !json[QString("webhookId")].isNull() && m_webhook_id_isValid;

    m_webhook_path_isValid = ::OpenAPI::fromJsonValue(m_webhook_path, json[QString("webhookPath")]);
    m_webhook_path_isSet = !json[QString("webhookPath")].isNull() && m_webhook_path_isValid;
}

QString OAIWebhookActivityEntry_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookActivityEntry_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_attempt_id_isSet) {
        obj.insert(QString("attemptId"), ::OpenAPI::toJsonValue(m_attempt_id));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_endpoint_url_isSet) {
        obj.insert(QString("endpointUrl"), ::OpenAPI::toJsonValue(m_endpoint_url));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_resend_isSet) {
        obj.insert(QString("resend"), ::OpenAPI::toJsonValue(m_resend));
    }
    if (m_resource_path_isSet) {
        obj.insert(QString("resourcePath"), ::OpenAPI::toJsonValue(m_resource_path));
    }
    if (m_response_isSet) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_webhook_format_isSet) {
        obj.insert(QString("webhookFormat"), ::OpenAPI::toJsonValue(m_webhook_format));
    }
    if (m_webhook_id_isSet) {
        obj.insert(QString("webhookId"), ::OpenAPI::toJsonValue(m_webhook_id));
    }
    if (m_webhook_path_isSet) {
        obj.insert(QString("webhookPath"), ::OpenAPI::toJsonValue(m_webhook_path));
    }
    return obj;
}

QString OAIWebhookActivityEntry_attributes::getAccountId() const {
    return m_account_id;
}
void OAIWebhookActivityEntry_attributes::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIWebhookActivityEntry_attributes::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIWebhookActivityEntry_attributes::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIWebhookActivityEntry_attributes::getAttemptId() const {
    return m_attempt_id;
}
void OAIWebhookActivityEntry_attributes::setAttemptId(const QString &attempt_id) {
    m_attempt_id = attempt_id;
    m_attempt_id_isSet = true;
}

bool OAIWebhookActivityEntry_attributes::is_attempt_id_Set() const{
    return m_attempt_id_isSet;
}

bool OAIWebhookActivityEntry_attributes::is_attempt_id_Valid() const{
    return m_attempt_id_isValid;
}

QString OAIWebhookActivityEntry_attributes::getCreated() const {
    return m_created;
}
void OAIWebhookActivityEntry_attributes::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWebhookActivityEntry_attributes::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWebhookActivityEntry_attributes::is_created_Valid() const{
    return m_created_isValid;
}

OAIWebhookV1Details OAIWebhookActivityEntry_attributes::getDetails() const {
    return m_details;
}
void OAIWebhookActivityEntry_attributes::setDetails(const OAIWebhookV1Details &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIWebhookActivityEntry_attributes::is_details_Set() const{
    return m_details_isSet;
}

bool OAIWebhookActivityEntry_attributes::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIWebhookActivityEntry_attributes::getEndpointUrl() const {
    return m_endpoint_url;
}
void OAIWebhookActivityEntry_attributes::setEndpointUrl(const QString &endpoint_url) {
    m_endpoint_url = endpoint_url;
    m_endpoint_url_isSet = true;
}

bool OAIWebhookActivityEntry_attributes::is_endpoint_url_Set() const{
    return m_endpoint_url_isSet;
}

bool OAIWebhookActivityEntry_attributes::is_endpoint_url_Valid() const{
    return m_endpoint_url_isValid;
}

QString OAIWebhookActivityEntry_attributes::getEvent() const {
    return m_event;
}
void OAIWebhookActivityEntry_attributes::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIWebhookActivityEntry_attributes::is_event_Set() const{
    return m_event_isSet;
}

bool OAIWebhookActivityEntry_attributes::is_event_Valid() const{
    return m_event_isValid;
}

QString OAIWebhookActivityEntry_attributes::getIpAddress() const {
    return m_ip_address;
}
void OAIWebhookActivityEntry_attributes::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIWebhookActivityEntry_attributes::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIWebhookActivityEntry_attributes::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

bool OAIWebhookActivityEntry_attributes::isResend() const {
    return m_resend;
}
void OAIWebhookActivityEntry_attributes::setResend(const bool &resend) {
    m_resend = resend;
    m_resend_isSet = true;
}

bool OAIWebhookActivityEntry_attributes::is_resend_Set() const{
    return m_resend_isSet;
}

bool OAIWebhookActivityEntry_attributes::is_resend_Valid() const{
    return m_resend_isValid;
}

QString OAIWebhookActivityEntry_attributes::getResourcePath() const {
    return m_resource_path;
}
void OAIWebhookActivityEntry_attributes::setResourcePath(const QString &resource_path) {
    m_resource_path = resource_path;
    m_resource_path_isSet = true;
}

bool OAIWebhookActivityEntry_attributes::is_resource_path_Set() const{
    return m_resource_path_isSet;
}

bool OAIWebhookActivityEntry_attributes::is_resource_path_Valid() const{
    return m_resource_path_isValid;
}

QString OAIWebhookActivityEntry_attributes::getResponse() const {
    return m_response;
}
void OAIWebhookActivityEntry_attributes::setResponse(const QString &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIWebhookActivityEntry_attributes::is_response_Set() const{
    return m_response_isSet;
}

bool OAIWebhookActivityEntry_attributes::is_response_Valid() const{
    return m_response_isValid;
}

qint32 OAIWebhookActivityEntry_attributes::getStatus() const {
    return m_status;
}
void OAIWebhookActivityEntry_attributes::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWebhookActivityEntry_attributes::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWebhookActivityEntry_attributes::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIWebhookActivityEntry_attributes::getUsername() const {
    return m_username;
}
void OAIWebhookActivityEntry_attributes::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIWebhookActivityEntry_attributes::is_username_Set() const{
    return m_username_isSet;
}

bool OAIWebhookActivityEntry_attributes::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIWebhookActivityEntry_attributes::getWebhookFormat() const {
    return m_webhook_format;
}
void OAIWebhookActivityEntry_attributes::setWebhookFormat(const QString &webhook_format) {
    m_webhook_format = webhook_format;
    m_webhook_format_isSet = true;
}

bool OAIWebhookActivityEntry_attributes::is_webhook_format_Set() const{
    return m_webhook_format_isSet;
}

bool OAIWebhookActivityEntry_attributes::is_webhook_format_Valid() const{
    return m_webhook_format_isValid;
}

qint32 OAIWebhookActivityEntry_attributes::getWebhookId() const {
    return m_webhook_id;
}
void OAIWebhookActivityEntry_attributes::setWebhookId(const qint32 &webhook_id) {
    m_webhook_id = webhook_id;
    m_webhook_id_isSet = true;
}

bool OAIWebhookActivityEntry_attributes::is_webhook_id_Set() const{
    return m_webhook_id_isSet;
}

bool OAIWebhookActivityEntry_attributes::is_webhook_id_Valid() const{
    return m_webhook_id_isValid;
}

QString OAIWebhookActivityEntry_attributes::getWebhookPath() const {
    return m_webhook_path;
}
void OAIWebhookActivityEntry_attributes::setWebhookPath(const QString &webhook_path) {
    m_webhook_path = webhook_path;
    m_webhook_path_isSet = true;
}

bool OAIWebhookActivityEntry_attributes::is_webhook_path_Set() const{
    return m_webhook_path_isSet;
}

bool OAIWebhookActivityEntry_attributes::is_webhook_path_Valid() const{
    return m_webhook_path_isValid;
}

bool OAIWebhookActivityEntry_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attempt_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookActivityEntry_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
