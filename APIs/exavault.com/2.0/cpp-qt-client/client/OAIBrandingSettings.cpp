/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrandingSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrandingSettings::OAIBrandingSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrandingSettings::OAIBrandingSettings() {
    this->initializeModel();
}

OAIBrandingSettings::~OAIBrandingSettings() {}

void OAIBrandingSettings::initializeModel() {

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_custom_email_isSet = false;
    m_custom_email_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_logo_ext_isSet = false;
    m_logo_ext_isValid = false;

    m_theme_isSet = false;
    m_theme_isValid = false;

    m_verified_domain_isSet = false;
    m_verified_domain_isValid = false;

    m_verified_domain_id_isSet = false;
    m_verified_domain_id_isValid = false;

    m_verified_domain_valid_isSet = false;
    m_verified_domain_valid_isValid = false;
}

void OAIBrandingSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrandingSettings::fromJsonObject(QJsonObject json) {

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_custom_email_isValid = ::OpenAPI::fromJsonValue(m_custom_email, json[QString("customEmail")]);
    m_custom_email_isSet = !json[QString("customEmail")].isNull() && m_custom_email_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_logo_ext_isValid = ::OpenAPI::fromJsonValue(m_logo_ext, json[QString("logoExt")]);
    m_logo_ext_isSet = !json[QString("logoExt")].isNull() && m_logo_ext_isValid;

    m_theme_isValid = ::OpenAPI::fromJsonValue(m_theme, json[QString("theme")]);
    m_theme_isSet = !json[QString("theme")].isNull() && m_theme_isValid;

    m_verified_domain_isValid = ::OpenAPI::fromJsonValue(m_verified_domain, json[QString("verifiedDomain")]);
    m_verified_domain_isSet = !json[QString("verifiedDomain")].isNull() && m_verified_domain_isValid;

    m_verified_domain_id_isValid = ::OpenAPI::fromJsonValue(m_verified_domain_id, json[QString("verifiedDomainId")]);
    m_verified_domain_id_isSet = !json[QString("verifiedDomainId")].isNull() && m_verified_domain_id_isValid;

    m_verified_domain_valid_isValid = ::OpenAPI::fromJsonValue(m_verified_domain_valid, json[QString("verifiedDomainValid")]);
    m_verified_domain_valid_isSet = !json[QString("verifiedDomainValid")].isNull() && m_verified_domain_valid_isValid;
}

QString OAIBrandingSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrandingSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_custom_email_isSet) {
        obj.insert(QString("customEmail"), ::OpenAPI::toJsonValue(m_custom_email));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_logo_ext_isSet) {
        obj.insert(QString("logoExt"), ::OpenAPI::toJsonValue(m_logo_ext));
    }
    if (m_theme_isSet) {
        obj.insert(QString("theme"), ::OpenAPI::toJsonValue(m_theme));
    }
    if (m_verified_domain_isSet) {
        obj.insert(QString("verifiedDomain"), ::OpenAPI::toJsonValue(m_verified_domain));
    }
    if (m_verified_domain_id_isSet) {
        obj.insert(QString("verifiedDomainId"), ::OpenAPI::toJsonValue(m_verified_domain_id));
    }
    if (m_verified_domain_valid_isSet) {
        obj.insert(QString("verifiedDomainValid"), ::OpenAPI::toJsonValue(m_verified_domain_valid));
    }
    return obj;
}

QString OAIBrandingSettings::getCompanyName() const {
    return m_company_name;
}
void OAIBrandingSettings::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAIBrandingSettings::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIBrandingSettings::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAIBrandingSettings::getCustomEmail() const {
    return m_custom_email;
}
void OAIBrandingSettings::setCustomEmail(const QString &custom_email) {
    m_custom_email = custom_email;
    m_custom_email_isSet = true;
}

bool OAIBrandingSettings::is_custom_email_Set() const{
    return m_custom_email_isSet;
}

bool OAIBrandingSettings::is_custom_email_Valid() const{
    return m_custom_email_isValid;
}

QString OAIBrandingSettings::getLogo() const {
    return m_logo;
}
void OAIBrandingSettings::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIBrandingSettings::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIBrandingSettings::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIBrandingSettings::getLogoExt() const {
    return m_logo_ext;
}
void OAIBrandingSettings::setLogoExt(const QString &logo_ext) {
    m_logo_ext = logo_ext;
    m_logo_ext_isSet = true;
}

bool OAIBrandingSettings::is_logo_ext_Set() const{
    return m_logo_ext_isSet;
}

bool OAIBrandingSettings::is_logo_ext_Valid() const{
    return m_logo_ext_isValid;
}

QString OAIBrandingSettings::getTheme() const {
    return m_theme;
}
void OAIBrandingSettings::setTheme(const QString &theme) {
    m_theme = theme;
    m_theme_isSet = true;
}

bool OAIBrandingSettings::is_theme_Set() const{
    return m_theme_isSet;
}

bool OAIBrandingSettings::is_theme_Valid() const{
    return m_theme_isValid;
}

QString OAIBrandingSettings::getVerifiedDomain() const {
    return m_verified_domain;
}
void OAIBrandingSettings::setVerifiedDomain(const QString &verified_domain) {
    m_verified_domain = verified_domain;
    m_verified_domain_isSet = true;
}

bool OAIBrandingSettings::is_verified_domain_Set() const{
    return m_verified_domain_isSet;
}

bool OAIBrandingSettings::is_verified_domain_Valid() const{
    return m_verified_domain_isValid;
}

QString OAIBrandingSettings::getVerifiedDomainId() const {
    return m_verified_domain_id;
}
void OAIBrandingSettings::setVerifiedDomainId(const QString &verified_domain_id) {
    m_verified_domain_id = verified_domain_id;
    m_verified_domain_id_isSet = true;
}

bool OAIBrandingSettings::is_verified_domain_id_Set() const{
    return m_verified_domain_id_isSet;
}

bool OAIBrandingSettings::is_verified_domain_id_Valid() const{
    return m_verified_domain_id_isValid;
}

bool OAIBrandingSettings::isVerifiedDomainValid() const {
    return m_verified_domain_valid;
}
void OAIBrandingSettings::setVerifiedDomainValid(const bool &verified_domain_valid) {
    m_verified_domain_valid = verified_domain_valid;
    m_verified_domain_valid_isSet = true;
}

bool OAIBrandingSettings::is_verified_domain_valid_Set() const{
    return m_verified_domain_valid_isSet;
}

bool OAIBrandingSettings::is_verified_domain_valid_Valid() const{
    return m_verified_domain_valid_isValid;
}

bool OAIBrandingSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_ext_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_domain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_domain_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrandingSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
