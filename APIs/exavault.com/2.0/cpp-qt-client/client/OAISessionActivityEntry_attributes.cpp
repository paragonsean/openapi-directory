/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionActivityEntry_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionActivityEntry_attributes::OAISessionActivityEntry_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionActivityEntry_attributes::OAISessionActivityEntry_attributes() {
    this->initializeModel();
}

OAISessionActivityEntry_attributes::~OAISessionActivityEntry_attributes() {}

void OAISessionActivityEntry_attributes::initializeModel() {

    m_bytes_transferred_isSet = false;
    m_bytes_transferred_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_file_source_isSet = false;
    m_file_source_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAISessionActivityEntry_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISessionActivityEntry_attributes::fromJsonObject(QJsonObject json) {

    m_bytes_transferred_isValid = ::OpenAPI::fromJsonValue(m_bytes_transferred, json[QString("bytesTransferred")]);
    m_bytes_transferred_isSet = !json[QString("bytesTransferred")].isNull() && m_bytes_transferred_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_file_source_isValid = ::OpenAPI::fromJsonValue(m_file_source, json[QString("fileSource")]);
    m_file_source_isSet = !json[QString("fileSource")].isNull() && m_file_source_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAISessionActivityEntry_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISessionActivityEntry_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_bytes_transferred_isSet) {
        obj.insert(QString("bytesTransferred"), ::OpenAPI::toJsonValue(m_bytes_transferred));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_file_source_isSet) {
        obj.insert(QString("fileSource"), ::OpenAPI::toJsonValue(m_file_source));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

qint64 OAISessionActivityEntry_attributes::getBytesTransferred() const {
    return m_bytes_transferred;
}
void OAISessionActivityEntry_attributes::setBytesTransferred(const qint64 &bytes_transferred) {
    m_bytes_transferred = bytes_transferred;
    m_bytes_transferred_isSet = true;
}

bool OAISessionActivityEntry_attributes::is_bytes_transferred_Set() const{
    return m_bytes_transferred_isSet;
}

bool OAISessionActivityEntry_attributes::is_bytes_transferred_Valid() const{
    return m_bytes_transferred_isValid;
}

QString OAISessionActivityEntry_attributes::getCreated() const {
    return m_created;
}
void OAISessionActivityEntry_attributes::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAISessionActivityEntry_attributes::is_created_Set() const{
    return m_created_isSet;
}

bool OAISessionActivityEntry_attributes::is_created_Valid() const{
    return m_created_isValid;
}

qint32 OAISessionActivityEntry_attributes::getDuration() const {
    return m_duration;
}
void OAISessionActivityEntry_attributes::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAISessionActivityEntry_attributes::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAISessionActivityEntry_attributes::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAISessionActivityEntry_attributes::getFileName() const {
    return m_file_name;
}
void OAISessionActivityEntry_attributes::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAISessionActivityEntry_attributes::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAISessionActivityEntry_attributes::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAISessionActivityEntry_attributes::getFileSource() const {
    return m_file_source;
}
void OAISessionActivityEntry_attributes::setFileSource(const QString &file_source) {
    m_file_source = file_source;
    m_file_source_isSet = true;
}

bool OAISessionActivityEntry_attributes::is_file_source_Set() const{
    return m_file_source_isSet;
}

bool OAISessionActivityEntry_attributes::is_file_source_Valid() const{
    return m_file_source_isValid;
}

QString OAISessionActivityEntry_attributes::getIpAddress() const {
    return m_ip_address;
}
void OAISessionActivityEntry_attributes::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAISessionActivityEntry_attributes::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAISessionActivityEntry_attributes::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAISessionActivityEntry_attributes::getOperation() const {
    return m_operation;
}
void OAISessionActivityEntry_attributes::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAISessionActivityEntry_attributes::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAISessionActivityEntry_attributes::is_operation_Valid() const{
    return m_operation_isValid;
}

QString OAISessionActivityEntry_attributes::getProtocol() const {
    return m_protocol;
}
void OAISessionActivityEntry_attributes::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAISessionActivityEntry_attributes::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAISessionActivityEntry_attributes::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAISessionActivityEntry_attributes::getSessionId() const {
    return m_session_id;
}
void OAISessionActivityEntry_attributes::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAISessionActivityEntry_attributes::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAISessionActivityEntry_attributes::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAISessionActivityEntry_attributes::getStatus() const {
    return m_status;
}
void OAISessionActivityEntry_attributes::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISessionActivityEntry_attributes::is_status_Set() const{
    return m_status_isSet;
}

bool OAISessionActivityEntry_attributes::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISessionActivityEntry_attributes::getUsername() const {
    return m_username;
}
void OAISessionActivityEntry_attributes::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAISessionActivityEntry_attributes::is_username_Set() const{
    return m_username_isSet;
}

bool OAISessionActivityEntry_attributes::is_username_Valid() const{
    return m_username_isValid;
}

bool OAISessionActivityEntry_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bytes_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISessionActivityEntry_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
