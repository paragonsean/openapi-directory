/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookV1Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookV1Details::OAIWebhookV1Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookV1Details::OAIWebhookV1Details() {
    this->initializeModel();
}

OAIWebhookV1Details::~OAIWebhookV1Details() {}

void OAIWebhookV1Details::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_attempt_isSet = false;
    m_attempt_isValid = false;

    m_attempt_id_isSet = false;
    m_attempt_id_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIWebhookV1Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookV1Details::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_attempt_isValid = ::OpenAPI::fromJsonValue(m_attempt, json[QString("attempt")]);
    m_attempt_isSet = !json[QString("attempt")].isNull() && m_attempt_isValid;

    m_attempt_id_isValid = ::OpenAPI::fromJsonValue(m_attempt_id, json[QString("attemptId")]);
    m_attempt_id_isSet = !json[QString("attemptId")].isNull() && m_attempt_id_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIWebhookV1Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookV1Details::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_attempt_isSet) {
        obj.insert(QString("attempt"), ::OpenAPI::toJsonValue(m_attempt));
    }
    if (m_attempt_id_isSet) {
        obj.insert(QString("attemptId"), ::OpenAPI::toJsonValue(m_attempt_id));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIWebhookV1Details::getAccountName() const {
    return m_account_name;
}
void OAIWebhookV1Details::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIWebhookV1Details::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIWebhookV1Details::is_account_name_Valid() const{
    return m_account_name_isValid;
}

qint32 OAIWebhookV1Details::getAttempt() const {
    return m_attempt;
}
void OAIWebhookV1Details::setAttempt(const qint32 &attempt) {
    m_attempt = attempt;
    m_attempt_isSet = true;
}

bool OAIWebhookV1Details::is_attempt_Set() const{
    return m_attempt_isSet;
}

bool OAIWebhookV1Details::is_attempt_Valid() const{
    return m_attempt_isValid;
}

QString OAIWebhookV1Details::getAttemptId() const {
    return m_attempt_id;
}
void OAIWebhookV1Details::setAttemptId(const QString &attempt_id) {
    m_attempt_id = attempt_id;
    m_attempt_id_isSet = true;
}

bool OAIWebhookV1Details::is_attempt_id_Set() const{
    return m_attempt_id_isSet;
}

bool OAIWebhookV1Details::is_attempt_id_Valid() const{
    return m_attempt_id_isValid;
}

QString OAIWebhookV1Details::getEvent() const {
    return m_event;
}
void OAIWebhookV1Details::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIWebhookV1Details::is_event_Set() const{
    return m_event_isSet;
}

bool OAIWebhookV1Details::is_event_Valid() const{
    return m_event_isValid;
}

QString OAIWebhookV1Details::getProtocol() const {
    return m_protocol;
}
void OAIWebhookV1Details::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIWebhookV1Details::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIWebhookV1Details::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIWebhookV1Details::getUsername() const {
    return m_username;
}
void OAIWebhookV1Details::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIWebhookV1Details::is_username_Set() const{
    return m_username_isSet;
}

bool OAIWebhookV1Details::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIWebhookV1Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attempt_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookV1Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
