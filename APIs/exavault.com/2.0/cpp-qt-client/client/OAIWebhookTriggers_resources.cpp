/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookTriggers_resources.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookTriggers_resources::OAIWebhookTriggers_resources(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookTriggers_resources::OAIWebhookTriggers_resources() {
    this->initializeModel();
}

OAIWebhookTriggers_resources::~OAIWebhookTriggers_resources() {}

void OAIWebhookTriggers_resources::initializeModel() {

    m_compress_isSet = false;
    m_compress_isValid = false;

    m_copy_isSet = false;
    m_copy_isValid = false;

    m_create_folder_isSet = false;
    m_create_folder_isValid = false;

    m_r_delete_isSet = false;
    m_r_delete_isValid = false;

    m_download_isSet = false;
    m_download_isValid = false;

    m_extract_isSet = false;
    m_extract_isValid = false;

    m_move_isSet = false;
    m_move_isValid = false;

    m_rename_isSet = false;
    m_rename_isValid = false;

    m_upload_isSet = false;
    m_upload_isValid = false;
}

void OAIWebhookTriggers_resources::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookTriggers_resources::fromJsonObject(QJsonObject json) {

    m_compress_isValid = ::OpenAPI::fromJsonValue(m_compress, json[QString("compress")]);
    m_compress_isSet = !json[QString("compress")].isNull() && m_compress_isValid;

    m_copy_isValid = ::OpenAPI::fromJsonValue(m_copy, json[QString("copy")]);
    m_copy_isSet = !json[QString("copy")].isNull() && m_copy_isValid;

    m_create_folder_isValid = ::OpenAPI::fromJsonValue(m_create_folder, json[QString("createFolder")]);
    m_create_folder_isSet = !json[QString("createFolder")].isNull() && m_create_folder_isValid;

    m_r_delete_isValid = ::OpenAPI::fromJsonValue(m_r_delete, json[QString("delete")]);
    m_r_delete_isSet = !json[QString("delete")].isNull() && m_r_delete_isValid;

    m_download_isValid = ::OpenAPI::fromJsonValue(m_download, json[QString("download")]);
    m_download_isSet = !json[QString("download")].isNull() && m_download_isValid;

    m_extract_isValid = ::OpenAPI::fromJsonValue(m_extract, json[QString("extract")]);
    m_extract_isSet = !json[QString("extract")].isNull() && m_extract_isValid;

    m_move_isValid = ::OpenAPI::fromJsonValue(m_move, json[QString("move")]);
    m_move_isSet = !json[QString("move")].isNull() && m_move_isValid;

    m_rename_isValid = ::OpenAPI::fromJsonValue(m_rename, json[QString("rename")]);
    m_rename_isSet = !json[QString("rename")].isNull() && m_rename_isValid;

    m_upload_isValid = ::OpenAPI::fromJsonValue(m_upload, json[QString("upload")]);
    m_upload_isSet = !json[QString("upload")].isNull() && m_upload_isValid;
}

QString OAIWebhookTriggers_resources::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookTriggers_resources::asJsonObject() const {
    QJsonObject obj;
    if (m_compress_isSet) {
        obj.insert(QString("compress"), ::OpenAPI::toJsonValue(m_compress));
    }
    if (m_copy_isSet) {
        obj.insert(QString("copy"), ::OpenAPI::toJsonValue(m_copy));
    }
    if (m_create_folder_isSet) {
        obj.insert(QString("createFolder"), ::OpenAPI::toJsonValue(m_create_folder));
    }
    if (m_r_delete_isSet) {
        obj.insert(QString("delete"), ::OpenAPI::toJsonValue(m_r_delete));
    }
    if (m_download_isSet) {
        obj.insert(QString("download"), ::OpenAPI::toJsonValue(m_download));
    }
    if (m_extract_isSet) {
        obj.insert(QString("extract"), ::OpenAPI::toJsonValue(m_extract));
    }
    if (m_move_isSet) {
        obj.insert(QString("move"), ::OpenAPI::toJsonValue(m_move));
    }
    if (m_rename_isSet) {
        obj.insert(QString("rename"), ::OpenAPI::toJsonValue(m_rename));
    }
    if (m_upload_isSet) {
        obj.insert(QString("upload"), ::OpenAPI::toJsonValue(m_upload));
    }
    return obj;
}

bool OAIWebhookTriggers_resources::isCompress() const {
    return m_compress;
}
void OAIWebhookTriggers_resources::setCompress(const bool &compress) {
    m_compress = compress;
    m_compress_isSet = true;
}

bool OAIWebhookTriggers_resources::is_compress_Set() const{
    return m_compress_isSet;
}

bool OAIWebhookTriggers_resources::is_compress_Valid() const{
    return m_compress_isValid;
}

bool OAIWebhookTriggers_resources::isCopy() const {
    return m_copy;
}
void OAIWebhookTriggers_resources::setCopy(const bool &copy) {
    m_copy = copy;
    m_copy_isSet = true;
}

bool OAIWebhookTriggers_resources::is_copy_Set() const{
    return m_copy_isSet;
}

bool OAIWebhookTriggers_resources::is_copy_Valid() const{
    return m_copy_isValid;
}

bool OAIWebhookTriggers_resources::isCreateFolder() const {
    return m_create_folder;
}
void OAIWebhookTriggers_resources::setCreateFolder(const bool &create_folder) {
    m_create_folder = create_folder;
    m_create_folder_isSet = true;
}

bool OAIWebhookTriggers_resources::is_create_folder_Set() const{
    return m_create_folder_isSet;
}

bool OAIWebhookTriggers_resources::is_create_folder_Valid() const{
    return m_create_folder_isValid;
}

bool OAIWebhookTriggers_resources::isRDelete() const {
    return m_r_delete;
}
void OAIWebhookTriggers_resources::setRDelete(const bool &r_delete) {
    m_r_delete = r_delete;
    m_r_delete_isSet = true;
}

bool OAIWebhookTriggers_resources::is_r_delete_Set() const{
    return m_r_delete_isSet;
}

bool OAIWebhookTriggers_resources::is_r_delete_Valid() const{
    return m_r_delete_isValid;
}

bool OAIWebhookTriggers_resources::isDownload() const {
    return m_download;
}
void OAIWebhookTriggers_resources::setDownload(const bool &download) {
    m_download = download;
    m_download_isSet = true;
}

bool OAIWebhookTriggers_resources::is_download_Set() const{
    return m_download_isSet;
}

bool OAIWebhookTriggers_resources::is_download_Valid() const{
    return m_download_isValid;
}

bool OAIWebhookTriggers_resources::isExtract() const {
    return m_extract;
}
void OAIWebhookTriggers_resources::setExtract(const bool &extract) {
    m_extract = extract;
    m_extract_isSet = true;
}

bool OAIWebhookTriggers_resources::is_extract_Set() const{
    return m_extract_isSet;
}

bool OAIWebhookTriggers_resources::is_extract_Valid() const{
    return m_extract_isValid;
}

bool OAIWebhookTriggers_resources::isMove() const {
    return m_move;
}
void OAIWebhookTriggers_resources::setMove(const bool &move) {
    m_move = move;
    m_move_isSet = true;
}

bool OAIWebhookTriggers_resources::is_move_Set() const{
    return m_move_isSet;
}

bool OAIWebhookTriggers_resources::is_move_Valid() const{
    return m_move_isValid;
}

bool OAIWebhookTriggers_resources::isRename() const {
    return m_rename;
}
void OAIWebhookTriggers_resources::setRename(const bool &rename) {
    m_rename = rename;
    m_rename_isSet = true;
}

bool OAIWebhookTriggers_resources::is_rename_Set() const{
    return m_rename_isSet;
}

bool OAIWebhookTriggers_resources::is_rename_Valid() const{
    return m_rename_isValid;
}

bool OAIWebhookTriggers_resources::isUpload() const {
    return m_upload;
}
void OAIWebhookTriggers_resources::setUpload(const bool &upload) {
    m_upload = upload;
    m_upload_isSet = true;
}

bool OAIWebhookTriggers_resources::is_upload_Set() const{
    return m_upload_isSet;
}

bool OAIWebhookTriggers_resources::is_upload_Valid() const{
    return m_upload_isValid;
}

bool OAIWebhookTriggers_resources::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extract_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_move_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookTriggers_resources::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
