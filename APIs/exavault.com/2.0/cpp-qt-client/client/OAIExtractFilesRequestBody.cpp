/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtractFilesRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtractFilesRequestBody::OAIExtractFilesRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtractFilesRequestBody::OAIExtractFilesRequestBody() {
    this->initializeModel();
}

OAIExtractFilesRequestBody::~OAIExtractFilesRequestBody() {}

void OAIExtractFilesRequestBody::initializeModel() {

    m_parent_resource_isSet = false;
    m_parent_resource_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;
}

void OAIExtractFilesRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtractFilesRequestBody::fromJsonObject(QJsonObject json) {

    m_parent_resource_isValid = ::OpenAPI::fromJsonValue(m_parent_resource, json[QString("parentResource")]);
    m_parent_resource_isSet = !json[QString("parentResource")].isNull() && m_parent_resource_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;
}

QString OAIExtractFilesRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtractFilesRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_parent_resource_isSet) {
        obj.insert(QString("parentResource"), ::OpenAPI::toJsonValue(m_parent_resource));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    return obj;
}

QString OAIExtractFilesRequestBody::getParentResource() const {
    return m_parent_resource;
}
void OAIExtractFilesRequestBody::setParentResource(const QString &parent_resource) {
    m_parent_resource = parent_resource;
    m_parent_resource_isSet = true;
}

bool OAIExtractFilesRequestBody::is_parent_resource_Set() const{
    return m_parent_resource_isSet;
}

bool OAIExtractFilesRequestBody::is_parent_resource_Valid() const{
    return m_parent_resource_isValid;
}

QString OAIExtractFilesRequestBody::getResource() const {
    return m_resource;
}
void OAIExtractFilesRequestBody::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIExtractFilesRequestBody::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIExtractFilesRequestBody::is_resource_Valid() const{
    return m_resource_isValid;
}

bool OAIExtractFilesRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parent_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtractFilesRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parent_resource_isValid && m_resource_isValid && true;
}

} // namespace OpenAPI
