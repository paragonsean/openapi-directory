/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceCollectionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceCollectionResponse::OAIResourceCollectionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceCollectionResponse::OAIResourceCollectionResponse() {
    this->initializeModel();
}

OAIResourceCollectionResponse::~OAIResourceCollectionResponse() {}

void OAIResourceCollectionResponse::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_included_isSet = false;
    m_included_isValid = false;

    m_response_status_isSet = false;
    m_response_status_isValid = false;

    m_returned_results_isSet = false;
    m_returned_results_isValid = false;

    m_total_results_isSet = false;
    m_total_results_isValid = false;
}

void OAIResourceCollectionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceCollectionResponse::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_included_isValid = ::OpenAPI::fromJsonValue(m_included, json[QString("included")]);
    m_included_isSet = !json[QString("included")].isNull() && m_included_isValid;

    m_response_status_isValid = ::OpenAPI::fromJsonValue(m_response_status, json[QString("responseStatus")]);
    m_response_status_isSet = !json[QString("responseStatus")].isNull() && m_response_status_isValid;

    m_returned_results_isValid = ::OpenAPI::fromJsonValue(m_returned_results, json[QString("returnedResults")]);
    m_returned_results_isSet = !json[QString("returnedResults")].isNull() && m_returned_results_isValid;

    m_total_results_isValid = ::OpenAPI::fromJsonValue(m_total_results, json[QString("totalResults")]);
    m_total_results_isSet = !json[QString("totalResults")].isNull() && m_total_results_isValid;
}

QString OAIResourceCollectionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceCollectionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_included.size() > 0) {
        obj.insert(QString("included"), ::OpenAPI::toJsonValue(m_included));
    }
    if (m_response_status_isSet) {
        obj.insert(QString("responseStatus"), ::OpenAPI::toJsonValue(m_response_status));
    }
    if (m_returned_results_isSet) {
        obj.insert(QString("returnedResults"), ::OpenAPI::toJsonValue(m_returned_results));
    }
    if (m_total_results_isSet) {
        obj.insert(QString("totalResults"), ::OpenAPI::toJsonValue(m_total_results));
    }
    return obj;
}

QList<OAIResource> OAIResourceCollectionResponse::getData() const {
    return m_data;
}
void OAIResourceCollectionResponse::setData(const QList<OAIResource> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIResourceCollectionResponse::is_data_Set() const{
    return m_data_isSet;
}

bool OAIResourceCollectionResponse::is_data_Valid() const{
    return m_data_isValid;
}

QList<OAIResourceCollectionResponse_included_inner> OAIResourceCollectionResponse::getIncluded() const {
    return m_included;
}
void OAIResourceCollectionResponse::setIncluded(const QList<OAIResourceCollectionResponse_included_inner> &included) {
    m_included = included;
    m_included_isSet = true;
}

bool OAIResourceCollectionResponse::is_included_Set() const{
    return m_included_isSet;
}

bool OAIResourceCollectionResponse::is_included_Valid() const{
    return m_included_isValid;
}

qint32 OAIResourceCollectionResponse::getResponseStatus() const {
    return m_response_status;
}
void OAIResourceCollectionResponse::setResponseStatus(const qint32 &response_status) {
    m_response_status = response_status;
    m_response_status_isSet = true;
}

bool OAIResourceCollectionResponse::is_response_status_Set() const{
    return m_response_status_isSet;
}

bool OAIResourceCollectionResponse::is_response_status_Valid() const{
    return m_response_status_isValid;
}

qint32 OAIResourceCollectionResponse::getReturnedResults() const {
    return m_returned_results;
}
void OAIResourceCollectionResponse::setReturnedResults(const qint32 &returned_results) {
    m_returned_results = returned_results;
    m_returned_results_isSet = true;
}

bool OAIResourceCollectionResponse::is_returned_results_Set() const{
    return m_returned_results_isSet;
}

bool OAIResourceCollectionResponse::is_returned_results_Valid() const{
    return m_returned_results_isValid;
}

qint32 OAIResourceCollectionResponse::getTotalResults() const {
    return m_total_results;
}
void OAIResourceCollectionResponse::setTotalResults(const qint32 &total_results) {
    m_total_results = total_results;
    m_total_results_isSet = true;
}

bool OAIResourceCollectionResponse::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAIResourceCollectionResponse::is_total_results_Valid() const{
    return m_total_results_isValid;
}

bool OAIResourceCollectionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_returned_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceCollectionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
