/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddEmailListRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddEmailListRequestBody::OAIAddEmailListRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddEmailListRequestBody::OAIAddEmailListRequestBody() {
    this->initializeModel();
}

OAIAddEmailListRequestBody::~OAIAddEmailListRequestBody() {}

void OAIAddEmailListRequestBody::initializeModel() {

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIAddEmailListRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddEmailListRequestBody::fromJsonObject(QJsonObject json) {

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIAddEmailListRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddEmailListRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<QString> OAIAddEmailListRequestBody::getEmails() const {
    return m_emails;
}
void OAIAddEmailListRequestBody::setEmails(const QList<QString> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIAddEmailListRequestBody::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIAddEmailListRequestBody::is_emails_Valid() const{
    return m_emails_isValid;
}

QString OAIAddEmailListRequestBody::getName() const {
    return m_name;
}
void OAIAddEmailListRequestBody::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAddEmailListRequestBody::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAddEmailListRequestBody::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAddEmailListRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddEmailListRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_emails_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
