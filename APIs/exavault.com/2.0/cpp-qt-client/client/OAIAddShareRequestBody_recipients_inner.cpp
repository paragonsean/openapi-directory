/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddShareRequestBody_recipients_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddShareRequestBody_recipients_inner::OAIAddShareRequestBody_recipients_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddShareRequestBody_recipients_inner::OAIAddShareRequestBody_recipients_inner() {
    this->initializeModel();
}

OAIAddShareRequestBody_recipients_inner::~OAIAddShareRequestBody_recipients_inner() {}

void OAIAddShareRequestBody_recipients_inner::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAddShareRequestBody_recipients_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddShareRequestBody_recipients_inner::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAddShareRequestBody_recipients_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddShareRequestBody_recipients_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAddShareRequestBody_recipients_inner::getEmail() const {
    return m_email;
}
void OAIAddShareRequestBody_recipients_inner::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAddShareRequestBody_recipients_inner::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAddShareRequestBody_recipients_inner::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAddShareRequestBody_recipients_inner::getType() const {
    return m_type;
}
void OAIAddShareRequestBody_recipients_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAddShareRequestBody_recipients_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAddShareRequestBody_recipients_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAddShareRequestBody_recipients_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddShareRequestBody_recipients_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
