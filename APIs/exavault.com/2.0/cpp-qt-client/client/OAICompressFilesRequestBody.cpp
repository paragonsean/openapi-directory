/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompressFilesRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompressFilesRequestBody::OAICompressFilesRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompressFilesRequestBody::OAICompressFilesRequestBody() {
    this->initializeModel();
}

OAICompressFilesRequestBody::~OAICompressFilesRequestBody() {}

void OAICompressFilesRequestBody::initializeModel() {

    m_archive_name_isSet = false;
    m_archive_name_isValid = false;

    m_parent_resource_isSet = false;
    m_parent_resource_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;
}

void OAICompressFilesRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompressFilesRequestBody::fromJsonObject(QJsonObject json) {

    m_archive_name_isValid = ::OpenAPI::fromJsonValue(m_archive_name, json[QString("archiveName")]);
    m_archive_name_isSet = !json[QString("archiveName")].isNull() && m_archive_name_isValid;

    m_parent_resource_isValid = ::OpenAPI::fromJsonValue(m_parent_resource, json[QString("parentResource")]);
    m_parent_resource_isSet = !json[QString("parentResource")].isNull() && m_parent_resource_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;
}

QString OAICompressFilesRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompressFilesRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_name_isSet) {
        obj.insert(QString("archiveName"), ::OpenAPI::toJsonValue(m_archive_name));
    }
    if (m_parent_resource_isSet) {
        obj.insert(QString("parentResource"), ::OpenAPI::toJsonValue(m_parent_resource));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    return obj;
}

QString OAICompressFilesRequestBody::getArchiveName() const {
    return m_archive_name;
}
void OAICompressFilesRequestBody::setArchiveName(const QString &archive_name) {
    m_archive_name = archive_name;
    m_archive_name_isSet = true;
}

bool OAICompressFilesRequestBody::is_archive_name_Set() const{
    return m_archive_name_isSet;
}

bool OAICompressFilesRequestBody::is_archive_name_Valid() const{
    return m_archive_name_isValid;
}

QString OAICompressFilesRequestBody::getParentResource() const {
    return m_parent_resource;
}
void OAICompressFilesRequestBody::setParentResource(const QString &parent_resource) {
    m_parent_resource = parent_resource;
    m_parent_resource_isSet = true;
}

bool OAICompressFilesRequestBody::is_parent_resource_Set() const{
    return m_parent_resource_isSet;
}

bool OAICompressFilesRequestBody::is_parent_resource_Valid() const{
    return m_parent_resource_isValid;
}

QList<QString> OAICompressFilesRequestBody::getResources() const {
    return m_resources;
}
void OAICompressFilesRequestBody::setResources(const QList<QString> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAICompressFilesRequestBody::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAICompressFilesRequestBody::is_resources_Valid() const{
    return m_resources_isValid;
}

bool OAICompressFilesRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompressFilesRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resources_isValid && true;
}

} // namespace OpenAPI
