/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShareRelationshipsOwner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShareRelationshipsOwner::OAIShareRelationshipsOwner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShareRelationshipsOwner::OAIShareRelationshipsOwner() {
    this->initializeModel();
}

OAIShareRelationshipsOwner::~OAIShareRelationshipsOwner() {}

void OAIShareRelationshipsOwner::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;
}

void OAIShareRelationshipsOwner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShareRelationshipsOwner::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;
}

QString OAIShareRelationshipsOwner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShareRelationshipsOwner::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    return obj;
}

OAIShareRelationshipsOwner_data OAIShareRelationshipsOwner::getData() const {
    return m_data;
}
void OAIShareRelationshipsOwner::setData(const OAIShareRelationshipsOwner_data &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIShareRelationshipsOwner::is_data_Set() const{
    return m_data_isSet;
}

bool OAIShareRelationshipsOwner::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIShareRelationshipsOwner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShareRelationshipsOwner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
