/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebhooksApi_H
#define OAI_OAIWebhooksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddWebhookRequestBody.h"
#include "OAIEmptyResponse.h"
#include "OAIUpdateWebhookRequestBody.h"
#include "OAIWebhookCollectionResponse.h"
#include "OAIWebhookResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebhooksApi : public QObject {
    Q_OBJECT

public:
    OAIWebhooksApi(const int timeOut = 0);
    ~OAIWebhooksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  oai_add_webhook_request_body OAIAddWebhookRequestBody [optional]
    */
    virtual void addWebhook(const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<OAIAddWebhookRequestBody> &oai_add_webhook_request_body = ::OpenAPI::OptionalParam<OAIAddWebhookRequestBody>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    */
    virtual void deleteWebhook(const qint32 &id, const QString &ev_api_key, const QString &ev_access_token);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  include QString [optional]
    */
    virtual void getWebhookById(const qint32 &id, const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  include QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getWehooksList(const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    */
    virtual void regenerateWebhookToken(const QString &id, const QString &ev_api_key, const QString &ev_access_token);

    /**
    * @param[in]  activity_id QString [required]
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    */
    virtual void resendWebhookActivityEntry(const QString &activity_id, const QString &ev_api_key, const QString &ev_access_token);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  oai_update_webhook_request_body OAIUpdateWebhookRequestBody [optional]
    */
    virtual void updateWebhook(const qint32 &id, const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<OAIUpdateWebhookRequestBody> &oai_update_webhook_request_body = ::OpenAPI::OptionalParam<OAIUpdateWebhookRequestBody>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addWebhookCallback(OAIHttpRequestWorker *worker);
    void deleteWebhookCallback(OAIHttpRequestWorker *worker);
    void getWebhookByIdCallback(OAIHttpRequestWorker *worker);
    void getWehooksListCallback(OAIHttpRequestWorker *worker);
    void regenerateWebhookTokenCallback(OAIHttpRequestWorker *worker);
    void resendWebhookActivityEntryCallback(OAIHttpRequestWorker *worker);
    void updateWebhookCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addWebhookSignal(OAIWebhookResponse summary);
    void deleteWebhookSignal(OAIEmptyResponse summary);
    void getWebhookByIdSignal(OAIWebhookResponse summary);
    void getWehooksListSignal(OAIWebhookCollectionResponse summary);
    void regenerateWebhookTokenSignal(OAIWebhookResponse summary);
    void resendWebhookActivityEntrySignal(OAIEmptyResponse summary);
    void updateWebhookSignal(OAIWebhookResponse summary);


    void addWebhookSignalFull(OAIHttpRequestWorker *worker, OAIWebhookResponse summary);
    void deleteWebhookSignalFull(OAIHttpRequestWorker *worker, OAIEmptyResponse summary);
    void getWebhookByIdSignalFull(OAIHttpRequestWorker *worker, OAIWebhookResponse summary);
    void getWehooksListSignalFull(OAIHttpRequestWorker *worker, OAIWebhookCollectionResponse summary);
    void regenerateWebhookTokenSignalFull(OAIHttpRequestWorker *worker, OAIWebhookResponse summary);
    void resendWebhookActivityEntrySignalFull(OAIHttpRequestWorker *worker, OAIEmptyResponse summary);
    void updateWebhookSignalFull(OAIHttpRequestWorker *worker, OAIWebhookResponse summary);

    Q_DECL_DEPRECATED_X("Use addWebhookSignalError() instead")
    void addWebhookSignalE(OAIWebhookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addWebhookSignalError(OAIWebhookResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWebhookSignalError() instead")
    void deleteWebhookSignalE(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWebhookSignalError(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebhookByIdSignalError() instead")
    void getWebhookByIdSignalE(OAIWebhookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhookByIdSignalError(OAIWebhookResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWehooksListSignalError() instead")
    void getWehooksListSignalE(OAIWebhookCollectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWehooksListSignalError(OAIWebhookCollectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regenerateWebhookTokenSignalError() instead")
    void regenerateWebhookTokenSignalE(OAIWebhookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void regenerateWebhookTokenSignalError(OAIWebhookResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendWebhookActivityEntrySignalError() instead")
    void resendWebhookActivityEntrySignalE(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resendWebhookActivityEntrySignalError(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhookSignalError() instead")
    void updateWebhookSignalE(OAIWebhookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhookSignalError(OAIWebhookResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addWebhookSignalErrorFull() instead")
    void addWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWebhookSignalErrorFull() instead")
    void deleteWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebhookByIdSignalErrorFull() instead")
    void getWebhookByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebhookByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWehooksListSignalErrorFull() instead")
    void getWehooksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWehooksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regenerateWebhookTokenSignalErrorFull() instead")
    void regenerateWebhookTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void regenerateWebhookTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendWebhookActivityEntrySignalErrorFull() instead")
    void resendWebhookActivityEntrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resendWebhookActivityEntrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhookSignalErrorFull() instead")
    void updateWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
