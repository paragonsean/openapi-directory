/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormEntryField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormEntryField::OAIFormEntryField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormEntryField::OAIFormEntryField() {
    this->initializeModel();
}

OAIFormEntryField::~OAIFormEntryField() {}

void OAIFormEntryField::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIFormEntryField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormEntryField::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIFormEntryField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormEntryField::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIFormEntryField::getName() const {
    return m_name;
}
void OAIFormEntryField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFormEntryField::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFormEntryField::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIFormEntryField::getOrder() const {
    return m_order;
}
void OAIFormEntryField::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIFormEntryField::is_order_Set() const{
    return m_order_isSet;
}

bool OAIFormEntryField::is_order_Valid() const{
    return m_order_isValid;
}

QString OAIFormEntryField::getValue() const {
    return m_value;
}
void OAIFormEntryField::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIFormEntryField::is_value_Set() const{
    return m_value_isSet;
}

bool OAIFormEntryField::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIFormEntryField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormEntryField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
