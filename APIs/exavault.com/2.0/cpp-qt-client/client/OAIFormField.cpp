/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormField::OAIFormField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormField::OAIFormField() {
    this->initializeModel();
}

OAIFormField::~OAIFormField() {}

void OAIFormField::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFormField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormField::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFormField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormField::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIFormField::getId() const {
    return m_id;
}
void OAIFormField::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFormField::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFormField::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFormField::getName() const {
    return m_name;
}
void OAIFormField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFormField::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFormField::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIFormField::getOrder() const {
    return m_order;
}
void OAIFormField::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIFormField::is_order_Set() const{
    return m_order_isSet;
}

bool OAIFormField::is_order_Valid() const{
    return m_order_isValid;
}

OAIFormField_settings OAIFormField::getSettings() const {
    return m_settings;
}
void OAIFormField::setSettings(const OAIFormField_settings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIFormField::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIFormField::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAIFormField::getType() const {
    return m_type;
}
void OAIFormField::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFormField::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFormField::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFormField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
