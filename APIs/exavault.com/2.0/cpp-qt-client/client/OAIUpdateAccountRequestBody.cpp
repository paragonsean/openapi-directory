/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAccountRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAccountRequestBody::OAIUpdateAccountRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAccountRequestBody::OAIUpdateAccountRequestBody() {
    this->initializeModel();
}

OAIUpdateAccountRequestBody::~OAIUpdateAccountRequestBody() {}

void OAIUpdateAccountRequestBody::initializeModel() {

    m_account_onboarding_isSet = false;
    m_account_onboarding_isValid = false;

    m_allowed_ip_ranges_isSet = false;
    m_allowed_ip_ranges_isValid = false;

    m_branding_settings_isSet = false;
    m_branding_settings_isValid = false;

    m_complex_passwords_isSet = false;
    m_complex_passwords_isValid = false;

    m_custom_signature_isSet = false;
    m_custom_signature_isValid = false;

    m_email_content_isSet = false;
    m_email_content_isValid = false;

    m_email_subject_isSet = false;
    m_email_subject_isValid = false;

    m_external_domain_isSet = false;
    m_external_domain_isValid = false;

    m_quota_isSet = false;
    m_quota_isValid = false;

    m_secure_only_isSet = false;
    m_secure_only_isValid = false;

    m_show_referral_links_isSet = false;
    m_show_referral_links_isValid = false;
}

void OAIUpdateAccountRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAccountRequestBody::fromJsonObject(QJsonObject json) {

    m_account_onboarding_isValid = ::OpenAPI::fromJsonValue(m_account_onboarding, json[QString("accountOnboarding")]);
    m_account_onboarding_isSet = !json[QString("accountOnboarding")].isNull() && m_account_onboarding_isValid;

    m_allowed_ip_ranges_isValid = ::OpenAPI::fromJsonValue(m_allowed_ip_ranges, json[QString("allowedIpRanges")]);
    m_allowed_ip_ranges_isSet = !json[QString("allowedIpRanges")].isNull() && m_allowed_ip_ranges_isValid;

    m_branding_settings_isValid = ::OpenAPI::fromJsonValue(m_branding_settings, json[QString("brandingSettings")]);
    m_branding_settings_isSet = !json[QString("brandingSettings")].isNull() && m_branding_settings_isValid;

    m_complex_passwords_isValid = ::OpenAPI::fromJsonValue(m_complex_passwords, json[QString("complexPasswords")]);
    m_complex_passwords_isSet = !json[QString("complexPasswords")].isNull() && m_complex_passwords_isValid;

    m_custom_signature_isValid = ::OpenAPI::fromJsonValue(m_custom_signature, json[QString("customSignature")]);
    m_custom_signature_isSet = !json[QString("customSignature")].isNull() && m_custom_signature_isValid;

    m_email_content_isValid = ::OpenAPI::fromJsonValue(m_email_content, json[QString("emailContent")]);
    m_email_content_isSet = !json[QString("emailContent")].isNull() && m_email_content_isValid;

    m_email_subject_isValid = ::OpenAPI::fromJsonValue(m_email_subject, json[QString("emailSubject")]);
    m_email_subject_isSet = !json[QString("emailSubject")].isNull() && m_email_subject_isValid;

    m_external_domain_isValid = ::OpenAPI::fromJsonValue(m_external_domain, json[QString("externalDomain")]);
    m_external_domain_isSet = !json[QString("externalDomain")].isNull() && m_external_domain_isValid;

    m_quota_isValid = ::OpenAPI::fromJsonValue(m_quota, json[QString("quota")]);
    m_quota_isSet = !json[QString("quota")].isNull() && m_quota_isValid;

    m_secure_only_isValid = ::OpenAPI::fromJsonValue(m_secure_only, json[QString("secureOnly")]);
    m_secure_only_isSet = !json[QString("secureOnly")].isNull() && m_secure_only_isValid;

    m_show_referral_links_isValid = ::OpenAPI::fromJsonValue(m_show_referral_links, json[QString("showReferralLinks")]);
    m_show_referral_links_isSet = !json[QString("showReferralLinks")].isNull() && m_show_referral_links_isValid;
}

QString OAIUpdateAccountRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAccountRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_account_onboarding_isSet) {
        obj.insert(QString("accountOnboarding"), ::OpenAPI::toJsonValue(m_account_onboarding));
    }
    if (m_allowed_ip_ranges.size() > 0) {
        obj.insert(QString("allowedIpRanges"), ::OpenAPI::toJsonValue(m_allowed_ip_ranges));
    }
    if (m_branding_settings.isSet()) {
        obj.insert(QString("brandingSettings"), ::OpenAPI::toJsonValue(m_branding_settings));
    }
    if (m_complex_passwords_isSet) {
        obj.insert(QString("complexPasswords"), ::OpenAPI::toJsonValue(m_complex_passwords));
    }
    if (m_custom_signature_isSet) {
        obj.insert(QString("customSignature"), ::OpenAPI::toJsonValue(m_custom_signature));
    }
    if (m_email_content_isSet) {
        obj.insert(QString("emailContent"), ::OpenAPI::toJsonValue(m_email_content));
    }
    if (m_email_subject_isSet) {
        obj.insert(QString("emailSubject"), ::OpenAPI::toJsonValue(m_email_subject));
    }
    if (m_external_domain_isSet) {
        obj.insert(QString("externalDomain"), ::OpenAPI::toJsonValue(m_external_domain));
    }
    if (m_quota.isSet()) {
        obj.insert(QString("quota"), ::OpenAPI::toJsonValue(m_quota));
    }
    if (m_secure_only_isSet) {
        obj.insert(QString("secureOnly"), ::OpenAPI::toJsonValue(m_secure_only));
    }
    if (m_show_referral_links_isSet) {
        obj.insert(QString("showReferralLinks"), ::OpenAPI::toJsonValue(m_show_referral_links));
    }
    return obj;
}

bool OAIUpdateAccountRequestBody::isAccountOnboarding() const {
    return m_account_onboarding;
}
void OAIUpdateAccountRequestBody::setAccountOnboarding(const bool &account_onboarding) {
    m_account_onboarding = account_onboarding;
    m_account_onboarding_isSet = true;
}

bool OAIUpdateAccountRequestBody::is_account_onboarding_Set() const{
    return m_account_onboarding_isSet;
}

bool OAIUpdateAccountRequestBody::is_account_onboarding_Valid() const{
    return m_account_onboarding_isValid;
}

QList<OAIUpdateAccountRequestBody_allowedIpRanges_inner> OAIUpdateAccountRequestBody::getAllowedIpRanges() const {
    return m_allowed_ip_ranges;
}
void OAIUpdateAccountRequestBody::setAllowedIpRanges(const QList<OAIUpdateAccountRequestBody_allowedIpRanges_inner> &allowed_ip_ranges) {
    m_allowed_ip_ranges = allowed_ip_ranges;
    m_allowed_ip_ranges_isSet = true;
}

bool OAIUpdateAccountRequestBody::is_allowed_ip_ranges_Set() const{
    return m_allowed_ip_ranges_isSet;
}

bool OAIUpdateAccountRequestBody::is_allowed_ip_ranges_Valid() const{
    return m_allowed_ip_ranges_isValid;
}

OAIBrandingSettingsValues OAIUpdateAccountRequestBody::getBrandingSettings() const {
    return m_branding_settings;
}
void OAIUpdateAccountRequestBody::setBrandingSettings(const OAIBrandingSettingsValues &branding_settings) {
    m_branding_settings = branding_settings;
    m_branding_settings_isSet = true;
}

bool OAIUpdateAccountRequestBody::is_branding_settings_Set() const{
    return m_branding_settings_isSet;
}

bool OAIUpdateAccountRequestBody::is_branding_settings_Valid() const{
    return m_branding_settings_isValid;
}

bool OAIUpdateAccountRequestBody::isComplexPasswords() const {
    return m_complex_passwords;
}
void OAIUpdateAccountRequestBody::setComplexPasswords(const bool &complex_passwords) {
    m_complex_passwords = complex_passwords;
    m_complex_passwords_isSet = true;
}

bool OAIUpdateAccountRequestBody::is_complex_passwords_Set() const{
    return m_complex_passwords_isSet;
}

bool OAIUpdateAccountRequestBody::is_complex_passwords_Valid() const{
    return m_complex_passwords_isValid;
}

QString OAIUpdateAccountRequestBody::getCustomSignature() const {
    return m_custom_signature;
}
void OAIUpdateAccountRequestBody::setCustomSignature(const QString &custom_signature) {
    m_custom_signature = custom_signature;
    m_custom_signature_isSet = true;
}

bool OAIUpdateAccountRequestBody::is_custom_signature_Set() const{
    return m_custom_signature_isSet;
}

bool OAIUpdateAccountRequestBody::is_custom_signature_Valid() const{
    return m_custom_signature_isValid;
}

QString OAIUpdateAccountRequestBody::getEmailContent() const {
    return m_email_content;
}
void OAIUpdateAccountRequestBody::setEmailContent(const QString &email_content) {
    m_email_content = email_content;
    m_email_content_isSet = true;
}

bool OAIUpdateAccountRequestBody::is_email_content_Set() const{
    return m_email_content_isSet;
}

bool OAIUpdateAccountRequestBody::is_email_content_Valid() const{
    return m_email_content_isValid;
}

QString OAIUpdateAccountRequestBody::getEmailSubject() const {
    return m_email_subject;
}
void OAIUpdateAccountRequestBody::setEmailSubject(const QString &email_subject) {
    m_email_subject = email_subject;
    m_email_subject_isSet = true;
}

bool OAIUpdateAccountRequestBody::is_email_subject_Set() const{
    return m_email_subject_isSet;
}

bool OAIUpdateAccountRequestBody::is_email_subject_Valid() const{
    return m_email_subject_isValid;
}

QString OAIUpdateAccountRequestBody::getExternalDomain() const {
    return m_external_domain;
}
void OAIUpdateAccountRequestBody::setExternalDomain(const QString &external_domain) {
    m_external_domain = external_domain;
    m_external_domain_isSet = true;
}

bool OAIUpdateAccountRequestBody::is_external_domain_Set() const{
    return m_external_domain_isSet;
}

bool OAIUpdateAccountRequestBody::is_external_domain_Valid() const{
    return m_external_domain_isValid;
}

OAIAccountQuotaValues OAIUpdateAccountRequestBody::getQuota() const {
    return m_quota;
}
void OAIUpdateAccountRequestBody::setQuota(const OAIAccountQuotaValues &quota) {
    m_quota = quota;
    m_quota_isSet = true;
}

bool OAIUpdateAccountRequestBody::is_quota_Set() const{
    return m_quota_isSet;
}

bool OAIUpdateAccountRequestBody::is_quota_Valid() const{
    return m_quota_isValid;
}

bool OAIUpdateAccountRequestBody::isSecureOnly() const {
    return m_secure_only;
}
void OAIUpdateAccountRequestBody::setSecureOnly(const bool &secure_only) {
    m_secure_only = secure_only;
    m_secure_only_isSet = true;
}

bool OAIUpdateAccountRequestBody::is_secure_only_Set() const{
    return m_secure_only_isSet;
}

bool OAIUpdateAccountRequestBody::is_secure_only_Valid() const{
    return m_secure_only_isValid;
}

bool OAIUpdateAccountRequestBody::isShowReferralLinks() const {
    return m_show_referral_links;
}
void OAIUpdateAccountRequestBody::setShowReferralLinks(const bool &show_referral_links) {
    m_show_referral_links = show_referral_links;
    m_show_referral_links_isSet = true;
}

bool OAIUpdateAccountRequestBody::is_show_referral_links_Set() const{
    return m_show_referral_links_isSet;
}

bool OAIUpdateAccountRequestBody::is_show_referral_links_Valid() const{
    return m_show_referral_links_isValid;
}

bool OAIUpdateAccountRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_onboarding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_ip_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_branding_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_complex_passwords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secure_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_referral_links_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAccountRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
