/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShareMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShareMessage::OAIShareMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShareMessage::OAIShareMessage() {
    this->initializeModel();
}

OAIShareMessage::~OAIShareMessage() {}

void OAIShareMessage::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_share_id_isSet = false;
    m_share_id_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIShareMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShareMessage::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_share_id_isValid = ::OpenAPI::fromJsonValue(m_share_id, json[QString("shareId")]);
    m_share_id_isSet = !json[QString("shareId")].isNull() && m_share_id_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIShareMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShareMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_share_id_isSet) {
        obj.insert(QString("shareId"), ::OpenAPI::toJsonValue(m_share_id));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIShareMessage::getBody() const {
    return m_body;
}
void OAIShareMessage::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIShareMessage::is_body_Set() const{
    return m_body_isSet;
}

bool OAIShareMessage::is_body_Valid() const{
    return m_body_isValid;
}

QDateTime OAIShareMessage::getCreated() const {
    return m_created;
}
void OAIShareMessage::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIShareMessage::is_created_Set() const{
    return m_created_isSet;
}

bool OAIShareMessage::is_created_Valid() const{
    return m_created_isValid;
}

qint32 OAIShareMessage::getId() const {
    return m_id;
}
void OAIShareMessage::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShareMessage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShareMessage::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIShareMessage::getModified() const {
    return m_modified;
}
void OAIShareMessage::setModified(const QDateTime &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAIShareMessage::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAIShareMessage::is_modified_Valid() const{
    return m_modified_isValid;
}

qint32 OAIShareMessage::getShareId() const {
    return m_share_id;
}
void OAIShareMessage::setShareId(const qint32 &share_id) {
    m_share_id = share_id;
    m_share_id_isSet = true;
}

bool OAIShareMessage::is_share_id_Set() const{
    return m_share_id_isSet;
}

bool OAIShareMessage::is_share_id_Valid() const{
    return m_share_id_isValid;
}

QString OAIShareMessage::getSubject() const {
    return m_subject;
}
void OAIShareMessage::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIShareMessage::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIShareMessage::is_subject_Valid() const{
    return m_subject_isValid;
}

qint32 OAIShareMessage::getUserId() const {
    return m_user_id;
}
void OAIShareMessage::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIShareMessage::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIShareMessage::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIShareMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShareMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
