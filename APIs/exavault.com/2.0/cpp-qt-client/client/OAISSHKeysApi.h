/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISSHKeysApi_H
#define OAI_OAISSHKeysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddSSHKeyRequestBody.h"
#include "OAISSHKeyCollectionResponse.h"
#include "OAISSHKeyResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISSHKeysApi : public QObject {
    Q_OBJECT

public:
    OAISSHKeysApi(const int timeOut = 0);
    ~OAISSHKeysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  oai_add_ssh_key_request_body OAIAddSSHKeyRequestBody [optional]
    */
    virtual void addSSHKey(const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<OAIAddSSHKeyRequestBody> &oai_add_ssh_key_request_body = ::OpenAPI::OptionalParam<OAIAddSSHKeyRequestBody>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    */
    virtual void deleteSSHKey(const QString &id, const QString &ev_api_key, const QString &ev_access_token);

    /**
    * @param[in]  id QString [required]
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    */
    virtual void getSSHKey(const QString &id, const QString &ev_api_key, const QString &ev_access_token);

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  user_id QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getSSHKeysList(const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addSSHKeyCallback(OAIHttpRequestWorker *worker);
    void deleteSSHKeyCallback(OAIHttpRequestWorker *worker);
    void getSSHKeyCallback(OAIHttpRequestWorker *worker);
    void getSSHKeysListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addSSHKeySignal(OAISSHKeyResponse summary);
    void deleteSSHKeySignal();
    void getSSHKeySignal(OAISSHKeyResponse summary);
    void getSSHKeysListSignal(OAISSHKeyCollectionResponse summary);


    void addSSHKeySignalFull(OAIHttpRequestWorker *worker, OAISSHKeyResponse summary);
    void deleteSSHKeySignalFull(OAIHttpRequestWorker *worker);
    void getSSHKeySignalFull(OAIHttpRequestWorker *worker, OAISSHKeyResponse summary);
    void getSSHKeysListSignalFull(OAIHttpRequestWorker *worker, OAISSHKeyCollectionResponse summary);

    Q_DECL_DEPRECATED_X("Use addSSHKeySignalError() instead")
    void addSSHKeySignalE(OAISSHKeyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addSSHKeySignalError(OAISSHKeyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSSHKeySignalError() instead")
    void deleteSSHKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSSHKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSSHKeySignalError() instead")
    void getSSHKeySignalE(OAISSHKeyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSSHKeySignalError(OAISSHKeyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSSHKeysListSignalError() instead")
    void getSSHKeysListSignalE(OAISSHKeyCollectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSSHKeysListSignalError(OAISSHKeyCollectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addSSHKeySignalErrorFull() instead")
    void addSSHKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addSSHKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSSHKeySignalErrorFull() instead")
    void deleteSSHKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSSHKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSSHKeySignalErrorFull() instead")
    void getSSHKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSSHKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSSHKeysListSignalErrorFull() instead")
    void getSSHKeysListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSSHKeysListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
