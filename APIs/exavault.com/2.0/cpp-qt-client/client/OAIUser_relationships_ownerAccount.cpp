/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_relationships_ownerAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_relationships_ownerAccount::OAIUser_relationships_ownerAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_relationships_ownerAccount::OAIUser_relationships_ownerAccount() {
    this->initializeModel();
}

OAIUser_relationships_ownerAccount::~OAIUser_relationships_ownerAccount() {}

void OAIUser_relationships_ownerAccount::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;
}

void OAIUser_relationships_ownerAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_relationships_ownerAccount::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;
}

QString OAIUser_relationships_ownerAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_relationships_ownerAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    return obj;
}

OAIUser_relationships_ownerAccount_data OAIUser_relationships_ownerAccount::getData() const {
    return m_data;
}
void OAIUser_relationships_ownerAccount::setData(const OAIUser_relationships_ownerAccount_data &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIUser_relationships_ownerAccount::is_data_Set() const{
    return m_data_isSet;
}

bool OAIUser_relationships_ownerAccount::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIUser_relationships_ownerAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_relationships_ownerAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
