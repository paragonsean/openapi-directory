/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddUserRequestBody_permissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddUserRequestBody_permissions::OAIAddUserRequestBody_permissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddUserRequestBody_permissions::OAIAddUserRequestBody_permissions() {
    this->initializeModel();
}

OAIAddUserRequestBody_permissions::~OAIAddUserRequestBody_permissions() {}

void OAIAddUserRequestBody_permissions::initializeModel() {

    m_change_password_isSet = false;
    m_change_password_isValid = false;

    m_r_delete_isSet = false;
    m_r_delete_isValid = false;

    m_delete_form_data_isSet = false;
    m_delete_form_data_isValid = false;

    m_download_isSet = false;
    m_download_isValid = false;

    m_list_isSet = false;
    m_list_isValid = false;

    m_modify_isSet = false;
    m_modify_isValid = false;

    m_notification_isSet = false;
    m_notification_isValid = false;

    m_share_isSet = false;
    m_share_isValid = false;

    m_upload_isSet = false;
    m_upload_isValid = false;

    m_view_form_data_isSet = false;
    m_view_form_data_isValid = false;
}

void OAIAddUserRequestBody_permissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddUserRequestBody_permissions::fromJsonObject(QJsonObject json) {

    m_change_password_isValid = ::OpenAPI::fromJsonValue(m_change_password, json[QString("changePassword")]);
    m_change_password_isSet = !json[QString("changePassword")].isNull() && m_change_password_isValid;

    m_r_delete_isValid = ::OpenAPI::fromJsonValue(m_r_delete, json[QString("delete")]);
    m_r_delete_isSet = !json[QString("delete")].isNull() && m_r_delete_isValid;

    m_delete_form_data_isValid = ::OpenAPI::fromJsonValue(m_delete_form_data, json[QString("deleteFormData")]);
    m_delete_form_data_isSet = !json[QString("deleteFormData")].isNull() && m_delete_form_data_isValid;

    m_download_isValid = ::OpenAPI::fromJsonValue(m_download, json[QString("download")]);
    m_download_isSet = !json[QString("download")].isNull() && m_download_isValid;

    m_list_isValid = ::OpenAPI::fromJsonValue(m_list, json[QString("list")]);
    m_list_isSet = !json[QString("list")].isNull() && m_list_isValid;

    m_modify_isValid = ::OpenAPI::fromJsonValue(m_modify, json[QString("modify")]);
    m_modify_isSet = !json[QString("modify")].isNull() && m_modify_isValid;

    m_notification_isValid = ::OpenAPI::fromJsonValue(m_notification, json[QString("notification")]);
    m_notification_isSet = !json[QString("notification")].isNull() && m_notification_isValid;

    m_share_isValid = ::OpenAPI::fromJsonValue(m_share, json[QString("share")]);
    m_share_isSet = !json[QString("share")].isNull() && m_share_isValid;

    m_upload_isValid = ::OpenAPI::fromJsonValue(m_upload, json[QString("upload")]);
    m_upload_isSet = !json[QString("upload")].isNull() && m_upload_isValid;

    m_view_form_data_isValid = ::OpenAPI::fromJsonValue(m_view_form_data, json[QString("viewFormData")]);
    m_view_form_data_isSet = !json[QString("viewFormData")].isNull() && m_view_form_data_isValid;
}

QString OAIAddUserRequestBody_permissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddUserRequestBody_permissions::asJsonObject() const {
    QJsonObject obj;
    if (m_change_password_isSet) {
        obj.insert(QString("changePassword"), ::OpenAPI::toJsonValue(m_change_password));
    }
    if (m_r_delete_isSet) {
        obj.insert(QString("delete"), ::OpenAPI::toJsonValue(m_r_delete));
    }
    if (m_delete_form_data_isSet) {
        obj.insert(QString("deleteFormData"), ::OpenAPI::toJsonValue(m_delete_form_data));
    }
    if (m_download_isSet) {
        obj.insert(QString("download"), ::OpenAPI::toJsonValue(m_download));
    }
    if (m_list_isSet) {
        obj.insert(QString("list"), ::OpenAPI::toJsonValue(m_list));
    }
    if (m_modify_isSet) {
        obj.insert(QString("modify"), ::OpenAPI::toJsonValue(m_modify));
    }
    if (m_notification_isSet) {
        obj.insert(QString("notification"), ::OpenAPI::toJsonValue(m_notification));
    }
    if (m_share_isSet) {
        obj.insert(QString("share"), ::OpenAPI::toJsonValue(m_share));
    }
    if (m_upload_isSet) {
        obj.insert(QString("upload"), ::OpenAPI::toJsonValue(m_upload));
    }
    if (m_view_form_data_isSet) {
        obj.insert(QString("viewFormData"), ::OpenAPI::toJsonValue(m_view_form_data));
    }
    return obj;
}

bool OAIAddUserRequestBody_permissions::isChangePassword() const {
    return m_change_password;
}
void OAIAddUserRequestBody_permissions::setChangePassword(const bool &change_password) {
    m_change_password = change_password;
    m_change_password_isSet = true;
}

bool OAIAddUserRequestBody_permissions::is_change_password_Set() const{
    return m_change_password_isSet;
}

bool OAIAddUserRequestBody_permissions::is_change_password_Valid() const{
    return m_change_password_isValid;
}

bool OAIAddUserRequestBody_permissions::isRDelete() const {
    return m_r_delete;
}
void OAIAddUserRequestBody_permissions::setRDelete(const bool &r_delete) {
    m_r_delete = r_delete;
    m_r_delete_isSet = true;
}

bool OAIAddUserRequestBody_permissions::is_r_delete_Set() const{
    return m_r_delete_isSet;
}

bool OAIAddUserRequestBody_permissions::is_r_delete_Valid() const{
    return m_r_delete_isValid;
}

bool OAIAddUserRequestBody_permissions::isDeleteFormData() const {
    return m_delete_form_data;
}
void OAIAddUserRequestBody_permissions::setDeleteFormData(const bool &delete_form_data) {
    m_delete_form_data = delete_form_data;
    m_delete_form_data_isSet = true;
}

bool OAIAddUserRequestBody_permissions::is_delete_form_data_Set() const{
    return m_delete_form_data_isSet;
}

bool OAIAddUserRequestBody_permissions::is_delete_form_data_Valid() const{
    return m_delete_form_data_isValid;
}

bool OAIAddUserRequestBody_permissions::isDownload() const {
    return m_download;
}
void OAIAddUserRequestBody_permissions::setDownload(const bool &download) {
    m_download = download;
    m_download_isSet = true;
}

bool OAIAddUserRequestBody_permissions::is_download_Set() const{
    return m_download_isSet;
}

bool OAIAddUserRequestBody_permissions::is_download_Valid() const{
    return m_download_isValid;
}

bool OAIAddUserRequestBody_permissions::isList() const {
    return m_list;
}
void OAIAddUserRequestBody_permissions::setList(const bool &list) {
    m_list = list;
    m_list_isSet = true;
}

bool OAIAddUserRequestBody_permissions::is_list_Set() const{
    return m_list_isSet;
}

bool OAIAddUserRequestBody_permissions::is_list_Valid() const{
    return m_list_isValid;
}

bool OAIAddUserRequestBody_permissions::isModify() const {
    return m_modify;
}
void OAIAddUserRequestBody_permissions::setModify(const bool &modify) {
    m_modify = modify;
    m_modify_isSet = true;
}

bool OAIAddUserRequestBody_permissions::is_modify_Set() const{
    return m_modify_isSet;
}

bool OAIAddUserRequestBody_permissions::is_modify_Valid() const{
    return m_modify_isValid;
}

bool OAIAddUserRequestBody_permissions::isNotification() const {
    return m_notification;
}
void OAIAddUserRequestBody_permissions::setNotification(const bool &notification) {
    m_notification = notification;
    m_notification_isSet = true;
}

bool OAIAddUserRequestBody_permissions::is_notification_Set() const{
    return m_notification_isSet;
}

bool OAIAddUserRequestBody_permissions::is_notification_Valid() const{
    return m_notification_isValid;
}

bool OAIAddUserRequestBody_permissions::isShare() const {
    return m_share;
}
void OAIAddUserRequestBody_permissions::setShare(const bool &share) {
    m_share = share;
    m_share_isSet = true;
}

bool OAIAddUserRequestBody_permissions::is_share_Set() const{
    return m_share_isSet;
}

bool OAIAddUserRequestBody_permissions::is_share_Valid() const{
    return m_share_isValid;
}

bool OAIAddUserRequestBody_permissions::isUpload() const {
    return m_upload;
}
void OAIAddUserRequestBody_permissions::setUpload(const bool &upload) {
    m_upload = upload;
    m_upload_isSet = true;
}

bool OAIAddUserRequestBody_permissions::is_upload_Set() const{
    return m_upload_isSet;
}

bool OAIAddUserRequestBody_permissions::is_upload_Valid() const{
    return m_upload_isValid;
}

bool OAIAddUserRequestBody_permissions::isViewFormData() const {
    return m_view_form_data;
}
void OAIAddUserRequestBody_permissions::setViewFormData(const bool &view_form_data) {
    m_view_form_data = view_form_data;
    m_view_form_data_isSet = true;
}

bool OAIAddUserRequestBody_permissions::is_view_form_data_Set() const{
    return m_view_form_data_isSet;
}

bool OAIAddUserRequestBody_permissions::is_view_form_data_Valid() const{
    return m_view_form_data_isValid;
}

bool OAIAddUserRequestBody_permissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_change_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_form_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_form_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddUserRequestBody_permissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
