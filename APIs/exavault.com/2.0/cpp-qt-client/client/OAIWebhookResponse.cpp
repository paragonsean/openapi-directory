/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookResponse::OAIWebhookResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookResponse::OAIWebhookResponse() {
    this->initializeModel();
}

OAIWebhookResponse::~OAIWebhookResponse() {}

void OAIWebhookResponse::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_included_isSet = false;
    m_included_isValid = false;

    m_response_status_isSet = false;
    m_response_status_isValid = false;
}

void OAIWebhookResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookResponse::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_included_isValid = ::OpenAPI::fromJsonValue(m_included, json[QString("included")]);
    m_included_isSet = !json[QString("included")].isNull() && m_included_isValid;

    m_response_status_isValid = ::OpenAPI::fromJsonValue(m_response_status, json[QString("responseStatus")]);
    m_response_status_isSet = !json[QString("responseStatus")].isNull() && m_response_status_isValid;
}

QString OAIWebhookResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_included.size() > 0) {
        obj.insert(QString("included"), ::OpenAPI::toJsonValue(m_included));
    }
    if (m_response_status_isSet) {
        obj.insert(QString("responseStatus"), ::OpenAPI::toJsonValue(m_response_status));
    }
    return obj;
}

QList<OAIWebhook> OAIWebhookResponse::getData() const {
    return m_data;
}
void OAIWebhookResponse::setData(const QList<OAIWebhook> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIWebhookResponse::is_data_Set() const{
    return m_data_isSet;
}

bool OAIWebhookResponse::is_data_Valid() const{
    return m_data_isValid;
}

QList<OAIUserCollectionResponse_included_inner> OAIWebhookResponse::getIncluded() const {
    return m_included;
}
void OAIWebhookResponse::setIncluded(const QList<OAIUserCollectionResponse_included_inner> &included) {
    m_included = included;
    m_included_isSet = true;
}

bool OAIWebhookResponse::is_included_Set() const{
    return m_included_isSet;
}

bool OAIWebhookResponse::is_included_Valid() const{
    return m_included_isValid;
}

qint32 OAIWebhookResponse::getResponseStatus() const {
    return m_response_status;
}
void OAIWebhookResponse::setResponseStatus(const qint32 &response_status) {
    m_response_status = response_status;
    m_response_status_isSet = true;
}

bool OAIWebhookResponse::is_response_status_Set() const{
    return m_response_status_isSet;
}

bool OAIWebhookResponse::is_response_status_Valid() const{
    return m_response_status_isValid;
}

bool OAIWebhookResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
