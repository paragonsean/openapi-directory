/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookV2Details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookV2Details::OAIWebhookV2Details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookV2Details::OAIWebhookV2Details() {
    this->initializeModel();
}

OAIWebhookV2Details::~OAIWebhookV2Details() {}

void OAIWebhookV2Details::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_attempt_id_isSet = false;
    m_attempt_id_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_event_data_isSet = false;
    m_event_data_isValid = false;

    m_event_timestamp_isSet = false;
    m_event_timestamp_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIWebhookV2Details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookV2Details::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_attempt_id_isValid = ::OpenAPI::fromJsonValue(m_attempt_id, json[QString("attemptId")]);
    m_attempt_id_isSet = !json[QString("attemptId")].isNull() && m_attempt_id_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_event_data_isValid = ::OpenAPI::fromJsonValue(m_event_data, json[QString("eventData")]);
    m_event_data_isSet = !json[QString("eventData")].isNull() && m_event_data_isValid;

    m_event_timestamp_isValid = ::OpenAPI::fromJsonValue(m_event_timestamp, json[QString("eventTimestamp")]);
    m_event_timestamp_isSet = !json[QString("eventTimestamp")].isNull() && m_event_timestamp_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIWebhookV2Details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookV2Details::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_attempt_id_isSet) {
        obj.insert(QString("attemptId"), ::OpenAPI::toJsonValue(m_attempt_id));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_event_data.isSet()) {
        obj.insert(QString("eventData"), ::OpenAPI::toJsonValue(m_event_data));
    }
    if (m_event_timestamp_isSet) {
        obj.insert(QString("eventTimestamp"), ::OpenAPI::toJsonValue(m_event_timestamp));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIWebhookV2Details::getAccountName() const {
    return m_account_name;
}
void OAIWebhookV2Details::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIWebhookV2Details::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIWebhookV2Details::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIWebhookV2Details::getAttemptId() const {
    return m_attempt_id;
}
void OAIWebhookV2Details::setAttemptId(const QString &attempt_id) {
    m_attempt_id = attempt_id;
    m_attempt_id_isSet = true;
}

bool OAIWebhookV2Details::is_attempt_id_Set() const{
    return m_attempt_id_isSet;
}

bool OAIWebhookV2Details::is_attempt_id_Valid() const{
    return m_attempt_id_isValid;
}

QString OAIWebhookV2Details::getEvent() const {
    return m_event;
}
void OAIWebhookV2Details::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIWebhookV2Details::is_event_Set() const{
    return m_event_isSet;
}

bool OAIWebhookV2Details::is_event_Valid() const{
    return m_event_isValid;
}

OAIWebhookV2EventData OAIWebhookV2Details::getEventData() const {
    return m_event_data;
}
void OAIWebhookV2Details::setEventData(const OAIWebhookV2EventData &event_data) {
    m_event_data = event_data;
    m_event_data_isSet = true;
}

bool OAIWebhookV2Details::is_event_data_Set() const{
    return m_event_data_isSet;
}

bool OAIWebhookV2Details::is_event_data_Valid() const{
    return m_event_data_isValid;
}

QDateTime OAIWebhookV2Details::getEventTimestamp() const {
    return m_event_timestamp;
}
void OAIWebhookV2Details::setEventTimestamp(const QDateTime &event_timestamp) {
    m_event_timestamp = event_timestamp;
    m_event_timestamp_isSet = true;
}

bool OAIWebhookV2Details::is_event_timestamp_Set() const{
    return m_event_timestamp_isSet;
}

bool OAIWebhookV2Details::is_event_timestamp_Valid() const{
    return m_event_timestamp_isValid;
}

QString OAIWebhookV2Details::getIpAddress() const {
    return m_ip_address;
}
void OAIWebhookV2Details::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIWebhookV2Details::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIWebhookV2Details::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIWebhookV2Details::getProtocol() const {
    return m_protocol;
}
void OAIWebhookV2Details::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIWebhookV2Details::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIWebhookV2Details::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIWebhookV2Details::getUsername() const {
    return m_username;
}
void OAIWebhookV2Details::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIWebhookV2Details::is_username_Set() const{
    return m_username_isSet;
}

bool OAIWebhookV2Details::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIWebhookV2Details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attempt_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookV2Details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
