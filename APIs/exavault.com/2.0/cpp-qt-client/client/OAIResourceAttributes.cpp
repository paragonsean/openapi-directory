/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceAttributes::OAIResourceAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceAttributes::OAIResourceAttributes() {
    this->initializeModel();
}

OAIResourceAttributes::~OAIResourceAttributes() {}

void OAIResourceAttributes::initializeModel() {

    m_accessed_at_isSet = false;
    m_accessed_at_isValid = false;

    m_accessed_time_isSet = false;
    m_accessed_time_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_extension_isSet = false;
    m_extension_isValid = false;

    m_file_count_isSet = false;
    m_file_count_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_previewable_isSet = false;
    m_previewable_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_upload_date_isSet = false;
    m_upload_date_isValid = false;
}

void OAIResourceAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceAttributes::fromJsonObject(QJsonObject json) {

    m_accessed_at_isValid = ::OpenAPI::fromJsonValue(m_accessed_at, json[QString("accessedAt")]);
    m_accessed_at_isSet = !json[QString("accessedAt")].isNull() && m_accessed_at_isValid;

    m_accessed_time_isValid = ::OpenAPI::fromJsonValue(m_accessed_time, json[QString("accessedTime")]);
    m_accessed_time_isSet = !json[QString("accessedTime")].isNull() && m_accessed_time_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_extension_isValid = ::OpenAPI::fromJsonValue(m_extension, json[QString("extension")]);
    m_extension_isSet = !json[QString("extension")].isNull() && m_extension_isValid;

    m_file_count_isValid = ::OpenAPI::fromJsonValue(m_file_count, json[QString("fileCount")]);
    m_file_count_isSet = !json[QString("fileCount")].isNull() && m_file_count_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_previewable_isValid = ::OpenAPI::fromJsonValue(m_previewable, json[QString("previewable")]);
    m_previewable_isSet = !json[QString("previewable")].isNull() && m_previewable_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updatedTime")]);
    m_updated_time_isSet = !json[QString("updatedTime")].isNull() && m_updated_time_isValid;

    m_upload_date_isValid = ::OpenAPI::fromJsonValue(m_upload_date, json[QString("uploadDate")]);
    m_upload_date_isSet = !json[QString("uploadDate")].isNull() && m_upload_date_isValid;
}

QString OAIResourceAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_accessed_at_isSet) {
        obj.insert(QString("accessedAt"), ::OpenAPI::toJsonValue(m_accessed_at));
    }
    if (m_accessed_time_isSet) {
        obj.insert(QString("accessedTime"), ::OpenAPI::toJsonValue(m_accessed_time));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_extension_isSet) {
        obj.insert(QString("extension"), ::OpenAPI::toJsonValue(m_extension));
    }
    if (m_file_count_isSet) {
        obj.insert(QString("fileCount"), ::OpenAPI::toJsonValue(m_file_count));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_previewable_isSet) {
        obj.insert(QString("previewable"), ::OpenAPI::toJsonValue(m_previewable));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updatedTime"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_upload_date_isSet) {
        obj.insert(QString("uploadDate"), ::OpenAPI::toJsonValue(m_upload_date));
    }
    return obj;
}

QDateTime OAIResourceAttributes::getAccessedAt() const {
    return m_accessed_at;
}
void OAIResourceAttributes::setAccessedAt(const QDateTime &accessed_at) {
    m_accessed_at = accessed_at;
    m_accessed_at_isSet = true;
}

bool OAIResourceAttributes::is_accessed_at_Set() const{
    return m_accessed_at_isSet;
}

bool OAIResourceAttributes::is_accessed_at_Valid() const{
    return m_accessed_at_isValid;
}

qint32 OAIResourceAttributes::getAccessedTime() const {
    return m_accessed_time;
}
void OAIResourceAttributes::setAccessedTime(const qint32 &accessed_time) {
    m_accessed_time = accessed_time;
    m_accessed_time_isSet = true;
}

bool OAIResourceAttributes::is_accessed_time_Set() const{
    return m_accessed_time_isSet;
}

bool OAIResourceAttributes::is_accessed_time_Valid() const{
    return m_accessed_time_isValid;
}

QDateTime OAIResourceAttributes::getCreatedAt() const {
    return m_created_at;
}
void OAIResourceAttributes::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIResourceAttributes::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIResourceAttributes::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIResourceAttributes::getCreatedBy() const {
    return m_created_by;
}
void OAIResourceAttributes::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIResourceAttributes::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIResourceAttributes::is_created_by_Valid() const{
    return m_created_by_isValid;
}

qint32 OAIResourceAttributes::getCreatedTime() const {
    return m_created_time;
}
void OAIResourceAttributes::setCreatedTime(const qint32 &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIResourceAttributes::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIResourceAttributes::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIResourceAttributes::getExtension() const {
    return m_extension;
}
void OAIResourceAttributes::setExtension(const QString &extension) {
    m_extension = extension;
    m_extension_isSet = true;
}

bool OAIResourceAttributes::is_extension_Set() const{
    return m_extension_isSet;
}

bool OAIResourceAttributes::is_extension_Valid() const{
    return m_extension_isValid;
}

qint32 OAIResourceAttributes::getFileCount() const {
    return m_file_count;
}
void OAIResourceAttributes::setFileCount(const qint32 &file_count) {
    m_file_count = file_count;
    m_file_count_isSet = true;
}

bool OAIResourceAttributes::is_file_count_Set() const{
    return m_file_count_isSet;
}

bool OAIResourceAttributes::is_file_count_Valid() const{
    return m_file_count_isValid;
}

QString OAIResourceAttributes::getHash() const {
    return m_hash;
}
void OAIResourceAttributes::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIResourceAttributes::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIResourceAttributes::is_hash_Valid() const{
    return m_hash_isValid;
}

QString OAIResourceAttributes::getName() const {
    return m_name;
}
void OAIResourceAttributes::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceAttributes::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceAttributes::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIResourceAttributes::getPath() const {
    return m_path;
}
void OAIResourceAttributes::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIResourceAttributes::is_path_Set() const{
    return m_path_isSet;
}

bool OAIResourceAttributes::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIResourceAttributes::isPreviewable() const {
    return m_previewable;
}
void OAIResourceAttributes::setPreviewable(const bool &previewable) {
    m_previewable = previewable;
    m_previewable_isSet = true;
}

bool OAIResourceAttributes::is_previewable_Set() const{
    return m_previewable_isSet;
}

bool OAIResourceAttributes::is_previewable_Valid() const{
    return m_previewable_isValid;
}

qint64 OAIResourceAttributes::getSize() const {
    return m_size;
}
void OAIResourceAttributes::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIResourceAttributes::is_size_Set() const{
    return m_size_isSet;
}

bool OAIResourceAttributes::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIResourceAttributes::getType() const {
    return m_type;
}
void OAIResourceAttributes::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIResourceAttributes::is_type_Set() const{
    return m_type_isSet;
}

bool OAIResourceAttributes::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIResourceAttributes::getUpdatedAt() const {
    return m_updated_at;
}
void OAIResourceAttributes::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIResourceAttributes::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIResourceAttributes::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

qint32 OAIResourceAttributes::getUpdatedTime() const {
    return m_updated_time;
}
void OAIResourceAttributes::setUpdatedTime(const qint32 &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIResourceAttributes::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIResourceAttributes::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QDateTime OAIResourceAttributes::getUploadDate() const {
    return m_upload_date;
}
void OAIResourceAttributes::setUploadDate(const QDateTime &upload_date) {
    m_upload_date = upload_date;
    m_upload_date_isSet = true;
}

bool OAIResourceAttributes::is_upload_date_Set() const{
    return m_upload_date_isSet;
}

bool OAIResourceAttributes::is_upload_date_Valid() const{
    return m_upload_date_isValid;
}

bool OAIResourceAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accessed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previewable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
