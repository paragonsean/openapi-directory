/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNotificationByIdRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNotificationByIdRequestBody::OAIUpdateNotificationByIdRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNotificationByIdRequestBody::OAIUpdateNotificationByIdRequestBody() {
    this->initializeModel();
}

OAIUpdateNotificationByIdRequestBody::~OAIUpdateNotificationByIdRequestBody() {}

void OAIUpdateNotificationByIdRequestBody::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_send_email_isSet = false;
    m_send_email_isValid = false;

    m_usernames_isSet = false;
    m_usernames_isValid = false;
}

void OAIUpdateNotificationByIdRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNotificationByIdRequestBody::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_send_email_isValid = ::OpenAPI::fromJsonValue(m_send_email, json[QString("sendEmail")]);
    m_send_email_isSet = !json[QString("sendEmail")].isNull() && m_send_email_isValid;

    m_usernames_isValid = ::OpenAPI::fromJsonValue(m_usernames, json[QString("usernames")]);
    m_usernames_isSet = !json[QString("usernames")].isNull() && m_usernames_isValid;
}

QString OAIUpdateNotificationByIdRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNotificationByIdRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_recipients.size() > 0) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_send_email_isSet) {
        obj.insert(QString("sendEmail"), ::OpenAPI::toJsonValue(m_send_email));
    }
    if (m_usernames.size() > 0) {
        obj.insert(QString("usernames"), ::OpenAPI::toJsonValue(m_usernames));
    }
    return obj;
}

QString OAIUpdateNotificationByIdRequestBody::getAction() const {
    return m_action;
}
void OAIUpdateNotificationByIdRequestBody::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIUpdateNotificationByIdRequestBody::is_action_Set() const{
    return m_action_isSet;
}

bool OAIUpdateNotificationByIdRequestBody::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIUpdateNotificationByIdRequestBody::getMessage() const {
    return m_message;
}
void OAIUpdateNotificationByIdRequestBody::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIUpdateNotificationByIdRequestBody::is_message_Set() const{
    return m_message_isSet;
}

bool OAIUpdateNotificationByIdRequestBody::is_message_Valid() const{
    return m_message_isValid;
}

QList<QString> OAIUpdateNotificationByIdRequestBody::getRecipients() const {
    return m_recipients;
}
void OAIUpdateNotificationByIdRequestBody::setRecipients(const QList<QString> &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAIUpdateNotificationByIdRequestBody::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAIUpdateNotificationByIdRequestBody::is_recipients_Valid() const{
    return m_recipients_isValid;
}

bool OAIUpdateNotificationByIdRequestBody::isSendEmail() const {
    return m_send_email;
}
void OAIUpdateNotificationByIdRequestBody::setSendEmail(const bool &send_email) {
    m_send_email = send_email;
    m_send_email_isSet = true;
}

bool OAIUpdateNotificationByIdRequestBody::is_send_email_Set() const{
    return m_send_email_isSet;
}

bool OAIUpdateNotificationByIdRequestBody::is_send_email_Valid() const{
    return m_send_email_isValid;
}

QList<QString> OAIUpdateNotificationByIdRequestBody::getUsernames() const {
    return m_usernames;
}
void OAIUpdateNotificationByIdRequestBody::setUsernames(const QList<QString> &usernames) {
    m_usernames = usernames;
    m_usernames_isSet = true;
}

bool OAIUpdateNotificationByIdRequestBody::is_usernames_Set() const{
    return m_usernames_isSet;
}

bool OAIUpdateNotificationByIdRequestBody::is_usernames_Valid() const{
    return m_usernames_isValid;
}

bool OAIUpdateNotificationByIdRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usernames.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNotificationByIdRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
