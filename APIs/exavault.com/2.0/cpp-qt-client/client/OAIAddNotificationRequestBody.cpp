/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddNotificationRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddNotificationRequestBody::OAIAddNotificationRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddNotificationRequestBody::OAIAddNotificationRequestBody() {
    this->initializeModel();
}

OAIAddNotificationRequestBody::~OAIAddNotificationRequestBody() {}

void OAIAddNotificationRequestBody::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_send_email_isSet = false;
    m_send_email_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_usernames_isSet = false;
    m_usernames_isValid = false;
}

void OAIAddNotificationRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddNotificationRequestBody::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_send_email_isValid = ::OpenAPI::fromJsonValue(m_send_email, json[QString("sendEmail")]);
    m_send_email_isSet = !json[QString("sendEmail")].isNull() && m_send_email_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_usernames_isValid = ::OpenAPI::fromJsonValue(m_usernames, json[QString("usernames")]);
    m_usernames_isSet = !json[QString("usernames")].isNull() && m_usernames_isValid;
}

QString OAIAddNotificationRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddNotificationRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_recipients.size() > 0) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_send_email_isSet) {
        obj.insert(QString("sendEmail"), ::OpenAPI::toJsonValue(m_send_email));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_usernames.size() > 0) {
        obj.insert(QString("usernames"), ::OpenAPI::toJsonValue(m_usernames));
    }
    return obj;
}

QString OAIAddNotificationRequestBody::getAction() const {
    return m_action;
}
void OAIAddNotificationRequestBody::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIAddNotificationRequestBody::is_action_Set() const{
    return m_action_isSet;
}

bool OAIAddNotificationRequestBody::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIAddNotificationRequestBody::getMessage() const {
    return m_message;
}
void OAIAddNotificationRequestBody::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAddNotificationRequestBody::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAddNotificationRequestBody::is_message_Valid() const{
    return m_message_isValid;
}

QList<QString> OAIAddNotificationRequestBody::getRecipients() const {
    return m_recipients;
}
void OAIAddNotificationRequestBody::setRecipients(const QList<QString> &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAIAddNotificationRequestBody::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAIAddNotificationRequestBody::is_recipients_Valid() const{
    return m_recipients_isValid;
}

QString OAIAddNotificationRequestBody::getResource() const {
    return m_resource;
}
void OAIAddNotificationRequestBody::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIAddNotificationRequestBody::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIAddNotificationRequestBody::is_resource_Valid() const{
    return m_resource_isValid;
}

bool OAIAddNotificationRequestBody::isSendEmail() const {
    return m_send_email;
}
void OAIAddNotificationRequestBody::setSendEmail(const bool &send_email) {
    m_send_email = send_email;
    m_send_email_isSet = true;
}

bool OAIAddNotificationRequestBody::is_send_email_Set() const{
    return m_send_email_isSet;
}

bool OAIAddNotificationRequestBody::is_send_email_Valid() const{
    return m_send_email_isValid;
}

QString OAIAddNotificationRequestBody::getType() const {
    return m_type;
}
void OAIAddNotificationRequestBody::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAddNotificationRequestBody::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAddNotificationRequestBody::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAIAddNotificationRequestBody::getUsernames() const {
    return m_usernames;
}
void OAIAddNotificationRequestBody::setUsernames(const QList<QString> &usernames) {
    m_usernames = usernames;
    m_usernames_isSet = true;
}

bool OAIAddNotificationRequestBody::is_usernames_Set() const{
    return m_usernames_isSet;
}

bool OAIAddNotificationRequestBody::is_usernames_Valid() const{
    return m_usernames_isValid;
}

bool OAIAddNotificationRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usernames.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddNotificationRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_resource_isValid && m_send_email_isValid && m_type_isValid && m_usernames_isValid && true;
}

} // namespace OpenAPI
