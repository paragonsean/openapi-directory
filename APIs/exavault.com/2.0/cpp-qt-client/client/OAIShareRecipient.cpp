/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShareRecipient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShareRecipient::OAIShareRecipient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShareRecipient::OAIShareRecipient() {
    this->initializeModel();
}

OAIShareRecipient::~OAIShareRecipient() {}

void OAIShareRecipient::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_received_isSet = false;
    m_received_isValid = false;

    m_sent_isSet = false;
    m_sent_isValid = false;

    m_share_id_isSet = false;
    m_share_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIShareRecipient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShareRecipient::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_received_isValid = ::OpenAPI::fromJsonValue(m_received, json[QString("received")]);
    m_received_isSet = !json[QString("received")].isNull() && m_received_isValid;

    m_sent_isValid = ::OpenAPI::fromJsonValue(m_sent, json[QString("sent")]);
    m_sent_isSet = !json[QString("sent")].isNull() && m_sent_isValid;

    m_share_id_isValid = ::OpenAPI::fromJsonValue(m_share_id, json[QString("shareId")]);
    m_share_id_isSet = !json[QString("shareId")].isNull() && m_share_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIShareRecipient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShareRecipient::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_received_isSet) {
        obj.insert(QString("received"), ::OpenAPI::toJsonValue(m_received));
    }
    if (m_sent_isSet) {
        obj.insert(QString("sent"), ::OpenAPI::toJsonValue(m_sent));
    }
    if (m_share_id_isSet) {
        obj.insert(QString("shareId"), ::OpenAPI::toJsonValue(m_share_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QDateTime OAIShareRecipient::getCreated() const {
    return m_created;
}
void OAIShareRecipient::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIShareRecipient::is_created_Set() const{
    return m_created_isSet;
}

bool OAIShareRecipient::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIShareRecipient::getEmail() const {
    return m_email;
}
void OAIShareRecipient::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIShareRecipient::is_email_Set() const{
    return m_email_isSet;
}

bool OAIShareRecipient::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIShareRecipient::getHash() const {
    return m_hash;
}
void OAIShareRecipient::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIShareRecipient::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIShareRecipient::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIShareRecipient::getId() const {
    return m_id;
}
void OAIShareRecipient::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShareRecipient::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShareRecipient::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIShareRecipient::isReceived() const {
    return m_received;
}
void OAIShareRecipient::setReceived(const bool &received) {
    m_received = received;
    m_received_isSet = true;
}

bool OAIShareRecipient::is_received_Set() const{
    return m_received_isSet;
}

bool OAIShareRecipient::is_received_Valid() const{
    return m_received_isValid;
}

bool OAIShareRecipient::isSent() const {
    return m_sent;
}
void OAIShareRecipient::setSent(const bool &sent) {
    m_sent = sent;
    m_sent_isSet = true;
}

bool OAIShareRecipient::is_sent_Set() const{
    return m_sent_isSet;
}

bool OAIShareRecipient::is_sent_Valid() const{
    return m_sent_isValid;
}

QString OAIShareRecipient::getShareId() const {
    return m_share_id;
}
void OAIShareRecipient::setShareId(const QString &share_id) {
    m_share_id = share_id;
    m_share_id_isSet = true;
}

bool OAIShareRecipient::is_share_id_Set() const{
    return m_share_id_isSet;
}

bool OAIShareRecipient::is_share_id_Valid() const{
    return m_share_id_isValid;
}

QString OAIShareRecipient::getType() const {
    return m_type;
}
void OAIShareRecipient::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIShareRecipient::is_type_Set() const{
    return m_type_isSet;
}

bool OAIShareRecipient::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIShareRecipient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShareRecipient::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
