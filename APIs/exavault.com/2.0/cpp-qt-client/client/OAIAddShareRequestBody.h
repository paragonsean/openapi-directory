/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAddShareRequestBody.h
 *
 * 
 */

#ifndef OAIAddShareRequestBody_H
#define OAIAddShareRequestBody_H

#include <QJsonObject>

#include "OAIAccessMode.h"
#include "OAIAddShareRequestBody_recipients_inner.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccessMode;
class OAIAddShareRequestBody_recipients_inner;

class OAIAddShareRequestBody : public OAIObject {
public:
    OAIAddShareRequestBody();
    OAIAddShareRequestBody(QString json);
    ~OAIAddShareRequestBody() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAccessMode getAccessMode() const;
    void setAccessMode(const OAIAccessMode &access_mode);
    bool is_access_mode_Set() const;
    bool is_access_mode_Valid() const;

    bool isEmbed() const;
    void setEmbed(const bool &embed);
    bool is_embed_Set() const;
    bool is_embed_Valid() const;

    QDateTime getExpiration() const;
    void setExpiration(const QDateTime &expiration);
    bool is_expiration_Set() const;
    bool is_expiration_Valid() const;

    bool isFileDropCreateFolders() const;
    void setFileDropCreateFolders(const bool &file_drop_create_folders);
    bool is_file_drop_create_folders_Set() const;
    bool is_file_drop_create_folders_Valid() const;

    bool isHasNotification() const;
    void setHasNotification(const bool &has_notification);
    bool is_has_notification_Set() const;
    bool is_has_notification_Valid() const;

    bool isIsPublic() const;
    void setIsPublic(const bool &is_public);
    bool is_is_public_Set() const;
    bool is_is_public_Valid() const;

    QString getMessageBody() const;
    void setMessageBody(const QString &message_body);
    bool is_message_body_Set() const;
    bool is_message_body_Valid() const;

    QString getMessageSubject() const;
    void setMessageSubject(const QString &message_subject);
    bool is_message_subject_Set() const;
    bool is_message_subject_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<QString> getNotificationEmails() const;
    void setNotificationEmails(const QList<QString> &notification_emails);
    bool is_notification_emails_Set() const;
    bool is_notification_emails_Valid() const;

    QString getPassword() const;
    void setPassword(const QString &password);
    bool is_password_Set() const;
    bool is_password_Valid() const;

    QList<OAIAddShareRequestBody_recipients_inner> getRecipients() const;
    void setRecipients(const QList<OAIAddShareRequestBody_recipients_inner> &recipients);
    bool is_recipients_Set() const;
    bool is_recipients_Valid() const;

    bool isRequireEmail() const;
    void setRequireEmail(const bool &require_email);
    bool is_require_email_Set() const;
    bool is_require_email_Valid() const;

    QList<QString> getResources() const;
    void setResources(const QList<QString> &resources);
    bool is_resources_Set() const;
    bool is_resources_Valid() const;

    bool isSendingLocalFiles() const;
    void setSendingLocalFiles(const bool &sending_local_files);
    bool is_sending_local_files_Set() const;
    bool is_sending_local_files_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAccessMode m_access_mode;
    bool m_access_mode_isSet;
    bool m_access_mode_isValid;

    bool m_embed;
    bool m_embed_isSet;
    bool m_embed_isValid;

    QDateTime m_expiration;
    bool m_expiration_isSet;
    bool m_expiration_isValid;

    bool m_file_drop_create_folders;
    bool m_file_drop_create_folders_isSet;
    bool m_file_drop_create_folders_isValid;

    bool m_has_notification;
    bool m_has_notification_isSet;
    bool m_has_notification_isValid;

    bool m_is_public;
    bool m_is_public_isSet;
    bool m_is_public_isValid;

    QString m_message_body;
    bool m_message_body_isSet;
    bool m_message_body_isValid;

    QString m_message_subject;
    bool m_message_subject_isSet;
    bool m_message_subject_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<QString> m_notification_emails;
    bool m_notification_emails_isSet;
    bool m_notification_emails_isValid;

    QString m_password;
    bool m_password_isSet;
    bool m_password_isValid;

    QList<OAIAddShareRequestBody_recipients_inner> m_recipients;
    bool m_recipients_isSet;
    bool m_recipients_isValid;

    bool m_require_email;
    bool m_require_email_isSet;
    bool m_require_email_isValid;

    QList<QString> m_resources;
    bool m_resources_isSet;
    bool m_resources_isValid;

    bool m_sending_local_files;
    bool m_sending_local_files_isSet;
    bool m_sending_local_files_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAddShareRequestBody)

#endif // OAIAddShareRequestBody_H
