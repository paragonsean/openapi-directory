/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormEntry_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormEntry_attributes::OAIFormEntry_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormEntry_attributes::OAIFormEntry_attributes() {
    this->initializeModel();
}

OAIFormEntry_attributes::~OAIFormEntry_attributes() {}

void OAIFormEntry_attributes::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_paths_isSet = false;
    m_paths_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIFormEntry_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormEntry_attributes::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_paths_isValid = ::OpenAPI::fromJsonValue(m_paths, json[QString("paths")]);
    m_paths_isSet = !json[QString("paths")].isNull() && m_paths_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIFormEntry_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormEntry_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_paths.size() > 0) {
        obj.insert(QString("paths"), ::OpenAPI::toJsonValue(m_paths));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QDateTime OAIFormEntry_attributes::getCreated() const {
    return m_created;
}
void OAIFormEntry_attributes::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIFormEntry_attributes::is_created_Set() const{
    return m_created_isSet;
}

bool OAIFormEntry_attributes::is_created_Valid() const{
    return m_created_isValid;
}

QList<OAIFormEntryField> OAIFormEntry_attributes::getFields() const {
    return m_fields;
}
void OAIFormEntry_attributes::setFields(const QList<OAIFormEntryField> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIFormEntry_attributes::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIFormEntry_attributes::is_fields_Valid() const{
    return m_fields_isValid;
}

QDateTime OAIFormEntry_attributes::getModified() const {
    return m_modified;
}
void OAIFormEntry_attributes::setModified(const QDateTime &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAIFormEntry_attributes::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAIFormEntry_attributes::is_modified_Valid() const{
    return m_modified_isValid;
}

QList<QString> OAIFormEntry_attributes::getPaths() const {
    return m_paths;
}
void OAIFormEntry_attributes::setPaths(const QList<QString> &paths) {
    m_paths = paths;
    m_paths_isSet = true;
}

bool OAIFormEntry_attributes::is_paths_Set() const{
    return m_paths_isSet;
}

bool OAIFormEntry_attributes::is_paths_Valid() const{
    return m_paths_isValid;
}

QString OAIFormEntry_attributes::getStatus() const {
    return m_status;
}
void OAIFormEntry_attributes::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFormEntry_attributes::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFormEntry_attributes::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIFormEntry_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormEntry_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
