/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlanDetails.h
 *
 * 
 */

#ifndef OAIPlanDetails_H
#define OAIPlanDetails_H

#include <QJsonObject>

#include "OAIPlanDetails_webhookOptions.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPlanDetails_webhookOptions;

class OAIPlanDetails : public OAIObject {
public:
    OAIPlanDetails();
    OAIPlanDetails(QString json);
    ~OAIPlanDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getApiKeys() const;
    void setApiKeys(const qint32 &api_keys);
    bool is_api_keys_Set() const;
    bool is_api_keys_Valid() const;

    qint32 getApiTokens() const;
    void setApiTokens(const qint32 &api_tokens);
    bool is_api_tokens_Set() const;
    bool is_api_tokens_Valid() const;

    bool isColorSchema() const;
    void setColorSchema(const bool &color_schema);
    bool is_color_schema_Set() const;
    bool is_color_schema_Valid() const;

    bool isCustomDomain() const;
    void setCustomDomain(const bool &custom_domain);
    bool is_custom_domain_Set() const;
    bool is_custom_domain_Valid() const;

    bool isCustomName() const;
    void setCustomName(const bool &custom_name);
    bool is_custom_name_Set() const;
    bool is_custom_name_Valid() const;

    bool isDirectLinks() const;
    void setDirectLinks(const bool &direct_links);
    bool is_direct_links_Set() const;
    bool is_direct_links_Valid() const;

    bool isIpWhitelist() const;
    void setIpWhitelist(const bool &ip_whitelist);
    bool is_ip_whitelist_Set() const;
    bool is_ip_whitelist_Valid() const;

    QList<QString> getSharingOptions() const;
    void setSharingOptions(const QList<QString> &sharing_options);
    bool is_sharing_options_Set() const;
    bool is_sharing_options_Valid() const;

    qint32 getSshKeys() const;
    void setSshKeys(const qint32 &ssh_keys);
    bool is_ssh_keys_Set() const;
    bool is_ssh_keys_Valid() const;

    qint32 getStorageAddOn() const;
    void setStorageAddOn(const qint32 &storage_add_on);
    bool is_storage_add_on_Set() const;
    bool is_storage_add_on_Valid() const;

    bool isUnlimitedUsers() const;
    void setUnlimitedUsers(const bool &unlimited_users);
    bool is_unlimited_users_Set() const;
    bool is_unlimited_users_Valid() const;

    bool isUserExpiration() const;
    void setUserExpiration(const bool &user_expiration);
    bool is_user_expiration_Set() const;
    bool is_user_expiration_Valid() const;

    bool isUserImport() const;
    void setUserImport(const bool &user_import);
    bool is_user_import_Set() const;
    bool is_user_import_Valid() const;

    OAIPlanDetails_webhookOptions getWebhookOptions() const;
    void setWebhookOptions(const OAIPlanDetails_webhookOptions &webhook_options);
    bool is_webhook_options_Set() const;
    bool is_webhook_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_api_keys;
    bool m_api_keys_isSet;
    bool m_api_keys_isValid;

    qint32 m_api_tokens;
    bool m_api_tokens_isSet;
    bool m_api_tokens_isValid;

    bool m_color_schema;
    bool m_color_schema_isSet;
    bool m_color_schema_isValid;

    bool m_custom_domain;
    bool m_custom_domain_isSet;
    bool m_custom_domain_isValid;

    bool m_custom_name;
    bool m_custom_name_isSet;
    bool m_custom_name_isValid;

    bool m_direct_links;
    bool m_direct_links_isSet;
    bool m_direct_links_isValid;

    bool m_ip_whitelist;
    bool m_ip_whitelist_isSet;
    bool m_ip_whitelist_isValid;

    QList<QString> m_sharing_options;
    bool m_sharing_options_isSet;
    bool m_sharing_options_isValid;

    qint32 m_ssh_keys;
    bool m_ssh_keys_isSet;
    bool m_ssh_keys_isValid;

    qint32 m_storage_add_on;
    bool m_storage_add_on_isSet;
    bool m_storage_add_on_isValid;

    bool m_unlimited_users;
    bool m_unlimited_users_isSet;
    bool m_unlimited_users_isValid;

    bool m_user_expiration;
    bool m_user_expiration_isSet;
    bool m_user_expiration_isValid;

    bool m_user_import;
    bool m_user_import_isSet;
    bool m_user_import_isValid;

    OAIPlanDetails_webhookOptions m_webhook_options;
    bool m_webhook_options_isSet;
    bool m_webhook_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlanDetails)

#endif // OAIPlanDetails_H
