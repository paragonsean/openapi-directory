/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddShareRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddShareRequestBody::OAIAddShareRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddShareRequestBody::OAIAddShareRequestBody() {
    this->initializeModel();
}

OAIAddShareRequestBody::~OAIAddShareRequestBody() {}

void OAIAddShareRequestBody::initializeModel() {

    m_access_mode_isSet = false;
    m_access_mode_isValid = false;

    m_embed_isSet = false;
    m_embed_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_file_drop_create_folders_isSet = false;
    m_file_drop_create_folders_isValid = false;

    m_has_notification_isSet = false;
    m_has_notification_isValid = false;

    m_is_public_isSet = false;
    m_is_public_isValid = false;

    m_message_body_isSet = false;
    m_message_body_isValid = false;

    m_message_subject_isSet = false;
    m_message_subject_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_emails_isSet = false;
    m_notification_emails_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_require_email_isSet = false;
    m_require_email_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_sending_local_files_isSet = false;
    m_sending_local_files_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAddShareRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddShareRequestBody::fromJsonObject(QJsonObject json) {

    m_access_mode_isValid = ::OpenAPI::fromJsonValue(m_access_mode, json[QString("accessMode")]);
    m_access_mode_isSet = !json[QString("accessMode")].isNull() && m_access_mode_isValid;

    m_embed_isValid = ::OpenAPI::fromJsonValue(m_embed, json[QString("embed")]);
    m_embed_isSet = !json[QString("embed")].isNull() && m_embed_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_file_drop_create_folders_isValid = ::OpenAPI::fromJsonValue(m_file_drop_create_folders, json[QString("fileDropCreateFolders")]);
    m_file_drop_create_folders_isSet = !json[QString("fileDropCreateFolders")].isNull() && m_file_drop_create_folders_isValid;

    m_has_notification_isValid = ::OpenAPI::fromJsonValue(m_has_notification, json[QString("hasNotification")]);
    m_has_notification_isSet = !json[QString("hasNotification")].isNull() && m_has_notification_isValid;

    m_is_public_isValid = ::OpenAPI::fromJsonValue(m_is_public, json[QString("isPublic")]);
    m_is_public_isSet = !json[QString("isPublic")].isNull() && m_is_public_isValid;

    m_message_body_isValid = ::OpenAPI::fromJsonValue(m_message_body, json[QString("messageBody")]);
    m_message_body_isSet = !json[QString("messageBody")].isNull() && m_message_body_isValid;

    m_message_subject_isValid = ::OpenAPI::fromJsonValue(m_message_subject, json[QString("messageSubject")]);
    m_message_subject_isSet = !json[QString("messageSubject")].isNull() && m_message_subject_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_emails_isValid = ::OpenAPI::fromJsonValue(m_notification_emails, json[QString("notificationEmails")]);
    m_notification_emails_isSet = !json[QString("notificationEmails")].isNull() && m_notification_emails_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_require_email_isValid = ::OpenAPI::fromJsonValue(m_require_email, json[QString("requireEmail")]);
    m_require_email_isSet = !json[QString("requireEmail")].isNull() && m_require_email_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_sending_local_files_isValid = ::OpenAPI::fromJsonValue(m_sending_local_files, json[QString("sendingLocalFiles")]);
    m_sending_local_files_isSet = !json[QString("sendingLocalFiles")].isNull() && m_sending_local_files_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAddShareRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddShareRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_access_mode.isSet()) {
        obj.insert(QString("accessMode"), ::OpenAPI::toJsonValue(m_access_mode));
    }
    if (m_embed_isSet) {
        obj.insert(QString("embed"), ::OpenAPI::toJsonValue(m_embed));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_file_drop_create_folders_isSet) {
        obj.insert(QString("fileDropCreateFolders"), ::OpenAPI::toJsonValue(m_file_drop_create_folders));
    }
    if (m_has_notification_isSet) {
        obj.insert(QString("hasNotification"), ::OpenAPI::toJsonValue(m_has_notification));
    }
    if (m_is_public_isSet) {
        obj.insert(QString("isPublic"), ::OpenAPI::toJsonValue(m_is_public));
    }
    if (m_message_body_isSet) {
        obj.insert(QString("messageBody"), ::OpenAPI::toJsonValue(m_message_body));
    }
    if (m_message_subject_isSet) {
        obj.insert(QString("messageSubject"), ::OpenAPI::toJsonValue(m_message_subject));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_emails.size() > 0) {
        obj.insert(QString("notificationEmails"), ::OpenAPI::toJsonValue(m_notification_emails));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_recipients.size() > 0) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_require_email_isSet) {
        obj.insert(QString("requireEmail"), ::OpenAPI::toJsonValue(m_require_email));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_sending_local_files_isSet) {
        obj.insert(QString("sendingLocalFiles"), ::OpenAPI::toJsonValue(m_sending_local_files));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAccessMode OAIAddShareRequestBody::getAccessMode() const {
    return m_access_mode;
}
void OAIAddShareRequestBody::setAccessMode(const OAIAccessMode &access_mode) {
    m_access_mode = access_mode;
    m_access_mode_isSet = true;
}

bool OAIAddShareRequestBody::is_access_mode_Set() const{
    return m_access_mode_isSet;
}

bool OAIAddShareRequestBody::is_access_mode_Valid() const{
    return m_access_mode_isValid;
}

bool OAIAddShareRequestBody::isEmbed() const {
    return m_embed;
}
void OAIAddShareRequestBody::setEmbed(const bool &embed) {
    m_embed = embed;
    m_embed_isSet = true;
}

bool OAIAddShareRequestBody::is_embed_Set() const{
    return m_embed_isSet;
}

bool OAIAddShareRequestBody::is_embed_Valid() const{
    return m_embed_isValid;
}

QDateTime OAIAddShareRequestBody::getExpiration() const {
    return m_expiration;
}
void OAIAddShareRequestBody::setExpiration(const QDateTime &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIAddShareRequestBody::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIAddShareRequestBody::is_expiration_Valid() const{
    return m_expiration_isValid;
}

bool OAIAddShareRequestBody::isFileDropCreateFolders() const {
    return m_file_drop_create_folders;
}
void OAIAddShareRequestBody::setFileDropCreateFolders(const bool &file_drop_create_folders) {
    m_file_drop_create_folders = file_drop_create_folders;
    m_file_drop_create_folders_isSet = true;
}

bool OAIAddShareRequestBody::is_file_drop_create_folders_Set() const{
    return m_file_drop_create_folders_isSet;
}

bool OAIAddShareRequestBody::is_file_drop_create_folders_Valid() const{
    return m_file_drop_create_folders_isValid;
}

bool OAIAddShareRequestBody::isHasNotification() const {
    return m_has_notification;
}
void OAIAddShareRequestBody::setHasNotification(const bool &has_notification) {
    m_has_notification = has_notification;
    m_has_notification_isSet = true;
}

bool OAIAddShareRequestBody::is_has_notification_Set() const{
    return m_has_notification_isSet;
}

bool OAIAddShareRequestBody::is_has_notification_Valid() const{
    return m_has_notification_isValid;
}

bool OAIAddShareRequestBody::isIsPublic() const {
    return m_is_public;
}
void OAIAddShareRequestBody::setIsPublic(const bool &is_public) {
    m_is_public = is_public;
    m_is_public_isSet = true;
}

bool OAIAddShareRequestBody::is_is_public_Set() const{
    return m_is_public_isSet;
}

bool OAIAddShareRequestBody::is_is_public_Valid() const{
    return m_is_public_isValid;
}

QString OAIAddShareRequestBody::getMessageBody() const {
    return m_message_body;
}
void OAIAddShareRequestBody::setMessageBody(const QString &message_body) {
    m_message_body = message_body;
    m_message_body_isSet = true;
}

bool OAIAddShareRequestBody::is_message_body_Set() const{
    return m_message_body_isSet;
}

bool OAIAddShareRequestBody::is_message_body_Valid() const{
    return m_message_body_isValid;
}

QString OAIAddShareRequestBody::getMessageSubject() const {
    return m_message_subject;
}
void OAIAddShareRequestBody::setMessageSubject(const QString &message_subject) {
    m_message_subject = message_subject;
    m_message_subject_isSet = true;
}

bool OAIAddShareRequestBody::is_message_subject_Set() const{
    return m_message_subject_isSet;
}

bool OAIAddShareRequestBody::is_message_subject_Valid() const{
    return m_message_subject_isValid;
}

QString OAIAddShareRequestBody::getName() const {
    return m_name;
}
void OAIAddShareRequestBody::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAddShareRequestBody::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAddShareRequestBody::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIAddShareRequestBody::getNotificationEmails() const {
    return m_notification_emails;
}
void OAIAddShareRequestBody::setNotificationEmails(const QList<QString> &notification_emails) {
    m_notification_emails = notification_emails;
    m_notification_emails_isSet = true;
}

bool OAIAddShareRequestBody::is_notification_emails_Set() const{
    return m_notification_emails_isSet;
}

bool OAIAddShareRequestBody::is_notification_emails_Valid() const{
    return m_notification_emails_isValid;
}

QString OAIAddShareRequestBody::getPassword() const {
    return m_password;
}
void OAIAddShareRequestBody::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIAddShareRequestBody::is_password_Set() const{
    return m_password_isSet;
}

bool OAIAddShareRequestBody::is_password_Valid() const{
    return m_password_isValid;
}

QList<OAIAddShareRequestBody_recipients_inner> OAIAddShareRequestBody::getRecipients() const {
    return m_recipients;
}
void OAIAddShareRequestBody::setRecipients(const QList<OAIAddShareRequestBody_recipients_inner> &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAIAddShareRequestBody::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAIAddShareRequestBody::is_recipients_Valid() const{
    return m_recipients_isValid;
}

bool OAIAddShareRequestBody::isRequireEmail() const {
    return m_require_email;
}
void OAIAddShareRequestBody::setRequireEmail(const bool &require_email) {
    m_require_email = require_email;
    m_require_email_isSet = true;
}

bool OAIAddShareRequestBody::is_require_email_Set() const{
    return m_require_email_isSet;
}

bool OAIAddShareRequestBody::is_require_email_Valid() const{
    return m_require_email_isValid;
}

QList<QString> OAIAddShareRequestBody::getResources() const {
    return m_resources;
}
void OAIAddShareRequestBody::setResources(const QList<QString> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIAddShareRequestBody::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIAddShareRequestBody::is_resources_Valid() const{
    return m_resources_isValid;
}

bool OAIAddShareRequestBody::isSendingLocalFiles() const {
    return m_sending_local_files;
}
void OAIAddShareRequestBody::setSendingLocalFiles(const bool &sending_local_files) {
    m_sending_local_files = sending_local_files;
    m_sending_local_files_isSet = true;
}

bool OAIAddShareRequestBody::is_sending_local_files_Set() const{
    return m_sending_local_files_isSet;
}

bool OAIAddShareRequestBody::is_sending_local_files_Valid() const{
    return m_sending_local_files_isValid;
}

QString OAIAddShareRequestBody::getType() const {
    return m_type;
}
void OAIAddShareRequestBody::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAddShareRequestBody::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAddShareRequestBody::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAddShareRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_embed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_drop_create_folders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sending_local_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddShareRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
