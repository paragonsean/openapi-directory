/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormFieldUploadArea_settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormFieldUploadArea_settings::OAIFormFieldUploadArea_settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormFieldUploadArea_settings::OAIFormFieldUploadArea_settings() {
    this->initializeModel();
}

OAIFormFieldUploadArea_settings::~OAIFormFieldUploadArea_settings() {}

void OAIFormFieldUploadArea_settings::initializeModel() {

    m_file_types_isSet = false;
    m_file_types_isValid = false;
}

void OAIFormFieldUploadArea_settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormFieldUploadArea_settings::fromJsonObject(QJsonObject json) {

    m_file_types_isValid = ::OpenAPI::fromJsonValue(m_file_types, json[QString("fileTypes")]);
    m_file_types_isSet = !json[QString("fileTypes")].isNull() && m_file_types_isValid;
}

QString OAIFormFieldUploadArea_settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormFieldUploadArea_settings::asJsonObject() const {
    QJsonObject obj;
    if (m_file_types_isSet) {
        obj.insert(QString("fileTypes"), ::OpenAPI::toJsonValue(m_file_types));
    }
    return obj;
}

QString OAIFormFieldUploadArea_settings::getFileTypes() const {
    return m_file_types;
}
void OAIFormFieldUploadArea_settings::setFileTypes(const QString &file_types) {
    m_file_types = file_types;
    m_file_types_isSet = true;
}

bool OAIFormFieldUploadArea_settings::is_file_types_Set() const{
    return m_file_types_isSet;
}

bool OAIFormFieldUploadArea_settings::is_file_types_Valid() const{
    return m_file_types_isValid;
}

bool OAIFormFieldUploadArea_settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_types_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormFieldUploadArea_settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
