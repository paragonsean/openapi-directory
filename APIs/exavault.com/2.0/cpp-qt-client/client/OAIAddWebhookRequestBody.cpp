/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddWebhookRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddWebhookRequestBody::OAIAddWebhookRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddWebhookRequestBody::OAIAddWebhookRequestBody() {
    this->initializeModel();
}

OAIAddWebhookRequestBody::~OAIAddWebhookRequestBody() {}

void OAIAddWebhookRequestBody::initializeModel() {

    m_endpoint_url_isSet = false;
    m_endpoint_url_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_response_version_isSet = false;
    m_response_version_isValid = false;

    m_triggers_isSet = false;
    m_triggers_isValid = false;
}

void OAIAddWebhookRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddWebhookRequestBody::fromJsonObject(QJsonObject json) {

    m_endpoint_url_isValid = ::OpenAPI::fromJsonValue(m_endpoint_url, json[QString("endpointUrl")]);
    m_endpoint_url_isSet = !json[QString("endpointUrl")].isNull() && m_endpoint_url_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_response_version_isValid = ::OpenAPI::fromJsonValue(m_response_version, json[QString("responseVersion")]);
    m_response_version_isSet = !json[QString("responseVersion")].isNull() && m_response_version_isValid;

    m_triggers_isValid = ::OpenAPI::fromJsonValue(m_triggers, json[QString("triggers")]);
    m_triggers_isSet = !json[QString("triggers")].isNull() && m_triggers_isValid;
}

QString OAIAddWebhookRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddWebhookRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_url_isSet) {
        obj.insert(QString("endpointUrl"), ::OpenAPI::toJsonValue(m_endpoint_url));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_response_version_isSet) {
        obj.insert(QString("responseVersion"), ::OpenAPI::toJsonValue(m_response_version));
    }
    if (m_triggers.isSet()) {
        obj.insert(QString("triggers"), ::OpenAPI::toJsonValue(m_triggers));
    }
    return obj;
}

QString OAIAddWebhookRequestBody::getEndpointUrl() const {
    return m_endpoint_url;
}
void OAIAddWebhookRequestBody::setEndpointUrl(const QString &endpoint_url) {
    m_endpoint_url = endpoint_url;
    m_endpoint_url_isSet = true;
}

bool OAIAddWebhookRequestBody::is_endpoint_url_Set() const{
    return m_endpoint_url_isSet;
}

bool OAIAddWebhookRequestBody::is_endpoint_url_Valid() const{
    return m_endpoint_url_isValid;
}

QString OAIAddWebhookRequestBody::getResource() const {
    return m_resource;
}
void OAIAddWebhookRequestBody::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIAddWebhookRequestBody::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIAddWebhookRequestBody::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIAddWebhookRequestBody::getResponseVersion() const {
    return m_response_version;
}
void OAIAddWebhookRequestBody::setResponseVersion(const QString &response_version) {
    m_response_version = response_version;
    m_response_version_isSet = true;
}

bool OAIAddWebhookRequestBody::is_response_version_Set() const{
    return m_response_version_isSet;
}

bool OAIAddWebhookRequestBody::is_response_version_Valid() const{
    return m_response_version_isValid;
}

OAIWebhookTriggers OAIAddWebhookRequestBody::getTriggers() const {
    return m_triggers;
}
void OAIAddWebhookRequestBody::setTriggers(const OAIWebhookTriggers &triggers) {
    m_triggers = triggers;
    m_triggers_isSet = true;
}

bool OAIAddWebhookRequestBody::is_triggers_Set() const{
    return m_triggers_isSet;
}

bool OAIAddWebhookRequestBody::is_triggers_Valid() const{
    return m_triggers_isValid;
}

bool OAIAddWebhookRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddWebhookRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_url_isValid && true;
}

} // namespace OpenAPI
