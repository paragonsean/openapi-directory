/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddFolderRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddFolderRequestBody::OAIAddFolderRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddFolderRequestBody::OAIAddFolderRequestBody() {
    this->initializeModel();
}

OAIAddFolderRequestBody::~OAIAddFolderRequestBody() {}

void OAIAddFolderRequestBody::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_resource_isSet = false;
    m_parent_resource_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAIAddFolderRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddFolderRequestBody::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_resource_isValid = ::OpenAPI::fromJsonValue(m_parent_resource, json[QString("parentResource")]);
    m_parent_resource_isSet = !json[QString("parentResource")].isNull() && m_parent_resource_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAIAddFolderRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddFolderRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_resource_isSet) {
        obj.insert(QString("parentResource"), ::OpenAPI::toJsonValue(m_parent_resource));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

QString OAIAddFolderRequestBody::getName() const {
    return m_name;
}
void OAIAddFolderRequestBody::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAddFolderRequestBody::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAddFolderRequestBody::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAddFolderRequestBody::getParentResource() const {
    return m_parent_resource;
}
void OAIAddFolderRequestBody::setParentResource(const QString &parent_resource) {
    m_parent_resource = parent_resource;
    m_parent_resource_isSet = true;
}

bool OAIAddFolderRequestBody::is_parent_resource_Set() const{
    return m_parent_resource_isSet;
}

bool OAIAddFolderRequestBody::is_parent_resource_Valid() const{
    return m_parent_resource_isValid;
}

QString OAIAddFolderRequestBody::getPath() const {
    return m_path;
}
void OAIAddFolderRequestBody::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIAddFolderRequestBody::is_path_Set() const{
    return m_path_isSet;
}

bool OAIAddFolderRequestBody::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIAddFolderRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddFolderRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
