/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISharesApi_H
#define OAI_OAISharesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddShareRequestBody.h"
#include "OAIEmptyResponse.h"
#include "OAIShareCollectionResponse.h"
#include "OAIShareResponse.h"
#include "OAIUpdateShareRequestBody.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISharesApi : public QObject {
    Q_OBJECT

public:
    OAISharesApi(const int timeOut = 0);
    ~OAISharesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  oai_add_share_request_body OAIAddShareRequestBody [optional]
    */
    virtual void addShare(const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<OAIAddShareRequestBody> &oai_add_share_request_body = ::OpenAPI::OptionalParam<OAIAddShareRequestBody>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  id qint32 [required]
    */
    virtual void completeDirectSend(const QString &ev_api_key, const QString &ev_access_token, const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    */
    virtual void deleteShareById(const qint32 &id, const QString &ev_api_key, const QString &ev_access_token);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  include QString [optional]
    */
    virtual void getShareById(const qint32 &id, const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  scope QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  include QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  recipient QString [optional]
    * @param[in]  message QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  search QString [optional]
    */
    virtual void listShares(const QString &ev_api_key, const QString &ev_access_token, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recipient = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  ev_api_key QString [required]
    * @param[in]  ev_access_token QString [required]
    * @param[in]  oai_update_share_request_body OAIUpdateShareRequestBody [required]
    */
    virtual void updateShareById(const qint32 &id, const QString &ev_api_key, const QString &ev_access_token, const OAIUpdateShareRequestBody &oai_update_share_request_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addShareCallback(OAIHttpRequestWorker *worker);
    void completeDirectSendCallback(OAIHttpRequestWorker *worker);
    void deleteShareByIdCallback(OAIHttpRequestWorker *worker);
    void getShareByIdCallback(OAIHttpRequestWorker *worker);
    void listSharesCallback(OAIHttpRequestWorker *worker);
    void updateShareByIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addShareSignal(OAIShareResponse summary);
    void completeDirectSendSignal(OAIShareResponse summary);
    void deleteShareByIdSignal(OAIEmptyResponse summary);
    void getShareByIdSignal(OAIShareResponse summary);
    void listSharesSignal(OAIShareCollectionResponse summary);
    void updateShareByIdSignal(OAIShareResponse summary);


    void addShareSignalFull(OAIHttpRequestWorker *worker, OAIShareResponse summary);
    void completeDirectSendSignalFull(OAIHttpRequestWorker *worker, OAIShareResponse summary);
    void deleteShareByIdSignalFull(OAIHttpRequestWorker *worker, OAIEmptyResponse summary);
    void getShareByIdSignalFull(OAIHttpRequestWorker *worker, OAIShareResponse summary);
    void listSharesSignalFull(OAIHttpRequestWorker *worker, OAIShareCollectionResponse summary);
    void updateShareByIdSignalFull(OAIHttpRequestWorker *worker, OAIShareResponse summary);

    Q_DECL_DEPRECATED_X("Use addShareSignalError() instead")
    void addShareSignalE(OAIShareResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addShareSignalError(OAIShareResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeDirectSendSignalError() instead")
    void completeDirectSendSignalE(OAIShareResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void completeDirectSendSignalError(OAIShareResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteShareByIdSignalError() instead")
    void deleteShareByIdSignalE(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteShareByIdSignalError(OAIEmptyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShareByIdSignalError() instead")
    void getShareByIdSignalE(OAIShareResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getShareByIdSignalError(OAIShareResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSharesSignalError() instead")
    void listSharesSignalE(OAIShareCollectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSharesSignalError(OAIShareCollectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateShareByIdSignalError() instead")
    void updateShareByIdSignalE(OAIShareResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateShareByIdSignalError(OAIShareResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addShareSignalErrorFull() instead")
    void addShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeDirectSendSignalErrorFull() instead")
    void completeDirectSendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeDirectSendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteShareByIdSignalErrorFull() instead")
    void deleteShareByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteShareByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShareByIdSignalErrorFull() instead")
    void getShareByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getShareByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSharesSignalErrorFull() instead")
    void listSharesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSharesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateShareByIdSignalErrorFull() instead")
    void updateShareByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateShareByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
