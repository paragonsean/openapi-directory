/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotification_relationships.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotification_relationships::OAINotification_relationships(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotification_relationships::OAINotification_relationships() {
    this->initializeModel();
}

OAINotification_relationships::~OAINotification_relationships() {}

void OAINotification_relationships::initializeModel() {

    m_owner_user_isSet = false;
    m_owner_user_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_share_isSet = false;
    m_share_isValid = false;
}

void OAINotification_relationships::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotification_relationships::fromJsonObject(QJsonObject json) {

    m_owner_user_isValid = ::OpenAPI::fromJsonValue(m_owner_user, json[QString("ownerUser")]);
    m_owner_user_isSet = !json[QString("ownerUser")].isNull() && m_owner_user_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_share_isValid = ::OpenAPI::fromJsonValue(m_share, json[QString("share")]);
    m_share_isSet = !json[QString("share")].isNull() && m_share_isValid;
}

QString OAINotification_relationships::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotification_relationships::asJsonObject() const {
    QJsonObject obj;
    if (m_owner_user.isSet()) {
        obj.insert(QString("ownerUser"), ::OpenAPI::toJsonValue(m_owner_user));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_share.isSet()) {
        obj.insert(QString("share"), ::OpenAPI::toJsonValue(m_share));
    }
    return obj;
}

OAINotification_relationships_ownerUser OAINotification_relationships::getOwnerUser() const {
    return m_owner_user;
}
void OAINotification_relationships::setOwnerUser(const OAINotification_relationships_ownerUser &owner_user) {
    m_owner_user = owner_user;
    m_owner_user_isSet = true;
}

bool OAINotification_relationships::is_owner_user_Set() const{
    return m_owner_user_isSet;
}

bool OAINotification_relationships::is_owner_user_Valid() const{
    return m_owner_user_isValid;
}

OAINotification_relationships_resource OAINotification_relationships::getResource() const {
    return m_resource;
}
void OAINotification_relationships::setResource(const OAINotification_relationships_resource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAINotification_relationships::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAINotification_relationships::is_resource_Valid() const{
    return m_resource_isValid;
}

OAINotification_relationships_share OAINotification_relationships::getShare() const {
    return m_share;
}
void OAINotification_relationships::setShare(const OAINotification_relationships_share &share) {
    m_share = share;
    m_share_isSet = true;
}

bool OAINotification_relationships::is_share_Set() const{
    return m_share_isSet;
}

bool OAINotification_relationships::is_share_Valid() const{
    return m_share_isValid;
}

bool OAINotification_relationships::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_owner_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_share.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotification_relationships::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
