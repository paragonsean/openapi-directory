/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountQuotaValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountQuotaValues::OAIAccountQuotaValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountQuotaValues::OAIAccountQuotaValues() {
    this->initializeModel();
}

OAIAccountQuotaValues::~OAIAccountQuotaValues() {}

void OAIAccountQuotaValues::initializeModel() {

    m_notice_enabled_isSet = false;
    m_notice_enabled_isValid = false;

    m_notice_threshold_isSet = false;
    m_notice_threshold_isValid = false;

    m_transactions_notice_enabled_isSet = false;
    m_transactions_notice_enabled_isValid = false;

    m_transactions_notice_threshold_isSet = false;
    m_transactions_notice_threshold_isValid = false;
}

void OAIAccountQuotaValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountQuotaValues::fromJsonObject(QJsonObject json) {

    m_notice_enabled_isValid = ::OpenAPI::fromJsonValue(m_notice_enabled, json[QString("noticeEnabled")]);
    m_notice_enabled_isSet = !json[QString("noticeEnabled")].isNull() && m_notice_enabled_isValid;

    m_notice_threshold_isValid = ::OpenAPI::fromJsonValue(m_notice_threshold, json[QString("noticeThreshold")]);
    m_notice_threshold_isSet = !json[QString("noticeThreshold")].isNull() && m_notice_threshold_isValid;

    m_transactions_notice_enabled_isValid = ::OpenAPI::fromJsonValue(m_transactions_notice_enabled, json[QString("transactionsNoticeEnabled")]);
    m_transactions_notice_enabled_isSet = !json[QString("transactionsNoticeEnabled")].isNull() && m_transactions_notice_enabled_isValid;

    m_transactions_notice_threshold_isValid = ::OpenAPI::fromJsonValue(m_transactions_notice_threshold, json[QString("transactionsNoticeThreshold")]);
    m_transactions_notice_threshold_isSet = !json[QString("transactionsNoticeThreshold")].isNull() && m_transactions_notice_threshold_isValid;
}

QString OAIAccountQuotaValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountQuotaValues::asJsonObject() const {
    QJsonObject obj;
    if (m_notice_enabled_isSet) {
        obj.insert(QString("noticeEnabled"), ::OpenAPI::toJsonValue(m_notice_enabled));
    }
    if (m_notice_threshold_isSet) {
        obj.insert(QString("noticeThreshold"), ::OpenAPI::toJsonValue(m_notice_threshold));
    }
    if (m_transactions_notice_enabled_isSet) {
        obj.insert(QString("transactionsNoticeEnabled"), ::OpenAPI::toJsonValue(m_transactions_notice_enabled));
    }
    if (m_transactions_notice_threshold_isSet) {
        obj.insert(QString("transactionsNoticeThreshold"), ::OpenAPI::toJsonValue(m_transactions_notice_threshold));
    }
    return obj;
}

bool OAIAccountQuotaValues::isNoticeEnabled() const {
    return m_notice_enabled;
}
void OAIAccountQuotaValues::setNoticeEnabled(const bool &notice_enabled) {
    m_notice_enabled = notice_enabled;
    m_notice_enabled_isSet = true;
}

bool OAIAccountQuotaValues::is_notice_enabled_Set() const{
    return m_notice_enabled_isSet;
}

bool OAIAccountQuotaValues::is_notice_enabled_Valid() const{
    return m_notice_enabled_isValid;
}

qint32 OAIAccountQuotaValues::getNoticeThreshold() const {
    return m_notice_threshold;
}
void OAIAccountQuotaValues::setNoticeThreshold(const qint32 &notice_threshold) {
    m_notice_threshold = notice_threshold;
    m_notice_threshold_isSet = true;
}

bool OAIAccountQuotaValues::is_notice_threshold_Set() const{
    return m_notice_threshold_isSet;
}

bool OAIAccountQuotaValues::is_notice_threshold_Valid() const{
    return m_notice_threshold_isValid;
}

bool OAIAccountQuotaValues::isTransactionsNoticeEnabled() const {
    return m_transactions_notice_enabled;
}
void OAIAccountQuotaValues::setTransactionsNoticeEnabled(const bool &transactions_notice_enabled) {
    m_transactions_notice_enabled = transactions_notice_enabled;
    m_transactions_notice_enabled_isSet = true;
}

bool OAIAccountQuotaValues::is_transactions_notice_enabled_Set() const{
    return m_transactions_notice_enabled_isSet;
}

bool OAIAccountQuotaValues::is_transactions_notice_enabled_Valid() const{
    return m_transactions_notice_enabled_isValid;
}

qint32 OAIAccountQuotaValues::getTransactionsNoticeThreshold() const {
    return m_transactions_notice_threshold;
}
void OAIAccountQuotaValues::setTransactionsNoticeThreshold(const qint32 &transactions_notice_threshold) {
    m_transactions_notice_threshold = transactions_notice_threshold;
    m_transactions_notice_threshold_isSet = true;
}

bool OAIAccountQuotaValues::is_transactions_notice_threshold_Set() const{
    return m_transactions_notice_threshold_isSet;
}

bool OAIAccountQuotaValues::is_transactions_notice_threshold_Valid() const{
    return m_transactions_notice_threshold_isValid;
}

bool OAIAccountQuotaValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notice_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notice_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions_notice_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions_notice_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountQuotaValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
