/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookTriggers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookTriggers::OAIWebhookTriggers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookTriggers::OAIWebhookTriggers() {
    this->initializeModel();
}

OAIWebhookTriggers::~OAIWebhookTriggers() {}

void OAIWebhookTriggers::initializeModel() {

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_shares_isSet = false;
    m_shares_isValid = false;
}

void OAIWebhookTriggers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookTriggers::fromJsonObject(QJsonObject json) {

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_shares_isValid = ::OpenAPI::fromJsonValue(m_shares, json[QString("shares")]);
    m_shares_isSet = !json[QString("shares")].isNull() && m_shares_isValid;
}

QString OAIWebhookTriggers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookTriggers::asJsonObject() const {
    QJsonObject obj;
    if (m_resources.isSet()) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_shares.isSet()) {
        obj.insert(QString("shares"), ::OpenAPI::toJsonValue(m_shares));
    }
    return obj;
}

OAIWebhookTriggers_resources OAIWebhookTriggers::getResources() const {
    return m_resources;
}
void OAIWebhookTriggers::setResources(const OAIWebhookTriggers_resources &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIWebhookTriggers::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIWebhookTriggers::is_resources_Valid() const{
    return m_resources_isValid;
}

OAIWebhookTriggers_shares OAIWebhookTriggers::getShares() const {
    return m_shares;
}
void OAIWebhookTriggers::setShares(const OAIWebhookTriggers_shares &shares) {
    m_shares = shares;
    m_shares_isSet = true;
}

bool OAIWebhookTriggers::is_shares_Set() const{
    return m_shares_isSet;
}

bool OAIWebhookTriggers::is_shares_Valid() const{
    return m_shares_isValid;
}

bool OAIWebhookTriggers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shares.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookTriggers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
