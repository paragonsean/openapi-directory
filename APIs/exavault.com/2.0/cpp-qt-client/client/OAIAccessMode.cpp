/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessMode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessMode::OAIAccessMode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessMode::OAIAccessMode() {
    this->initializeModel();
}

OAIAccessMode::~OAIAccessMode() {}

void OAIAccessMode::initializeModel() {

    m_r_delete_isSet = false;
    m_r_delete_isValid = false;

    m_download_isSet = false;
    m_download_isValid = false;

    m_modify_isSet = false;
    m_modify_isValid = false;

    m_upload_isSet = false;
    m_upload_isValid = false;
}

void OAIAccessMode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessMode::fromJsonObject(QJsonObject json) {

    m_r_delete_isValid = ::OpenAPI::fromJsonValue(m_r_delete, json[QString("delete")]);
    m_r_delete_isSet = !json[QString("delete")].isNull() && m_r_delete_isValid;

    m_download_isValid = ::OpenAPI::fromJsonValue(m_download, json[QString("download")]);
    m_download_isSet = !json[QString("download")].isNull() && m_download_isValid;

    m_modify_isValid = ::OpenAPI::fromJsonValue(m_modify, json[QString("modify")]);
    m_modify_isSet = !json[QString("modify")].isNull() && m_modify_isValid;

    m_upload_isValid = ::OpenAPI::fromJsonValue(m_upload, json[QString("upload")]);
    m_upload_isSet = !json[QString("upload")].isNull() && m_upload_isValid;
}

QString OAIAccessMode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessMode::asJsonObject() const {
    QJsonObject obj;
    if (m_r_delete_isSet) {
        obj.insert(QString("delete"), ::OpenAPI::toJsonValue(m_r_delete));
    }
    if (m_download_isSet) {
        obj.insert(QString("download"), ::OpenAPI::toJsonValue(m_download));
    }
    if (m_modify_isSet) {
        obj.insert(QString("modify"), ::OpenAPI::toJsonValue(m_modify));
    }
    if (m_upload_isSet) {
        obj.insert(QString("upload"), ::OpenAPI::toJsonValue(m_upload));
    }
    return obj;
}

bool OAIAccessMode::isRDelete() const {
    return m_r_delete;
}
void OAIAccessMode::setRDelete(const bool &r_delete) {
    m_r_delete = r_delete;
    m_r_delete_isSet = true;
}

bool OAIAccessMode::is_r_delete_Set() const{
    return m_r_delete_isSet;
}

bool OAIAccessMode::is_r_delete_Valid() const{
    return m_r_delete_isValid;
}

bool OAIAccessMode::isDownload() const {
    return m_download;
}
void OAIAccessMode::setDownload(const bool &download) {
    m_download = download;
    m_download_isSet = true;
}

bool OAIAccessMode::is_download_Set() const{
    return m_download_isSet;
}

bool OAIAccessMode::is_download_Valid() const{
    return m_download_isValid;
}

bool OAIAccessMode::isModify() const {
    return m_modify;
}
void OAIAccessMode::setModify(const bool &modify) {
    m_modify = modify;
    m_modify_isSet = true;
}

bool OAIAccessMode::is_modify_Set() const{
    return m_modify_isSet;
}

bool OAIAccessMode::is_modify_Valid() const{
    return m_modify_isValid;
}

bool OAIAccessMode::isUpload() const {
    return m_upload;
}
void OAIAccessMode::setUpload(const bool &upload) {
    m_upload = upload;
    m_upload_isSet = true;
}

bool OAIAccessMode::is_upload_Set() const{
    return m_upload_isSet;
}

bool OAIAccessMode::is_upload_Valid() const{
    return m_upload_isValid;
}

bool OAIAccessMode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessMode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
