/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICopyResourcesRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICopyResourcesRequestBody::OAICopyResourcesRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICopyResourcesRequestBody::OAICopyResourcesRequestBody() {
    this->initializeModel();
}

OAICopyResourcesRequestBody::~OAICopyResourcesRequestBody() {}

void OAICopyResourcesRequestBody::initializeModel() {

    m_parent_resource_isSet = false;
    m_parent_resource_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;
}

void OAICopyResourcesRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICopyResourcesRequestBody::fromJsonObject(QJsonObject json) {

    m_parent_resource_isValid = ::OpenAPI::fromJsonValue(m_parent_resource, json[QString("parentResource")]);
    m_parent_resource_isSet = !json[QString("parentResource")].isNull() && m_parent_resource_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;
}

QString OAICopyResourcesRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICopyResourcesRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_parent_resource_isSet) {
        obj.insert(QString("parentResource"), ::OpenAPI::toJsonValue(m_parent_resource));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    return obj;
}

QString OAICopyResourcesRequestBody::getParentResource() const {
    return m_parent_resource;
}
void OAICopyResourcesRequestBody::setParentResource(const QString &parent_resource) {
    m_parent_resource = parent_resource;
    m_parent_resource_isSet = true;
}

bool OAICopyResourcesRequestBody::is_parent_resource_Set() const{
    return m_parent_resource_isSet;
}

bool OAICopyResourcesRequestBody::is_parent_resource_Valid() const{
    return m_parent_resource_isValid;
}

QList<QString> OAICopyResourcesRequestBody::getResources() const {
    return m_resources;
}
void OAICopyResourcesRequestBody::setResources(const QList<QString> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAICopyResourcesRequestBody::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAICopyResourcesRequestBody::is_resources_Valid() const{
    return m_resources_isValid;
}

bool OAICopyResourcesRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parent_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICopyResourcesRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parent_resource_isValid && m_resources_isValid && true;
}

} // namespace OpenAPI
