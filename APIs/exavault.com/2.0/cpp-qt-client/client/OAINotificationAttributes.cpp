/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationAttributes::OAINotificationAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationAttributes::OAINotificationAttributes() {
    this->initializeModel();
}

OAINotificationAttributes::~OAINotificationAttributes() {}

void OAINotificationAttributes::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_readable_description_isSet = false;
    m_readable_description_isValid = false;

    m_readable_description_without_path_isSet = false;
    m_readable_description_without_path_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_send_email_isSet = false;
    m_send_email_isValid = false;

    m_share_id_isSet = false;
    m_share_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_usernames_isSet = false;
    m_usernames_isValid = false;
}

void OAINotificationAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationAttributes::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_readable_description_isValid = ::OpenAPI::fromJsonValue(m_readable_description, json[QString("readableDescription")]);
    m_readable_description_isSet = !json[QString("readableDescription")].isNull() && m_readable_description_isValid;

    m_readable_description_without_path_isValid = ::OpenAPI::fromJsonValue(m_readable_description_without_path, json[QString("readableDescriptionWithoutPath")]);
    m_readable_description_without_path_isSet = !json[QString("readableDescriptionWithoutPath")].isNull() && m_readable_description_without_path_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_send_email_isValid = ::OpenAPI::fromJsonValue(m_send_email, json[QString("sendEmail")]);
    m_send_email_isSet = !json[QString("sendEmail")].isNull() && m_send_email_isValid;

    m_share_id_isValid = ::OpenAPI::fromJsonValue(m_share_id, json[QString("shareId")]);
    m_share_id_isSet = !json[QString("shareId")].isNull() && m_share_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_usernames_isValid = ::OpenAPI::fromJsonValue(m_usernames, json[QString("usernames")]);
    m_usernames_isSet = !json[QString("usernames")].isNull() && m_usernames_isValid;
}

QString OAINotificationAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_readable_description_isSet) {
        obj.insert(QString("readableDescription"), ::OpenAPI::toJsonValue(m_readable_description));
    }
    if (m_readable_description_without_path_isSet) {
        obj.insert(QString("readableDescriptionWithoutPath"), ::OpenAPI::toJsonValue(m_readable_description_without_path));
    }
    if (m_recipients.size() > 0) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_send_email_isSet) {
        obj.insert(QString("sendEmail"), ::OpenAPI::toJsonValue(m_send_email));
    }
    if (m_share_id_isSet) {
        obj.insert(QString("shareId"), ::OpenAPI::toJsonValue(m_share_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_usernames.size() > 0) {
        obj.insert(QString("usernames"), ::OpenAPI::toJsonValue(m_usernames));
    }
    return obj;
}

QString OAINotificationAttributes::getAction() const {
    return m_action;
}
void OAINotificationAttributes::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAINotificationAttributes::is_action_Set() const{
    return m_action_isSet;
}

bool OAINotificationAttributes::is_action_Valid() const{
    return m_action_isValid;
}

QDateTime OAINotificationAttributes::getCreated() const {
    return m_created;
}
void OAINotificationAttributes::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAINotificationAttributes::is_created_Set() const{
    return m_created_isSet;
}

bool OAINotificationAttributes::is_created_Valid() const{
    return m_created_isValid;
}

QString OAINotificationAttributes::getMessage() const {
    return m_message;
}
void OAINotificationAttributes::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAINotificationAttributes::is_message_Set() const{
    return m_message_isSet;
}

bool OAINotificationAttributes::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAINotificationAttributes::getModified() const {
    return m_modified;
}
void OAINotificationAttributes::setModified(const QDateTime &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAINotificationAttributes::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAINotificationAttributes::is_modified_Valid() const{
    return m_modified_isValid;
}

QString OAINotificationAttributes::getName() const {
    return m_name;
}
void OAINotificationAttributes::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINotificationAttributes::is_name_Set() const{
    return m_name_isSet;
}

bool OAINotificationAttributes::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINotificationAttributes::getPath() const {
    return m_path;
}
void OAINotificationAttributes::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAINotificationAttributes::is_path_Set() const{
    return m_path_isSet;
}

bool OAINotificationAttributes::is_path_Valid() const{
    return m_path_isValid;
}

QString OAINotificationAttributes::getReadableDescription() const {
    return m_readable_description;
}
void OAINotificationAttributes::setReadableDescription(const QString &readable_description) {
    m_readable_description = readable_description;
    m_readable_description_isSet = true;
}

bool OAINotificationAttributes::is_readable_description_Set() const{
    return m_readable_description_isSet;
}

bool OAINotificationAttributes::is_readable_description_Valid() const{
    return m_readable_description_isValid;
}

QString OAINotificationAttributes::getReadableDescriptionWithoutPath() const {
    return m_readable_description_without_path;
}
void OAINotificationAttributes::setReadableDescriptionWithoutPath(const QString &readable_description_without_path) {
    m_readable_description_without_path = readable_description_without_path;
    m_readable_description_without_path_isSet = true;
}

bool OAINotificationAttributes::is_readable_description_without_path_Set() const{
    return m_readable_description_without_path_isSet;
}

bool OAINotificationAttributes::is_readable_description_without_path_Valid() const{
    return m_readable_description_without_path_isValid;
}

QList<OAINotificationRecipient> OAINotificationAttributes::getRecipients() const {
    return m_recipients;
}
void OAINotificationAttributes::setRecipients(const QList<OAINotificationRecipient> &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAINotificationAttributes::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAINotificationAttributes::is_recipients_Valid() const{
    return m_recipients_isValid;
}

bool OAINotificationAttributes::isSendEmail() const {
    return m_send_email;
}
void OAINotificationAttributes::setSendEmail(const bool &send_email) {
    m_send_email = send_email;
    m_send_email_isSet = true;
}

bool OAINotificationAttributes::is_send_email_Set() const{
    return m_send_email_isSet;
}

bool OAINotificationAttributes::is_send_email_Valid() const{
    return m_send_email_isValid;
}

QString OAINotificationAttributes::getShareId() const {
    return m_share_id;
}
void OAINotificationAttributes::setShareId(const QString &share_id) {
    m_share_id = share_id;
    m_share_id_isSet = true;
}

bool OAINotificationAttributes::is_share_id_Set() const{
    return m_share_id_isSet;
}

bool OAINotificationAttributes::is_share_id_Valid() const{
    return m_share_id_isValid;
}

QString OAINotificationAttributes::getType() const {
    return m_type;
}
void OAINotificationAttributes::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINotificationAttributes::is_type_Set() const{
    return m_type_isSet;
}

bool OAINotificationAttributes::is_type_Valid() const{
    return m_type_isValid;
}

QString OAINotificationAttributes::getUserId() const {
    return m_user_id;
}
void OAINotificationAttributes::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAINotificationAttributes::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAINotificationAttributes::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QList<QString> OAINotificationAttributes::getUsernames() const {
    return m_usernames;
}
void OAINotificationAttributes::setUsernames(const QList<QString> &usernames) {
    m_usernames = usernames;
    m_usernames_isSet = true;
}

bool OAINotificationAttributes::is_usernames_Set() const{
    return m_usernames_isSet;
}

bool OAINotificationAttributes::is_usernames_Valid() const{
    return m_usernames_isValid;
}

bool OAINotificationAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readable_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readable_description_without_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usernames.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
