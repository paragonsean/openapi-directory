/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceDelete.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceDelete::OAIResourceDelete(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceDelete::OAIResourceDelete() {
    this->initializeModel();
}

OAIResourceDelete::~OAIResourceDelete() {}

void OAIResourceDelete::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIResourceDelete::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceDelete::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIResourceDelete::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceDelete::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_meta_isSet) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint64 OAIResourceDelete::getId() const {
    return m_id;
}
void OAIResourceDelete::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIResourceDelete::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResourceDelete::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAIResourceDelete::getMeta() const {
    return m_meta;
}
void OAIResourceDelete::setMeta(const OAIObject &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIResourceDelete::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIResourceDelete::is_meta_Valid() const{
    return m_meta_isValid;
}

QString OAIResourceDelete::getType() const {
    return m_type;
}
void OAIResourceDelete::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIResourceDelete::is_type_Set() const{
    return m_type_isSet;
}

bool OAIResourceDelete::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIResourceDelete::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceDelete::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
