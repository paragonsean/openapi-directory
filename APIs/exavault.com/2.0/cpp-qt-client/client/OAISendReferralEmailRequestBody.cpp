/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendReferralEmailRequestBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendReferralEmailRequestBody::OAISendReferralEmailRequestBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendReferralEmailRequestBody::OAISendReferralEmailRequestBody() {
    this->initializeModel();
}

OAISendReferralEmailRequestBody::~OAISendReferralEmailRequestBody() {}

void OAISendReferralEmailRequestBody::initializeModel() {

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAISendReferralEmailRequestBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendReferralEmailRequestBody::fromJsonObject(QJsonObject json) {

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAISendReferralEmailRequestBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendReferralEmailRequestBody::asJsonObject() const {
    QJsonObject obj;
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QList<QString> OAISendReferralEmailRequestBody::getEmails() const {
    return m_emails;
}
void OAISendReferralEmailRequestBody::setEmails(const QList<QString> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAISendReferralEmailRequestBody::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAISendReferralEmailRequestBody::is_emails_Valid() const{
    return m_emails_isValid;
}

QString OAISendReferralEmailRequestBody::getMessage() const {
    return m_message;
}
void OAISendReferralEmailRequestBody::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAISendReferralEmailRequestBody::is_message_Set() const{
    return m_message_isSet;
}

bool OAISendReferralEmailRequestBody::is_message_Valid() const{
    return m_message_isValid;
}

bool OAISendReferralEmailRequestBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendReferralEmailRequestBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_emails_isValid && m_message_isValid && true;
}

} // namespace OpenAPI
