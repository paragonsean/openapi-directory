# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_collection_response_included_inner import UserCollectionResponseIncludedInner
from openapi_server.models.webhook import Webhook
from openapi_server import util


class WebhookCollectionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[Webhook]=None, included: List[UserCollectionResponseIncludedInner]=None, response_status: int=None, returned_results: int=None, total_results: int=None):
        """WebhookCollectionResponse - a model defined in OpenAPI

        :param data: The data of this WebhookCollectionResponse.
        :param included: The included of this WebhookCollectionResponse.
        :param response_status: The response_status of this WebhookCollectionResponse.
        :param returned_results: The returned_results of this WebhookCollectionResponse.
        :param total_results: The total_results of this WebhookCollectionResponse.
        """
        self.openapi_types = {
            'data': List[Webhook],
            'included': List[UserCollectionResponseIncludedInner],
            'response_status': int,
            'returned_results': int,
            'total_results': int
        }

        self.attribute_map = {
            'data': 'data',
            'included': 'included',
            'response_status': 'responseStatus',
            'returned_results': 'returnedResults',
            'total_results': 'totalResults'
        }

        self._data = data
        self._included = included
        self._response_status = response_status
        self._returned_results = returned_results
        self._total_results = total_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookCollectionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookCollectionResponse of this WebhookCollectionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this WebhookCollectionResponse.


        :return: The data of this WebhookCollectionResponse.
        :rtype: List[Webhook]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this WebhookCollectionResponse.


        :param data: The data of this WebhookCollectionResponse.
        :type data: List[Webhook]
        """

        self._data = data

    @property
    def included(self):
        """Gets the included of this WebhookCollectionResponse.


        :return: The included of this WebhookCollectionResponse.
        :rtype: List[UserCollectionResponseIncludedInner]
        """
        return self._included

    @included.setter
    def included(self, included):
        """Sets the included of this WebhookCollectionResponse.


        :param included: The included of this WebhookCollectionResponse.
        :type included: List[UserCollectionResponseIncludedInner]
        """

        self._included = included

    @property
    def response_status(self):
        """Gets the response_status of this WebhookCollectionResponse.

        Http status code of the response. 

        :return: The response_status of this WebhookCollectionResponse.
        :rtype: int
        """
        return self._response_status

    @response_status.setter
    def response_status(self, response_status):
        """Sets the response_status of this WebhookCollectionResponse.

        Http status code of the response. 

        :param response_status: The response_status of this WebhookCollectionResponse.
        :type response_status: int
        """

        self._response_status = response_status

    @property
    def returned_results(self):
        """Gets the returned_results of this WebhookCollectionResponse.

        Number of results returned.

        :return: The returned_results of this WebhookCollectionResponse.
        :rtype: int
        """
        return self._returned_results

    @returned_results.setter
    def returned_results(self, returned_results):
        """Sets the returned_results of this WebhookCollectionResponse.

        Number of results returned.

        :param returned_results: The returned_results of this WebhookCollectionResponse.
        :type returned_results: int
        """

        self._returned_results = returned_results

    @property
    def total_results(self):
        """Gets the total_results of this WebhookCollectionResponse.

        Total results found.

        :return: The total_results of this WebhookCollectionResponse.
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this WebhookCollectionResponse.

        Total results found.

        :param total_results: The total_results of this WebhookCollectionResponse.
        :type total_results: int
        """

        self._total_results = total_results
