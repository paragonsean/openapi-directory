# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Quota(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bandwidth_limit: int=None, bandwidth_used: int=None, disk_limit: int=None, disk_used: int=None, notice_enabled: bool=None, notice_threshold: int=None, transactions_limit: int=None, transactions_notice_enabled: bool=None, transactions_notice_threshold: int=None):
        """Quota - a model defined in OpenAPI

        :param bandwidth_limit: The bandwidth_limit of this Quota.
        :param bandwidth_used: The bandwidth_used of this Quota.
        :param disk_limit: The disk_limit of this Quota.
        :param disk_used: The disk_used of this Quota.
        :param notice_enabled: The notice_enabled of this Quota.
        :param notice_threshold: The notice_threshold of this Quota.
        :param transactions_limit: The transactions_limit of this Quota.
        :param transactions_notice_enabled: The transactions_notice_enabled of this Quota.
        :param transactions_notice_threshold: The transactions_notice_threshold of this Quota.
        """
        self.openapi_types = {
            'bandwidth_limit': int,
            'bandwidth_used': int,
            'disk_limit': int,
            'disk_used': int,
            'notice_enabled': bool,
            'notice_threshold': int,
            'transactions_limit': int,
            'transactions_notice_enabled': bool,
            'transactions_notice_threshold': int
        }

        self.attribute_map = {
            'bandwidth_limit': 'bandwidthLimit',
            'bandwidth_used': 'bandwidthUsed',
            'disk_limit': 'diskLimit',
            'disk_used': 'diskUsed',
            'notice_enabled': 'noticeEnabled',
            'notice_threshold': 'noticeThreshold',
            'transactions_limit': 'transactionsLimit',
            'transactions_notice_enabled': 'transactionsNoticeEnabled',
            'transactions_notice_threshold': 'transactionsNoticeThreshold'
        }

        self._bandwidth_limit = bandwidth_limit
        self._bandwidth_used = bandwidth_used
        self._disk_limit = disk_limit
        self._disk_used = disk_used
        self._notice_enabled = notice_enabled
        self._notice_threshold = notice_threshold
        self._transactions_limit = transactions_limit
        self._transactions_notice_enabled = transactions_notice_enabled
        self._transactions_notice_threshold = transactions_notice_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Quota':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Quota of this Quota.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bandwidth_limit(self):
        """Gets the bandwidth_limit of this Quota.

        Total number of bytes that can be transferred per month.

        :return: The bandwidth_limit of this Quota.
        :rtype: int
        """
        return self._bandwidth_limit

    @bandwidth_limit.setter
    def bandwidth_limit(self, bandwidth_limit):
        """Sets the bandwidth_limit of this Quota.

        Total number of bytes that can be transferred per month.

        :param bandwidth_limit: The bandwidth_limit of this Quota.
        :type bandwidth_limit: int
        """

        self._bandwidth_limit = bandwidth_limit

    @property
    def bandwidth_used(self):
        """Gets the bandwidth_used of this Quota.

        Number of bytes transferred this month.

        :return: The bandwidth_used of this Quota.
        :rtype: int
        """
        return self._bandwidth_used

    @bandwidth_used.setter
    def bandwidth_used(self, bandwidth_used):
        """Sets the bandwidth_used of this Quota.

        Number of bytes transferred this month.

        :param bandwidth_used: The bandwidth_used of this Quota.
        :type bandwidth_used: int
        """

        self._bandwidth_used = bandwidth_used

    @property
    def disk_limit(self):
        """Gets the disk_limit of this Quota.

        Amount of disk space that the account has available to it. This may be increased by upgrading to a larger plan.

        :return: The disk_limit of this Quota.
        :rtype: int
        """
        return self._disk_limit

    @disk_limit.setter
    def disk_limit(self, disk_limit):
        """Sets the disk_limit of this Quota.

        Amount of disk space that the account has available to it. This may be increased by upgrading to a larger plan.

        :param disk_limit: The disk_limit of this Quota.
        :type disk_limit: int
        """

        self._disk_limit = disk_limit

    @property
    def disk_used(self):
        """Gets the disk_used of this Quota.

        Amount of disk space currently in use.

        :return: The disk_used of this Quota.
        :rtype: int
        """
        return self._disk_used

    @disk_used.setter
    def disk_used(self, disk_used):
        """Sets the disk_used of this Quota.

        Amount of disk space currently in use.

        :param disk_used: The disk_used of this Quota.
        :type disk_used: int
        """

        self._disk_used = disk_used

    @property
    def notice_enabled(self):
        """Gets the notice_enabled of this Quota.

        Should a quota warning be sent to the account owner when a threshold level of space utilization is reached?

        :return: The notice_enabled of this Quota.
        :rtype: bool
        """
        return self._notice_enabled

    @notice_enabled.setter
    def notice_enabled(self, notice_enabled):
        """Sets the notice_enabled of this Quota.

        Should a quota warning be sent to the account owner when a threshold level of space utilization is reached?

        :param notice_enabled: The notice_enabled of this Quota.
        :type notice_enabled: bool
        """

        self._notice_enabled = notice_enabled

    @property
    def notice_threshold(self):
        """Gets the notice_threshold of this Quota.

        Treshold that triggers a quota notification. This represents the \"percent full\" your account must be before the quota notification is generated.

        :return: The notice_threshold of this Quota.
        :rtype: int
        """
        return self._notice_threshold

    @notice_threshold.setter
    def notice_threshold(self, notice_threshold):
        """Sets the notice_threshold of this Quota.

        Treshold that triggers a quota notification. This represents the \"percent full\" your account must be before the quota notification is generated.

        :param notice_threshold: The notice_threshold of this Quota.
        :type notice_threshold: int
        """

        self._notice_threshold = notice_threshold

    @property
    def transactions_limit(self):
        """Gets the transactions_limit of this Quota.

        Total number of transactions allowed in a 24-hour period.

        :return: The transactions_limit of this Quota.
        :rtype: int
        """
        return self._transactions_limit

    @transactions_limit.setter
    def transactions_limit(self, transactions_limit):
        """Sets the transactions_limit of this Quota.

        Total number of transactions allowed in a 24-hour period.

        :param transactions_limit: The transactions_limit of this Quota.
        :type transactions_limit: int
        """

        self._transactions_limit = transactions_limit

    @property
    def transactions_notice_enabled(self):
        """Gets the transactions_notice_enabled of this Quota.

        Whether an email should be sent to the account owner up to once per day if transaction usage exceeds `transactionsNoticeThreshold` value.

        :return: The transactions_notice_enabled of this Quota.
        :rtype: bool
        """
        return self._transactions_notice_enabled

    @transactions_notice_enabled.setter
    def transactions_notice_enabled(self, transactions_notice_enabled):
        """Sets the transactions_notice_enabled of this Quota.

        Whether an email should be sent to the account owner up to once per day if transaction usage exceeds `transactionsNoticeThreshold` value.

        :param transactions_notice_enabled: The transactions_notice_enabled of this Quota.
        :type transactions_notice_enabled: bool
        """

        self._transactions_notice_enabled = transactions_notice_enabled

    @property
    def transactions_notice_threshold(self):
        """Gets the transactions_notice_threshold of this Quota.

        Percent of daily transactions limit that will trigger an email if activity exceeds it.

        :return: The transactions_notice_threshold of this Quota.
        :rtype: int
        """
        return self._transactions_notice_threshold

    @transactions_notice_threshold.setter
    def transactions_notice_threshold(self, transactions_notice_threshold):
        """Sets the transactions_notice_threshold of this Quota.

        Percent of daily transactions limit that will trigger an email if activity exceeds it.

        :param transactions_notice_threshold: The transactions_notice_threshold of this Quota.
        :type transactions_notice_threshold: int
        """

        self._transactions_notice_threshold = transactions_notice_threshold
