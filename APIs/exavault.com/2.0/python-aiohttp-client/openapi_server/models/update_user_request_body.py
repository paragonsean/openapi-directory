# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_permissions import UserPermissions
from openapi_server import util


class UpdateUserRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, expiration: str=None, home_resource: str=None, locked: bool=None, nickname: str=None, onboarding: bool=None, password: str=None, permissions: UserPermissions=None, role: str=None, time_zone: str=None, username: str=None):
        """UpdateUserRequestBody - a model defined in OpenAPI

        :param email: The email of this UpdateUserRequestBody.
        :param expiration: The expiration of this UpdateUserRequestBody.
        :param home_resource: The home_resource of this UpdateUserRequestBody.
        :param locked: The locked of this UpdateUserRequestBody.
        :param nickname: The nickname of this UpdateUserRequestBody.
        :param onboarding: The onboarding of this UpdateUserRequestBody.
        :param password: The password of this UpdateUserRequestBody.
        :param permissions: The permissions of this UpdateUserRequestBody.
        :param role: The role of this UpdateUserRequestBody.
        :param time_zone: The time_zone of this UpdateUserRequestBody.
        :param username: The username of this UpdateUserRequestBody.
        """
        self.openapi_types = {
            'email': str,
            'expiration': str,
            'home_resource': str,
            'locked': bool,
            'nickname': str,
            'onboarding': bool,
            'password': str,
            'permissions': UserPermissions,
            'role': str,
            'time_zone': str,
            'username': str
        }

        self.attribute_map = {
            'email': 'email',
            'expiration': 'expiration',
            'home_resource': 'homeResource',
            'locked': 'locked',
            'nickname': 'nickname',
            'onboarding': 'onboarding',
            'password': 'password',
            'permissions': 'permissions',
            'role': 'role',
            'time_zone': 'timeZone',
            'username': 'username'
        }

        self._email = email
        self._expiration = expiration
        self._home_resource = home_resource
        self._locked = locked
        self._nickname = nickname
        self._onboarding = onboarding
        self._password = password
        self._permissions = permissions
        self._role = role
        self._time_zone = time_zone
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateUserRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateUserRequestBody of this UpdateUserRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UpdateUserRequestBody.

        Email address for the user

        :return: The email of this UpdateUserRequestBody.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UpdateUserRequestBody.

        Email address for the user

        :param email: The email of this UpdateUserRequestBody.
        :type email: str
        """

        self._email = email

    @property
    def expiration(self):
        """Gets the expiration of this UpdateUserRequestBody.

        Optional timestamp when the user should expire.

        :return: The expiration of this UpdateUserRequestBody.
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this UpdateUserRequestBody.

        Optional timestamp when the user should expire.

        :param expiration: The expiration of this UpdateUserRequestBody.
        :type expiration: str
        """

        self._expiration = expiration

    @property
    def home_resource(self):
        """Gets the home_resource of this UpdateUserRequestBody.

        Resource identifier for the user's home folder. See details on [how to specify resources](#section/Identifying-Resources) above.  The user will be locked to this directory and unable to move 'up' in the account. If the folder does not exist in the account, it will be created when the user logs in.  This setting is ignored for users with the `role` **admin**.

        :return: The home_resource of this UpdateUserRequestBody.
        :rtype: str
        """
        return self._home_resource

    @home_resource.setter
    def home_resource(self, home_resource):
        """Sets the home_resource of this UpdateUserRequestBody.

        Resource identifier for the user's home folder. See details on [how to specify resources](#section/Identifying-Resources) above.  The user will be locked to this directory and unable to move 'up' in the account. If the folder does not exist in the account, it will be created when the user logs in.  This setting is ignored for users with the `role` **admin**.

        :param home_resource: The home_resource of this UpdateUserRequestBody.
        :type home_resource: str
        """

        self._home_resource = home_resource

    @property
    def locked(self):
        """Gets the locked of this UpdateUserRequestBody.

        If true, the user will be prevented from logging in

        :return: The locked of this UpdateUserRequestBody.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this UpdateUserRequestBody.

        If true, the user will be prevented from logging in

        :param locked: The locked of this UpdateUserRequestBody.
        :type locked: bool
        """

        self._locked = locked

    @property
    def nickname(self):
        """Gets the nickname of this UpdateUserRequestBody.

        An optional nickname (e.g. 'David from Sales').

        :return: The nickname of this UpdateUserRequestBody.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this UpdateUserRequestBody.

        An optional nickname (e.g. 'David from Sales').

        :param nickname: The nickname of this UpdateUserRequestBody.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def onboarding(self):
        """Gets the onboarding of this UpdateUserRequestBody.

        Set this to **true** to enable extra help popups in the web file manager for this user.

        :return: The onboarding of this UpdateUserRequestBody.
        :rtype: bool
        """
        return self._onboarding

    @onboarding.setter
    def onboarding(self, onboarding):
        """Sets the onboarding of this UpdateUserRequestBody.

        Set this to **true** to enable extra help popups in the web file manager for this user.

        :param onboarding: The onboarding of this UpdateUserRequestBody.
        :type onboarding: bool
        """

        self._onboarding = onboarding

    @property
    def password(self):
        """Gets the password of this UpdateUserRequestBody.

        New password for the user

        :return: The password of this UpdateUserRequestBody.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UpdateUserRequestBody.

        New password for the user

        :param password: The password of this UpdateUserRequestBody.
        :type password: str
        """

        self._password = password

    @property
    def permissions(self):
        """Gets the permissions of this UpdateUserRequestBody.


        :return: The permissions of this UpdateUserRequestBody.
        :rtype: UserPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this UpdateUserRequestBody.


        :param permissions: The permissions of this UpdateUserRequestBody.
        :type permissions: UserPermissions
        """

        self._permissions = permissions

    @property
    def role(self):
        """Gets the role of this UpdateUserRequestBody.

        The type of user (**admin** or **user**). Note that admin users cannot have a `homeResource` other than '/', and will have full permissions, but you must provide at least \"download,upload,list,delete\" in the `permissions` parameter.

        :return: The role of this UpdateUserRequestBody.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UpdateUserRequestBody.

        The type of user (**admin** or **user**). Note that admin users cannot have a `homeResource` other than '/', and will have full permissions, but you must provide at least \"download,upload,list,delete\" in the `permissions` parameter.

        :param role: The role of this UpdateUserRequestBody.
        :type role: str
        """
        allowed_values = ["user", "admin"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def time_zone(self):
        """Gets the time_zone of this UpdateUserRequestBody.

        Time zone, used for accurate time display within the application. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values. 

        :return: The time_zone of this UpdateUserRequestBody.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this UpdateUserRequestBody.

        Time zone, used for accurate time display within the application. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values. 

        :param time_zone: The time_zone of this UpdateUserRequestBody.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def username(self):
        """Gets the username of this UpdateUserRequestBody.

        New username for the user. This should follow standard username conventions - spaces are not allowed, etc. We do allow email addresses as usernames.  **Note** Usernames must be unique across all ExaVault accounts.

        :return: The username of this UpdateUserRequestBody.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UpdateUserRequestBody.

        New username for the user. This should follow standard username conventions - spaces are not allowed, etc. We do allow email addresses as usernames.  **Note** Usernames must be unique across all ExaVault accounts.

        :param username: The username of this UpdateUserRequestBody.
        :type username: str
        """

        self._username = username
