# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_recipient import NotificationRecipient
from openapi_server import util


class NotificationAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, created: datetime=None, message: str=None, modified: datetime=None, name: str=None, path: str=None, readable_description: str=None, readable_description_without_path: str=None, recipients: List[NotificationRecipient]=None, send_email: bool=None, share_id: str=None, type: str=None, user_id: str=None, usernames: List[str]=None):
        """NotificationAttributes - a model defined in OpenAPI

        :param action: The action of this NotificationAttributes.
        :param created: The created of this NotificationAttributes.
        :param message: The message of this NotificationAttributes.
        :param modified: The modified of this NotificationAttributes.
        :param name: The name of this NotificationAttributes.
        :param path: The path of this NotificationAttributes.
        :param readable_description: The readable_description of this NotificationAttributes.
        :param readable_description_without_path: The readable_description_without_path of this NotificationAttributes.
        :param recipients: The recipients of this NotificationAttributes.
        :param send_email: The send_email of this NotificationAttributes.
        :param share_id: The share_id of this NotificationAttributes.
        :param type: The type of this NotificationAttributes.
        :param user_id: The user_id of this NotificationAttributes.
        :param usernames: The usernames of this NotificationAttributes.
        """
        self.openapi_types = {
            'action': str,
            'created': datetime,
            'message': str,
            'modified': datetime,
            'name': str,
            'path': str,
            'readable_description': str,
            'readable_description_without_path': str,
            'recipients': List[NotificationRecipient],
            'send_email': bool,
            'share_id': str,
            'type': str,
            'user_id': str,
            'usernames': List[str]
        }

        self.attribute_map = {
            'action': 'action',
            'created': 'created',
            'message': 'message',
            'modified': 'modified',
            'name': 'name',
            'path': 'path',
            'readable_description': 'readableDescription',
            'readable_description_without_path': 'readableDescriptionWithoutPath',
            'recipients': 'recipients',
            'send_email': 'sendEmail',
            'share_id': 'shareId',
            'type': 'type',
            'user_id': 'userId',
            'usernames': 'usernames'
        }

        self._action = action
        self._created = created
        self._message = message
        self._modified = modified
        self._name = name
        self._path = path
        self._readable_description = readable_description
        self._readable_description_without_path = readable_description_without_path
        self._recipients = recipients
        self._send_email = send_email
        self._share_id = share_id
        self._type = type
        self._user_id = user_id
        self._usernames = usernames

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationAttributes of this NotificationAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this NotificationAttributes.

        Action that triggers notification.

        :return: The action of this NotificationAttributes.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this NotificationAttributes.

        Action that triggers notification.

        :param action: The action of this NotificationAttributes.
        :type action: str
        """
        allowed_values = ["upload", "download", "delete", "all"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def created(self):
        """Gets the created of this NotificationAttributes.

        Timestamp of notifiction creation.

        :return: The created of this NotificationAttributes.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this NotificationAttributes.

        Timestamp of notifiction creation.

        :param created: The created of this NotificationAttributes.
        :type created: datetime
        """

        self._created = created

    @property
    def message(self):
        """Gets the message of this NotificationAttributes.

        Custom message that will be sent to the notification recipients.

        :return: The message of this NotificationAttributes.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this NotificationAttributes.

        Custom message that will be sent to the notification recipients.

        :param message: The message of this NotificationAttributes.
        :type message: str
        """

        self._message = message

    @property
    def modified(self):
        """Gets the modified of this NotificationAttributes.

        Timestamp of notification modification.

        :return: The modified of this NotificationAttributes.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this NotificationAttributes.

        Timestamp of notification modification.

        :param modified: The modified of this NotificationAttributes.
        :type modified: datetime
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this NotificationAttributes.

        Name of the item that the notification is set on.

        :return: The name of this NotificationAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationAttributes.

        Name of the item that the notification is set on.

        :param name: The name of this NotificationAttributes.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this NotificationAttributes.

        Path to the item that the notification is set on.

        :return: The path of this NotificationAttributes.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this NotificationAttributes.

        Path to the item that the notification is set on.

        :param path: The path of this NotificationAttributes.
        :type path: str
        """

        self._path = path

    @property
    def readable_description(self):
        """Gets the readable_description of this NotificationAttributes.

        Human readable description of the notification.

        :return: The readable_description of this NotificationAttributes.
        :rtype: str
        """
        return self._readable_description

    @readable_description.setter
    def readable_description(self, readable_description):
        """Sets the readable_description of this NotificationAttributes.

        Human readable description of the notification.

        :param readable_description: The readable_description of this NotificationAttributes.
        :type readable_description: str
        """

        self._readable_description = readable_description

    @property
    def readable_description_without_path(self):
        """Gets the readable_description_without_path of this NotificationAttributes.

        Human readable description of the notification without item path.

        :return: The readable_description_without_path of this NotificationAttributes.
        :rtype: str
        """
        return self._readable_description_without_path

    @readable_description_without_path.setter
    def readable_description_without_path(self, readable_description_without_path):
        """Sets the readable_description_without_path of this NotificationAttributes.

        Human readable description of the notification without item path.

        :param readable_description_without_path: The readable_description_without_path of this NotificationAttributes.
        :type readable_description_without_path: str
        """

        self._readable_description_without_path = readable_description_without_path

    @property
    def recipients(self):
        """Gets the recipients of this NotificationAttributes.

        Notification recipients.

        :return: The recipients of this NotificationAttributes.
        :rtype: List[NotificationRecipient]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this NotificationAttributes.

        Notification recipients.

        :param recipients: The recipients of this NotificationAttributes.
        :type recipients: List[NotificationRecipient]
        """

        self._recipients = recipients

    @property
    def send_email(self):
        """Gets the send_email of this NotificationAttributes.

        Whether or not an email will send when the notification is triggered.

        :return: The send_email of this NotificationAttributes.
        :rtype: bool
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """Sets the send_email of this NotificationAttributes.

        Whether or not an email will send when the notification is triggered.

        :param send_email: The send_email of this NotificationAttributes.
        :type send_email: bool
        """

        self._send_email = send_email

    @property
    def share_id(self):
        """Gets the share_id of this NotificationAttributes.

        ID of the share that the notification belogns to.

        :return: The share_id of this NotificationAttributes.
        :rtype: str
        """
        return self._share_id

    @share_id.setter
    def share_id(self, share_id):
        """Sets the share_id of this NotificationAttributes.

        ID of the share that the notification belogns to.

        :param share_id: The share_id of this NotificationAttributes.
        :type share_id: str
        """

        self._share_id = share_id

    @property
    def type(self):
        """Gets the type of this NotificationAttributes.

        Type of the resource the notification is attached to. 

        :return: The type of this NotificationAttributes.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NotificationAttributes.

        Type of the resource the notification is attached to. 

        :param type: The type of this NotificationAttributes.
        :type type: str
        """
        allowed_values = ["file", "folder", "shared_folder", "send_receipt", "share_receipt", "file_drop"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this NotificationAttributes.

        ID of the user that the notification belongs to.

        :return: The user_id of this NotificationAttributes.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this NotificationAttributes.

        ID of the user that the notification belongs to.

        :param user_id: The user_id of this NotificationAttributes.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def usernames(self):
        """Gets the usernames of this NotificationAttributes.

        Detail on which users can trigger the notification.

        :return: The usernames of this NotificationAttributes.
        :rtype: List[str]
        """
        return self._usernames

    @usernames.setter
    def usernames(self, usernames):
        """Sets the usernames of this NotificationAttributes.

        Detail on which users can trigger the notification.

        :param usernames: The usernames of this NotificationAttributes.
        :type usernames: List[str]
        """

        self._usernames = usernames
