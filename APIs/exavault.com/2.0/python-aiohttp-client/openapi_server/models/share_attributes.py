# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_mode import AccessMode
from openapi_server.models.share_message import ShareMessage
from openapi_server.models.share_recipient import ShareRecipient
from openapi_server import util


class ShareAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_description: str=None, access_mode: AccessMode=None, created: datetime=None, embed: bool=None, expiration: str=None, expired: bool=None, file_drop_create_folders: bool=None, form_id: int=None, has_notification: bool=None, has_password: bool=None, hash: str=None, inherited: bool=None, messages: List[ShareMessage]=None, modified: datetime=None, name: str=None, owner_hash: str=None, paths: List[str]=None, public: bool=None, recipients: List[ShareRecipient]=None, require_email: bool=None, resent: datetime=None, status: int=None, tracking_status: str=None, type: str=None):
        """ShareAttributes - a model defined in OpenAPI

        :param access_description: The access_description of this ShareAttributes.
        :param access_mode: The access_mode of this ShareAttributes.
        :param created: The created of this ShareAttributes.
        :param embed: The embed of this ShareAttributes.
        :param expiration: The expiration of this ShareAttributes.
        :param expired: The expired of this ShareAttributes.
        :param file_drop_create_folders: The file_drop_create_folders of this ShareAttributes.
        :param form_id: The form_id of this ShareAttributes.
        :param has_notification: The has_notification of this ShareAttributes.
        :param has_password: The has_password of this ShareAttributes.
        :param hash: The hash of this ShareAttributes.
        :param inherited: The inherited of this ShareAttributes.
        :param messages: The messages of this ShareAttributes.
        :param modified: The modified of this ShareAttributes.
        :param name: The name of this ShareAttributes.
        :param owner_hash: The owner_hash of this ShareAttributes.
        :param paths: The paths of this ShareAttributes.
        :param public: The public of this ShareAttributes.
        :param recipients: The recipients of this ShareAttributes.
        :param require_email: The require_email of this ShareAttributes.
        :param resent: The resent of this ShareAttributes.
        :param status: The status of this ShareAttributes.
        :param tracking_status: The tracking_status of this ShareAttributes.
        :param type: The type of this ShareAttributes.
        """
        self.openapi_types = {
            'access_description': str,
            'access_mode': AccessMode,
            'created': datetime,
            'embed': bool,
            'expiration': str,
            'expired': bool,
            'file_drop_create_folders': bool,
            'form_id': int,
            'has_notification': bool,
            'has_password': bool,
            'hash': str,
            'inherited': bool,
            'messages': List[ShareMessage],
            'modified': datetime,
            'name': str,
            'owner_hash': str,
            'paths': List[str],
            'public': bool,
            'recipients': List[ShareRecipient],
            'require_email': bool,
            'resent': datetime,
            'status': int,
            'tracking_status': str,
            'type': str
        }

        self.attribute_map = {
            'access_description': 'accessDescription',
            'access_mode': 'accessMode',
            'created': 'created',
            'embed': 'embed',
            'expiration': 'expiration',
            'expired': 'expired',
            'file_drop_create_folders': 'fileDropCreateFolders',
            'form_id': 'formId',
            'has_notification': 'hasNotification',
            'has_password': 'hasPassword',
            'hash': 'hash',
            'inherited': 'inherited',
            'messages': 'messages',
            'modified': 'modified',
            'name': 'name',
            'owner_hash': 'ownerHash',
            'paths': 'paths',
            'public': 'public',
            'recipients': 'recipients',
            'require_email': 'requireEmail',
            'resent': 'resent',
            'status': 'status',
            'tracking_status': 'trackingStatus',
            'type': 'type'
        }

        self._access_description = access_description
        self._access_mode = access_mode
        self._created = created
        self._embed = embed
        self._expiration = expiration
        self._expired = expired
        self._file_drop_create_folders = file_drop_create_folders
        self._form_id = form_id
        self._has_notification = has_notification
        self._has_password = has_password
        self._hash = hash
        self._inherited = inherited
        self._messages = messages
        self._modified = modified
        self._name = name
        self._owner_hash = owner_hash
        self._paths = paths
        self._public = public
        self._recipients = recipients
        self._require_email = require_email
        self._resent = resent
        self._status = status
        self._tracking_status = tracking_status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShareAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShareAttributes of this ShareAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_description(self):
        """Gets the access_description of this ShareAttributes.

        Description of the share access rights.

        :return: The access_description of this ShareAttributes.
        :rtype: str
        """
        return self._access_description

    @access_description.setter
    def access_description(self, access_description):
        """Sets the access_description of this ShareAttributes.

        Description of the share access rights.

        :param access_description: The access_description of this ShareAttributes.
        :type access_description: str
        """

        self._access_description = access_description

    @property
    def access_mode(self):
        """Gets the access_mode of this ShareAttributes.


        :return: The access_mode of this ShareAttributes.
        :rtype: AccessMode
        """
        return self._access_mode

    @access_mode.setter
    def access_mode(self, access_mode):
        """Sets the access_mode of this ShareAttributes.


        :param access_mode: The access_mode of this ShareAttributes.
        :type access_mode: AccessMode
        """

        self._access_mode = access_mode

    @property
    def created(self):
        """Gets the created of this ShareAttributes.

        Timestamp of share creation.

        :return: The created of this ShareAttributes.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ShareAttributes.

        Timestamp of share creation.

        :param created: The created of this ShareAttributes.
        :type created: datetime
        """

        self._created = created

    @property
    def embed(self):
        """Gets the embed of this ShareAttributes.

        True if share can be embedded.

        :return: The embed of this ShareAttributes.
        :rtype: bool
        """
        return self._embed

    @embed.setter
    def embed(self, embed):
        """Sets the embed of this ShareAttributes.

        True if share can be embedded.

        :param embed: The embed of this ShareAttributes.
        :type embed: bool
        """

        self._embed = embed

    @property
    def expiration(self):
        """Gets the expiration of this ShareAttributes.

        Expiration date of the share.

        :return: The expiration of this ShareAttributes.
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this ShareAttributes.

        Expiration date of the share.

        :param expiration: The expiration of this ShareAttributes.
        :type expiration: str
        """

        self._expiration = expiration

    @property
    def expired(self):
        """Gets the expired of this ShareAttributes.

        True if the share has expired.

        :return: The expired of this ShareAttributes.
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this ShareAttributes.

        True if the share has expired.

        :param expired: The expired of this ShareAttributes.
        :type expired: bool
        """

        self._expired = expired

    @property
    def file_drop_create_folders(self):
        """Gets the file_drop_create_folders of this ShareAttributes.

        Flag to show if separate folders should be created for each file upload to receive folder.

        :return: The file_drop_create_folders of this ShareAttributes.
        :rtype: bool
        """
        return self._file_drop_create_folders

    @file_drop_create_folders.setter
    def file_drop_create_folders(self, file_drop_create_folders):
        """Sets the file_drop_create_folders of this ShareAttributes.

        Flag to show if separate folders should be created for each file upload to receive folder.

        :param file_drop_create_folders: The file_drop_create_folders of this ShareAttributes.
        :type file_drop_create_folders: bool
        """

        self._file_drop_create_folders = file_drop_create_folders

    @property
    def form_id(self):
        """Gets the form_id of this ShareAttributes.

        ID of the form.

        :return: The form_id of this ShareAttributes.
        :rtype: int
        """
        return self._form_id

    @form_id.setter
    def form_id(self, form_id):
        """Sets the form_id of this ShareAttributes.

        ID of the form.

        :param form_id: The form_id of this ShareAttributes.
        :type form_id: int
        """

        self._form_id = form_id

    @property
    def has_notification(self):
        """Gets the has_notification of this ShareAttributes.

        True if share has notification.

        :return: The has_notification of this ShareAttributes.
        :rtype: bool
        """
        return self._has_notification

    @has_notification.setter
    def has_notification(self, has_notification):
        """Sets the has_notification of this ShareAttributes.

        True if share has notification.

        :param has_notification: The has_notification of this ShareAttributes.
        :type has_notification: bool
        """

        self._has_notification = has_notification

    @property
    def has_password(self):
        """Gets the has_password of this ShareAttributes.

        True if the share has password.

        :return: The has_password of this ShareAttributes.
        :rtype: bool
        """
        return self._has_password

    @has_password.setter
    def has_password(self, has_password):
        """Sets the has_password of this ShareAttributes.

        True if the share has password.

        :param has_password: The has_password of this ShareAttributes.
        :type has_password: bool
        """

        self._has_password = has_password

    @property
    def hash(self):
        """Gets the hash of this ShareAttributes.

        Share hash.

        :return: The hash of this ShareAttributes.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this ShareAttributes.

        Share hash.

        :param hash: The hash of this ShareAttributes.
        :type hash: str
        """

        self._hash = hash

    @property
    def inherited(self):
        """Gets the inherited of this ShareAttributes.

        True if share inherited from parent folder.

        :return: The inherited of this ShareAttributes.
        :rtype: bool
        """
        return self._inherited

    @inherited.setter
    def inherited(self, inherited):
        """Sets the inherited of this ShareAttributes.

        True if share inherited from parent folder.

        :param inherited: The inherited of this ShareAttributes.
        :type inherited: bool
        """

        self._inherited = inherited

    @property
    def messages(self):
        """Gets the messages of this ShareAttributes.

        Array of invitation messages.

        :return: The messages of this ShareAttributes.
        :rtype: List[ShareMessage]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ShareAttributes.

        Array of invitation messages.

        :param messages: The messages of this ShareAttributes.
        :type messages: List[ShareMessage]
        """

        self._messages = messages

    @property
    def modified(self):
        """Gets the modified of this ShareAttributes.

        Timestamp of share modification. Can be `null` if it wasn't modified.

        :return: The modified of this ShareAttributes.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this ShareAttributes.

        Timestamp of share modification. Can be `null` if it wasn't modified.

        :param modified: The modified of this ShareAttributes.
        :type modified: datetime
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this ShareAttributes.

        Share name.

        :return: The name of this ShareAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShareAttributes.

        Share name.

        :param name: The name of this ShareAttributes.
        :type name: str
        """

        self._name = name

    @property
    def owner_hash(self):
        """Gets the owner_hash of this ShareAttributes.

        Share owner's hash.

        :return: The owner_hash of this ShareAttributes.
        :rtype: str
        """
        return self._owner_hash

    @owner_hash.setter
    def owner_hash(self, owner_hash):
        """Sets the owner_hash of this ShareAttributes.

        Share owner's hash.

        :param owner_hash: The owner_hash of this ShareAttributes.
        :type owner_hash: str
        """

        self._owner_hash = owner_hash

    @property
    def paths(self):
        """Gets the paths of this ShareAttributes.

        Path to the shared resource in your account.

        :return: The paths of this ShareAttributes.
        :rtype: List[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this ShareAttributes.

        Path to the shared resource in your account.

        :param paths: The paths of this ShareAttributes.
        :type paths: List[str]
        """

        self._paths = paths

    @property
    def public(self):
        """Gets the public of this ShareAttributes.

        True if the share has a public url.

        :return: The public of this ShareAttributes.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this ShareAttributes.

        True if the share has a public url.

        :param public: The public of this ShareAttributes.
        :type public: bool
        """

        self._public = public

    @property
    def recipients(self):
        """Gets the recipients of this ShareAttributes.

        Array of recipients.

        :return: The recipients of this ShareAttributes.
        :rtype: List[ShareRecipient]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this ShareAttributes.

        Array of recipients.

        :param recipients: The recipients of this ShareAttributes.
        :type recipients: List[ShareRecipient]
        """

        self._recipients = recipients

    @property
    def require_email(self):
        """Gets the require_email of this ShareAttributes.

        True if share requires email to access.

        :return: The require_email of this ShareAttributes.
        :rtype: bool
        """
        return self._require_email

    @require_email.setter
    def require_email(self, require_email):
        """Sets the require_email of this ShareAttributes.

        True if share requires email to access.

        :param require_email: The require_email of this ShareAttributes.
        :type require_email: bool
        """

        self._require_email = require_email

    @property
    def resent(self):
        """Gets the resent of this ShareAttributes.

        Invitations resent date. Can be `null` if resent never happened.

        :return: The resent of this ShareAttributes.
        :rtype: datetime
        """
        return self._resent

    @resent.setter
    def resent(self, resent):
        """Sets the resent of this ShareAttributes.

        Invitations resent date. Can be `null` if resent never happened.

        :param resent: The resent of this ShareAttributes.
        :type resent: datetime
        """

        self._resent = resent

    @property
    def status(self):
        """Gets the status of this ShareAttributes.

        Share activity status. Can be active (1) or deactivated (0).

        :return: The status of this ShareAttributes.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ShareAttributes.

        Share activity status. Can be active (1) or deactivated (0).

        :param status: The status of this ShareAttributes.
        :type status: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tracking_status(self):
        """Gets the tracking_status of this ShareAttributes.

        Checks recipient received status and returns whether it's been received (`complete`,) partial received (`incomplete`,) or not received yet (`pending`.)

        :return: The tracking_status of this ShareAttributes.
        :rtype: str
        """
        return self._tracking_status

    @tracking_status.setter
    def tracking_status(self, tracking_status):
        """Sets the tracking_status of this ShareAttributes.

        Checks recipient received status and returns whether it's been received (`complete`,) partial received (`incomplete`,) or not received yet (`pending`.)

        :param tracking_status: The tracking_status of this ShareAttributes.
        :type tracking_status: str
        """
        allowed_values = ["complete", "incomplete", "pending"]  # noqa: E501
        if tracking_status not in allowed_values:
            raise ValueError(
                "Invalid value for `tracking_status` ({0}), must be one of {1}"
                .format(tracking_status, allowed_values)
            )

        self._tracking_status = tracking_status

    @property
    def type(self):
        """Gets the type of this ShareAttributes.

        Type of share.

        :return: The type of this ShareAttributes.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ShareAttributes.

        Type of share.

        :param type: The type of this ShareAttributes.
        :type type: str
        """
        allowed_values = ["shared_folder", "send", "receive"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
