# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserPermissions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, change_password: bool=None, delete: bool=None, delete_form_data: bool=None, download: bool=None, list: bool=None, modify: bool=None, notification: bool=None, share: bool=None, upload: bool=None, view_form_data: bool=None):
        """UserPermissions - a model defined in OpenAPI

        :param change_password: The change_password of this UserPermissions.
        :param delete: The delete of this UserPermissions.
        :param delete_form_data: The delete_form_data of this UserPermissions.
        :param download: The download of this UserPermissions.
        :param list: The list of this UserPermissions.
        :param modify: The modify of this UserPermissions.
        :param notification: The notification of this UserPermissions.
        :param share: The share of this UserPermissions.
        :param upload: The upload of this UserPermissions.
        :param view_form_data: The view_form_data of this UserPermissions.
        """
        self.openapi_types = {
            'change_password': bool,
            'delete': bool,
            'delete_form_data': bool,
            'download': bool,
            'list': bool,
            'modify': bool,
            'notification': bool,
            'share': bool,
            'upload': bool,
            'view_form_data': bool
        }

        self.attribute_map = {
            'change_password': 'changePassword',
            'delete': 'delete',
            'delete_form_data': 'deleteFormData',
            'download': 'download',
            'list': 'list',
            'modify': 'modify',
            'notification': 'notification',
            'share': 'share',
            'upload': 'upload',
            'view_form_data': 'viewFormData'
        }

        self._change_password = change_password
        self._delete = delete
        self._delete_form_data = delete_form_data
        self._download = download
        self._list = list
        self._modify = modify
        self._notification = notification
        self._share = share
        self._upload = upload
        self._view_form_data = view_form_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserPermissions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserPermissions of this UserPermissions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def change_password(self):
        """Gets the change_password of this UserPermissions.

        Change (own) password permission flag

        :return: The change_password of this UserPermissions.
        :rtype: bool
        """
        return self._change_password

    @change_password.setter
    def change_password(self, change_password):
        """Sets the change_password of this UserPermissions.

        Change (own) password permission flag

        :param change_password: The change_password of this UserPermissions.
        :type change_password: bool
        """
        if change_password is None:
            raise ValueError("Invalid value for `change_password`, must not be `None`")

        self._change_password = change_password

    @property
    def delete(self):
        """Gets the delete of this UserPermissions.

        Delete permission flag

        :return: The delete of this UserPermissions.
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this UserPermissions.

        Delete permission flag

        :param delete: The delete of this UserPermissions.
        :type delete: bool
        """
        if delete is None:
            raise ValueError("Invalid value for `delete`, must not be `None`")

        self._delete = delete

    @property
    def delete_form_data(self):
        """Gets the delete_form_data of this UserPermissions.

        Delete form data permission flag. If true, user can remove data that was submitted for a receive folder. This applies only to data submitted in the receive folder form, not the actual files uploaded.

        :return: The delete_form_data of this UserPermissions.
        :rtype: bool
        """
        return self._delete_form_data

    @delete_form_data.setter
    def delete_form_data(self, delete_form_data):
        """Sets the delete_form_data of this UserPermissions.

        Delete form data permission flag. If true, user can remove data that was submitted for a receive folder. This applies only to data submitted in the receive folder form, not the actual files uploaded.

        :param delete_form_data: The delete_form_data of this UserPermissions.
        :type delete_form_data: bool
        """
        if delete_form_data is None:
            raise ValueError("Invalid value for `delete_form_data`, must not be `None`")

        self._delete_form_data = delete_form_data

    @property
    def download(self):
        """Gets the download of this UserPermissions.

        Download permission flag

        :return: The download of this UserPermissions.
        :rtype: bool
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this UserPermissions.

        Download permission flag

        :param download: The download of this UserPermissions.
        :type download: bool
        """
        if download is None:
            raise ValueError("Invalid value for `download`, must not be `None`")

        self._download = download

    @property
    def list(self):
        """Gets the list of this UserPermissions.

        View folder contents permission flag

        :return: The list of this UserPermissions.
        :rtype: bool
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this UserPermissions.

        View folder contents permission flag

        :param list: The list of this UserPermissions.
        :type list: bool
        """
        if list is None:
            raise ValueError("Invalid value for `list`, must not be `None`")

        self._list = list

    @property
    def modify(self):
        """Gets the modify of this UserPermissions.

        Modify permission flag

        :return: The modify of this UserPermissions.
        :rtype: bool
        """
        return self._modify

    @modify.setter
    def modify(self, modify):
        """Sets the modify of this UserPermissions.

        Modify permission flag

        :param modify: The modify of this UserPermissions.
        :type modify: bool
        """
        if modify is None:
            raise ValueError("Invalid value for `modify`, must not be `None`")

        self._modify = modify

    @property
    def notification(self):
        """Gets the notification of this UserPermissions.

        Notifications permission flag

        :return: The notification of this UserPermissions.
        :rtype: bool
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this UserPermissions.

        Notifications permission flag

        :param notification: The notification of this UserPermissions.
        :type notification: bool
        """
        if notification is None:
            raise ValueError("Invalid value for `notification`, must not be `None`")

        self._notification = notification

    @property
    def share(self):
        """Gets the share of this UserPermissions.

        Sharing permission flag

        :return: The share of this UserPermissions.
        :rtype: bool
        """
        return self._share

    @share.setter
    def share(self, share):
        """Sets the share of this UserPermissions.

        Sharing permission flag

        :param share: The share of this UserPermissions.
        :type share: bool
        """
        if share is None:
            raise ValueError("Invalid value for `share`, must not be `None`")

        self._share = share

    @property
    def upload(self):
        """Gets the upload of this UserPermissions.

        Upload permission flag

        :return: The upload of this UserPermissions.
        :rtype: bool
        """
        return self._upload

    @upload.setter
    def upload(self, upload):
        """Sets the upload of this UserPermissions.

        Upload permission flag

        :param upload: The upload of this UserPermissions.
        :type upload: bool
        """
        if upload is None:
            raise ValueError("Invalid value for `upload`, must not be `None`")

        self._upload = upload

    @property
    def view_form_data(self):
        """Gets the view_form_data of this UserPermissions.

        Access Form Data permission flag. If true, user can view submissions that have been stored for a receive folder. This includes any data submitted in the receive folder form.

        :return: The view_form_data of this UserPermissions.
        :rtype: bool
        """
        return self._view_form_data

    @view_form_data.setter
    def view_form_data(self, view_form_data):
        """Sets the view_form_data of this UserPermissions.

        Access Form Data permission flag. If true, user can view submissions that have been stored for a receive folder. This includes any data submitted in the receive folder form.

        :param view_form_data: The view_form_data of this UserPermissions.
        :type view_form_data: bool
        """
        if view_form_data is None:
            raise ValueError("Invalid value for `view_form_data`, must not be `None`")

        self._view_form_data = view_form_data
