# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompressFilesRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive_name: str=None, parent_resource: str=None, resources: List[str]=None):
        """CompressFilesRequestBody - a model defined in OpenAPI

        :param archive_name: The archive_name of this CompressFilesRequestBody.
        :param parent_resource: The parent_resource of this CompressFilesRequestBody.
        :param resources: The resources of this CompressFilesRequestBody.
        """
        self.openapi_types = {
            'archive_name': str,
            'parent_resource': str,
            'resources': List[str]
        }

        self.attribute_map = {
            'archive_name': 'archiveName',
            'parent_resource': 'parentResource',
            'resources': 'resources'
        }

        self._archive_name = archive_name
        self._parent_resource = parent_resource
        self._resources = resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompressFilesRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompressFilesRequestBody of this CompressFilesRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_name(self):
        """Gets the archive_name of this CompressFilesRequestBody.

        Name of the zip archive to create. If left blank, current date will be used.

        :return: The archive_name of this CompressFilesRequestBody.
        :rtype: str
        """
        return self._archive_name

    @archive_name.setter
    def archive_name(self, archive_name):
        """Sets the archive_name of this CompressFilesRequestBody.

        Name of the zip archive to create. If left blank, current date will be used.

        :param archive_name: The archive_name of this CompressFilesRequestBody.
        :type archive_name: str
        """

        self._archive_name = archive_name

    @property
    def parent_resource(self):
        """Gets the parent_resource of this CompressFilesRequestBody.

        Resource identifier of the folder where zip archive should be created.

        :return: The parent_resource of this CompressFilesRequestBody.
        :rtype: str
        """
        return self._parent_resource

    @parent_resource.setter
    def parent_resource(self, parent_resource):
        """Sets the parent_resource of this CompressFilesRequestBody.

        Resource identifier of the folder where zip archive should be created.

        :param parent_resource: The parent_resource of this CompressFilesRequestBody.
        :type parent_resource: str
        """

        self._parent_resource = parent_resource

    @property
    def resources(self):
        """Gets the resources of this CompressFilesRequestBody.

        Resource identifiers for file(s)/folder(s) to include in new zip file

        :return: The resources of this CompressFilesRequestBody.
        :rtype: List[str]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this CompressFilesRequestBody.

        Resource identifiers for file(s)/folder(s) to include in new zip file

        :param resources: The resources of this CompressFilesRequestBody.
        :type resources: List[str]
        """
        if resources is None:
            raise ValueError("Invalid value for `resources`, must not be `None`")

        self._resources = resources
