# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_mode import AccessMode
from openapi_server.models.add_share_request_body_recipients_inner import AddShareRequestBodyRecipientsInner
from openapi_server import util


class UpdateShareRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_mode: AccessMode=None, embed: bool=None, expiration: datetime=None, file_drop_create_folders: bool=None, has_notification: bool=None, is_public: bool=None, message_body: str=None, message_subject: str=None, name: str=None, notification_emails: List[str]=None, password: str=None, recipients: List[AddShareRequestBodyRecipientsInner]=None, require_email: bool=None, resources: List[str]=None, status: int=None):
        """UpdateShareRequestBody - a model defined in OpenAPI

        :param access_mode: The access_mode of this UpdateShareRequestBody.
        :param embed: The embed of this UpdateShareRequestBody.
        :param expiration: The expiration of this UpdateShareRequestBody.
        :param file_drop_create_folders: The file_drop_create_folders of this UpdateShareRequestBody.
        :param has_notification: The has_notification of this UpdateShareRequestBody.
        :param is_public: The is_public of this UpdateShareRequestBody.
        :param message_body: The message_body of this UpdateShareRequestBody.
        :param message_subject: The message_subject of this UpdateShareRequestBody.
        :param name: The name of this UpdateShareRequestBody.
        :param notification_emails: The notification_emails of this UpdateShareRequestBody.
        :param password: The password of this UpdateShareRequestBody.
        :param recipients: The recipients of this UpdateShareRequestBody.
        :param require_email: The require_email of this UpdateShareRequestBody.
        :param resources: The resources of this UpdateShareRequestBody.
        :param status: The status of this UpdateShareRequestBody.
        """
        self.openapi_types = {
            'access_mode': AccessMode,
            'embed': bool,
            'expiration': datetime,
            'file_drop_create_folders': bool,
            'has_notification': bool,
            'is_public': bool,
            'message_body': str,
            'message_subject': str,
            'name': str,
            'notification_emails': List[str],
            'password': str,
            'recipients': List[AddShareRequestBodyRecipientsInner],
            'require_email': bool,
            'resources': List[str],
            'status': int
        }

        self.attribute_map = {
            'access_mode': 'accessMode',
            'embed': 'embed',
            'expiration': 'expiration',
            'file_drop_create_folders': 'fileDropCreateFolders',
            'has_notification': 'hasNotification',
            'is_public': 'isPublic',
            'message_body': 'messageBody',
            'message_subject': 'messageSubject',
            'name': 'name',
            'notification_emails': 'notificationEmails',
            'password': 'password',
            'recipients': 'recipients',
            'require_email': 'requireEmail',
            'resources': 'resources',
            'status': 'status'
        }

        self._access_mode = access_mode
        self._embed = embed
        self._expiration = expiration
        self._file_drop_create_folders = file_drop_create_folders
        self._has_notification = has_notification
        self._is_public = is_public
        self._message_body = message_body
        self._message_subject = message_subject
        self._name = name
        self._notification_emails = notification_emails
        self._password = password
        self._recipients = recipients
        self._require_email = require_email
        self._resources = resources
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateShareRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateShareRequestBody of this UpdateShareRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_mode(self):
        """Gets the access_mode of this UpdateShareRequestBody.


        :return: The access_mode of this UpdateShareRequestBody.
        :rtype: AccessMode
        """
        return self._access_mode

    @access_mode.setter
    def access_mode(self, access_mode):
        """Sets the access_mode of this UpdateShareRequestBody.


        :param access_mode: The access_mode of this UpdateShareRequestBody.
        :type access_mode: AccessMode
        """

        self._access_mode = access_mode

    @property
    def embed(self):
        """Gets the embed of this UpdateShareRequestBody.

        Whether the share can be embedded in another web page.

        :return: The embed of this UpdateShareRequestBody.
        :rtype: bool
        """
        return self._embed

    @embed.setter
    def embed(self, embed):
        """Sets the embed of this UpdateShareRequestBody.

        Whether the share can be embedded in another web page.

        :param embed: The embed of this UpdateShareRequestBody.
        :type embed: bool
        """

        self._embed = embed

    @property
    def expiration(self):
        """Gets the expiration of this UpdateShareRequestBody.

        New expiration date and time for the share

        :return: The expiration of this UpdateShareRequestBody.
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this UpdateShareRequestBody.

        New expiration date and time for the share

        :param expiration: The expiration of this UpdateShareRequestBody.
        :type expiration: datetime
        """

        self._expiration = expiration

    @property
    def file_drop_create_folders(self):
        """Gets the file_drop_create_folders of this UpdateShareRequestBody.

        Whether uploads to a receive folder should be automatically placed into subfolders. See our [receive folder documentation](/docs/account/05-file-sharing/05-form-builder#advanced-form-settings)

        :return: The file_drop_create_folders of this UpdateShareRequestBody.
        :rtype: bool
        """
        return self._file_drop_create_folders

    @file_drop_create_folders.setter
    def file_drop_create_folders(self, file_drop_create_folders):
        """Sets the file_drop_create_folders of this UpdateShareRequestBody.

        Whether uploads to a receive folder should be automatically placed into subfolders. See our [receive folder documentation](/docs/account/05-file-sharing/05-form-builder#advanced-form-settings)

        :param file_drop_create_folders: The file_drop_create_folders of this UpdateShareRequestBody.
        :type file_drop_create_folders: bool
        """

        self._file_drop_create_folders = file_drop_create_folders

    @property
    def has_notification(self):
        """Gets the has_notification of this UpdateShareRequestBody.

        Whether delivery receipts should be sent for this share.

        :return: The has_notification of this UpdateShareRequestBody.
        :rtype: bool
        """
        return self._has_notification

    @has_notification.setter
    def has_notification(self, has_notification):
        """Sets the has_notification of this UpdateShareRequestBody.

        Whether delivery receipts should be sent for this share.

        :param has_notification: The has_notification of this UpdateShareRequestBody.
        :type has_notification: bool
        """

        self._has_notification = has_notification

    @property
    def is_public(self):
        """Gets the is_public of this UpdateShareRequestBody.

        Whether people can visit the share without following a link from an invitation email

        :return: The is_public of this UpdateShareRequestBody.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this UpdateShareRequestBody.

        Whether people can visit the share without following a link from an invitation email

        :param is_public: The is_public of this UpdateShareRequestBody.
        :type is_public: bool
        """

        self._is_public = is_public

    @property
    def message_body(self):
        """Gets the message_body of this UpdateShareRequestBody.

        Message content to use for emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `subject`

        :return: The message_body of this UpdateShareRequestBody.
        :rtype: str
        """
        return self._message_body

    @message_body.setter
    def message_body(self, message_body):
        """Sets the message_body of this UpdateShareRequestBody.

        Message content to use for emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `subject`

        :param message_body: The message_body of this UpdateShareRequestBody.
        :type message_body: str
        """

        self._message_body = message_body

    @property
    def message_subject(self):
        """Gets the message_subject of this UpdateShareRequestBody.

        Subject to use on emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `message`

        :return: The message_subject of this UpdateShareRequestBody.
        :rtype: str
        """
        return self._message_subject

    @message_subject.setter
    def message_subject(self, message_subject):
        """Sets the message_subject of this UpdateShareRequestBody.

        Subject to use on emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `message`

        :param message_subject: The message_subject of this UpdateShareRequestBody.
        :type message_subject: str
        """

        self._message_subject = message_subject

    @property
    def name(self):
        """Gets the name of this UpdateShareRequestBody.

        Name of the share.

        :return: The name of this UpdateShareRequestBody.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateShareRequestBody.

        Name of the share.

        :param name: The name of this UpdateShareRequestBody.
        :type name: str
        """

        self._name = name

    @property
    def notification_emails(self):
        """Gets the notification_emails of this UpdateShareRequestBody.

        List of email addresses to send delivery receipts to. Ignored if `hasNotification` is false. 

        :return: The notification_emails of this UpdateShareRequestBody.
        :rtype: List[str]
        """
        return self._notification_emails

    @notification_emails.setter
    def notification_emails(self, notification_emails):
        """Sets the notification_emails of this UpdateShareRequestBody.

        List of email addresses to send delivery receipts to. Ignored if `hasNotification` is false. 

        :param notification_emails: The notification_emails of this UpdateShareRequestBody.
        :type notification_emails: List[str]
        """

        self._notification_emails = notification_emails

    @property
    def password(self):
        """Gets the password of this UpdateShareRequestBody.

        New password for the share. To leave the password unchanged, do not send this parameter.

        :return: The password of this UpdateShareRequestBody.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UpdateShareRequestBody.

        New password for the share. To leave the password unchanged, do not send this parameter.

        :param password: The password of this UpdateShareRequestBody.
        :type password: str
        """

        self._password = password

    @property
    def recipients(self):
        """Gets the recipients of this UpdateShareRequestBody.

        People you want to invite to the share.   **Note**: unless you also set the `subject` and `message` for the new share, invitation emails will not be sent to these recipients.  **Note**: Recipients in this list will **REPLACE** the recipients already assigned to this share. 

        :return: The recipients of this UpdateShareRequestBody.
        :rtype: List[AddShareRequestBodyRecipientsInner]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this UpdateShareRequestBody.

        People you want to invite to the share.   **Note**: unless you also set the `subject` and `message` for the new share, invitation emails will not be sent to these recipients.  **Note**: Recipients in this list will **REPLACE** the recipients already assigned to this share. 

        :param recipients: The recipients of this UpdateShareRequestBody.
        :type recipients: List[AddShareRequestBodyRecipientsInner]
        """

        self._recipients = recipients

    @property
    def require_email(self):
        """Gets the require_email of this UpdateShareRequestBody.

        Whether visitors to the share will be required to enter their email in order to access the share.

        :return: The require_email of this UpdateShareRequestBody.
        :rtype: bool
        """
        return self._require_email

    @require_email.setter
    def require_email(self, require_email):
        """Sets the require_email of this UpdateShareRequestBody.

        Whether visitors to the share will be required to enter their email in order to access the share.

        :param require_email: The require_email of this UpdateShareRequestBody.
        :type require_email: bool
        """

        self._require_email = require_email

    @property
    def resources(self):
        """Gets the resources of this UpdateShareRequestBody.

        Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.  **shared_folder** and **receive** shares must have only one `resource`, which is a directory that does not have a current share attached.  **send** shares may have multiple `resource` parameters.   **NOTE**: Sending this parameter will **REPLACE** the existing resources with the resources included in this request.

        :return: The resources of this UpdateShareRequestBody.
        :rtype: List[str]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this UpdateShareRequestBody.

        Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.  **shared_folder** and **receive** shares must have only one `resource`, which is a directory that does not have a current share attached.  **send** shares may have multiple `resource` parameters.   **NOTE**: Sending this parameter will **REPLACE** the existing resources with the resources included in this request.

        :param resources: The resources of this UpdateShareRequestBody.
        :type resources: List[str]
        """

        self._resources = resources

    @property
    def status(self):
        """Gets the status of this UpdateShareRequestBody.

        New status for the share. You can set an active share to inactive by setting the status to **0**

        :return: The status of this UpdateShareRequestBody.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateShareRequestBody.

        New status for the share. You can set an active share to inactive by setting the status to **0**

        :param status: The status of this UpdateShareRequestBody.
        :type status: int
        """

        self._status = status
