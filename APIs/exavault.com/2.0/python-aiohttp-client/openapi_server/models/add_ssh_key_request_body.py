# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddSSHKeyRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, public_key: str=None, user_id: int=None):
        """AddSSHKeyRequestBody - a model defined in OpenAPI

        :param public_key: The public_key of this AddSSHKeyRequestBody.
        :param user_id: The user_id of this AddSSHKeyRequestBody.
        """
        self.openapi_types = {
            'public_key': str,
            'user_id': int
        }

        self.attribute_map = {
            'public_key': 'publicKey',
            'user_id': 'userId'
        }

        self._public_key = public_key
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddSSHKeyRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddSSHKeyRequestBody of this AddSSHKeyRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def public_key(self):
        """Gets the public_key of this AddSSHKeyRequestBody.

        Public Key to provide ExaVault. You can provide the Public Key as formatted from the ssh-keygen command or a standard rfc-4716 format. 

        :return: The public_key of this AddSSHKeyRequestBody.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this AddSSHKeyRequestBody.

        Public Key to provide ExaVault. You can provide the Public Key as formatted from the ssh-keygen command or a standard rfc-4716 format. 

        :param public_key: The public_key of this AddSSHKeyRequestBody.
        :type public_key: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")

        self._public_key = public_key

    @property
    def user_id(self):
        """Gets the user_id of this AddSSHKeyRequestBody.

        ID of the user to assign the new key to. 

        :return: The user_id of this AddSSHKeyRequestBody.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AddSSHKeyRequestBody.

        ID of the user to assign the new key to. 

        :param user_id: The user_id of this AddSSHKeyRequestBody.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
