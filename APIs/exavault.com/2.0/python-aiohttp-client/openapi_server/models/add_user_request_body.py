# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_user_request_body_permissions import AddUserRequestBodyPermissions
from openapi_server import util


class AddUserRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, expiration: str=None, home_resource: str=None, locked: bool=None, nickname: str=None, onboarding: bool=None, password: str=None, permissions: AddUserRequestBodyPermissions=None, role: str=None, time_zone: str=None, username: str=None, welcome_email: bool=None):
        """AddUserRequestBody - a model defined in OpenAPI

        :param email: The email of this AddUserRequestBody.
        :param expiration: The expiration of this AddUserRequestBody.
        :param home_resource: The home_resource of this AddUserRequestBody.
        :param locked: The locked of this AddUserRequestBody.
        :param nickname: The nickname of this AddUserRequestBody.
        :param onboarding: The onboarding of this AddUserRequestBody.
        :param password: The password of this AddUserRequestBody.
        :param permissions: The permissions of this AddUserRequestBody.
        :param role: The role of this AddUserRequestBody.
        :param time_zone: The time_zone of this AddUserRequestBody.
        :param username: The username of this AddUserRequestBody.
        :param welcome_email: The welcome_email of this AddUserRequestBody.
        """
        self.openapi_types = {
            'email': str,
            'expiration': str,
            'home_resource': str,
            'locked': bool,
            'nickname': str,
            'onboarding': bool,
            'password': str,
            'permissions': AddUserRequestBodyPermissions,
            'role': str,
            'time_zone': str,
            'username': str,
            'welcome_email': bool
        }

        self.attribute_map = {
            'email': 'email',
            'expiration': 'expiration',
            'home_resource': 'homeResource',
            'locked': 'locked',
            'nickname': 'nickname',
            'onboarding': 'onboarding',
            'password': 'password',
            'permissions': 'permissions',
            'role': 'role',
            'time_zone': 'timeZone',
            'username': 'username',
            'welcome_email': 'welcomeEmail'
        }

        self._email = email
        self._expiration = expiration
        self._home_resource = home_resource
        self._locked = locked
        self._nickname = nickname
        self._onboarding = onboarding
        self._password = password
        self._permissions = permissions
        self._role = role
        self._time_zone = time_zone
        self._username = username
        self._welcome_email = welcome_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddUserRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddUserRequestBody of this AddUserRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this AddUserRequestBody.

        Email address for the user

        :return: The email of this AddUserRequestBody.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AddUserRequestBody.

        Email address for the user

        :param email: The email of this AddUserRequestBody.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def expiration(self):
        """Gets the expiration of this AddUserRequestBody.

        Optional timestamp when the user should expire, formatted in date-time.

        :return: The expiration of this AddUserRequestBody.
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this AddUserRequestBody.

        Optional timestamp when the user should expire, formatted in date-time.

        :param expiration: The expiration of this AddUserRequestBody.
        :type expiration: str
        """

        self._expiration = expiration

    @property
    def home_resource(self):
        """Gets the home_resource of this AddUserRequestBody.

        Resource identifier for the user's home folder. See details on [how to specify resources](#section/Identifying-Resources) above.  The user will be locked to this directory and unable to move 'up' in the account. If the folder does not exist in the account, it will be created when the user is created.   Users with the `role` **admin** should have their homeResource set to '/'

        :return: The home_resource of this AddUserRequestBody.
        :rtype: str
        """
        return self._home_resource

    @home_resource.setter
    def home_resource(self, home_resource):
        """Sets the home_resource of this AddUserRequestBody.

        Resource identifier for the user's home folder. See details on [how to specify resources](#section/Identifying-Resources) above.  The user will be locked to this directory and unable to move 'up' in the account. If the folder does not exist in the account, it will be created when the user is created.   Users with the `role` **admin** should have their homeResource set to '/'

        :param home_resource: The home_resource of this AddUserRequestBody.
        :type home_resource: str
        """
        if home_resource is None:
            raise ValueError("Invalid value for `home_resource`, must not be `None`")

        self._home_resource = home_resource

    @property
    def locked(self):
        """Gets the locked of this AddUserRequestBody.

        If true, the user will not be able to log in

        :return: The locked of this AddUserRequestBody.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this AddUserRequestBody.

        If true, the user will not be able to log in

        :param locked: The locked of this AddUserRequestBody.
        :type locked: bool
        """

        self._locked = locked

    @property
    def nickname(self):
        """Gets the nickname of this AddUserRequestBody.

        An optional nickname (e.g. 'David from Sales').

        :return: The nickname of this AddUserRequestBody.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this AddUserRequestBody.

        An optional nickname (e.g. 'David from Sales').

        :param nickname: The nickname of this AddUserRequestBody.
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def onboarding(self):
        """Gets the onboarding of this AddUserRequestBody.

        Set this to **true** to enable extra help popups in the web file manager for this user.

        :return: The onboarding of this AddUserRequestBody.
        :rtype: bool
        """
        return self._onboarding

    @onboarding.setter
    def onboarding(self, onboarding):
        """Sets the onboarding of this AddUserRequestBody.

        Set this to **true** to enable extra help popups in the web file manager for this user.

        :param onboarding: The onboarding of this AddUserRequestBody.
        :type onboarding: bool
        """

        self._onboarding = onboarding

    @property
    def password(self):
        """Gets the password of this AddUserRequestBody.

        Password for the user

        :return: The password of this AddUserRequestBody.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AddUserRequestBody.

        Password for the user

        :param password: The password of this AddUserRequestBody.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def permissions(self):
        """Gets the permissions of this AddUserRequestBody.


        :return: The permissions of this AddUserRequestBody.
        :rtype: AddUserRequestBodyPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this AddUserRequestBody.


        :param permissions: The permissions of this AddUserRequestBody.
        :type permissions: AddUserRequestBodyPermissions
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def role(self):
        """Gets the role of this AddUserRequestBody.

        The type of user to create, either **user** or **admin**.

        :return: The role of this AddUserRequestBody.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this AddUserRequestBody.

        The type of user to create, either **user** or **admin**.

        :param role: The role of this AddUserRequestBody.
        :type role: str
        """
        allowed_values = ["user", "admin"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def time_zone(self):
        """Gets the time_zone of this AddUserRequestBody.

        Time zone, used for accurate time display within the application. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values. 

        :return: The time_zone of this AddUserRequestBody.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this AddUserRequestBody.

        Time zone, used for accurate time display within the application. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values. 

        :param time_zone: The time_zone of this AddUserRequestBody.
        :type time_zone: str
        """
        if time_zone is None:
            raise ValueError("Invalid value for `time_zone`, must not be `None`")

        self._time_zone = time_zone

    @property
    def username(self):
        """Gets the username of this AddUserRequestBody.

        Username of the user to create. This should follow standard username conventions - spaces are not allowed, etc. We do allow email addresses as usernames.  **Note** Usernames must be unique across all ExaVault accounts.

        :return: The username of this AddUserRequestBody.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AddUserRequestBody.

        Username of the user to create. This should follow standard username conventions - spaces are not allowed, etc. We do allow email addresses as usernames.  **Note** Usernames must be unique across all ExaVault accounts.

        :param username: The username of this AddUserRequestBody.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def welcome_email(self):
        """Gets the welcome_email of this AddUserRequestBody.

        If **true**, send this new user a welcome email upon creation. The content of the welcome email can be configured with the [PATCH /accounts](#operation/updateAccount) method.

        :return: The welcome_email of this AddUserRequestBody.
        :rtype: bool
        """
        return self._welcome_email

    @welcome_email.setter
    def welcome_email(self, welcome_email):
        """Sets the welcome_email of this AddUserRequestBody.

        If **true**, send this new user a welcome email upon creation. The content of the welcome email can be configured with the [PATCH /accounts](#operation/updateAccount) method.

        :param welcome_email: The welcome_email of this AddUserRequestBody.
        :type welcome_email: bool
        """

        self._welcome_email = welcome_email
