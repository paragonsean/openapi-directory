# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_mode import AccessMode
from openapi_server.models.add_share_request_body_recipients_inner import AddShareRequestBodyRecipientsInner
from openapi_server import util


class AddShareRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_mode: AccessMode=None, embed: bool=None, expiration: datetime=None, file_drop_create_folders: bool=None, has_notification: bool=None, is_public: bool=None, message_body: str=None, message_subject: str=None, name: str=None, notification_emails: List[str]=None, password: str=None, recipients: List[AddShareRequestBodyRecipientsInner]=None, require_email: bool=None, resources: List[str]=None, sending_local_files: bool=None, type: str=None):
        """AddShareRequestBody - a model defined in OpenAPI

        :param access_mode: The access_mode of this AddShareRequestBody.
        :param embed: The embed of this AddShareRequestBody.
        :param expiration: The expiration of this AddShareRequestBody.
        :param file_drop_create_folders: The file_drop_create_folders of this AddShareRequestBody.
        :param has_notification: The has_notification of this AddShareRequestBody.
        :param is_public: The is_public of this AddShareRequestBody.
        :param message_body: The message_body of this AddShareRequestBody.
        :param message_subject: The message_subject of this AddShareRequestBody.
        :param name: The name of this AddShareRequestBody.
        :param notification_emails: The notification_emails of this AddShareRequestBody.
        :param password: The password of this AddShareRequestBody.
        :param recipients: The recipients of this AddShareRequestBody.
        :param require_email: The require_email of this AddShareRequestBody.
        :param resources: The resources of this AddShareRequestBody.
        :param sending_local_files: The sending_local_files of this AddShareRequestBody.
        :param type: The type of this AddShareRequestBody.
        """
        self.openapi_types = {
            'access_mode': AccessMode,
            'embed': bool,
            'expiration': datetime,
            'file_drop_create_folders': bool,
            'has_notification': bool,
            'is_public': bool,
            'message_body': str,
            'message_subject': str,
            'name': str,
            'notification_emails': List[str],
            'password': str,
            'recipients': List[AddShareRequestBodyRecipientsInner],
            'require_email': bool,
            'resources': List[str],
            'sending_local_files': bool,
            'type': str
        }

        self.attribute_map = {
            'access_mode': 'accessMode',
            'embed': 'embed',
            'expiration': 'expiration',
            'file_drop_create_folders': 'fileDropCreateFolders',
            'has_notification': 'hasNotification',
            'is_public': 'isPublic',
            'message_body': 'messageBody',
            'message_subject': 'messageSubject',
            'name': 'name',
            'notification_emails': 'notificationEmails',
            'password': 'password',
            'recipients': 'recipients',
            'require_email': 'requireEmail',
            'resources': 'resources',
            'sending_local_files': 'sendingLocalFiles',
            'type': 'type'
        }

        self._access_mode = access_mode
        self._embed = embed
        self._expiration = expiration
        self._file_drop_create_folders = file_drop_create_folders
        self._has_notification = has_notification
        self._is_public = is_public
        self._message_body = message_body
        self._message_subject = message_subject
        self._name = name
        self._notification_emails = notification_emails
        self._password = password
        self._recipients = recipients
        self._require_email = require_email
        self._resources = resources
        self._sending_local_files = sending_local_files
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddShareRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddShareRequestBody of this AddShareRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_mode(self):
        """Gets the access_mode of this AddShareRequestBody.


        :return: The access_mode of this AddShareRequestBody.
        :rtype: AccessMode
        """
        return self._access_mode

    @access_mode.setter
    def access_mode(self, access_mode):
        """Sets the access_mode of this AddShareRequestBody.


        :param access_mode: The access_mode of this AddShareRequestBody.
        :type access_mode: AccessMode
        """

        self._access_mode = access_mode

    @property
    def embed(self):
        """Gets the embed of this AddShareRequestBody.

        Whether this share can be embedded within a web page.

        :return: The embed of this AddShareRequestBody.
        :rtype: bool
        """
        return self._embed

    @embed.setter
    def embed(self, embed):
        """Sets the embed of this AddShareRequestBody.

        Whether this share can be embedded within a web page.

        :param embed: The embed of this AddShareRequestBody.
        :type embed: bool
        """

        self._embed = embed

    @property
    def expiration(self):
        """Gets the expiration of this AddShareRequestBody.

        Expiration date for the share. If someone attempts to use the share after this date, they will receive an error that the share is not available.

        :return: The expiration of this AddShareRequestBody.
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this AddShareRequestBody.

        Expiration date for the share. If someone attempts to use the share after this date, they will receive an error that the share is not available.

        :param expiration: The expiration of this AddShareRequestBody.
        :type expiration: datetime
        """

        self._expiration = expiration

    @property
    def file_drop_create_folders(self):
        """Gets the file_drop_create_folders of this AddShareRequestBody.

        Only used for **receive** shares. If true, uploads will be automatically placed into sub-folders of the folder, named after the chosen field on your form. 

        :return: The file_drop_create_folders of this AddShareRequestBody.
        :rtype: bool
        """
        return self._file_drop_create_folders

    @file_drop_create_folders.setter
    def file_drop_create_folders(self, file_drop_create_folders):
        """Sets the file_drop_create_folders of this AddShareRequestBody.

        Only used for **receive** shares. If true, uploads will be automatically placed into sub-folders of the folder, named after the chosen field on your form. 

        :param file_drop_create_folders: The file_drop_create_folders of this AddShareRequestBody.
        :type file_drop_create_folders: bool
        """

        self._file_drop_create_folders = file_drop_create_folders

    @property
    def has_notification(self):
        """Gets the has_notification of this AddShareRequestBody.

        Whether delivery receipts should be sent.

        :return: The has_notification of this AddShareRequestBody.
        :rtype: bool
        """
        return self._has_notification

    @has_notification.setter
    def has_notification(self, has_notification):
        """Sets the has_notification of this AddShareRequestBody.

        Whether delivery receipts should be sent.

        :param has_notification: The has_notification of this AddShareRequestBody.
        :type has_notification: bool
        """

        self._has_notification = has_notification

    @property
    def is_public(self):
        """Gets the is_public of this AddShareRequestBody.

        Whether someone can visit the share without following a personalized recipient link.

        :return: The is_public of this AddShareRequestBody.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this AddShareRequestBody.

        Whether someone can visit the share without following a personalized recipient link.

        :param is_public: The is_public of this AddShareRequestBody.
        :type is_public: bool
        """

        self._is_public = is_public

    @property
    def message_body(self):
        """Gets the message_body of this AddShareRequestBody.

        The message to be included in email invitations for your recipients. Ignored if you have not also provided `recipients` and `messageSubject`

        :return: The message_body of this AddShareRequestBody.
        :rtype: str
        """
        return self._message_body

    @message_body.setter
    def message_body(self, message_body):
        """Sets the message_body of this AddShareRequestBody.

        The message to be included in email invitations for your recipients. Ignored if you have not also provided `recipients` and `messageSubject`

        :param message_body: The message_body of this AddShareRequestBody.
        :type message_body: str
        """

        self._message_body = message_body

    @property
    def message_subject(self):
        """Gets the message_subject of this AddShareRequestBody.

        Subject to use on emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `messageBody`

        :return: The message_subject of this AddShareRequestBody.
        :rtype: str
        """
        return self._message_subject

    @message_subject.setter
    def message_subject(self, message_subject):
        """Sets the message_subject of this AddShareRequestBody.

        Subject to use on emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `messageBody`

        :param message_subject: The message_subject of this AddShareRequestBody.
        :type message_subject: str
        """

        self._message_subject = message_subject

    @property
    def name(self):
        """Gets the name of this AddShareRequestBody.

        A name for the share. This will be visible on the page that recipients visit. 

        :return: The name of this AddShareRequestBody.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddShareRequestBody.

        A name for the share. This will be visible on the page that recipients visit. 

        :param name: The name of this AddShareRequestBody.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def notification_emails(self):
        """Gets the notification_emails of this AddShareRequestBody.

        Emails that will receive delivery receipts for this share. `hasNotification` must be **true** for delivery receipts will be sent.

        :return: The notification_emails of this AddShareRequestBody.
        :rtype: List[str]
        """
        return self._notification_emails

    @notification_emails.setter
    def notification_emails(self, notification_emails):
        """Sets the notification_emails of this AddShareRequestBody.

        Emails that will receive delivery receipts for this share. `hasNotification` must be **true** for delivery receipts will be sent.

        :param notification_emails: The notification_emails of this AddShareRequestBody.
        :type notification_emails: List[str]
        """

        self._notification_emails = notification_emails

    @property
    def password(self):
        """Gets the password of this AddShareRequestBody.

        Set a password for recipients to access the share. All recipients will use the same password.

        :return: The password of this AddShareRequestBody.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AddShareRequestBody.

        Set a password for recipients to access the share. All recipients will use the same password.

        :param password: The password of this AddShareRequestBody.
        :type password: str
        """

        self._password = password

    @property
    def recipients(self):
        """Gets the recipients of this AddShareRequestBody.

        People you want to invite to the share. **Note**: unless you also set the `messageSubject` and `messageBody` for the new share, invitation emails will not be sent to these recipients.

        :return: The recipients of this AddShareRequestBody.
        :rtype: List[AddShareRequestBodyRecipientsInner]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this AddShareRequestBody.

        People you want to invite to the share. **Note**: unless you also set the `messageSubject` and `messageBody` for the new share, invitation emails will not be sent to these recipients.

        :param recipients: The recipients of this AddShareRequestBody.
        :type recipients: List[AddShareRequestBodyRecipientsInner]
        """

        self._recipients = recipients

    @property
    def require_email(self):
        """Gets the require_email of this AddShareRequestBody.

        True if recipients must provide their email to view the share.

        :return: The require_email of this AddShareRequestBody.
        :rtype: bool
        """
        return self._require_email

    @require_email.setter
    def require_email(self, require_email):
        """Sets the require_email of this AddShareRequestBody.

        True if recipients must provide their email to view the share.

        :param require_email: The require_email of this AddShareRequestBody.
        :type require_email: bool
        """

        self._require_email = require_email

    @property
    def resources(self):
        """Gets the resources of this AddShareRequestBody.

        Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.  **shared_folder** and **receive** shares must have only one `resource`, which is a directory that does not have a current share attached.  **send** shares may have multiple `resource` parameters. You can also leave this parameter null if you are planning to upload files to the send. If you are planning to upload files to the send that are not yet in your account, you will also need to call the [POST /shares/complete-send/{id}](#operation/completeDirectSend) endpoint to finish the send operation. 

        :return: The resources of this AddShareRequestBody.
        :rtype: List[str]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this AddShareRequestBody.

        Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.  **shared_folder** and **receive** shares must have only one `resource`, which is a directory that does not have a current share attached.  **send** shares may have multiple `resource` parameters. You can also leave this parameter null if you are planning to upload files to the send. If you are planning to upload files to the send that are not yet in your account, you will also need to call the [POST /shares/complete-send/{id}](#operation/completeDirectSend) endpoint to finish the send operation. 

        :param resources: The resources of this AddShareRequestBody.
        :type resources: List[str]
        """

        self._resources = resources

    @property
    def sending_local_files(self):
        """Gets the sending_local_files of this AddShareRequestBody.

        Use this only for **send** shares. Flag to indicate that you are going to upload additional files from your computer to the share. If this is **true**, you will also need to use the [POST /shares/complete-send/{id}](#operation/completeDirectSend) call to finish setting up your share after the files are uploaded.

        :return: The sending_local_files of this AddShareRequestBody.
        :rtype: bool
        """
        return self._sending_local_files

    @sending_local_files.setter
    def sending_local_files(self, sending_local_files):
        """Sets the sending_local_files of this AddShareRequestBody.

        Use this only for **send** shares. Flag to indicate that you are going to upload additional files from your computer to the share. If this is **true**, you will also need to use the [POST /shares/complete-send/{id}](#operation/completeDirectSend) call to finish setting up your share after the files are uploaded.

        :param sending_local_files: The sending_local_files of this AddShareRequestBody.
        :type sending_local_files: bool
        """

        self._sending_local_files = sending_local_files

    @property
    def type(self):
        """Gets the type of this AddShareRequestBody.

        The type of share to create. See above for a description of each.

        :return: The type of this AddShareRequestBody.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AddShareRequestBody.

        The type of share to create. See above for a description of each.

        :param type: The type of this AddShareRequestBody.
        :type type: str
        """
        allowed_values = ["shared_folder", "receive", "send"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
