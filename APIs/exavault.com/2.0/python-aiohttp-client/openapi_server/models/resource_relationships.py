# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_relationships_direct_file import ResourceRelationshipsDirectFile
from openapi_server.models.resource_relationships_notifications_inner import ResourceRelationshipsNotificationsInner
from openapi_server.models.resource_relationships_parent_resource import ResourceRelationshipsParentResource
from openapi_server.models.resource_relationships_share import ResourceRelationshipsShare
from openapi_server import util


class ResourceRelationships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, direct_file: ResourceRelationshipsDirectFile=None, notifications: List[ResourceRelationshipsNotificationsInner]=None, parent_resource: ResourceRelationshipsParentResource=None, share: ResourceRelationshipsShare=None):
        """ResourceRelationships - a model defined in OpenAPI

        :param direct_file: The direct_file of this ResourceRelationships.
        :param notifications: The notifications of this ResourceRelationships.
        :param parent_resource: The parent_resource of this ResourceRelationships.
        :param share: The share of this ResourceRelationships.
        """
        self.openapi_types = {
            'direct_file': ResourceRelationshipsDirectFile,
            'notifications': List[ResourceRelationshipsNotificationsInner],
            'parent_resource': ResourceRelationshipsParentResource,
            'share': ResourceRelationshipsShare
        }

        self.attribute_map = {
            'direct_file': 'directFile',
            'notifications': 'notifications',
            'parent_resource': 'parentResource',
            'share': 'share'
        }

        self._direct_file = direct_file
        self._notifications = notifications
        self._parent_resource = parent_resource
        self._share = share

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceRelationships':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Resource_relationships of this ResourceRelationships.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direct_file(self):
        """Gets the direct_file of this ResourceRelationships.


        :return: The direct_file of this ResourceRelationships.
        :rtype: ResourceRelationshipsDirectFile
        """
        return self._direct_file

    @direct_file.setter
    def direct_file(self, direct_file):
        """Sets the direct_file of this ResourceRelationships.


        :param direct_file: The direct_file of this ResourceRelationships.
        :type direct_file: ResourceRelationshipsDirectFile
        """

        self._direct_file = direct_file

    @property
    def notifications(self):
        """Gets the notifications of this ResourceRelationships.


        :return: The notifications of this ResourceRelationships.
        :rtype: List[ResourceRelationshipsNotificationsInner]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this ResourceRelationships.


        :param notifications: The notifications of this ResourceRelationships.
        :type notifications: List[ResourceRelationshipsNotificationsInner]
        """

        self._notifications = notifications

    @property
    def parent_resource(self):
        """Gets the parent_resource of this ResourceRelationships.


        :return: The parent_resource of this ResourceRelationships.
        :rtype: ResourceRelationshipsParentResource
        """
        return self._parent_resource

    @parent_resource.setter
    def parent_resource(self, parent_resource):
        """Sets the parent_resource of this ResourceRelationships.


        :param parent_resource: The parent_resource of this ResourceRelationships.
        :type parent_resource: ResourceRelationshipsParentResource
        """

        self._parent_resource = parent_resource

    @property
    def share(self):
        """Gets the share of this ResourceRelationships.


        :return: The share of this ResourceRelationships.
        :rtype: ResourceRelationshipsShare
        """
        return self._share

    @share.setter
    def share(self, share):
        """Sets the share of this ResourceRelationships.


        :param share: The share of this ResourceRelationships.
        :type share: ResourceRelationshipsShare
        """

        self._share = share
