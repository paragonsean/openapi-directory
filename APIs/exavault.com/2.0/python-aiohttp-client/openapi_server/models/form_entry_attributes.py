# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.form_entry_field import FormEntryField
from openapi_server import util


class FormEntryAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, fields: List[FormEntryField]=None, modified: datetime=None, paths: List[str]=None, status: str=None):
        """FormEntryAttributes - a model defined in OpenAPI

        :param created: The created of this FormEntryAttributes.
        :param fields: The fields of this FormEntryAttributes.
        :param modified: The modified of this FormEntryAttributes.
        :param paths: The paths of this FormEntryAttributes.
        :param status: The status of this FormEntryAttributes.
        """
        self.openapi_types = {
            'created': datetime,
            'fields': List[FormEntryField],
            'modified': datetime,
            'paths': List[str],
            'status': str
        }

        self.attribute_map = {
            'created': 'created',
            'fields': 'fields',
            'modified': 'modified',
            'paths': 'paths',
            'status': 'status'
        }

        self._created = created
        self._fields = fields
        self._modified = modified
        self._paths = paths
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FormEntryAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FormEntry_attributes of this FormEntryAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this FormEntryAttributes.

        Timestamp of the submission

        :return: The created of this FormEntryAttributes.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this FormEntryAttributes.

        Timestamp of the submission

        :param created: The created of this FormEntryAttributes.
        :type created: datetime
        """

        self._created = created

    @property
    def fields(self):
        """Gets the fields of this FormEntryAttributes.


        :return: The fields of this FormEntryAttributes.
        :rtype: List[FormEntryField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this FormEntryAttributes.


        :param fields: The fields of this FormEntryAttributes.
        :type fields: List[FormEntryField]
        """

        self._fields = fields

    @property
    def modified(self):
        """Gets the modified of this FormEntryAttributes.

        Timestamp of the field modified date

        :return: The modified of this FormEntryAttributes.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this FormEntryAttributes.

        Timestamp of the field modified date

        :param modified: The modified of this FormEntryAttributes.
        :type modified: datetime
        """

        self._modified = modified

    @property
    def paths(self):
        """Gets the paths of this FormEntryAttributes.

        Full paths to files associated with the form submission

        :return: The paths of this FormEntryAttributes.
        :rtype: List[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this FormEntryAttributes.

        Full paths to files associated with the form submission

        :param paths: The paths of this FormEntryAttributes.
        :type paths: List[str]
        """

        self._paths = paths

    @property
    def status(self):
        """Gets the status of this FormEntryAttributes.

        Form entry status

        :return: The status of this FormEntryAttributes.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FormEntryAttributes.

        Form entry status

        :param status: The status of this FormEntryAttributes.
        :type status: str
        """
        allowed_values = ["pending", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
