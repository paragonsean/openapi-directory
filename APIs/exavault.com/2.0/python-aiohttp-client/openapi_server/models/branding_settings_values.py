# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BrandingSettingsValues(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_name: str=None, custom_email: str=None, theme: str=None):
        """BrandingSettingsValues - a model defined in OpenAPI

        :param company_name: The company_name of this BrandingSettingsValues.
        :param custom_email: The custom_email of this BrandingSettingsValues.
        :param theme: The theme of this BrandingSettingsValues.
        """
        self.openapi_types = {
            'company_name': str,
            'custom_email': str,
            'theme': str
        }

        self.attribute_map = {
            'company_name': 'companyName',
            'custom_email': 'customEmail',
            'theme': 'theme'
        }

        self._company_name = company_name
        self._custom_email = custom_email
        self._theme = theme

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrandingSettingsValues':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BrandingSettingsValues of this BrandingSettingsValues.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_name(self):
        """Gets the company_name of this BrandingSettingsValues.

        Custom company name to include in copyright and title bar.

        :return: The company_name of this BrandingSettingsValues.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this BrandingSettingsValues.

        Custom company name to include in copyright and title bar.

        :param company_name: The company_name of this BrandingSettingsValues.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def custom_email(self):
        """Gets the custom_email of this BrandingSettingsValues.

        Address to use as sender of email messages generated by ExaVault

        :return: The custom_email of this BrandingSettingsValues.
        :rtype: str
        """
        return self._custom_email

    @custom_email.setter
    def custom_email(self, custom_email):
        """Sets the custom_email of this BrandingSettingsValues.

        Address to use as sender of email messages generated by ExaVault

        :param custom_email: The custom_email of this BrandingSettingsValues.
        :type custom_email: str
        """

        self._custom_email = custom_email

    @property
    def theme(self):
        """Gets the theme of this BrandingSettingsValues.

        Color scheme for web file manager. Valid options are **default**, **light** and **dark**

        :return: The theme of this BrandingSettingsValues.
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this BrandingSettingsValues.

        Color scheme for web file manager. Valid options are **default**, **light** and **dark**

        :param theme: The theme of this BrandingSettingsValues.
        :type theme: str
        """

        self._theme = theme
