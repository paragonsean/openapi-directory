# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShareResourceData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, type: str=None):
        """ShareResourceData - a model defined in OpenAPI

        :param id: The id of this ShareResourceData.
        :param type: The type of this ShareResourceData.
        """
        self.openapi_types = {
            'id': int,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type'
        }

        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShareResourceData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShareResourceData of this ShareResourceData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ShareResourceData.

        ID of the shared resource.

        :return: The id of this ShareResourceData.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShareResourceData.

        ID of the shared resource.

        :param id: The id of this ShareResourceData.
        :type id: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ShareResourceData.

        Type is resource. 

        :return: The type of this ShareResourceData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ShareResourceData.

        Type is resource. 

        :param type: The type of this ShareResourceData.
        :type type: str
        """
        allowed_values = ["resource"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
