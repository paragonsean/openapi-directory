# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_quota_values import AccountQuotaValues
from openapi_server.models.branding_settings_values import BrandingSettingsValues
from openapi_server.models.update_account_request_body_allowed_ip_ranges_inner import UpdateAccountRequestBodyAllowedIpRangesInner
from openapi_server import util


class UpdateAccountRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_onboarding: bool=None, allowed_ip_ranges: List[UpdateAccountRequestBodyAllowedIpRangesInner]=None, branding_settings: BrandingSettingsValues=None, complex_passwords: bool=None, custom_signature: str=None, email_content: str=None, email_subject: str=None, external_domain: str=None, quota: AccountQuotaValues=None, secure_only: bool=None, show_referral_links: bool=None):
        """UpdateAccountRequestBody - a model defined in OpenAPI

        :param account_onboarding: The account_onboarding of this UpdateAccountRequestBody.
        :param allowed_ip_ranges: The allowed_ip_ranges of this UpdateAccountRequestBody.
        :param branding_settings: The branding_settings of this UpdateAccountRequestBody.
        :param complex_passwords: The complex_passwords of this UpdateAccountRequestBody.
        :param custom_signature: The custom_signature of this UpdateAccountRequestBody.
        :param email_content: The email_content of this UpdateAccountRequestBody.
        :param email_subject: The email_subject of this UpdateAccountRequestBody.
        :param external_domain: The external_domain of this UpdateAccountRequestBody.
        :param quota: The quota of this UpdateAccountRequestBody.
        :param secure_only: The secure_only of this UpdateAccountRequestBody.
        :param show_referral_links: The show_referral_links of this UpdateAccountRequestBody.
        """
        self.openapi_types = {
            'account_onboarding': bool,
            'allowed_ip_ranges': List[UpdateAccountRequestBodyAllowedIpRangesInner],
            'branding_settings': BrandingSettingsValues,
            'complex_passwords': bool,
            'custom_signature': str,
            'email_content': str,
            'email_subject': str,
            'external_domain': str,
            'quota': AccountQuotaValues,
            'secure_only': bool,
            'show_referral_links': bool
        }

        self.attribute_map = {
            'account_onboarding': 'accountOnboarding',
            'allowed_ip_ranges': 'allowedIpRanges',
            'branding_settings': 'brandingSettings',
            'complex_passwords': 'complexPasswords',
            'custom_signature': 'customSignature',
            'email_content': 'emailContent',
            'email_subject': 'emailSubject',
            'external_domain': 'externalDomain',
            'quota': 'quota',
            'secure_only': 'secureOnly',
            'show_referral_links': 'showReferralLinks'
        }

        self._account_onboarding = account_onboarding
        self._allowed_ip_ranges = allowed_ip_ranges
        self._branding_settings = branding_settings
        self._complex_passwords = complex_passwords
        self._custom_signature = custom_signature
        self._email_content = email_content
        self._email_subject = email_subject
        self._external_domain = external_domain
        self._quota = quota
        self._secure_only = secure_only
        self._show_referral_links = show_referral_links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAccountRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAccountRequestBody of this UpdateAccountRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_onboarding(self):
        """Gets the account_onboarding of this UpdateAccountRequestBody.

        Whether extra help popups can be enabled for users in the web file manager.

        :return: The account_onboarding of this UpdateAccountRequestBody.
        :rtype: bool
        """
        return self._account_onboarding

    @account_onboarding.setter
    def account_onboarding(self, account_onboarding):
        """Sets the account_onboarding of this UpdateAccountRequestBody.

        Whether extra help popups can be enabled for users in the web file manager.

        :param account_onboarding: The account_onboarding of this UpdateAccountRequestBody.
        :type account_onboarding: bool
        """

        self._account_onboarding = account_onboarding

    @property
    def allowed_ip_ranges(self):
        """Gets the allowed_ip_ranges of this UpdateAccountRequestBody.

        IP Address Ranges for restricting account access

        :return: The allowed_ip_ranges of this UpdateAccountRequestBody.
        :rtype: List[UpdateAccountRequestBodyAllowedIpRangesInner]
        """
        return self._allowed_ip_ranges

    @allowed_ip_ranges.setter
    def allowed_ip_ranges(self, allowed_ip_ranges):
        """Sets the allowed_ip_ranges of this UpdateAccountRequestBody.

        IP Address Ranges for restricting account access

        :param allowed_ip_ranges: The allowed_ip_ranges of this UpdateAccountRequestBody.
        :type allowed_ip_ranges: List[UpdateAccountRequestBodyAllowedIpRangesInner]
        """

        self._allowed_ip_ranges = allowed_ip_ranges

    @property
    def branding_settings(self):
        """Gets the branding_settings of this UpdateAccountRequestBody.


        :return: The branding_settings of this UpdateAccountRequestBody.
        :rtype: BrandingSettingsValues
        """
        return self._branding_settings

    @branding_settings.setter
    def branding_settings(self, branding_settings):
        """Sets the branding_settings of this UpdateAccountRequestBody.


        :param branding_settings: The branding_settings of this UpdateAccountRequestBody.
        :type branding_settings: BrandingSettingsValues
        """

        self._branding_settings = branding_settings

    @property
    def complex_passwords(self):
        """Gets the complex_passwords of this UpdateAccountRequestBody.

        Whether to require complex passwords for all passwords.

        :return: The complex_passwords of this UpdateAccountRequestBody.
        :rtype: bool
        """
        return self._complex_passwords

    @complex_passwords.setter
    def complex_passwords(self, complex_passwords):
        """Sets the complex_passwords of this UpdateAccountRequestBody.

        Whether to require complex passwords for all passwords.

        :param complex_passwords: The complex_passwords of this UpdateAccountRequestBody.
        :type complex_passwords: bool
        """

        self._complex_passwords = complex_passwords

    @property
    def custom_signature(self):
        """Gets the custom_signature of this UpdateAccountRequestBody.

        Signature to be automatically added to the bottom of emails generated by the account.

        :return: The custom_signature of this UpdateAccountRequestBody.
        :rtype: str
        """
        return self._custom_signature

    @custom_signature.setter
    def custom_signature(self, custom_signature):
        """Sets the custom_signature of this UpdateAccountRequestBody.

        Signature to be automatically added to the bottom of emails generated by the account.

        :param custom_signature: The custom_signature of this UpdateAccountRequestBody.
        :type custom_signature: str
        """

        self._custom_signature = custom_signature

    @property
    def email_content(self):
        """Gets the email_content of this UpdateAccountRequestBody.

        Content of welcome email template.

        :return: The email_content of this UpdateAccountRequestBody.
        :rtype: str
        """
        return self._email_content

    @email_content.setter
    def email_content(self, email_content):
        """Sets the email_content of this UpdateAccountRequestBody.

        Content of welcome email template.

        :param email_content: The email_content of this UpdateAccountRequestBody.
        :type email_content: str
        """

        self._email_content = email_content

    @property
    def email_subject(self):
        """Gets the email_subject of this UpdateAccountRequestBody.

        Subject line for welcome emails

        :return: The email_subject of this UpdateAccountRequestBody.
        :rtype: str
        """
        return self._email_subject

    @email_subject.setter
    def email_subject(self, email_subject):
        """Sets the email_subject of this UpdateAccountRequestBody.

        Subject line for welcome emails

        :param email_subject: The email_subject of this UpdateAccountRequestBody.
        :type email_subject: str
        """

        self._email_subject = email_subject

    @property
    def external_domain(self):
        """Gets the external_domain of this UpdateAccountRequestBody.

        Custom address used for web file manager. Not available for all account types.

        :return: The external_domain of this UpdateAccountRequestBody.
        :rtype: str
        """
        return self._external_domain

    @external_domain.setter
    def external_domain(self, external_domain):
        """Sets the external_domain of this UpdateAccountRequestBody.

        Custom address used for web file manager. Not available for all account types.

        :param external_domain: The external_domain of this UpdateAccountRequestBody.
        :type external_domain: str
        """

        self._external_domain = external_domain

    @property
    def quota(self):
        """Gets the quota of this UpdateAccountRequestBody.


        :return: The quota of this UpdateAccountRequestBody.
        :rtype: AccountQuotaValues
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this UpdateAccountRequestBody.


        :param quota: The quota of this UpdateAccountRequestBody.
        :type quota: AccountQuotaValues
        """

        self._quota = quota

    @property
    def secure_only(self):
        """Gets the secure_only of this UpdateAccountRequestBody.

        Whether unencrypted FTP connections should be denied for the account.

        :return: The secure_only of this UpdateAccountRequestBody.
        :rtype: bool
        """
        return self._secure_only

    @secure_only.setter
    def secure_only(self, secure_only):
        """Sets the secure_only of this UpdateAccountRequestBody.

        Whether unencrypted FTP connections should be denied for the account.

        :param secure_only: The secure_only of this UpdateAccountRequestBody.
        :type secure_only: bool
        """

        self._secure_only = secure_only

    @property
    def show_referral_links(self):
        """Gets the show_referral_links of this UpdateAccountRequestBody.

        Whether to display links for others to sign up on share views and invitation emails

        :return: The show_referral_links of this UpdateAccountRequestBody.
        :rtype: bool
        """
        return self._show_referral_links

    @show_referral_links.setter
    def show_referral_links(self, show_referral_links):
        """Sets the show_referral_links of this UpdateAccountRequestBody.

        Whether to display links for others to sign up on share views and invitation emails

        :param show_referral_links: The show_referral_links of this UpdateAccountRequestBody.
        :type show_referral_links: bool
        """

        self._show_referral_links = show_referral_links
