# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShareRecipient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, email: str=None, hash: str=None, id: int=None, received: bool=None, sent: bool=None, share_id: str=None, type: str=None):
        """ShareRecipient - a model defined in OpenAPI

        :param created: The created of this ShareRecipient.
        :param email: The email of this ShareRecipient.
        :param hash: The hash of this ShareRecipient.
        :param id: The id of this ShareRecipient.
        :param received: The received of this ShareRecipient.
        :param sent: The sent of this ShareRecipient.
        :param share_id: The share_id of this ShareRecipient.
        :param type: The type of this ShareRecipient.
        """
        self.openapi_types = {
            'created': datetime,
            'email': str,
            'hash': str,
            'id': int,
            'received': bool,
            'sent': bool,
            'share_id': str,
            'type': str
        }

        self.attribute_map = {
            'created': 'created',
            'email': 'email',
            'hash': 'hash',
            'id': 'id',
            'received': 'received',
            'sent': 'sent',
            'share_id': 'shareId',
            'type': 'type'
        }

        self._created = created
        self._email = email
        self._hash = hash
        self._id = id
        self._received = received
        self._sent = sent
        self._share_id = share_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShareRecipient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShareRecipient of this ShareRecipient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this ShareRecipient.

        Timestamp of adding recipient to the share.

        :return: The created of this ShareRecipient.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ShareRecipient.

        Timestamp of adding recipient to the share.

        :param created: The created of this ShareRecipient.
        :type created: datetime
        """

        self._created = created

    @property
    def email(self):
        """Gets the email of this ShareRecipient.

        Recipient email address.

        :return: The email of this ShareRecipient.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ShareRecipient.

        Recipient email address.

        :param email: The email of this ShareRecipient.
        :type email: str
        """

        self._email = email

    @property
    def hash(self):
        """Gets the hash of this ShareRecipient.

        Share hash.

        :return: The hash of this ShareRecipient.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this ShareRecipient.

        Share hash.

        :param hash: The hash of this ShareRecipient.
        :type hash: str
        """

        self._hash = hash

    @property
    def id(self):
        """Gets the id of this ShareRecipient.

        ID of the recipient.

        :return: The id of this ShareRecipient.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShareRecipient.

        ID of the recipient.

        :param id: The id of this ShareRecipient.
        :type id: int
        """

        self._id = id

    @property
    def received(self):
        """Gets the received of this ShareRecipient.

        Set to true if recipient has accessed the share. Note this is set to true when the recipient clicks the link to access the share; not when they download a file.

        :return: The received of this ShareRecipient.
        :rtype: bool
        """
        return self._received

    @received.setter
    def received(self, received):
        """Sets the received of this ShareRecipient.

        Set to true if recipient has accessed the share. Note this is set to true when the recipient clicks the link to access the share; not when they download a file.

        :param received: The received of this ShareRecipient.
        :type received: bool
        """

        self._received = received

    @property
    def sent(self):
        """Gets the sent of this ShareRecipient.

        Set to true if invite email was sent; false otherwise.

        :return: The sent of this ShareRecipient.
        :rtype: bool
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this ShareRecipient.

        Set to true if invite email was sent; false otherwise.

        :param sent: The sent of this ShareRecipient.
        :type sent: bool
        """

        self._sent = sent

    @property
    def share_id(self):
        """Gets the share_id of this ShareRecipient.

        ID of the share that the recipoient belongs to.

        :return: The share_id of this ShareRecipient.
        :rtype: str
        """
        return self._share_id

    @share_id.setter
    def share_id(self, share_id):
        """Sets the share_id of this ShareRecipient.

        ID of the share that the recipoient belongs to.

        :param share_id: The share_id of this ShareRecipient.
        :type share_id: str
        """

        self._share_id = share_id

    @property
    def type(self):
        """Gets the type of this ShareRecipient.

        Type of the recipient.

        :return: The type of this ShareRecipient.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ShareRecipient.

        Type of the recipient.

        :param type: The type of this ShareRecipient.
        :type type: str
        """
        allowed_values = ["owner", "direct"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
