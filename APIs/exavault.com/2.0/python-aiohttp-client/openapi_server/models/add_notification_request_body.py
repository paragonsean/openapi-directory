# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddNotificationRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, message: str=None, recipients: List[str]=None, resource: str=None, send_email: bool=None, type: str=None, usernames: List[str]=None):
        """AddNotificationRequestBody - a model defined in OpenAPI

        :param action: The action of this AddNotificationRequestBody.
        :param message: The message of this AddNotificationRequestBody.
        :param recipients: The recipients of this AddNotificationRequestBody.
        :param resource: The resource of this AddNotificationRequestBody.
        :param send_email: The send_email of this AddNotificationRequestBody.
        :param type: The type of this AddNotificationRequestBody.
        :param usernames: The usernames of this AddNotificationRequestBody.
        """
        self.openapi_types = {
            'action': str,
            'message': str,
            'recipients': List[str],
            'resource': str,
            'send_email': bool,
            'type': str,
            'usernames': List[str]
        }

        self.attribute_map = {
            'action': 'action',
            'message': 'message',
            'recipients': 'recipients',
            'resource': 'resource',
            'send_email': 'sendEmail',
            'type': 'type',
            'usernames': 'usernames'
        }

        self._action = action
        self._message = message
        self._recipients = recipients
        self._resource = resource
        self._send_email = send_email
        self._type = type
        self._usernames = usernames

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddNotificationRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddNotificationRequestBody of this AddNotificationRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this AddNotificationRequestBody.

        Type of action be notified about. Notifications will only be fired for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)

        :return: The action of this AddNotificationRequestBody.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AddNotificationRequestBody.

        Type of action be notified about. Notifications will only be fired for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)

        :param action: The action of this AddNotificationRequestBody.
        :type action: str
        """
        allowed_values = ["upload", "download", "delete", "all"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def message(self):
        """Gets the message of this AddNotificationRequestBody.

        Custom message to include in notification emails.

        :return: The message of this AddNotificationRequestBody.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AddNotificationRequestBody.

        Custom message to include in notification emails.

        :param message: The message of this AddNotificationRequestBody.
        :type message: str
        """

        self._message = message

    @property
    def recipients(self):
        """Gets the recipients of this AddNotificationRequestBody.

        Email addresses to send notification emails to. If not specified, sends to the current user's email address.

        :return: The recipients of this AddNotificationRequestBody.
        :rtype: List[str]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this AddNotificationRequestBody.

        Email addresses to send notification emails to. If not specified, sends to the current user's email address.

        :param recipients: The recipients of this AddNotificationRequestBody.
        :type recipients: List[str]
        """

        self._recipients = recipients

    @property
    def resource(self):
        """Gets the resource of this AddNotificationRequestBody.

        Resources for this notification. See details on [how to specify resources](#section/Identifying-Resources) above.

        :return: The resource of this AddNotificationRequestBody.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this AddNotificationRequestBody.

        Resources for this notification. See details on [how to specify resources](#section/Identifying-Resources) above.

        :param resource: The resource of this AddNotificationRequestBody.
        :type resource: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")

        self._resource = resource

    @property
    def send_email(self):
        """Gets the send_email of this AddNotificationRequestBody.

        Set to true if the user should be notified by email when the notification is triggered.

        :return: The send_email of this AddNotificationRequestBody.
        :rtype: bool
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """Sets the send_email of this AddNotificationRequestBody.

        Set to true if the user should be notified by email when the notification is triggered.

        :param send_email: The send_email of this AddNotificationRequestBody.
        :type send_email: bool
        """
        if send_email is None:
            raise ValueError("Invalid value for `send_email`, must not be `None`")

        self._send_email = send_email

    @property
    def type(self):
        """Gets the type of this AddNotificationRequestBody.

        What kind of notification you're making. Valid choices are:  - **file** to monitor activity for a file resource - **folder** to monitor activity for a folder resource

        :return: The type of this AddNotificationRequestBody.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AddNotificationRequestBody.

        What kind of notification you're making. Valid choices are:  - **file** to monitor activity for a file resource - **folder** to monitor activity for a folder resource

        :param type: The type of this AddNotificationRequestBody.
        :type type: str
        """
        allowed_values = ["file", "folder"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def usernames(self):
        """Gets the usernames of this AddNotificationRequestBody.

        Determines which users' actions should trigger the notification.   Rather than listing  individual users, you can also use 3 special options:  - **notice\\_user\\_all** for activity by any user or share recipient - **notice\\_user\\_all\\_users** for activity only by user accounts - **notice\\_user\\_all\\_recipient** for activity only by share recipients

        :return: The usernames of this AddNotificationRequestBody.
        :rtype: List[str]
        """
        return self._usernames

    @usernames.setter
    def usernames(self, usernames):
        """Sets the usernames of this AddNotificationRequestBody.

        Determines which users' actions should trigger the notification.   Rather than listing  individual users, you can also use 3 special options:  - **notice\\_user\\_all** for activity by any user or share recipient - **notice\\_user\\_all\\_users** for activity only by user accounts - **notice\\_user\\_all\\_recipient** for activity only by share recipients

        :param usernames: The usernames of this AddNotificationRequestBody.
        :type usernames: List[str]
        """
        if usernames is None:
            raise ValueError("Invalid value for `usernames`, must not be `None`")

        self._usernames = usernames
