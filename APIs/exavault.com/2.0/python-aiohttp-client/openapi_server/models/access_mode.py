# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessMode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delete: bool=None, download: bool=None, modify: bool=None, upload: bool=None):
        """AccessMode - a model defined in OpenAPI

        :param delete: The delete of this AccessMode.
        :param download: The download of this AccessMode.
        :param modify: The modify of this AccessMode.
        :param upload: The upload of this AccessMode.
        """
        self.openapi_types = {
            'delete': bool,
            'download': bool,
            'modify': bool,
            'upload': bool
        }

        self.attribute_map = {
            'delete': 'delete',
            'download': 'download',
            'modify': 'modify',
            'upload': 'upload'
        }

        self._delete = delete
        self._download = download
        self._modify = modify
        self._upload = upload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessMode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessMode of this AccessMode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delete(self):
        """Gets the delete of this AccessMode.

        Whether share allows visitors to delete contents

        :return: The delete of this AccessMode.
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this AccessMode.

        Whether share allows visitors to delete contents

        :param delete: The delete of this AccessMode.
        :type delete: bool
        """

        self._delete = delete

    @property
    def download(self):
        """Gets the download of this AccessMode.

        Whether share allows visitors to download

        :return: The download of this AccessMode.
        :rtype: bool
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this AccessMode.

        Whether share allows visitors to download

        :param download: The download of this AccessMode.
        :type download: bool
        """

        self._download = download

    @property
    def modify(self):
        """Gets the modify of this AccessMode.

        Whether share allows visitors to rename or move contents.

        :return: The modify of this AccessMode.
        :rtype: bool
        """
        return self._modify

    @modify.setter
    def modify(self, modify):
        """Sets the modify of this AccessMode.

        Whether share allows visitors to rename or move contents.

        :param modify: The modify of this AccessMode.
        :type modify: bool
        """

        self._modify = modify

    @property
    def upload(self):
        """Gets the upload of this AccessMode.

        Whether share allows visitors to upload

        :return: The upload of this AccessMode.
        :rtype: bool
        """
        return self._upload

    @upload.setter
    def upload(self, upload):
        """Sets the upload of this AccessMode.

        Whether share allows visitors to upload

        :param upload: The upload of this AccessMode.
        :type upload: bool
        """

        self._upload = upload
