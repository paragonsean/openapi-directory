# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateFormByIdRequestBodyElementsInnerSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_required: bool=None, sender_email: bool=None, use_as_folder_name: bool=None):
        """UpdateFormByIdRequestBodyElementsInnerSettings - a model defined in OpenAPI

        :param is_required: The is_required of this UpdateFormByIdRequestBodyElementsInnerSettings.
        :param sender_email: The sender_email of this UpdateFormByIdRequestBodyElementsInnerSettings.
        :param use_as_folder_name: The use_as_folder_name of this UpdateFormByIdRequestBodyElementsInnerSettings.
        """
        self.openapi_types = {
            'is_required': bool,
            'sender_email': bool,
            'use_as_folder_name': bool
        }

        self.attribute_map = {
            'is_required': 'isRequired',
            'sender_email': 'senderEmail',
            'use_as_folder_name': 'useAsFolderName'
        }

        self._is_required = is_required
        self._sender_email = sender_email
        self._use_as_folder_name = use_as_folder_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateFormByIdRequestBodyElementsInnerSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateFormByIdRequestBody_elements_inner_settings of this UpdateFormByIdRequestBodyElementsInnerSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_required(self):
        """Gets the is_required of this UpdateFormByIdRequestBodyElementsInnerSettings.

        True is the form element is required for submission. 

        :return: The is_required of this UpdateFormByIdRequestBodyElementsInnerSettings.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this UpdateFormByIdRequestBodyElementsInnerSettings.

        True is the form element is required for submission. 

        :param is_required: The is_required of this UpdateFormByIdRequestBodyElementsInnerSettings.
        :type is_required: bool
        """

        self._is_required = is_required

    @property
    def sender_email(self):
        """Gets the sender_email of this UpdateFormByIdRequestBodyElementsInnerSettings.


        :return: The sender_email of this UpdateFormByIdRequestBodyElementsInnerSettings.
        :rtype: bool
        """
        return self._sender_email

    @sender_email.setter
    def sender_email(self, sender_email):
        """Sets the sender_email of this UpdateFormByIdRequestBodyElementsInnerSettings.


        :param sender_email: The sender_email of this UpdateFormByIdRequestBodyElementsInnerSettings.
        :type sender_email: bool
        """

        self._sender_email = sender_email

    @property
    def use_as_folder_name(self):
        """Gets the use_as_folder_name of this UpdateFormByIdRequestBodyElementsInnerSettings.

        True if the submitted response should be used as the name for the new folder. 

        :return: The use_as_folder_name of this UpdateFormByIdRequestBodyElementsInnerSettings.
        :rtype: bool
        """
        return self._use_as_folder_name

    @use_as_folder_name.setter
    def use_as_folder_name(self, use_as_folder_name):
        """Sets the use_as_folder_name of this UpdateFormByIdRequestBodyElementsInnerSettings.

        True if the submitted response should be used as the name for the new folder. 

        :param use_as_folder_name: The use_as_folder_name of this UpdateFormByIdRequestBodyElementsInnerSettings.
        :type use_as_folder_name: bool
        """

        self._use_as_folder_name = use_as_folder_name
