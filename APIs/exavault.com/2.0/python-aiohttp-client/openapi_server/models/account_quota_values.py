# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountQuotaValues(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notice_enabled: bool=None, notice_threshold: int=None, transactions_notice_enabled: bool=None, transactions_notice_threshold: int=None):
        """AccountQuotaValues - a model defined in OpenAPI

        :param notice_enabled: The notice_enabled of this AccountQuotaValues.
        :param notice_threshold: The notice_threshold of this AccountQuotaValues.
        :param transactions_notice_enabled: The transactions_notice_enabled of this AccountQuotaValues.
        :param transactions_notice_threshold: The transactions_notice_threshold of this AccountQuotaValues.
        """
        self.openapi_types = {
            'notice_enabled': bool,
            'notice_threshold': int,
            'transactions_notice_enabled': bool,
            'transactions_notice_threshold': int
        }

        self.attribute_map = {
            'notice_enabled': 'noticeEnabled',
            'notice_threshold': 'noticeThreshold',
            'transactions_notice_enabled': 'transactionsNoticeEnabled',
            'transactions_notice_threshold': 'transactionsNoticeThreshold'
        }

        self._notice_enabled = notice_enabled
        self._notice_threshold = notice_threshold
        self._transactions_notice_enabled = transactions_notice_enabled
        self._transactions_notice_threshold = transactions_notice_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountQuotaValues':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountQuotaValues of this AccountQuotaValues.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notice_enabled(self):
        """Gets the notice_enabled of this AccountQuotaValues.

        Whether the system should email the account owner if the account storage exceeds the noticeThreshold value. Storage notice emails are sent no mo once per day.

        :return: The notice_enabled of this AccountQuotaValues.
        :rtype: bool
        """
        return self._notice_enabled

    @notice_enabled.setter
    def notice_enabled(self, notice_enabled):
        """Sets the notice_enabled of this AccountQuotaValues.

        Whether the system should email the account owner if the account storage exceeds the noticeThreshold value. Storage notice emails are sent no mo once per day.

        :param notice_enabled: The notice_enabled of this AccountQuotaValues.
        :type notice_enabled: bool
        """

        self._notice_enabled = notice_enabled

    @property
    def notice_threshold(self):
        """Gets the notice_threshold of this AccountQuotaValues.

        Percent of account storage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).

        :return: The notice_threshold of this AccountQuotaValues.
        :rtype: int
        """
        return self._notice_threshold

    @notice_threshold.setter
    def notice_threshold(self, notice_threshold):
        """Sets the notice_threshold of this AccountQuotaValues.

        Percent of account storage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).

        :param notice_threshold: The notice_threshold of this AccountQuotaValues.
        :type notice_threshold: int
        """

        self._notice_threshold = notice_threshold

    @property
    def transactions_notice_enabled(self):
        """Gets the transactions_notice_enabled of this AccountQuotaValues.

        Whether the system should email the account owner if the daily transaction usage exceeds the transactionsNoticeThreshold value. Transaction notice emails are sent no more than once per day.

        :return: The transactions_notice_enabled of this AccountQuotaValues.
        :rtype: bool
        """
        return self._transactions_notice_enabled

    @transactions_notice_enabled.setter
    def transactions_notice_enabled(self, transactions_notice_enabled):
        """Sets the transactions_notice_enabled of this AccountQuotaValues.

        Whether the system should email the account owner if the daily transaction usage exceeds the transactionsNoticeThreshold value. Transaction notice emails are sent no more than once per day.

        :param transactions_notice_enabled: The transactions_notice_enabled of this AccountQuotaValues.
        :type transactions_notice_enabled: bool
        """

        self._transactions_notice_enabled = transactions_notice_enabled

    @property
    def transactions_notice_threshold(self):
        """Gets the transactions_notice_threshold of this AccountQuotaValues.

        Percent of daily transaction usage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).

        :return: The transactions_notice_threshold of this AccountQuotaValues.
        :rtype: int
        """
        return self._transactions_notice_threshold

    @transactions_notice_threshold.setter
    def transactions_notice_threshold(self, transactions_notice_threshold):
        """Sets the transactions_notice_threshold of this AccountQuotaValues.

        Percent of daily transaction usage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).

        :param transactions_notice_threshold: The transactions_notice_threshold of this AccountQuotaValues.
        :type transactions_notice_threshold: int
        """

        self._transactions_notice_threshold = transactions_notice_threshold
