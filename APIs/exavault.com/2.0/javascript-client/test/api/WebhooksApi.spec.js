/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ExaVault);
  }
}(this, function(expect, ExaVault) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ExaVault.WebhooksApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WebhooksApi', function() {
    describe('addWebhook', function() {
      it('should call addWebhook successfully', function(done) {
        //uncomment below and update the code to test addWebhook
        //instance.addWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWebhook', function() {
      it('should call deleteWebhook successfully', function(done) {
        //uncomment below and update the code to test deleteWebhook
        //instance.deleteWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWebhookById', function() {
      it('should call getWebhookById successfully', function(done) {
        //uncomment below and update the code to test getWebhookById
        //instance.getWebhookById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWehooksList', function() {
      it('should call getWehooksList successfully', function(done) {
        //uncomment below and update the code to test getWehooksList
        //instance.getWehooksList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('regenerateWebhookToken', function() {
      it('should call regenerateWebhookToken successfully', function(done) {
        //uncomment below and update the code to test regenerateWebhookToken
        //instance.regenerateWebhookToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resendWebhookActivityEntry', function() {
      it('should call resendWebhookActivityEntry successfully', function(done) {
        //uncomment below and update the code to test resendWebhookActivityEntry
        //instance.resendWebhookActivityEntry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWebhook', function() {
      it('should call updateWebhook successfully', function(done) {
        //uncomment below and update the code to test updateWebhook
        //instance.updateWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
