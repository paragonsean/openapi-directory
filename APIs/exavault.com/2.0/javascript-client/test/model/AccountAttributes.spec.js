/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ExaVault);
  }
}(this, function(expect, ExaVault) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ExaVault.AccountAttributes();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AccountAttributes', function() {
    it('should create an instance of AccountAttributes', function() {
      // uncomment below and update the code to test AccountAttributes
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be.a(ExaVault.AccountAttributes);
    });

    it('should have the property accountName (base name: "accountName")', function() {
      // uncomment below and update the code to test the property accountName
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property accountOnboarding (base name: "accountOnboarding")', function() {
      // uncomment below and update the code to test the property accountOnboarding
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property allowedIp (base name: "allowedIp")', function() {
      // uncomment below and update the code to test the property allowedIp
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property branding (base name: "branding")', function() {
      // uncomment below and update the code to test the property branding
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property brandingSettings (base name: "brandingSettings")', function() {
      // uncomment below and update the code to test the property brandingSettings
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property clientId (base name: "clientId")', function() {
      // uncomment below and update the code to test the property clientId
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property complexPasswords (base name: "complexPasswords")', function() {
      // uncomment below and update the code to test the property complexPasswords
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property customDomain (base name: "customDomain")', function() {
      // uncomment below and update the code to test the property customDomain
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property customSignature (base name: "customSignature")', function() {
      // uncomment below and update the code to test the property customSignature
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property externalDomains (base name: "externalDomains")', function() {
      // uncomment below and update the code to test the property externalDomains
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property maxUsers (base name: "maxUsers")', function() {
      // uncomment below and update the code to test the property maxUsers
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property modified (base name: "modified")', function() {
      // uncomment below and update the code to test the property modified
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property planDetails (base name: "planDetails")', function() {
      // uncomment below and update the code to test the property planDetails
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property quota (base name: "quota")', function() {
      // uncomment below and update the code to test the property quota
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property secureOnly (base name: "secureOnly")', function() {
      // uncomment below and update the code to test the property secureOnly
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property showReferralLinks (base name: "showReferralLinks")', function() {
      // uncomment below and update the code to test the property showReferralLinks
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property userCount (base name: "userCount")', function() {
      // uncomment below and update the code to test the property userCount
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property welcomeEmailContent (base name: "welcomeEmailContent")', function() {
      // uncomment below and update the code to test the property welcomeEmailContent
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

    it('should have the property welcomeEmailSubject (base name: "welcomeEmailSubject")', function() {
      // uncomment below and update the code to test the property welcomeEmailSubject
      //var instance = new ExaVault.AccountAttributes();
      //expect(instance).to.be();
    });

  });

}));
