/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ExaVault);
  }
}(this, function(expect, ExaVault) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ExaVault.AddShareRequestBody();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AddShareRequestBody', function() {
    it('should create an instance of AddShareRequestBody', function() {
      // uncomment below and update the code to test AddShareRequestBody
      //var instance = new ExaVault.AddShareRequestBody();
      //expect(instance).to.be.a(ExaVault.AddShareRequestBody);
    });

    it('should have the property accessMode (base name: "accessMode")', function() {
      // uncomment below and update the code to test the property accessMode
      //var instance = new ExaVault.AddShareRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property embed (base name: "embed")', function() {
      // uncomment below and update the code to test the property embed
      //var instance = new ExaVault.AddShareRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property expiration (base name: "expiration")', function() {
      // uncomment below and update the code to test the property expiration
      //var instance = new ExaVault.AddShareRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property fileDropCreateFolders (base name: "fileDropCreateFolders")', function() {
      // uncomment below and update the code to test the property fileDropCreateFolders
      //var instance = new ExaVault.AddShareRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property hasNotification (base name: "hasNotification")', function() {
      // uncomment below and update the code to test the property hasNotification
      //var instance = new ExaVault.AddShareRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property isPublic (base name: "isPublic")', function() {
      // uncomment below and update the code to test the property isPublic
      //var instance = new ExaVault.AddShareRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property messageBody (base name: "messageBody")', function() {
      // uncomment below and update the code to test the property messageBody
      //var instance = new ExaVault.AddShareRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property messageSubject (base name: "messageSubject")', function() {
      // uncomment below and update the code to test the property messageSubject
      //var instance = new ExaVault.AddShareRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ExaVault.AddShareRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property notificationEmails (base name: "notificationEmails")', function() {
      // uncomment below and update the code to test the property notificationEmails
      //var instance = new ExaVault.AddShareRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instance = new ExaVault.AddShareRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property recipients (base name: "recipients")', function() {
      // uncomment below and update the code to test the property recipients
      //var instance = new ExaVault.AddShareRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property requireEmail (base name: "requireEmail")', function() {
      // uncomment below and update the code to test the property requireEmail
      //var instance = new ExaVault.AddShareRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property resources (base name: "resources")', function() {
      // uncomment below and update the code to test the property resources
      //var instance = new ExaVault.AddShareRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property sendingLocalFiles (base name: "sendingLocalFiles")', function() {
      // uncomment below and update the code to test the property sendingLocalFiles
      //var instance = new ExaVault.AddShareRequestBody();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new ExaVault.AddShareRequestBody();
      //expect(instance).to.be();
    });

  });

}));
