/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ExaVault);
  }
}(this, function(expect, ExaVault) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ExaVault.PlanDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PlanDetails', function() {
    it('should create an instance of PlanDetails', function() {
      // uncomment below and update the code to test PlanDetails
      //var instance = new ExaVault.PlanDetails();
      //expect(instance).to.be.a(ExaVault.PlanDetails);
    });

    it('should have the property apiKeys (base name: "apiKeys")', function() {
      // uncomment below and update the code to test the property apiKeys
      //var instance = new ExaVault.PlanDetails();
      //expect(instance).to.be();
    });

    it('should have the property apiTokens (base name: "apiTokens")', function() {
      // uncomment below and update the code to test the property apiTokens
      //var instance = new ExaVault.PlanDetails();
      //expect(instance).to.be();
    });

    it('should have the property colorSchema (base name: "colorSchema")', function() {
      // uncomment below and update the code to test the property colorSchema
      //var instance = new ExaVault.PlanDetails();
      //expect(instance).to.be();
    });

    it('should have the property customDomain (base name: "customDomain")', function() {
      // uncomment below and update the code to test the property customDomain
      //var instance = new ExaVault.PlanDetails();
      //expect(instance).to.be();
    });

    it('should have the property customName (base name: "customName")', function() {
      // uncomment below and update the code to test the property customName
      //var instance = new ExaVault.PlanDetails();
      //expect(instance).to.be();
    });

    it('should have the property directLinks (base name: "directLinks")', function() {
      // uncomment below and update the code to test the property directLinks
      //var instance = new ExaVault.PlanDetails();
      //expect(instance).to.be();
    });

    it('should have the property ipWhitelist (base name: "ipWhitelist")', function() {
      // uncomment below and update the code to test the property ipWhitelist
      //var instance = new ExaVault.PlanDetails();
      //expect(instance).to.be();
    });

    it('should have the property sharingOptions (base name: "sharingOptions")', function() {
      // uncomment below and update the code to test the property sharingOptions
      //var instance = new ExaVault.PlanDetails();
      //expect(instance).to.be();
    });

    it('should have the property sshKeys (base name: "sshKeys")', function() {
      // uncomment below and update the code to test the property sshKeys
      //var instance = new ExaVault.PlanDetails();
      //expect(instance).to.be();
    });

    it('should have the property storageAddOn (base name: "storageAddOn")', function() {
      // uncomment below and update the code to test the property storageAddOn
      //var instance = new ExaVault.PlanDetails();
      //expect(instance).to.be();
    });

    it('should have the property unlimitedUsers (base name: "unlimitedUsers")', function() {
      // uncomment below and update the code to test the property unlimitedUsers
      //var instance = new ExaVault.PlanDetails();
      //expect(instance).to.be();
    });

    it('should have the property userExpiration (base name: "userExpiration")', function() {
      // uncomment below and update the code to test the property userExpiration
      //var instance = new ExaVault.PlanDetails();
      //expect(instance).to.be();
    });

    it('should have the property userImport (base name: "userImport")', function() {
      // uncomment below and update the code to test the property userImport
      //var instance = new ExaVault.PlanDetails();
      //expect(instance).to.be();
    });

    it('should have the property webhookOptions (base name: "webhookOptions")', function() {
      // uncomment below and update the code to test the property webhookOptions
      //var instance = new ExaVault.PlanDetails();
      //expect(instance).to.be();
    });

  });

}));
