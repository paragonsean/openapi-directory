/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ExaVault);
  }
}(this, function(expect, ExaVault) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ExaVault.UserPermissions();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserPermissions', function() {
    it('should create an instance of UserPermissions', function() {
      // uncomment below and update the code to test UserPermissions
      //var instance = new ExaVault.UserPermissions();
      //expect(instance).to.be.a(ExaVault.UserPermissions);
    });

    it('should have the property changePassword (base name: "changePassword")', function() {
      // uncomment below and update the code to test the property changePassword
      //var instance = new ExaVault.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property _delete (base name: "delete")', function() {
      // uncomment below and update the code to test the property _delete
      //var instance = new ExaVault.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property deleteFormData (base name: "deleteFormData")', function() {
      // uncomment below and update the code to test the property deleteFormData
      //var instance = new ExaVault.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property download (base name: "download")', function() {
      // uncomment below and update the code to test the property download
      //var instance = new ExaVault.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property list (base name: "list")', function() {
      // uncomment below and update the code to test the property list
      //var instance = new ExaVault.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property modify (base name: "modify")', function() {
      // uncomment below and update the code to test the property modify
      //var instance = new ExaVault.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property notification (base name: "notification")', function() {
      // uncomment below and update the code to test the property notification
      //var instance = new ExaVault.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property share (base name: "share")', function() {
      // uncomment below and update the code to test the property share
      //var instance = new ExaVault.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property upload (base name: "upload")', function() {
      // uncomment below and update the code to test the property upload
      //var instance = new ExaVault.UserPermissions();
      //expect(instance).to.be();
    });

    it('should have the property viewFormData (base name: "viewFormData")', function() {
      // uncomment below and update the code to test the property viewFormData
      //var instance = new ExaVault.UserPermissions();
      //expect(instance).to.be();
    });

  });

}));
