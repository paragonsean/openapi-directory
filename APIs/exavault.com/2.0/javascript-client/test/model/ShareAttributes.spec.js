/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ExaVault);
  }
}(this, function(expect, ExaVault) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ExaVault.ShareAttributes();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ShareAttributes', function() {
    it('should create an instance of ShareAttributes', function() {
      // uncomment below and update the code to test ShareAttributes
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be.a(ExaVault.ShareAttributes);
    });

    it('should have the property accessDescription (base name: "accessDescription")', function() {
      // uncomment below and update the code to test the property accessDescription
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property accessMode (base name: "accessMode")', function() {
      // uncomment below and update the code to test the property accessMode
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property embed (base name: "embed")', function() {
      // uncomment below and update the code to test the property embed
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property expiration (base name: "expiration")', function() {
      // uncomment below and update the code to test the property expiration
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property expired (base name: "expired")', function() {
      // uncomment below and update the code to test the property expired
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property fileDropCreateFolders (base name: "fileDropCreateFolders")', function() {
      // uncomment below and update the code to test the property fileDropCreateFolders
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property formId (base name: "formId")', function() {
      // uncomment below and update the code to test the property formId
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property hasNotification (base name: "hasNotification")', function() {
      // uncomment below and update the code to test the property hasNotification
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property hasPassword (base name: "hasPassword")', function() {
      // uncomment below and update the code to test the property hasPassword
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property hash (base name: "hash")', function() {
      // uncomment below and update the code to test the property hash
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property inherited (base name: "inherited")', function() {
      // uncomment below and update the code to test the property inherited
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property messages (base name: "messages")', function() {
      // uncomment below and update the code to test the property messages
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property modified (base name: "modified")', function() {
      // uncomment below and update the code to test the property modified
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property ownerHash (base name: "ownerHash")', function() {
      // uncomment below and update the code to test the property ownerHash
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property paths (base name: "paths")', function() {
      // uncomment below and update the code to test the property paths
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property _public (base name: "public")', function() {
      // uncomment below and update the code to test the property _public
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property recipients (base name: "recipients")', function() {
      // uncomment below and update the code to test the property recipients
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property requireEmail (base name: "requireEmail")', function() {
      // uncomment below and update the code to test the property requireEmail
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property resent (base name: "resent")', function() {
      // uncomment below and update the code to test the property resent
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property trackingStatus (base name: "trackingStatus")', function() {
      // uncomment below and update the code to test the property trackingStatus
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new ExaVault.ShareAttributes();
      //expect(instance).to.be();
    });

  });

}));
