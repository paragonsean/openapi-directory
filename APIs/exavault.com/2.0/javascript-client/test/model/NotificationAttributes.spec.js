/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ExaVault);
  }
}(this, function(expect, ExaVault) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ExaVault.NotificationAttributes();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NotificationAttributes', function() {
    it('should create an instance of NotificationAttributes', function() {
      // uncomment below and update the code to test NotificationAttributes
      //var instance = new ExaVault.NotificationAttributes();
      //expect(instance).to.be.a(ExaVault.NotificationAttributes);
    });

    it('should have the property action (base name: "action")', function() {
      // uncomment below and update the code to test the property action
      //var instance = new ExaVault.NotificationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new ExaVault.NotificationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new ExaVault.NotificationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property modified (base name: "modified")', function() {
      // uncomment below and update the code to test the property modified
      //var instance = new ExaVault.NotificationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ExaVault.NotificationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new ExaVault.NotificationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property readableDescription (base name: "readableDescription")', function() {
      // uncomment below and update the code to test the property readableDescription
      //var instance = new ExaVault.NotificationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property readableDescriptionWithoutPath (base name: "readableDescriptionWithoutPath")', function() {
      // uncomment below and update the code to test the property readableDescriptionWithoutPath
      //var instance = new ExaVault.NotificationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property recipients (base name: "recipients")', function() {
      // uncomment below and update the code to test the property recipients
      //var instance = new ExaVault.NotificationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property sendEmail (base name: "sendEmail")', function() {
      // uncomment below and update the code to test the property sendEmail
      //var instance = new ExaVault.NotificationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property shareId (base name: "shareId")', function() {
      // uncomment below and update the code to test the property shareId
      //var instance = new ExaVault.NotificationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new ExaVault.NotificationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "userId")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new ExaVault.NotificationAttributes();
      //expect(instance).to.be();
    });

    it('should have the property usernames (base name: "usernames")', function() {
      // uncomment below and update the code to test the property usernames
      //var instance = new ExaVault.NotificationAttributes();
      //expect(instance).to.be();
    });

  });

}));
