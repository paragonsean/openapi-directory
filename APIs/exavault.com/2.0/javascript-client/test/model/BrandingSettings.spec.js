/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ExaVault);
  }
}(this, function(expect, ExaVault) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ExaVault.BrandingSettings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BrandingSettings', function() {
    it('should create an instance of BrandingSettings', function() {
      // uncomment below and update the code to test BrandingSettings
      //var instance = new ExaVault.BrandingSettings();
      //expect(instance).to.be.a(ExaVault.BrandingSettings);
    });

    it('should have the property companyName (base name: "companyName")', function() {
      // uncomment below and update the code to test the property companyName
      //var instance = new ExaVault.BrandingSettings();
      //expect(instance).to.be();
    });

    it('should have the property customEmail (base name: "customEmail")', function() {
      // uncomment below and update the code to test the property customEmail
      //var instance = new ExaVault.BrandingSettings();
      //expect(instance).to.be();
    });

    it('should have the property logo (base name: "logo")', function() {
      // uncomment below and update the code to test the property logo
      //var instance = new ExaVault.BrandingSettings();
      //expect(instance).to.be();
    });

    it('should have the property logoExt (base name: "logoExt")', function() {
      // uncomment below and update the code to test the property logoExt
      //var instance = new ExaVault.BrandingSettings();
      //expect(instance).to.be();
    });

    it('should have the property theme (base name: "theme")', function() {
      // uncomment below and update the code to test the property theme
      //var instance = new ExaVault.BrandingSettings();
      //expect(instance).to.be();
    });

    it('should have the property verifiedDomain (base name: "verifiedDomain")', function() {
      // uncomment below and update the code to test the property verifiedDomain
      //var instance = new ExaVault.BrandingSettings();
      //expect(instance).to.be();
    });

    it('should have the property verifiedDomainId (base name: "verifiedDomainId")', function() {
      // uncomment below and update the code to test the property verifiedDomainId
      //var instance = new ExaVault.BrandingSettings();
      //expect(instance).to.be();
    });

    it('should have the property verifiedDomainValid (base name: "verifiedDomainValid")', function() {
      // uncomment below and update the code to test the property verifiedDomainValid
      //var instance = new ExaVault.BrandingSettings();
      //expect(instance).to.be();
    });

  });

}));
