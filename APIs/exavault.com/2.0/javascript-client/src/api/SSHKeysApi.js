/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddSSHKeyRequestBody from '../model/AddSSHKeyRequestBody';
import SSHKeyCollectionResponse from '../model/SSHKeyCollectionResponse';
import SSHKeyResponse from '../model/SSHKeyResponse';

/**
* SSHKeys service.
* @module api/SSHKeysApi
* @version 2.0
*/
export default class SSHKeysApi {

    /**
    * Constructs a new SSHKeysApi. 
    * @alias module:api/SSHKeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addSSHKey operation.
     * @callback module:api/SSHKeysApi~addSSHKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new SSH Key
     * Create a new SSH Key for a user. Provide the Public Key as formatted from the ssh-keygen command (openssh format or RFC-4716 format).  If you'd prefer to let us generate your key automatically, you can log in to your account via the web portal and set up new keys via the SSH Keys page. 
     * @param {String} evApiKey API key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Object} opts Optional parameters
     * @param {module:model/AddSSHKeyRequestBody} [addSSHKeyRequestBody] 
     * @param {module:api/SSHKeysApi~addSSHKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKeyResponse}
     */
    addSSHKey(evApiKey, evAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['addSSHKeyRequestBody'];
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling addSSHKey");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling addSSHKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SSHKeyResponse;
      return this.apiClient.callApi(
        '/ssh-keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSSHKey operation.
     * @callback module:api/SSHKeysApi~deleteSSHKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an SSH Key
     * Delete the specified SSH key. This will not delete or deactivate the user tied to the key.
     * @param {String} id 
     * @param {String} evApiKey API key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {module:api/SSHKeysApi~deleteSSHKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSSHKey(id, evApiKey, evAccessToken, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSSHKey");
      }
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling deleteSSHKey");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling deleteSSHKey");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ssh-keys/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSSHKey operation.
     * @callback module:api/SSHKeysApi~getSSHKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata for an SSH Key
     * Return the information for a single SSH Key
     * @param {String} id 
     * @param {String} evApiKey API key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {module:api/SSHKeysApi~getSSHKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKeyResponse}
     */
    getSSHKey(id, evApiKey, evAccessToken, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSSHKey");
      }
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling getSSHKey");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling getSSHKey");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SSHKeyResponse;
      return this.apiClient.callApi(
        '/ssh-keys/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSSHKeysList operation.
     * @callback module:api/SSHKeysApi~getSSHKeysListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKeyCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata for a list of SSH Keys
     * Returns a list of SSH Keys within the account. Can be filtered for a single user.
     * @param {String} evApiKey API key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [userId]  Only return results for the given user ID. This is not the username, but the numeric ID of the user.
     * @param {Number} [limit]  Limits the results by the given number. Cannot be set higher than 100.
     * @param {Number} [offset]  Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list.
     * @param {module:api/SSHKeysApi~getSSHKeysListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKeyCollectionResponse}
     */
    getSSHKeysList(evApiKey, evAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling getSSHKeysList");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling getSSHKeysList");
      }

      let pathParams = {
      };
      let queryParams = {
        'userId': opts['userId'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SSHKeyCollectionResponse;
      return this.apiClient.callApi(
        '/ssh-keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
