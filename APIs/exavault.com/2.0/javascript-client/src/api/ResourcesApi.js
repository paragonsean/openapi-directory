/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddFolderRequestBody from '../model/AddFolderRequestBody';
import CompressFilesRequestBody from '../model/CompressFilesRequestBody';
import CopyResourcesRequestBody from '../model/CopyResourcesRequestBody';
import DeleteResourcesRequestBody from '../model/DeleteResourcesRequestBody';
import EmptyResponse from '../model/EmptyResponse';
import ExtractFilesRequestBody from '../model/ExtractFilesRequestBody';
import MoveResourcesRequestBody from '../model/MoveResourcesRequestBody';
import PreviewFileResponse from '../model/PreviewFileResponse';
import ResourceCollectionResponse from '../model/ResourceCollectionResponse';
import ResourceCopyMove from '../model/ResourceCopyMove';
import ResourceMultiResponse from '../model/ResourceMultiResponse';
import ResourceResponse from '../model/ResourceResponse';
import UpdateResourceByIdRequestBody from '../model/UpdateResourceByIdRequestBody';

/**
* Resources service.
* @module api/ResourcesApi
* @version 2.0
*/
export default class ResourcesApi {

    /**
    * Constructs a new ResourcesApi. 
    * @alias module:api/ResourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addFolder operation.
     * @callback module:api/ResourcesApi~addFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a folder
     * Create a new empty folder at the specified path. New files can be uploaded via the [/resources/upload](#operation/uploadFile) endpoint.  **Notes:** - Authenticated user should have modify permission. 
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Object} opts Optional parameters
     * @param {module:model/AddFolderRequestBody} [addFolderRequestBody] 
     * @param {module:api/ResourcesApi~addFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceResponse}
     */
    addFolder(evApiKey, evAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['addFolderRequestBody'];
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling addFolder");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling addFolder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceResponse;
      return this.apiClient.callApi(
        '/resources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the compressFiles operation.
     * @callback module:api/ResourcesApi~compressFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compress resources
     * Create a zip archive containing the files from given set of paths. Note that this can be a very slow operation if you have indicated many files should be included in the archive.  **Notes:** - Authenticated user should have modify permission. 
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Object} opts Optional parameters
     * @param {module:model/CompressFilesRequestBody} [compressFilesRequestBody] 
     * @param {module:api/ResourcesApi~compressFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceResponse}
     */
    compressFiles(evApiKey, evAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['compressFilesRequestBody'];
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling compressFiles");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling compressFiles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceResponse;
      return this.apiClient.callApi(
        '/resources/compress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyResources operation.
     * @callback module:api/ResourcesApi~copyResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceCopyMove} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy resources
     * Copies a set of exisiting files/folders (provided by an array `resources`) to the requested `parentResource` in your account. In the `resources` array, you may specify paths pointing files/folders throughout the account, but everything will be copied to the  root of the `parentResource`.  **Notes:** - Authenticated user should have modify permission. 
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Object} opts Optional parameters
     * @param {module:model/CopyResourcesRequestBody} [copyResourcesRequestBody] 
     * @param {module:api/ResourcesApi~copyResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceCopyMove}
     */
    copyResources(evApiKey, evAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['copyResourcesRequestBody'];
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling copyResources");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling copyResources");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceCopyMove;
      return this.apiClient.callApi(
        '/resources/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourceById operation.
     * @callback module:api/ResourcesApi~deleteResourceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Resource
     * Delete a single file or folder resource. Deleting a folder will also delete all of the contents.  **Notes:** - Authenticated user should have [delete permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions). - There is no way to un-delete a deleted resource. 
     * @param {Number} id ID number of the resource
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {module:api/ResourcesApi~deleteResourceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyResponse}
     */
    deleteResourceById(id, evApiKey, evAccessToken, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteResourceById");
      }
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling deleteResourceById");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling deleteResourceById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmptyResponse;
      return this.apiClient.callApi(
        '/resources/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResources operation.
     * @callback module:api/ResourcesApi~deleteResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Resources
     * Delete multiple file or folder resourcess. Deleting a folder resource will also delete any resources in that folder.  **Notes:** - Authenticated user should have [delete permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions). - It is not possible to un-delete a deleted resource. 
     * @param {String} evApiKey API Key
     * @param {String} evAccessToken Access Token
     * @param {Object} opts Optional parameters
     * @param {module:model/DeleteResourcesRequestBody} [deleteResourcesRequestBody] 
     * @param {module:api/ResourcesApi~deleteResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyResponse}
     */
    deleteResources(evApiKey, evAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteResourcesRequestBody'];
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling deleteResources");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling deleteResources");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmptyResponse;
      return this.apiClient.callApi(
        '/resources', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the download operation.
     * @callback module:api/ResourcesApi~downloadCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a file
     * Downloads a file from the server. Whenever more than one file is being downloaded, the file are first zipped into  a single file before the download starts, and the resulting zip file is named to match the `downloadArchiveName` parameter.  **NOTE**: Downloading many files at once  may result in a long delay before the API will return a response. You may need to override default timeout values in your API client, or download files individually.
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Array.<String>} resources Path of file or folder to be downloaded, starting from the root. Can also be an array of paths.
     * @param {Object} opts Optional parameters
     * @param {String} [downloadArchiveName] When downloading multiple files, this will be used as the name of the zip file that is created.
     * @param {module:api/ResourcesApi~downloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    download(evApiKey, evAccessToken, resources, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling download");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling download");
      }
      // verify the required parameter 'resources' is set
      if (resources === undefined || resources === null) {
        throw new Error("Missing the required parameter 'resources' when calling download");
      }

      let pathParams = {
      };
      let queryParams = {
        'resources[]': this.apiClient.buildCollectionParam(resources, 'multi'),
        'downloadArchiveName': opts['downloadArchiveName']
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/zip'];
      let returnType = File;
      return this.apiClient.callApi(
        '/resources/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extractFiles operation.
     * @callback module:api/ResourcesApi~extractFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract resources
     * Extract the contents of a zip archive to a specified directory. Note that this can be a very slow operation.  **Notes:** - You must have  [modify permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to do this. 
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Object} opts Optional parameters
     * @param {module:model/ExtractFilesRequestBody} [extractFilesRequestBody] 
     * @param {module:api/ResourcesApi~extractFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceCollectionResponse}
     */
    extractFiles(evApiKey, evAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['extractFilesRequestBody'];
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling extractFiles");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling extractFiles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceCollectionResponse;
      return this.apiClient.callApi(
        '/resources/extract', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPreviewImage operation.
     * @callback module:api/ResourcesApi~getPreviewImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreviewFileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preview a file
     * Returns a resized image of the specified document for supported file types.  Image data returned is encoded in base64 format and can be viewed using the `<img>` element.   ```<img src='data:image/jpeg;base64' + meta.image/>```  **Notes:** - Supported files types are `'jpg'`, `'jpeg'`, `'gif'`, `'png'`, `'bmp'`, `'pdf'`, `'psd'`, `'doc'` 
     * @param {String} evApiKey API Key
     * @param {String} evAccessToken Access Token
     * @param {String} resource Resource identifier for the image file.
     * @param {module:model/String} size The size of the image.
     * @param {Object} opts Optional parameters
     * @param {Number} [width] Overrides sizes. Sets to a specific width.
     * @param {Number} [height] Overrides sizes. Sets to a specific height.
     * @param {Number} [page = 0)] Page number to extract from a multi-page document (0 is the first page). Vaild for **.pdf** or **.doc** files.
     * @param {module:api/ResourcesApi~getPreviewImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreviewFileResponse}
     */
    getPreviewImage(evApiKey, evAccessToken, resource, size, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling getPreviewImage");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling getPreviewImage");
      }
      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling getPreviewImage");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling getPreviewImage");
      }

      let pathParams = {
      };
      let queryParams = {
        'resource': resource,
        'size': size,
        'width': opts['width'],
        'height': opts['height'],
        'page': opts['page']
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PreviewFileResponse;
      return this.apiClient.callApi(
        '/resources/preview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceInfo operation.
     * @callback module:api/ResourcesApi~getResourceInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Resource Properties
     * Returns details for specified file/folder id or hash, including upload date, size and type. For the full list of returned properties, see the response syntax, below.  **Notes:** - Authenticated user should have list permission. 
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {String} resource Resource identifier of the file or folder to get metadata for.
     * @param {Object} opts Optional parameters
     * @param {String} [include] Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerUser**.
     * @param {module:api/ResourcesApi~getResourceInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceResponse}
     */
    getResourceInfo(evApiKey, evAccessToken, resource, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling getResourceInfo");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling getResourceInfo");
      }
      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling getResourceInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'resource': resource,
        'include': opts['include']
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceResponse;
      return this.apiClient.callApi(
        '/resources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceInfoById operation.
     * @callback module:api/ResourcesApi~getResourceInfoByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get resource metadata
     * Returns metadata for specified file/folder path, including upload date, size and type. For the full list of returned properties, see the response syntax, below.  **Notes:** - Authenticated user should have list permission. 
     * @param {Number} id ID number of the resource
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [include] Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerAccount**.
     * @param {module:api/ResourcesApi~getResourceInfoByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceResponse}
     */
    getResourceInfoById(id, evApiKey, evAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResourceInfoById");
      }
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling getResourceInfoById");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling getResourceInfoById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceResponse;
      return this.apiClient.callApi(
        '/resources/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResourceContents operation.
     * @callback module:api/ResourcesApi~listResourceContentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List contents of folder
     * Returns a list of files/folders for the parent resource ID.   You can use this API call to get information about all files and folders at a specified path. By default, the API returns basic metadata on each file/folder. An optional `include` parameter forces the return of additional metadata. As with all API calls, the path should be the full path relative to the user's home directory (e.g. **_/myfiles/some_folder**).  **Notes:** - Authenticated user should have list permission. 
     * @param {String} evApiKey API Key required to make the API call. 
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Number} id ID of the parent resource to get a list of resources for.
     * @param {Object} opts Optional parameters
     * @param {String} [sort] Endpoint support multiple sort fields by allowing array of sort params. Sort fields should be applied in the order specified. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.
     * @param {Number} [offset = 0)] Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list.
     * @param {Number} [limit] The number of files to limit the result. Cannot be set higher than 100. If you have more than one hundred files in your directory, make multiple calls, incrementing the `offset parameter, above.
     * @param {String} [type] Limit types of resources returned to \"file\" or \"dir\" only.
     * @param {String} [include] Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerUser**.
     * @param {module:api/ResourcesApi~listResourceContentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceCollectionResponse}
     */
    listResourceContents(evApiKey, evAccessToken, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling listResourceContents");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling listResourceContents");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listResourceContents");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'type': opts['type'],
        'include': opts['include']
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceCollectionResponse;
      return this.apiClient.callApi(
        '/resources/list/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResources operation.
     * @callback module:api/ResourcesApi~listResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all resources
     * Returns a list of files and folders in the account. Use the `resource` query parameter to indicate the folder you wish to search in (which can be /).   **Searching for Files and Folders**  Using the `name` parameter triggers search mode, which will search the entire directory structure under the provided `resource` for files or folders with names matching the provided `name`. This supports wildcard matching such as:  - \\*Report\\* would find any files or folders with \"Report\" in the name. - Data\\_202?-09-30.xlsx would match items such as \"Data\\_2020-09-30.xlsx\", \"DATA\\_2021-09-30.xlsx\", \"data\\_2022-09-30.xlsx\" etc. - sales\\* would find any files or folders starting with the word \"Sales\" - \\*.csv would locate any files ending in \".csv\" - \\* matches everything within the directory tree starting at your given `resource`  The search is not case-sensitive. Searching for Clients\\* or clients\\* or CLIENTS\\*, etc. will provide identical results  If you are using the `name` parameter to run a search, the `type` parameter will be ignored by the server.
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {String} resource Resource identifier to get resources for. Can be path/id/name.
     * @param {Object} opts Optional parameters
     * @param {String} [sort] Endpoint support multiple sort fields by allowing array of sort params. Sort fields should be applied in the order specified. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.
     * @param {Number} [offset = 0)] Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. e.g, setting `offset=200` would trigger the server to skip the first 200 matching entries when returning the results.
     * @param {Number} [limit] The number of files to limit the result. If you have more files in your directory than this limit, make multiple calls, incrementing the `offset` parameter, above.
     * @param {String} [type] Limit types of resources returned to \"file\" or \"dir\" only. This is ignored if you are using the `name` parameter to trigger a search.
     * @param {String} [name] Text to match resource names. This allows you to filter the results returned. For example, to locate only zip archive files, you can enter `*zip` and only resources ending in \"zip\" will be included in the list of results.
     * @param {String} [include] Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerAccount**.
     * @param {module:api/ResourcesApi~listResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceCollectionResponse}
     */
    listResources(evApiKey, evAccessToken, resource, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling listResources");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling listResources");
      }
      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling listResources");
      }

      let pathParams = {
      };
      let queryParams = {
        'resource': resource,
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'type': opts['type'],
        'name': opts['name'],
        'include': opts['include']
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceCollectionResponse;
      return this.apiClient.callApi(
        '/resources/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveResources operation.
     * @callback module:api/ResourcesApi~moveResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceCopyMove} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move resources
     * Moves a set of exisiting files/folders (provided by an array `resources`) to the requested `parentResource` in your account. In the `resources` array, you may specify paths pointing files/folders throughout the account, but everything will be moved to the root of the `parentResource`.  **Notes:** - Authenticated user should have modify permission. 
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Object} opts Optional parameters
     * @param {module:model/MoveResourcesRequestBody} [moveResourcesRequestBody] 
     * @param {module:api/ResourcesApi~moveResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceCopyMove}
     */
    moveResources(evApiKey, evAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['moveResourcesRequestBody'];
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling moveResources");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling moveResources");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceCopyMove;
      return this.apiClient.callApi(
        '/resources/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateResourceById operation.
     * @callback module:api/ResourcesApi~updateResourceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename a resource.
     * Update the specified file or folder resource record's \"name\" parameter. The resource is identified by the numeric resource ID that is passed in as the last segment of the URI. 
     * @param {Number} id ID number of the resource
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {String} evApiKey API key required to make the API call.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateResourceByIdRequestBody} [updateResourceByIdRequestBody] 
     * @param {module:api/ResourcesApi~updateResourceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceResponse}
     */
    updateResourceById(id, evAccessToken, evApiKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateResourceByIdRequestBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateResourceById");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling updateResourceById");
      }
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling updateResourceById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-access-token': evAccessToken,
        'ev-api-key': evApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceResponse;
      return this.apiClient.callApi(
        '/resources/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile operation.
     * @callback module:api/ResourcesApi~uploadFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a file
     * Uploads a file to a specified path, with optional support for resuming a partially uploaded existing file. 
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {String} path Destination path for the file being uploaded, including the file name.
     * @param {Number} fileSize File size, in bits, of the file being uploaded.
     * @param {Object} opts Optional parameters
     * @param {Number} [offsetBytes] Allows a file upload to resume at a certain number of bytes.
     * @param {Boolean} [resume = true)] True if upload resume is supported, false if it isn't. 
     * @param {Boolean} [allowOverwrite = false)] True if a file with the same name is found in the designated path, should be overwritten. False if different file names should be generated. 
     * @param {File} [file] 
     * @param {module:api/ResourcesApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceResponse}
     */
    uploadFile(evApiKey, evAccessToken, path, fileSize, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling uploadFile");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling uploadFile");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling uploadFile");
      }
      // verify the required parameter 'fileSize' is set
      if (fileSize === undefined || fileSize === null) {
        throw new Error("Missing the required parameter 'fileSize' when calling uploadFile");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'fileSize': fileSize,
        'resume': opts['resume'],
        'allowOverwrite': opts['allowOverwrite']
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken,
        'offsetBytes': opts['offsetBytes']
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ResourceResponse;
      return this.apiClient.callApi(
        '/resources/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
