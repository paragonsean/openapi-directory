/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddUserRequestBody from '../model/AddUserRequestBody';
import EmptyResponse from '../model/EmptyResponse';
import UpdateUserRequestBody from '../model/UpdateUserRequestBody';
import UserCollectionResponse from '../model/UserCollectionResponse';
import UserResponse from '../model/UserResponse';

/**
* Users service.
* @module api/UsersApi
* @version 2.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addUser operation.
     * @callback module:api/UsersApi~addUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a user
     * Adds a new user to the account. The user may be configured as an admin or standard user, and (if a standard user) may be assigned a restricted [home directory](/docs/account/04-users/00-introduction#setting-the-user-s-home-directory) and restricted [permissions](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions).   **Notes:**  - You must be an [admin-level user](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to use this.
     * @param {String} evApiKey API key required to make the API call
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Object} opts Optional parameters
     * @param {module:model/AddUserRequestBody} [addUserRequestBody] 
     * @param {module:api/UsersApi~addUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    addUser(evApiKey, evAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['addUserRequestBody'];
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling addUser");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling addUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserResponse;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UsersApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user
     * Delete a user from the account. Deleting a user does **NOT** delete any files from the account; it merely removes a user's access. Aternatively, locking a user via the [PATCH /users/{id}](#operation/updateUser) will keep the user in your account, but make it unable to log in.   Resources and shares owned by the deleted user will be owned by the master user after the deletion.  **Notes:**   - You must have [admin-level access](/docs/account/04-users/01-admin-users) to delete a user. - The primary owner of the account cannot be deleted. 
     * @param {Number} id The user's ID. Note that this is our internal ID, and _not the username_. You can obtain it by calling the [GET /users](#operation/listUsers) method.
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {module:api/UsersApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyResponse}
     */
    deleteUser(id, evApiKey, evAccessToken, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUser");
      }
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling deleteUser");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling deleteUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmptyResponse;
      return this.apiClient.callApi(
        '/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserById operation.
     * @callback module:api/UsersApi~getUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get info for a user
     * Get the details for a specific user. You can use the `include` parameter to also get the details of related records, such as the account or the home directory.  **Notes:**  - You must have [admin or master](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) access to use this.
     * @param {Number} id The user's ID. Note that this is our internal ID, and _not the username_. You can obtain it by calling the [GET /users](#operation/listUsers) method.
     * @param {String} evApiKey API Key
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [include] Comma-separated list of relationships to include in response. Possible values include **homeResource** and **ownerAccount**.
     * @param {module:api/UsersApi~getUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    getUserById(id, evApiKey, evAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserById");
      }
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling getUserById");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling getUserById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserResponse;
      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsers operation.
     * @callback module:api/UsersApi~listUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of users
     * Get a list of the users in your account. There are three main types of searches you can do with this method:  1. Search for a user by username. If you provide the `username` parameter in your call, then only the user who exactly matches that username will be in the list of matches. Any other parameters are ignored. 1. Search for a user by individual filter fields (`nickname`,`email`,`role`,`status`,`homeDir`). Users in the list will be ones who match all of the filters you choose to search by. For example, you could look for users with the \"admin\" `role` AND `email` addresses ending in \"*@acme.com\".  1. Search for a user by search string. If you provide the `search` parameter, users whose nickname OR email OR role OR homeDir match value your provide.  **Notes:**  - You must be an [admin-level user](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to use this. - The homeDir is the full path to the user's home directory, not a resource ID or hash.
     * @param {String} evApiKey API key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [username] The username of the user you are looking for. Only entries with the same username as this will be in the list of results. Does not support wildcard searches.
     * @param {String} [homeResource] Resource identifier for user's home directory. Does not support wildcard searches.
     * @param {String} [nickname] Nickname to search for. Ignored if `username` is provided. Supports wildcard searches.
     * @param {String} [email] Email to search for. Ignored if `username` is provided. Supports wildcard searches
     * @param {String} [role] Types of users to include the list. Ignored if `username` is provided. Valid options are **admin**, **master** and **user**
     * @param {Number} [status] Whether a user is locked. Ignored if `username` is provided. **0** means user is locked, **1** means user is not locked. 
     * @param {String} [search] Searches the nickname, email, role and homeDir fields for the provided value. Ignored if `username` is provided. Supports wildcard searches.
     * @param {Number} [offset] Starting user record in the result set. Can be used for pagination.
     * @param {String} [sort] Sort order or matching users. You can sort by multiple columns by separating sort options with a comma; the sort will be applied in the order specified. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.  Valid sort fields are: **nickname**, **username**, **email**, **homeDir** and **modified**
     * @param {Number} [limit] Number of users to return. Can be used for pagination.
     * @param {String} [include] Comma separated list of relationships to include in response. Valid options are **homeResource** and **ownerAccount**.
     * @param {module:api/UsersApi~listUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserCollectionResponse}
     */
    listUsers(evApiKey, evAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling listUsers");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling listUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username'],
        'homeResource': opts['homeResource'],
        'nickname': opts['nickname'],
        'email': opts['email'],
        'role': opts['role'],
        'status': opts['status'],
        'search': opts['search'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'limit': opts['limit'],
        'include': opts['include']
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserCollectionResponse;
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/UsersApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user
     * Updates the settings for the user. Note that the unique key for this API call is our internal ID, and _not_ the username, as the username can be changed.  In the request body, you should only send the parameters for values that you wish to change for the user.  **Notes:**  - You must have [admin or master](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) access to edit other users. If you have user-level access, you can only update your own user settings. - You cannot edit a master user with this method.
     * @param {Number} id The user's ID. Note that this is our internal ID, and _not the username_. You can obtain it by calling the [GET /users](#operation/listUsers) method.
     * @param {String} evApiKey API key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateUserRequestBody} [updateUserRequestBody] 
     * @param {module:api/UsersApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    updateUser(id, evApiKey, evAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateUserRequestBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUser");
      }
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling updateUser");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling updateUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserResponse;
      return this.apiClient.callApi(
        '/users/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
