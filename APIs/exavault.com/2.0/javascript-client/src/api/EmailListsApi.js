/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddEmailListRequestBody from '../model/AddEmailListRequestBody';
import EmailListCollectionResponse from '../model/EmailListCollectionResponse';
import EmailListResponse from '../model/EmailListResponse';
import EmptyResponse from '../model/EmptyResponse';
import UpdateEmailListRequestBody from '../model/UpdateEmailListRequestBody';

/**
* EmailLists service.
* @module api/EmailListsApi
* @version 2.0
*/
export default class EmailListsApi {

    /**
    * Constructs a new EmailListsApi. 
    * @alias module:api/EmailListsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addEmailList operation.
     * @callback module:api/EmailListsApi~addEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmailListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new email list
     * Create a new email list. Among other things, email lists can be used to send files or share folders with a group of email addresses at once.
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Object} opts Optional parameters
     * @param {module:model/AddEmailListRequestBody} [addEmailListRequestBody] 
     * @param {module:api/EmailListsApi~addEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmailListResponse}
     */
    addEmailList(evApiKey, evAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['addEmailListRequestBody'];
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling addEmailList");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling addEmailList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailListResponse;
      return this.apiClient.callApi(
        '/email-lists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailListById operation.
     * @callback module:api/EmailListsApi~deleteEmailListByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an email group with given id
     * Permanently delete an email group. This action is not reversible. We recommend making a user confirm this action before sending the API call. 
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Number} id ID of the email list to delete
     * @param {module:api/EmailListsApi~deleteEmailListByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyResponse}
     */
    deleteEmailListById(evApiKey, evAccessToken, id, callback) {
      let postBody = null;
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling deleteEmailListById");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling deleteEmailListById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteEmailListById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmptyResponse;
      return this.apiClient.callApi(
        '/email-lists/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailListById operation.
     * @callback module:api/EmailListsApi~getEmailListByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmailListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get individual email group
     * Retrieve all the details of a specific email list including it's name, when it was created and all the email addresses that belong to the group.
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Number} id ID of the email list to return.
     * @param {Object} opts Optional parameters
     * @param {String} [include] Related record types to include in the response. Valid option is `ownerUser`
     * @param {module:api/EmailListsApi~getEmailListByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmailListResponse}
     */
    getEmailListById(evApiKey, evAccessToken, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling getEmailListById");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling getEmailListById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEmailListById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailListResponse;
      return this.apiClient.callApi(
        '/email-lists/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailLists operation.
     * @callback module:api/EmailListsApi~getEmailListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmailListCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all email groups
     * List all email groups for authenticated user
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [include] Related record types to include in the response. Valid option is `ownerUser`
     * @param {module:api/EmailListsApi~getEmailListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmailListCollectionResponse}
     */
    getEmailLists(evApiKey, evAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling getEmailLists");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling getEmailLists");
      }

      let pathParams = {
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailListCollectionResponse;
      return this.apiClient.callApi(
        '/email-lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailListById operation.
     * @callback module:api/EmailListsApi~updateEmailListByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmailListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an email group
     * Add or remove emails from an email list that can be used to send and share files with groups.   **Notes**  *This call will **replace** your current email list in its entirety.* If you want to keep any existing emails on the list, be sure to submit the call with any current emails you want to keep on the list.  
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Number} id ID of the email list to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateEmailListRequestBody} [updateEmailListRequestBody] 
     * @param {module:api/EmailListsApi~updateEmailListByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmailListResponse}
     */
    updateEmailListById(evApiKey, evAccessToken, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateEmailListRequestBody'];
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling updateEmailListById");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling updateEmailListById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateEmailListById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailListResponse;
      return this.apiClient.callApi(
        '/email-lists/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
