/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EmptyResponse from '../model/EmptyResponse';
import FormEntryResponse from '../model/FormEntryResponse';
import FormResponse from '../model/FormResponse';
import UpdateFormByIdRequestBody from '../model/UpdateFormByIdRequestBody';

/**
* Form service.
* @module api/FormApi
* @version 2.0
*/
export default class FormApi {

    /**
    * Constructs a new FormApi. 
    * @alias module:api/FormApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteFormMessageById operation.
     * @callback module:api/FormApi~deleteFormMessageByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a receive form submission
     * Deletes a form submission entry, which represents one time that a visitor filled out the form and uploaded files. This deletes only the record of the submission (the date, the values entered in the form and the names of the files uploaded by the visitor).The share and any associated file resources will not be deleted by this.   **Notes**:  - Use the [GET /form/entries/{formId}](#operation/getFormMessageById) to list the submissions and obtain the ID of the entry you want to delete - You must have the [DeleteFormData permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) in order to use this operation - It is not possible to un-delete data that is removed in this way 
     * @param {String} evApiKey API Key required to make the API call. 
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Number} id ID of the entry to be deleted data for
     * @param {module:api/FormApi~deleteFormMessageByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyResponse}
     */
    deleteFormMessageById(evApiKey, evAccessToken, id, callback) {
      let postBody = null;
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling deleteFormMessageById");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling deleteFormMessageById");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFormMessageById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmptyResponse;
      return this.apiClient.callApi(
        '/forms/entries/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFormById operation.
     * @callback module:api/FormApi~getFormByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get receive folder form by Id
     * Returns the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders). The form details will return all the input fields and their settings.   Use the `include` parameter (with the value **share**) to also retrieve the details of the associated receive folder.   **Note**  If you prefer to find a form by its shareHash, you can use the [GET /forms](#operation/getFormByShareHash) endpoint instead.  
     * @param {Number} id Form unique ID number.
     * @param {String} evApiKey API key required to make the API call.
     * @param {String} evAccessToken Access Token required to make the API call.
     * @param {Object} opts Optional parameters
     * @param {String} [include] Enter \"**share**\" to get information about associated receive folder.
     * @param {module:api/FormApi~getFormByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FormResponse}
     */
    getFormById(id, evApiKey, evAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFormById");
      }
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling getFormById");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling getFormById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FormResponse;
      return this.apiClient.callApi(
        '/forms/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFormByShareHash operation.
     * @callback module:api/FormApi~getFormByShareHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get receive folder form settings
     * Get the information for the [file upload form](/docs/account/05-file-sharing/05-form-builder) assigned to a [receive folder](/docs/account/05-file-sharing/04-receive-folders) by its shareHash. The form details will return all the input field settings and the CSS for the form.  Use the `include` parameter (with the value **share**) to also get the details of the associated receive folder.  **Note**  - If you prefer to find a form by its ID, you can use the [GET /forms/{id}](#operation/getFormById) endpoint instead.  
     * @param {String} evApiKey API key required to make the API call.
     * @param {String} evAccessToken Access Token required to make the API call.
     * @param {String} shareHash Share hash to retrieve the form for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [include] Related record types to include in the response. Valid option is **share**
     * @param {module:api/FormApi~getFormByShareHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FormResponse}
     */
    getFormByShareHash(evApiKey, evAccessToken, shareHash, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling getFormByShareHash");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling getFormByShareHash");
      }
      // verify the required parameter 'shareHash' is set
      if (shareHash === undefined || shareHash === null) {
        throw new Error("Missing the required parameter 'shareHash' when calling getFormByShareHash");
      }

      let pathParams = {
      };
      let queryParams = {
        'shareHash': shareHash,
        'include': opts['include']
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FormResponse;
      return this.apiClient.callApi(
        '/forms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFormEntries operation.
     * @callback module:api/FormApi~getFormEntriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FormEntryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get form data entries for a receive
     * Returns the form data entries for a specific form for a receive. Optional parameters can be included in the call to manage larger data sets. 
     * @param {String} evApiKey API Key required to make the API call. 
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Number} id ID of the form to retrieve entries for.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limit of records to be returned (for pagination)
     * @param {Number} [offset] Current offset of records (for pagination)
     * @param {module:api/FormApi~getFormEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FormEntryResponse}
     */
    getFormEntries(evApiKey, evAccessToken, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling getFormEntries");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling getFormEntries");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFormEntries");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FormEntryResponse;
      return this.apiClient.callApi(
        '/forms/entries/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFormById operation.
     * @callback module:api/FormApi~updateFormByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a form with given parameters
     * Add, update, or delete a form's parameters. This will alter how your users/customers will see and interact with the form when sending you files.   **Notes**  *This call will **replace** your current form in its entirety.* If you want to keep any existing elements unchanged, be sure to submit the call with an element's current settings to preserve them.                          
     * @param {Number} id Form unique ID number.
     * @param {String} evApiKey API Key required to make the API call.
     * @param {String} evAccessToken Access token required to make the API call.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateFormByIdRequestBody} [updateFormByIdRequestBody] 
     * @param {module:api/FormApi~updateFormByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FormResponse}
     */
    updateFormById(id, evApiKey, evAccessToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateFormByIdRequestBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateFormById");
      }
      // verify the required parameter 'evApiKey' is set
      if (evApiKey === undefined || evApiKey === null) {
        throw new Error("Missing the required parameter 'evApiKey' when calling updateFormById");
      }
      // verify the required parameter 'evAccessToken' is set
      if (evAccessToken === undefined || evAccessToken === null) {
        throw new Error("Missing the required parameter 'evAccessToken' when calling updateFormById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'ev-api-key': evApiKey,
        'ev-access-token': evAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FormResponse;
      return this.apiClient.callApi(
        '/forms/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
