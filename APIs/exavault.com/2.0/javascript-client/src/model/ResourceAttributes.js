/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResourceAttributes model module.
 * @module model/ResourceAttributes
 * @version 2.0
 */
class ResourceAttributes {
    /**
     * Constructs a new <code>ResourceAttributes</code>.
     * Attributes of resource
     * @alias module:model/ResourceAttributes
     */
    constructor() { 
        
        ResourceAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceAttributes} obj Optional instance to populate.
     * @return {module:model/ResourceAttributes} The populated <code>ResourceAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceAttributes();

            if (data.hasOwnProperty('accessedAt')) {
                obj['accessedAt'] = ApiClient.convertToType(data['accessedAt'], 'Date');
            }
            if (data.hasOwnProperty('accessedTime')) {
                obj['accessedTime'] = ApiClient.convertToType(data['accessedTime'], 'Number');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'String');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Number');
            }
            if (data.hasOwnProperty('extension')) {
                obj['extension'] = ApiClient.convertToType(data['extension'], 'String');
            }
            if (data.hasOwnProperty('fileCount')) {
                obj['fileCount'] = ApiClient.convertToType(data['fileCount'], 'Number');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('previewable')) {
                obj['previewable'] = ApiClient.convertToType(data['previewable'], 'Boolean');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedTime')) {
                obj['updatedTime'] = ApiClient.convertToType(data['updatedTime'], 'Number');
            }
            if (data.hasOwnProperty('uploadDate')) {
                obj['uploadDate'] = ApiClient.convertToType(data['uploadDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createdBy'] && !(typeof data['createdBy'] === 'string' || data['createdBy'] instanceof String)) {
            throw new Error("Expected the field `createdBy` to be a primitive type in the JSON string but got " + data['createdBy']);
        }
        // ensure the json data is a string
        if (data['extension'] && !(typeof data['extension'] === 'string' || data['extension'] instanceof String)) {
            throw new Error("Expected the field `extension` to be a primitive type in the JSON string but got " + data['extension']);
        }
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Date-time of the time when resource was accessed.
 * @member {Date} accessedAt
 */
ResourceAttributes.prototype['accessedAt'] = undefined;

/**
 * UNIX timestamp of last access
 * @member {Number} accessedTime
 */
ResourceAttributes.prototype['accessedTime'] = undefined;

/**
 * Date-time of resource creation.
 * @member {Date} createdAt
 */
ResourceAttributes.prototype['createdAt'] = undefined;

/**
 * Username of the creator.
 * @member {String} createdBy
 */
ResourceAttributes.prototype['createdBy'] = undefined;

/**
 * UNIX timestamp of resource creation
 * @member {Number} createdTime
 */
ResourceAttributes.prototype['createdTime'] = undefined;

/**
 * Resource extension. Property exists only if resource `type` is file.
 * @member {String} extension
 */
ResourceAttributes.prototype['extension'] = undefined;

/**
 * Number of files within folder. null if resource type is a file.
 * @member {Number} fileCount
 */
ResourceAttributes.prototype['fileCount'] = undefined;

/**
 * Unique hash of the resource.
 * @member {String} hash
 */
ResourceAttributes.prototype['hash'] = undefined;

/**
 * Resource name, e.g. the name of the file or folder.
 * @member {String} name
 */
ResourceAttributes.prototype['name'] = undefined;

/**
 * Full path to the resource.
 * @member {String} path
 */
ResourceAttributes.prototype['path'] = undefined;

/**
 * Can resource be previewed. Property equals `null` if resource `type` is dir.
 * @member {Boolean} previewable
 */
ResourceAttributes.prototype['previewable'] = undefined;

/**
 * Resource size in bytes
 * @member {Number} size
 */
ResourceAttributes.prototype['size'] = undefined;

/**
 * Type of the resource.
 * @member {module:model/ResourceAttributes.TypeEnum} type
 */
ResourceAttributes.prototype['type'] = undefined;

/**
 * Date-time of resource modification.
 * @member {Date} updatedAt
 */
ResourceAttributes.prototype['updatedAt'] = undefined;

/**
 * UNIX timestamp of resource modification
 * @member {Number} updatedTime
 */
ResourceAttributes.prototype['updatedTime'] = undefined;

/**
 * Timestamp of resource upload.
 * @member {Date} uploadDate
 */
ResourceAttributes.prototype['uploadDate'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ResourceAttributes['TypeEnum'] = {

    /**
     * value: "file"
     * @const
     */
    "file": "file",

    /**
     * value: "dir"
     * @const
     */
    "dir": "dir"
};



export default ResourceAttributes;

