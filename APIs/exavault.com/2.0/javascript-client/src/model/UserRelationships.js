/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserRelationshipsHomeResource from './UserRelationshipsHomeResource';
import UserRelationshipsOwnerAccount from './UserRelationshipsOwnerAccount';

/**
 * The UserRelationships model module.
 * @module model/UserRelationships
 * @version 2.0
 */
class UserRelationships {
    /**
     * Constructs a new <code>UserRelationships</code>.
     * Home resource and owner account relationship data for the user. 
     * @alias module:model/UserRelationships
     * @param ownerAccount {module:model/UserRelationshipsOwnerAccount} 
     */
    constructor(ownerAccount) { 
        
        UserRelationships.initialize(this, ownerAccount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ownerAccount) { 
        obj['ownerAccount'] = ownerAccount;
    }

    /**
     * Constructs a <code>UserRelationships</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserRelationships} obj Optional instance to populate.
     * @return {module:model/UserRelationships} The populated <code>UserRelationships</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserRelationships();

            if (data.hasOwnProperty('homeResource')) {
                obj['homeResource'] = UserRelationshipsHomeResource.constructFromObject(data['homeResource']);
            }
            if (data.hasOwnProperty('ownerAccount')) {
                obj['ownerAccount'] = UserRelationshipsOwnerAccount.constructFromObject(data['ownerAccount']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserRelationships</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserRelationships</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserRelationships.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `homeResource`
        if (data['homeResource']) { // data not null
          UserRelationshipsHomeResource.validateJSON(data['homeResource']);
        }
        // validate the optional field `ownerAccount`
        if (data['ownerAccount']) { // data not null
          UserRelationshipsOwnerAccount.validateJSON(data['ownerAccount']);
        }

        return true;
    }


}

UserRelationships.RequiredProperties = ["ownerAccount"];

/**
 * @member {module:model/UserRelationshipsHomeResource} homeResource
 */
UserRelationships.prototype['homeResource'] = undefined;

/**
 * @member {module:model/UserRelationshipsOwnerAccount} ownerAccount
 */
UserRelationships.prototype['ownerAccount'] = undefined;






export default UserRelationships;

