/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccessMode from './AccessMode';
import ShareMessage from './ShareMessage';
import ShareRecipient from './ShareRecipient';

/**
 * The WebhookV2EventDataShareInner model module.
 * @module model/WebhookV2EventDataShareInner
 * @version 2.0
 */
class WebhookV2EventDataShareInner {
    /**
     * Constructs a new <code>WebhookV2EventDataShareInner</code>.
     * @alias module:model/WebhookV2EventDataShareInner
     */
    constructor() { 
        
        WebhookV2EventDataShareInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WebhookV2EventDataShareInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookV2EventDataShareInner} obj Optional instance to populate.
     * @return {module:model/WebhookV2EventDataShareInner} The populated <code>WebhookV2EventDataShareInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookV2EventDataShareInner();

            if (data.hasOwnProperty('accessDescription')) {
                obj['accessDescription'] = ApiClient.convertToType(data['accessDescription'], 'String');
            }
            if (data.hasOwnProperty('accessMode')) {
                obj['accessMode'] = AccessMode.constructFromObject(data['accessMode']);
            }
            if (data.hasOwnProperty('assets')) {
                obj['assets'] = ApiClient.convertToType(data['assets'], ['String']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('embed')) {
                obj['embed'] = ApiClient.convertToType(data['embed'], 'Boolean');
            }
            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = ApiClient.convertToType(data['expiration'], 'String');
            }
            if (data.hasOwnProperty('expired')) {
                obj['expired'] = ApiClient.convertToType(data['expired'], 'Boolean');
            }
            if (data.hasOwnProperty('fileDropCreateFolders')) {
                obj['fileDropCreateFolders'] = ApiClient.convertToType(data['fileDropCreateFolders'], 'Boolean');
            }
            if (data.hasOwnProperty('formId')) {
                obj['formId'] = ApiClient.convertToType(data['formId'], 'Number');
            }
            if (data.hasOwnProperty('hasNotification')) {
                obj['hasNotification'] = ApiClient.convertToType(data['hasNotification'], 'Boolean');
            }
            if (data.hasOwnProperty('hasPassword')) {
                obj['hasPassword'] = ApiClient.convertToType(data['hasPassword'], 'Boolean');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('inherited')) {
                obj['inherited'] = ApiClient.convertToType(data['inherited'], 'Boolean');
            }
            if (data.hasOwnProperty('isPublic')) {
                obj['isPublic'] = ApiClient.convertToType(data['isPublic'], 'Boolean');
            }
            if (data.hasOwnProperty('messages')) {
                obj['messages'] = ApiClient.convertToType(data['messages'], [ShareMessage]);
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ownerHash')) {
                obj['ownerHash'] = ApiClient.convertToType(data['ownerHash'], 'String');
            }
            if (data.hasOwnProperty('paths')) {
                obj['paths'] = ApiClient.convertToType(data['paths'], ['String']);
            }
            if (data.hasOwnProperty('recipients')) {
                obj['recipients'] = ApiClient.convertToType(data['recipients'], [ShareRecipient]);
            }
            if (data.hasOwnProperty('requireEmail')) {
                obj['requireEmail'] = ApiClient.convertToType(data['requireEmail'], 'Boolean');
            }
            if (data.hasOwnProperty('resent')) {
                obj['resent'] = ApiClient.convertToType(data['resent'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('trackingStatus')) {
                obj['trackingStatus'] = ApiClient.convertToType(data['trackingStatus'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookV2EventDataShareInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookV2EventDataShareInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessDescription'] && !(typeof data['accessDescription'] === 'string' || data['accessDescription'] instanceof String)) {
            throw new Error("Expected the field `accessDescription` to be a primitive type in the JSON string but got " + data['accessDescription']);
        }
        // validate the optional field `accessMode`
        if (data['accessMode']) { // data not null
          AccessMode.validateJSON(data['accessMode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['assets'])) {
            throw new Error("Expected the field `assets` to be an array in the JSON data but got " + data['assets']);
        }
        // ensure the json data is a string
        if (data['expiration'] && !(typeof data['expiration'] === 'string' || data['expiration'] instanceof String)) {
            throw new Error("Expected the field `expiration` to be a primitive type in the JSON string but got " + data['expiration']);
        }
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }
        if (data['messages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['messages'])) {
                throw new Error("Expected the field `messages` to be an array in the JSON data but got " + data['messages']);
            }
            // validate the optional field `messages` (array)
            for (const item of data['messages']) {
                ShareMessage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ownerHash'] && !(typeof data['ownerHash'] === 'string' || data['ownerHash'] instanceof String)) {
            throw new Error("Expected the field `ownerHash` to be a primitive type in the JSON string but got " + data['ownerHash']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['paths'])) {
            throw new Error("Expected the field `paths` to be an array in the JSON data but got " + data['paths']);
        }
        if (data['recipients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recipients'])) {
                throw new Error("Expected the field `recipients` to be an array in the JSON data but got " + data['recipients']);
            }
            // validate the optional field `recipients` (array)
            for (const item of data['recipients']) {
                ShareRecipient.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['trackingStatus'] && !(typeof data['trackingStatus'] === 'string' || data['trackingStatus'] instanceof String)) {
            throw new Error("Expected the field `trackingStatus` to be a primitive type in the JSON string but got " + data['trackingStatus']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Human readable description of what visitors are allowed to do with the receive folder
 * @member {String} accessDescription
 */
WebhookV2EventDataShareInner.prototype['accessDescription'] = undefined;

/**
 * @member {module:model/AccessMode} accessMode
 */
WebhookV2EventDataShareInner.prototype['accessMode'] = undefined;

/**
 * List of items included in the share
 * @member {Array.<String>} assets
 */
WebhookV2EventDataShareInner.prototype['assets'] = undefined;

/**
 * Date and ti
 * @member {Date} created
 */
WebhookV2EventDataShareInner.prototype['created'] = undefined;

/**
 * Whether the receive folder can be embedded within a web page
 * @member {Boolean} embed
 */
WebhookV2EventDataShareInner.prototype['embed'] = undefined;

/**
 * Date and time when the receive folder will no longer be 
 * @member {String} expiration
 */
WebhookV2EventDataShareInner.prototype['expiration'] = undefined;

/**
 * Whether access to the receive folder has expired
 * @member {Boolean} expired
 */
WebhookV2EventDataShareInner.prototype['expired'] = undefined;

/**
 * Whether files should be automatically placed in subfolders of the receive folder
 * @member {Boolean} fileDropCreateFolders
 */
WebhookV2EventDataShareInner.prototype['fileDropCreateFolders'] = undefined;

/**
 * ID of the associated form
 * @member {Number} formId
 */
WebhookV2EventDataShareInner.prototype['formId'] = undefined;

/**
 * Whether delivery receipts are enabled for this share
 * @member {Boolean} hasNotification
 */
WebhookV2EventDataShareInner.prototype['hasNotification'] = undefined;

/**
 * Whether the receive folder requires visitors to enter a password
 * @member {Boolean} hasPassword
 */
WebhookV2EventDataShareInner.prototype['hasPassword'] = undefined;

/**
 * Hash value of the receive
 * @member {String} hash
 */
WebhookV2EventDataShareInner.prototype['hash'] = undefined;

/**
 * Unique ID of associated receive folder
 * @member {Number} id
 */
WebhookV2EventDataShareInner.prototype['id'] = undefined;

/**
 * Whether this share is inherited from a parent fol
 * @member {Boolean} inherited
 */
WebhookV2EventDataShareInner.prototype['inherited'] = undefined;

/**
 * Whether visitors can acccess the receive folder without an invitation link
 * @member {Boolean} isPublic
 */
WebhookV2EventDataShareInner.prototype['isPublic'] = undefined;

/**
 * Invitation messages sent for receive folder
 * @member {Array.<module:model/ShareMessage>} messages
 */
WebhookV2EventDataShareInner.prototype['messages'] = undefined;

/**
 * Date and time when the share was last changed
 * @member {Date} modified
 */
WebhookV2EventDataShareInner.prototype['modified'] = undefined;

/**
 * Name of receiv
 * @member {String} name
 */
WebhookV2EventDataShareInner.prototype['name'] = undefined;

/**
 * Hash value of the user who \"owns\" the receive fo
 * @member {String} ownerHash
 */
WebhookV2EventDataShareInner.prototype['ownerHash'] = undefined;

/**
 * List
 * @member {Array.<String>} paths
 */
WebhookV2EventDataShareInner.prototype['paths'] = undefined;

/**
 * List of recipients invited  to the receive folder
 * @member {Array.<module:model/ShareRecipient>} recipients
 */
WebhookV2EventDataShareInner.prototype['recipients'] = undefined;

/**
 * Whether visitors must enter their email addresses to access the receive folder
 * @member {Boolean} requireEmail
 */
WebhookV2EventDataShareInner.prototype['requireEmail'] = undefined;

/**
 * Whether invitations to the receive folder have been re-sent to recipients
 * @member {Boolean} resent
 */
WebhookV2EventDataShareInner.prototype['resent'] = undefined;

/**
 * 1 if share is active. 0 if not.
 * @member {Number} status
 */
WebhookV2EventDataShareInner.prototype['status'] = undefined;

/**
 * Status of invitations sent for this receive folder
 * @member {String} trackingStatus
 */
WebhookV2EventDataShareInner.prototype['trackingStatus'] = undefined;

/**
 * Type of share **\"receive\"**
 * @member {String} type
 */
WebhookV2EventDataShareInner.prototype['type'] = undefined;






export default WebhookV2EventDataShareInner;

