/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserPermissions from './UserPermissions';

/**
 * The UpdateUserRequestBody model module.
 * @module model/UpdateUserRequestBody
 * @version 2.0
 */
class UpdateUserRequestBody {
    /**
     * Constructs a new <code>UpdateUserRequestBody</code>.
     * @alias module:model/UpdateUserRequestBody
     */
    constructor() { 
        
        UpdateUserRequestBody.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateUserRequestBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateUserRequestBody} obj Optional instance to populate.
     * @return {module:model/UpdateUserRequestBody} The populated <code>UpdateUserRequestBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateUserRequestBody();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = ApiClient.convertToType(data['expiration'], 'String');
            }
            if (data.hasOwnProperty('homeResource')) {
                obj['homeResource'] = ApiClient.convertToType(data['homeResource'], 'String');
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('onboarding')) {
                obj['onboarding'] = ApiClient.convertToType(data['onboarding'], 'Boolean');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = UserPermissions.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateUserRequestBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateUserRequestBody</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['expiration'] && !(typeof data['expiration'] === 'string' || data['expiration'] instanceof String)) {
            throw new Error("Expected the field `expiration` to be a primitive type in the JSON string but got " + data['expiration']);
        }
        // ensure the json data is a string
        if (data['homeResource'] && !(typeof data['homeResource'] === 'string' || data['homeResource'] instanceof String)) {
            throw new Error("Expected the field `homeResource` to be a primitive type in the JSON string but got " + data['homeResource']);
        }
        // ensure the json data is a string
        if (data['nickname'] && !(typeof data['nickname'] === 'string' || data['nickname'] instanceof String)) {
            throw new Error("Expected the field `nickname` to be a primitive type in the JSON string but got " + data['nickname']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          UserPermissions.validateJSON(data['permissions']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * Email address for the user
 * @member {String} email
 */
UpdateUserRequestBody.prototype['email'] = undefined;

/**
 * Optional timestamp when the user should expire.
 * @member {String} expiration
 */
UpdateUserRequestBody.prototype['expiration'] = undefined;

/**
 * Resource identifier for the user's home folder. See details on [how to specify resources](#section/Identifying-Resources) above.  The user will be locked to this directory and unable to move 'up' in the account. If the folder does not exist in the account, it will be created when the user logs in.  This setting is ignored for users with the `role` **admin**.
 * @member {String} homeResource
 */
UpdateUserRequestBody.prototype['homeResource'] = undefined;

/**
 * If true, the user will be prevented from logging in
 * @member {Boolean} locked
 */
UpdateUserRequestBody.prototype['locked'] = undefined;

/**
 * An optional nickname (e.g. 'David from Sales').
 * @member {String} nickname
 */
UpdateUserRequestBody.prototype['nickname'] = undefined;

/**
 * Set this to **true** to enable extra help popups in the web file manager for this user.
 * @member {Boolean} onboarding
 */
UpdateUserRequestBody.prototype['onboarding'] = undefined;

/**
 * New password for the user
 * @member {String} password
 */
UpdateUserRequestBody.prototype['password'] = undefined;

/**
 * @member {module:model/UserPermissions} permissions
 */
UpdateUserRequestBody.prototype['permissions'] = undefined;

/**
 * The type of user (**admin** or **user**). Note that admin users cannot have a `homeResource` other than '/', and will have full permissions, but you must provide at least \"download,upload,list,delete\" in the `permissions` parameter.
 * @member {module:model/UpdateUserRequestBody.RoleEnum} role
 */
UpdateUserRequestBody.prototype['role'] = undefined;

/**
 * Time zone, used for accurate time display within the application. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values. 
 * @member {String} timeZone
 */
UpdateUserRequestBody.prototype['timeZone'] = undefined;

/**
 * New username for the user. This should follow standard username conventions - spaces are not allowed, etc. We do allow email addresses as usernames.  **Note** Usernames must be unique across all ExaVault accounts.
 * @member {String} username
 */
UpdateUserRequestBody.prototype['username'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
UpdateUserRequestBody['RoleEnum'] = {

    /**
     * value: "user"
     * @const
     */
    "user": "user",

    /**
     * value: "admin"
     * @const
     */
    "admin": "admin"
};



export default UpdateUserRequestBody;

