/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccessMode from './AccessMode';
import ShareMessage from './ShareMessage';
import ShareRecipient from './ShareRecipient';

/**
 * The ShareAttributes model module.
 * @module model/ShareAttributes
 * @version 2.0
 */
class ShareAttributes {
    /**
     * Constructs a new <code>ShareAttributes</code>.
     * Attributes of the share including the name, path and share recipients. 
     * @alias module:model/ShareAttributes
     */
    constructor() { 
        
        ShareAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ShareAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShareAttributes} obj Optional instance to populate.
     * @return {module:model/ShareAttributes} The populated <code>ShareAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShareAttributes();

            if (data.hasOwnProperty('accessDescription')) {
                obj['accessDescription'] = ApiClient.convertToType(data['accessDescription'], 'String');
            }
            if (data.hasOwnProperty('accessMode')) {
                obj['accessMode'] = AccessMode.constructFromObject(data['accessMode']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('embed')) {
                obj['embed'] = ApiClient.convertToType(data['embed'], 'Boolean');
            }
            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = ApiClient.convertToType(data['expiration'], 'String');
            }
            if (data.hasOwnProperty('expired')) {
                obj['expired'] = ApiClient.convertToType(data['expired'], 'Boolean');
            }
            if (data.hasOwnProperty('fileDropCreateFolders')) {
                obj['fileDropCreateFolders'] = ApiClient.convertToType(data['fileDropCreateFolders'], 'Boolean');
            }
            if (data.hasOwnProperty('formId')) {
                obj['formId'] = ApiClient.convertToType(data['formId'], 'Number');
            }
            if (data.hasOwnProperty('hasNotification')) {
                obj['hasNotification'] = ApiClient.convertToType(data['hasNotification'], 'Boolean');
            }
            if (data.hasOwnProperty('hasPassword')) {
                obj['hasPassword'] = ApiClient.convertToType(data['hasPassword'], 'Boolean');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('inherited')) {
                obj['inherited'] = ApiClient.convertToType(data['inherited'], 'Boolean');
            }
            if (data.hasOwnProperty('messages')) {
                obj['messages'] = ApiClient.convertToType(data['messages'], [ShareMessage]);
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ownerHash')) {
                obj['ownerHash'] = ApiClient.convertToType(data['ownerHash'], 'String');
            }
            if (data.hasOwnProperty('paths')) {
                obj['paths'] = ApiClient.convertToType(data['paths'], ['String']);
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('recipients')) {
                obj['recipients'] = ApiClient.convertToType(data['recipients'], [ShareRecipient]);
            }
            if (data.hasOwnProperty('requireEmail')) {
                obj['requireEmail'] = ApiClient.convertToType(data['requireEmail'], 'Boolean');
            }
            if (data.hasOwnProperty('resent')) {
                obj['resent'] = ApiClient.convertToType(data['resent'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('trackingStatus')) {
                obj['trackingStatus'] = ApiClient.convertToType(data['trackingStatus'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShareAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShareAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessDescription'] && !(typeof data['accessDescription'] === 'string' || data['accessDescription'] instanceof String)) {
            throw new Error("Expected the field `accessDescription` to be a primitive type in the JSON string but got " + data['accessDescription']);
        }
        // validate the optional field `accessMode`
        if (data['accessMode']) { // data not null
          AccessMode.validateJSON(data['accessMode']);
        }
        // ensure the json data is a string
        if (data['expiration'] && !(typeof data['expiration'] === 'string' || data['expiration'] instanceof String)) {
            throw new Error("Expected the field `expiration` to be a primitive type in the JSON string but got " + data['expiration']);
        }
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }
        if (data['messages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['messages'])) {
                throw new Error("Expected the field `messages` to be an array in the JSON data but got " + data['messages']);
            }
            // validate the optional field `messages` (array)
            for (const item of data['messages']) {
                ShareMessage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ownerHash'] && !(typeof data['ownerHash'] === 'string' || data['ownerHash'] instanceof String)) {
            throw new Error("Expected the field `ownerHash` to be a primitive type in the JSON string but got " + data['ownerHash']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['paths'])) {
            throw new Error("Expected the field `paths` to be an array in the JSON data but got " + data['paths']);
        }
        if (data['recipients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recipients'])) {
                throw new Error("Expected the field `recipients` to be an array in the JSON data but got " + data['recipients']);
            }
            // validate the optional field `recipients` (array)
            for (const item of data['recipients']) {
                ShareRecipient.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['trackingStatus'] && !(typeof data['trackingStatus'] === 'string' || data['trackingStatus'] instanceof String)) {
            throw new Error("Expected the field `trackingStatus` to be a primitive type in the JSON string but got " + data['trackingStatus']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Description of the share access rights.
 * @member {String} accessDescription
 */
ShareAttributes.prototype['accessDescription'] = undefined;

/**
 * @member {module:model/AccessMode} accessMode
 */
ShareAttributes.prototype['accessMode'] = undefined;

/**
 * Timestamp of share creation.
 * @member {Date} created
 */
ShareAttributes.prototype['created'] = undefined;

/**
 * True if share can be embedded.
 * @member {Boolean} embed
 */
ShareAttributes.prototype['embed'] = undefined;

/**
 * Expiration date of the share.
 * @member {String} expiration
 */
ShareAttributes.prototype['expiration'] = undefined;

/**
 * True if the share has expired.
 * @member {Boolean} expired
 */
ShareAttributes.prototype['expired'] = undefined;

/**
 * Flag to show if separate folders should be created for each file upload to receive folder.
 * @member {Boolean} fileDropCreateFolders
 */
ShareAttributes.prototype['fileDropCreateFolders'] = undefined;

/**
 * ID of the form.
 * @member {Number} formId
 */
ShareAttributes.prototype['formId'] = undefined;

/**
 * True if share has notification.
 * @member {Boolean} hasNotification
 */
ShareAttributes.prototype['hasNotification'] = undefined;

/**
 * True if the share has password.
 * @member {Boolean} hasPassword
 */
ShareAttributes.prototype['hasPassword'] = undefined;

/**
 * Share hash.
 * @member {String} hash
 */
ShareAttributes.prototype['hash'] = undefined;

/**
 * True if share inherited from parent folder.
 * @member {Boolean} inherited
 */
ShareAttributes.prototype['inherited'] = undefined;

/**
 * Array of invitation messages.
 * @member {Array.<module:model/ShareMessage>} messages
 */
ShareAttributes.prototype['messages'] = undefined;

/**
 * Timestamp of share modification. Can be `null` if it wasn't modified.
 * @member {Date} modified
 */
ShareAttributes.prototype['modified'] = undefined;

/**
 * Share name.
 * @member {String} name
 */
ShareAttributes.prototype['name'] = undefined;

/**
 * Share owner's hash.
 * @member {String} ownerHash
 */
ShareAttributes.prototype['ownerHash'] = undefined;

/**
 * Path to the shared resource in your account.
 * @member {Array.<String>} paths
 */
ShareAttributes.prototype['paths'] = undefined;

/**
 * True if the share has a public url.
 * @member {Boolean} public
 */
ShareAttributes.prototype['public'] = undefined;

/**
 * Array of recipients.
 * @member {Array.<module:model/ShareRecipient>} recipients
 */
ShareAttributes.prototype['recipients'] = undefined;

/**
 * True if share requires email to access.
 * @member {Boolean} requireEmail
 */
ShareAttributes.prototype['requireEmail'] = undefined;

/**
 * Invitations resent date. Can be `null` if resent never happened.
 * @member {Date} resent
 */
ShareAttributes.prototype['resent'] = undefined;

/**
 * Share activity status. Can be active (1) or deactivated (0).
 * @member {module:model/ShareAttributes.StatusEnum} status
 */
ShareAttributes.prototype['status'] = undefined;

/**
 * Checks recipient received status and returns whether it's been received (`complete`,) partial received (`incomplete`,) or not received yet (`pending`.)
 * @member {module:model/ShareAttributes.TrackingStatusEnum} trackingStatus
 */
ShareAttributes.prototype['trackingStatus'] = undefined;

/**
 * Type of share.
 * @member {module:model/ShareAttributes.TypeEnum} type
 */
ShareAttributes.prototype['type'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {Number}
 * @readonly
 */
ShareAttributes['StatusEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1
};


/**
 * Allowed values for the <code>trackingStatus</code> property.
 * @enum {String}
 * @readonly
 */
ShareAttributes['TrackingStatusEnum'] = {

    /**
     * value: "complete"
     * @const
     */
    "complete": "complete",

    /**
     * value: "incomplete"
     * @const
     */
    "incomplete": "incomplete",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ShareAttributes['TypeEnum'] = {

    /**
     * value: "shared_folder"
     * @const
     */
    "shared_folder": "shared_folder",

    /**
     * value: "send"
     * @const
     */
    "send": "send",

    /**
     * value: "receive"
     * @const
     */
    "receive": "receive"
};



export default ShareAttributes;

