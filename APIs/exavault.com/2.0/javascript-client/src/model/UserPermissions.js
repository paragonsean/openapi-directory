/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserPermissions model module.
 * @module model/UserPermissions
 * @version 2.0
 */
class UserPermissions {
    /**
     * Constructs a new <code>UserPermissions</code>.
     * @alias module:model/UserPermissions
     * @param changePassword {Boolean} Change (own) password permission flag
     * @param _delete {Boolean} Delete permission flag
     * @param deleteFormData {Boolean} Delete form data permission flag. If true, user can remove data that was submitted for a receive folder. This applies only to data submitted in the receive folder form, not the actual files uploaded.
     * @param download {Boolean} Download permission flag
     * @param list {Boolean} View folder contents permission flag
     * @param modify {Boolean} Modify permission flag
     * @param notification {Boolean} Notifications permission flag
     * @param share {Boolean} Sharing permission flag
     * @param upload {Boolean} Upload permission flag
     * @param viewFormData {Boolean} Access Form Data permission flag. If true, user can view submissions that have been stored for a receive folder. This includes any data submitted in the receive folder form.
     */
    constructor(changePassword, _delete, deleteFormData, download, list, modify, notification, share, upload, viewFormData) { 
        
        UserPermissions.initialize(this, changePassword, _delete, deleteFormData, download, list, modify, notification, share, upload, viewFormData);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, changePassword, _delete, deleteFormData, download, list, modify, notification, share, upload, viewFormData) { 
        obj['changePassword'] = changePassword;
        obj['delete'] = _delete;
        obj['deleteFormData'] = deleteFormData;
        obj['download'] = download;
        obj['list'] = list;
        obj['modify'] = modify;
        obj['notification'] = notification;
        obj['share'] = share;
        obj['upload'] = upload;
        obj['viewFormData'] = viewFormData;
    }

    /**
     * Constructs a <code>UserPermissions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserPermissions} obj Optional instance to populate.
     * @return {module:model/UserPermissions} The populated <code>UserPermissions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserPermissions();

            if (data.hasOwnProperty('changePassword')) {
                obj['changePassword'] = ApiClient.convertToType(data['changePassword'], 'Boolean');
            }
            if (data.hasOwnProperty('delete')) {
                obj['delete'] = ApiClient.convertToType(data['delete'], 'Boolean');
            }
            if (data.hasOwnProperty('deleteFormData')) {
                obj['deleteFormData'] = ApiClient.convertToType(data['deleteFormData'], 'Boolean');
            }
            if (data.hasOwnProperty('download')) {
                obj['download'] = ApiClient.convertToType(data['download'], 'Boolean');
            }
            if (data.hasOwnProperty('list')) {
                obj['list'] = ApiClient.convertToType(data['list'], 'Boolean');
            }
            if (data.hasOwnProperty('modify')) {
                obj['modify'] = ApiClient.convertToType(data['modify'], 'Boolean');
            }
            if (data.hasOwnProperty('notification')) {
                obj['notification'] = ApiClient.convertToType(data['notification'], 'Boolean');
            }
            if (data.hasOwnProperty('share')) {
                obj['share'] = ApiClient.convertToType(data['share'], 'Boolean');
            }
            if (data.hasOwnProperty('upload')) {
                obj['upload'] = ApiClient.convertToType(data['upload'], 'Boolean');
            }
            if (data.hasOwnProperty('viewFormData')) {
                obj['viewFormData'] = ApiClient.convertToType(data['viewFormData'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserPermissions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserPermissions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserPermissions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

UserPermissions.RequiredProperties = ["changePassword", "delete", "deleteFormData", "download", "list", "modify", "notification", "share", "upload", "viewFormData"];

/**
 * Change (own) password permission flag
 * @member {Boolean} changePassword
 */
UserPermissions.prototype['changePassword'] = undefined;

/**
 * Delete permission flag
 * @member {Boolean} delete
 */
UserPermissions.prototype['delete'] = undefined;

/**
 * Delete form data permission flag. If true, user can remove data that was submitted for a receive folder. This applies only to data submitted in the receive folder form, not the actual files uploaded.
 * @member {Boolean} deleteFormData
 */
UserPermissions.prototype['deleteFormData'] = undefined;

/**
 * Download permission flag
 * @member {Boolean} download
 */
UserPermissions.prototype['download'] = undefined;

/**
 * View folder contents permission flag
 * @member {Boolean} list
 */
UserPermissions.prototype['list'] = undefined;

/**
 * Modify permission flag
 * @member {Boolean} modify
 */
UserPermissions.prototype['modify'] = undefined;

/**
 * Notifications permission flag
 * @member {Boolean} notification
 */
UserPermissions.prototype['notification'] = undefined;

/**
 * Sharing permission flag
 * @member {Boolean} share
 */
UserPermissions.prototype['share'] = undefined;

/**
 * Upload permission flag
 * @member {Boolean} upload
 */
UserPermissions.prototype['upload'] = undefined;

/**
 * Access Form Data permission flag. If true, user can view submissions that have been stored for a receive folder. This includes any data submitted in the receive folder form.
 * @member {Boolean} viewFormData
 */
UserPermissions.prototype['viewFormData'] = undefined;






export default UserPermissions;

