/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountQuotaValues from './AccountQuotaValues';
import BrandingSettingsValues from './BrandingSettingsValues';
import UpdateAccountRequestBodyAllowedIpRangesInner from './UpdateAccountRequestBodyAllowedIpRangesInner';

/**
 * The UpdateAccountRequestBody model module.
 * @module model/UpdateAccountRequestBody
 * @version 2.0
 */
class UpdateAccountRequestBody {
    /**
     * Constructs a new <code>UpdateAccountRequestBody</code>.
     * @alias module:model/UpdateAccountRequestBody
     */
    constructor() { 
        
        UpdateAccountRequestBody.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateAccountRequestBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateAccountRequestBody} obj Optional instance to populate.
     * @return {module:model/UpdateAccountRequestBody} The populated <code>UpdateAccountRequestBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateAccountRequestBody();

            if (data.hasOwnProperty('accountOnboarding')) {
                obj['accountOnboarding'] = ApiClient.convertToType(data['accountOnboarding'], 'Boolean');
            }
            if (data.hasOwnProperty('allowedIpRanges')) {
                obj['allowedIpRanges'] = ApiClient.convertToType(data['allowedIpRanges'], [UpdateAccountRequestBodyAllowedIpRangesInner]);
            }
            if (data.hasOwnProperty('brandingSettings')) {
                obj['brandingSettings'] = BrandingSettingsValues.constructFromObject(data['brandingSettings']);
            }
            if (data.hasOwnProperty('complexPasswords')) {
                obj['complexPasswords'] = ApiClient.convertToType(data['complexPasswords'], 'Boolean');
            }
            if (data.hasOwnProperty('customSignature')) {
                obj['customSignature'] = ApiClient.convertToType(data['customSignature'], 'String');
            }
            if (data.hasOwnProperty('emailContent')) {
                obj['emailContent'] = ApiClient.convertToType(data['emailContent'], 'String');
            }
            if (data.hasOwnProperty('emailSubject')) {
                obj['emailSubject'] = ApiClient.convertToType(data['emailSubject'], 'String');
            }
            if (data.hasOwnProperty('externalDomain')) {
                obj['externalDomain'] = ApiClient.convertToType(data['externalDomain'], 'String');
            }
            if (data.hasOwnProperty('quota')) {
                obj['quota'] = AccountQuotaValues.constructFromObject(data['quota']);
            }
            if (data.hasOwnProperty('secureOnly')) {
                obj['secureOnly'] = ApiClient.convertToType(data['secureOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('showReferralLinks')) {
                obj['showReferralLinks'] = ApiClient.convertToType(data['showReferralLinks'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateAccountRequestBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateAccountRequestBody</code>.
     */
    static validateJSON(data) {
        if (data['allowedIpRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['allowedIpRanges'])) {
                throw new Error("Expected the field `allowedIpRanges` to be an array in the JSON data but got " + data['allowedIpRanges']);
            }
            // validate the optional field `allowedIpRanges` (array)
            for (const item of data['allowedIpRanges']) {
                UpdateAccountRequestBodyAllowedIpRangesInner.validateJSON(item);
            };
        }
        // validate the optional field `brandingSettings`
        if (data['brandingSettings']) { // data not null
          BrandingSettingsValues.validateJSON(data['brandingSettings']);
        }
        // ensure the json data is a string
        if (data['customSignature'] && !(typeof data['customSignature'] === 'string' || data['customSignature'] instanceof String)) {
            throw new Error("Expected the field `customSignature` to be a primitive type in the JSON string but got " + data['customSignature']);
        }
        // ensure the json data is a string
        if (data['emailContent'] && !(typeof data['emailContent'] === 'string' || data['emailContent'] instanceof String)) {
            throw new Error("Expected the field `emailContent` to be a primitive type in the JSON string but got " + data['emailContent']);
        }
        // ensure the json data is a string
        if (data['emailSubject'] && !(typeof data['emailSubject'] === 'string' || data['emailSubject'] instanceof String)) {
            throw new Error("Expected the field `emailSubject` to be a primitive type in the JSON string but got " + data['emailSubject']);
        }
        // ensure the json data is a string
        if (data['externalDomain'] && !(typeof data['externalDomain'] === 'string' || data['externalDomain'] instanceof String)) {
            throw new Error("Expected the field `externalDomain` to be a primitive type in the JSON string but got " + data['externalDomain']);
        }
        // validate the optional field `quota`
        if (data['quota']) { // data not null
          AccountQuotaValues.validateJSON(data['quota']);
        }

        return true;
    }


}



/**
 * Whether extra help popups can be enabled for users in the web file manager.
 * @member {Boolean} accountOnboarding
 */
UpdateAccountRequestBody.prototype['accountOnboarding'] = undefined;

/**
 * IP Address Ranges for restricting account access
 * @member {Array.<module:model/UpdateAccountRequestBodyAllowedIpRangesInner>} allowedIpRanges
 */
UpdateAccountRequestBody.prototype['allowedIpRanges'] = undefined;

/**
 * @member {module:model/BrandingSettingsValues} brandingSettings
 */
UpdateAccountRequestBody.prototype['brandingSettings'] = undefined;

/**
 * Whether to require complex passwords for all passwords.
 * @member {Boolean} complexPasswords
 */
UpdateAccountRequestBody.prototype['complexPasswords'] = undefined;

/**
 * Signature to be automatically added to the bottom of emails generated by the account.
 * @member {String} customSignature
 */
UpdateAccountRequestBody.prototype['customSignature'] = undefined;

/**
 * Content of welcome email template.
 * @member {String} emailContent
 */
UpdateAccountRequestBody.prototype['emailContent'] = undefined;

/**
 * Subject line for welcome emails
 * @member {String} emailSubject
 */
UpdateAccountRequestBody.prototype['emailSubject'] = undefined;

/**
 * Custom address used for web file manager. Not available for all account types.
 * @member {String} externalDomain
 */
UpdateAccountRequestBody.prototype['externalDomain'] = undefined;

/**
 * @member {module:model/AccountQuotaValues} quota
 */
UpdateAccountRequestBody.prototype['quota'] = undefined;

/**
 * Whether unencrypted FTP connections should be denied for the account.
 * @member {Boolean} secureOnly
 */
UpdateAccountRequestBody.prototype['secureOnly'] = undefined;

/**
 * Whether to display links for others to sign up on share views and invitation emails
 * @member {Boolean} showReferralLinks
 */
UpdateAccountRequestBody.prototype['showReferralLinks'] = undefined;






export default UpdateAccountRequestBody;

