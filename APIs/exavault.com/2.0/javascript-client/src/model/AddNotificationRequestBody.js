/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AddNotificationRequestBody model module.
 * @module model/AddNotificationRequestBody
 * @version 2.0
 */
class AddNotificationRequestBody {
    /**
     * Constructs a new <code>AddNotificationRequestBody</code>.
     * @alias module:model/AddNotificationRequestBody
     * @param action {module:model/AddNotificationRequestBody.ActionEnum} Type of action be notified about. Notifications will only be fired for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)
     * @param resource {String} Resources for this notification. See details on [how to specify resources](#section/Identifying-Resources) above.
     * @param sendEmail {Boolean} Set to true if the user should be notified by email when the notification is triggered.
     * @param type {module:model/AddNotificationRequestBody.TypeEnum} What kind of notification you're making. Valid choices are:  - **file** to monitor activity for a file resource - **folder** to monitor activity for a folder resource
     * @param usernames {Array.<String>} Determines which users' actions should trigger the notification.   Rather than listing  individual users, you can also use 3 special options:  - **notice\\_user\\_all** for activity by any user or share recipient - **notice\\_user\\_all\\_users** for activity only by user accounts - **notice\\_user\\_all\\_recipient** for activity only by share recipients
     */
    constructor(action, resource, sendEmail, type, usernames) { 
        
        AddNotificationRequestBody.initialize(this, action, resource, sendEmail, type, usernames);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, resource, sendEmail, type, usernames) { 
        obj['action'] = action;
        obj['resource'] = resource;
        obj['sendEmail'] = sendEmail;
        obj['type'] = type;
        obj['usernames'] = usernames;
    }

    /**
     * Constructs a <code>AddNotificationRequestBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddNotificationRequestBody} obj Optional instance to populate.
     * @return {module:model/AddNotificationRequestBody} The populated <code>AddNotificationRequestBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddNotificationRequestBody();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('recipients')) {
                obj['recipients'] = ApiClient.convertToType(data['recipients'], ['String']);
            }
            if (data.hasOwnProperty('resource')) {
                obj['resource'] = ApiClient.convertToType(data['resource'], 'String');
            }
            if (data.hasOwnProperty('sendEmail')) {
                obj['sendEmail'] = ApiClient.convertToType(data['sendEmail'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('usernames')) {
                obj['usernames'] = ApiClient.convertToType(data['usernames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddNotificationRequestBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddNotificationRequestBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddNotificationRequestBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['recipients'])) {
            throw new Error("Expected the field `recipients` to be an array in the JSON data but got " + data['recipients']);
        }
        // ensure the json data is a string
        if (data['resource'] && !(typeof data['resource'] === 'string' || data['resource'] instanceof String)) {
            throw new Error("Expected the field `resource` to be a primitive type in the JSON string but got " + data['resource']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['usernames'])) {
            throw new Error("Expected the field `usernames` to be an array in the JSON data but got " + data['usernames']);
        }

        return true;
    }


}

AddNotificationRequestBody.RequiredProperties = ["action", "resource", "sendEmail", "type", "usernames"];

/**
 * Type of action be notified about. Notifications will only be fired for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)
 * @member {module:model/AddNotificationRequestBody.ActionEnum} action
 */
AddNotificationRequestBody.prototype['action'] = undefined;

/**
 * Custom message to include in notification emails.
 * @member {String} message
 */
AddNotificationRequestBody.prototype['message'] = undefined;

/**
 * Email addresses to send notification emails to. If not specified, sends to the current user's email address.
 * @member {Array.<String>} recipients
 */
AddNotificationRequestBody.prototype['recipients'] = undefined;

/**
 * Resources for this notification. See details on [how to specify resources](#section/Identifying-Resources) above.
 * @member {String} resource
 */
AddNotificationRequestBody.prototype['resource'] = undefined;

/**
 * Set to true if the user should be notified by email when the notification is triggered.
 * @member {Boolean} sendEmail
 */
AddNotificationRequestBody.prototype['sendEmail'] = undefined;

/**
 * What kind of notification you're making. Valid choices are:  - **file** to monitor activity for a file resource - **folder** to monitor activity for a folder resource
 * @member {module:model/AddNotificationRequestBody.TypeEnum} type
 */
AddNotificationRequestBody.prototype['type'] = undefined;

/**
 * Determines which users' actions should trigger the notification.   Rather than listing  individual users, you can also use 3 special options:  - **notice\\_user\\_all** for activity by any user or share recipient - **notice\\_user\\_all\\_users** for activity only by user accounts - **notice\\_user\\_all\\_recipient** for activity only by share recipients
 * @member {Array.<String>} usernames
 */
AddNotificationRequestBody.prototype['usernames'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
AddNotificationRequestBody['ActionEnum'] = {

    /**
     * value: "upload"
     * @const
     */
    "upload": "upload",

    /**
     * value: "download"
     * @const
     */
    "download": "download",

    /**
     * value: "delete"
     * @const
     */
    "delete": "delete",

    /**
     * value: "all"
     * @const
     */
    "all": "all"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AddNotificationRequestBody['TypeEnum'] = {

    /**
     * value: "file"
     * @const
     */
    "file": "file",

    /**
     * value: "folder"
     * @const
     */
    "folder": "folder"
};



export default AddNotificationRequestBody;

