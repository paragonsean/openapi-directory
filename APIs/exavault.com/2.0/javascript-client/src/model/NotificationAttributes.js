/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NotificationRecipient from './NotificationRecipient';

/**
 * The NotificationAttributes model module.
 * @module model/NotificationAttributes
 * @version 2.0
 */
class NotificationAttributes {
    /**
     * Constructs a new <code>NotificationAttributes</code>.
     * Attributes for the notification including the path, recipients, and share data. 
     * @alias module:model/NotificationAttributes
     */
    constructor() { 
        
        NotificationAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NotificationAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationAttributes} obj Optional instance to populate.
     * @return {module:model/NotificationAttributes} The populated <code>NotificationAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationAttributes();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('readableDescription')) {
                obj['readableDescription'] = ApiClient.convertToType(data['readableDescription'], 'String');
            }
            if (data.hasOwnProperty('readableDescriptionWithoutPath')) {
                obj['readableDescriptionWithoutPath'] = ApiClient.convertToType(data['readableDescriptionWithoutPath'], 'String');
            }
            if (data.hasOwnProperty('recipients')) {
                obj['recipients'] = ApiClient.convertToType(data['recipients'], [NotificationRecipient]);
            }
            if (data.hasOwnProperty('sendEmail')) {
                obj['sendEmail'] = ApiClient.convertToType(data['sendEmail'], 'Boolean');
            }
            if (data.hasOwnProperty('shareId')) {
                obj['shareId'] = ApiClient.convertToType(data['shareId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('usernames')) {
                obj['usernames'] = ApiClient.convertToType(data['usernames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['readableDescription'] && !(typeof data['readableDescription'] === 'string' || data['readableDescription'] instanceof String)) {
            throw new Error("Expected the field `readableDescription` to be a primitive type in the JSON string but got " + data['readableDescription']);
        }
        // ensure the json data is a string
        if (data['readableDescriptionWithoutPath'] && !(typeof data['readableDescriptionWithoutPath'] === 'string' || data['readableDescriptionWithoutPath'] instanceof String)) {
            throw new Error("Expected the field `readableDescriptionWithoutPath` to be a primitive type in the JSON string but got " + data['readableDescriptionWithoutPath']);
        }
        if (data['recipients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recipients'])) {
                throw new Error("Expected the field `recipients` to be an array in the JSON data but got " + data['recipients']);
            }
            // validate the optional field `recipients` (array)
            for (const item of data['recipients']) {
                NotificationRecipient.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['shareId'] && !(typeof data['shareId'] === 'string' || data['shareId'] instanceof String)) {
            throw new Error("Expected the field `shareId` to be a primitive type in the JSON string but got " + data['shareId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['usernames'])) {
            throw new Error("Expected the field `usernames` to be an array in the JSON data but got " + data['usernames']);
        }

        return true;
    }


}



/**
 * Action that triggers notification.
 * @member {module:model/NotificationAttributes.ActionEnum} action
 */
NotificationAttributes.prototype['action'] = undefined;

/**
 * Timestamp of notifiction creation.
 * @member {Date} created
 */
NotificationAttributes.prototype['created'] = undefined;

/**
 * Custom message that will be sent to the notification recipients.
 * @member {String} message
 */
NotificationAttributes.prototype['message'] = undefined;

/**
 * Timestamp of notification modification.
 * @member {Date} modified
 */
NotificationAttributes.prototype['modified'] = undefined;

/**
 * Name of the item that the notification is set on.
 * @member {String} name
 */
NotificationAttributes.prototype['name'] = undefined;

/**
 * Path to the item that the notification is set on.
 * @member {String} path
 */
NotificationAttributes.prototype['path'] = undefined;

/**
 * Human readable description of the notification.
 * @member {String} readableDescription
 */
NotificationAttributes.prototype['readableDescription'] = undefined;

/**
 * Human readable description of the notification without item path.
 * @member {String} readableDescriptionWithoutPath
 */
NotificationAttributes.prototype['readableDescriptionWithoutPath'] = undefined;

/**
 * Notification recipients.
 * @member {Array.<module:model/NotificationRecipient>} recipients
 */
NotificationAttributes.prototype['recipients'] = undefined;

/**
 * Whether or not an email will send when the notification is triggered.
 * @member {Boolean} sendEmail
 */
NotificationAttributes.prototype['sendEmail'] = undefined;

/**
 * ID of the share that the notification belogns to.
 * @member {String} shareId
 */
NotificationAttributes.prototype['shareId'] = undefined;

/**
 * Type of the resource the notification is attached to. 
 * @member {module:model/NotificationAttributes.TypeEnum} type
 */
NotificationAttributes.prototype['type'] = undefined;

/**
 * ID of the user that the notification belongs to.
 * @member {String} userId
 */
NotificationAttributes.prototype['userId'] = undefined;

/**
 * Detail on which users can trigger the notification.
 * @member {Array.<String>} usernames
 */
NotificationAttributes.prototype['usernames'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
NotificationAttributes['ActionEnum'] = {

    /**
     * value: "upload"
     * @const
     */
    "upload": "upload",

    /**
     * value: "download"
     * @const
     */
    "download": "download",

    /**
     * value: "delete"
     * @const
     */
    "delete": "delete",

    /**
     * value: "all"
     * @const
     */
    "all": "all"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
NotificationAttributes['TypeEnum'] = {

    /**
     * value: "file"
     * @const
     */
    "file": "file",

    /**
     * value: "folder"
     * @const
     */
    "folder": "folder",

    /**
     * value: "shared_folder"
     * @const
     */
    "shared_folder": "shared_folder",

    /**
     * value: "send_receipt"
     * @const
     */
    "send_receipt": "send_receipt",

    /**
     * value: "share_receipt"
     * @const
     */
    "share_receipt": "share_receipt",

    /**
     * value: "file_drop"
     * @const
     */
    "file_drop": "file_drop"
};



export default NotificationAttributes;

