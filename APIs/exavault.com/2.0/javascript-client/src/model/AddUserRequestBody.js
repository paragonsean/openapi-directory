/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddUserRequestBodyPermissions from './AddUserRequestBodyPermissions';

/**
 * The AddUserRequestBody model module.
 * @module model/AddUserRequestBody
 * @version 2.0
 */
class AddUserRequestBody {
    /**
     * Constructs a new <code>AddUserRequestBody</code>.
     * @alias module:model/AddUserRequestBody
     * @param email {String} Email address for the user
     * @param homeResource {String} Resource identifier for the user's home folder. See details on [how to specify resources](#section/Identifying-Resources) above.  The user will be locked to this directory and unable to move 'up' in the account. If the folder does not exist in the account, it will be created when the user is created.   Users with the `role` **admin** should have their homeResource set to '/'
     * @param password {String} Password for the user
     * @param permissions {module:model/AddUserRequestBodyPermissions} 
     * @param role {module:model/AddUserRequestBody.RoleEnum} The type of user to create, either **user** or **admin**.
     * @param timeZone {String} Time zone, used for accurate time display within the application. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values. 
     * @param username {String} Username of the user to create. This should follow standard username conventions - spaces are not allowed, etc. We do allow email addresses as usernames.  **Note** Usernames must be unique across all ExaVault accounts.
     */
    constructor(email, homeResource, password, permissions, role, timeZone, username) { 
        
        AddUserRequestBody.initialize(this, email, homeResource, password, permissions, role, timeZone, username);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, homeResource, password, permissions, role, timeZone, username) { 
        obj['email'] = email;
        obj['homeResource'] = homeResource;
        obj['password'] = password;
        obj['permissions'] = permissions;
        obj['role'] = role;
        obj['timeZone'] = timeZone;
        obj['username'] = username;
    }

    /**
     * Constructs a <code>AddUserRequestBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddUserRequestBody} obj Optional instance to populate.
     * @return {module:model/AddUserRequestBody} The populated <code>AddUserRequestBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddUserRequestBody();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = ApiClient.convertToType(data['expiration'], 'String');
            }
            if (data.hasOwnProperty('homeResource')) {
                obj['homeResource'] = ApiClient.convertToType(data['homeResource'], 'String');
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('onboarding')) {
                obj['onboarding'] = ApiClient.convertToType(data['onboarding'], 'Boolean');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = AddUserRequestBodyPermissions.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('welcomeEmail')) {
                obj['welcomeEmail'] = ApiClient.convertToType(data['welcomeEmail'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddUserRequestBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddUserRequestBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddUserRequestBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['expiration'] && !(typeof data['expiration'] === 'string' || data['expiration'] instanceof String)) {
            throw new Error("Expected the field `expiration` to be a primitive type in the JSON string but got " + data['expiration']);
        }
        // ensure the json data is a string
        if (data['homeResource'] && !(typeof data['homeResource'] === 'string' || data['homeResource'] instanceof String)) {
            throw new Error("Expected the field `homeResource` to be a primitive type in the JSON string but got " + data['homeResource']);
        }
        // ensure the json data is a string
        if (data['nickname'] && !(typeof data['nickname'] === 'string' || data['nickname'] instanceof String)) {
            throw new Error("Expected the field `nickname` to be a primitive type in the JSON string but got " + data['nickname']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          AddUserRequestBodyPermissions.validateJSON(data['permissions']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

AddUserRequestBody.RequiredProperties = ["email", "homeResource", "password", "permissions", "role", "timeZone", "username"];

/**
 * Email address for the user
 * @member {String} email
 */
AddUserRequestBody.prototype['email'] = undefined;

/**
 * Optional timestamp when the user should expire, formatted in date-time.
 * @member {String} expiration
 */
AddUserRequestBody.prototype['expiration'] = undefined;

/**
 * Resource identifier for the user's home folder. See details on [how to specify resources](#section/Identifying-Resources) above.  The user will be locked to this directory and unable to move 'up' in the account. If the folder does not exist in the account, it will be created when the user is created.   Users with the `role` **admin** should have their homeResource set to '/'
 * @member {String} homeResource
 */
AddUserRequestBody.prototype['homeResource'] = undefined;

/**
 * If true, the user will not be able to log in
 * @member {Boolean} locked
 */
AddUserRequestBody.prototype['locked'] = undefined;

/**
 * An optional nickname (e.g. 'David from Sales').
 * @member {String} nickname
 */
AddUserRequestBody.prototype['nickname'] = undefined;

/**
 * Set this to **true** to enable extra help popups in the web file manager for this user.
 * @member {Boolean} onboarding
 */
AddUserRequestBody.prototype['onboarding'] = undefined;

/**
 * Password for the user
 * @member {String} password
 */
AddUserRequestBody.prototype['password'] = undefined;

/**
 * @member {module:model/AddUserRequestBodyPermissions} permissions
 */
AddUserRequestBody.prototype['permissions'] = undefined;

/**
 * The type of user to create, either **user** or **admin**.
 * @member {module:model/AddUserRequestBody.RoleEnum} role
 */
AddUserRequestBody.prototype['role'] = undefined;

/**
 * Time zone, used for accurate time display within the application. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values. 
 * @member {String} timeZone
 */
AddUserRequestBody.prototype['timeZone'] = undefined;

/**
 * Username of the user to create. This should follow standard username conventions - spaces are not allowed, etc. We do allow email addresses as usernames.  **Note** Usernames must be unique across all ExaVault accounts.
 * @member {String} username
 */
AddUserRequestBody.prototype['username'] = undefined;

/**
 * If **true**, send this new user a welcome email upon creation. The content of the welcome email can be configured with the [PATCH /accounts](#operation/updateAccount) method.
 * @member {Boolean} welcomeEmail
 */
AddUserRequestBody.prototype['welcomeEmail'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
AddUserRequestBody['RoleEnum'] = {

    /**
     * value: "user"
     * @const
     */
    "user": "user",

    /**
     * value: "admin"
     * @const
     */
    "admin": "admin"
};



export default AddUserRequestBody;

