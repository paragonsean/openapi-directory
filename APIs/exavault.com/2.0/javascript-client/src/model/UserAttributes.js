/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserPermissions from './UserPermissions';

/**
 * The UserAttributes model module.
 * @module model/UserAttributes
 * @version 2.0
 */
class UserAttributes {
    /**
     * Constructs a new <code>UserAttributes</code>.
     * Attributes of the user including expiration, home directory, and permissions. 
     * @alias module:model/UserAttributes
     * @param accountName {String} Name of the account this user belongs to.
     * @param created {Date} Timestamp of user creation.
     * @param modified {Date} Timestamp of user modification.
     * @param nickname {String} Nickname of the user.
     * @param onboarding {Boolean} Whether the onboarding help system is enabled for this user. `true` means that additional help popups are displayed in the web application for this user.
     * @param permissions {module:model/UserPermissions} 
     * @param role {module:model/UserAttributes.RoleEnum} User's access level
     * @param status {module:model/UserAttributes.StatusEnum} Indicates user activity status. `0` means the user is locked and cannot log in. `1` means the user is active and can log in.
     * @param timeZone {String} User's timezone. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values.
     * @param username {String} Username of the user.
     */
    constructor(accountName, created, modified, nickname, onboarding, permissions, role, status, timeZone, username) { 
        
        UserAttributes.initialize(this, accountName, created, modified, nickname, onboarding, permissions, role, status, timeZone, username);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountName, created, modified, nickname, onboarding, permissions, role, status, timeZone, username) { 
        obj['accountName'] = accountName;
        obj['created'] = created;
        obj['modified'] = modified;
        obj['nickname'] = nickname;
        obj['onboarding'] = onboarding;
        obj['permissions'] = permissions;
        obj['role'] = role;
        obj['status'] = status;
        obj['timeZone'] = timeZone;
        obj['username'] = username;
    }

    /**
     * Constructs a <code>UserAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserAttributes} obj Optional instance to populate.
     * @return {module:model/UserAttributes} The populated <code>UserAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserAttributes();

            if (data.hasOwnProperty('accessTimestamp')) {
                obj['accessTimestamp'] = ApiClient.convertToType(data['accessTimestamp'], 'String');
            }
            if (data.hasOwnProperty('accountName')) {
                obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = ApiClient.convertToType(data['expiration'], 'String');
            }
            if (data.hasOwnProperty('firstLogin')) {
                obj['firstLogin'] = ApiClient.convertToType(data['firstLogin'], 'Boolean');
            }
            if (data.hasOwnProperty('homePath')) {
                obj['homePath'] = ApiClient.convertToType(data['homePath'], 'String');
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Date');
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('onboarding')) {
                obj['onboarding'] = ApiClient.convertToType(data['onboarding'], 'Boolean');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = UserPermissions.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserAttributes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserAttributes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accessTimestamp'] && !(typeof data['accessTimestamp'] === 'string' || data['accessTimestamp'] instanceof String)) {
            throw new Error("Expected the field `accessTimestamp` to be a primitive type in the JSON string but got " + data['accessTimestamp']);
        }
        // ensure the json data is a string
        if (data['accountName'] && !(typeof data['accountName'] === 'string' || data['accountName'] instanceof String)) {
            throw new Error("Expected the field `accountName` to be a primitive type in the JSON string but got " + data['accountName']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['expiration'] && !(typeof data['expiration'] === 'string' || data['expiration'] instanceof String)) {
            throw new Error("Expected the field `expiration` to be a primitive type in the JSON string but got " + data['expiration']);
        }
        // ensure the json data is a string
        if (data['homePath'] && !(typeof data['homePath'] === 'string' || data['homePath'] instanceof String)) {
            throw new Error("Expected the field `homePath` to be a primitive type in the JSON string but got " + data['homePath']);
        }
        // ensure the json data is a string
        if (data['nickname'] && !(typeof data['nickname'] === 'string' || data['nickname'] instanceof String)) {
            throw new Error("Expected the field `nickname` to be a primitive type in the JSON string but got " + data['nickname']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          UserPermissions.validateJSON(data['permissions']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

UserAttributes.RequiredProperties = ["accountName", "created", "modified", "nickname", "onboarding", "permissions", "role", "status", "timeZone", "username"];

/**
 * Timestamp of most recent successful user login.
 * @member {String} accessTimestamp
 */
UserAttributes.prototype['accessTimestamp'] = undefined;

/**
 * Name of the account this user belongs to.
 * @member {String} accountName
 */
UserAttributes.prototype['accountName'] = undefined;

/**
 * Timestamp of user creation.
 * @member {Date} created
 */
UserAttributes.prototype['created'] = undefined;

/**
 * Email address of the user.
 * @member {String} email
 */
UserAttributes.prototype['email'] = undefined;

/**
 * Timestamp of user expiration.
 * @member {String} expiration
 */
UserAttributes.prototype['expiration'] = undefined;

/**
 * `true` if the user has logged into the system.
 * @member {Boolean} firstLogin
 */
UserAttributes.prototype['firstLogin'] = undefined;

/**
 * Path to the user's home folder.
 * @member {String} homePath
 */
UserAttributes.prototype['homePath'] = undefined;

/**
 * `true` if the user is locked and cannot log in.
 * @member {Boolean} locked
 */
UserAttributes.prototype['locked'] = undefined;

/**
 * Timestamp of user modification.
 * @member {Date} modified
 */
UserAttributes.prototype['modified'] = undefined;

/**
 * Nickname of the user.
 * @member {String} nickname
 */
UserAttributes.prototype['nickname'] = undefined;

/**
 * Whether the onboarding help system is enabled for this user. `true` means that additional help popups are displayed in the web application for this user.
 * @member {Boolean} onboarding
 */
UserAttributes.prototype['onboarding'] = undefined;

/**
 * @member {module:model/UserPermissions} permissions
 */
UserAttributes.prototype['permissions'] = undefined;

/**
 * User's access level
 * @member {module:model/UserAttributes.RoleEnum} role
 */
UserAttributes.prototype['role'] = undefined;

/**
 * Indicates user activity status. `0` means the user is locked and cannot log in. `1` means the user is active and can log in.
 * @member {module:model/UserAttributes.StatusEnum} status
 */
UserAttributes.prototype['status'] = undefined;

/**
 * User's timezone. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values.
 * @member {String} timeZone
 */
UserAttributes.prototype['timeZone'] = undefined;

/**
 * Username of the user.
 * @member {String} username
 */
UserAttributes.prototype['username'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
UserAttributes['RoleEnum'] = {

    /**
     * value: "user"
     * @const
     */
    "user": "user",

    /**
     * value: "admin"
     * @const
     */
    "admin": "admin",

    /**
     * value: "master"
     * @const
     */
    "master": "master"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {Number}
 * @readonly
 */
UserAttributes['StatusEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1
};



export default UserAttributes;

