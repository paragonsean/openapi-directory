/**
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccessMode from './AccessMode';
import AddShareRequestBodyRecipientsInner from './AddShareRequestBodyRecipientsInner';

/**
 * The UpdateShareRequestBody model module.
 * @module model/UpdateShareRequestBody
 * @version 2.0
 */
class UpdateShareRequestBody {
    /**
     * Constructs a new <code>UpdateShareRequestBody</code>.
     * @alias module:model/UpdateShareRequestBody
     */
    constructor() { 
        
        UpdateShareRequestBody.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateShareRequestBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateShareRequestBody} obj Optional instance to populate.
     * @return {module:model/UpdateShareRequestBody} The populated <code>UpdateShareRequestBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateShareRequestBody();

            if (data.hasOwnProperty('accessMode')) {
                obj['accessMode'] = AccessMode.constructFromObject(data['accessMode']);
            }
            if (data.hasOwnProperty('embed')) {
                obj['embed'] = ApiClient.convertToType(data['embed'], 'Boolean');
            }
            if (data.hasOwnProperty('expiration')) {
                obj['expiration'] = ApiClient.convertToType(data['expiration'], 'Date');
            }
            if (data.hasOwnProperty('fileDropCreateFolders')) {
                obj['fileDropCreateFolders'] = ApiClient.convertToType(data['fileDropCreateFolders'], 'Boolean');
            }
            if (data.hasOwnProperty('hasNotification')) {
                obj['hasNotification'] = ApiClient.convertToType(data['hasNotification'], 'Boolean');
            }
            if (data.hasOwnProperty('isPublic')) {
                obj['isPublic'] = ApiClient.convertToType(data['isPublic'], 'Boolean');
            }
            if (data.hasOwnProperty('messageBody')) {
                obj['messageBody'] = ApiClient.convertToType(data['messageBody'], 'String');
            }
            if (data.hasOwnProperty('messageSubject')) {
                obj['messageSubject'] = ApiClient.convertToType(data['messageSubject'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notificationEmails')) {
                obj['notificationEmails'] = ApiClient.convertToType(data['notificationEmails'], ['String']);
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('recipients')) {
                obj['recipients'] = ApiClient.convertToType(data['recipients'], [AddShareRequestBodyRecipientsInner]);
            }
            if (data.hasOwnProperty('requireEmail')) {
                obj['requireEmail'] = ApiClient.convertToType(data['requireEmail'], 'Boolean');
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], ['String']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateShareRequestBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateShareRequestBody</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accessMode`
        if (data['accessMode']) { // data not null
          AccessMode.validateJSON(data['accessMode']);
        }
        // ensure the json data is a string
        if (data['messageBody'] && !(typeof data['messageBody'] === 'string' || data['messageBody'] instanceof String)) {
            throw new Error("Expected the field `messageBody` to be a primitive type in the JSON string but got " + data['messageBody']);
        }
        // ensure the json data is a string
        if (data['messageSubject'] && !(typeof data['messageSubject'] === 'string' || data['messageSubject'] instanceof String)) {
            throw new Error("Expected the field `messageSubject` to be a primitive type in the JSON string but got " + data['messageSubject']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['notificationEmails'])) {
            throw new Error("Expected the field `notificationEmails` to be an array in the JSON data but got " + data['notificationEmails']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        if (data['recipients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recipients'])) {
                throw new Error("Expected the field `recipients` to be an array in the JSON data but got " + data['recipients']);
            }
            // validate the optional field `recipients` (array)
            for (const item of data['recipients']) {
                AddShareRequestBodyRecipientsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['resources'])) {
            throw new Error("Expected the field `resources` to be an array in the JSON data but got " + data['resources']);
        }

        return true;
    }


}



/**
 * @member {module:model/AccessMode} accessMode
 */
UpdateShareRequestBody.prototype['accessMode'] = undefined;

/**
 * Whether the share can be embedded in another web page.
 * @member {Boolean} embed
 */
UpdateShareRequestBody.prototype['embed'] = undefined;

/**
 * New expiration date and time for the share
 * @member {Date} expiration
 */
UpdateShareRequestBody.prototype['expiration'] = undefined;

/**
 * Whether uploads to a receive folder should be automatically placed into subfolders. See our [receive folder documentation](/docs/account/05-file-sharing/05-form-builder#advanced-form-settings)
 * @member {Boolean} fileDropCreateFolders
 */
UpdateShareRequestBody.prototype['fileDropCreateFolders'] = undefined;

/**
 * Whether delivery receipts should be sent for this share.
 * @member {Boolean} hasNotification
 */
UpdateShareRequestBody.prototype['hasNotification'] = undefined;

/**
 * Whether people can visit the share without following a link from an invitation email
 * @member {Boolean} isPublic
 */
UpdateShareRequestBody.prototype['isPublic'] = undefined;

/**
 * Message content to use for emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `subject`
 * @member {String} messageBody
 */
UpdateShareRequestBody.prototype['messageBody'] = undefined;

/**
 * Subject to use on emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `message`
 * @member {String} messageSubject
 */
UpdateShareRequestBody.prototype['messageSubject'] = undefined;

/**
 * Name of the share.
 * @member {String} name
 */
UpdateShareRequestBody.prototype['name'] = undefined;

/**
 * List of email addresses to send delivery receipts to. Ignored if `hasNotification` is false. 
 * @member {Array.<String>} notificationEmails
 */
UpdateShareRequestBody.prototype['notificationEmails'] = undefined;

/**
 * New password for the share. To leave the password unchanged, do not send this parameter.
 * @member {String} password
 */
UpdateShareRequestBody.prototype['password'] = undefined;

/**
 * People you want to invite to the share.   **Note**: unless you also set the `subject` and `message` for the new share, invitation emails will not be sent to these recipients.  **Note**: Recipients in this list will **REPLACE** the recipients already assigned to this share. 
 * @member {Array.<module:model/AddShareRequestBodyRecipientsInner>} recipients
 */
UpdateShareRequestBody.prototype['recipients'] = undefined;

/**
 * Whether visitors to the share will be required to enter their email in order to access the share.
 * @member {Boolean} requireEmail
 */
UpdateShareRequestBody.prototype['requireEmail'] = undefined;

/**
 * Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.  **shared_folder** and **receive** shares must have only one `resource`, which is a directory that does not have a current share attached.  **send** shares may have multiple `resource` parameters.   **NOTE**: Sending this parameter will **REPLACE** the existing resources with the resources included in this request.
 * @member {Array.<String>} resources
 */
UpdateShareRequestBody.prototype['resources'] = undefined;

/**
 * New status for the share. You can set an active share to inactive by setting the status to **0**
 * @member {Number} status
 */
UpdateShareRequestBody.prototype['status'] = undefined;






export default UpdateShareRequestBody;

