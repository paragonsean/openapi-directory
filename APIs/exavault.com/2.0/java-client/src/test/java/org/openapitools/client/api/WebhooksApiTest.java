/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddWebhookRequestBody;
import org.openapitools.client.model.EmptyResponse;
import org.openapitools.client.model.UpdateWebhookRequestBody;
import org.openapitools.client.model.WebhookCollectionResponse;
import org.openapitools.client.model.WebhookResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
@Disabled
public class WebhooksApiTest {

    private final WebhooksApi api = new WebhooksApi();

    /**
     * Add A New Webhook
     *
     * Create a new Webhook on your account. Creating a Webhook will require an endpoint URL, a path, what events should trigger a webhook, and what request version to use. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addWebhookTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        AddWebhookRequestBody addWebhookRequestBody = null;
        WebhookResponse response = api.addWebhook(evApiKey, evAccessToken, addWebhookRequestBody);
        // TODO: test validations
    }

    /**
     * Delete a webhook
     *
     * Deleted the specified webhook. This will not affect logs or any resources the webhook is connected to. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWebhookTest() throws ApiException {
        Integer id = null;
        String evApiKey = null;
        String evAccessToken = null;
        EmptyResponse response = api.deleteWebhook(id, evApiKey, evAccessToken);
        // TODO: test validations
    }

    /**
     * Get info for a webhook
     *
     * Returns the metadata for a specific webhook. Webhook IDs can be retrieve from GET /webhooks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookByIdTest() throws ApiException {
        Integer id = null;
        String evApiKey = null;
        String evAccessToken = null;
        String include = null;
        WebhookResponse response = api.getWebhookById(id, evApiKey, evAccessToken, include);
        // TODO: test validations
    }

    /**
     * Get Webhooks List
     *
     * Returns a list of Webhooks. By default, this will return metadata on all Webhooks within the account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWehooksListTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        String include = null;
        Integer offset = null;
        Integer limit = null;
        WebhookCollectionResponse response = api.getWehooksList(evApiKey, evAccessToken, include, offset, limit);
        // TODO: test validations
    }

    /**
     * Regenerate security token
     *
     * This endpoint will allow you to regenerate the security token for a webhook if you believe it’s been compromised in any way. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void regenerateWebhookTokenTest() throws ApiException {
        String id = null;
        String evApiKey = null;
        String evAccessToken = null;
        WebhookResponse response = api.regenerateWebhookToken(id, evApiKey, evAccessToken);
        // TODO: test validations
    }

    /**
     * Resend a webhook message
     *
     * This endpoint will allow you to resend a webhook that was previously sent. Resent webhooks will send exactly the same as the original webhook with the exception of the “sent” timestamp. Activity IDs can be retrieve from the webhook logs in your account or via GET /activity/webhooks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendWebhookActivityEntryTest() throws ApiException {
        String activityId = null;
        String evApiKey = null;
        String evAccessToken = null;
        EmptyResponse response = api.resendWebhookActivityEntry(activityId, evApiKey, evAccessToken);
        // TODO: test validations
    }

    /**
     * Update a webhook
     *
     * Update the specified webhook. Updated webhooks will take effect immediately and could impact active workflows. Please be certain the webhook is not currently in use prior to updating.   You only need to send the portions of the webhook configuration you wish to change, rather than the entire webhook object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWebhookTest() throws ApiException {
        Integer id = null;
        String evApiKey = null;
        String evAccessToken = null;
        UpdateWebhookRequestBody updateWebhookRequestBody = null;
        WebhookResponse response = api.updateWebhook(id, evApiKey, evAccessToken, updateWebhookRequestBody);
        // TODO: test validations
    }

}
