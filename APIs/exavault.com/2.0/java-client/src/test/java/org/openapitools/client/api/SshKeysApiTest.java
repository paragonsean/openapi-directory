/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddSSHKeyRequestBody;
import org.openapitools.client.model.SSHKeyCollectionResponse;
import org.openapitools.client.model.SSHKeyResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SshKeysApi
 */
@Disabled
public class SshKeysApiTest {

    private final SshKeysApi api = new SshKeysApi();

    /**
     * Create a new SSH Key
     *
     * Create a new SSH Key for a user. Provide the Public Key as formatted from the ssh-keygen command (openssh format or RFC-4716 format).  If you&#39;d prefer to let us generate your key automatically, you can log in to your account via the web portal and set up new keys via the SSH Keys page. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addSSHKeyTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        AddSSHKeyRequestBody addSSHKeyRequestBody = null;
        SSHKeyResponse response = api.addSSHKey(evApiKey, evAccessToken, addSSHKeyRequestBody);
        // TODO: test validations
    }

    /**
     * Delete an SSH Key
     *
     * Delete the specified SSH key. This will not delete or deactivate the user tied to the key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSSHKeyTest() throws ApiException {
        String id = null;
        String evApiKey = null;
        String evAccessToken = null;
        api.deleteSSHKey(id, evApiKey, evAccessToken);
        // TODO: test validations
    }

    /**
     * Get metadata for an SSH Key
     *
     * Return the information for a single SSH Key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSSHKeyTest() throws ApiException {
        String id = null;
        String evApiKey = null;
        String evAccessToken = null;
        SSHKeyResponse response = api.getSSHKey(id, evApiKey, evAccessToken);
        // TODO: test validations
    }

    /**
     * Get metadata for a list of SSH Keys
     *
     * Returns a list of SSH Keys within the account. Can be filtered for a single user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSSHKeysListTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        String userId = null;
        Integer limit = null;
        Integer offset = null;
        SSHKeyCollectionResponse response = api.getSSHKeysList(evApiKey, evAccessToken, userId, limit, offset);
        // TODO: test validations
    }

}
