/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddFolderRequestBody;
import org.openapitools.client.model.CompressFilesRequestBody;
import org.openapitools.client.model.CopyResourcesRequestBody;
import org.openapitools.client.model.DeleteResourcesRequestBody;
import org.openapitools.client.model.EmptyResponse;
import org.openapitools.client.model.ExtractFilesRequestBody;
import java.io.File;
import org.openapitools.client.model.MoveResourcesRequestBody;
import org.openapitools.client.model.PreviewFileResponse;
import org.openapitools.client.model.ResourceCollectionResponse;
import org.openapitools.client.model.ResourceCopyMove;
import org.openapitools.client.model.ResourceMultiResponse;
import org.openapitools.client.model.ResourceResponse;
import org.openapitools.client.model.UpdateResourceByIdRequestBody;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResourcesApi
 */
@Disabled
public class ResourcesApiTest {

    private final ResourcesApi api = new ResourcesApi();

    /**
     * Create a folder
     *
     * Create a new empty folder at the specified path. New files can be uploaded via the [/resources/upload](#operation/uploadFile) endpoint.  **Notes:** - Authenticated user should have modify permission. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFolderTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        AddFolderRequestBody addFolderRequestBody = null;
        ResourceResponse response = api.addFolder(evApiKey, evAccessToken, addFolderRequestBody);
        // TODO: test validations
    }

    /**
     * Compress resources
     *
     * Create a zip archive containing the files from given set of paths. Note that this can be a very slow operation if you have indicated many files should be included in the archive.  **Notes:** - Authenticated user should have modify permission. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void compressFilesTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        CompressFilesRequestBody compressFilesRequestBody = null;
        ResourceResponse response = api.compressFiles(evApiKey, evAccessToken, compressFilesRequestBody);
        // TODO: test validations
    }

    /**
     * Copy resources
     *
     * Copies a set of exisiting files/folders (provided by an array &#x60;resources&#x60;) to the requested &#x60;parentResource&#x60; in your account. In the &#x60;resources&#x60; array, you may specify paths pointing files/folders throughout the account, but everything will be copied to the  root of the &#x60;parentResource&#x60;.  **Notes:** - Authenticated user should have modify permission. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copyResourcesTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        CopyResourcesRequestBody copyResourcesRequestBody = null;
        ResourceCopyMove response = api.copyResources(evApiKey, evAccessToken, copyResourcesRequestBody);
        // TODO: test validations
    }

    /**
     * Delete a Resource
     *
     * Delete a single file or folder resource. Deleting a folder will also delete all of the contents.  **Notes:** - Authenticated user should have [delete permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions). - There is no way to un-delete a deleted resource. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourceByIdTest() throws ApiException {
        Long id = null;
        String evApiKey = null;
        String evAccessToken = null;
        EmptyResponse response = api.deleteResourceById(id, evApiKey, evAccessToken);
        // TODO: test validations
    }

    /**
     * Delete Resources
     *
     * Delete multiple file or folder resourcess. Deleting a folder resource will also delete any resources in that folder.  **Notes:** - Authenticated user should have [delete permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions). - It is not possible to un-delete a deleted resource. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourcesTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        DeleteResourcesRequestBody deleteResourcesRequestBody = null;
        EmptyResponse response = api.deleteResources(evApiKey, evAccessToken, deleteResourcesRequestBody);
        // TODO: test validations
    }

    /**
     * Download a file
     *
     * Downloads a file from the server. Whenever more than one file is being downloaded, the file are first zipped into  a single file before the download starts, and the resulting zip file is named to match the &#x60;downloadArchiveName&#x60; parameter.  **NOTE**: Downloading many files at once  may result in a long delay before the API will return a response. You may need to override default timeout values in your API client, or download files individually.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        List<String> resources = null;
        String downloadArchiveName = null;
        File response = api.download(evApiKey, evAccessToken, resources, downloadArchiveName);
        // TODO: test validations
    }

    /**
     * Extract resources
     *
     * Extract the contents of a zip archive to a specified directory. Note that this can be a very slow operation.  **Notes:** - You must have  [modify permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to do this. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extractFilesTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        ExtractFilesRequestBody extractFilesRequestBody = null;
        ResourceCollectionResponse response = api.extractFiles(evApiKey, evAccessToken, extractFilesRequestBody);
        // TODO: test validations
    }

    /**
     * Preview a file
     *
     * Returns a resized image of the specified document for supported file types.  Image data returned is encoded in base64 format and can be viewed using the &#x60;&lt;img&gt;&#x60; element.   &#x60;&#x60;&#x60;&lt;img src&#x3D;&#39;data:image/jpeg;base64&#39; + meta.image/&gt;&#x60;&#x60;&#x60;  **Notes:** - Supported files types are &#x60;&#39;jpg&#39;&#x60;, &#x60;&#39;jpeg&#39;&#x60;, &#x60;&#39;gif&#39;&#x60;, &#x60;&#39;png&#39;&#x60;, &#x60;&#39;bmp&#39;&#x60;, &#x60;&#39;pdf&#39;&#x60;, &#x60;&#39;psd&#39;&#x60;, &#x60;&#39;doc&#39;&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPreviewImageTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        String resource = null;
        String size = null;
        Integer width = null;
        Integer height = null;
        Integer page = null;
        PreviewFileResponse response = api.getPreviewImage(evApiKey, evAccessToken, resource, size, width, height, page);
        // TODO: test validations
    }

    /**
     * Get Resource Properties
     *
     * Returns details for specified file/folder id or hash, including upload date, size and type. For the full list of returned properties, see the response syntax, below.  **Notes:** - Authenticated user should have list permission. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourceInfoTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        String resource = null;
        String include = null;
        ResourceResponse response = api.getResourceInfo(evApiKey, evAccessToken, resource, include);
        // TODO: test validations
    }

    /**
     * Get resource metadata
     *
     * Returns metadata for specified file/folder path, including upload date, size and type. For the full list of returned properties, see the response syntax, below.  **Notes:** - Authenticated user should have list permission. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourceInfoByIdTest() throws ApiException {
        Long id = null;
        String evApiKey = null;
        String evAccessToken = null;
        String include = null;
        ResourceResponse response = api.getResourceInfoById(id, evApiKey, evAccessToken, include);
        // TODO: test validations
    }

    /**
     * List contents of folder
     *
     * Returns a list of files/folders for the parent resource ID.   You can use this API call to get information about all files and folders at a specified path. By default, the API returns basic metadata on each file/folder. An optional &#x60;include&#x60; parameter forces the return of additional metadata. As with all API calls, the path should be the full path relative to the user&#39;s home directory (e.g. **_/myfiles/some_folder**).  **Notes:** - Authenticated user should have list permission. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResourceContentsTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        Long id = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        String type = null;
        String include = null;
        ResourceCollectionResponse response = api.listResourceContents(evApiKey, evAccessToken, id, sort, offset, limit, type, include);
        // TODO: test validations
    }

    /**
     * Get a list of all resources
     *
     * Returns a list of files and folders in the account. Use the &#x60;resource&#x60; query parameter to indicate the folder you wish to search in (which can be /).   **Searching for Files and Folders**  Using the &#x60;name&#x60; parameter triggers search mode, which will search the entire directory structure under the provided &#x60;resource&#x60; for files or folders with names matching the provided &#x60;name&#x60;. This supports wildcard matching such as:  - \\*Report\\* would find any files or folders with \&quot;Report\&quot; in the name. - Data\\_202?-09-30.xlsx would match items such as \&quot;Data\\_2020-09-30.xlsx\&quot;, \&quot;DATA\\_2021-09-30.xlsx\&quot;, \&quot;data\\_2022-09-30.xlsx\&quot; etc. - sales\\* would find any files or folders starting with the word \&quot;Sales\&quot; - \\*.csv would locate any files ending in \&quot;.csv\&quot; - \\* matches everything within the directory tree starting at your given &#x60;resource&#x60;  The search is not case-sensitive. Searching for Clients\\* or clients\\* or CLIENTS\\*, etc. will provide identical results  If you are using the &#x60;name&#x60; parameter to run a search, the &#x60;type&#x60; parameter will be ignored by the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResourcesTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        String resource = null;
        String sort = null;
        Integer offset = null;
        Integer limit = null;
        String type = null;
        String name = null;
        String include = null;
        ResourceCollectionResponse response = api.listResources(evApiKey, evAccessToken, resource, sort, offset, limit, type, name, include);
        // TODO: test validations
    }

    /**
     * Move resources
     *
     * Moves a set of exisiting files/folders (provided by an array &#x60;resources&#x60;) to the requested &#x60;parentResource&#x60; in your account. In the &#x60;resources&#x60; array, you may specify paths pointing files/folders throughout the account, but everything will be moved to the root of the &#x60;parentResource&#x60;.  **Notes:** - Authenticated user should have modify permission. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveResourcesTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        MoveResourcesRequestBody moveResourcesRequestBody = null;
        ResourceCopyMove response = api.moveResources(evApiKey, evAccessToken, moveResourcesRequestBody);
        // TODO: test validations
    }

    /**
     * Rename a resource.
     *
     * Update the specified file or folder resource record&#39;s \&quot;name\&quot; parameter. The resource is identified by the numeric resource ID that is passed in as the last segment of the URI. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResourceByIdTest() throws ApiException {
        Long id = null;
        String evAccessToken = null;
        String evApiKey = null;
        UpdateResourceByIdRequestBody updateResourceByIdRequestBody = null;
        ResourceResponse response = api.updateResourceById(id, evAccessToken, evApiKey, updateResourceByIdRequestBody);
        // TODO: test validations
    }

    /**
     * Upload a file
     *
     * Uploads a file to a specified path, with optional support for resuming a partially uploaded existing file. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException {
        String evApiKey = null;
        String evAccessToken = null;
        String path = null;
        Integer fileSize = null;
        Integer offsetBytes = null;
        Boolean resume = null;
        Boolean allowOverwrite = null;
        File _file = null;
        ResourceResponse response = api.uploadFile(evApiKey, evAccessToken, path, fileSize, offsetBytes, resume, allowOverwrite, _file);
        // TODO: test validations
    }

}
