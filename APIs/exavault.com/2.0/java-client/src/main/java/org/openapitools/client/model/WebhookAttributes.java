/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.WebhookTriggers;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebhookAttributes {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_ENDPOINT_URL = "endpointUrl";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_URL)
  private URI endpointUrl;

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private Boolean failed;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  /**
   * The version of webhook request to send to the endpoint URL
   */
  @JsonAdapter(ResponseVersionEnum.Adapter.class)
  public enum ResponseVersionEnum {
    V1("v1"),
    
    V2("v2");

    private String value;

    ResponseVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponseVersionEnum fromValue(String value) {
      for (ResponseVersionEnum b : ResponseVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResponseVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponseVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponseVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResponseVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESPONSE_VERSION = "responseVersion";
  @SerializedName(SERIALIZED_NAME_RESPONSE_VERSION)
  private ResponseVersionEnum responseVersion;

  public static final String SERIALIZED_NAME_TRIGGERS = "triggers";
  @SerializedName(SERIALIZED_NAME_TRIGGERS)
  private WebhookTriggers triggers;

  public static final String SERIALIZED_NAME_VERIFICATION_TOKEN = "verificationToken";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_TOKEN)
  private String verificationToken;

  public WebhookAttributes() {
  }

  public WebhookAttributes created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Timestamp when webhook configuration was added to system.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public WebhookAttributes endpointUrl(URI endpointUrl) {
    this.endpointUrl = endpointUrl;
    return this;
  }

  /**
   * The endpoint is where the webhook request will be sent.
   * @return endpointUrl
   */
  @javax.annotation.Nullable
  public URI getEndpointUrl() {
    return endpointUrl;
  }

  public void setEndpointUrl(URI endpointUrl) {
    this.endpointUrl = endpointUrl;
  }


  public WebhookAttributes failed(Boolean failed) {
    this.failed = failed;
    return this;
  }

  /**
   * Whether webhook has been disabled for too many consecutive failures
   * @return failed
   */
  @javax.annotation.Nullable
  public Boolean getFailed() {
    return failed;
  }

  public void setFailed(Boolean failed) {
    this.failed = failed;
  }


  public WebhookAttributes modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

  /**
   * Timestamp when webhook configuration was last modified
   * @return modified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public WebhookAttributes responseVersion(ResponseVersionEnum responseVersion) {
    this.responseVersion = responseVersion;
    return this;
  }

  /**
   * The version of webhook request to send to the endpoint URL
   * @return responseVersion
   */
  @javax.annotation.Nullable
  public ResponseVersionEnum getResponseVersion() {
    return responseVersion;
  }

  public void setResponseVersion(ResponseVersionEnum responseVersion) {
    this.responseVersion = responseVersion;
  }


  public WebhookAttributes triggers(WebhookTriggers triggers) {
    this.triggers = triggers;
    return this;
  }

  /**
   * Get triggers
   * @return triggers
   */
  @javax.annotation.Nullable
  public WebhookTriggers getTriggers() {
    return triggers;
  }

  public void setTriggers(WebhookTriggers triggers) {
    this.triggers = triggers;
  }


  public WebhookAttributes verificationToken(String verificationToken) {
    this.verificationToken = verificationToken;
    return this;
  }

  /**
   * Token for verifying sender is ExaVault
   * @return verificationToken
   */
  @javax.annotation.Nullable
  public String getVerificationToken() {
    return verificationToken;
  }

  public void setVerificationToken(String verificationToken) {
    this.verificationToken = verificationToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookAttributes webhookAttributes = (WebhookAttributes) o;
    return Objects.equals(this.created, webhookAttributes.created) &&
        Objects.equals(this.endpointUrl, webhookAttributes.endpointUrl) &&
        Objects.equals(this.failed, webhookAttributes.failed) &&
        Objects.equals(this.modified, webhookAttributes.modified) &&
        Objects.equals(this.responseVersion, webhookAttributes.responseVersion) &&
        Objects.equals(this.triggers, webhookAttributes.triggers) &&
        Objects.equals(this.verificationToken, webhookAttributes.verificationToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, endpointUrl, failed, modified, responseVersion, triggers, verificationToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookAttributes {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    endpointUrl: ").append(toIndentedString(endpointUrl)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    responseVersion: ").append(toIndentedString(responseVersion)).append("\n");
    sb.append("    triggers: ").append(toIndentedString(triggers)).append("\n");
    sb.append("    verificationToken: ").append(toIndentedString(verificationToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("endpointUrl");
    openapiFields.add("failed");
    openapiFields.add("modified");
    openapiFields.add("responseVersion");
    openapiFields.add("triggers");
    openapiFields.add("verificationToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookAttributes is not found in the empty JSON string", WebhookAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endpointUrl") != null && !jsonObj.get("endpointUrl").isJsonNull()) && !jsonObj.get("endpointUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointUrl").toString()));
      }
      if ((jsonObj.get("responseVersion") != null && !jsonObj.get("responseVersion").isJsonNull()) && !jsonObj.get("responseVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseVersion").toString()));
      }
      // validate the optional field `responseVersion`
      if (jsonObj.get("responseVersion") != null && !jsonObj.get("responseVersion").isJsonNull()) {
        ResponseVersionEnum.validateJsonElement(jsonObj.get("responseVersion"));
      }
      // validate the optional field `triggers`
      if (jsonObj.get("triggers") != null && !jsonObj.get("triggers").isJsonNull()) {
        WebhookTriggers.validateJsonElement(jsonObj.get("triggers"));
      }
      if ((jsonObj.get("verificationToken") != null && !jsonObj.get("verificationToken").isJsonNull()) && !jsonObj.get("verificationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookAttributes>() {
           @Override
           public void write(JsonWriter out, WebhookAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookAttributes
   * @throws IOException if the JSON string is invalid with respect to WebhookAttributes
   */
  public static WebhookAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookAttributes.class);
  }

  /**
   * Convert an instance of WebhookAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

