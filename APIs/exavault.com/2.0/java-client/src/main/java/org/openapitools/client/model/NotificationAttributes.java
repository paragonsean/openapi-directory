/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NotificationRecipient;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Attributes for the notification including the path, recipients, and share data. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationAttributes {
  /**
   * Action that triggers notification.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    UPLOAD("upload"),
    
    DOWNLOAD("download"),
    
    DELETE("delete"),
    
    ALL("all");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_READABLE_DESCRIPTION = "readableDescription";
  @SerializedName(SERIALIZED_NAME_READABLE_DESCRIPTION)
  private String readableDescription;

  public static final String SERIALIZED_NAME_READABLE_DESCRIPTION_WITHOUT_PATH = "readableDescriptionWithoutPath";
  @SerializedName(SERIALIZED_NAME_READABLE_DESCRIPTION_WITHOUT_PATH)
  private String readableDescriptionWithoutPath;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<NotificationRecipient> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEND_EMAIL = "sendEmail";
  @SerializedName(SERIALIZED_NAME_SEND_EMAIL)
  private Boolean sendEmail;

  public static final String SERIALIZED_NAME_SHARE_ID = "shareId";
  @SerializedName(SERIALIZED_NAME_SHARE_ID)
  private String shareId;

  /**
   * Type of the resource the notification is attached to. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FILE("file"),
    
    FOLDER("folder"),
    
    SHARED_FOLDER("shared_folder"),
    
    SEND_RECEIPT("send_receipt"),
    
    SHARE_RECEIPT("share_receipt"),
    
    FILE_DROP("file_drop");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_USERNAMES = "usernames";
  @SerializedName(SERIALIZED_NAME_USERNAMES)
  private List<String> usernames = new ArrayList<>();

  public NotificationAttributes() {
  }

  public NotificationAttributes action(ActionEnum action) {
    this.action = action;
    return this;
  }

  /**
   * Action that triggers notification.
   * @return action
   */
  @javax.annotation.Nullable
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public NotificationAttributes created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Timestamp of notifiction creation.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public NotificationAttributes message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Custom message that will be sent to the notification recipients.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public NotificationAttributes modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

  /**
   * Timestamp of notification modification.
   * @return modified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public NotificationAttributes name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the item that the notification is set on.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NotificationAttributes path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Path to the item that the notification is set on.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public NotificationAttributes readableDescription(String readableDescription) {
    this.readableDescription = readableDescription;
    return this;
  }

  /**
   * Human readable description of the notification.
   * @return readableDescription
   */
  @javax.annotation.Nullable
  public String getReadableDescription() {
    return readableDescription;
  }

  public void setReadableDescription(String readableDescription) {
    this.readableDescription = readableDescription;
  }


  public NotificationAttributes readableDescriptionWithoutPath(String readableDescriptionWithoutPath) {
    this.readableDescriptionWithoutPath = readableDescriptionWithoutPath;
    return this;
  }

  /**
   * Human readable description of the notification without item path.
   * @return readableDescriptionWithoutPath
   */
  @javax.annotation.Nullable
  public String getReadableDescriptionWithoutPath() {
    return readableDescriptionWithoutPath;
  }

  public void setReadableDescriptionWithoutPath(String readableDescriptionWithoutPath) {
    this.readableDescriptionWithoutPath = readableDescriptionWithoutPath;
  }


  public NotificationAttributes recipients(List<NotificationRecipient> recipients) {
    this.recipients = recipients;
    return this;
  }

  public NotificationAttributes addRecipientsItem(NotificationRecipient recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

  /**
   * Notification recipients.
   * @return recipients
   */
  @javax.annotation.Nullable
  public List<NotificationRecipient> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<NotificationRecipient> recipients) {
    this.recipients = recipients;
  }


  public NotificationAttributes sendEmail(Boolean sendEmail) {
    this.sendEmail = sendEmail;
    return this;
  }

  /**
   * Whether or not an email will send when the notification is triggered.
   * @return sendEmail
   */
  @javax.annotation.Nullable
  public Boolean getSendEmail() {
    return sendEmail;
  }

  public void setSendEmail(Boolean sendEmail) {
    this.sendEmail = sendEmail;
  }


  public NotificationAttributes shareId(String shareId) {
    this.shareId = shareId;
    return this;
  }

  /**
   * ID of the share that the notification belogns to.
   * @return shareId
   */
  @javax.annotation.Nullable
  public String getShareId() {
    return shareId;
  }

  public void setShareId(String shareId) {
    this.shareId = shareId;
  }


  public NotificationAttributes type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the resource the notification is attached to. 
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public NotificationAttributes userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * ID of the user that the notification belongs to.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public NotificationAttributes usernames(List<String> usernames) {
    this.usernames = usernames;
    return this;
  }

  public NotificationAttributes addUsernamesItem(String usernamesItem) {
    if (this.usernames == null) {
      this.usernames = new ArrayList<>();
    }
    this.usernames.add(usernamesItem);
    return this;
  }

  /**
   * Detail on which users can trigger the notification.
   * @return usernames
   */
  @javax.annotation.Nullable
  public List<String> getUsernames() {
    return usernames;
  }

  public void setUsernames(List<String> usernames) {
    this.usernames = usernames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationAttributes notificationAttributes = (NotificationAttributes) o;
    return Objects.equals(this.action, notificationAttributes.action) &&
        Objects.equals(this.created, notificationAttributes.created) &&
        Objects.equals(this.message, notificationAttributes.message) &&
        Objects.equals(this.modified, notificationAttributes.modified) &&
        Objects.equals(this.name, notificationAttributes.name) &&
        Objects.equals(this.path, notificationAttributes.path) &&
        Objects.equals(this.readableDescription, notificationAttributes.readableDescription) &&
        Objects.equals(this.readableDescriptionWithoutPath, notificationAttributes.readableDescriptionWithoutPath) &&
        Objects.equals(this.recipients, notificationAttributes.recipients) &&
        Objects.equals(this.sendEmail, notificationAttributes.sendEmail) &&
        Objects.equals(this.shareId, notificationAttributes.shareId) &&
        Objects.equals(this.type, notificationAttributes.type) &&
        Objects.equals(this.userId, notificationAttributes.userId) &&
        Objects.equals(this.usernames, notificationAttributes.usernames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, created, message, modified, name, path, readableDescription, readableDescriptionWithoutPath, recipients, sendEmail, shareId, type, userId, usernames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationAttributes {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    readableDescription: ").append(toIndentedString(readableDescription)).append("\n");
    sb.append("    readableDescriptionWithoutPath: ").append(toIndentedString(readableDescriptionWithoutPath)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    sendEmail: ").append(toIndentedString(sendEmail)).append("\n");
    sb.append("    shareId: ").append(toIndentedString(shareId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    usernames: ").append(toIndentedString(usernames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("created");
    openapiFields.add("message");
    openapiFields.add("modified");
    openapiFields.add("name");
    openapiFields.add("path");
    openapiFields.add("readableDescription");
    openapiFields.add("readableDescriptionWithoutPath");
    openapiFields.add("recipients");
    openapiFields.add("sendEmail");
    openapiFields.add("shareId");
    openapiFields.add("type");
    openapiFields.add("userId");
    openapiFields.add("usernames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationAttributes is not found in the empty JSON string", NotificationAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        ActionEnum.validateJsonElement(jsonObj.get("action"));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("readableDescription") != null && !jsonObj.get("readableDescription").isJsonNull()) && !jsonObj.get("readableDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readableDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readableDescription").toString()));
      }
      if ((jsonObj.get("readableDescriptionWithoutPath") != null && !jsonObj.get("readableDescriptionWithoutPath").isJsonNull()) && !jsonObj.get("readableDescriptionWithoutPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readableDescriptionWithoutPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readableDescriptionWithoutPath").toString()));
      }
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
        if (jsonArrayrecipients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recipients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
          }

          // validate the optional field `recipients` (array)
          for (int i = 0; i < jsonArrayrecipients.size(); i++) {
            NotificationRecipient.validateJsonElement(jsonArrayrecipients.get(i));
          };
        }
      }
      if ((jsonObj.get("shareId") != null && !jsonObj.get("shareId").isJsonNull()) && !jsonObj.get("shareId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("usernames") != null && !jsonObj.get("usernames").isJsonNull() && !jsonObj.get("usernames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `usernames` to be an array in the JSON string but got `%s`", jsonObj.get("usernames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationAttributes>() {
           @Override
           public void write(JsonWriter out, NotificationAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationAttributes
   * @throws IOException if the JSON string is invalid with respect to NotificationAttributes
   */
  public static NotificationAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationAttributes.class);
  }

  /**
   * Convert an instance of NotificationAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

