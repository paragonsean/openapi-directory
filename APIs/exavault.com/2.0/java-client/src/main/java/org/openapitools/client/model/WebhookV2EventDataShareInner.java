/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccessMode;
import org.openapitools.client.model.ShareMessage;
import org.openapitools.client.model.ShareRecipient;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookV2EventDataShareInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebhookV2EventDataShareInner {
  public static final String SERIALIZED_NAME_ACCESS_DESCRIPTION = "accessDescription";
  @SerializedName(SERIALIZED_NAME_ACCESS_DESCRIPTION)
  private String accessDescription;

  public static final String SERIALIZED_NAME_ACCESS_MODE = "accessMode";
  @SerializedName(SERIALIZED_NAME_ACCESS_MODE)
  private AccessMode accessMode;

  public static final String SERIALIZED_NAME_ASSETS = "assets";
  @SerializedName(SERIALIZED_NAME_ASSETS)
  private List<String> assets = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_EMBED = "embed";
  @SerializedName(SERIALIZED_NAME_EMBED)
  private Boolean embed;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private String expiration;

  public static final String SERIALIZED_NAME_EXPIRED = "expired";
  @SerializedName(SERIALIZED_NAME_EXPIRED)
  private Boolean expired;

  public static final String SERIALIZED_NAME_FILE_DROP_CREATE_FOLDERS = "fileDropCreateFolders";
  @SerializedName(SERIALIZED_NAME_FILE_DROP_CREATE_FOLDERS)
  private Boolean fileDropCreateFolders;

  public static final String SERIALIZED_NAME_FORM_ID = "formId";
  @SerializedName(SERIALIZED_NAME_FORM_ID)
  private Integer formId;

  public static final String SERIALIZED_NAME_HAS_NOTIFICATION = "hasNotification";
  @SerializedName(SERIALIZED_NAME_HAS_NOTIFICATION)
  private Boolean hasNotification;

  public static final String SERIALIZED_NAME_HAS_PASSWORD = "hasPassword";
  @SerializedName(SERIALIZED_NAME_HAS_PASSWORD)
  private Boolean hasPassword;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private String hash;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INHERITED = "inherited";
  @SerializedName(SERIALIZED_NAME_INHERITED)
  private Boolean inherited;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "isPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<ShareMessage> messages = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER_HASH = "ownerHash";
  @SerializedName(SERIALIZED_NAME_OWNER_HASH)
  private String ownerHash;

  public static final String SERIALIZED_NAME_PATHS = "paths";
  @SerializedName(SERIALIZED_NAME_PATHS)
  private List<String> paths = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<ShareRecipient> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRE_EMAIL = "requireEmail";
  @SerializedName(SERIALIZED_NAME_REQUIRE_EMAIL)
  private Boolean requireEmail;

  public static final String SERIALIZED_NAME_RESENT = "resent";
  @SerializedName(SERIALIZED_NAME_RESENT)
  private Boolean resent;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_TRACKING_STATUS = "trackingStatus";
  @SerializedName(SERIALIZED_NAME_TRACKING_STATUS)
  private String trackingStatus;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public WebhookV2EventDataShareInner() {
  }

  public WebhookV2EventDataShareInner accessDescription(String accessDescription) {
    this.accessDescription = accessDescription;
    return this;
  }

  /**
   * Human readable description of what visitors are allowed to do with the receive folder
   * @return accessDescription
   */
  @javax.annotation.Nullable
  public String getAccessDescription() {
    return accessDescription;
  }

  public void setAccessDescription(String accessDescription) {
    this.accessDescription = accessDescription;
  }


  public WebhookV2EventDataShareInner accessMode(AccessMode accessMode) {
    this.accessMode = accessMode;
    return this;
  }

  /**
   * Get accessMode
   * @return accessMode
   */
  @javax.annotation.Nullable
  public AccessMode getAccessMode() {
    return accessMode;
  }

  public void setAccessMode(AccessMode accessMode) {
    this.accessMode = accessMode;
  }


  public WebhookV2EventDataShareInner assets(List<String> assets) {
    this.assets = assets;
    return this;
  }

  public WebhookV2EventDataShareInner addAssetsItem(String assetsItem) {
    if (this.assets == null) {
      this.assets = new ArrayList<>();
    }
    this.assets.add(assetsItem);
    return this;
  }

  /**
   * List of items included in the share
   * @return assets
   */
  @javax.annotation.Nullable
  public List<String> getAssets() {
    return assets;
  }

  public void setAssets(List<String> assets) {
    this.assets = assets;
  }


  public WebhookV2EventDataShareInner created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Date and ti
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public WebhookV2EventDataShareInner embed(Boolean embed) {
    this.embed = embed;
    return this;
  }

  /**
   * Whether the receive folder can be embedded within a web page
   * @return embed
   */
  @javax.annotation.Nullable
  public Boolean getEmbed() {
    return embed;
  }

  public void setEmbed(Boolean embed) {
    this.embed = embed;
  }


  public WebhookV2EventDataShareInner expiration(String expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * Date and time when the receive folder will no longer be 
   * @return expiration
   */
  @javax.annotation.Nullable
  public String getExpiration() {
    return expiration;
  }

  public void setExpiration(String expiration) {
    this.expiration = expiration;
  }


  public WebhookV2EventDataShareInner expired(Boolean expired) {
    this.expired = expired;
    return this;
  }

  /**
   * Whether access to the receive folder has expired
   * @return expired
   */
  @javax.annotation.Nullable
  public Boolean getExpired() {
    return expired;
  }

  public void setExpired(Boolean expired) {
    this.expired = expired;
  }


  public WebhookV2EventDataShareInner fileDropCreateFolders(Boolean fileDropCreateFolders) {
    this.fileDropCreateFolders = fileDropCreateFolders;
    return this;
  }

  /**
   * Whether files should be automatically placed in subfolders of the receive folder
   * @return fileDropCreateFolders
   */
  @javax.annotation.Nullable
  public Boolean getFileDropCreateFolders() {
    return fileDropCreateFolders;
  }

  public void setFileDropCreateFolders(Boolean fileDropCreateFolders) {
    this.fileDropCreateFolders = fileDropCreateFolders;
  }


  public WebhookV2EventDataShareInner formId(Integer formId) {
    this.formId = formId;
    return this;
  }

  /**
   * ID of the associated form
   * @return formId
   */
  @javax.annotation.Nullable
  public Integer getFormId() {
    return formId;
  }

  public void setFormId(Integer formId) {
    this.formId = formId;
  }


  public WebhookV2EventDataShareInner hasNotification(Boolean hasNotification) {
    this.hasNotification = hasNotification;
    return this;
  }

  /**
   * Whether delivery receipts are enabled for this share
   * @return hasNotification
   */
  @javax.annotation.Nullable
  public Boolean getHasNotification() {
    return hasNotification;
  }

  public void setHasNotification(Boolean hasNotification) {
    this.hasNotification = hasNotification;
  }


  public WebhookV2EventDataShareInner hasPassword(Boolean hasPassword) {
    this.hasPassword = hasPassword;
    return this;
  }

  /**
   * Whether the receive folder requires visitors to enter a password
   * @return hasPassword
   */
  @javax.annotation.Nullable
  public Boolean getHasPassword() {
    return hasPassword;
  }

  public void setHasPassword(Boolean hasPassword) {
    this.hasPassword = hasPassword;
  }


  public WebhookV2EventDataShareInner hash(String hash) {
    this.hash = hash;
    return this;
  }

  /**
   * Hash value of the receive
   * @return hash
   */
  @javax.annotation.Nullable
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }


  public WebhookV2EventDataShareInner id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Unique ID of associated receive folder
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public WebhookV2EventDataShareInner inherited(Boolean inherited) {
    this.inherited = inherited;
    return this;
  }

  /**
   * Whether this share is inherited from a parent fol
   * @return inherited
   */
  @javax.annotation.Nullable
  public Boolean getInherited() {
    return inherited;
  }

  public void setInherited(Boolean inherited) {
    this.inherited = inherited;
  }


  public WebhookV2EventDataShareInner isPublic(Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

  /**
   * Whether visitors can acccess the receive folder without an invitation link
   * @return isPublic
   */
  @javax.annotation.Nullable
  public Boolean getIsPublic() {
    return isPublic;
  }

  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public WebhookV2EventDataShareInner messages(List<ShareMessage> messages) {
    this.messages = messages;
    return this;
  }

  public WebhookV2EventDataShareInner addMessagesItem(ShareMessage messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * Invitation messages sent for receive folder
   * @return messages
   */
  @javax.annotation.Nullable
  public List<ShareMessage> getMessages() {
    return messages;
  }

  public void setMessages(List<ShareMessage> messages) {
    this.messages = messages;
  }


  public WebhookV2EventDataShareInner modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

  /**
   * Date and time when the share was last changed
   * @return modified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public WebhookV2EventDataShareInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of receiv
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WebhookV2EventDataShareInner ownerHash(String ownerHash) {
    this.ownerHash = ownerHash;
    return this;
  }

  /**
   * Hash value of the user who \&quot;owns\&quot; the receive fo
   * @return ownerHash
   */
  @javax.annotation.Nullable
  public String getOwnerHash() {
    return ownerHash;
  }

  public void setOwnerHash(String ownerHash) {
    this.ownerHash = ownerHash;
  }


  public WebhookV2EventDataShareInner paths(List<String> paths) {
    this.paths = paths;
    return this;
  }

  public WebhookV2EventDataShareInner addPathsItem(String pathsItem) {
    if (this.paths == null) {
      this.paths = new ArrayList<>();
    }
    this.paths.add(pathsItem);
    return this;
  }

  /**
   * List
   * @return paths
   */
  @javax.annotation.Nullable
  public List<String> getPaths() {
    return paths;
  }

  public void setPaths(List<String> paths) {
    this.paths = paths;
  }


  public WebhookV2EventDataShareInner recipients(List<ShareRecipient> recipients) {
    this.recipients = recipients;
    return this;
  }

  public WebhookV2EventDataShareInner addRecipientsItem(ShareRecipient recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

  /**
   * List of recipients invited  to the receive folder
   * @return recipients
   */
  @javax.annotation.Nullable
  public List<ShareRecipient> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<ShareRecipient> recipients) {
    this.recipients = recipients;
  }


  public WebhookV2EventDataShareInner requireEmail(Boolean requireEmail) {
    this.requireEmail = requireEmail;
    return this;
  }

  /**
   * Whether visitors must enter their email addresses to access the receive folder
   * @return requireEmail
   */
  @javax.annotation.Nullable
  public Boolean getRequireEmail() {
    return requireEmail;
  }

  public void setRequireEmail(Boolean requireEmail) {
    this.requireEmail = requireEmail;
  }


  public WebhookV2EventDataShareInner resent(Boolean resent) {
    this.resent = resent;
    return this;
  }

  /**
   * Whether invitations to the receive folder have been re-sent to recipients
   * @return resent
   */
  @javax.annotation.Nullable
  public Boolean getResent() {
    return resent;
  }

  public void setResent(Boolean resent) {
    this.resent = resent;
  }


  public WebhookV2EventDataShareInner status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * 1 if share is active. 0 if not.
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public WebhookV2EventDataShareInner trackingStatus(String trackingStatus) {
    this.trackingStatus = trackingStatus;
    return this;
  }

  /**
   * Status of invitations sent for this receive folder
   * @return trackingStatus
   */
  @javax.annotation.Nullable
  public String getTrackingStatus() {
    return trackingStatus;
  }

  public void setTrackingStatus(String trackingStatus) {
    this.trackingStatus = trackingStatus;
  }


  public WebhookV2EventDataShareInner type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of share **\&quot;receive\&quot;**
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookV2EventDataShareInner webhookV2EventDataShareInner = (WebhookV2EventDataShareInner) o;
    return Objects.equals(this.accessDescription, webhookV2EventDataShareInner.accessDescription) &&
        Objects.equals(this.accessMode, webhookV2EventDataShareInner.accessMode) &&
        Objects.equals(this.assets, webhookV2EventDataShareInner.assets) &&
        Objects.equals(this.created, webhookV2EventDataShareInner.created) &&
        Objects.equals(this.embed, webhookV2EventDataShareInner.embed) &&
        Objects.equals(this.expiration, webhookV2EventDataShareInner.expiration) &&
        Objects.equals(this.expired, webhookV2EventDataShareInner.expired) &&
        Objects.equals(this.fileDropCreateFolders, webhookV2EventDataShareInner.fileDropCreateFolders) &&
        Objects.equals(this.formId, webhookV2EventDataShareInner.formId) &&
        Objects.equals(this.hasNotification, webhookV2EventDataShareInner.hasNotification) &&
        Objects.equals(this.hasPassword, webhookV2EventDataShareInner.hasPassword) &&
        Objects.equals(this.hash, webhookV2EventDataShareInner.hash) &&
        Objects.equals(this.id, webhookV2EventDataShareInner.id) &&
        Objects.equals(this.inherited, webhookV2EventDataShareInner.inherited) &&
        Objects.equals(this.isPublic, webhookV2EventDataShareInner.isPublic) &&
        Objects.equals(this.messages, webhookV2EventDataShareInner.messages) &&
        Objects.equals(this.modified, webhookV2EventDataShareInner.modified) &&
        Objects.equals(this.name, webhookV2EventDataShareInner.name) &&
        Objects.equals(this.ownerHash, webhookV2EventDataShareInner.ownerHash) &&
        Objects.equals(this.paths, webhookV2EventDataShareInner.paths) &&
        Objects.equals(this.recipients, webhookV2EventDataShareInner.recipients) &&
        Objects.equals(this.requireEmail, webhookV2EventDataShareInner.requireEmail) &&
        Objects.equals(this.resent, webhookV2EventDataShareInner.resent) &&
        Objects.equals(this.status, webhookV2EventDataShareInner.status) &&
        Objects.equals(this.trackingStatus, webhookV2EventDataShareInner.trackingStatus) &&
        Objects.equals(this.type, webhookV2EventDataShareInner.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessDescription, accessMode, assets, created, embed, expiration, expired, fileDropCreateFolders, formId, hasNotification, hasPassword, hash, id, inherited, isPublic, messages, modified, name, ownerHash, paths, recipients, requireEmail, resent, status, trackingStatus, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookV2EventDataShareInner {\n");
    sb.append("    accessDescription: ").append(toIndentedString(accessDescription)).append("\n");
    sb.append("    accessMode: ").append(toIndentedString(accessMode)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    fileDropCreateFolders: ").append(toIndentedString(fileDropCreateFolders)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    hasNotification: ").append(toIndentedString(hasNotification)).append("\n");
    sb.append("    hasPassword: ").append(toIndentedString(hasPassword)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inherited: ").append(toIndentedString(inherited)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownerHash: ").append(toIndentedString(ownerHash)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    requireEmail: ").append(toIndentedString(requireEmail)).append("\n");
    sb.append("    resent: ").append(toIndentedString(resent)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trackingStatus: ").append(toIndentedString(trackingStatus)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessDescription");
    openapiFields.add("accessMode");
    openapiFields.add("assets");
    openapiFields.add("created");
    openapiFields.add("embed");
    openapiFields.add("expiration");
    openapiFields.add("expired");
    openapiFields.add("fileDropCreateFolders");
    openapiFields.add("formId");
    openapiFields.add("hasNotification");
    openapiFields.add("hasPassword");
    openapiFields.add("hash");
    openapiFields.add("id");
    openapiFields.add("inherited");
    openapiFields.add("isPublic");
    openapiFields.add("messages");
    openapiFields.add("modified");
    openapiFields.add("name");
    openapiFields.add("ownerHash");
    openapiFields.add("paths");
    openapiFields.add("recipients");
    openapiFields.add("requireEmail");
    openapiFields.add("resent");
    openapiFields.add("status");
    openapiFields.add("trackingStatus");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookV2EventDataShareInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookV2EventDataShareInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookV2EventDataShareInner is not found in the empty JSON string", WebhookV2EventDataShareInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookV2EventDataShareInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookV2EventDataShareInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessDescription") != null && !jsonObj.get("accessDescription").isJsonNull()) && !jsonObj.get("accessDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessDescription").toString()));
      }
      // validate the optional field `accessMode`
      if (jsonObj.get("accessMode") != null && !jsonObj.get("accessMode").isJsonNull()) {
        AccessMode.validateJsonElement(jsonObj.get("accessMode"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull() && !jsonObj.get("assets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `assets` to be an array in the JSON string but got `%s`", jsonObj.get("assets").toString()));
      }
      if ((jsonObj.get("expiration") != null && !jsonObj.get("expiration").isJsonNull()) && !jsonObj.get("expiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiration").toString()));
      }
      if ((jsonObj.get("hash") != null && !jsonObj.get("hash").isJsonNull()) && !jsonObj.get("hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash").toString()));
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            ShareMessage.validateJsonElement(jsonArraymessages.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ownerHash") != null && !jsonObj.get("ownerHash").isJsonNull()) && !jsonObj.get("ownerHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerHash").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("paths") != null && !jsonObj.get("paths").isJsonNull() && !jsonObj.get("paths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `paths` to be an array in the JSON string but got `%s`", jsonObj.get("paths").toString()));
      }
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
        if (jsonArrayrecipients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recipients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
          }

          // validate the optional field `recipients` (array)
          for (int i = 0; i < jsonArrayrecipients.size(); i++) {
            ShareRecipient.validateJsonElement(jsonArrayrecipients.get(i));
          };
        }
      }
      if ((jsonObj.get("trackingStatus") != null && !jsonObj.get("trackingStatus").isJsonNull()) && !jsonObj.get("trackingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingStatus").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookV2EventDataShareInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookV2EventDataShareInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookV2EventDataShareInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookV2EventDataShareInner.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookV2EventDataShareInner>() {
           @Override
           public void write(JsonWriter out, WebhookV2EventDataShareInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookV2EventDataShareInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookV2EventDataShareInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookV2EventDataShareInner
   * @throws IOException if the JSON string is invalid with respect to WebhookV2EventDataShareInner
   */
  public static WebhookV2EventDataShareInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookV2EventDataShareInner.class);
  }

  /**
   * Convert an instance of WebhookV2EventDataShareInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

