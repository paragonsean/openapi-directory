/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookTriggersResources
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebhookTriggersResources {
  public static final String SERIALIZED_NAME_COMPRESS = "compress";
  @SerializedName(SERIALIZED_NAME_COMPRESS)
  private Boolean compress;

  public static final String SERIALIZED_NAME_COPY = "copy";
  @SerializedName(SERIALIZED_NAME_COPY)
  private Boolean copy;

  public static final String SERIALIZED_NAME_CREATE_FOLDER = "createFolder";
  @SerializedName(SERIALIZED_NAME_CREATE_FOLDER)
  private Boolean createFolder;

  public static final String SERIALIZED_NAME_DELETE = "delete";
  @SerializedName(SERIALIZED_NAME_DELETE)
  private Boolean delete;

  public static final String SERIALIZED_NAME_DOWNLOAD = "download";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD)
  private Boolean download;

  public static final String SERIALIZED_NAME_EXTRACT = "extract";
  @SerializedName(SERIALIZED_NAME_EXTRACT)
  private Boolean extract;

  public static final String SERIALIZED_NAME_MOVE = "move";
  @SerializedName(SERIALIZED_NAME_MOVE)
  private Boolean move;

  public static final String SERIALIZED_NAME_RENAME = "rename";
  @SerializedName(SERIALIZED_NAME_RENAME)
  private Boolean rename;

  public static final String SERIALIZED_NAME_UPLOAD = "upload";
  @SerializedName(SERIALIZED_NAME_UPLOAD)
  private Boolean upload;

  public WebhookTriggersResources() {
  }

  public WebhookTriggersResources compress(Boolean compress) {
    this.compress = compress;
    return this;
  }

  /**
   * Send webhook messages when resources are compressed into an archive.
   * @return compress
   */
  @javax.annotation.Nullable
  public Boolean getCompress() {
    return compress;
  }

  public void setCompress(Boolean compress) {
    this.compress = compress;
  }


  public WebhookTriggersResources copy(Boolean copy) {
    this.copy = copy;
    return this;
  }

  /**
   * Send webhook messages when resources are copied.
   * @return copy
   */
  @javax.annotation.Nullable
  public Boolean getCopy() {
    return copy;
  }

  public void setCopy(Boolean copy) {
    this.copy = copy;
  }


  public WebhookTriggersResources createFolder(Boolean createFolder) {
    this.createFolder = createFolder;
    return this;
  }

  /**
   * Send webhook messages when a new folder is created.
   * @return createFolder
   */
  @javax.annotation.Nullable
  public Boolean getCreateFolder() {
    return createFolder;
  }

  public void setCreateFolder(Boolean createFolder) {
    this.createFolder = createFolder;
  }


  public WebhookTriggersResources delete(Boolean delete) {
    this.delete = delete;
    return this;
  }

  /**
   * Send webhook messages when resources are deleted
   * @return delete
   */
  @javax.annotation.Nullable
  public Boolean getDelete() {
    return delete;
  }

  public void setDelete(Boolean delete) {
    this.delete = delete;
  }


  public WebhookTriggersResources download(Boolean download) {
    this.download = download;
    return this;
  }

  /**
   * Send webhook messages when resources are downloaded.
   * @return download
   */
  @javax.annotation.Nullable
  public Boolean getDownload() {
    return download;
  }

  public void setDownload(Boolean download) {
    this.download = download;
  }


  public WebhookTriggersResources extract(Boolean extract) {
    this.extract = extract;
    return this;
  }

  /**
   * Send webhook messages when resources are extracted from an archive.
   * @return extract
   */
  @javax.annotation.Nullable
  public Boolean getExtract() {
    return extract;
  }

  public void setExtract(Boolean extract) {
    this.extract = extract;
  }


  public WebhookTriggersResources move(Boolean move) {
    this.move = move;
    return this;
  }

  /**
   * Send webhook messages when resources are moved.
   * @return move
   */
  @javax.annotation.Nullable
  public Boolean getMove() {
    return move;
  }

  public void setMove(Boolean move) {
    this.move = move;
  }


  public WebhookTriggersResources rename(Boolean rename) {
    this.rename = rename;
    return this;
  }

  /**
   * Send webhook messages when resources are renamed.
   * @return rename
   */
  @javax.annotation.Nullable
  public Boolean getRename() {
    return rename;
  }

  public void setRename(Boolean rename) {
    this.rename = rename;
  }


  public WebhookTriggersResources upload(Boolean upload) {
    this.upload = upload;
    return this;
  }

  /**
   * Send webhook messages when resources are uploaded.
   * @return upload
   */
  @javax.annotation.Nullable
  public Boolean getUpload() {
    return upload;
  }

  public void setUpload(Boolean upload) {
    this.upload = upload;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookTriggersResources webhookTriggersResources = (WebhookTriggersResources) o;
    return Objects.equals(this.compress, webhookTriggersResources.compress) &&
        Objects.equals(this.copy, webhookTriggersResources.copy) &&
        Objects.equals(this.createFolder, webhookTriggersResources.createFolder) &&
        Objects.equals(this.delete, webhookTriggersResources.delete) &&
        Objects.equals(this.download, webhookTriggersResources.download) &&
        Objects.equals(this.extract, webhookTriggersResources.extract) &&
        Objects.equals(this.move, webhookTriggersResources.move) &&
        Objects.equals(this.rename, webhookTriggersResources.rename) &&
        Objects.equals(this.upload, webhookTriggersResources.upload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compress, copy, createFolder, delete, download, extract, move, rename, upload);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookTriggersResources {\n");
    sb.append("    compress: ").append(toIndentedString(compress)).append("\n");
    sb.append("    copy: ").append(toIndentedString(copy)).append("\n");
    sb.append("    createFolder: ").append(toIndentedString(createFolder)).append("\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    download: ").append(toIndentedString(download)).append("\n");
    sb.append("    extract: ").append(toIndentedString(extract)).append("\n");
    sb.append("    move: ").append(toIndentedString(move)).append("\n");
    sb.append("    rename: ").append(toIndentedString(rename)).append("\n");
    sb.append("    upload: ").append(toIndentedString(upload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compress");
    openapiFields.add("copy");
    openapiFields.add("createFolder");
    openapiFields.add("delete");
    openapiFields.add("download");
    openapiFields.add("extract");
    openapiFields.add("move");
    openapiFields.add("rename");
    openapiFields.add("upload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookTriggersResources
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookTriggersResources.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookTriggersResources is not found in the empty JSON string", WebhookTriggersResources.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookTriggersResources.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookTriggersResources` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookTriggersResources.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookTriggersResources' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookTriggersResources> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookTriggersResources.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookTriggersResources>() {
           @Override
           public void write(JsonWriter out, WebhookTriggersResources value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookTriggersResources read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookTriggersResources given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookTriggersResources
   * @throws IOException if the JSON string is invalid with respect to WebhookTriggersResources
   */
  public static WebhookTriggersResources fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookTriggersResources.class);
  }

  /**
   * Convert an instance of WebhookTriggersResources to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

