/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import org.openapitools.client.model.WebhookV2Details;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookActivityAttributesV2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebhookActivityAttributesV2 {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ATTEMPT_ID = "attemptId";
  @SerializedName(SERIALIZED_NAME_ATTEMPT_ID)
  private String attemptId;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private WebhookV2Details details;

  public static final String SERIALIZED_NAME_ENDPOINT_URL = "endpointUrl";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_URL)
  private URI endpointUrl;

  /**
   * Event type
   */
  @JsonAdapter(EventEnum.Adapter.class)
  public enum EventEnum {
    RESOURCES_UPLOAD("resources.upload"),
    
    RESOURCES_DOWNLOAD("resources.download"),
    
    RESOURCES_DELETE("resources.delete"),
    
    RESOURCES_RENAME("resources.rename"),
    
    RESOURCES_COPY("resources.copy"),
    
    RESOURCES_MOVE("resources.move"),
    
    RESOURCES_COMPRESS("resources.compress"),
    
    RESOURCES_EXTRACT("resources.extract"),
    
    RESOURCES_CREATE_FOLDER("resources.createFolder"),
    
    SHARES_FORM_SUBMIT("shares.formSubmit");

    private String value;

    EventEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventEnum fromValue(String value) {
      for (EventEnum b : EventEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private EventEnum event;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_RESEND = "resend";
  @SerializedName(SERIALIZED_NAME_RESEND)
  private Boolean resend;

  public static final String SERIALIZED_NAME_RESOURCE_PATH = "resourcePath";
  @SerializedName(SERIALIZED_NAME_RESOURCE_PATH)
  private String resourcePath;

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private String response;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_WEBHOOK_FORMAT = "webhookFormat";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_FORMAT)
  private String webhookFormat;

  public static final String SERIALIZED_NAME_WEBHOOK_ID = "webhookId";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_ID)
  private Integer webhookId;

  public static final String SERIALIZED_NAME_WEBHOOK_PATH = "webhookPath";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_PATH)
  private String webhookPath;

  public WebhookActivityAttributesV2() {
  }

  public WebhookActivityAttributesV2 accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Unique ID of account
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public WebhookActivityAttributesV2 attemptId(String attemptId) {
    this.attemptId = attemptId;
    return this;
  }

  /**
   * Event - retry identifier
   * @return attemptId
   */
  @javax.annotation.Nullable
  public String getAttemptId() {
    return attemptId;
  }

  public void setAttemptId(String attemptId) {
    this.attemptId = attemptId;
  }


  public WebhookActivityAttributesV2 created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Date and time of webhook message being generated by system
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public WebhookActivityAttributesV2 details(WebhookV2Details details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public WebhookV2Details getDetails() {
    return details;
  }

  public void setDetails(WebhookV2Details details) {
    this.details = details;
  }


  public WebhookActivityAttributesV2 endpointUrl(URI endpointUrl) {
    this.endpointUrl = endpointUrl;
    return this;
  }

  /**
   * The URL the message was sent to
   * @return endpointUrl
   */
  @javax.annotation.Nullable
  public URI getEndpointUrl() {
    return endpointUrl;
  }

  public void setEndpointUrl(URI endpointUrl) {
    this.endpointUrl = endpointUrl;
  }


  public WebhookActivityAttributesV2 event(EventEnum event) {
    this.event = event;
    return this;
  }

  /**
   * Event type
   * @return event
   */
  @javax.annotation.Nullable
  public EventEnum getEvent() {
    return event;
  }

  public void setEvent(EventEnum event) {
    this.event = event;
  }


  public WebhookActivityAttributesV2 ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * IP Address of related activity
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public WebhookActivityAttributesV2 resend(Boolean resend) {
    this.resend = resend;
    return this;
  }

  /**
   * Whether this attempt was a re-send of a previous attempt
   * @return resend
   */
  @javax.annotation.Nullable
  public Boolean getResend() {
    return resend;
  }

  public void setResend(Boolean resend) {
    this.resend = resend;
  }


  public WebhookActivityAttributesV2 resourcePath(String resourcePath) {
    this.resourcePath = resourcePath;
    return this;
  }

  /**
   * Path of resource that matched webhook
   * @return resourcePath
   */
  @javax.annotation.Nullable
  public String getResourcePath() {
    return resourcePath;
  }

  public void setResourcePath(String resourcePath) {
    this.resourcePath = resourcePath;
  }


  public WebhookActivityAttributesV2 response(String response) {
    this.response = response;
    return this;
  }

  /**
   * Body of web response returned by webhook listener
   * @return response
   */
  @javax.annotation.Nullable
  public String getResponse() {
    return response;
  }

  public void setResponse(String response) {
    this.response = response;
  }


  public WebhookActivityAttributesV2 status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * HTTP Status Code returned by webhook listener
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public WebhookActivityAttributesV2 username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Username of related activity
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public WebhookActivityAttributesV2 webhookFormat(String webhookFormat) {
    this.webhookFormat = webhookFormat;
    return this;
  }

  /**
   * What version of webhook message is being sent &#x60;v2&#x60;
   * @return webhookFormat
   */
  @javax.annotation.Nullable
  public String getWebhookFormat() {
    return webhookFormat;
  }

  public void setWebhookFormat(String webhookFormat) {
    this.webhookFormat = webhookFormat;
  }


  public WebhookActivityAttributesV2 webhookId(Integer webhookId) {
    this.webhookId = webhookId;
    return this;
  }

  /**
   * Unique ID of webhook configuration
   * @return webhookId
   */
  @javax.annotation.Nullable
  public Integer getWebhookId() {
    return webhookId;
  }

  public void setWebhookId(Integer webhookId) {
    this.webhookId = webhookId;
  }


  public WebhookActivityAttributesV2 webhookPath(String webhookPath) {
    this.webhookPath = webhookPath;
    return this;
  }

  /**
   * Path that webhook is watching
   * @return webhookPath
   */
  @javax.annotation.Nullable
  public String getWebhookPath() {
    return webhookPath;
  }

  public void setWebhookPath(String webhookPath) {
    this.webhookPath = webhookPath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookActivityAttributesV2 webhookActivityAttributesV2 = (WebhookActivityAttributesV2) o;
    return Objects.equals(this.accountId, webhookActivityAttributesV2.accountId) &&
        Objects.equals(this.attemptId, webhookActivityAttributesV2.attemptId) &&
        Objects.equals(this.created, webhookActivityAttributesV2.created) &&
        Objects.equals(this.details, webhookActivityAttributesV2.details) &&
        Objects.equals(this.endpointUrl, webhookActivityAttributesV2.endpointUrl) &&
        Objects.equals(this.event, webhookActivityAttributesV2.event) &&
        Objects.equals(this.ipAddress, webhookActivityAttributesV2.ipAddress) &&
        Objects.equals(this.resend, webhookActivityAttributesV2.resend) &&
        Objects.equals(this.resourcePath, webhookActivityAttributesV2.resourcePath) &&
        Objects.equals(this.response, webhookActivityAttributesV2.response) &&
        Objects.equals(this.status, webhookActivityAttributesV2.status) &&
        Objects.equals(this.username, webhookActivityAttributesV2.username) &&
        Objects.equals(this.webhookFormat, webhookActivityAttributesV2.webhookFormat) &&
        Objects.equals(this.webhookId, webhookActivityAttributesV2.webhookId) &&
        Objects.equals(this.webhookPath, webhookActivityAttributesV2.webhookPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, attemptId, created, details, endpointUrl, event, ipAddress, resend, resourcePath, response, status, username, webhookFormat, webhookId, webhookPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookActivityAttributesV2 {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    attemptId: ").append(toIndentedString(attemptId)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    endpointUrl: ").append(toIndentedString(endpointUrl)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    resend: ").append(toIndentedString(resend)).append("\n");
    sb.append("    resourcePath: ").append(toIndentedString(resourcePath)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    webhookFormat: ").append(toIndentedString(webhookFormat)).append("\n");
    sb.append("    webhookId: ").append(toIndentedString(webhookId)).append("\n");
    sb.append("    webhookPath: ").append(toIndentedString(webhookPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("attemptId");
    openapiFields.add("created");
    openapiFields.add("details");
    openapiFields.add("endpointUrl");
    openapiFields.add("event");
    openapiFields.add("ipAddress");
    openapiFields.add("resend");
    openapiFields.add("resourcePath");
    openapiFields.add("response");
    openapiFields.add("status");
    openapiFields.add("username");
    openapiFields.add("webhookFormat");
    openapiFields.add("webhookId");
    openapiFields.add("webhookPath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookActivityAttributesV2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookActivityAttributesV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookActivityAttributesV2 is not found in the empty JSON string", WebhookActivityAttributesV2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookActivityAttributesV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookActivityAttributesV2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("attemptId") != null && !jsonObj.get("attemptId").isJsonNull()) && !jsonObj.get("attemptId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attemptId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attemptId").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      // validate the optional field `details`
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        WebhookV2Details.validateJsonElement(jsonObj.get("details"));
      }
      if ((jsonObj.get("endpointUrl") != null && !jsonObj.get("endpointUrl").isJsonNull()) && !jsonObj.get("endpointUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointUrl").toString()));
      }
      if ((jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) && !jsonObj.get("event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event").toString()));
      }
      // validate the optional field `event`
      if (jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) {
        EventEnum.validateJsonElement(jsonObj.get("event"));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("resourcePath") != null && !jsonObj.get("resourcePath").isJsonNull()) && !jsonObj.get("resourcePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourcePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourcePath").toString()));
      }
      if ((jsonObj.get("response") != null && !jsonObj.get("response").isJsonNull()) && !jsonObj.get("response").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("webhookFormat") != null && !jsonObj.get("webhookFormat").isJsonNull()) && !jsonObj.get("webhookFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookFormat").toString()));
      }
      if ((jsonObj.get("webhookPath") != null && !jsonObj.get("webhookPath").isJsonNull()) && !jsonObj.get("webhookPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookActivityAttributesV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookActivityAttributesV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookActivityAttributesV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookActivityAttributesV2.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookActivityAttributesV2>() {
           @Override
           public void write(JsonWriter out, WebhookActivityAttributesV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookActivityAttributesV2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookActivityAttributesV2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookActivityAttributesV2
   * @throws IOException if the JSON string is invalid with respect to WebhookActivityAttributesV2
   */
  public static WebhookActivityAttributesV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookActivityAttributesV2.class);
  }

  /**
   * Convert an instance of WebhookActivityAttributesV2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

