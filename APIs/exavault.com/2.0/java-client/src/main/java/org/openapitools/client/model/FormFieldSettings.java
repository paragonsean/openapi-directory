/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Advanced field settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FormFieldSettings {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_REQUIRED = "isRequired";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED)
  private Boolean isRequired;

  public static final String SERIALIZED_NAME_SENDER_EMAIL = "senderEmail";
  @SerializedName(SERIALIZED_NAME_SENDER_EMAIL)
  private Boolean senderEmail;

  public static final String SERIALIZED_NAME_USE_AS_FOLDER_NAME = "useAsFolderName";
  @SerializedName(SERIALIZED_NAME_USE_AS_FOLDER_NAME)
  private Boolean useAsFolderName;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Float width;

  public FormFieldSettings() {
  }

  public FormFieldSettings description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Secondary description of field.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public FormFieldSettings isRequired(Boolean isRequired) {
    this.isRequired = isRequired;
    return this;
  }

  /**
   * Whether this field must be completed before form can be submitted
   * @return isRequired
   */
  @javax.annotation.Nullable
  public Boolean getIsRequired() {
    return isRequired;
  }

  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }


  public FormFieldSettings senderEmail(Boolean senderEmail) {
    this.senderEmail = senderEmail;
    return this;
  }

  /**
   * Get senderEmail
   * @return senderEmail
   */
  @javax.annotation.Nullable
  public Boolean getSenderEmail() {
    return senderEmail;
  }

  public void setSenderEmail(Boolean senderEmail) {
    this.senderEmail = senderEmail;
  }


  public FormFieldSettings useAsFolderName(Boolean useAsFolderName) {
    this.useAsFolderName = useAsFolderName;
    return this;
  }

  /**
   * Whether to place submitted files into a subfolder named the contents of this field. Only takes effect when the &#x60;fileDropCreateFolders&#x60; parameter on the receive folder is &#x60;true&#x60;. &#x60;isRequired&#x60; must be set to &#x60;true&#x60; if this setting is &#x60;true&#x60;.
   * @return useAsFolderName
   */
  @javax.annotation.Nullable
  public Boolean getUseAsFolderName() {
    return useAsFolderName;
  }

  public void setUseAsFolderName(Boolean useAsFolderName) {
    this.useAsFolderName = useAsFolderName;
  }


  public FormFieldSettings width(Float width) {
    this.width = width;
    return this;
  }

  /**
   * How much of the available width the field should occupy
   * @return width
   */
  @javax.annotation.Nullable
  public Float getWidth() {
    return width;
  }

  public void setWidth(Float width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormFieldSettings formFieldSettings = (FormFieldSettings) o;
    return Objects.equals(this.description, formFieldSettings.description) &&
        Objects.equals(this.isRequired, formFieldSettings.isRequired) &&
        Objects.equals(this.senderEmail, formFieldSettings.senderEmail) &&
        Objects.equals(this.useAsFolderName, formFieldSettings.useAsFolderName) &&
        Objects.equals(this.width, formFieldSettings.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, isRequired, senderEmail, useAsFolderName, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormFieldSettings {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    senderEmail: ").append(toIndentedString(senderEmail)).append("\n");
    sb.append("    useAsFolderName: ").append(toIndentedString(useAsFolderName)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("isRequired");
    openapiFields.add("senderEmail");
    openapiFields.add("useAsFolderName");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FormFieldSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FormFieldSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormFieldSettings is not found in the empty JSON string", FormFieldSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FormFieldSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FormFieldSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormFieldSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormFieldSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormFieldSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormFieldSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<FormFieldSettings>() {
           @Override
           public void write(JsonWriter out, FormFieldSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FormFieldSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FormFieldSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FormFieldSettings
   * @throws IOException if the JSON string is invalid with respect to FormFieldSettings
   */
  public static FormFieldSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormFieldSettings.class);
  }

  /**
   * Convert an instance of FormFieldSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

