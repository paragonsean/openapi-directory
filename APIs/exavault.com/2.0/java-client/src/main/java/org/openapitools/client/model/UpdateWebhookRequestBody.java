/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import org.openapitools.client.model.WebhookTriggers;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateWebhookRequestBody {
  public static final String SERIALIZED_NAME_ENDPOINT_URL = "endpointUrl";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_URL)
  private URI endpointUrl;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private String resource;

  /**
   * Version of the webhooks message to send to the endpoint
   */
  @JsonAdapter(ResponseVersionEnum.Adapter.class)
  public enum ResponseVersionEnum {
    V2("v2"),
    
    V1("v1");

    private String value;

    ResponseVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponseVersionEnum fromValue(String value) {
      for (ResponseVersionEnum b : ResponseVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResponseVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponseVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponseVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResponseVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESPONSE_VERSION = "responseVersion";
  @SerializedName(SERIALIZED_NAME_RESPONSE_VERSION)
  private ResponseVersionEnum responseVersion;

  public static final String SERIALIZED_NAME_TRIGGERS = "triggers";
  @SerializedName(SERIALIZED_NAME_TRIGGERS)
  private WebhookTriggers triggers;

  public UpdateWebhookRequestBody() {
  }

  public UpdateWebhookRequestBody endpointUrl(URI endpointUrl) {
    this.endpointUrl = endpointUrl;
    return this;
  }

  /**
   * New endpoint URL to use for the webhook configuration
   * @return endpointUrl
   */
  @javax.annotation.Nullable
  public URI getEndpointUrl() {
    return endpointUrl;
  }

  public void setEndpointUrl(URI endpointUrl) {
    this.endpointUrl = endpointUrl;
  }


  public UpdateWebhookRequestBody resource(String resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Resource identifier of the top folder watched by this webhook.
   * @return resource
   */
  @javax.annotation.Nullable
  public String getResource() {
    return resource;
  }

  public void setResource(String resource) {
    this.resource = resource;
  }


  public UpdateWebhookRequestBody responseVersion(ResponseVersionEnum responseVersion) {
    this.responseVersion = responseVersion;
    return this;
  }

  /**
   * Version of the webhooks message to send to the endpoint
   * @return responseVersion
   */
  @javax.annotation.Nullable
  public ResponseVersionEnum getResponseVersion() {
    return responseVersion;
  }

  public void setResponseVersion(ResponseVersionEnum responseVersion) {
    this.responseVersion = responseVersion;
  }


  public UpdateWebhookRequestBody triggers(WebhookTriggers triggers) {
    this.triggers = triggers;
    return this;
  }

  /**
   * Get triggers
   * @return triggers
   */
  @javax.annotation.Nullable
  public WebhookTriggers getTriggers() {
    return triggers;
  }

  public void setTriggers(WebhookTriggers triggers) {
    this.triggers = triggers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateWebhookRequestBody updateWebhookRequestBody = (UpdateWebhookRequestBody) o;
    return Objects.equals(this.endpointUrl, updateWebhookRequestBody.endpointUrl) &&
        Objects.equals(this.resource, updateWebhookRequestBody.resource) &&
        Objects.equals(this.responseVersion, updateWebhookRequestBody.responseVersion) &&
        Objects.equals(this.triggers, updateWebhookRequestBody.triggers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpointUrl, resource, responseVersion, triggers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateWebhookRequestBody {\n");
    sb.append("    endpointUrl: ").append(toIndentedString(endpointUrl)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    responseVersion: ").append(toIndentedString(responseVersion)).append("\n");
    sb.append("    triggers: ").append(toIndentedString(triggers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endpointUrl");
    openapiFields.add("resource");
    openapiFields.add("responseVersion");
    openapiFields.add("triggers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateWebhookRequestBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateWebhookRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateWebhookRequestBody is not found in the empty JSON string", UpdateWebhookRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateWebhookRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateWebhookRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endpointUrl") != null && !jsonObj.get("endpointUrl").isJsonNull()) && !jsonObj.get("endpointUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointUrl").toString()));
      }
      if ((jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) && !jsonObj.get("resource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource").toString()));
      }
      if ((jsonObj.get("responseVersion") != null && !jsonObj.get("responseVersion").isJsonNull()) && !jsonObj.get("responseVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseVersion").toString()));
      }
      // validate the optional field `responseVersion`
      if (jsonObj.get("responseVersion") != null && !jsonObj.get("responseVersion").isJsonNull()) {
        ResponseVersionEnum.validateJsonElement(jsonObj.get("responseVersion"));
      }
      // validate the optional field `triggers`
      if (jsonObj.get("triggers") != null && !jsonObj.get("triggers").isJsonNull()) {
        WebhookTriggers.validateJsonElement(jsonObj.get("triggers"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateWebhookRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateWebhookRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateWebhookRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateWebhookRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateWebhookRequestBody>() {
           @Override
           public void write(JsonWriter out, UpdateWebhookRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateWebhookRequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateWebhookRequestBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateWebhookRequestBody
   * @throws IOException if the JSON string is invalid with respect to UpdateWebhookRequestBody
   */
  public static UpdateWebhookRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateWebhookRequestBody.class);
  }

  /**
   * Convert an instance of UpdateWebhookRequestBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

