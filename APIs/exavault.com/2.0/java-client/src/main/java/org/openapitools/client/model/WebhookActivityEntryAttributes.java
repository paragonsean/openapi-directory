/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import org.openapitools.client.model.WebhookActivityAttributesV1;
import org.openapitools.client.model.WebhookActivityAttributesV2;
import org.openapitools.client.model.WebhookV1Details;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebhookActivityEntryAttributes extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(WebhookActivityEntryAttributes.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!WebhookActivityEntryAttributes.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'WebhookActivityEntryAttributes' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<WebhookActivityAttributesV2> adapterWebhookActivityAttributesV2 = gson.getDelegateAdapter(this, TypeToken.get(WebhookActivityAttributesV2.class));
            final TypeAdapter<WebhookActivityAttributesV1> adapterWebhookActivityAttributesV1 = gson.getDelegateAdapter(this, TypeToken.get(WebhookActivityAttributesV1.class));

            return (TypeAdapter<T>) new TypeAdapter<WebhookActivityEntryAttributes>() {
                @Override
                public void write(JsonWriter out, WebhookActivityEntryAttributes value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `WebhookActivityAttributesV2`
                    if (value.getActualInstance() instanceof WebhookActivityAttributesV2) {
                        JsonElement element = adapterWebhookActivityAttributesV2.toJsonTree((WebhookActivityAttributesV2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `WebhookActivityAttributesV1`
                    if (value.getActualInstance() instanceof WebhookActivityAttributesV1) {
                        JsonElement element = adapterWebhookActivityAttributesV1.toJsonTree((WebhookActivityAttributesV1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: WebhookActivityAttributesV1, WebhookActivityAttributesV2");
                }

                @Override
                public WebhookActivityEntryAttributes read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize WebhookActivityAttributesV2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WebhookActivityAttributesV2.validateJsonElement(jsonElement);
                        actualAdapter = adapterWebhookActivityAttributesV2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WebhookActivityAttributesV2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WebhookActivityAttributesV2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WebhookActivityAttributesV2'", e);
                    }
                    // deserialize WebhookActivityAttributesV1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        WebhookActivityAttributesV1.validateJsonElement(jsonElement);
                        actualAdapter = adapterWebhookActivityAttributesV1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'WebhookActivityAttributesV1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for WebhookActivityAttributesV1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'WebhookActivityAttributesV1'", e);
                    }

                    if (match == 1) {
                        WebhookActivityEntryAttributes ret = new WebhookActivityEntryAttributes();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for WebhookActivityEntryAttributes: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public WebhookActivityEntryAttributes() {
        super("oneOf", Boolean.FALSE);
    }

    public WebhookActivityEntryAttributes(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("WebhookActivityAttributesV2", WebhookActivityAttributesV2.class);
        schemas.put("WebhookActivityAttributesV1", WebhookActivityAttributesV1.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return WebhookActivityEntryAttributes.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * WebhookActivityAttributesV1, WebhookActivityAttributesV2
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof WebhookActivityAttributesV2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WebhookActivityAttributesV1) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be WebhookActivityAttributesV1, WebhookActivityAttributesV2");
    }

    /**
     * Get the actual instance, which can be the following:
     * WebhookActivityAttributesV1, WebhookActivityAttributesV2
     *
     * @return The actual instance (WebhookActivityAttributesV1, WebhookActivityAttributesV2)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `WebhookActivityAttributesV2`. If the actual instance is not `WebhookActivityAttributesV2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WebhookActivityAttributesV2`
     * @throws ClassCastException if the instance is not `WebhookActivityAttributesV2`
     */
    public WebhookActivityAttributesV2 getWebhookActivityAttributesV2() throws ClassCastException {
        return (WebhookActivityAttributesV2)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WebhookActivityAttributesV1`. If the actual instance is not `WebhookActivityAttributesV1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WebhookActivityAttributesV1`
     * @throws ClassCastException if the instance is not `WebhookActivityAttributesV1`
     */
    public WebhookActivityAttributesV1 getWebhookActivityAttributesV1() throws ClassCastException {
        return (WebhookActivityAttributesV1)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to WebhookActivityEntryAttributes
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with WebhookActivityAttributesV2
        try {
            WebhookActivityAttributesV2.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WebhookActivityAttributesV2 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with WebhookActivityAttributesV1
        try {
            WebhookActivityAttributesV1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for WebhookActivityAttributesV1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for WebhookActivityEntryAttributes with oneOf schemas: WebhookActivityAttributesV1, WebhookActivityAttributesV2. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of WebhookActivityEntryAttributes given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of WebhookActivityEntryAttributes
     * @throws IOException if the JSON string is invalid with respect to WebhookActivityEntryAttributes
     */
    public static WebhookActivityEntryAttributes fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, WebhookActivityEntryAttributes.class);
    }

    /**
     * Convert an instance of WebhookActivityEntryAttributes to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

