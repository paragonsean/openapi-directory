/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateFormByIdRequestBodyElementsInnerSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateFormByIdRequestBodyElementsInnerSettings {
  public static final String SERIALIZED_NAME_IS_REQUIRED = "isRequired";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED)
  private Boolean isRequired;

  public static final String SERIALIZED_NAME_SENDER_EMAIL = "senderEmail";
  @SerializedName(SERIALIZED_NAME_SENDER_EMAIL)
  private Boolean senderEmail;

  public static final String SERIALIZED_NAME_USE_AS_FOLDER_NAME = "useAsFolderName";
  @SerializedName(SERIALIZED_NAME_USE_AS_FOLDER_NAME)
  private Boolean useAsFolderName;

  public UpdateFormByIdRequestBodyElementsInnerSettings() {
  }

  public UpdateFormByIdRequestBodyElementsInnerSettings isRequired(Boolean isRequired) {
    this.isRequired = isRequired;
    return this;
  }

  /**
   * True is the form element is required for submission. 
   * @return isRequired
   */
  @javax.annotation.Nullable
  public Boolean getIsRequired() {
    return isRequired;
  }

  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }


  public UpdateFormByIdRequestBodyElementsInnerSettings senderEmail(Boolean senderEmail) {
    this.senderEmail = senderEmail;
    return this;
  }

  /**
   * Get senderEmail
   * @return senderEmail
   */
  @javax.annotation.Nullable
  public Boolean getSenderEmail() {
    return senderEmail;
  }

  public void setSenderEmail(Boolean senderEmail) {
    this.senderEmail = senderEmail;
  }


  public UpdateFormByIdRequestBodyElementsInnerSettings useAsFolderName(Boolean useAsFolderName) {
    this.useAsFolderName = useAsFolderName;
    return this;
  }

  /**
   * True if the submitted response should be used as the name for the new folder. 
   * @return useAsFolderName
   */
  @javax.annotation.Nullable
  public Boolean getUseAsFolderName() {
    return useAsFolderName;
  }

  public void setUseAsFolderName(Boolean useAsFolderName) {
    this.useAsFolderName = useAsFolderName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateFormByIdRequestBodyElementsInnerSettings updateFormByIdRequestBodyElementsInnerSettings = (UpdateFormByIdRequestBodyElementsInnerSettings) o;
    return Objects.equals(this.isRequired, updateFormByIdRequestBodyElementsInnerSettings.isRequired) &&
        Objects.equals(this.senderEmail, updateFormByIdRequestBodyElementsInnerSettings.senderEmail) &&
        Objects.equals(this.useAsFolderName, updateFormByIdRequestBodyElementsInnerSettings.useAsFolderName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isRequired, senderEmail, useAsFolderName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateFormByIdRequestBodyElementsInnerSettings {\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    senderEmail: ").append(toIndentedString(senderEmail)).append("\n");
    sb.append("    useAsFolderName: ").append(toIndentedString(useAsFolderName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isRequired");
    openapiFields.add("senderEmail");
    openapiFields.add("useAsFolderName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateFormByIdRequestBodyElementsInnerSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateFormByIdRequestBodyElementsInnerSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateFormByIdRequestBodyElementsInnerSettings is not found in the empty JSON string", UpdateFormByIdRequestBodyElementsInnerSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateFormByIdRequestBodyElementsInnerSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateFormByIdRequestBodyElementsInnerSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateFormByIdRequestBodyElementsInnerSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateFormByIdRequestBodyElementsInnerSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateFormByIdRequestBodyElementsInnerSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateFormByIdRequestBodyElementsInnerSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateFormByIdRequestBodyElementsInnerSettings>() {
           @Override
           public void write(JsonWriter out, UpdateFormByIdRequestBodyElementsInnerSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateFormByIdRequestBodyElementsInnerSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateFormByIdRequestBodyElementsInnerSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateFormByIdRequestBodyElementsInnerSettings
   * @throws IOException if the JSON string is invalid with respect to UpdateFormByIdRequestBodyElementsInnerSettings
   */
  public static UpdateFormByIdRequestBodyElementsInnerSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateFormByIdRequestBodyElementsInnerSettings.class);
  }

  /**
   * Convert an instance of UpdateFormByIdRequestBodyElementsInnerSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

