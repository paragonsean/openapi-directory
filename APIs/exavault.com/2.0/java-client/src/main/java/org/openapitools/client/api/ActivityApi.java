/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.SessionActivityResponse;
import java.net.URI;
import org.openapitools.client.model.WebhookActivityResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActivityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActivityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActivityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getSessionLogs
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param startDate Start date of the filter data range (optional)
     * @param endDate End date of the filter data range (optional)
     * @param ipAddress Used to filter session logs by ip address. (optional)
     * @param username Username used for filtering a list (optional)
     * @param path Path used to filter records (optional)
     * @param type Filter session logs for operation type (see table above for acceptable values) (optional)
     * @param offset Offset of the records list (optional)
     * @param limit Limit of the records list (optional)
     * @param sort Comma separated list sort params (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSessionLogsCall(String evApiKey, String evAccessToken, OffsetDateTime startDate, OffsetDateTime endDate, String ipAddress, String username, String path, String type, Integer offset, Integer limit, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/activity/session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (ipAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ipAddress", ipAddress));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSessionLogsValidateBeforeCall(String evApiKey, String evAccessToken, OffsetDateTime startDate, OffsetDateTime endDate, String ipAddress, String username, String path, String type, Integer offset, Integer limit, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling getSessionLogs(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling getSessionLogs(Async)");
        }

        return getSessionLogsCall(evApiKey, evAccessToken, startDate, endDate, ipAddress, username, path, type, offset, limit, sort, _callback);

    }

    /**
     * Get activity logs
     * Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.   **NOTE:** Total Results will always return as 0 to avoid quering data you&#39;re not using and stay as performant as possible.     **Operation Types** Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:  | File Manager Value | API Value | Notes | |-----|----|---| | Connect | PASS | | | Disconnect | EXIT | | | Upload | STOR | | | Download | RETR | | | Delete | DELE | | | Create Folder | MKD | | | Rename | RNTO | | | Move | MOVE | | | Copy | COPY | | | Compress | COMPR | | | Extract | EXTRACT | | | Shared Folders | SHARE | | | Send Files | SEND | | | Receive Files | RECV | | | _N/A_ | EDIT\\_SEND | Update send. Not shown in file manager | | Update Share | EDIT\\_SHARE| |  | Update Receive | EDIT\\_RECV | | | Delete Send | DELE\\_SEND | | | Delete Receive | DELE\\_RECV | | | Delete Share | DELE\\_SHARE | | | Create Notification | NOTIFY | | | Update Notification | EDIT\\_NTFY| | | Delete Notification | DELE\\_NTFY | | | Create User | USER | | | Update User | EDIT\\_USER | | | Delete User | DELE\\_USER | | | _N/A_ | DFA | Create direct link. Not shown in file manager | | _N/A_ | EDIT\\_DFA | Update direct link options. Not shown in file manager | | _N/A_ | DELE\\_DFA | Deactivate direct link. Not shown in file manager| 
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param startDate Start date of the filter data range (optional)
     * @param endDate End date of the filter data range (optional)
     * @param ipAddress Used to filter session logs by ip address. (optional)
     * @param username Username used for filtering a list (optional)
     * @param path Path used to filter records (optional)
     * @param type Filter session logs for operation type (see table above for acceptable values) (optional)
     * @param offset Offset of the records list (optional)
     * @param limit Limit of the records list (optional)
     * @param sort Comma separated list sort params (optional)
     * @return SessionActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SessionActivityResponse getSessionLogs(String evApiKey, String evAccessToken, OffsetDateTime startDate, OffsetDateTime endDate, String ipAddress, String username, String path, String type, Integer offset, Integer limit, String sort) throws ApiException {
        ApiResponse<SessionActivityResponse> localVarResp = getSessionLogsWithHttpInfo(evApiKey, evAccessToken, startDate, endDate, ipAddress, username, path, type, offset, limit, sort);
        return localVarResp.getData();
    }

    /**
     * Get activity logs
     * Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.   **NOTE:** Total Results will always return as 0 to avoid quering data you&#39;re not using and stay as performant as possible.     **Operation Types** Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:  | File Manager Value | API Value | Notes | |-----|----|---| | Connect | PASS | | | Disconnect | EXIT | | | Upload | STOR | | | Download | RETR | | | Delete | DELE | | | Create Folder | MKD | | | Rename | RNTO | | | Move | MOVE | | | Copy | COPY | | | Compress | COMPR | | | Extract | EXTRACT | | | Shared Folders | SHARE | | | Send Files | SEND | | | Receive Files | RECV | | | _N/A_ | EDIT\\_SEND | Update send. Not shown in file manager | | Update Share | EDIT\\_SHARE| |  | Update Receive | EDIT\\_RECV | | | Delete Send | DELE\\_SEND | | | Delete Receive | DELE\\_RECV | | | Delete Share | DELE\\_SHARE | | | Create Notification | NOTIFY | | | Update Notification | EDIT\\_NTFY| | | Delete Notification | DELE\\_NTFY | | | Create User | USER | | | Update User | EDIT\\_USER | | | Delete User | DELE\\_USER | | | _N/A_ | DFA | Create direct link. Not shown in file manager | | _N/A_ | EDIT\\_DFA | Update direct link options. Not shown in file manager | | _N/A_ | DELE\\_DFA | Deactivate direct link. Not shown in file manager| 
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param startDate Start date of the filter data range (optional)
     * @param endDate End date of the filter data range (optional)
     * @param ipAddress Used to filter session logs by ip address. (optional)
     * @param username Username used for filtering a list (optional)
     * @param path Path used to filter records (optional)
     * @param type Filter session logs for operation type (see table above for acceptable values) (optional)
     * @param offset Offset of the records list (optional)
     * @param limit Limit of the records list (optional)
     * @param sort Comma separated list sort params (optional)
     * @return ApiResponse&lt;SessionActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SessionActivityResponse> getSessionLogsWithHttpInfo(String evApiKey, String evAccessToken, OffsetDateTime startDate, OffsetDateTime endDate, String ipAddress, String username, String path, String type, Integer offset, Integer limit, String sort) throws ApiException {
        okhttp3.Call localVarCall = getSessionLogsValidateBeforeCall(evApiKey, evAccessToken, startDate, endDate, ipAddress, username, path, type, offset, limit, sort, null);
        Type localVarReturnType = new TypeToken<SessionActivityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get activity logs (asynchronously)
     * Returns the detailed activity logs for your account. Optional query paramaters will filter the returned results based on a number of options including usernames, activity types, or date ranges.   **NOTE:** Total Results will always return as 0 to avoid quering data you&#39;re not using and stay as performant as possible.     **Operation Types** Session activity is logged with an operation type that is different from what is visible through the [activity log interface in the web file manager](/docs/account/10-activity-logs/00-activity-logs). Consult the table below to compare the two:  | File Manager Value | API Value | Notes | |-----|----|---| | Connect | PASS | | | Disconnect | EXIT | | | Upload | STOR | | | Download | RETR | | | Delete | DELE | | | Create Folder | MKD | | | Rename | RNTO | | | Move | MOVE | | | Copy | COPY | | | Compress | COMPR | | | Extract | EXTRACT | | | Shared Folders | SHARE | | | Send Files | SEND | | | Receive Files | RECV | | | _N/A_ | EDIT\\_SEND | Update send. Not shown in file manager | | Update Share | EDIT\\_SHARE| |  | Update Receive | EDIT\\_RECV | | | Delete Send | DELE\\_SEND | | | Delete Receive | DELE\\_RECV | | | Delete Share | DELE\\_SHARE | | | Create Notification | NOTIFY | | | Update Notification | EDIT\\_NTFY| | | Delete Notification | DELE\\_NTFY | | | Create User | USER | | | Update User | EDIT\\_USER | | | Delete User | DELE\\_USER | | | _N/A_ | DFA | Create direct link. Not shown in file manager | | _N/A_ | EDIT\\_DFA | Update direct link options. Not shown in file manager | | _N/A_ | DELE\\_DFA | Deactivate direct link. Not shown in file manager| 
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param startDate Start date of the filter data range (optional)
     * @param endDate End date of the filter data range (optional)
     * @param ipAddress Used to filter session logs by ip address. (optional)
     * @param username Username used for filtering a list (optional)
     * @param path Path used to filter records (optional)
     * @param type Filter session logs for operation type (see table above for acceptable values) (optional)
     * @param offset Offset of the records list (optional)
     * @param limit Limit of the records list (optional)
     * @param sort Comma separated list sort params (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSessionLogsAsync(String evApiKey, String evAccessToken, OffsetDateTime startDate, OffsetDateTime endDate, String ipAddress, String username, String path, String type, Integer offset, Integer limit, String sort, final ApiCallback<SessionActivityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSessionLogsValidateBeforeCall(evApiKey, evAccessToken, startDate, endDate, ipAddress, username, path, type, offset, limit, sort, _callback);
        Type localVarReturnType = new TypeToken<SessionActivityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebhookLogs
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param startDate Earliest date of entries to include in list (optional)
     * @param endDate Latest date of entries to include in list (optional)
     * @param endpointUrl Webhook listener endpoint (optional)
     * @param event Type of activity that triggered the webhook attempt (optional)
     * @param statusCode Response code from the webhook endpoint (optional)
     * @param resourcePath Path of the resource that triggered the webhook attempt (optional)
     * @param username Filter by triggering username. (optional)
     * @param offset Records to skip before returning results. (optional)
     * @param limit Limit of the records list (optional)
     * @param sort Comma separated list sort params (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhookLogsCall(String evApiKey, String evAccessToken, OffsetDateTime startDate, OffsetDateTime endDate, URI endpointUrl, String event, Integer statusCode, String resourcePath, String username, Integer offset, Integer limit, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/activity/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (endpointUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endpointUrl", endpointUrl));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (statusCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusCode", statusCode));
        }

        if (resourcePath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourcePath", resourcePath));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookLogsValidateBeforeCall(String evApiKey, String evAccessToken, OffsetDateTime startDate, OffsetDateTime endDate, URI endpointUrl, String event, Integer statusCode, String resourcePath, String username, Integer offset, Integer limit, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling getWebhookLogs(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling getWebhookLogs(Async)");
        }

        return getWebhookLogsCall(evApiKey, evAccessToken, startDate, endDate, endpointUrl, event, statusCode, resourcePath, username, offset, limit, sort, _callback);

    }

    /**
     * Get webhook logs
     * Returns the webhook logs for your account. Use the available query parameters to filter the listing of activity that is returned.  **NOTE:** Total Results will always return as 0 to avoid querying data you&#39;re not using and stay as performant as possible.   **Event Types**  Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). Not all event types may be allowed for your account type. These are the valid options for event types:  - resources.upload - resources.download - resources.delete - resources.createFolder - resources.rename - resources.move - resources.copy - resources.compress - resources.extract - shares.formSubmit 
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param startDate Earliest date of entries to include in list (optional)
     * @param endDate Latest date of entries to include in list (optional)
     * @param endpointUrl Webhook listener endpoint (optional)
     * @param event Type of activity that triggered the webhook attempt (optional)
     * @param statusCode Response code from the webhook endpoint (optional)
     * @param resourcePath Path of the resource that triggered the webhook attempt (optional)
     * @param username Filter by triggering username. (optional)
     * @param offset Records to skip before returning results. (optional)
     * @param limit Limit of the records list (optional)
     * @param sort Comma separated list sort params (optional)
     * @return WebhookActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public WebhookActivityResponse getWebhookLogs(String evApiKey, String evAccessToken, OffsetDateTime startDate, OffsetDateTime endDate, URI endpointUrl, String event, Integer statusCode, String resourcePath, String username, Integer offset, Integer limit, String sort) throws ApiException {
        ApiResponse<WebhookActivityResponse> localVarResp = getWebhookLogsWithHttpInfo(evApiKey, evAccessToken, startDate, endDate, endpointUrl, event, statusCode, resourcePath, username, offset, limit, sort);
        return localVarResp.getData();
    }

    /**
     * Get webhook logs
     * Returns the webhook logs for your account. Use the available query parameters to filter the listing of activity that is returned.  **NOTE:** Total Results will always return as 0 to avoid querying data you&#39;re not using and stay as performant as possible.   **Event Types**  Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). Not all event types may be allowed for your account type. These are the valid options for event types:  - resources.upload - resources.download - resources.delete - resources.createFolder - resources.rename - resources.move - resources.copy - resources.compress - resources.extract - shares.formSubmit 
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param startDate Earliest date of entries to include in list (optional)
     * @param endDate Latest date of entries to include in list (optional)
     * @param endpointUrl Webhook listener endpoint (optional)
     * @param event Type of activity that triggered the webhook attempt (optional)
     * @param statusCode Response code from the webhook endpoint (optional)
     * @param resourcePath Path of the resource that triggered the webhook attempt (optional)
     * @param username Filter by triggering username. (optional)
     * @param offset Records to skip before returning results. (optional)
     * @param limit Limit of the records list (optional)
     * @param sort Comma separated list sort params (optional)
     * @return ApiResponse&lt;WebhookActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookActivityResponse> getWebhookLogsWithHttpInfo(String evApiKey, String evAccessToken, OffsetDateTime startDate, OffsetDateTime endDate, URI endpointUrl, String event, Integer statusCode, String resourcePath, String username, Integer offset, Integer limit, String sort) throws ApiException {
        okhttp3.Call localVarCall = getWebhookLogsValidateBeforeCall(evApiKey, evAccessToken, startDate, endDate, endpointUrl, event, statusCode, resourcePath, username, offset, limit, sort, null);
        Type localVarReturnType = new TypeToken<WebhookActivityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get webhook logs (asynchronously)
     * Returns the webhook logs for your account. Use the available query parameters to filter the listing of activity that is returned.  **NOTE:** Total Results will always return as 0 to avoid querying data you&#39;re not using and stay as performant as possible.   **Event Types**  Webhooks are triggered by enabled event types for your account, which are configured on the [developer settings page](/docs/account/09-settings/06-developer-settings). Not all event types may be allowed for your account type. These are the valid options for event types:  - resources.upload - resources.download - resources.delete - resources.createFolder - resources.rename - resources.move - resources.copy - resources.compress - resources.extract - shares.formSubmit 
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param startDate Earliest date of entries to include in list (optional)
     * @param endDate Latest date of entries to include in list (optional)
     * @param endpointUrl Webhook listener endpoint (optional)
     * @param event Type of activity that triggered the webhook attempt (optional)
     * @param statusCode Response code from the webhook endpoint (optional)
     * @param resourcePath Path of the resource that triggered the webhook attempt (optional)
     * @param username Filter by triggering username. (optional)
     * @param offset Records to skip before returning results. (optional)
     * @param limit Limit of the records list (optional)
     * @param sort Comma separated list sort params (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebhookLogsAsync(String evApiKey, String evAccessToken, OffsetDateTime startDate, OffsetDateTime endDate, URI endpointUrl, String event, Integer statusCode, String resourcePath, String username, Integer offset, Integer limit, String sort, final ApiCallback<WebhookActivityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookLogsValidateBeforeCall(evApiKey, evAccessToken, startDate, endDate, endpointUrl, event, statusCode, resourcePath, username, offset, limit, sort, _callback);
        Type localVarReturnType = new TypeToken<WebhookActivityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
