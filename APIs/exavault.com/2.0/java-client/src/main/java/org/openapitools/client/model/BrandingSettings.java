/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BrandingSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BrandingSettings {
  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_CUSTOM_EMAIL = "customEmail";
  @SerializedName(SERIALIZED_NAME_CUSTOM_EMAIL)
  private String customEmail;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_LOGO_EXT = "logoExt";
  @SerializedName(SERIALIZED_NAME_LOGO_EXT)
  private String logoExt;

  public static final String SERIALIZED_NAME_THEME = "theme";
  @SerializedName(SERIALIZED_NAME_THEME)
  private String theme;

  public static final String SERIALIZED_NAME_VERIFIED_DOMAIN = "verifiedDomain";
  @SerializedName(SERIALIZED_NAME_VERIFIED_DOMAIN)
  private String verifiedDomain;

  public static final String SERIALIZED_NAME_VERIFIED_DOMAIN_ID = "verifiedDomainId";
  @SerializedName(SERIALIZED_NAME_VERIFIED_DOMAIN_ID)
  private String verifiedDomainId;

  public static final String SERIALIZED_NAME_VERIFIED_DOMAIN_VALID = "verifiedDomainValid";
  @SerializedName(SERIALIZED_NAME_VERIFIED_DOMAIN_VALID)
  private Boolean verifiedDomainValid;

  public BrandingSettings() {
  }

  public BrandingSettings companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Get companyName
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public BrandingSettings customEmail(String customEmail) {
    this.customEmail = customEmail;
    return this;
  }

  /**
   * Get customEmail
   * @return customEmail
   */
  @javax.annotation.Nullable
  public String getCustomEmail() {
    return customEmail;
  }

  public void setCustomEmail(String customEmail) {
    this.customEmail = customEmail;
  }


  public BrandingSettings logo(String logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }


  public BrandingSettings logoExt(String logoExt) {
    this.logoExt = logoExt;
    return this;
  }

  /**
   * Get logoExt
   * @return logoExt
   */
  @javax.annotation.Nullable
  public String getLogoExt() {
    return logoExt;
  }

  public void setLogoExt(String logoExt) {
    this.logoExt = logoExt;
  }


  public BrandingSettings theme(String theme) {
    this.theme = theme;
    return this;
  }

  /**
   * Get theme
   * @return theme
   */
  @javax.annotation.Nullable
  public String getTheme() {
    return theme;
  }

  public void setTheme(String theme) {
    this.theme = theme;
  }


  public BrandingSettings verifiedDomain(String verifiedDomain) {
    this.verifiedDomain = verifiedDomain;
    return this;
  }

  /**
   * Get verifiedDomain
   * @return verifiedDomain
   */
  @javax.annotation.Nullable
  public String getVerifiedDomain() {
    return verifiedDomain;
  }

  public void setVerifiedDomain(String verifiedDomain) {
    this.verifiedDomain = verifiedDomain;
  }


  public BrandingSettings verifiedDomainId(String verifiedDomainId) {
    this.verifiedDomainId = verifiedDomainId;
    return this;
  }

  /**
   * Get verifiedDomainId
   * @return verifiedDomainId
   */
  @javax.annotation.Nullable
  public String getVerifiedDomainId() {
    return verifiedDomainId;
  }

  public void setVerifiedDomainId(String verifiedDomainId) {
    this.verifiedDomainId = verifiedDomainId;
  }


  public BrandingSettings verifiedDomainValid(Boolean verifiedDomainValid) {
    this.verifiedDomainValid = verifiedDomainValid;
    return this;
  }

  /**
   * Get verifiedDomainValid
   * @return verifiedDomainValid
   */
  @javax.annotation.Nullable
  public Boolean getVerifiedDomainValid() {
    return verifiedDomainValid;
  }

  public void setVerifiedDomainValid(Boolean verifiedDomainValid) {
    this.verifiedDomainValid = verifiedDomainValid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrandingSettings brandingSettings = (BrandingSettings) o;
    return Objects.equals(this.companyName, brandingSettings.companyName) &&
        Objects.equals(this.customEmail, brandingSettings.customEmail) &&
        Objects.equals(this.logo, brandingSettings.logo) &&
        Objects.equals(this.logoExt, brandingSettings.logoExt) &&
        Objects.equals(this.theme, brandingSettings.theme) &&
        Objects.equals(this.verifiedDomain, brandingSettings.verifiedDomain) &&
        Objects.equals(this.verifiedDomainId, brandingSettings.verifiedDomainId) &&
        Objects.equals(this.verifiedDomainValid, brandingSettings.verifiedDomainValid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyName, customEmail, logo, logoExt, theme, verifiedDomain, verifiedDomainId, verifiedDomainValid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrandingSettings {\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    customEmail: ").append(toIndentedString(customEmail)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    logoExt: ").append(toIndentedString(logoExt)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    verifiedDomain: ").append(toIndentedString(verifiedDomain)).append("\n");
    sb.append("    verifiedDomainId: ").append(toIndentedString(verifiedDomainId)).append("\n");
    sb.append("    verifiedDomainValid: ").append(toIndentedString(verifiedDomainValid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("companyName");
    openapiFields.add("customEmail");
    openapiFields.add("logo");
    openapiFields.add("logoExt");
    openapiFields.add("theme");
    openapiFields.add("verifiedDomain");
    openapiFields.add("verifiedDomainId");
    openapiFields.add("verifiedDomainValid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BrandingSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BrandingSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrandingSettings is not found in the empty JSON string", BrandingSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BrandingSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BrandingSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if ((jsonObj.get("customEmail") != null && !jsonObj.get("customEmail").isJsonNull()) && !jsonObj.get("customEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customEmail").toString()));
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      if ((jsonObj.get("logoExt") != null && !jsonObj.get("logoExt").isJsonNull()) && !jsonObj.get("logoExt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logoExt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logoExt").toString()));
      }
      if ((jsonObj.get("theme") != null && !jsonObj.get("theme").isJsonNull()) && !jsonObj.get("theme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `theme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("theme").toString()));
      }
      if ((jsonObj.get("verifiedDomain") != null && !jsonObj.get("verifiedDomain").isJsonNull()) && !jsonObj.get("verifiedDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verifiedDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verifiedDomain").toString()));
      }
      if ((jsonObj.get("verifiedDomainId") != null && !jsonObj.get("verifiedDomainId").isJsonNull()) && !jsonObj.get("verifiedDomainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verifiedDomainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verifiedDomainId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrandingSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrandingSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrandingSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrandingSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<BrandingSettings>() {
           @Override
           public void write(JsonWriter out, BrandingSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BrandingSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BrandingSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BrandingSettings
   * @throws IOException if the JSON string is invalid with respect to BrandingSettings
   */
  public static BrandingSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrandingSettings.class);
  }

  /**
   * Convert an instance of BrandingSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

