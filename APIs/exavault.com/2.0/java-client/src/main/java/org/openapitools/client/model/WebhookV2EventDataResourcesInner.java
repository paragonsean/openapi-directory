/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookV2EventDataResourcesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebhookV2EventDataResourcesInner {
  public static final String SERIALIZED_NAME_ACCESSED_AT = "accessedAt";
  @SerializedName(SERIALIZED_NAME_ACCESSED_AT)
  private OffsetDateTime accessedAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_FILE_COUNT = "fileCount";
  @SerializedName(SERIALIZED_NAME_FILE_COUNT)
  private Integer fileCount;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private String hash;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PREVIEWABLE = "previewable";
  @SerializedName(SERIALIZED_NAME_PREVIEWABLE)
  private Boolean previewable;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_UPLOAD_DATE = "uploadDate";
  @SerializedName(SERIALIZED_NAME_UPLOAD_DATE)
  private OffsetDateTime uploadDate;

  public WebhookV2EventDataResourcesInner() {
  }

  public WebhookV2EventDataResourcesInner accessedAt(OffsetDateTime accessedAt) {
    this.accessedAt = accessedAt;
    return this;
  }

  /**
   * Date and time resource was most recently downloaded
   * @return accessedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAccessedAt() {
    return accessedAt;
  }

  public void setAccessedAt(OffsetDateTime accessedAt) {
    this.accessedAt = accessedAt;
  }


  public WebhookV2EventDataResourcesInner createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date and time of resource creation
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public WebhookV2EventDataResourcesInner createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Username who originally created resource
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public WebhookV2EventDataResourcesInner fileCount(Integer fileCount) {
    this.fileCount = fileCount;
    return this;
  }

  /**
   * Number of resources contained in this folder. If this is a file, fileCount is null
   * @return fileCount
   */
  @javax.annotation.Nullable
  public Integer getFileCount() {
    return fileCount;
  }

  public void setFileCount(Integer fileCount) {
    this.fileCount = fileCount;
  }


  public WebhookV2EventDataResourcesInner hash(String hash) {
    this.hash = hash;
    return this;
  }

  /**
   * Resource hash value
   * @return hash
   */
  @javax.annotation.Nullable
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }


  public WebhookV2EventDataResourcesInner id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Resource ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public WebhookV2EventDataResourcesInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Resource name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WebhookV2EventDataResourcesInner path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Full path to resource
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public WebhookV2EventDataResourcesInner previewable(Boolean previewable) {
    this.previewable = previewable;
    return this;
  }

  /**
   * Whether the resource can be previewed
   * @return previewable
   */
  @javax.annotation.Nullable
  public Boolean getPreviewable() {
    return previewable;
  }

  public void setPreviewable(Boolean previewable) {
    this.previewable = previewable;
  }


  public WebhookV2EventDataResourcesInner size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * Size of resource in bytes
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public WebhookV2EventDataResourcesInner type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of resource &#x60;file&#x60; or &#x60;dir&#x60;
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public WebhookV2EventDataResourcesInner updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Date and time resource was most recently changed
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public WebhookV2EventDataResourcesInner uploadDate(OffsetDateTime uploadDate) {
    this.uploadDate = uploadDate;
    return this;
  }

  /**
   * Date resource was first uploaded
   * @return uploadDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUploadDate() {
    return uploadDate;
  }

  public void setUploadDate(OffsetDateTime uploadDate) {
    this.uploadDate = uploadDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookV2EventDataResourcesInner webhookV2EventDataResourcesInner = (WebhookV2EventDataResourcesInner) o;
    return Objects.equals(this.accessedAt, webhookV2EventDataResourcesInner.accessedAt) &&
        Objects.equals(this.createdAt, webhookV2EventDataResourcesInner.createdAt) &&
        Objects.equals(this.createdBy, webhookV2EventDataResourcesInner.createdBy) &&
        Objects.equals(this.fileCount, webhookV2EventDataResourcesInner.fileCount) &&
        Objects.equals(this.hash, webhookV2EventDataResourcesInner.hash) &&
        Objects.equals(this.id, webhookV2EventDataResourcesInner.id) &&
        Objects.equals(this.name, webhookV2EventDataResourcesInner.name) &&
        Objects.equals(this.path, webhookV2EventDataResourcesInner.path) &&
        Objects.equals(this.previewable, webhookV2EventDataResourcesInner.previewable) &&
        Objects.equals(this.size, webhookV2EventDataResourcesInner.size) &&
        Objects.equals(this.type, webhookV2EventDataResourcesInner.type) &&
        Objects.equals(this.updatedAt, webhookV2EventDataResourcesInner.updatedAt) &&
        Objects.equals(this.uploadDate, webhookV2EventDataResourcesInner.uploadDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessedAt, createdAt, createdBy, fileCount, hash, id, name, path, previewable, size, type, updatedAt, uploadDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookV2EventDataResourcesInner {\n");
    sb.append("    accessedAt: ").append(toIndentedString(accessedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    fileCount: ").append(toIndentedString(fileCount)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    previewable: ").append(toIndentedString(previewable)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    uploadDate: ").append(toIndentedString(uploadDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessedAt");
    openapiFields.add("createdAt");
    openapiFields.add("createdBy");
    openapiFields.add("fileCount");
    openapiFields.add("hash");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("path");
    openapiFields.add("previewable");
    openapiFields.add("size");
    openapiFields.add("type");
    openapiFields.add("updatedAt");
    openapiFields.add("uploadDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookV2EventDataResourcesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookV2EventDataResourcesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookV2EventDataResourcesInner is not found in the empty JSON string", WebhookV2EventDataResourcesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookV2EventDataResourcesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookV2EventDataResourcesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("hash") != null && !jsonObj.get("hash").isJsonNull()) && !jsonObj.get("hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookV2EventDataResourcesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookV2EventDataResourcesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookV2EventDataResourcesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookV2EventDataResourcesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookV2EventDataResourcesInner>() {
           @Override
           public void write(JsonWriter out, WebhookV2EventDataResourcesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookV2EventDataResourcesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookV2EventDataResourcesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookV2EventDataResourcesInner
   * @throws IOException if the JSON string is invalid with respect to WebhookV2EventDataResourcesInner
   */
  public static WebhookV2EventDataResourcesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookV2EventDataResourcesInner.class);
  }

  /**
   * Convert an instance of WebhookV2EventDataResourcesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

