/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Quota
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Quota {
  public static final String SERIALIZED_NAME_BANDWIDTH_LIMIT = "bandwidthLimit";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_LIMIT)
  private Long bandwidthLimit;

  public static final String SERIALIZED_NAME_BANDWIDTH_USED = "bandwidthUsed";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_USED)
  private Long bandwidthUsed;

  public static final String SERIALIZED_NAME_DISK_LIMIT = "diskLimit";
  @SerializedName(SERIALIZED_NAME_DISK_LIMIT)
  private Long diskLimit;

  public static final String SERIALIZED_NAME_DISK_USED = "diskUsed";
  @SerializedName(SERIALIZED_NAME_DISK_USED)
  private Long diskUsed;

  public static final String SERIALIZED_NAME_NOTICE_ENABLED = "noticeEnabled";
  @SerializedName(SERIALIZED_NAME_NOTICE_ENABLED)
  private Boolean noticeEnabled;

  public static final String SERIALIZED_NAME_NOTICE_THRESHOLD = "noticeThreshold";
  @SerializedName(SERIALIZED_NAME_NOTICE_THRESHOLD)
  private Integer noticeThreshold;

  public static final String SERIALIZED_NAME_TRANSACTIONS_LIMIT = "transactionsLimit";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS_LIMIT)
  private Integer transactionsLimit;

  public static final String SERIALIZED_NAME_TRANSACTIONS_NOTICE_ENABLED = "transactionsNoticeEnabled";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS_NOTICE_ENABLED)
  private Boolean transactionsNoticeEnabled;

  public static final String SERIALIZED_NAME_TRANSACTIONS_NOTICE_THRESHOLD = "transactionsNoticeThreshold";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS_NOTICE_THRESHOLD)
  private Integer transactionsNoticeThreshold;

  public Quota() {
  }

  public Quota bandwidthLimit(Long bandwidthLimit) {
    this.bandwidthLimit = bandwidthLimit;
    return this;
  }

  /**
   * Total number of bytes that can be transferred per month.
   * @return bandwidthLimit
   */
  @javax.annotation.Nullable
  public Long getBandwidthLimit() {
    return bandwidthLimit;
  }

  public void setBandwidthLimit(Long bandwidthLimit) {
    this.bandwidthLimit = bandwidthLimit;
  }


  public Quota bandwidthUsed(Long bandwidthUsed) {
    this.bandwidthUsed = bandwidthUsed;
    return this;
  }

  /**
   * Number of bytes transferred this month.
   * @return bandwidthUsed
   */
  @javax.annotation.Nullable
  public Long getBandwidthUsed() {
    return bandwidthUsed;
  }

  public void setBandwidthUsed(Long bandwidthUsed) {
    this.bandwidthUsed = bandwidthUsed;
  }


  public Quota diskLimit(Long diskLimit) {
    this.diskLimit = diskLimit;
    return this;
  }

  /**
   * Amount of disk space that the account has available to it. This may be increased by upgrading to a larger plan.
   * @return diskLimit
   */
  @javax.annotation.Nullable
  public Long getDiskLimit() {
    return diskLimit;
  }

  public void setDiskLimit(Long diskLimit) {
    this.diskLimit = diskLimit;
  }


  public Quota diskUsed(Long diskUsed) {
    this.diskUsed = diskUsed;
    return this;
  }

  /**
   * Amount of disk space currently in use.
   * @return diskUsed
   */
  @javax.annotation.Nullable
  public Long getDiskUsed() {
    return diskUsed;
  }

  public void setDiskUsed(Long diskUsed) {
    this.diskUsed = diskUsed;
  }


  public Quota noticeEnabled(Boolean noticeEnabled) {
    this.noticeEnabled = noticeEnabled;
    return this;
  }

  /**
   * Should a quota warning be sent to the account owner when a threshold level of space utilization is reached?
   * @return noticeEnabled
   */
  @javax.annotation.Nullable
  public Boolean getNoticeEnabled() {
    return noticeEnabled;
  }

  public void setNoticeEnabled(Boolean noticeEnabled) {
    this.noticeEnabled = noticeEnabled;
  }


  public Quota noticeThreshold(Integer noticeThreshold) {
    this.noticeThreshold = noticeThreshold;
    return this;
  }

  /**
   * Treshold that triggers a quota notification. This represents the \&quot;percent full\&quot; your account must be before the quota notification is generated.
   * @return noticeThreshold
   */
  @javax.annotation.Nullable
  public Integer getNoticeThreshold() {
    return noticeThreshold;
  }

  public void setNoticeThreshold(Integer noticeThreshold) {
    this.noticeThreshold = noticeThreshold;
  }


  public Quota transactionsLimit(Integer transactionsLimit) {
    this.transactionsLimit = transactionsLimit;
    return this;
  }

  /**
   * Total number of transactions allowed in a 24-hour period.
   * @return transactionsLimit
   */
  @javax.annotation.Nullable
  public Integer getTransactionsLimit() {
    return transactionsLimit;
  }

  public void setTransactionsLimit(Integer transactionsLimit) {
    this.transactionsLimit = transactionsLimit;
  }


  public Quota transactionsNoticeEnabled(Boolean transactionsNoticeEnabled) {
    this.transactionsNoticeEnabled = transactionsNoticeEnabled;
    return this;
  }

  /**
   * Whether an email should be sent to the account owner up to once per day if transaction usage exceeds &#x60;transactionsNoticeThreshold&#x60; value.
   * @return transactionsNoticeEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTransactionsNoticeEnabled() {
    return transactionsNoticeEnabled;
  }

  public void setTransactionsNoticeEnabled(Boolean transactionsNoticeEnabled) {
    this.transactionsNoticeEnabled = transactionsNoticeEnabled;
  }


  public Quota transactionsNoticeThreshold(Integer transactionsNoticeThreshold) {
    this.transactionsNoticeThreshold = transactionsNoticeThreshold;
    return this;
  }

  /**
   * Percent of daily transactions limit that will trigger an email if activity exceeds it.
   * @return transactionsNoticeThreshold
   */
  @javax.annotation.Nullable
  public Integer getTransactionsNoticeThreshold() {
    return transactionsNoticeThreshold;
  }

  public void setTransactionsNoticeThreshold(Integer transactionsNoticeThreshold) {
    this.transactionsNoticeThreshold = transactionsNoticeThreshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Quota quota = (Quota) o;
    return Objects.equals(this.bandwidthLimit, quota.bandwidthLimit) &&
        Objects.equals(this.bandwidthUsed, quota.bandwidthUsed) &&
        Objects.equals(this.diskLimit, quota.diskLimit) &&
        Objects.equals(this.diskUsed, quota.diskUsed) &&
        Objects.equals(this.noticeEnabled, quota.noticeEnabled) &&
        Objects.equals(this.noticeThreshold, quota.noticeThreshold) &&
        Objects.equals(this.transactionsLimit, quota.transactionsLimit) &&
        Objects.equals(this.transactionsNoticeEnabled, quota.transactionsNoticeEnabled) &&
        Objects.equals(this.transactionsNoticeThreshold, quota.transactionsNoticeThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidthLimit, bandwidthUsed, diskLimit, diskUsed, noticeEnabled, noticeThreshold, transactionsLimit, transactionsNoticeEnabled, transactionsNoticeThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Quota {\n");
    sb.append("    bandwidthLimit: ").append(toIndentedString(bandwidthLimit)).append("\n");
    sb.append("    bandwidthUsed: ").append(toIndentedString(bandwidthUsed)).append("\n");
    sb.append("    diskLimit: ").append(toIndentedString(diskLimit)).append("\n");
    sb.append("    diskUsed: ").append(toIndentedString(diskUsed)).append("\n");
    sb.append("    noticeEnabled: ").append(toIndentedString(noticeEnabled)).append("\n");
    sb.append("    noticeThreshold: ").append(toIndentedString(noticeThreshold)).append("\n");
    sb.append("    transactionsLimit: ").append(toIndentedString(transactionsLimit)).append("\n");
    sb.append("    transactionsNoticeEnabled: ").append(toIndentedString(transactionsNoticeEnabled)).append("\n");
    sb.append("    transactionsNoticeThreshold: ").append(toIndentedString(transactionsNoticeThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bandwidthLimit");
    openapiFields.add("bandwidthUsed");
    openapiFields.add("diskLimit");
    openapiFields.add("diskUsed");
    openapiFields.add("noticeEnabled");
    openapiFields.add("noticeThreshold");
    openapiFields.add("transactionsLimit");
    openapiFields.add("transactionsNoticeEnabled");
    openapiFields.add("transactionsNoticeThreshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Quota
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Quota.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Quota is not found in the empty JSON string", Quota.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Quota.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Quota` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Quota.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Quota' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Quota> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Quota.class));

       return (TypeAdapter<T>) new TypeAdapter<Quota>() {
           @Override
           public void write(JsonWriter out, Quota value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Quota read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Quota given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Quota
   * @throws IOException if the JSON string is invalid with respect to Quota
   */
  public static Quota fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Quota.class);
  }

  /**
   * Convert an instance of Quota to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

