/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccessMode;
import org.openapitools.client.model.ShareMessage;
import org.openapitools.client.model.ShareRecipient;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Attributes of the share including the name, path and share recipients. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShareAttributes {
  public static final String SERIALIZED_NAME_ACCESS_DESCRIPTION = "accessDescription";
  @SerializedName(SERIALIZED_NAME_ACCESS_DESCRIPTION)
  private String accessDescription;

  public static final String SERIALIZED_NAME_ACCESS_MODE = "accessMode";
  @SerializedName(SERIALIZED_NAME_ACCESS_MODE)
  private AccessMode accessMode;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_EMBED = "embed";
  @SerializedName(SERIALIZED_NAME_EMBED)
  private Boolean embed;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private String expiration;

  public static final String SERIALIZED_NAME_EXPIRED = "expired";
  @SerializedName(SERIALIZED_NAME_EXPIRED)
  private Boolean expired;

  public static final String SERIALIZED_NAME_FILE_DROP_CREATE_FOLDERS = "fileDropCreateFolders";
  @SerializedName(SERIALIZED_NAME_FILE_DROP_CREATE_FOLDERS)
  private Boolean fileDropCreateFolders;

  public static final String SERIALIZED_NAME_FORM_ID = "formId";
  @SerializedName(SERIALIZED_NAME_FORM_ID)
  private Integer formId;

  public static final String SERIALIZED_NAME_HAS_NOTIFICATION = "hasNotification";
  @SerializedName(SERIALIZED_NAME_HAS_NOTIFICATION)
  private Boolean hasNotification;

  public static final String SERIALIZED_NAME_HAS_PASSWORD = "hasPassword";
  @SerializedName(SERIALIZED_NAME_HAS_PASSWORD)
  private Boolean hasPassword;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private String hash;

  public static final String SERIALIZED_NAME_INHERITED = "inherited";
  @SerializedName(SERIALIZED_NAME_INHERITED)
  private Boolean inherited;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<ShareMessage> messages = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER_HASH = "ownerHash";
  @SerializedName(SERIALIZED_NAME_OWNER_HASH)
  private String ownerHash;

  public static final String SERIALIZED_NAME_PATHS = "paths";
  @SerializedName(SERIALIZED_NAME_PATHS)
  private List<String> paths = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<ShareRecipient> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRE_EMAIL = "requireEmail";
  @SerializedName(SERIALIZED_NAME_REQUIRE_EMAIL)
  private Boolean requireEmail;

  public static final String SERIALIZED_NAME_RESENT = "resent";
  @SerializedName(SERIALIZED_NAME_RESENT)
  private OffsetDateTime resent;

  /**
   * Share activity status. Can be active (1) or deactivated (0).
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    StatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(Integer value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Checks recipient received status and returns whether it&#39;s been received (&#x60;complete&#x60;,) partial received (&#x60;incomplete&#x60;,) or not received yet (&#x60;pending&#x60;.)
   */
  @JsonAdapter(TrackingStatusEnum.Adapter.class)
  public enum TrackingStatusEnum {
    COMPLETE("complete"),
    
    INCOMPLETE("incomplete"),
    
    PENDING("pending");

    private String value;

    TrackingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrackingStatusEnum fromValue(String value) {
      for (TrackingStatusEnum b : TrackingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrackingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrackingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrackingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrackingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrackingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRACKING_STATUS = "trackingStatus";
  @SerializedName(SERIALIZED_NAME_TRACKING_STATUS)
  private TrackingStatusEnum trackingStatus;

  /**
   * Type of share.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SHARED_FOLDER("shared_folder"),
    
    SEND("send"),
    
    RECEIVE("receive");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ShareAttributes() {
  }

  public ShareAttributes accessDescription(String accessDescription) {
    this.accessDescription = accessDescription;
    return this;
  }

  /**
   * Description of the share access rights.
   * @return accessDescription
   */
  @javax.annotation.Nullable
  public String getAccessDescription() {
    return accessDescription;
  }

  public void setAccessDescription(String accessDescription) {
    this.accessDescription = accessDescription;
  }


  public ShareAttributes accessMode(AccessMode accessMode) {
    this.accessMode = accessMode;
    return this;
  }

  /**
   * Get accessMode
   * @return accessMode
   */
  @javax.annotation.Nullable
  public AccessMode getAccessMode() {
    return accessMode;
  }

  public void setAccessMode(AccessMode accessMode) {
    this.accessMode = accessMode;
  }


  public ShareAttributes created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Timestamp of share creation.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public ShareAttributes embed(Boolean embed) {
    this.embed = embed;
    return this;
  }

  /**
   * True if share can be embedded.
   * @return embed
   */
  @javax.annotation.Nullable
  public Boolean getEmbed() {
    return embed;
  }

  public void setEmbed(Boolean embed) {
    this.embed = embed;
  }


  public ShareAttributes expiration(String expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * Expiration date of the share.
   * @return expiration
   */
  @javax.annotation.Nullable
  public String getExpiration() {
    return expiration;
  }

  public void setExpiration(String expiration) {
    this.expiration = expiration;
  }


  public ShareAttributes expired(Boolean expired) {
    this.expired = expired;
    return this;
  }

  /**
   * True if the share has expired.
   * @return expired
   */
  @javax.annotation.Nullable
  public Boolean getExpired() {
    return expired;
  }

  public void setExpired(Boolean expired) {
    this.expired = expired;
  }


  public ShareAttributes fileDropCreateFolders(Boolean fileDropCreateFolders) {
    this.fileDropCreateFolders = fileDropCreateFolders;
    return this;
  }

  /**
   * Flag to show if separate folders should be created for each file upload to receive folder.
   * @return fileDropCreateFolders
   */
  @javax.annotation.Nullable
  public Boolean getFileDropCreateFolders() {
    return fileDropCreateFolders;
  }

  public void setFileDropCreateFolders(Boolean fileDropCreateFolders) {
    this.fileDropCreateFolders = fileDropCreateFolders;
  }


  public ShareAttributes formId(Integer formId) {
    this.formId = formId;
    return this;
  }

  /**
   * ID of the form.
   * @return formId
   */
  @javax.annotation.Nullable
  public Integer getFormId() {
    return formId;
  }

  public void setFormId(Integer formId) {
    this.formId = formId;
  }


  public ShareAttributes hasNotification(Boolean hasNotification) {
    this.hasNotification = hasNotification;
    return this;
  }

  /**
   * True if share has notification.
   * @return hasNotification
   */
  @javax.annotation.Nullable
  public Boolean getHasNotification() {
    return hasNotification;
  }

  public void setHasNotification(Boolean hasNotification) {
    this.hasNotification = hasNotification;
  }


  public ShareAttributes hasPassword(Boolean hasPassword) {
    this.hasPassword = hasPassword;
    return this;
  }

  /**
   * True if the share has password.
   * @return hasPassword
   */
  @javax.annotation.Nullable
  public Boolean getHasPassword() {
    return hasPassword;
  }

  public void setHasPassword(Boolean hasPassword) {
    this.hasPassword = hasPassword;
  }


  public ShareAttributes hash(String hash) {
    this.hash = hash;
    return this;
  }

  /**
   * Share hash.
   * @return hash
   */
  @javax.annotation.Nullable
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }


  public ShareAttributes inherited(Boolean inherited) {
    this.inherited = inherited;
    return this;
  }

  /**
   * True if share inherited from parent folder.
   * @return inherited
   */
  @javax.annotation.Nullable
  public Boolean getInherited() {
    return inherited;
  }

  public void setInherited(Boolean inherited) {
    this.inherited = inherited;
  }


  public ShareAttributes messages(List<ShareMessage> messages) {
    this.messages = messages;
    return this;
  }

  public ShareAttributes addMessagesItem(ShareMessage messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * Array of invitation messages.
   * @return messages
   */
  @javax.annotation.Nullable
  public List<ShareMessage> getMessages() {
    return messages;
  }

  public void setMessages(List<ShareMessage> messages) {
    this.messages = messages;
  }


  public ShareAttributes modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

  /**
   * Timestamp of share modification. Can be &#x60;null&#x60; if it wasn&#39;t modified.
   * @return modified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public ShareAttributes name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Share name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ShareAttributes ownerHash(String ownerHash) {
    this.ownerHash = ownerHash;
    return this;
  }

  /**
   * Share owner&#39;s hash.
   * @return ownerHash
   */
  @javax.annotation.Nullable
  public String getOwnerHash() {
    return ownerHash;
  }

  public void setOwnerHash(String ownerHash) {
    this.ownerHash = ownerHash;
  }


  public ShareAttributes paths(List<String> paths) {
    this.paths = paths;
    return this;
  }

  public ShareAttributes addPathsItem(String pathsItem) {
    if (this.paths == null) {
      this.paths = new ArrayList<>();
    }
    this.paths.add(pathsItem);
    return this;
  }

  /**
   * Path to the shared resource in your account.
   * @return paths
   */
  @javax.annotation.Nullable
  public List<String> getPaths() {
    return paths;
  }

  public void setPaths(List<String> paths) {
    this.paths = paths;
  }


  public ShareAttributes _public(Boolean _public) {
    this._public = _public;
    return this;
  }

  /**
   * True if the share has a public url.
   * @return _public
   */
  @javax.annotation.Nullable
  public Boolean getPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  public ShareAttributes recipients(List<ShareRecipient> recipients) {
    this.recipients = recipients;
    return this;
  }

  public ShareAttributes addRecipientsItem(ShareRecipient recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

  /**
   * Array of recipients.
   * @return recipients
   */
  @javax.annotation.Nullable
  public List<ShareRecipient> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<ShareRecipient> recipients) {
    this.recipients = recipients;
  }


  public ShareAttributes requireEmail(Boolean requireEmail) {
    this.requireEmail = requireEmail;
    return this;
  }

  /**
   * True if share requires email to access.
   * @return requireEmail
   */
  @javax.annotation.Nullable
  public Boolean getRequireEmail() {
    return requireEmail;
  }

  public void setRequireEmail(Boolean requireEmail) {
    this.requireEmail = requireEmail;
  }


  public ShareAttributes resent(OffsetDateTime resent) {
    this.resent = resent;
    return this;
  }

  /**
   * Invitations resent date. Can be &#x60;null&#x60; if resent never happened.
   * @return resent
   */
  @javax.annotation.Nullable
  public OffsetDateTime getResent() {
    return resent;
  }

  public void setResent(OffsetDateTime resent) {
    this.resent = resent;
  }


  public ShareAttributes status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Share activity status. Can be active (1) or deactivated (0).
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ShareAttributes trackingStatus(TrackingStatusEnum trackingStatus) {
    this.trackingStatus = trackingStatus;
    return this;
  }

  /**
   * Checks recipient received status and returns whether it&#39;s been received (&#x60;complete&#x60;,) partial received (&#x60;incomplete&#x60;,) or not received yet (&#x60;pending&#x60;.)
   * @return trackingStatus
   */
  @javax.annotation.Nullable
  public TrackingStatusEnum getTrackingStatus() {
    return trackingStatus;
  }

  public void setTrackingStatus(TrackingStatusEnum trackingStatus) {
    this.trackingStatus = trackingStatus;
  }


  public ShareAttributes type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of share.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShareAttributes shareAttributes = (ShareAttributes) o;
    return Objects.equals(this.accessDescription, shareAttributes.accessDescription) &&
        Objects.equals(this.accessMode, shareAttributes.accessMode) &&
        Objects.equals(this.created, shareAttributes.created) &&
        Objects.equals(this.embed, shareAttributes.embed) &&
        Objects.equals(this.expiration, shareAttributes.expiration) &&
        Objects.equals(this.expired, shareAttributes.expired) &&
        Objects.equals(this.fileDropCreateFolders, shareAttributes.fileDropCreateFolders) &&
        Objects.equals(this.formId, shareAttributes.formId) &&
        Objects.equals(this.hasNotification, shareAttributes.hasNotification) &&
        Objects.equals(this.hasPassword, shareAttributes.hasPassword) &&
        Objects.equals(this.hash, shareAttributes.hash) &&
        Objects.equals(this.inherited, shareAttributes.inherited) &&
        Objects.equals(this.messages, shareAttributes.messages) &&
        Objects.equals(this.modified, shareAttributes.modified) &&
        Objects.equals(this.name, shareAttributes.name) &&
        Objects.equals(this.ownerHash, shareAttributes.ownerHash) &&
        Objects.equals(this.paths, shareAttributes.paths) &&
        Objects.equals(this._public, shareAttributes._public) &&
        Objects.equals(this.recipients, shareAttributes.recipients) &&
        Objects.equals(this.requireEmail, shareAttributes.requireEmail) &&
        Objects.equals(this.resent, shareAttributes.resent) &&
        Objects.equals(this.status, shareAttributes.status) &&
        Objects.equals(this.trackingStatus, shareAttributes.trackingStatus) &&
        Objects.equals(this.type, shareAttributes.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessDescription, accessMode, created, embed, expiration, expired, fileDropCreateFolders, formId, hasNotification, hasPassword, hash, inherited, messages, modified, name, ownerHash, paths, _public, recipients, requireEmail, resent, status, trackingStatus, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShareAttributes {\n");
    sb.append("    accessDescription: ").append(toIndentedString(accessDescription)).append("\n");
    sb.append("    accessMode: ").append(toIndentedString(accessMode)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    fileDropCreateFolders: ").append(toIndentedString(fileDropCreateFolders)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    hasNotification: ").append(toIndentedString(hasNotification)).append("\n");
    sb.append("    hasPassword: ").append(toIndentedString(hasPassword)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    inherited: ").append(toIndentedString(inherited)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownerHash: ").append(toIndentedString(ownerHash)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    requireEmail: ").append(toIndentedString(requireEmail)).append("\n");
    sb.append("    resent: ").append(toIndentedString(resent)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trackingStatus: ").append(toIndentedString(trackingStatus)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessDescription");
    openapiFields.add("accessMode");
    openapiFields.add("created");
    openapiFields.add("embed");
    openapiFields.add("expiration");
    openapiFields.add("expired");
    openapiFields.add("fileDropCreateFolders");
    openapiFields.add("formId");
    openapiFields.add("hasNotification");
    openapiFields.add("hasPassword");
    openapiFields.add("hash");
    openapiFields.add("inherited");
    openapiFields.add("messages");
    openapiFields.add("modified");
    openapiFields.add("name");
    openapiFields.add("ownerHash");
    openapiFields.add("paths");
    openapiFields.add("public");
    openapiFields.add("recipients");
    openapiFields.add("requireEmail");
    openapiFields.add("resent");
    openapiFields.add("status");
    openapiFields.add("trackingStatus");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShareAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShareAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShareAttributes is not found in the empty JSON string", ShareAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShareAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShareAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessDescription") != null && !jsonObj.get("accessDescription").isJsonNull()) && !jsonObj.get("accessDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessDescription").toString()));
      }
      // validate the optional field `accessMode`
      if (jsonObj.get("accessMode") != null && !jsonObj.get("accessMode").isJsonNull()) {
        AccessMode.validateJsonElement(jsonObj.get("accessMode"));
      }
      if ((jsonObj.get("expiration") != null && !jsonObj.get("expiration").isJsonNull()) && !jsonObj.get("expiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiration").toString()));
      }
      if ((jsonObj.get("hash") != null && !jsonObj.get("hash").isJsonNull()) && !jsonObj.get("hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash").toString()));
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            ShareMessage.validateJsonElement(jsonArraymessages.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ownerHash") != null && !jsonObj.get("ownerHash").isJsonNull()) && !jsonObj.get("ownerHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerHash").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("paths") != null && !jsonObj.get("paths").isJsonNull() && !jsonObj.get("paths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `paths` to be an array in the JSON string but got `%s`", jsonObj.get("paths").toString()));
      }
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
        if (jsonArrayrecipients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recipients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
          }

          // validate the optional field `recipients` (array)
          for (int i = 0; i < jsonArrayrecipients.size(); i++) {
            ShareRecipient.validateJsonElement(jsonArrayrecipients.get(i));
          };
        }
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("trackingStatus") != null && !jsonObj.get("trackingStatus").isJsonNull()) && !jsonObj.get("trackingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingStatus").toString()));
      }
      // validate the optional field `trackingStatus`
      if (jsonObj.get("trackingStatus") != null && !jsonObj.get("trackingStatus").isJsonNull()) {
        TrackingStatusEnum.validateJsonElement(jsonObj.get("trackingStatus"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShareAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShareAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShareAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShareAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<ShareAttributes>() {
           @Override
           public void write(JsonWriter out, ShareAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShareAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShareAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShareAttributes
   * @throws IOException if the JSON string is invalid with respect to ShareAttributes
   */
  public static ShareAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShareAttributes.class);
  }

  /**
   * Convert an instance of ShareAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

