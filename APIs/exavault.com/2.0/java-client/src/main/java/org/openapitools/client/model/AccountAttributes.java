/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountAttributesAllowedIpInner;
import org.openapitools.client.model.BrandingSettings;
import org.openapitools.client.model.PlanDetails;
import org.openapitools.client.model.Quota;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountAttributes {
  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_ACCOUNT_ONBOARDING = "accountOnboarding";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ONBOARDING)
  private Boolean accountOnboarding;

  public static final String SERIALIZED_NAME_ALLOWED_IP = "allowedIp";
  @SerializedName(SERIALIZED_NAME_ALLOWED_IP)
  private List<AccountAttributesAllowedIpInner> allowedIp = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRANDING = "branding";
  @SerializedName(SERIALIZED_NAME_BRANDING)
  private Boolean branding;

  public static final String SERIALIZED_NAME_BRANDING_SETTINGS = "brandingSettings";
  @SerializedName(SERIALIZED_NAME_BRANDING_SETTINGS)
  private BrandingSettings brandingSettings;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private Integer clientId;

  public static final String SERIALIZED_NAME_COMPLEX_PASSWORDS = "complexPasswords";
  @SerializedName(SERIALIZED_NAME_COMPLEX_PASSWORDS)
  private Boolean complexPasswords;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CUSTOM_DOMAIN = "customDomain";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DOMAIN)
  private Boolean customDomain;

  public static final String SERIALIZED_NAME_CUSTOM_SIGNATURE = "customSignature";
  @SerializedName(SERIALIZED_NAME_CUSTOM_SIGNATURE)
  private String customSignature;

  public static final String SERIALIZED_NAME_EXTERNAL_DOMAINS = "externalDomains";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DOMAINS)
  private List<String> externalDomains = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_USERS = "maxUsers";
  @SerializedName(SERIALIZED_NAME_MAX_USERS)
  private Integer maxUsers;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_PLAN_DETAILS = "planDetails";
  @SerializedName(SERIALIZED_NAME_PLAN_DETAILS)
  private PlanDetails planDetails;

  public static final String SERIALIZED_NAME_QUOTA = "quota";
  @SerializedName(SERIALIZED_NAME_QUOTA)
  private Quota quota;

  public static final String SERIALIZED_NAME_SECURE_ONLY = "secureOnly";
  @SerializedName(SERIALIZED_NAME_SECURE_ONLY)
  private Boolean secureOnly;

  public static final String SERIALIZED_NAME_SHOW_REFERRAL_LINKS = "showReferralLinks";
  @SerializedName(SERIALIZED_NAME_SHOW_REFERRAL_LINKS)
  private Boolean showReferralLinks;

  /**
   * Account status flag. A one (1) means the account is active; zero (0) means it is suspended.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NUMBER_1(1),
    
    NUMBER_0(0);

    private Integer value;

    StatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(Integer value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_USER_COUNT = "userCount";
  @SerializedName(SERIALIZED_NAME_USER_COUNT)
  private Integer userCount;

  public static final String SERIALIZED_NAME_WELCOME_EMAIL_CONTENT = "welcomeEmailContent";
  @SerializedName(SERIALIZED_NAME_WELCOME_EMAIL_CONTENT)
  private String welcomeEmailContent;

  public static final String SERIALIZED_NAME_WELCOME_EMAIL_SUBJECT = "welcomeEmailSubject";
  @SerializedName(SERIALIZED_NAME_WELCOME_EMAIL_SUBJECT)
  private String welcomeEmailSubject;

  public AccountAttributes() {
  }

  public AccountAttributes accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * Name of the account
   * @return accountName
   */
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public AccountAttributes accountOnboarding(Boolean accountOnboarding) {
    this.accountOnboarding = accountOnboarding;
    return this;
  }

  /**
   * Whether the web application onboarding help is enabled for new users in the account.
   * @return accountOnboarding
   */
  @javax.annotation.Nullable
  public Boolean getAccountOnboarding() {
    return accountOnboarding;
  }

  public void setAccountOnboarding(Boolean accountOnboarding) {
    this.accountOnboarding = accountOnboarding;
  }


  public AccountAttributes allowedIp(List<AccountAttributesAllowedIpInner> allowedIp) {
    this.allowedIp = allowedIp;
    return this;
  }

  public AccountAttributes addAllowedIpItem(AccountAttributesAllowedIpInner allowedIpItem) {
    if (this.allowedIp == null) {
      this.allowedIp = new ArrayList<>();
    }
    this.allowedIp.add(allowedIpItem);
    return this;
  }

  /**
   * Range of IP addresses allowed to access this account.
   * @return allowedIp
   */
  @javax.annotation.Nullable
  public List<AccountAttributesAllowedIpInner> getAllowedIp() {
    return allowedIp;
  }

  public void setAllowedIp(List<AccountAttributesAllowedIpInner> allowedIp) {
    this.allowedIp = allowedIp;
  }


  public AccountAttributes branding(Boolean branding) {
    this.branding = branding;
    return this;
  }

  /**
   * Branding flag. Set to &#x60;true&#x60; if the account has branding functionality enabled.
   * @return branding
   */
  @javax.annotation.Nullable
  public Boolean getBranding() {
    return branding;
  }

  public void setBranding(Boolean branding) {
    this.branding = branding;
  }


  public AccountAttributes brandingSettings(BrandingSettings brandingSettings) {
    this.brandingSettings = brandingSettings;
    return this;
  }

  /**
   * Get brandingSettings
   * @return brandingSettings
   */
  @javax.annotation.Nullable
  public BrandingSettings getBrandingSettings() {
    return brandingSettings;
  }

  public void setBrandingSettings(BrandingSettings brandingSettings) {
    this.brandingSettings = brandingSettings;
  }


  public AccountAttributes clientId(Integer clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * (ExaVault Use Only) Internal ID of the account in CMS.
   * @return clientId
   */
  @javax.annotation.Nullable
  public Integer getClientId() {
    return clientId;
  }

  public void setClientId(Integer clientId) {
    this.clientId = clientId;
  }


  public AccountAttributes complexPasswords(Boolean complexPasswords) {
    this.complexPasswords = complexPasswords;
    return this;
  }

  /**
   * Flag to indicate whether the account requires complex passwords. Set to &#x60;true&#x60; to require complex passwords on all users and shares.
   * @return complexPasswords
   */
  @javax.annotation.Nullable
  public Boolean getComplexPasswords() {
    return complexPasswords;
  }

  public void setComplexPasswords(Boolean complexPasswords) {
    this.complexPasswords = complexPasswords;
  }


  public AccountAttributes created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Timestamp of account creation.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public AccountAttributes customDomain(Boolean customDomain) {
    this.customDomain = customDomain;
    return this;
  }

  /**
   * Custom domain flag. Set to &#x60;true&#x60; if account type allows custom domain functionality.
   * @return customDomain
   */
  @javax.annotation.Nullable
  public Boolean getCustomDomain() {
    return customDomain;
  }

  public void setCustomDomain(Boolean customDomain) {
    this.customDomain = customDomain;
  }


  public AccountAttributes customSignature(String customSignature) {
    this.customSignature = customSignature;
    return this;
  }

  /**
   * Custom signature for all account emails users or recipients will receive.
   * @return customSignature
   */
  @javax.annotation.Nullable
  public String getCustomSignature() {
    return customSignature;
  }

  public void setCustomSignature(String customSignature) {
    this.customSignature = customSignature;
  }


  public AccountAttributes externalDomains(List<String> externalDomains) {
    this.externalDomains = externalDomains;
    return this;
  }

  public AccountAttributes addExternalDomainsItem(String externalDomainsItem) {
    if (this.externalDomains == null) {
      this.externalDomains = new ArrayList<>();
    }
    this.externalDomains.add(externalDomainsItem);
    return this;
  }

  /**
   * Custom domain used to brand this account.
   * @return externalDomains
   */
  @javax.annotation.Nullable
  public List<String> getExternalDomains() {
    return externalDomains;
  }

  public void setExternalDomains(List<String> externalDomains) {
    this.externalDomains = externalDomains;
  }


  public AccountAttributes maxUsers(Integer maxUsers) {
    this.maxUsers = maxUsers;
    return this;
  }

  /**
   * Maximum number of users the account can have. This can be increased by contacting ExaVault Support.
   * @return maxUsers
   */
  @javax.annotation.Nullable
  public Integer getMaxUsers() {
    return maxUsers;
  }

  public void setMaxUsers(Integer maxUsers) {
    this.maxUsers = maxUsers;
  }


  public AccountAttributes modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

  /**
   * Timestamp of account modification.
   * @return modified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public AccountAttributes planDetails(PlanDetails planDetails) {
    this.planDetails = planDetails;
    return this;
  }

  /**
   * Get planDetails
   * @return planDetails
   */
  @javax.annotation.Nullable
  public PlanDetails getPlanDetails() {
    return planDetails;
  }

  public void setPlanDetails(PlanDetails planDetails) {
    this.planDetails = planDetails;
  }


  public AccountAttributes quota(Quota quota) {
    this.quota = quota;
    return this;
  }

  /**
   * Get quota
   * @return quota
   */
  @javax.annotation.Nullable
  public Quota getQuota() {
    return quota;
  }

  public void setQuota(Quota quota) {
    this.quota = quota;
  }


  public AccountAttributes secureOnly(Boolean secureOnly) {
    this.secureOnly = secureOnly;
    return this;
  }

  /**
   * Flag to indicate whether the account disables connections via insecure protocols (e.g. FTP). Set to &#x60;true&#x60; to disable all traffic over port 21.
   * @return secureOnly
   */
  @javax.annotation.Nullable
  public Boolean getSecureOnly() {
    return secureOnly;
  }

  public void setSecureOnly(Boolean secureOnly) {
    this.secureOnly = secureOnly;
  }


  public AccountAttributes showReferralLinks(Boolean showReferralLinks) {
    this.showReferralLinks = showReferralLinks;
    return this;
  }

  /**
   * Flag to indicate showing of referrals links in the account. Set to &#x60;true&#x60; to include marketing messages in share invitations.
   * @return showReferralLinks
   */
  @javax.annotation.Nullable
  public Boolean getShowReferralLinks() {
    return showReferralLinks;
  }

  public void setShowReferralLinks(Boolean showReferralLinks) {
    this.showReferralLinks = showReferralLinks;
  }


  public AccountAttributes status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Account status flag. A one (1) means the account is active; zero (0) means it is suspended.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public AccountAttributes userCount(Integer userCount) {
    this.userCount = userCount;
    return this;
  }

  /**
   * Current number of users on the account.
   * @return userCount
   */
  @javax.annotation.Nullable
  public Integer getUserCount() {
    return userCount;
  }

  public void setUserCount(Integer userCount) {
    this.userCount = userCount;
  }


  public AccountAttributes welcomeEmailContent(String welcomeEmailContent) {
    this.welcomeEmailContent = welcomeEmailContent;
    return this;
  }

  /**
   * Content of welcome email each new user will receive.
   * @return welcomeEmailContent
   */
  @javax.annotation.Nullable
  public String getWelcomeEmailContent() {
    return welcomeEmailContent;
  }

  public void setWelcomeEmailContent(String welcomeEmailContent) {
    this.welcomeEmailContent = welcomeEmailContent;
  }


  public AccountAttributes welcomeEmailSubject(String welcomeEmailSubject) {
    this.welcomeEmailSubject = welcomeEmailSubject;
    return this;
  }

  /**
   * Subject of welcome email each new user will receive.
   * @return welcomeEmailSubject
   */
  @javax.annotation.Nullable
  public String getWelcomeEmailSubject() {
    return welcomeEmailSubject;
  }

  public void setWelcomeEmailSubject(String welcomeEmailSubject) {
    this.welcomeEmailSubject = welcomeEmailSubject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountAttributes accountAttributes = (AccountAttributes) o;
    return Objects.equals(this.accountName, accountAttributes.accountName) &&
        Objects.equals(this.accountOnboarding, accountAttributes.accountOnboarding) &&
        Objects.equals(this.allowedIp, accountAttributes.allowedIp) &&
        Objects.equals(this.branding, accountAttributes.branding) &&
        Objects.equals(this.brandingSettings, accountAttributes.brandingSettings) &&
        Objects.equals(this.clientId, accountAttributes.clientId) &&
        Objects.equals(this.complexPasswords, accountAttributes.complexPasswords) &&
        Objects.equals(this.created, accountAttributes.created) &&
        Objects.equals(this.customDomain, accountAttributes.customDomain) &&
        Objects.equals(this.customSignature, accountAttributes.customSignature) &&
        Objects.equals(this.externalDomains, accountAttributes.externalDomains) &&
        Objects.equals(this.maxUsers, accountAttributes.maxUsers) &&
        Objects.equals(this.modified, accountAttributes.modified) &&
        Objects.equals(this.planDetails, accountAttributes.planDetails) &&
        Objects.equals(this.quota, accountAttributes.quota) &&
        Objects.equals(this.secureOnly, accountAttributes.secureOnly) &&
        Objects.equals(this.showReferralLinks, accountAttributes.showReferralLinks) &&
        Objects.equals(this.status, accountAttributes.status) &&
        Objects.equals(this.userCount, accountAttributes.userCount) &&
        Objects.equals(this.welcomeEmailContent, accountAttributes.welcomeEmailContent) &&
        Objects.equals(this.welcomeEmailSubject, accountAttributes.welcomeEmailSubject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountName, accountOnboarding, allowedIp, branding, brandingSettings, clientId, complexPasswords, created, customDomain, customSignature, externalDomains, maxUsers, modified, planDetails, quota, secureOnly, showReferralLinks, status, userCount, welcomeEmailContent, welcomeEmailSubject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountAttributes {\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    accountOnboarding: ").append(toIndentedString(accountOnboarding)).append("\n");
    sb.append("    allowedIp: ").append(toIndentedString(allowedIp)).append("\n");
    sb.append("    branding: ").append(toIndentedString(branding)).append("\n");
    sb.append("    brandingSettings: ").append(toIndentedString(brandingSettings)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    complexPasswords: ").append(toIndentedString(complexPasswords)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customDomain: ").append(toIndentedString(customDomain)).append("\n");
    sb.append("    customSignature: ").append(toIndentedString(customSignature)).append("\n");
    sb.append("    externalDomains: ").append(toIndentedString(externalDomains)).append("\n");
    sb.append("    maxUsers: ").append(toIndentedString(maxUsers)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    planDetails: ").append(toIndentedString(planDetails)).append("\n");
    sb.append("    quota: ").append(toIndentedString(quota)).append("\n");
    sb.append("    secureOnly: ").append(toIndentedString(secureOnly)).append("\n");
    sb.append("    showReferralLinks: ").append(toIndentedString(showReferralLinks)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    userCount: ").append(toIndentedString(userCount)).append("\n");
    sb.append("    welcomeEmailContent: ").append(toIndentedString(welcomeEmailContent)).append("\n");
    sb.append("    welcomeEmailSubject: ").append(toIndentedString(welcomeEmailSubject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountName");
    openapiFields.add("accountOnboarding");
    openapiFields.add("allowedIp");
    openapiFields.add("branding");
    openapiFields.add("brandingSettings");
    openapiFields.add("clientId");
    openapiFields.add("complexPasswords");
    openapiFields.add("created");
    openapiFields.add("customDomain");
    openapiFields.add("customSignature");
    openapiFields.add("externalDomains");
    openapiFields.add("maxUsers");
    openapiFields.add("modified");
    openapiFields.add("planDetails");
    openapiFields.add("quota");
    openapiFields.add("secureOnly");
    openapiFields.add("showReferralLinks");
    openapiFields.add("status");
    openapiFields.add("userCount");
    openapiFields.add("welcomeEmailContent");
    openapiFields.add("welcomeEmailSubject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountAttributes is not found in the empty JSON string", AccountAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountName") != null && !jsonObj.get("accountName").isJsonNull()) && !jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if (jsonObj.get("allowedIp") != null && !jsonObj.get("allowedIp").isJsonNull()) {
        JsonArray jsonArrayallowedIp = jsonObj.getAsJsonArray("allowedIp");
        if (jsonArrayallowedIp != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allowedIp").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allowedIp` to be an array in the JSON string but got `%s`", jsonObj.get("allowedIp").toString()));
          }

          // validate the optional field `allowedIp` (array)
          for (int i = 0; i < jsonArrayallowedIp.size(); i++) {
            AccountAttributesAllowedIpInner.validateJsonElement(jsonArrayallowedIp.get(i));
          };
        }
      }
      // validate the optional field `brandingSettings`
      if (jsonObj.get("brandingSettings") != null && !jsonObj.get("brandingSettings").isJsonNull()) {
        BrandingSettings.validateJsonElement(jsonObj.get("brandingSettings"));
      }
      if ((jsonObj.get("customSignature") != null && !jsonObj.get("customSignature").isJsonNull()) && !jsonObj.get("customSignature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customSignature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customSignature").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("externalDomains") != null && !jsonObj.get("externalDomains").isJsonNull() && !jsonObj.get("externalDomains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalDomains` to be an array in the JSON string but got `%s`", jsonObj.get("externalDomains").toString()));
      }
      // validate the optional field `planDetails`
      if (jsonObj.get("planDetails") != null && !jsonObj.get("planDetails").isJsonNull()) {
        PlanDetails.validateJsonElement(jsonObj.get("planDetails"));
      }
      // validate the optional field `quota`
      if (jsonObj.get("quota") != null && !jsonObj.get("quota").isJsonNull()) {
        Quota.validateJsonElement(jsonObj.get("quota"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("welcomeEmailContent") != null && !jsonObj.get("welcomeEmailContent").isJsonNull()) && !jsonObj.get("welcomeEmailContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `welcomeEmailContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("welcomeEmailContent").toString()));
      }
      if ((jsonObj.get("welcomeEmailSubject") != null && !jsonObj.get("welcomeEmailSubject").isJsonNull()) && !jsonObj.get("welcomeEmailSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `welcomeEmailSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("welcomeEmailSubject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountAttributes>() {
           @Override
           public void write(JsonWriter out, AccountAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountAttributes
   * @throws IOException if the JSON string is invalid with respect to AccountAttributes
   */
  public static AccountAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountAttributes.class);
  }

  /**
   * Convert an instance of AccountAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

