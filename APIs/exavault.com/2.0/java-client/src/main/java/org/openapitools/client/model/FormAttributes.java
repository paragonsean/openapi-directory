/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FormField;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Attributes of the form including it&#39;s included fields and css styles
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FormAttributes {
  public static final String SERIALIZED_NAME_CSS_STYLES = "cssStyles";
  @SerializedName(SERIALIZED_NAME_CSS_STYLES)
  private String cssStyles;

  public static final String SERIALIZED_NAME_ELEMENTS = "elements";
  @SerializedName(SERIALIZED_NAME_ELEMENTS)
  private List<FormField> elements = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORM_DESCRIPTION = "formDescription";
  @SerializedName(SERIALIZED_NAME_FORM_DESCRIPTION)
  private String formDescription;

  public static final String SERIALIZED_NAME_SUBMIT_BUTTON_TEXT = "submitButtonText";
  @SerializedName(SERIALIZED_NAME_SUBMIT_BUTTON_TEXT)
  private String submitButtonText;

  public static final String SERIALIZED_NAME_SUCCESS_MESSAGE = "successMessage";
  @SerializedName(SERIALIZED_NAME_SUCCESS_MESSAGE)
  private String successMessage;

  public FormAttributes() {
  }

  public FormAttributes cssStyles(String cssStyles) {
    this.cssStyles = cssStyles;
    return this;
  }

  /**
   * CSS Styles of the form.
   * @return cssStyles
   */
  @javax.annotation.Nullable
  public String getCssStyles() {
    return cssStyles;
  }

  public void setCssStyles(String cssStyles) {
    this.cssStyles = cssStyles;
  }


  public FormAttributes elements(List<FormField> elements) {
    this.elements = elements;
    return this;
  }

  public FormAttributes addElementsItem(FormField elementsItem) {
    if (this.elements == null) {
      this.elements = new ArrayList<>();
    }
    this.elements.add(elementsItem);
    return this;
  }

  /**
   * Array of form fields defined for the form
   * @return elements
   */
  @javax.annotation.Nullable
  public List<FormField> getElements() {
    return elements;
  }

  public void setElements(List<FormField> elements) {
    this.elements = elements;
  }


  public FormAttributes formDescription(String formDescription) {
    this.formDescription = formDescription;
    return this;
  }

  /**
   * Text that appears at the top of a receive form
   * @return formDescription
   */
  @javax.annotation.Nullable
  public String getFormDescription() {
    return formDescription;
  }

  public void setFormDescription(String formDescription) {
    this.formDescription = formDescription;
  }


  public FormAttributes submitButtonText(String submitButtonText) {
    this.submitButtonText = submitButtonText;
    return this;
  }

  /**
   * Text that appears on the submit button for the form
   * @return submitButtonText
   */
  @javax.annotation.Nullable
  public String getSubmitButtonText() {
    return submitButtonText;
  }

  public void setSubmitButtonText(String submitButtonText) {
    this.submitButtonText = submitButtonText;
  }


  public FormAttributes successMessage(String successMessage) {
    this.successMessage = successMessage;
    return this;
  }

  /**
   * Message displayed to submitter after files are uploaded
   * @return successMessage
   */
  @javax.annotation.Nullable
  public String getSuccessMessage() {
    return successMessage;
  }

  public void setSuccessMessage(String successMessage) {
    this.successMessage = successMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormAttributes formAttributes = (FormAttributes) o;
    return Objects.equals(this.cssStyles, formAttributes.cssStyles) &&
        Objects.equals(this.elements, formAttributes.elements) &&
        Objects.equals(this.formDescription, formAttributes.formDescription) &&
        Objects.equals(this.submitButtonText, formAttributes.submitButtonText) &&
        Objects.equals(this.successMessage, formAttributes.successMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cssStyles, elements, formDescription, submitButtonText, successMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormAttributes {\n");
    sb.append("    cssStyles: ").append(toIndentedString(cssStyles)).append("\n");
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("    formDescription: ").append(toIndentedString(formDescription)).append("\n");
    sb.append("    submitButtonText: ").append(toIndentedString(submitButtonText)).append("\n");
    sb.append("    successMessage: ").append(toIndentedString(successMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cssStyles");
    openapiFields.add("elements");
    openapiFields.add("formDescription");
    openapiFields.add("submitButtonText");
    openapiFields.add("successMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FormAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FormAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormAttributes is not found in the empty JSON string", FormAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FormAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FormAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cssStyles") != null && !jsonObj.get("cssStyles").isJsonNull()) && !jsonObj.get("cssStyles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cssStyles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cssStyles").toString()));
      }
      if (jsonObj.get("elements") != null && !jsonObj.get("elements").isJsonNull()) {
        JsonArray jsonArrayelements = jsonObj.getAsJsonArray("elements");
        if (jsonArrayelements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("elements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `elements` to be an array in the JSON string but got `%s`", jsonObj.get("elements").toString()));
          }

          // validate the optional field `elements` (array)
          for (int i = 0; i < jsonArrayelements.size(); i++) {
            FormField.validateJsonElement(jsonArrayelements.get(i));
          };
        }
      }
      if ((jsonObj.get("formDescription") != null && !jsonObj.get("formDescription").isJsonNull()) && !jsonObj.get("formDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formDescription").toString()));
      }
      if ((jsonObj.get("submitButtonText") != null && !jsonObj.get("submitButtonText").isJsonNull()) && !jsonObj.get("submitButtonText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submitButtonText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submitButtonText").toString()));
      }
      if ((jsonObj.get("successMessage") != null && !jsonObj.get("successMessage").isJsonNull()) && !jsonObj.get("successMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `successMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("successMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<FormAttributes>() {
           @Override
           public void write(JsonWriter out, FormAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FormAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FormAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FormAttributes
   * @throws IOException if the JSON string is invalid with respect to FormAttributes
   */
  public static FormAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormAttributes.class);
  }

  /**
   * Convert an instance of FormAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

