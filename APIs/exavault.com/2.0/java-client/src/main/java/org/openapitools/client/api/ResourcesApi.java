/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddFolderRequestBody;
import org.openapitools.client.model.CompressFilesRequestBody;
import org.openapitools.client.model.CopyResourcesRequestBody;
import org.openapitools.client.model.DeleteResourcesRequestBody;
import org.openapitools.client.model.EmptyResponse;
import org.openapitools.client.model.ExtractFilesRequestBody;
import java.io.File;
import org.openapitools.client.model.MoveResourcesRequestBody;
import org.openapitools.client.model.PreviewFileResponse;
import org.openapitools.client.model.ResourceCollectionResponse;
import org.openapitools.client.model.ResourceCopyMove;
import org.openapitools.client.model.ResourceMultiResponse;
import org.openapitools.client.model.ResourceResponse;
import org.openapitools.client.model.UpdateResourceByIdRequestBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResourcesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addFolder
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param addFolderRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFolderCall(String evApiKey, String evAccessToken, AddFolderRequestBody addFolderRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addFolderRequestBody;

        // create path and map variables
        String localVarPath = "/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFolderValidateBeforeCall(String evApiKey, String evAccessToken, AddFolderRequestBody addFolderRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling addFolder(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling addFolder(Async)");
        }

        return addFolderCall(evApiKey, evAccessToken, addFolderRequestBody, _callback);

    }

    /**
     * Create a folder
     * Create a new empty folder at the specified path. New files can be uploaded via the [/resources/upload](#operation/uploadFile) endpoint.  **Notes:** - Authenticated user should have modify permission. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param addFolderRequestBody  (optional)
     * @return ResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ResourceResponse addFolder(String evApiKey, String evAccessToken, AddFolderRequestBody addFolderRequestBody) throws ApiException {
        ApiResponse<ResourceResponse> localVarResp = addFolderWithHttpInfo(evApiKey, evAccessToken, addFolderRequestBody);
        return localVarResp.getData();
    }

    /**
     * Create a folder
     * Create a new empty folder at the specified path. New files can be uploaded via the [/resources/upload](#operation/uploadFile) endpoint.  **Notes:** - Authenticated user should have modify permission. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param addFolderRequestBody  (optional)
     * @return ApiResponse&lt;ResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceResponse> addFolderWithHttpInfo(String evApiKey, String evAccessToken, AddFolderRequestBody addFolderRequestBody) throws ApiException {
        okhttp3.Call localVarCall = addFolderValidateBeforeCall(evApiKey, evAccessToken, addFolderRequestBody, null);
        Type localVarReturnType = new TypeToken<ResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a folder (asynchronously)
     * Create a new empty folder at the specified path. New files can be uploaded via the [/resources/upload](#operation/uploadFile) endpoint.  **Notes:** - Authenticated user should have modify permission. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param addFolderRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFolderAsync(String evApiKey, String evAccessToken, AddFolderRequestBody addFolderRequestBody, final ApiCallback<ResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFolderValidateBeforeCall(evApiKey, evAccessToken, addFolderRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for compressFiles
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param compressFilesRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compressFilesCall(String evApiKey, String evAccessToken, CompressFilesRequestBody compressFilesRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = compressFilesRequestBody;

        // create path and map variables
        String localVarPath = "/resources/compress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compressFilesValidateBeforeCall(String evApiKey, String evAccessToken, CompressFilesRequestBody compressFilesRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling compressFiles(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling compressFiles(Async)");
        }

        return compressFilesCall(evApiKey, evAccessToken, compressFilesRequestBody, _callback);

    }

    /**
     * Compress resources
     * Create a zip archive containing the files from given set of paths. Note that this can be a very slow operation if you have indicated many files should be included in the archive.  **Notes:** - Authenticated user should have modify permission. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param compressFilesRequestBody  (optional)
     * @return ResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ResourceResponse compressFiles(String evApiKey, String evAccessToken, CompressFilesRequestBody compressFilesRequestBody) throws ApiException {
        ApiResponse<ResourceResponse> localVarResp = compressFilesWithHttpInfo(evApiKey, evAccessToken, compressFilesRequestBody);
        return localVarResp.getData();
    }

    /**
     * Compress resources
     * Create a zip archive containing the files from given set of paths. Note that this can be a very slow operation if you have indicated many files should be included in the archive.  **Notes:** - Authenticated user should have modify permission. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param compressFilesRequestBody  (optional)
     * @return ApiResponse&lt;ResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceResponse> compressFilesWithHttpInfo(String evApiKey, String evAccessToken, CompressFilesRequestBody compressFilesRequestBody) throws ApiException {
        okhttp3.Call localVarCall = compressFilesValidateBeforeCall(evApiKey, evAccessToken, compressFilesRequestBody, null);
        Type localVarReturnType = new TypeToken<ResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compress resources (asynchronously)
     * Create a zip archive containing the files from given set of paths. Note that this can be a very slow operation if you have indicated many files should be included in the archive.  **Notes:** - Authenticated user should have modify permission. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param compressFilesRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compressFilesAsync(String evApiKey, String evAccessToken, CompressFilesRequestBody compressFilesRequestBody, final ApiCallback<ResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = compressFilesValidateBeforeCall(evApiKey, evAccessToken, compressFilesRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copyResources
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param copyResourcesRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Multi Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyResourcesCall(String evApiKey, String evAccessToken, CopyResourcesRequestBody copyResourcesRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = copyResourcesRequestBody;

        // create path and map variables
        String localVarPath = "/resources/copy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyResourcesValidateBeforeCall(String evApiKey, String evAccessToken, CopyResourcesRequestBody copyResourcesRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling copyResources(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling copyResources(Async)");
        }

        return copyResourcesCall(evApiKey, evAccessToken, copyResourcesRequestBody, _callback);

    }

    /**
     * Copy resources
     * Copies a set of exisiting files/folders (provided by an array &#x60;resources&#x60;) to the requested &#x60;parentResource&#x60; in your account. In the &#x60;resources&#x60; array, you may specify paths pointing files/folders throughout the account, but everything will be copied to the  root of the &#x60;parentResource&#x60;.  **Notes:** - Authenticated user should have modify permission. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param copyResourcesRequestBody  (optional)
     * @return ResourceCopyMove
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Multi Response </td><td>  -  </td></tr>
     </table>
     */
    public ResourceCopyMove copyResources(String evApiKey, String evAccessToken, CopyResourcesRequestBody copyResourcesRequestBody) throws ApiException {
        ApiResponse<ResourceCopyMove> localVarResp = copyResourcesWithHttpInfo(evApiKey, evAccessToken, copyResourcesRequestBody);
        return localVarResp.getData();
    }

    /**
     * Copy resources
     * Copies a set of exisiting files/folders (provided by an array &#x60;resources&#x60;) to the requested &#x60;parentResource&#x60; in your account. In the &#x60;resources&#x60; array, you may specify paths pointing files/folders throughout the account, but everything will be copied to the  root of the &#x60;parentResource&#x60;.  **Notes:** - Authenticated user should have modify permission. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param copyResourcesRequestBody  (optional)
     * @return ApiResponse&lt;ResourceCopyMove&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Multi Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceCopyMove> copyResourcesWithHttpInfo(String evApiKey, String evAccessToken, CopyResourcesRequestBody copyResourcesRequestBody) throws ApiException {
        okhttp3.Call localVarCall = copyResourcesValidateBeforeCall(evApiKey, evAccessToken, copyResourcesRequestBody, null);
        Type localVarReturnType = new TypeToken<ResourceCopyMove>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy resources (asynchronously)
     * Copies a set of exisiting files/folders (provided by an array &#x60;resources&#x60;) to the requested &#x60;parentResource&#x60; in your account. In the &#x60;resources&#x60; array, you may specify paths pointing files/folders throughout the account, but everything will be copied to the  root of the &#x60;parentResource&#x60;.  **Notes:** - Authenticated user should have modify permission. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param copyResourcesRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Multi Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copyResourcesAsync(String evApiKey, String evAccessToken, CopyResourcesRequestBody copyResourcesRequestBody, final ApiCallback<ResourceCopyMove> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyResourcesValidateBeforeCall(evApiKey, evAccessToken, copyResourcesRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ResourceCopyMove>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteResourceById
     * @param id ID number of the resource (required)
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceByIdCall(Long id, String evApiKey, String evAccessToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResourceByIdValidateBeforeCall(Long id, String evApiKey, String evAccessToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteResourceById(Async)");
        }

        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling deleteResourceById(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling deleteResourceById(Async)");
        }

        return deleteResourceByIdCall(id, evApiKey, evAccessToken, _callback);

    }

    /**
     * Delete a Resource
     * Delete a single file or folder resource. Deleting a folder will also delete all of the contents.  **Notes:** - Authenticated user should have [delete permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions). - There is no way to un-delete a deleted resource. 
     * @param id ID number of the resource (required)
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public EmptyResponse deleteResourceById(Long id, String evApiKey, String evAccessToken) throws ApiException {
        ApiResponse<EmptyResponse> localVarResp = deleteResourceByIdWithHttpInfo(id, evApiKey, evAccessToken);
        return localVarResp.getData();
    }

    /**
     * Delete a Resource
     * Delete a single file or folder resource. Deleting a folder will also delete all of the contents.  **Notes:** - Authenticated user should have [delete permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions). - There is no way to un-delete a deleted resource. 
     * @param id ID number of the resource (required)
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyResponse> deleteResourceByIdWithHttpInfo(Long id, String evApiKey, String evAccessToken) throws ApiException {
        okhttp3.Call localVarCall = deleteResourceByIdValidateBeforeCall(id, evApiKey, evAccessToken, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Resource (asynchronously)
     * Delete a single file or folder resource. Deleting a folder will also delete all of the contents.  **Notes:** - Authenticated user should have [delete permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions). - There is no way to un-delete a deleted resource. 
     * @param id ID number of the resource (required)
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceByIdAsync(Long id, String evApiKey, String evAccessToken, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResourceByIdValidateBeforeCall(id, evApiKey, evAccessToken, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteResources
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param deleteResourcesRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Multi Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourcesCall(String evApiKey, String evAccessToken, DeleteResourcesRequestBody deleteResourcesRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteResourcesRequestBody;

        // create path and map variables
        String localVarPath = "/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResourcesValidateBeforeCall(String evApiKey, String evAccessToken, DeleteResourcesRequestBody deleteResourcesRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling deleteResources(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling deleteResources(Async)");
        }

        return deleteResourcesCall(evApiKey, evAccessToken, deleteResourcesRequestBody, _callback);

    }

    /**
     * Delete Resources
     * Delete multiple file or folder resourcess. Deleting a folder resource will also delete any resources in that folder.  **Notes:** - Authenticated user should have [delete permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions). - It is not possible to un-delete a deleted resource. 
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param deleteResourcesRequestBody  (optional)
     * @return EmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Multi Response </td><td>  -  </td></tr>
     </table>
     */
    public EmptyResponse deleteResources(String evApiKey, String evAccessToken, DeleteResourcesRequestBody deleteResourcesRequestBody) throws ApiException {
        ApiResponse<EmptyResponse> localVarResp = deleteResourcesWithHttpInfo(evApiKey, evAccessToken, deleteResourcesRequestBody);
        return localVarResp.getData();
    }

    /**
     * Delete Resources
     * Delete multiple file or folder resourcess. Deleting a folder resource will also delete any resources in that folder.  **Notes:** - Authenticated user should have [delete permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions). - It is not possible to un-delete a deleted resource. 
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param deleteResourcesRequestBody  (optional)
     * @return ApiResponse&lt;EmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Multi Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyResponse> deleteResourcesWithHttpInfo(String evApiKey, String evAccessToken, DeleteResourcesRequestBody deleteResourcesRequestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteResourcesValidateBeforeCall(evApiKey, evAccessToken, deleteResourcesRequestBody, null);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Resources (asynchronously)
     * Delete multiple file or folder resourcess. Deleting a folder resource will also delete any resources in that folder.  **Notes:** - Authenticated user should have [delete permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions). - It is not possible to un-delete a deleted resource. 
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param deleteResourcesRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Multi Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourcesAsync(String evApiKey, String evAccessToken, DeleteResourcesRequestBody deleteResourcesRequestBody, final ApiCallback<EmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResourcesValidateBeforeCall(evApiKey, evAccessToken, deleteResourcesRequestBody, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for download
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param resources Path of file or folder to be downloaded, starting from the root. Can also be an array of paths. (required)
     * @param downloadArchiveName When downloading multiple files, this will be used as the name of the zip file that is created. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of the file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadCall(String evApiKey, String evAccessToken, List<String> resources, String downloadArchiveName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resources != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "resources[]", resources));
        }

        if (downloadArchiveName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("downloadArchiveName", downloadArchiveName));
        }

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/zip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadValidateBeforeCall(String evApiKey, String evAccessToken, List<String> resources, String downloadArchiveName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling download(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling download(Async)");
        }

        // verify the required parameter 'resources' is set
        if (resources == null) {
            throw new ApiException("Missing the required parameter 'resources' when calling download(Async)");
        }

        return downloadCall(evApiKey, evAccessToken, resources, downloadArchiveName, _callback);

    }

    /**
     * Download a file
     * Downloads a file from the server. Whenever more than one file is being downloaded, the file are first zipped into  a single file before the download starts, and the resulting zip file is named to match the &#x60;downloadArchiveName&#x60; parameter.  **NOTE**: Downloading many files at once  may result in a long delay before the API will return a response. You may need to override default timeout values in your API client, or download files individually.
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param resources Path of file or folder to be downloaded, starting from the root. Can also be an array of paths. (required)
     * @param downloadArchiveName When downloading multiple files, this will be used as the name of the zip file that is created. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of the file </td><td>  -  </td></tr>
     </table>
     */
    public File download(String evApiKey, String evAccessToken, List<String> resources, String downloadArchiveName) throws ApiException {
        ApiResponse<File> localVarResp = downloadWithHttpInfo(evApiKey, evAccessToken, resources, downloadArchiveName);
        return localVarResp.getData();
    }

    /**
     * Download a file
     * Downloads a file from the server. Whenever more than one file is being downloaded, the file are first zipped into  a single file before the download starts, and the resulting zip file is named to match the &#x60;downloadArchiveName&#x60; parameter.  **NOTE**: Downloading many files at once  may result in a long delay before the API will return a response. You may need to override default timeout values in your API client, or download files individually.
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param resources Path of file or folder to be downloaded, starting from the root. Can also be an array of paths. (required)
     * @param downloadArchiveName When downloading multiple files, this will be used as the name of the zip file that is created. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of the file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadWithHttpInfo(String evApiKey, String evAccessToken, List<String> resources, String downloadArchiveName) throws ApiException {
        okhttp3.Call localVarCall = downloadValidateBeforeCall(evApiKey, evAccessToken, resources, downloadArchiveName, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download a file (asynchronously)
     * Downloads a file from the server. Whenever more than one file is being downloaded, the file are first zipped into  a single file before the download starts, and the resulting zip file is named to match the &#x60;downloadArchiveName&#x60; parameter.  **NOTE**: Downloading many files at once  may result in a long delay before the API will return a response. You may need to override default timeout values in your API client, or download files individually.
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param resources Path of file or folder to be downloaded, starting from the root. Can also be an array of paths. (required)
     * @param downloadArchiveName When downloading multiple files, this will be used as the name of the zip file that is created. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of the file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadAsync(String evApiKey, String evAccessToken, List<String> resources, String downloadArchiveName, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadValidateBeforeCall(evApiKey, evAccessToken, resources, downloadArchiveName, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extractFiles
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param extractFilesRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extractFilesCall(String evApiKey, String evAccessToken, ExtractFilesRequestBody extractFilesRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = extractFilesRequestBody;

        // create path and map variables
        String localVarPath = "/resources/extract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractFilesValidateBeforeCall(String evApiKey, String evAccessToken, ExtractFilesRequestBody extractFilesRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling extractFiles(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling extractFiles(Async)");
        }

        return extractFilesCall(evApiKey, evAccessToken, extractFilesRequestBody, _callback);

    }

    /**
     * Extract resources
     * Extract the contents of a zip archive to a specified directory. Note that this can be a very slow operation.  **Notes:** - You must have  [modify permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to do this. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param extractFilesRequestBody  (optional)
     * @return ResourceCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ResourceCollectionResponse extractFiles(String evApiKey, String evAccessToken, ExtractFilesRequestBody extractFilesRequestBody) throws ApiException {
        ApiResponse<ResourceCollectionResponse> localVarResp = extractFilesWithHttpInfo(evApiKey, evAccessToken, extractFilesRequestBody);
        return localVarResp.getData();
    }

    /**
     * Extract resources
     * Extract the contents of a zip archive to a specified directory. Note that this can be a very slow operation.  **Notes:** - You must have  [modify permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to do this. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param extractFilesRequestBody  (optional)
     * @return ApiResponse&lt;ResourceCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceCollectionResponse> extractFilesWithHttpInfo(String evApiKey, String evAccessToken, ExtractFilesRequestBody extractFilesRequestBody) throws ApiException {
        okhttp3.Call localVarCall = extractFilesValidateBeforeCall(evApiKey, evAccessToken, extractFilesRequestBody, null);
        Type localVarReturnType = new TypeToken<ResourceCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extract resources (asynchronously)
     * Extract the contents of a zip archive to a specified directory. Note that this can be a very slow operation.  **Notes:** - You must have  [modify permission](/docs/account/04-users/00-introduction#managing-user-roles-and-permissions) to do this. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param extractFilesRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extractFilesAsync(String evApiKey, String evAccessToken, ExtractFilesRequestBody extractFilesRequestBody, final ApiCallback<ResourceCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractFilesValidateBeforeCall(evApiKey, evAccessToken, extractFilesRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ResourceCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPreviewImage
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param resource Resource identifier for the image file. (required)
     * @param size The size of the image. (required)
     * @param width Overrides sizes. Sets to a specific width. (optional)
     * @param height Overrides sizes. Sets to a specific height. (optional)
     * @param page Page number to extract from a multi-page document (0 is the first page). Vaild for **.pdf** or **.doc** files. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPreviewImageCall(String evApiKey, String evAccessToken, String resource, String size, Integer width, Integer height, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/preview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource", resource));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPreviewImageValidateBeforeCall(String evApiKey, String evAccessToken, String resource, String size, Integer width, Integer height, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling getPreviewImage(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling getPreviewImage(Async)");
        }

        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling getPreviewImage(Async)");
        }

        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling getPreviewImage(Async)");
        }

        return getPreviewImageCall(evApiKey, evAccessToken, resource, size, width, height, page, _callback);

    }

    /**
     * Preview a file
     * Returns a resized image of the specified document for supported file types.  Image data returned is encoded in base64 format and can be viewed using the &#x60;&lt;img&gt;&#x60; element.   &#x60;&#x60;&#x60;&lt;img src&#x3D;&#39;data:image/jpeg;base64&#39; + meta.image/&gt;&#x60;&#x60;&#x60;  **Notes:** - Supported files types are &#x60;&#39;jpg&#39;&#x60;, &#x60;&#39;jpeg&#39;&#x60;, &#x60;&#39;gif&#39;&#x60;, &#x60;&#39;png&#39;&#x60;, &#x60;&#39;bmp&#39;&#x60;, &#x60;&#39;pdf&#39;&#x60;, &#x60;&#39;psd&#39;&#x60;, &#x60;&#39;doc&#39;&#x60; 
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param resource Resource identifier for the image file. (required)
     * @param size The size of the image. (required)
     * @param width Overrides sizes. Sets to a specific width. (optional)
     * @param height Overrides sizes. Sets to a specific height. (optional)
     * @param page Page number to extract from a multi-page document (0 is the first page). Vaild for **.pdf** or **.doc** files. (optional, default to 0)
     * @return PreviewFileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public PreviewFileResponse getPreviewImage(String evApiKey, String evAccessToken, String resource, String size, Integer width, Integer height, Integer page) throws ApiException {
        ApiResponse<PreviewFileResponse> localVarResp = getPreviewImageWithHttpInfo(evApiKey, evAccessToken, resource, size, width, height, page);
        return localVarResp.getData();
    }

    /**
     * Preview a file
     * Returns a resized image of the specified document for supported file types.  Image data returned is encoded in base64 format and can be viewed using the &#x60;&lt;img&gt;&#x60; element.   &#x60;&#x60;&#x60;&lt;img src&#x3D;&#39;data:image/jpeg;base64&#39; + meta.image/&gt;&#x60;&#x60;&#x60;  **Notes:** - Supported files types are &#x60;&#39;jpg&#39;&#x60;, &#x60;&#39;jpeg&#39;&#x60;, &#x60;&#39;gif&#39;&#x60;, &#x60;&#39;png&#39;&#x60;, &#x60;&#39;bmp&#39;&#x60;, &#x60;&#39;pdf&#39;&#x60;, &#x60;&#39;psd&#39;&#x60;, &#x60;&#39;doc&#39;&#x60; 
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param resource Resource identifier for the image file. (required)
     * @param size The size of the image. (required)
     * @param width Overrides sizes. Sets to a specific width. (optional)
     * @param height Overrides sizes. Sets to a specific height. (optional)
     * @param page Page number to extract from a multi-page document (0 is the first page). Vaild for **.pdf** or **.doc** files. (optional, default to 0)
     * @return ApiResponse&lt;PreviewFileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewFileResponse> getPreviewImageWithHttpInfo(String evApiKey, String evAccessToken, String resource, String size, Integer width, Integer height, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getPreviewImageValidateBeforeCall(evApiKey, evAccessToken, resource, size, width, height, page, null);
        Type localVarReturnType = new TypeToken<PreviewFileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Preview a file (asynchronously)
     * Returns a resized image of the specified document for supported file types.  Image data returned is encoded in base64 format and can be viewed using the &#x60;&lt;img&gt;&#x60; element.   &#x60;&#x60;&#x60;&lt;img src&#x3D;&#39;data:image/jpeg;base64&#39; + meta.image/&gt;&#x60;&#x60;&#x60;  **Notes:** - Supported files types are &#x60;&#39;jpg&#39;&#x60;, &#x60;&#39;jpeg&#39;&#x60;, &#x60;&#39;gif&#39;&#x60;, &#x60;&#39;png&#39;&#x60;, &#x60;&#39;bmp&#39;&#x60;, &#x60;&#39;pdf&#39;&#x60;, &#x60;&#39;psd&#39;&#x60;, &#x60;&#39;doc&#39;&#x60; 
     * @param evApiKey API Key (required)
     * @param evAccessToken Access Token (required)
     * @param resource Resource identifier for the image file. (required)
     * @param size The size of the image. (required)
     * @param width Overrides sizes. Sets to a specific width. (optional)
     * @param height Overrides sizes. Sets to a specific height. (optional)
     * @param page Page number to extract from a multi-page document (0 is the first page). Vaild for **.pdf** or **.doc** files. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPreviewImageAsync(String evApiKey, String evAccessToken, String resource, String size, Integer width, Integer height, Integer page, final ApiCallback<PreviewFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPreviewImageValidateBeforeCall(evApiKey, evAccessToken, resource, size, width, height, page, _callback);
        Type localVarReturnType = new TypeToken<PreviewFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourceInfo
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param resource Resource identifier of the file or folder to get metadata for. (required)
     * @param include Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerUser**. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceInfoCall(String evApiKey, String evAccessToken, String resource, String include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource", resource));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceInfoValidateBeforeCall(String evApiKey, String evAccessToken, String resource, String include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling getResourceInfo(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling getResourceInfo(Async)");
        }

        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling getResourceInfo(Async)");
        }

        return getResourceInfoCall(evApiKey, evAccessToken, resource, include, _callback);

    }

    /**
     * Get Resource Properties
     * Returns details for specified file/folder id or hash, including upload date, size and type. For the full list of returned properties, see the response syntax, below.  **Notes:** - Authenticated user should have list permission. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param resource Resource identifier of the file or folder to get metadata for. (required)
     * @param include Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerUser**. (optional)
     * @return ResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ResourceResponse getResourceInfo(String evApiKey, String evAccessToken, String resource, String include) throws ApiException {
        ApiResponse<ResourceResponse> localVarResp = getResourceInfoWithHttpInfo(evApiKey, evAccessToken, resource, include);
        return localVarResp.getData();
    }

    /**
     * Get Resource Properties
     * Returns details for specified file/folder id or hash, including upload date, size and type. For the full list of returned properties, see the response syntax, below.  **Notes:** - Authenticated user should have list permission. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param resource Resource identifier of the file or folder to get metadata for. (required)
     * @param include Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerUser**. (optional)
     * @return ApiResponse&lt;ResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceResponse> getResourceInfoWithHttpInfo(String evApiKey, String evAccessToken, String resource, String include) throws ApiException {
        okhttp3.Call localVarCall = getResourceInfoValidateBeforeCall(evApiKey, evAccessToken, resource, include, null);
        Type localVarReturnType = new TypeToken<ResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Resource Properties (asynchronously)
     * Returns details for specified file/folder id or hash, including upload date, size and type. For the full list of returned properties, see the response syntax, below.  **Notes:** - Authenticated user should have list permission. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param resource Resource identifier of the file or folder to get metadata for. (required)
     * @param include Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerUser**. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceInfoAsync(String evApiKey, String evAccessToken, String resource, String include, final ApiCallback<ResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceInfoValidateBeforeCall(evApiKey, evAccessToken, resource, include, _callback);
        Type localVarReturnType = new TypeToken<ResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourceInfoById
     * @param id ID number of the resource (required)
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param include Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerAccount**. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceInfoByIdCall(Long id, String evApiKey, String evAccessToken, String include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceInfoByIdValidateBeforeCall(Long id, String evApiKey, String evAccessToken, String include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getResourceInfoById(Async)");
        }

        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling getResourceInfoById(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling getResourceInfoById(Async)");
        }

        return getResourceInfoByIdCall(id, evApiKey, evAccessToken, include, _callback);

    }

    /**
     * Get resource metadata
     * Returns metadata for specified file/folder path, including upload date, size and type. For the full list of returned properties, see the response syntax, below.  **Notes:** - Authenticated user should have list permission. 
     * @param id ID number of the resource (required)
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param include Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerAccount**. (optional)
     * @return ResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ResourceResponse getResourceInfoById(Long id, String evApiKey, String evAccessToken, String include) throws ApiException {
        ApiResponse<ResourceResponse> localVarResp = getResourceInfoByIdWithHttpInfo(id, evApiKey, evAccessToken, include);
        return localVarResp.getData();
    }

    /**
     * Get resource metadata
     * Returns metadata for specified file/folder path, including upload date, size and type. For the full list of returned properties, see the response syntax, below.  **Notes:** - Authenticated user should have list permission. 
     * @param id ID number of the resource (required)
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param include Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerAccount**. (optional)
     * @return ApiResponse&lt;ResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceResponse> getResourceInfoByIdWithHttpInfo(Long id, String evApiKey, String evAccessToken, String include) throws ApiException {
        okhttp3.Call localVarCall = getResourceInfoByIdValidateBeforeCall(id, evApiKey, evAccessToken, include, null);
        Type localVarReturnType = new TypeToken<ResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get resource metadata (asynchronously)
     * Returns metadata for specified file/folder path, including upload date, size and type. For the full list of returned properties, see the response syntax, below.  **Notes:** - Authenticated user should have list permission. 
     * @param id ID number of the resource (required)
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param include Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerAccount**. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceInfoByIdAsync(Long id, String evApiKey, String evAccessToken, String include, final ApiCallback<ResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceInfoByIdValidateBeforeCall(id, evApiKey, evAccessToken, include, _callback);
        Type localVarReturnType = new TypeToken<ResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listResourceContents
     * @param evApiKey API Key required to make the API call.  (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param id ID of the parent resource to get a list of resources for. (required)
     * @param sort Endpoint support multiple sort fields by allowing array of sort params. Sort fields should be applied in the order specified. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. (optional)
     * @param offset Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. (optional, default to 0)
     * @param limit The number of files to limit the result. Cannot be set higher than 100. If you have more than one hundred files in your directory, make multiple calls, incrementing the &#x60;offset parameter, above. (optional)
     * @param type Limit types of resources returned to \&quot;file\&quot; or \&quot;dir\&quot; only. (optional)
     * @param include Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerUser**. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listResourceContentsCall(String evApiKey, String evAccessToken, Long id, String sort, Integer offset, Integer limit, String type, String include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/list/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listResourceContentsValidateBeforeCall(String evApiKey, String evAccessToken, Long id, String sort, Integer offset, Integer limit, String type, String include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling listResourceContents(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling listResourceContents(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listResourceContents(Async)");
        }

        return listResourceContentsCall(evApiKey, evAccessToken, id, sort, offset, limit, type, include, _callback);

    }

    /**
     * List contents of folder
     * Returns a list of files/folders for the parent resource ID.   You can use this API call to get information about all files and folders at a specified path. By default, the API returns basic metadata on each file/folder. An optional &#x60;include&#x60; parameter forces the return of additional metadata. As with all API calls, the path should be the full path relative to the user&#39;s home directory (e.g. **_/myfiles/some_folder**).  **Notes:** - Authenticated user should have list permission. 
     * @param evApiKey API Key required to make the API call.  (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param id ID of the parent resource to get a list of resources for. (required)
     * @param sort Endpoint support multiple sort fields by allowing array of sort params. Sort fields should be applied in the order specified. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. (optional)
     * @param offset Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. (optional, default to 0)
     * @param limit The number of files to limit the result. Cannot be set higher than 100. If you have more than one hundred files in your directory, make multiple calls, incrementing the &#x60;offset parameter, above. (optional)
     * @param type Limit types of resources returned to \&quot;file\&quot; or \&quot;dir\&quot; only. (optional)
     * @param include Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerUser**. (optional)
     * @return ResourceCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ResourceCollectionResponse listResourceContents(String evApiKey, String evAccessToken, Long id, String sort, Integer offset, Integer limit, String type, String include) throws ApiException {
        ApiResponse<ResourceCollectionResponse> localVarResp = listResourceContentsWithHttpInfo(evApiKey, evAccessToken, id, sort, offset, limit, type, include);
        return localVarResp.getData();
    }

    /**
     * List contents of folder
     * Returns a list of files/folders for the parent resource ID.   You can use this API call to get information about all files and folders at a specified path. By default, the API returns basic metadata on each file/folder. An optional &#x60;include&#x60; parameter forces the return of additional metadata. As with all API calls, the path should be the full path relative to the user&#39;s home directory (e.g. **_/myfiles/some_folder**).  **Notes:** - Authenticated user should have list permission. 
     * @param evApiKey API Key required to make the API call.  (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param id ID of the parent resource to get a list of resources for. (required)
     * @param sort Endpoint support multiple sort fields by allowing array of sort params. Sort fields should be applied in the order specified. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. (optional)
     * @param offset Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. (optional, default to 0)
     * @param limit The number of files to limit the result. Cannot be set higher than 100. If you have more than one hundred files in your directory, make multiple calls, incrementing the &#x60;offset parameter, above. (optional)
     * @param type Limit types of resources returned to \&quot;file\&quot; or \&quot;dir\&quot; only. (optional)
     * @param include Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerUser**. (optional)
     * @return ApiResponse&lt;ResourceCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceCollectionResponse> listResourceContentsWithHttpInfo(String evApiKey, String evAccessToken, Long id, String sort, Integer offset, Integer limit, String type, String include) throws ApiException {
        okhttp3.Call localVarCall = listResourceContentsValidateBeforeCall(evApiKey, evAccessToken, id, sort, offset, limit, type, include, null);
        Type localVarReturnType = new TypeToken<ResourceCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List contents of folder (asynchronously)
     * Returns a list of files/folders for the parent resource ID.   You can use this API call to get information about all files and folders at a specified path. By default, the API returns basic metadata on each file/folder. An optional &#x60;include&#x60; parameter forces the return of additional metadata. As with all API calls, the path should be the full path relative to the user&#39;s home directory (e.g. **_/myfiles/some_folder**).  **Notes:** - Authenticated user should have list permission. 
     * @param evApiKey API Key required to make the API call.  (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param id ID of the parent resource to get a list of resources for. (required)
     * @param sort Endpoint support multiple sort fields by allowing array of sort params. Sort fields should be applied in the order specified. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. (optional)
     * @param offset Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. (optional, default to 0)
     * @param limit The number of files to limit the result. Cannot be set higher than 100. If you have more than one hundred files in your directory, make multiple calls, incrementing the &#x60;offset parameter, above. (optional)
     * @param type Limit types of resources returned to \&quot;file\&quot; or \&quot;dir\&quot; only. (optional)
     * @param include Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerUser**. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listResourceContentsAsync(String evApiKey, String evAccessToken, Long id, String sort, Integer offset, Integer limit, String type, String include, final ApiCallback<ResourceCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listResourceContentsValidateBeforeCall(evApiKey, evAccessToken, id, sort, offset, limit, type, include, _callback);
        Type localVarReturnType = new TypeToken<ResourceCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listResources
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param resource Resource identifier to get resources for. Can be path/id/name. (required)
     * @param sort Endpoint support multiple sort fields by allowing array of sort params. Sort fields should be applied in the order specified. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. (optional)
     * @param offset Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. e.g, setting &#x60;offset&#x3D;200&#x60; would trigger the server to skip the first 200 matching entries when returning the results. (optional, default to 0)
     * @param limit The number of files to limit the result. If you have more files in your directory than this limit, make multiple calls, incrementing the &#x60;offset&#x60; parameter, above. (optional)
     * @param type Limit types of resources returned to \&quot;file\&quot; or \&quot;dir\&quot; only. This is ignored if you are using the &#x60;name&#x60; parameter to trigger a search. (optional)
     * @param name Text to match resource names. This allows you to filter the results returned. For example, to locate only zip archive files, you can enter &#x60;*zip&#x60; and only resources ending in \&quot;zip\&quot; will be included in the list of results. (optional)
     * @param include Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerAccount**. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listResourcesCall(String evApiKey, String evAccessToken, String resource, String sort, Integer offset, Integer limit, String type, String name, String include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resource", resource));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listResourcesValidateBeforeCall(String evApiKey, String evAccessToken, String resource, String sort, Integer offset, Integer limit, String type, String name, String include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling listResources(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling listResources(Async)");
        }

        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling listResources(Async)");
        }

        return listResourcesCall(evApiKey, evAccessToken, resource, sort, offset, limit, type, name, include, _callback);

    }

    /**
     * Get a list of all resources
     * Returns a list of files and folders in the account. Use the &#x60;resource&#x60; query parameter to indicate the folder you wish to search in (which can be /).   **Searching for Files and Folders**  Using the &#x60;name&#x60; parameter triggers search mode, which will search the entire directory structure under the provided &#x60;resource&#x60; for files or folders with names matching the provided &#x60;name&#x60;. This supports wildcard matching such as:  - \\*Report\\* would find any files or folders with \&quot;Report\&quot; in the name. - Data\\_202?-09-30.xlsx would match items such as \&quot;Data\\_2020-09-30.xlsx\&quot;, \&quot;DATA\\_2021-09-30.xlsx\&quot;, \&quot;data\\_2022-09-30.xlsx\&quot; etc. - sales\\* would find any files or folders starting with the word \&quot;Sales\&quot; - \\*.csv would locate any files ending in \&quot;.csv\&quot; - \\* matches everything within the directory tree starting at your given &#x60;resource&#x60;  The search is not case-sensitive. Searching for Clients\\* or clients\\* or CLIENTS\\*, etc. will provide identical results  If you are using the &#x60;name&#x60; parameter to run a search, the &#x60;type&#x60; parameter will be ignored by the server.
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param resource Resource identifier to get resources for. Can be path/id/name. (required)
     * @param sort Endpoint support multiple sort fields by allowing array of sort params. Sort fields should be applied in the order specified. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. (optional)
     * @param offset Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. e.g, setting &#x60;offset&#x3D;200&#x60; would trigger the server to skip the first 200 matching entries when returning the results. (optional, default to 0)
     * @param limit The number of files to limit the result. If you have more files in your directory than this limit, make multiple calls, incrementing the &#x60;offset&#x60; parameter, above. (optional)
     * @param type Limit types of resources returned to \&quot;file\&quot; or \&quot;dir\&quot; only. This is ignored if you are using the &#x60;name&#x60; parameter to trigger a search. (optional)
     * @param name Text to match resource names. This allows you to filter the results returned. For example, to locate only zip archive files, you can enter &#x60;*zip&#x60; and only resources ending in \&quot;zip\&quot; will be included in the list of results. (optional)
     * @param include Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerAccount**. (optional)
     * @return ResourceCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ResourceCollectionResponse listResources(String evApiKey, String evAccessToken, String resource, String sort, Integer offset, Integer limit, String type, String name, String include) throws ApiException {
        ApiResponse<ResourceCollectionResponse> localVarResp = listResourcesWithHttpInfo(evApiKey, evAccessToken, resource, sort, offset, limit, type, name, include);
        return localVarResp.getData();
    }

    /**
     * Get a list of all resources
     * Returns a list of files and folders in the account. Use the &#x60;resource&#x60; query parameter to indicate the folder you wish to search in (which can be /).   **Searching for Files and Folders**  Using the &#x60;name&#x60; parameter triggers search mode, which will search the entire directory structure under the provided &#x60;resource&#x60; for files or folders with names matching the provided &#x60;name&#x60;. This supports wildcard matching such as:  - \\*Report\\* would find any files or folders with \&quot;Report\&quot; in the name. - Data\\_202?-09-30.xlsx would match items such as \&quot;Data\\_2020-09-30.xlsx\&quot;, \&quot;DATA\\_2021-09-30.xlsx\&quot;, \&quot;data\\_2022-09-30.xlsx\&quot; etc. - sales\\* would find any files or folders starting with the word \&quot;Sales\&quot; - \\*.csv would locate any files ending in \&quot;.csv\&quot; - \\* matches everything within the directory tree starting at your given &#x60;resource&#x60;  The search is not case-sensitive. Searching for Clients\\* or clients\\* or CLIENTS\\*, etc. will provide identical results  If you are using the &#x60;name&#x60; parameter to run a search, the &#x60;type&#x60; parameter will be ignored by the server.
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param resource Resource identifier to get resources for. Can be path/id/name. (required)
     * @param sort Endpoint support multiple sort fields by allowing array of sort params. Sort fields should be applied in the order specified. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. (optional)
     * @param offset Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. e.g, setting &#x60;offset&#x3D;200&#x60; would trigger the server to skip the first 200 matching entries when returning the results. (optional, default to 0)
     * @param limit The number of files to limit the result. If you have more files in your directory than this limit, make multiple calls, incrementing the &#x60;offset&#x60; parameter, above. (optional)
     * @param type Limit types of resources returned to \&quot;file\&quot; or \&quot;dir\&quot; only. This is ignored if you are using the &#x60;name&#x60; parameter to trigger a search. (optional)
     * @param name Text to match resource names. This allows you to filter the results returned. For example, to locate only zip archive files, you can enter &#x60;*zip&#x60; and only resources ending in \&quot;zip\&quot; will be included in the list of results. (optional)
     * @param include Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerAccount**. (optional)
     * @return ApiResponse&lt;ResourceCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceCollectionResponse> listResourcesWithHttpInfo(String evApiKey, String evAccessToken, String resource, String sort, Integer offset, Integer limit, String type, String name, String include) throws ApiException {
        okhttp3.Call localVarCall = listResourcesValidateBeforeCall(evApiKey, evAccessToken, resource, sort, offset, limit, type, name, include, null);
        Type localVarReturnType = new TypeToken<ResourceCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all resources (asynchronously)
     * Returns a list of files and folders in the account. Use the &#x60;resource&#x60; query parameter to indicate the folder you wish to search in (which can be /).   **Searching for Files and Folders**  Using the &#x60;name&#x60; parameter triggers search mode, which will search the entire directory structure under the provided &#x60;resource&#x60; for files or folders with names matching the provided &#x60;name&#x60;. This supports wildcard matching such as:  - \\*Report\\* would find any files or folders with \&quot;Report\&quot; in the name. - Data\\_202?-09-30.xlsx would match items such as \&quot;Data\\_2020-09-30.xlsx\&quot;, \&quot;DATA\\_2021-09-30.xlsx\&quot;, \&quot;data\\_2022-09-30.xlsx\&quot; etc. - sales\\* would find any files or folders starting with the word \&quot;Sales\&quot; - \\*.csv would locate any files ending in \&quot;.csv\&quot; - \\* matches everything within the directory tree starting at your given &#x60;resource&#x60;  The search is not case-sensitive. Searching for Clients\\* or clients\\* or CLIENTS\\*, etc. will provide identical results  If you are using the &#x60;name&#x60; parameter to run a search, the &#x60;type&#x60; parameter will be ignored by the server.
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param resource Resource identifier to get resources for. Can be path/id/name. (required)
     * @param sort Endpoint support multiple sort fields by allowing array of sort params. Sort fields should be applied in the order specified. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending. (optional)
     * @param offset Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list. e.g, setting &#x60;offset&#x3D;200&#x60; would trigger the server to skip the first 200 matching entries when returning the results. (optional, default to 0)
     * @param limit The number of files to limit the result. If you have more files in your directory than this limit, make multiple calls, incrementing the &#x60;offset&#x60; parameter, above. (optional)
     * @param type Limit types of resources returned to \&quot;file\&quot; or \&quot;dir\&quot; only. This is ignored if you are using the &#x60;name&#x60; parameter to trigger a search. (optional)
     * @param name Text to match resource names. This allows you to filter the results returned. For example, to locate only zip archive files, you can enter &#x60;*zip&#x60; and only resources ending in \&quot;zip\&quot; will be included in the list of results. (optional)
     * @param include Comma separated list of relationships to include in response. Possible values are **share**, **notifications**, **directFile**, **parentResource**, **ownerUser**, **ownerAccount**. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listResourcesAsync(String evApiKey, String evAccessToken, String resource, String sort, Integer offset, Integer limit, String type, String name, String include, final ApiCallback<ResourceCollectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listResourcesValidateBeforeCall(evApiKey, evAccessToken, resource, sort, offset, limit, type, name, include, _callback);
        Type localVarReturnType = new TypeToken<ResourceCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveResources
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param moveResourcesRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Multi Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveResourcesCall(String evApiKey, String evAccessToken, MoveResourcesRequestBody moveResourcesRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveResourcesRequestBody;

        // create path and map variables
        String localVarPath = "/resources/move";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveResourcesValidateBeforeCall(String evApiKey, String evAccessToken, MoveResourcesRequestBody moveResourcesRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling moveResources(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling moveResources(Async)");
        }

        return moveResourcesCall(evApiKey, evAccessToken, moveResourcesRequestBody, _callback);

    }

    /**
     * Move resources
     * Moves a set of exisiting files/folders (provided by an array &#x60;resources&#x60;) to the requested &#x60;parentResource&#x60; in your account. In the &#x60;resources&#x60; array, you may specify paths pointing files/folders throughout the account, but everything will be moved to the root of the &#x60;parentResource&#x60;.  **Notes:** - Authenticated user should have modify permission. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param moveResourcesRequestBody  (optional)
     * @return ResourceCopyMove
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Multi Response </td><td>  -  </td></tr>
     </table>
     */
    public ResourceCopyMove moveResources(String evApiKey, String evAccessToken, MoveResourcesRequestBody moveResourcesRequestBody) throws ApiException {
        ApiResponse<ResourceCopyMove> localVarResp = moveResourcesWithHttpInfo(evApiKey, evAccessToken, moveResourcesRequestBody);
        return localVarResp.getData();
    }

    /**
     * Move resources
     * Moves a set of exisiting files/folders (provided by an array &#x60;resources&#x60;) to the requested &#x60;parentResource&#x60; in your account. In the &#x60;resources&#x60; array, you may specify paths pointing files/folders throughout the account, but everything will be moved to the root of the &#x60;parentResource&#x60;.  **Notes:** - Authenticated user should have modify permission. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param moveResourcesRequestBody  (optional)
     * @return ApiResponse&lt;ResourceCopyMove&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Multi Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceCopyMove> moveResourcesWithHttpInfo(String evApiKey, String evAccessToken, MoveResourcesRequestBody moveResourcesRequestBody) throws ApiException {
        okhttp3.Call localVarCall = moveResourcesValidateBeforeCall(evApiKey, evAccessToken, moveResourcesRequestBody, null);
        Type localVarReturnType = new TypeToken<ResourceCopyMove>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Move resources (asynchronously)
     * Moves a set of exisiting files/folders (provided by an array &#x60;resources&#x60;) to the requested &#x60;parentResource&#x60; in your account. In the &#x60;resources&#x60; array, you may specify paths pointing files/folders throughout the account, but everything will be moved to the root of the &#x60;parentResource&#x60;.  **Notes:** - Authenticated user should have modify permission. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param moveResourcesRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Operation </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Multi Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveResourcesAsync(String evApiKey, String evAccessToken, MoveResourcesRequestBody moveResourcesRequestBody, final ApiCallback<ResourceCopyMove> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveResourcesValidateBeforeCall(evApiKey, evAccessToken, moveResourcesRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ResourceCopyMove>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateResourceById
     * @param id ID number of the resource (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param evApiKey API key required to make the API call. (required)
     * @param updateResourceByIdRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResourceByIdCall(Long id, String evAccessToken, String evApiKey, UpdateResourceByIdRequestBody updateResourceByIdRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateResourceByIdRequestBody;

        // create path and map variables
        String localVarPath = "/resources/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateResourceByIdValidateBeforeCall(Long id, String evAccessToken, String evApiKey, UpdateResourceByIdRequestBody updateResourceByIdRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateResourceById(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling updateResourceById(Async)");
        }

        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling updateResourceById(Async)");
        }

        return updateResourceByIdCall(id, evAccessToken, evApiKey, updateResourceByIdRequestBody, _callback);

    }

    /**
     * Rename a resource.
     * Update the specified file or folder resource record&#39;s \&quot;name\&quot; parameter. The resource is identified by the numeric resource ID that is passed in as the last segment of the URI. 
     * @param id ID number of the resource (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param evApiKey API key required to make the API call. (required)
     * @param updateResourceByIdRequestBody  (optional)
     * @return ResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ResourceResponse updateResourceById(Long id, String evAccessToken, String evApiKey, UpdateResourceByIdRequestBody updateResourceByIdRequestBody) throws ApiException {
        ApiResponse<ResourceResponse> localVarResp = updateResourceByIdWithHttpInfo(id, evAccessToken, evApiKey, updateResourceByIdRequestBody);
        return localVarResp.getData();
    }

    /**
     * Rename a resource.
     * Update the specified file or folder resource record&#39;s \&quot;name\&quot; parameter. The resource is identified by the numeric resource ID that is passed in as the last segment of the URI. 
     * @param id ID number of the resource (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param evApiKey API key required to make the API call. (required)
     * @param updateResourceByIdRequestBody  (optional)
     * @return ApiResponse&lt;ResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceResponse> updateResourceByIdWithHttpInfo(Long id, String evAccessToken, String evApiKey, UpdateResourceByIdRequestBody updateResourceByIdRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateResourceByIdValidateBeforeCall(id, evAccessToken, evApiKey, updateResourceByIdRequestBody, null);
        Type localVarReturnType = new TypeToken<ResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rename a resource. (asynchronously)
     * Update the specified file or folder resource record&#39;s \&quot;name\&quot; parameter. The resource is identified by the numeric resource ID that is passed in as the last segment of the URI. 
     * @param id ID number of the resource (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param evApiKey API key required to make the API call. (required)
     * @param updateResourceByIdRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResourceByIdAsync(Long id, String evAccessToken, String evApiKey, UpdateResourceByIdRequestBody updateResourceByIdRequestBody, final ApiCallback<ResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateResourceByIdValidateBeforeCall(id, evAccessToken, evApiKey, updateResourceByIdRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadFile
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param path Destination path for the file being uploaded, including the file name. (required)
     * @param fileSize File size, in bits, of the file being uploaded. (required)
     * @param offsetBytes Allows a file upload to resume at a certain number of bytes. (optional)
     * @param resume True if upload resume is supported, false if it isn&#39;t.  (optional, default to true)
     * @param allowOverwrite True if a file with the same name is found in the designated path, should be overwritten. False if different file names should be generated.  (optional, default to false)
     * @param _file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFileCall(String evApiKey, String evAccessToken, String path, Integer fileSize, Integer offsetBytes, Boolean resume, Boolean allowOverwrite, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (fileSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fileSize", fileSize));
        }

        if (resume != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resume", resume));
        }

        if (allowOverwrite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowOverwrite", allowOverwrite));
        }

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        if (offsetBytes != null) {
            localVarHeaderParams.put("offsetBytes", localVarApiClient.parameterToString(offsetBytes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadFileValidateBeforeCall(String evApiKey, String evAccessToken, String path, Integer fileSize, Integer offsetBytes, Boolean resume, Boolean allowOverwrite, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling uploadFile(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling uploadFile(Async)");
        }

        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling uploadFile(Async)");
        }

        // verify the required parameter 'fileSize' is set
        if (fileSize == null) {
            throw new ApiException("Missing the required parameter 'fileSize' when calling uploadFile(Async)");
        }

        return uploadFileCall(evApiKey, evAccessToken, path, fileSize, offsetBytes, resume, allowOverwrite, _file, _callback);

    }

    /**
     * Upload a file
     * Uploads a file to a specified path, with optional support for resuming a partially uploaded existing file. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param path Destination path for the file being uploaded, including the file name. (required)
     * @param fileSize File size, in bits, of the file being uploaded. (required)
     * @param offsetBytes Allows a file upload to resume at a certain number of bytes. (optional)
     * @param resume True if upload resume is supported, false if it isn&#39;t.  (optional, default to true)
     * @param allowOverwrite True if a file with the same name is found in the designated path, should be overwritten. False if different file names should be generated.  (optional, default to false)
     * @param _file  (optional)
     * @return ResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ResourceResponse uploadFile(String evApiKey, String evAccessToken, String path, Integer fileSize, Integer offsetBytes, Boolean resume, Boolean allowOverwrite, File _file) throws ApiException {
        ApiResponse<ResourceResponse> localVarResp = uploadFileWithHttpInfo(evApiKey, evAccessToken, path, fileSize, offsetBytes, resume, allowOverwrite, _file);
        return localVarResp.getData();
    }

    /**
     * Upload a file
     * Uploads a file to a specified path, with optional support for resuming a partially uploaded existing file. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param path Destination path for the file being uploaded, including the file name. (required)
     * @param fileSize File size, in bits, of the file being uploaded. (required)
     * @param offsetBytes Allows a file upload to resume at a certain number of bytes. (optional)
     * @param resume True if upload resume is supported, false if it isn&#39;t.  (optional, default to true)
     * @param allowOverwrite True if a file with the same name is found in the designated path, should be overwritten. False if different file names should be generated.  (optional, default to false)
     * @param _file  (optional)
     * @return ApiResponse&lt;ResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceResponse> uploadFileWithHttpInfo(String evApiKey, String evAccessToken, String path, Integer fileSize, Integer offsetBytes, Boolean resume, Boolean allowOverwrite, File _file) throws ApiException {
        okhttp3.Call localVarCall = uploadFileValidateBeforeCall(evApiKey, evAccessToken, path, fileSize, offsetBytes, resume, allowOverwrite, _file, null);
        Type localVarReturnType = new TypeToken<ResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a file (asynchronously)
     * Uploads a file to a specified path, with optional support for resuming a partially uploaded existing file. 
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param path Destination path for the file being uploaded, including the file name. (required)
     * @param fileSize File size, in bits, of the file being uploaded. (required)
     * @param offsetBytes Allows a file upload to resume at a certain number of bytes. (optional)
     * @param resume True if upload resume is supported, false if it isn&#39;t.  (optional, default to true)
     * @param allowOverwrite True if a file with the same name is found in the designated path, should be overwritten. False if different file names should be generated.  (optional, default to false)
     * @param _file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFileAsync(String evApiKey, String evAccessToken, String path, Integer fileSize, Integer offsetBytes, Boolean resume, Boolean allowOverwrite, File _file, final ApiCallback<ResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadFileValidateBeforeCall(evApiKey, evAccessToken, path, fileSize, offsetBytes, resume, allowOverwrite, _file, _callback);
        Type localVarReturnType = new TypeToken<ResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
