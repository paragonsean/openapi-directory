/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountQuotaValues {
  public static final String SERIALIZED_NAME_NOTICE_ENABLED = "noticeEnabled";
  @SerializedName(SERIALIZED_NAME_NOTICE_ENABLED)
  private Boolean noticeEnabled;

  public static final String SERIALIZED_NAME_NOTICE_THRESHOLD = "noticeThreshold";
  @SerializedName(SERIALIZED_NAME_NOTICE_THRESHOLD)
  private Integer noticeThreshold;

  public static final String SERIALIZED_NAME_TRANSACTIONS_NOTICE_ENABLED = "transactionsNoticeEnabled";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS_NOTICE_ENABLED)
  private Boolean transactionsNoticeEnabled;

  public static final String SERIALIZED_NAME_TRANSACTIONS_NOTICE_THRESHOLD = "transactionsNoticeThreshold";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS_NOTICE_THRESHOLD)
  private Integer transactionsNoticeThreshold;

  public AccountQuotaValues() {
  }

  public AccountQuotaValues noticeEnabled(Boolean noticeEnabled) {
    this.noticeEnabled = noticeEnabled;
    return this;
  }

  /**
   * Whether the system should email the account owner if the account storage exceeds the noticeThreshold value. Storage notice emails are sent no mo once per day.
   * @return noticeEnabled
   */
  @javax.annotation.Nullable
  public Boolean getNoticeEnabled() {
    return noticeEnabled;
  }

  public void setNoticeEnabled(Boolean noticeEnabled) {
    this.noticeEnabled = noticeEnabled;
  }


  public AccountQuotaValues noticeThreshold(Integer noticeThreshold) {
    this.noticeThreshold = noticeThreshold;
    return this;
  }

  /**
   * Percent of account storage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).
   * @return noticeThreshold
   */
  @javax.annotation.Nullable
  public Integer getNoticeThreshold() {
    return noticeThreshold;
  }

  public void setNoticeThreshold(Integer noticeThreshold) {
    this.noticeThreshold = noticeThreshold;
  }


  public AccountQuotaValues transactionsNoticeEnabled(Boolean transactionsNoticeEnabled) {
    this.transactionsNoticeEnabled = transactionsNoticeEnabled;
    return this;
  }

  /**
   * Whether the system should email the account owner if the daily transaction usage exceeds the transactionsNoticeThreshold value. Transaction notice emails are sent no more than once per day.
   * @return transactionsNoticeEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTransactionsNoticeEnabled() {
    return transactionsNoticeEnabled;
  }

  public void setTransactionsNoticeEnabled(Boolean transactionsNoticeEnabled) {
    this.transactionsNoticeEnabled = transactionsNoticeEnabled;
  }


  public AccountQuotaValues transactionsNoticeThreshold(Integer transactionsNoticeThreshold) {
    this.transactionsNoticeThreshold = transactionsNoticeThreshold;
    return this;
  }

  /**
   * Percent of daily transaction usage that would trigger a notice email. Must be a whole number between 70 and 100 (inclusive).
   * @return transactionsNoticeThreshold
   */
  @javax.annotation.Nullable
  public Integer getTransactionsNoticeThreshold() {
    return transactionsNoticeThreshold;
  }

  public void setTransactionsNoticeThreshold(Integer transactionsNoticeThreshold) {
    this.transactionsNoticeThreshold = transactionsNoticeThreshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountQuotaValues accountQuotaValues = (AccountQuotaValues) o;
    return Objects.equals(this.noticeEnabled, accountQuotaValues.noticeEnabled) &&
        Objects.equals(this.noticeThreshold, accountQuotaValues.noticeThreshold) &&
        Objects.equals(this.transactionsNoticeEnabled, accountQuotaValues.transactionsNoticeEnabled) &&
        Objects.equals(this.transactionsNoticeThreshold, accountQuotaValues.transactionsNoticeThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(noticeEnabled, noticeThreshold, transactionsNoticeEnabled, transactionsNoticeThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountQuotaValues {\n");
    sb.append("    noticeEnabled: ").append(toIndentedString(noticeEnabled)).append("\n");
    sb.append("    noticeThreshold: ").append(toIndentedString(noticeThreshold)).append("\n");
    sb.append("    transactionsNoticeEnabled: ").append(toIndentedString(transactionsNoticeEnabled)).append("\n");
    sb.append("    transactionsNoticeThreshold: ").append(toIndentedString(transactionsNoticeThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("noticeEnabled");
    openapiFields.add("noticeThreshold");
    openapiFields.add("transactionsNoticeEnabled");
    openapiFields.add("transactionsNoticeThreshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountQuotaValues
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountQuotaValues.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountQuotaValues is not found in the empty JSON string", AccountQuotaValues.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountQuotaValues.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountQuotaValues` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountQuotaValues.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountQuotaValues' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountQuotaValues> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountQuotaValues.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountQuotaValues>() {
           @Override
           public void write(JsonWriter out, AccountQuotaValues value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountQuotaValues read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountQuotaValues given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountQuotaValues
   * @throws IOException if the JSON string is invalid with respect to AccountQuotaValues
   */
  public static AccountQuotaValues fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountQuotaValues.class);
  }

  /**
   * Convert an instance of AccountQuotaValues to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

