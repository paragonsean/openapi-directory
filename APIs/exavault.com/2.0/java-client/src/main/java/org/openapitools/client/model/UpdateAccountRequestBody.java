/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountQuotaValues;
import org.openapitools.client.model.BrandingSettingsValues;
import org.openapitools.client.model.UpdateAccountRequestBodyAllowedIpRangesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateAccountRequestBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateAccountRequestBody {
  public static final String SERIALIZED_NAME_ACCOUNT_ONBOARDING = "accountOnboarding";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ONBOARDING)
  private Boolean accountOnboarding;

  public static final String SERIALIZED_NAME_ALLOWED_IP_RANGES = "allowedIpRanges";
  @SerializedName(SERIALIZED_NAME_ALLOWED_IP_RANGES)
  private List<UpdateAccountRequestBodyAllowedIpRangesInner> allowedIpRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRANDING_SETTINGS = "brandingSettings";
  @SerializedName(SERIALIZED_NAME_BRANDING_SETTINGS)
  private BrandingSettingsValues brandingSettings;

  public static final String SERIALIZED_NAME_COMPLEX_PASSWORDS = "complexPasswords";
  @SerializedName(SERIALIZED_NAME_COMPLEX_PASSWORDS)
  private Boolean complexPasswords;

  public static final String SERIALIZED_NAME_CUSTOM_SIGNATURE = "customSignature";
  @SerializedName(SERIALIZED_NAME_CUSTOM_SIGNATURE)
  private String customSignature;

  public static final String SERIALIZED_NAME_EMAIL_CONTENT = "emailContent";
  @SerializedName(SERIALIZED_NAME_EMAIL_CONTENT)
  private String emailContent;

  public static final String SERIALIZED_NAME_EMAIL_SUBJECT = "emailSubject";
  @SerializedName(SERIALIZED_NAME_EMAIL_SUBJECT)
  private String emailSubject;

  public static final String SERIALIZED_NAME_EXTERNAL_DOMAIN = "externalDomain";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DOMAIN)
  private String externalDomain;

  public static final String SERIALIZED_NAME_QUOTA = "quota";
  @SerializedName(SERIALIZED_NAME_QUOTA)
  private AccountQuotaValues quota;

  public static final String SERIALIZED_NAME_SECURE_ONLY = "secureOnly";
  @SerializedName(SERIALIZED_NAME_SECURE_ONLY)
  private Boolean secureOnly;

  public static final String SERIALIZED_NAME_SHOW_REFERRAL_LINKS = "showReferralLinks";
  @SerializedName(SERIALIZED_NAME_SHOW_REFERRAL_LINKS)
  private Boolean showReferralLinks;

  public UpdateAccountRequestBody() {
  }

  public UpdateAccountRequestBody accountOnboarding(Boolean accountOnboarding) {
    this.accountOnboarding = accountOnboarding;
    return this;
  }

  /**
   * Whether extra help popups can be enabled for users in the web file manager.
   * @return accountOnboarding
   */
  @javax.annotation.Nullable
  public Boolean getAccountOnboarding() {
    return accountOnboarding;
  }

  public void setAccountOnboarding(Boolean accountOnboarding) {
    this.accountOnboarding = accountOnboarding;
  }


  public UpdateAccountRequestBody allowedIpRanges(List<UpdateAccountRequestBodyAllowedIpRangesInner> allowedIpRanges) {
    this.allowedIpRanges = allowedIpRanges;
    return this;
  }

  public UpdateAccountRequestBody addAllowedIpRangesItem(UpdateAccountRequestBodyAllowedIpRangesInner allowedIpRangesItem) {
    if (this.allowedIpRanges == null) {
      this.allowedIpRanges = new ArrayList<>();
    }
    this.allowedIpRanges.add(allowedIpRangesItem);
    return this;
  }

  /**
   * IP Address Ranges for restricting account access
   * @return allowedIpRanges
   */
  @javax.annotation.Nullable
  public List<UpdateAccountRequestBodyAllowedIpRangesInner> getAllowedIpRanges() {
    return allowedIpRanges;
  }

  public void setAllowedIpRanges(List<UpdateAccountRequestBodyAllowedIpRangesInner> allowedIpRanges) {
    this.allowedIpRanges = allowedIpRanges;
  }


  public UpdateAccountRequestBody brandingSettings(BrandingSettingsValues brandingSettings) {
    this.brandingSettings = brandingSettings;
    return this;
  }

  /**
   * Get brandingSettings
   * @return brandingSettings
   */
  @javax.annotation.Nullable
  public BrandingSettingsValues getBrandingSettings() {
    return brandingSettings;
  }

  public void setBrandingSettings(BrandingSettingsValues brandingSettings) {
    this.brandingSettings = brandingSettings;
  }


  public UpdateAccountRequestBody complexPasswords(Boolean complexPasswords) {
    this.complexPasswords = complexPasswords;
    return this;
  }

  /**
   * Whether to require complex passwords for all passwords.
   * @return complexPasswords
   */
  @javax.annotation.Nullable
  public Boolean getComplexPasswords() {
    return complexPasswords;
  }

  public void setComplexPasswords(Boolean complexPasswords) {
    this.complexPasswords = complexPasswords;
  }


  public UpdateAccountRequestBody customSignature(String customSignature) {
    this.customSignature = customSignature;
    return this;
  }

  /**
   * Signature to be automatically added to the bottom of emails generated by the account.
   * @return customSignature
   */
  @javax.annotation.Nullable
  public String getCustomSignature() {
    return customSignature;
  }

  public void setCustomSignature(String customSignature) {
    this.customSignature = customSignature;
  }


  public UpdateAccountRequestBody emailContent(String emailContent) {
    this.emailContent = emailContent;
    return this;
  }

  /**
   * Content of welcome email template.
   * @return emailContent
   */
  @javax.annotation.Nullable
  public String getEmailContent() {
    return emailContent;
  }

  public void setEmailContent(String emailContent) {
    this.emailContent = emailContent;
  }


  public UpdateAccountRequestBody emailSubject(String emailSubject) {
    this.emailSubject = emailSubject;
    return this;
  }

  /**
   * Subject line for welcome emails
   * @return emailSubject
   */
  @javax.annotation.Nullable
  public String getEmailSubject() {
    return emailSubject;
  }

  public void setEmailSubject(String emailSubject) {
    this.emailSubject = emailSubject;
  }


  public UpdateAccountRequestBody externalDomain(String externalDomain) {
    this.externalDomain = externalDomain;
    return this;
  }

  /**
   * Custom address used for web file manager. Not available for all account types.
   * @return externalDomain
   */
  @javax.annotation.Nullable
  public String getExternalDomain() {
    return externalDomain;
  }

  public void setExternalDomain(String externalDomain) {
    this.externalDomain = externalDomain;
  }


  public UpdateAccountRequestBody quota(AccountQuotaValues quota) {
    this.quota = quota;
    return this;
  }

  /**
   * Get quota
   * @return quota
   */
  @javax.annotation.Nullable
  public AccountQuotaValues getQuota() {
    return quota;
  }

  public void setQuota(AccountQuotaValues quota) {
    this.quota = quota;
  }


  public UpdateAccountRequestBody secureOnly(Boolean secureOnly) {
    this.secureOnly = secureOnly;
    return this;
  }

  /**
   * Whether unencrypted FTP connections should be denied for the account.
   * @return secureOnly
   */
  @javax.annotation.Nullable
  public Boolean getSecureOnly() {
    return secureOnly;
  }

  public void setSecureOnly(Boolean secureOnly) {
    this.secureOnly = secureOnly;
  }


  public UpdateAccountRequestBody showReferralLinks(Boolean showReferralLinks) {
    this.showReferralLinks = showReferralLinks;
    return this;
  }

  /**
   * Whether to display links for others to sign up on share views and invitation emails
   * @return showReferralLinks
   */
  @javax.annotation.Nullable
  public Boolean getShowReferralLinks() {
    return showReferralLinks;
  }

  public void setShowReferralLinks(Boolean showReferralLinks) {
    this.showReferralLinks = showReferralLinks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAccountRequestBody updateAccountRequestBody = (UpdateAccountRequestBody) o;
    return Objects.equals(this.accountOnboarding, updateAccountRequestBody.accountOnboarding) &&
        Objects.equals(this.allowedIpRanges, updateAccountRequestBody.allowedIpRanges) &&
        Objects.equals(this.brandingSettings, updateAccountRequestBody.brandingSettings) &&
        Objects.equals(this.complexPasswords, updateAccountRequestBody.complexPasswords) &&
        Objects.equals(this.customSignature, updateAccountRequestBody.customSignature) &&
        Objects.equals(this.emailContent, updateAccountRequestBody.emailContent) &&
        Objects.equals(this.emailSubject, updateAccountRequestBody.emailSubject) &&
        Objects.equals(this.externalDomain, updateAccountRequestBody.externalDomain) &&
        Objects.equals(this.quota, updateAccountRequestBody.quota) &&
        Objects.equals(this.secureOnly, updateAccountRequestBody.secureOnly) &&
        Objects.equals(this.showReferralLinks, updateAccountRequestBody.showReferralLinks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountOnboarding, allowedIpRanges, brandingSettings, complexPasswords, customSignature, emailContent, emailSubject, externalDomain, quota, secureOnly, showReferralLinks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAccountRequestBody {\n");
    sb.append("    accountOnboarding: ").append(toIndentedString(accountOnboarding)).append("\n");
    sb.append("    allowedIpRanges: ").append(toIndentedString(allowedIpRanges)).append("\n");
    sb.append("    brandingSettings: ").append(toIndentedString(brandingSettings)).append("\n");
    sb.append("    complexPasswords: ").append(toIndentedString(complexPasswords)).append("\n");
    sb.append("    customSignature: ").append(toIndentedString(customSignature)).append("\n");
    sb.append("    emailContent: ").append(toIndentedString(emailContent)).append("\n");
    sb.append("    emailSubject: ").append(toIndentedString(emailSubject)).append("\n");
    sb.append("    externalDomain: ").append(toIndentedString(externalDomain)).append("\n");
    sb.append("    quota: ").append(toIndentedString(quota)).append("\n");
    sb.append("    secureOnly: ").append(toIndentedString(secureOnly)).append("\n");
    sb.append("    showReferralLinks: ").append(toIndentedString(showReferralLinks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountOnboarding");
    openapiFields.add("allowedIpRanges");
    openapiFields.add("brandingSettings");
    openapiFields.add("complexPasswords");
    openapiFields.add("customSignature");
    openapiFields.add("emailContent");
    openapiFields.add("emailSubject");
    openapiFields.add("externalDomain");
    openapiFields.add("quota");
    openapiFields.add("secureOnly");
    openapiFields.add("showReferralLinks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateAccountRequestBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAccountRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAccountRequestBody is not found in the empty JSON string", UpdateAccountRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAccountRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAccountRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("allowedIpRanges") != null && !jsonObj.get("allowedIpRanges").isJsonNull()) {
        JsonArray jsonArrayallowedIpRanges = jsonObj.getAsJsonArray("allowedIpRanges");
        if (jsonArrayallowedIpRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allowedIpRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allowedIpRanges` to be an array in the JSON string but got `%s`", jsonObj.get("allowedIpRanges").toString()));
          }

          // validate the optional field `allowedIpRanges` (array)
          for (int i = 0; i < jsonArrayallowedIpRanges.size(); i++) {
            UpdateAccountRequestBodyAllowedIpRangesInner.validateJsonElement(jsonArrayallowedIpRanges.get(i));
          };
        }
      }
      // validate the optional field `brandingSettings`
      if (jsonObj.get("brandingSettings") != null && !jsonObj.get("brandingSettings").isJsonNull()) {
        BrandingSettingsValues.validateJsonElement(jsonObj.get("brandingSettings"));
      }
      if ((jsonObj.get("customSignature") != null && !jsonObj.get("customSignature").isJsonNull()) && !jsonObj.get("customSignature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customSignature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customSignature").toString()));
      }
      if ((jsonObj.get("emailContent") != null && !jsonObj.get("emailContent").isJsonNull()) && !jsonObj.get("emailContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailContent").toString()));
      }
      if ((jsonObj.get("emailSubject") != null && !jsonObj.get("emailSubject").isJsonNull()) && !jsonObj.get("emailSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailSubject").toString()));
      }
      if ((jsonObj.get("externalDomain") != null && !jsonObj.get("externalDomain").isJsonNull()) && !jsonObj.get("externalDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalDomain").toString()));
      }
      // validate the optional field `quota`
      if (jsonObj.get("quota") != null && !jsonObj.get("quota").isJsonNull()) {
        AccountQuotaValues.validateJsonElement(jsonObj.get("quota"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAccountRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAccountRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAccountRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAccountRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAccountRequestBody>() {
           @Override
           public void write(JsonWriter out, UpdateAccountRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAccountRequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateAccountRequestBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateAccountRequestBody
   * @throws IOException if the JSON string is invalid with respect to UpdateAccountRequestBody
   */
  public static UpdateAccountRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAccountRequestBody.class);
  }

  /**
   * Convert an instance of UpdateAccountRequestBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

