/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Resource;
import org.openapitools.client.model.ResourceAttributes;
import org.openapitools.client.model.ResourceRelationships;
import org.openapitools.client.model.Share;
import org.openapitools.client.model.User;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationCollectionResponseIncludedInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(NotificationCollectionResponseIncludedInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NotificationCollectionResponseIncludedInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'NotificationCollectionResponseIncludedInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Share> adapterShare = gson.getDelegateAdapter(this, TypeToken.get(Share.class));
            final TypeAdapter<User> adapterUser = gson.getDelegateAdapter(this, TypeToken.get(User.class));
            final TypeAdapter<Resource> adapterResource = gson.getDelegateAdapter(this, TypeToken.get(Resource.class));

            return (TypeAdapter<T>) new TypeAdapter<NotificationCollectionResponseIncludedInner>() {
                @Override
                public void write(JsonWriter out, NotificationCollectionResponseIncludedInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `Share`
                    if (value.getActualInstance() instanceof Share) {
                        JsonElement element = adapterShare.toJsonTree((Share)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `User`
                    if (value.getActualInstance() instanceof User) {
                        JsonElement element = adapterUser.toJsonTree((User)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Resource`
                    if (value.getActualInstance() instanceof Resource) {
                        JsonElement element = adapterResource.toJsonTree((Resource)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: Resource, Share, User");
                }

                @Override
                public NotificationCollectionResponseIncludedInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize Share
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Share.validateJsonElement(jsonElement);
                        actualAdapter = adapterShare;
                        NotificationCollectionResponseIncludedInner ret = new NotificationCollectionResponseIncludedInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Share failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Share'", e);
                    }
                    // deserialize User
                    try {
                        // validate the JSON object to see if any exception is thrown
                        User.validateJsonElement(jsonElement);
                        actualAdapter = adapterUser;
                        NotificationCollectionResponseIncludedInner ret = new NotificationCollectionResponseIncludedInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for User failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'User'", e);
                    }
                    // deserialize Resource
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Resource.validateJsonElement(jsonElement);
                        actualAdapter = adapterResource;
                        NotificationCollectionResponseIncludedInner ret = new NotificationCollectionResponseIncludedInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Resource failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Resource'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for NotificationCollectionResponseIncludedInner: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public NotificationCollectionResponseIncludedInner() {
        super("anyOf", Boolean.FALSE);
    }

    public NotificationCollectionResponseIncludedInner(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Share", Share.class);
        schemas.put("User", User.class);
        schemas.put("Resource", Resource.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return NotificationCollectionResponseIncludedInner.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * Resource, Share, User
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof Share) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof User) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Resource) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Resource, Share, User");
    }

    /**
     * Get the actual instance, which can be the following:
     * Resource, Share, User
     *
     * @return The actual instance (Resource, Share, User)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Share`. If the actual instance is not `Share`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Share`
     * @throws ClassCastException if the instance is not `Share`
     */
    public Share getShare() throws ClassCastException {
        return (Share)super.getActualInstance();
    }
    /**
     * Get the actual instance of `User`. If the actual instance is not `User`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `User`
     * @throws ClassCastException if the instance is not `User`
     */
    public User getUser() throws ClassCastException {
        return (User)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Resource`. If the actual instance is not `Resource`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Resource`
     * @throws ClassCastException if the instance is not `Resource`
     */
    public Resource getResource() throws ClassCastException {
        return (Resource)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to NotificationCollectionResponseIncludedInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with Share
        try {
            Share.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Share failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with User
        try {
            User.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for User failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Resource
        try {
            Resource.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Resource failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for NotificationCollectionResponseIncludedInner with anyOf schemas: Resource, Share, User. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of NotificationCollectionResponseIncludedInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of NotificationCollectionResponseIncludedInner
     * @throws IOException if the JSON string is invalid with respect to NotificationCollectionResponseIncludedInner
     */
    public static NotificationCollectionResponseIncludedInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, NotificationCollectionResponseIncludedInner.class);
    }

    /**
     * Convert an instance of NotificationCollectionResponseIncludedInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

