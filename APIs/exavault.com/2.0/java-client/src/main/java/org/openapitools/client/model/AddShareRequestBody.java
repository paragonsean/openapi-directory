/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccessMode;
import org.openapitools.client.model.AddShareRequestBodyRecipientsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddShareRequestBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddShareRequestBody {
  public static final String SERIALIZED_NAME_ACCESS_MODE = "accessMode";
  @SerializedName(SERIALIZED_NAME_ACCESS_MODE)
  private AccessMode accessMode;

  public static final String SERIALIZED_NAME_EMBED = "embed";
  @SerializedName(SERIALIZED_NAME_EMBED)
  private Boolean embed;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private OffsetDateTime expiration;

  public static final String SERIALIZED_NAME_FILE_DROP_CREATE_FOLDERS = "fileDropCreateFolders";
  @SerializedName(SERIALIZED_NAME_FILE_DROP_CREATE_FOLDERS)
  private Boolean fileDropCreateFolders;

  public static final String SERIALIZED_NAME_HAS_NOTIFICATION = "hasNotification";
  @SerializedName(SERIALIZED_NAME_HAS_NOTIFICATION)
  private Boolean hasNotification;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "isPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_MESSAGE_BODY = "messageBody";
  @SerializedName(SERIALIZED_NAME_MESSAGE_BODY)
  private String messageBody;

  public static final String SERIALIZED_NAME_MESSAGE_SUBJECT = "messageSubject";
  @SerializedName(SERIALIZED_NAME_MESSAGE_SUBJECT)
  private String messageSubject;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATION_EMAILS = "notificationEmails";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_EMAILS)
  private List<String> notificationEmails = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<AddShareRequestBodyRecipientsInner> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRE_EMAIL = "requireEmail";
  @SerializedName(SERIALIZED_NAME_REQUIRE_EMAIL)
  private Boolean requireEmail;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<String> resources = new ArrayList<>();

  public static final String SERIALIZED_NAME_SENDING_LOCAL_FILES = "sendingLocalFiles";
  @SerializedName(SERIALIZED_NAME_SENDING_LOCAL_FILES)
  private Boolean sendingLocalFiles;

  /**
   * The type of share to create. See above for a description of each.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SHARED_FOLDER("shared_folder"),
    
    RECEIVE("receive"),
    
    SEND("send");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public AddShareRequestBody() {
  }

  public AddShareRequestBody accessMode(AccessMode accessMode) {
    this.accessMode = accessMode;
    return this;
  }

  /**
   * Get accessMode
   * @return accessMode
   */
  @javax.annotation.Nullable
  public AccessMode getAccessMode() {
    return accessMode;
  }

  public void setAccessMode(AccessMode accessMode) {
    this.accessMode = accessMode;
  }


  public AddShareRequestBody embed(Boolean embed) {
    this.embed = embed;
    return this;
  }

  /**
   * Whether this share can be embedded within a web page.
   * @return embed
   */
  @javax.annotation.Nullable
  public Boolean getEmbed() {
    return embed;
  }

  public void setEmbed(Boolean embed) {
    this.embed = embed;
  }


  public AddShareRequestBody expiration(OffsetDateTime expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * Expiration date for the share. If someone attempts to use the share after this date, they will receive an error that the share is not available.
   * @return expiration
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiration() {
    return expiration;
  }

  public void setExpiration(OffsetDateTime expiration) {
    this.expiration = expiration;
  }


  public AddShareRequestBody fileDropCreateFolders(Boolean fileDropCreateFolders) {
    this.fileDropCreateFolders = fileDropCreateFolders;
    return this;
  }

  /**
   * Only used for **receive** shares. If true, uploads will be automatically placed into sub-folders of the folder, named after the chosen field on your form. 
   * @return fileDropCreateFolders
   */
  @javax.annotation.Nullable
  public Boolean getFileDropCreateFolders() {
    return fileDropCreateFolders;
  }

  public void setFileDropCreateFolders(Boolean fileDropCreateFolders) {
    this.fileDropCreateFolders = fileDropCreateFolders;
  }


  public AddShareRequestBody hasNotification(Boolean hasNotification) {
    this.hasNotification = hasNotification;
    return this;
  }

  /**
   * Whether delivery receipts should be sent.
   * @return hasNotification
   */
  @javax.annotation.Nullable
  public Boolean getHasNotification() {
    return hasNotification;
  }

  public void setHasNotification(Boolean hasNotification) {
    this.hasNotification = hasNotification;
  }


  public AddShareRequestBody isPublic(Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

  /**
   * Whether someone can visit the share without following a personalized recipient link.
   * @return isPublic
   */
  @javax.annotation.Nullable
  public Boolean getIsPublic() {
    return isPublic;
  }

  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public AddShareRequestBody messageBody(String messageBody) {
    this.messageBody = messageBody;
    return this;
  }

  /**
   * The message to be included in email invitations for your recipients. Ignored if you have not also provided &#x60;recipients&#x60; and &#x60;messageSubject&#x60;
   * @return messageBody
   */
  @javax.annotation.Nullable
  public String getMessageBody() {
    return messageBody;
  }

  public void setMessageBody(String messageBody) {
    this.messageBody = messageBody;
  }


  public AddShareRequestBody messageSubject(String messageSubject) {
    this.messageSubject = messageSubject;
    return this;
  }

  /**
   * Subject to use on emails inviting recipients to the share. Ignored if you have not also provided &#x60;recipients&#x60; and a &#x60;messageBody&#x60;
   * @return messageSubject
   */
  @javax.annotation.Nullable
  public String getMessageSubject() {
    return messageSubject;
  }

  public void setMessageSubject(String messageSubject) {
    this.messageSubject = messageSubject;
  }


  public AddShareRequestBody name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A name for the share. This will be visible on the page that recipients visit. 
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AddShareRequestBody notificationEmails(List<String> notificationEmails) {
    this.notificationEmails = notificationEmails;
    return this;
  }

  public AddShareRequestBody addNotificationEmailsItem(String notificationEmailsItem) {
    if (this.notificationEmails == null) {
      this.notificationEmails = new ArrayList<>();
    }
    this.notificationEmails.add(notificationEmailsItem);
    return this;
  }

  /**
   * Emails that will receive delivery receipts for this share. &#x60;hasNotification&#x60; must be **true** for delivery receipts will be sent.
   * @return notificationEmails
   */
  @javax.annotation.Nullable
  public List<String> getNotificationEmails() {
    return notificationEmails;
  }

  public void setNotificationEmails(List<String> notificationEmails) {
    this.notificationEmails = notificationEmails;
  }


  public AddShareRequestBody password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Set a password for recipients to access the share. All recipients will use the same password.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public AddShareRequestBody recipients(List<AddShareRequestBodyRecipientsInner> recipients) {
    this.recipients = recipients;
    return this;
  }

  public AddShareRequestBody addRecipientsItem(AddShareRequestBodyRecipientsInner recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

  /**
   * People you want to invite to the share. **Note**: unless you also set the &#x60;messageSubject&#x60; and &#x60;messageBody&#x60; for the new share, invitation emails will not be sent to these recipients.
   * @return recipients
   */
  @javax.annotation.Nullable
  public List<AddShareRequestBodyRecipientsInner> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<AddShareRequestBodyRecipientsInner> recipients) {
    this.recipients = recipients;
  }


  public AddShareRequestBody requireEmail(Boolean requireEmail) {
    this.requireEmail = requireEmail;
    return this;
  }

  /**
   * True if recipients must provide their email to view the share.
   * @return requireEmail
   */
  @javax.annotation.Nullable
  public Boolean getRequireEmail() {
    return requireEmail;
  }

  public void setRequireEmail(Boolean requireEmail) {
    this.requireEmail = requireEmail;
  }


  public AddShareRequestBody resources(List<String> resources) {
    this.resources = resources;
    return this;
  }

  public AddShareRequestBody addResourcesItem(String resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

  /**
   * Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.  **shared_folder** and **receive** shares must have only one &#x60;resource&#x60;, which is a directory that does not have a current share attached.  **send** shares may have multiple &#x60;resource&#x60; parameters. You can also leave this parameter null if you are planning to upload files to the send. If you are planning to upload files to the send that are not yet in your account, you will also need to call the [POST /shares/complete-send/{id}](#operation/completeDirectSend) endpoint to finish the send operation. 
   * @return resources
   */
  @javax.annotation.Nullable
  public List<String> getResources() {
    return resources;
  }

  public void setResources(List<String> resources) {
    this.resources = resources;
  }


  public AddShareRequestBody sendingLocalFiles(Boolean sendingLocalFiles) {
    this.sendingLocalFiles = sendingLocalFiles;
    return this;
  }

  /**
   * Use this only for **send** shares. Flag to indicate that you are going to upload additional files from your computer to the share. If this is **true**, you will also need to use the [POST /shares/complete-send/{id}](#operation/completeDirectSend) call to finish setting up your share after the files are uploaded.
   * @return sendingLocalFiles
   */
  @javax.annotation.Nullable
  public Boolean getSendingLocalFiles() {
    return sendingLocalFiles;
  }

  public void setSendingLocalFiles(Boolean sendingLocalFiles) {
    this.sendingLocalFiles = sendingLocalFiles;
  }


  public AddShareRequestBody type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of share to create. See above for a description of each.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddShareRequestBody addShareRequestBody = (AddShareRequestBody) o;
    return Objects.equals(this.accessMode, addShareRequestBody.accessMode) &&
        Objects.equals(this.embed, addShareRequestBody.embed) &&
        Objects.equals(this.expiration, addShareRequestBody.expiration) &&
        Objects.equals(this.fileDropCreateFolders, addShareRequestBody.fileDropCreateFolders) &&
        Objects.equals(this.hasNotification, addShareRequestBody.hasNotification) &&
        Objects.equals(this.isPublic, addShareRequestBody.isPublic) &&
        Objects.equals(this.messageBody, addShareRequestBody.messageBody) &&
        Objects.equals(this.messageSubject, addShareRequestBody.messageSubject) &&
        Objects.equals(this.name, addShareRequestBody.name) &&
        Objects.equals(this.notificationEmails, addShareRequestBody.notificationEmails) &&
        Objects.equals(this.password, addShareRequestBody.password) &&
        Objects.equals(this.recipients, addShareRequestBody.recipients) &&
        Objects.equals(this.requireEmail, addShareRequestBody.requireEmail) &&
        Objects.equals(this.resources, addShareRequestBody.resources) &&
        Objects.equals(this.sendingLocalFiles, addShareRequestBody.sendingLocalFiles) &&
        Objects.equals(this.type, addShareRequestBody.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessMode, embed, expiration, fileDropCreateFolders, hasNotification, isPublic, messageBody, messageSubject, name, notificationEmails, password, recipients, requireEmail, resources, sendingLocalFiles, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddShareRequestBody {\n");
    sb.append("    accessMode: ").append(toIndentedString(accessMode)).append("\n");
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    fileDropCreateFolders: ").append(toIndentedString(fileDropCreateFolders)).append("\n");
    sb.append("    hasNotification: ").append(toIndentedString(hasNotification)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    messageBody: ").append(toIndentedString(messageBody)).append("\n");
    sb.append("    messageSubject: ").append(toIndentedString(messageSubject)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notificationEmails: ").append(toIndentedString(notificationEmails)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    requireEmail: ").append(toIndentedString(requireEmail)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    sendingLocalFiles: ").append(toIndentedString(sendingLocalFiles)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessMode");
    openapiFields.add("embed");
    openapiFields.add("expiration");
    openapiFields.add("fileDropCreateFolders");
    openapiFields.add("hasNotification");
    openapiFields.add("isPublic");
    openapiFields.add("messageBody");
    openapiFields.add("messageSubject");
    openapiFields.add("name");
    openapiFields.add("notificationEmails");
    openapiFields.add("password");
    openapiFields.add("recipients");
    openapiFields.add("requireEmail");
    openapiFields.add("resources");
    openapiFields.add("sendingLocalFiles");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddShareRequestBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddShareRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddShareRequestBody is not found in the empty JSON string", AddShareRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddShareRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddShareRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddShareRequestBody.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessMode`
      if (jsonObj.get("accessMode") != null && !jsonObj.get("accessMode").isJsonNull()) {
        AccessMode.validateJsonElement(jsonObj.get("accessMode"));
      }
      if ((jsonObj.get("messageBody") != null && !jsonObj.get("messageBody").isJsonNull()) && !jsonObj.get("messageBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageBody").toString()));
      }
      if ((jsonObj.get("messageSubject") != null && !jsonObj.get("messageSubject").isJsonNull()) && !jsonObj.get("messageSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageSubject").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notificationEmails") != null && !jsonObj.get("notificationEmails").isJsonNull() && !jsonObj.get("notificationEmails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationEmails` to be an array in the JSON string but got `%s`", jsonObj.get("notificationEmails").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
        if (jsonArrayrecipients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recipients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
          }

          // validate the optional field `recipients` (array)
          for (int i = 0; i < jsonArrayrecipients.size(); i++) {
            AddShareRequestBodyRecipientsInner.validateJsonElement(jsonArrayrecipients.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull() && !jsonObj.get("resources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddShareRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddShareRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddShareRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddShareRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<AddShareRequestBody>() {
           @Override
           public void write(JsonWriter out, AddShareRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddShareRequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddShareRequestBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddShareRequestBody
   * @throws IOException if the JSON string is invalid with respect to AddShareRequestBody
   */
  public static AddShareRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddShareRequestBody.class);
  }

  /**
   * Convert an instance of AddShareRequestBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

