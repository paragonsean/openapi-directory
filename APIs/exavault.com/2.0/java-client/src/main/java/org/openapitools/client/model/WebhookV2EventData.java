/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WebhookV2EventDataResourcesInner;
import org.openapitools.client.model.WebhookV2EventDataShareInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookV2EventData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebhookV2EventData {
  public static final String SERIALIZED_NAME_FORM_DETAILS = "formDetails";
  @SerializedName(SERIALIZED_NAME_FORM_DETAILS)
  private List<Object> formDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<WebhookV2EventDataResourcesInner> resources = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHARE = "share";
  @SerializedName(SERIALIZED_NAME_SHARE)
  private List<WebhookV2EventDataShareInner> share = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSFER_STATUS = "transferStatus";
  @SerializedName(SERIALIZED_NAME_TRANSFER_STATUS)
  private String transferStatus;

  public WebhookV2EventData() {
  }

  public WebhookV2EventData formDetails(List<Object> formDetails) {
    this.formDetails = formDetails;
    return this;
  }

  public WebhookV2EventData addFormDetailsItem(Object formDetailsItem) {
    if (this.formDetails == null) {
      this.formDetails = new ArrayList<>();
    }
    this.formDetails.add(formDetailsItem);
    return this;
  }

  /**
   * Get formDetails
   * @return formDetails
   */
  @javax.annotation.Nullable
  public List<Object> getFormDetails() {
    return formDetails;
  }

  public void setFormDetails(List<Object> formDetails) {
    this.formDetails = formDetails;
  }


  public WebhookV2EventData resources(List<WebhookV2EventDataResourcesInner> resources) {
    this.resources = resources;
    return this;
  }

  public WebhookV2EventData addResourcesItem(WebhookV2EventDataResourcesInner resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

  /**
   * Get resources
   * @return resources
   */
  @javax.annotation.Nullable
  public List<WebhookV2EventDataResourcesInner> getResources() {
    return resources;
  }

  public void setResources(List<WebhookV2EventDataResourcesInner> resources) {
    this.resources = resources;
  }


  public WebhookV2EventData share(List<WebhookV2EventDataShareInner> share) {
    this.share = share;
    return this;
  }

  public WebhookV2EventData addShareItem(WebhookV2EventDataShareInner shareItem) {
    if (this.share == null) {
      this.share = new ArrayList<>();
    }
    this.share.add(shareItem);
    return this;
  }

  /**
   * Get share
   * @return share
   */
  @javax.annotation.Nullable
  public List<WebhookV2EventDataShareInner> getShare() {
    return share;
  }

  public void setShare(List<WebhookV2EventDataShareInner> share) {
    this.share = share;
  }


  public WebhookV2EventData transferStatus(String transferStatus) {
    this.transferStatus = transferStatus;
    return this;
  }

  /**
   * For uploads, and downloads, whether the file transferred OK. &#x60;success&#x60; means the transfer did not have errors
   * @return transferStatus
   */
  @javax.annotation.Nullable
  public String getTransferStatus() {
    return transferStatus;
  }

  public void setTransferStatus(String transferStatus) {
    this.transferStatus = transferStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookV2EventData webhookV2EventData = (WebhookV2EventData) o;
    return Objects.equals(this.formDetails, webhookV2EventData.formDetails) &&
        Objects.equals(this.resources, webhookV2EventData.resources) &&
        Objects.equals(this.share, webhookV2EventData.share) &&
        Objects.equals(this.transferStatus, webhookV2EventData.transferStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formDetails, resources, share, transferStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookV2EventData {\n");
    sb.append("    formDetails: ").append(toIndentedString(formDetails)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    share: ").append(toIndentedString(share)).append("\n");
    sb.append("    transferStatus: ").append(toIndentedString(transferStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("formDetails");
    openapiFields.add("resources");
    openapiFields.add("share");
    openapiFields.add("transferStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookV2EventData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookV2EventData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookV2EventData is not found in the empty JSON string", WebhookV2EventData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookV2EventData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookV2EventData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("formDetails") != null && !jsonObj.get("formDetails").isJsonNull() && !jsonObj.get("formDetails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `formDetails` to be an array in the JSON string but got `%s`", jsonObj.get("formDetails").toString()));
      }
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        JsonArray jsonArrayresources = jsonObj.getAsJsonArray("resources");
        if (jsonArrayresources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
          }

          // validate the optional field `resources` (array)
          for (int i = 0; i < jsonArrayresources.size(); i++) {
            WebhookV2EventDataResourcesInner.validateJsonElement(jsonArrayresources.get(i));
          };
        }
      }
      if (jsonObj.get("share") != null && !jsonObj.get("share").isJsonNull()) {
        JsonArray jsonArrayshare = jsonObj.getAsJsonArray("share");
        if (jsonArrayshare != null) {
          // ensure the json data is an array
          if (!jsonObj.get("share").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `share` to be an array in the JSON string but got `%s`", jsonObj.get("share").toString()));
          }

          // validate the optional field `share` (array)
          for (int i = 0; i < jsonArrayshare.size(); i++) {
            WebhookV2EventDataShareInner.validateJsonElement(jsonArrayshare.get(i));
          };
        }
      }
      if ((jsonObj.get("transferStatus") != null && !jsonObj.get("transferStatus").isJsonNull()) && !jsonObj.get("transferStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookV2EventData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookV2EventData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookV2EventData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookV2EventData.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookV2EventData>() {
           @Override
           public void write(JsonWriter out, WebhookV2EventData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookV2EventData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookV2EventData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookV2EventData
   * @throws IOException if the JSON string is invalid with respect to WebhookV2EventData
   */
  public static WebhookV2EventData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookV2EventData.class);
  }

  /**
   * Convert an instance of WebhookV2EventData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

