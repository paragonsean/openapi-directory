/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ResendInvitationsRequestBody;
import org.openapitools.client.model.ShareRecipientsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecipientsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecipientsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecipientsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for resendInvitationsForShare
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param shareId ID of the share to resend invites for. (required)
     * @param resendInvitationsRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendInvitationsForShareCall(String evApiKey, String evAccessToken, Integer shareId, ResendInvitationsRequestBody resendInvitationsRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resendInvitationsRequestBody;

        // create path and map variables
        String localVarPath = "/recipients/shares/invites/{shareId}"
            .replace("{" + "shareId" + "}", localVarApiClient.escapeString(shareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (evApiKey != null) {
            localVarHeaderParams.put("ev-api-key", localVarApiClient.parameterToString(evApiKey));
        }

        if (evAccessToken != null) {
            localVarHeaderParams.put("ev-access-token", localVarApiClient.parameterToString(evAccessToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendInvitationsForShareValidateBeforeCall(String evApiKey, String evAccessToken, Integer shareId, ResendInvitationsRequestBody resendInvitationsRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'evApiKey' is set
        if (evApiKey == null) {
            throw new ApiException("Missing the required parameter 'evApiKey' when calling resendInvitationsForShare(Async)");
        }

        // verify the required parameter 'evAccessToken' is set
        if (evAccessToken == null) {
            throw new ApiException("Missing the required parameter 'evAccessToken' when calling resendInvitationsForShare(Async)");
        }

        // verify the required parameter 'shareId' is set
        if (shareId == null) {
            throw new ApiException("Missing the required parameter 'shareId' when calling resendInvitationsForShare(Async)");
        }

        return resendInvitationsForShareCall(evApiKey, evAccessToken, shareId, resendInvitationsRequestBody, _callback);

    }

    /**
     * Resend invitations to share recipients
     * Resend invitations to one or all recipients attached to specified share. The most recent message that was sent for the share will be re-used for this email.  You can use [GET /shares/{id}](#operation/getShareById) to view the recipient list and message history for a share. Use [PATCH /shares/{id}](#operation/updateShareById) to add or remove recipients.
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param shareId ID of the share to resend invites for. (required)
     * @param resendInvitationsRequestBody  (optional)
     * @return ShareRecipientsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ShareRecipientsResponse resendInvitationsForShare(String evApiKey, String evAccessToken, Integer shareId, ResendInvitationsRequestBody resendInvitationsRequestBody) throws ApiException {
        ApiResponse<ShareRecipientsResponse> localVarResp = resendInvitationsForShareWithHttpInfo(evApiKey, evAccessToken, shareId, resendInvitationsRequestBody);
        return localVarResp.getData();
    }

    /**
     * Resend invitations to share recipients
     * Resend invitations to one or all recipients attached to specified share. The most recent message that was sent for the share will be re-used for this email.  You can use [GET /shares/{id}](#operation/getShareById) to view the recipient list and message history for a share. Use [PATCH /shares/{id}](#operation/updateShareById) to add or remove recipients.
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param shareId ID of the share to resend invites for. (required)
     * @param resendInvitationsRequestBody  (optional)
     * @return ApiResponse&lt;ShareRecipientsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShareRecipientsResponse> resendInvitationsForShareWithHttpInfo(String evApiKey, String evAccessToken, Integer shareId, ResendInvitationsRequestBody resendInvitationsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = resendInvitationsForShareValidateBeforeCall(evApiKey, evAccessToken, shareId, resendInvitationsRequestBody, null);
        Type localVarReturnType = new TypeToken<ShareRecipientsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resend invitations to share recipients (asynchronously)
     * Resend invitations to one or all recipients attached to specified share. The most recent message that was sent for the share will be re-used for this email.  You can use [GET /shares/{id}](#operation/getShareById) to view the recipient list and message history for a share. Use [PATCH /shares/{id}](#operation/updateShareById) to add or remove recipients.
     * @param evApiKey API Key required to make the API call. (required)
     * @param evAccessToken Access token required to make the API call. (required)
     * @param shareId ID of the share to resend invites for. (required)
     * @param resendInvitationsRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendInvitationsForShareAsync(String evApiKey, String evAccessToken, Integer shareId, ResendInvitationsRequestBody resendInvitationsRequestBody, final ApiCallback<ShareRecipientsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendInvitationsForShareValidateBeforeCall(evApiKey, evAccessToken, shareId, resendInvitationsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ShareRecipientsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
