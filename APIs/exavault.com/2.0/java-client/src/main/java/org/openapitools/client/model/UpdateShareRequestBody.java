/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccessMode;
import org.openapitools.client.model.AddShareRequestBodyRecipientsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateShareRequestBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateShareRequestBody {
  public static final String SERIALIZED_NAME_ACCESS_MODE = "accessMode";
  @SerializedName(SERIALIZED_NAME_ACCESS_MODE)
  private AccessMode accessMode;

  public static final String SERIALIZED_NAME_EMBED = "embed";
  @SerializedName(SERIALIZED_NAME_EMBED)
  private Boolean embed;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private OffsetDateTime expiration;

  public static final String SERIALIZED_NAME_FILE_DROP_CREATE_FOLDERS = "fileDropCreateFolders";
  @SerializedName(SERIALIZED_NAME_FILE_DROP_CREATE_FOLDERS)
  private Boolean fileDropCreateFolders;

  public static final String SERIALIZED_NAME_HAS_NOTIFICATION = "hasNotification";
  @SerializedName(SERIALIZED_NAME_HAS_NOTIFICATION)
  private Boolean hasNotification;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "isPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_MESSAGE_BODY = "messageBody";
  @SerializedName(SERIALIZED_NAME_MESSAGE_BODY)
  private String messageBody;

  public static final String SERIALIZED_NAME_MESSAGE_SUBJECT = "messageSubject";
  @SerializedName(SERIALIZED_NAME_MESSAGE_SUBJECT)
  private String messageSubject;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATION_EMAILS = "notificationEmails";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_EMAILS)
  private List<String> notificationEmails = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<AddShareRequestBodyRecipientsInner> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRE_EMAIL = "requireEmail";
  @SerializedName(SERIALIZED_NAME_REQUIRE_EMAIL)
  private Boolean requireEmail;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<String> resources = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public UpdateShareRequestBody() {
  }

  public UpdateShareRequestBody accessMode(AccessMode accessMode) {
    this.accessMode = accessMode;
    return this;
  }

  /**
   * Get accessMode
   * @return accessMode
   */
  @javax.annotation.Nullable
  public AccessMode getAccessMode() {
    return accessMode;
  }

  public void setAccessMode(AccessMode accessMode) {
    this.accessMode = accessMode;
  }


  public UpdateShareRequestBody embed(Boolean embed) {
    this.embed = embed;
    return this;
  }

  /**
   * Whether the share can be embedded in another web page.
   * @return embed
   */
  @javax.annotation.Nullable
  public Boolean getEmbed() {
    return embed;
  }

  public void setEmbed(Boolean embed) {
    this.embed = embed;
  }


  public UpdateShareRequestBody expiration(OffsetDateTime expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * New expiration date and time for the share
   * @return expiration
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiration() {
    return expiration;
  }

  public void setExpiration(OffsetDateTime expiration) {
    this.expiration = expiration;
  }


  public UpdateShareRequestBody fileDropCreateFolders(Boolean fileDropCreateFolders) {
    this.fileDropCreateFolders = fileDropCreateFolders;
    return this;
  }

  /**
   * Whether uploads to a receive folder should be automatically placed into subfolders. See our [receive folder documentation](/docs/account/05-file-sharing/05-form-builder#advanced-form-settings)
   * @return fileDropCreateFolders
   */
  @javax.annotation.Nullable
  public Boolean getFileDropCreateFolders() {
    return fileDropCreateFolders;
  }

  public void setFileDropCreateFolders(Boolean fileDropCreateFolders) {
    this.fileDropCreateFolders = fileDropCreateFolders;
  }


  public UpdateShareRequestBody hasNotification(Boolean hasNotification) {
    this.hasNotification = hasNotification;
    return this;
  }

  /**
   * Whether delivery receipts should be sent for this share.
   * @return hasNotification
   */
  @javax.annotation.Nullable
  public Boolean getHasNotification() {
    return hasNotification;
  }

  public void setHasNotification(Boolean hasNotification) {
    this.hasNotification = hasNotification;
  }


  public UpdateShareRequestBody isPublic(Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

  /**
   * Whether people can visit the share without following a link from an invitation email
   * @return isPublic
   */
  @javax.annotation.Nullable
  public Boolean getIsPublic() {
    return isPublic;
  }

  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public UpdateShareRequestBody messageBody(String messageBody) {
    this.messageBody = messageBody;
    return this;
  }

  /**
   * Message content to use for emails inviting recipients to the share. Ignored if you have not also provided &#x60;recipients&#x60; and a &#x60;subject&#x60;
   * @return messageBody
   */
  @javax.annotation.Nullable
  public String getMessageBody() {
    return messageBody;
  }

  public void setMessageBody(String messageBody) {
    this.messageBody = messageBody;
  }


  public UpdateShareRequestBody messageSubject(String messageSubject) {
    this.messageSubject = messageSubject;
    return this;
  }

  /**
   * Subject to use on emails inviting recipients to the share. Ignored if you have not also provided &#x60;recipients&#x60; and a &#x60;message&#x60;
   * @return messageSubject
   */
  @javax.annotation.Nullable
  public String getMessageSubject() {
    return messageSubject;
  }

  public void setMessageSubject(String messageSubject) {
    this.messageSubject = messageSubject;
  }


  public UpdateShareRequestBody name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the share.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateShareRequestBody notificationEmails(List<String> notificationEmails) {
    this.notificationEmails = notificationEmails;
    return this;
  }

  public UpdateShareRequestBody addNotificationEmailsItem(String notificationEmailsItem) {
    if (this.notificationEmails == null) {
      this.notificationEmails = new ArrayList<>();
    }
    this.notificationEmails.add(notificationEmailsItem);
    return this;
  }

  /**
   * List of email addresses to send delivery receipts to. Ignored if &#x60;hasNotification&#x60; is false. 
   * @return notificationEmails
   */
  @javax.annotation.Nullable
  public List<String> getNotificationEmails() {
    return notificationEmails;
  }

  public void setNotificationEmails(List<String> notificationEmails) {
    this.notificationEmails = notificationEmails;
  }


  public UpdateShareRequestBody password(String password) {
    this.password = password;
    return this;
  }

  /**
   * New password for the share. To leave the password unchanged, do not send this parameter.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public UpdateShareRequestBody recipients(List<AddShareRequestBodyRecipientsInner> recipients) {
    this.recipients = recipients;
    return this;
  }

  public UpdateShareRequestBody addRecipientsItem(AddShareRequestBodyRecipientsInner recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

  /**
   * People you want to invite to the share.   **Note**: unless you also set the &#x60;subject&#x60; and &#x60;message&#x60; for the new share, invitation emails will not be sent to these recipients.  **Note**: Recipients in this list will **REPLACE** the recipients already assigned to this share. 
   * @return recipients
   */
  @javax.annotation.Nullable
  public List<AddShareRequestBodyRecipientsInner> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<AddShareRequestBodyRecipientsInner> recipients) {
    this.recipients = recipients;
  }


  public UpdateShareRequestBody requireEmail(Boolean requireEmail) {
    this.requireEmail = requireEmail;
    return this;
  }

  /**
   * Whether visitors to the share will be required to enter their email in order to access the share.
   * @return requireEmail
   */
  @javax.annotation.Nullable
  public Boolean getRequireEmail() {
    return requireEmail;
  }

  public void setRequireEmail(Boolean requireEmail) {
    this.requireEmail = requireEmail;
  }


  public UpdateShareRequestBody resources(List<String> resources) {
    this.resources = resources;
    return this;
  }

  public UpdateShareRequestBody addResourcesItem(String resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

  /**
   * Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.  **shared_folder** and **receive** shares must have only one &#x60;resource&#x60;, which is a directory that does not have a current share attached.  **send** shares may have multiple &#x60;resource&#x60; parameters.   **NOTE**: Sending this parameter will **REPLACE** the existing resources with the resources included in this request.
   * @return resources
   */
  @javax.annotation.Nullable
  public List<String> getResources() {
    return resources;
  }

  public void setResources(List<String> resources) {
    this.resources = resources;
  }


  public UpdateShareRequestBody status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * New status for the share. You can set an active share to inactive by setting the status to **0**
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateShareRequestBody updateShareRequestBody = (UpdateShareRequestBody) o;
    return Objects.equals(this.accessMode, updateShareRequestBody.accessMode) &&
        Objects.equals(this.embed, updateShareRequestBody.embed) &&
        Objects.equals(this.expiration, updateShareRequestBody.expiration) &&
        Objects.equals(this.fileDropCreateFolders, updateShareRequestBody.fileDropCreateFolders) &&
        Objects.equals(this.hasNotification, updateShareRequestBody.hasNotification) &&
        Objects.equals(this.isPublic, updateShareRequestBody.isPublic) &&
        Objects.equals(this.messageBody, updateShareRequestBody.messageBody) &&
        Objects.equals(this.messageSubject, updateShareRequestBody.messageSubject) &&
        Objects.equals(this.name, updateShareRequestBody.name) &&
        Objects.equals(this.notificationEmails, updateShareRequestBody.notificationEmails) &&
        Objects.equals(this.password, updateShareRequestBody.password) &&
        Objects.equals(this.recipients, updateShareRequestBody.recipients) &&
        Objects.equals(this.requireEmail, updateShareRequestBody.requireEmail) &&
        Objects.equals(this.resources, updateShareRequestBody.resources) &&
        Objects.equals(this.status, updateShareRequestBody.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessMode, embed, expiration, fileDropCreateFolders, hasNotification, isPublic, messageBody, messageSubject, name, notificationEmails, password, recipients, requireEmail, resources, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateShareRequestBody {\n");
    sb.append("    accessMode: ").append(toIndentedString(accessMode)).append("\n");
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    fileDropCreateFolders: ").append(toIndentedString(fileDropCreateFolders)).append("\n");
    sb.append("    hasNotification: ").append(toIndentedString(hasNotification)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    messageBody: ").append(toIndentedString(messageBody)).append("\n");
    sb.append("    messageSubject: ").append(toIndentedString(messageSubject)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notificationEmails: ").append(toIndentedString(notificationEmails)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    requireEmail: ").append(toIndentedString(requireEmail)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessMode");
    openapiFields.add("embed");
    openapiFields.add("expiration");
    openapiFields.add("fileDropCreateFolders");
    openapiFields.add("hasNotification");
    openapiFields.add("isPublic");
    openapiFields.add("messageBody");
    openapiFields.add("messageSubject");
    openapiFields.add("name");
    openapiFields.add("notificationEmails");
    openapiFields.add("password");
    openapiFields.add("recipients");
    openapiFields.add("requireEmail");
    openapiFields.add("resources");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateShareRequestBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateShareRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateShareRequestBody is not found in the empty JSON string", UpdateShareRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateShareRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateShareRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessMode`
      if (jsonObj.get("accessMode") != null && !jsonObj.get("accessMode").isJsonNull()) {
        AccessMode.validateJsonElement(jsonObj.get("accessMode"));
      }
      if ((jsonObj.get("messageBody") != null && !jsonObj.get("messageBody").isJsonNull()) && !jsonObj.get("messageBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageBody").toString()));
      }
      if ((jsonObj.get("messageSubject") != null && !jsonObj.get("messageSubject").isJsonNull()) && !jsonObj.get("messageSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageSubject").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notificationEmails") != null && !jsonObj.get("notificationEmails").isJsonNull() && !jsonObj.get("notificationEmails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationEmails` to be an array in the JSON string but got `%s`", jsonObj.get("notificationEmails").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
        if (jsonArrayrecipients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recipients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
          }

          // validate the optional field `recipients` (array)
          for (int i = 0; i < jsonArrayrecipients.size(); i++) {
            AddShareRequestBodyRecipientsInner.validateJsonElement(jsonArrayrecipients.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull() && !jsonObj.get("resources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateShareRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateShareRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateShareRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateShareRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateShareRequestBody>() {
           @Override
           public void write(JsonWriter out, UpdateShareRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateShareRequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateShareRequestBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateShareRequestBody
   * @throws IOException if the JSON string is invalid with respect to UpdateShareRequestBody
   */
  public static UpdateShareRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateShareRequestBody.class);
  }

  /**
   * Convert an instance of UpdateShareRequestBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

