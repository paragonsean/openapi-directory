/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Advanced field settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FormFieldUploadAreaSettings {
  public static final String SERIALIZED_NAME_FILE_TYPES = "fileTypes";
  @SerializedName(SERIALIZED_NAME_FILE_TYPES)
  private String fileTypes;

  public FormFieldUploadAreaSettings() {
  }

  public FormFieldUploadAreaSettings fileTypes(String fileTypes) {
    this.fileTypes = fileTypes;
    return this;
  }

  /**
   * File types that can be uploaded. Comma-delimited string of MIME file types.
   * @return fileTypes
   */
  @javax.annotation.Nullable
  public String getFileTypes() {
    return fileTypes;
  }

  public void setFileTypes(String fileTypes) {
    this.fileTypes = fileTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormFieldUploadAreaSettings formFieldUploadAreaSettings = (FormFieldUploadAreaSettings) o;
    return Objects.equals(this.fileTypes, formFieldUploadAreaSettings.fileTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormFieldUploadAreaSettings {\n");
    sb.append("    fileTypes: ").append(toIndentedString(fileTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fileTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FormFieldUploadAreaSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FormFieldUploadAreaSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormFieldUploadAreaSettings is not found in the empty JSON string", FormFieldUploadAreaSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FormFieldUploadAreaSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FormFieldUploadAreaSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fileTypes") != null && !jsonObj.get("fileTypes").isJsonNull()) && !jsonObj.get("fileTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormFieldUploadAreaSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormFieldUploadAreaSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormFieldUploadAreaSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormFieldUploadAreaSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<FormFieldUploadAreaSettings>() {
           @Override
           public void write(JsonWriter out, FormFieldUploadAreaSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FormFieldUploadAreaSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FormFieldUploadAreaSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FormFieldUploadAreaSettings
   * @throws IOException if the JSON string is invalid with respect to FormFieldUploadAreaSettings
   */
  public static FormFieldUploadAreaSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormFieldUploadAreaSettings.class);
  }

  /**
   * Convert an instance of FormFieldUploadAreaSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

