/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlanDetailsWebhookOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlanDetailsWebhookOptions {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_INCLUDE_TRIGGERS = "includeTriggers";
  @SerializedName(SERIALIZED_NAME_INCLUDE_TRIGGERS)
  private String includeTriggers;

  public static final String SERIALIZED_NAME_RESTRICTION_TYPES = "restrictionTypes";
  @SerializedName(SERIALIZED_NAME_RESTRICTION_TYPES)
  private List<String> restrictionTypes = new ArrayList<>();

  public PlanDetailsWebhookOptions() {
  }

  public PlanDetailsWebhookOptions amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public PlanDetailsWebhookOptions includeTriggers(String includeTriggers) {
    this.includeTriggers = includeTriggers;
    return this;
  }

  /**
   * Get includeTriggers
   * @return includeTriggers
   */
  @javax.annotation.Nullable
  public String getIncludeTriggers() {
    return includeTriggers;
  }

  public void setIncludeTriggers(String includeTriggers) {
    this.includeTriggers = includeTriggers;
  }


  public PlanDetailsWebhookOptions restrictionTypes(List<String> restrictionTypes) {
    this.restrictionTypes = restrictionTypes;
    return this;
  }

  public PlanDetailsWebhookOptions addRestrictionTypesItem(String restrictionTypesItem) {
    if (this.restrictionTypes == null) {
      this.restrictionTypes = new ArrayList<>();
    }
    this.restrictionTypes.add(restrictionTypesItem);
    return this;
  }

  /**
   * Get restrictionTypes
   * @return restrictionTypes
   */
  @javax.annotation.Nullable
  public List<String> getRestrictionTypes() {
    return restrictionTypes;
  }

  public void setRestrictionTypes(List<String> restrictionTypes) {
    this.restrictionTypes = restrictionTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlanDetailsWebhookOptions planDetailsWebhookOptions = (PlanDetailsWebhookOptions) o;
    return Objects.equals(this.amount, planDetailsWebhookOptions.amount) &&
        Objects.equals(this.includeTriggers, planDetailsWebhookOptions.includeTriggers) &&
        Objects.equals(this.restrictionTypes, planDetailsWebhookOptions.restrictionTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, includeTriggers, restrictionTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlanDetailsWebhookOptions {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    includeTriggers: ").append(toIndentedString(includeTriggers)).append("\n");
    sb.append("    restrictionTypes: ").append(toIndentedString(restrictionTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("includeTriggers");
    openapiFields.add("restrictionTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlanDetailsWebhookOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlanDetailsWebhookOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlanDetailsWebhookOptions is not found in the empty JSON string", PlanDetailsWebhookOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlanDetailsWebhookOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlanDetailsWebhookOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("includeTriggers") != null && !jsonObj.get("includeTriggers").isJsonNull()) && !jsonObj.get("includeTriggers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `includeTriggers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("includeTriggers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("restrictionTypes") != null && !jsonObj.get("restrictionTypes").isJsonNull() && !jsonObj.get("restrictionTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictionTypes` to be an array in the JSON string but got `%s`", jsonObj.get("restrictionTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlanDetailsWebhookOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlanDetailsWebhookOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlanDetailsWebhookOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlanDetailsWebhookOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<PlanDetailsWebhookOptions>() {
           @Override
           public void write(JsonWriter out, PlanDetailsWebhookOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlanDetailsWebhookOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlanDetailsWebhookOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlanDetailsWebhookOptions
   * @throws IOException if the JSON string is invalid with respect to PlanDetailsWebhookOptions
   */
  public static PlanDetailsWebhookOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlanDetailsWebhookOptions.class);
  }

  /**
   * Convert an instance of PlanDetailsWebhookOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

