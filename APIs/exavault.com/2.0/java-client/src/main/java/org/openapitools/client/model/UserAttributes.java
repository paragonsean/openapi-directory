/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.UserPermissions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Attributes of the user including expiration, home directory, and permissions. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserAttributes {
  public static final String SERIALIZED_NAME_ACCESS_TIMESTAMP = "accessTimestamp";
  @SerializedName(SERIALIZED_NAME_ACCESS_TIMESTAMP)
  private String accessTimestamp;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private String expiration;

  public static final String SERIALIZED_NAME_FIRST_LOGIN = "firstLogin";
  @SerializedName(SERIALIZED_NAME_FIRST_LOGIN)
  private Boolean firstLogin;

  public static final String SERIALIZED_NAME_HOME_PATH = "homePath";
  @SerializedName(SERIALIZED_NAME_HOME_PATH)
  private String homePath;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_ONBOARDING = "onboarding";
  @SerializedName(SERIALIZED_NAME_ONBOARDING)
  private Boolean onboarding;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private UserPermissions permissions;

  /**
   * User&#39;s access level
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    USER("user"),
    
    ADMIN("admin"),
    
    MASTER("master");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  /**
   * Indicates user activity status. &#x60;0&#x60; means the user is locked and cannot log in. &#x60;1&#x60; means the user is active and can log in.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    StatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(Integer value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public UserAttributes() {
  }

  public UserAttributes accessTimestamp(String accessTimestamp) {
    this.accessTimestamp = accessTimestamp;
    return this;
  }

  /**
   * Timestamp of most recent successful user login.
   * @return accessTimestamp
   */
  @javax.annotation.Nullable
  public String getAccessTimestamp() {
    return accessTimestamp;
  }

  public void setAccessTimestamp(String accessTimestamp) {
    this.accessTimestamp = accessTimestamp;
  }


  public UserAttributes accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * Name of the account this user belongs to.
   * @return accountName
   */
  @javax.annotation.Nonnull
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public UserAttributes created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Timestamp of user creation.
   * @return created
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public UserAttributes email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Email address of the user.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UserAttributes expiration(String expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * Timestamp of user expiration.
   * @return expiration
   */
  @javax.annotation.Nullable
  public String getExpiration() {
    return expiration;
  }

  public void setExpiration(String expiration) {
    this.expiration = expiration;
  }


  public UserAttributes firstLogin(Boolean firstLogin) {
    this.firstLogin = firstLogin;
    return this;
  }

  /**
   * &#x60;true&#x60; if the user has logged into the system.
   * @return firstLogin
   */
  @javax.annotation.Nullable
  public Boolean getFirstLogin() {
    return firstLogin;
  }

  public void setFirstLogin(Boolean firstLogin) {
    this.firstLogin = firstLogin;
  }


  public UserAttributes homePath(String homePath) {
    this.homePath = homePath;
    return this;
  }

  /**
   * Path to the user&#39;s home folder.
   * @return homePath
   */
  @javax.annotation.Nullable
  public String getHomePath() {
    return homePath;
  }

  public void setHomePath(String homePath) {
    this.homePath = homePath;
  }


  public UserAttributes locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

  /**
   * &#x60;true&#x60; if the user is locked and cannot log in.
   * @return locked
   */
  @javax.annotation.Nullable
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public UserAttributes modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

  /**
   * Timestamp of user modification.
   * @return modified
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public UserAttributes nickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  /**
   * Nickname of the user.
   * @return nickname
   */
  @javax.annotation.Nonnull
  public String getNickname() {
    return nickname;
  }

  public void setNickname(String nickname) {
    this.nickname = nickname;
  }


  public UserAttributes onboarding(Boolean onboarding) {
    this.onboarding = onboarding;
    return this;
  }

  /**
   * Whether the onboarding help system is enabled for this user. &#x60;true&#x60; means that additional help popups are displayed in the web application for this user.
   * @return onboarding
   */
  @javax.annotation.Nonnull
  public Boolean getOnboarding() {
    return onboarding;
  }

  public void setOnboarding(Boolean onboarding) {
    this.onboarding = onboarding;
  }


  public UserAttributes permissions(UserPermissions permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nonnull
  public UserPermissions getPermissions() {
    return permissions;
  }

  public void setPermissions(UserPermissions permissions) {
    this.permissions = permissions;
  }


  public UserAttributes role(RoleEnum role) {
    this.role = role;
    return this;
  }

  /**
   * User&#39;s access level
   * @return role
   */
  @javax.annotation.Nonnull
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }


  public UserAttributes status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Indicates user activity status. &#x60;0&#x60; means the user is locked and cannot log in. &#x60;1&#x60; means the user is active and can log in.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public UserAttributes timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * User&#39;s timezone. See &lt;a href&#x3D;&#39;https://php.net/manual/en/timezones.php&#39; target&#x3D;&#39;blank&#39;&gt;this page&lt;/a&gt; for allowed values.
   * @return timeZone
   */
  @javax.annotation.Nonnull
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public UserAttributes username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Username of the user.
   * @return username
   */
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserAttributes userAttributes = (UserAttributes) o;
    return Objects.equals(this.accessTimestamp, userAttributes.accessTimestamp) &&
        Objects.equals(this.accountName, userAttributes.accountName) &&
        Objects.equals(this.created, userAttributes.created) &&
        Objects.equals(this.email, userAttributes.email) &&
        Objects.equals(this.expiration, userAttributes.expiration) &&
        Objects.equals(this.firstLogin, userAttributes.firstLogin) &&
        Objects.equals(this.homePath, userAttributes.homePath) &&
        Objects.equals(this.locked, userAttributes.locked) &&
        Objects.equals(this.modified, userAttributes.modified) &&
        Objects.equals(this.nickname, userAttributes.nickname) &&
        Objects.equals(this.onboarding, userAttributes.onboarding) &&
        Objects.equals(this.permissions, userAttributes.permissions) &&
        Objects.equals(this.role, userAttributes.role) &&
        Objects.equals(this.status, userAttributes.status) &&
        Objects.equals(this.timeZone, userAttributes.timeZone) &&
        Objects.equals(this.username, userAttributes.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessTimestamp, accountName, created, email, expiration, firstLogin, homePath, locked, modified, nickname, onboarding, permissions, role, status, timeZone, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserAttributes {\n");
    sb.append("    accessTimestamp: ").append(toIndentedString(accessTimestamp)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    firstLogin: ").append(toIndentedString(firstLogin)).append("\n");
    sb.append("    homePath: ").append(toIndentedString(homePath)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    onboarding: ").append(toIndentedString(onboarding)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessTimestamp");
    openapiFields.add("accountName");
    openapiFields.add("created");
    openapiFields.add("email");
    openapiFields.add("expiration");
    openapiFields.add("firstLogin");
    openapiFields.add("homePath");
    openapiFields.add("locked");
    openapiFields.add("modified");
    openapiFields.add("nickname");
    openapiFields.add("onboarding");
    openapiFields.add("permissions");
    openapiFields.add("role");
    openapiFields.add("status");
    openapiFields.add("timeZone");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountName");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("modified");
    openapiRequiredFields.add("nickname");
    openapiRequiredFields.add("onboarding");
    openapiRequiredFields.add("permissions");
    openapiRequiredFields.add("role");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("timeZone");
    openapiRequiredFields.add("username");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserAttributes is not found in the empty JSON string", UserAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessTimestamp") != null && !jsonObj.get("accessTimestamp").isJsonNull()) && !jsonObj.get("accessTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessTimestamp").toString()));
      }
      if (!jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("expiration") != null && !jsonObj.get("expiration").isJsonNull()) && !jsonObj.get("expiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiration").toString()));
      }
      if ((jsonObj.get("homePath") != null && !jsonObj.get("homePath").isJsonNull()) && !jsonObj.get("homePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homePath").toString()));
      }
      if (!jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      // validate the required field `permissions`
      UserPermissions.validateJsonElement(jsonObj.get("permissions"));
      if (!jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the required field `role`
      RoleEnum.validateJsonElement(jsonObj.get("role"));
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<UserAttributes>() {
           @Override
           public void write(JsonWriter out, UserAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserAttributes
   * @throws IOException if the JSON string is invalid with respect to UserAttributes
   */
  public static UserAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserAttributes.class);
  }

  /**
   * Convert an instance of UserAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

