/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object defining what a not-logged-in visitor can do with the share contents
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccessMode {
  public static final String SERIALIZED_NAME_DELETE = "delete";
  @SerializedName(SERIALIZED_NAME_DELETE)
  private Boolean delete;

  public static final String SERIALIZED_NAME_DOWNLOAD = "download";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD)
  private Boolean download;

  public static final String SERIALIZED_NAME_MODIFY = "modify";
  @SerializedName(SERIALIZED_NAME_MODIFY)
  private Boolean modify;

  public static final String SERIALIZED_NAME_UPLOAD = "upload";
  @SerializedName(SERIALIZED_NAME_UPLOAD)
  private Boolean upload;

  public AccessMode() {
  }

  public AccessMode delete(Boolean delete) {
    this.delete = delete;
    return this;
  }

  /**
   * Whether share allows visitors to delete contents
   * @return delete
   */
  @javax.annotation.Nullable
  public Boolean getDelete() {
    return delete;
  }

  public void setDelete(Boolean delete) {
    this.delete = delete;
  }


  public AccessMode download(Boolean download) {
    this.download = download;
    return this;
  }

  /**
   * Whether share allows visitors to download
   * @return download
   */
  @javax.annotation.Nullable
  public Boolean getDownload() {
    return download;
  }

  public void setDownload(Boolean download) {
    this.download = download;
  }


  public AccessMode modify(Boolean modify) {
    this.modify = modify;
    return this;
  }

  /**
   * Whether share allows visitors to rename or move contents.
   * @return modify
   */
  @javax.annotation.Nullable
  public Boolean getModify() {
    return modify;
  }

  public void setModify(Boolean modify) {
    this.modify = modify;
  }


  public AccessMode upload(Boolean upload) {
    this.upload = upload;
    return this;
  }

  /**
   * Whether share allows visitors to upload
   * @return upload
   */
  @javax.annotation.Nullable
  public Boolean getUpload() {
    return upload;
  }

  public void setUpload(Boolean upload) {
    this.upload = upload;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessMode accessMode = (AccessMode) o;
    return Objects.equals(this.delete, accessMode.delete) &&
        Objects.equals(this.download, accessMode.download) &&
        Objects.equals(this.modify, accessMode.modify) &&
        Objects.equals(this.upload, accessMode.upload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(delete, download, modify, upload);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessMode {\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    download: ").append(toIndentedString(download)).append("\n");
    sb.append("    modify: ").append(toIndentedString(modify)).append("\n");
    sb.append("    upload: ").append(toIndentedString(upload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("delete");
    openapiFields.add("download");
    openapiFields.add("modify");
    openapiFields.add("upload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccessMode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessMode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessMode is not found in the empty JSON string", AccessMode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessMode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessMode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessMode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessMode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessMode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessMode.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessMode>() {
           @Override
           public void write(JsonWriter out, AccessMode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessMode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccessMode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccessMode
   * @throws IOException if the JSON string is invalid with respect to AccessMode
   */
  public static AccessMode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessMode.class);
  }

  /**
   * Convert an instance of AccessMode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

