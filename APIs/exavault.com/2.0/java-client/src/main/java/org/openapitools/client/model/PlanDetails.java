/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlanDetailsWebhookOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlanDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlanDetails {
  public static final String SERIALIZED_NAME_API_KEYS = "apiKeys";
  @SerializedName(SERIALIZED_NAME_API_KEYS)
  private Integer apiKeys;

  public static final String SERIALIZED_NAME_API_TOKENS = "apiTokens";
  @SerializedName(SERIALIZED_NAME_API_TOKENS)
  private Integer apiTokens;

  public static final String SERIALIZED_NAME_COLOR_SCHEMA = "colorSchema";
  @SerializedName(SERIALIZED_NAME_COLOR_SCHEMA)
  private Boolean colorSchema;

  public static final String SERIALIZED_NAME_CUSTOM_DOMAIN = "customDomain";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DOMAIN)
  private Boolean customDomain;

  public static final String SERIALIZED_NAME_CUSTOM_NAME = "customName";
  @SerializedName(SERIALIZED_NAME_CUSTOM_NAME)
  private Boolean customName;

  public static final String SERIALIZED_NAME_DIRECT_LINKS = "directLinks";
  @SerializedName(SERIALIZED_NAME_DIRECT_LINKS)
  private Boolean directLinks;

  public static final String SERIALIZED_NAME_IP_WHITELIST = "ipWhitelist";
  @SerializedName(SERIALIZED_NAME_IP_WHITELIST)
  private Boolean ipWhitelist;

  public static final String SERIALIZED_NAME_SHARING_OPTIONS = "sharingOptions";
  @SerializedName(SERIALIZED_NAME_SHARING_OPTIONS)
  private List<String> sharingOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SSH_KEYS = "sshKeys";
  @SerializedName(SERIALIZED_NAME_SSH_KEYS)
  private Integer sshKeys;

  public static final String SERIALIZED_NAME_STORAGE_ADD_ON = "storageAddOn";
  @SerializedName(SERIALIZED_NAME_STORAGE_ADD_ON)
  private Integer storageAddOn;

  public static final String SERIALIZED_NAME_UNLIMITED_USERS = "unlimitedUsers";
  @SerializedName(SERIALIZED_NAME_UNLIMITED_USERS)
  private Boolean unlimitedUsers;

  public static final String SERIALIZED_NAME_USER_EXPIRATION = "userExpiration";
  @SerializedName(SERIALIZED_NAME_USER_EXPIRATION)
  private Boolean userExpiration;

  public static final String SERIALIZED_NAME_USER_IMPORT = "userImport";
  @SerializedName(SERIALIZED_NAME_USER_IMPORT)
  private Boolean userImport;

  public static final String SERIALIZED_NAME_WEBHOOK_OPTIONS = "webhookOptions";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_OPTIONS)
  private PlanDetailsWebhookOptions webhookOptions;

  public PlanDetails() {
  }

  public PlanDetails apiKeys(Integer apiKeys) {
    this.apiKeys = apiKeys;
    return this;
  }

  /**
   * Get apiKeys
   * @return apiKeys
   */
  @javax.annotation.Nullable
  public Integer getApiKeys() {
    return apiKeys;
  }

  public void setApiKeys(Integer apiKeys) {
    this.apiKeys = apiKeys;
  }


  public PlanDetails apiTokens(Integer apiTokens) {
    this.apiTokens = apiTokens;
    return this;
  }

  /**
   * Get apiTokens
   * @return apiTokens
   */
  @javax.annotation.Nullable
  public Integer getApiTokens() {
    return apiTokens;
  }

  public void setApiTokens(Integer apiTokens) {
    this.apiTokens = apiTokens;
  }


  public PlanDetails colorSchema(Boolean colorSchema) {
    this.colorSchema = colorSchema;
    return this;
  }

  /**
   * Get colorSchema
   * @return colorSchema
   */
  @javax.annotation.Nullable
  public Boolean getColorSchema() {
    return colorSchema;
  }

  public void setColorSchema(Boolean colorSchema) {
    this.colorSchema = colorSchema;
  }


  public PlanDetails customDomain(Boolean customDomain) {
    this.customDomain = customDomain;
    return this;
  }

  /**
   * Get customDomain
   * @return customDomain
   */
  @javax.annotation.Nullable
  public Boolean getCustomDomain() {
    return customDomain;
  }

  public void setCustomDomain(Boolean customDomain) {
    this.customDomain = customDomain;
  }


  public PlanDetails customName(Boolean customName) {
    this.customName = customName;
    return this;
  }

  /**
   * Get customName
   * @return customName
   */
  @javax.annotation.Nullable
  public Boolean getCustomName() {
    return customName;
  }

  public void setCustomName(Boolean customName) {
    this.customName = customName;
  }


  public PlanDetails directLinks(Boolean directLinks) {
    this.directLinks = directLinks;
    return this;
  }

  /**
   * Get directLinks
   * @return directLinks
   */
  @javax.annotation.Nullable
  public Boolean getDirectLinks() {
    return directLinks;
  }

  public void setDirectLinks(Boolean directLinks) {
    this.directLinks = directLinks;
  }


  public PlanDetails ipWhitelist(Boolean ipWhitelist) {
    this.ipWhitelist = ipWhitelist;
    return this;
  }

  /**
   * Get ipWhitelist
   * @return ipWhitelist
   */
  @javax.annotation.Nullable
  public Boolean getIpWhitelist() {
    return ipWhitelist;
  }

  public void setIpWhitelist(Boolean ipWhitelist) {
    this.ipWhitelist = ipWhitelist;
  }


  public PlanDetails sharingOptions(List<String> sharingOptions) {
    this.sharingOptions = sharingOptions;
    return this;
  }

  public PlanDetails addSharingOptionsItem(String sharingOptionsItem) {
    if (this.sharingOptions == null) {
      this.sharingOptions = new ArrayList<>();
    }
    this.sharingOptions.add(sharingOptionsItem);
    return this;
  }

  /**
   * Get sharingOptions
   * @return sharingOptions
   */
  @javax.annotation.Nullable
  public List<String> getSharingOptions() {
    return sharingOptions;
  }

  public void setSharingOptions(List<String> sharingOptions) {
    this.sharingOptions = sharingOptions;
  }


  public PlanDetails sshKeys(Integer sshKeys) {
    this.sshKeys = sshKeys;
    return this;
  }

  /**
   * Get sshKeys
   * @return sshKeys
   */
  @javax.annotation.Nullable
  public Integer getSshKeys() {
    return sshKeys;
  }

  public void setSshKeys(Integer sshKeys) {
    this.sshKeys = sshKeys;
  }


  public PlanDetails storageAddOn(Integer storageAddOn) {
    this.storageAddOn = storageAddOn;
    return this;
  }

  /**
   * Get storageAddOn
   * @return storageAddOn
   */
  @javax.annotation.Nullable
  public Integer getStorageAddOn() {
    return storageAddOn;
  }

  public void setStorageAddOn(Integer storageAddOn) {
    this.storageAddOn = storageAddOn;
  }


  public PlanDetails unlimitedUsers(Boolean unlimitedUsers) {
    this.unlimitedUsers = unlimitedUsers;
    return this;
  }

  /**
   * Get unlimitedUsers
   * @return unlimitedUsers
   */
  @javax.annotation.Nullable
  public Boolean getUnlimitedUsers() {
    return unlimitedUsers;
  }

  public void setUnlimitedUsers(Boolean unlimitedUsers) {
    this.unlimitedUsers = unlimitedUsers;
  }


  public PlanDetails userExpiration(Boolean userExpiration) {
    this.userExpiration = userExpiration;
    return this;
  }

  /**
   * Get userExpiration
   * @return userExpiration
   */
  @javax.annotation.Nullable
  public Boolean getUserExpiration() {
    return userExpiration;
  }

  public void setUserExpiration(Boolean userExpiration) {
    this.userExpiration = userExpiration;
  }


  public PlanDetails userImport(Boolean userImport) {
    this.userImport = userImport;
    return this;
  }

  /**
   * Get userImport
   * @return userImport
   */
  @javax.annotation.Nullable
  public Boolean getUserImport() {
    return userImport;
  }

  public void setUserImport(Boolean userImport) {
    this.userImport = userImport;
  }


  public PlanDetails webhookOptions(PlanDetailsWebhookOptions webhookOptions) {
    this.webhookOptions = webhookOptions;
    return this;
  }

  /**
   * Get webhookOptions
   * @return webhookOptions
   */
  @javax.annotation.Nullable
  public PlanDetailsWebhookOptions getWebhookOptions() {
    return webhookOptions;
  }

  public void setWebhookOptions(PlanDetailsWebhookOptions webhookOptions) {
    this.webhookOptions = webhookOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlanDetails planDetails = (PlanDetails) o;
    return Objects.equals(this.apiKeys, planDetails.apiKeys) &&
        Objects.equals(this.apiTokens, planDetails.apiTokens) &&
        Objects.equals(this.colorSchema, planDetails.colorSchema) &&
        Objects.equals(this.customDomain, planDetails.customDomain) &&
        Objects.equals(this.customName, planDetails.customName) &&
        Objects.equals(this.directLinks, planDetails.directLinks) &&
        Objects.equals(this.ipWhitelist, planDetails.ipWhitelist) &&
        Objects.equals(this.sharingOptions, planDetails.sharingOptions) &&
        Objects.equals(this.sshKeys, planDetails.sshKeys) &&
        Objects.equals(this.storageAddOn, planDetails.storageAddOn) &&
        Objects.equals(this.unlimitedUsers, planDetails.unlimitedUsers) &&
        Objects.equals(this.userExpiration, planDetails.userExpiration) &&
        Objects.equals(this.userImport, planDetails.userImport) &&
        Objects.equals(this.webhookOptions, planDetails.webhookOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKeys, apiTokens, colorSchema, customDomain, customName, directLinks, ipWhitelist, sharingOptions, sshKeys, storageAddOn, unlimitedUsers, userExpiration, userImport, webhookOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlanDetails {\n");
    sb.append("    apiKeys: ").append(toIndentedString(apiKeys)).append("\n");
    sb.append("    apiTokens: ").append(toIndentedString(apiTokens)).append("\n");
    sb.append("    colorSchema: ").append(toIndentedString(colorSchema)).append("\n");
    sb.append("    customDomain: ").append(toIndentedString(customDomain)).append("\n");
    sb.append("    customName: ").append(toIndentedString(customName)).append("\n");
    sb.append("    directLinks: ").append(toIndentedString(directLinks)).append("\n");
    sb.append("    ipWhitelist: ").append(toIndentedString(ipWhitelist)).append("\n");
    sb.append("    sharingOptions: ").append(toIndentedString(sharingOptions)).append("\n");
    sb.append("    sshKeys: ").append(toIndentedString(sshKeys)).append("\n");
    sb.append("    storageAddOn: ").append(toIndentedString(storageAddOn)).append("\n");
    sb.append("    unlimitedUsers: ").append(toIndentedString(unlimitedUsers)).append("\n");
    sb.append("    userExpiration: ").append(toIndentedString(userExpiration)).append("\n");
    sb.append("    userImport: ").append(toIndentedString(userImport)).append("\n");
    sb.append("    webhookOptions: ").append(toIndentedString(webhookOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiKeys");
    openapiFields.add("apiTokens");
    openapiFields.add("colorSchema");
    openapiFields.add("customDomain");
    openapiFields.add("customName");
    openapiFields.add("directLinks");
    openapiFields.add("ipWhitelist");
    openapiFields.add("sharingOptions");
    openapiFields.add("sshKeys");
    openapiFields.add("storageAddOn");
    openapiFields.add("unlimitedUsers");
    openapiFields.add("userExpiration");
    openapiFields.add("userImport");
    openapiFields.add("webhookOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlanDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlanDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlanDetails is not found in the empty JSON string", PlanDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlanDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlanDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("sharingOptions") != null && !jsonObj.get("sharingOptions").isJsonNull() && !jsonObj.get("sharingOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharingOptions` to be an array in the JSON string but got `%s`", jsonObj.get("sharingOptions").toString()));
      }
      // validate the optional field `webhookOptions`
      if (jsonObj.get("webhookOptions") != null && !jsonObj.get("webhookOptions").isJsonNull()) {
        PlanDetailsWebhookOptions.validateJsonElement(jsonObj.get("webhookOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlanDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlanDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlanDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlanDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PlanDetails>() {
           @Override
           public void write(JsonWriter out, PlanDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlanDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlanDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlanDetails
   * @throws IOException if the JSON string is invalid with respect to PlanDetails
   */
  public static PlanDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlanDetails.class);
  }

  /**
   * Convert an instance of PlanDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

