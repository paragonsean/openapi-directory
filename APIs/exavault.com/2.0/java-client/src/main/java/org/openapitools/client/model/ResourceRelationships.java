/*
 * ExaVault
 * ExaVaults API allows you to incorporate ExaVaults suite of file transfer and user management tools into your own application.\\nExaVault supports both POST (recommended when requesting large data sets) and GET operations, and requires an API key in order to use.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@exavault.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceRelationshipsDirectFile;
import org.openapitools.client.model.ResourceRelationshipsNotificationsInner;
import org.openapitools.client.model.ResourceRelationshipsParentResource;
import org.openapitools.client.model.ResourceRelationshipsShare;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResourceRelationships
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:39.505408-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceRelationships {
  public static final String SERIALIZED_NAME_DIRECT_FILE = "directFile";
  @SerializedName(SERIALIZED_NAME_DIRECT_FILE)
  private ResourceRelationshipsDirectFile directFile;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private List<ResourceRelationshipsNotificationsInner> notifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARENT_RESOURCE = "parentResource";
  @SerializedName(SERIALIZED_NAME_PARENT_RESOURCE)
  private ResourceRelationshipsParentResource parentResource;

  public static final String SERIALIZED_NAME_SHARE = "share";
  @SerializedName(SERIALIZED_NAME_SHARE)
  private ResourceRelationshipsShare share;

  public ResourceRelationships() {
  }

  public ResourceRelationships directFile(ResourceRelationshipsDirectFile directFile) {
    this.directFile = directFile;
    return this;
  }

  /**
   * Get directFile
   * @return directFile
   */
  @javax.annotation.Nullable
  public ResourceRelationshipsDirectFile getDirectFile() {
    return directFile;
  }

  public void setDirectFile(ResourceRelationshipsDirectFile directFile) {
    this.directFile = directFile;
  }


  public ResourceRelationships notifications(List<ResourceRelationshipsNotificationsInner> notifications) {
    this.notifications = notifications;
    return this;
  }

  public ResourceRelationships addNotificationsItem(ResourceRelationshipsNotificationsInner notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

  /**
   * Get notifications
   * @return notifications
   */
  @javax.annotation.Nullable
  public List<ResourceRelationshipsNotificationsInner> getNotifications() {
    return notifications;
  }

  public void setNotifications(List<ResourceRelationshipsNotificationsInner> notifications) {
    this.notifications = notifications;
  }


  public ResourceRelationships parentResource(ResourceRelationshipsParentResource parentResource) {
    this.parentResource = parentResource;
    return this;
  }

  /**
   * Get parentResource
   * @return parentResource
   */
  @javax.annotation.Nullable
  public ResourceRelationshipsParentResource getParentResource() {
    return parentResource;
  }

  public void setParentResource(ResourceRelationshipsParentResource parentResource) {
    this.parentResource = parentResource;
  }


  public ResourceRelationships share(ResourceRelationshipsShare share) {
    this.share = share;
    return this;
  }

  /**
   * Get share
   * @return share
   */
  @javax.annotation.Nullable
  public ResourceRelationshipsShare getShare() {
    return share;
  }

  public void setShare(ResourceRelationshipsShare share) {
    this.share = share;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceRelationships resourceRelationships = (ResourceRelationships) o;
    return Objects.equals(this.directFile, resourceRelationships.directFile) &&
        Objects.equals(this.notifications, resourceRelationships.notifications) &&
        Objects.equals(this.parentResource, resourceRelationships.parentResource) &&
        Objects.equals(this.share, resourceRelationships.share);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directFile, notifications, parentResource, share);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceRelationships {\n");
    sb.append("    directFile: ").append(toIndentedString(directFile)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    parentResource: ").append(toIndentedString(parentResource)).append("\n");
    sb.append("    share: ").append(toIndentedString(share)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("directFile");
    openapiFields.add("notifications");
    openapiFields.add("parentResource");
    openapiFields.add("share");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceRelationships
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceRelationships.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceRelationships is not found in the empty JSON string", ResourceRelationships.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceRelationships.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceRelationships` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `directFile`
      if (jsonObj.get("directFile") != null && !jsonObj.get("directFile").isJsonNull()) {
        ResourceRelationshipsDirectFile.validateJsonElement(jsonObj.get("directFile"));
      }
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull()) {
        JsonArray jsonArraynotifications = jsonObj.getAsJsonArray("notifications");
        if (jsonArraynotifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notifications` to be an array in the JSON string but got `%s`", jsonObj.get("notifications").toString()));
          }

          // validate the optional field `notifications` (array)
          for (int i = 0; i < jsonArraynotifications.size(); i++) {
            ResourceRelationshipsNotificationsInner.validateJsonElement(jsonArraynotifications.get(i));
          };
        }
      }
      // validate the optional field `parentResource`
      if (jsonObj.get("parentResource") != null && !jsonObj.get("parentResource").isJsonNull()) {
        ResourceRelationshipsParentResource.validateJsonElement(jsonObj.get("parentResource"));
      }
      // validate the optional field `share`
      if (jsonObj.get("share") != null && !jsonObj.get("share").isJsonNull()) {
        ResourceRelationshipsShare.validateJsonElement(jsonObj.get("share"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceRelationships.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceRelationships' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceRelationships> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceRelationships.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceRelationships>() {
           @Override
           public void write(JsonWriter out, ResourceRelationships value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceRelationships read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceRelationships given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceRelationships
   * @throws IOException if the JSON string is invalid with respect to ResourceRelationships
   */
  public static ResourceRelationships fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceRelationships.class);
  }

  /**
   * Convert an instance of ResourceRelationships to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

