# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExposedActionSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: str=None, operation_id: str=None, params: object=None):
        """ExposedActionSchema - a model defined in OpenAPI

        :param description: The description of this ExposedActionSchema.
        :param id: The id of this ExposedActionSchema.
        :param operation_id: The operation_id of this ExposedActionSchema.
        :param params: The params of this ExposedActionSchema.
        """
        self.openapi_types = {
            'description': str,
            'id': str,
            'operation_id': str,
            'params': object
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'operation_id': 'operation_id',
            'params': 'params'
        }

        self._description = description
        self._id = id
        self._operation_id = operation_id
        self._params = params

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExposedActionSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExposedActionSchema of this ExposedActionSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ExposedActionSchema.

        Description of the action.

        :return: The description of this ExposedActionSchema.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExposedActionSchema.

        Description of the action.

        :param description: The description of this ExposedActionSchema.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this ExposedActionSchema.

        The unique ID of the exposed action.

        :return: The id of this ExposedActionSchema.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExposedActionSchema.

        The unique ID of the exposed action.

        :param id: The id of this ExposedActionSchema.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def operation_id(self):
        """Gets the operation_id of this ExposedActionSchema.

        The operation ID of the exposed action.

        :return: The operation_id of this ExposedActionSchema.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this ExposedActionSchema.

        The operation ID of the exposed action.

        :param operation_id: The operation_id of this ExposedActionSchema.
        :type operation_id: str
        """
        if operation_id is None:
            raise ValueError("Invalid value for `operation_id`, must not be `None`")

        self._operation_id = operation_id

    @property
    def params(self):
        """Gets the params of this ExposedActionSchema.

        Available hint fields for the action.

        :return: The params of this ExposedActionSchema.
        :rtype: object
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ExposedActionSchema.

        Available hint fields for the action.

        :param params: The params of this ExposedActionSchema.
        :type params: object
        """
        if params is None:
            raise ValueError("Invalid value for `params`, must not be `None`")

        self._params = params
