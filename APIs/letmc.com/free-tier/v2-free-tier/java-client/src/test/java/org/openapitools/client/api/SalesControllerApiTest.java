/*
 * LetMC Api V2, Free (Tier 1)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-free-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PhotoModelResults;
import org.openapitools.client.model.PropertyRoomModelResults;
import org.openapitools.client.model.SalesFeatureModelResults;
import org.openapitools.client.model.SalesFeatureTypeModel;
import org.openapitools.client.model.SalesFeatureTypeModelResults;
import org.openapitools.client.model.SalesInstructionModel;
import org.openapitools.client.model.SalesInstructionModelResults;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SalesControllerApi
 */
@Disabled
public class SalesControllerApiTest {

    private final SalesControllerApi api = new SalesControllerApi();

    /**
     * Search all sales properties available given a range of search criteria
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesControllerGetAdvertisedSalesTest() throws ApiException {
        String shortName = null;
        String branchID = null;
        Integer offset = null;
        Integer count = null;
        Boolean onlyDevelopement = null;
        Boolean onlyInvestements = null;
        Double minimumPrice = null;
        Double maximumPrice = null;
        Integer minimumBeds = null;
        Integer minimumBathrooms = null;
        Integer minimumEnsuites = null;
        Integer minimumToilets = null;
        Integer minimumReception = null;
        SalesInstructionModelResults response = api.salesControllerGetAdvertisedSales(shortName, branchID, offset, count, onlyDevelopement, onlyInvestements, minimumPrice, maximumPrice, minimumBeds, minimumBathrooms, minimumEnsuites, minimumToilets, minimumReception);
        // TODO: test validations
    }

    /**
     * Downloads the energy efficiency report (EER) graph for a sales instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesControllerGetEERTest() throws ApiException {
        String shortName = null;
        String salesInstructionID = null;
        Object response = api.salesControllerGetEER(shortName, salesInstructionID);
        // TODO: test validations
    }

    /**
     * Downloads the energy efficiency report (EIR) graph for a sales instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesControllerGetEIRTest() throws ApiException {
        String shortName = null;
        String salesInstructionID = null;
        Object response = api.salesControllerGetEIR(shortName, salesInstructionID);
        // TODO: test validations
    }

    /**
     * A collection of all features linked to a sales instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesControllerGetSalesInstructionsFeaturesTest() throws ApiException {
        String shortName = null;
        String salesInstructionID = null;
        Integer offset = null;
        Integer count = null;
        SalesFeatureModelResults response = api.salesControllerGetSalesInstructionsFeatures(shortName, salesInstructionID, offset, count);
        // TODO: test validations
    }

    /**
     * A collection of floor plans linked to an instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesControllerGetSalesInstructionsFloorPlansTest() throws ApiException {
        String shortName = null;
        String salesInstructionID = null;
        Integer offset = null;
        Integer count = null;
        PhotoModelResults response = api.salesControllerGetSalesInstructionsFloorPlans(shortName, salesInstructionID, offset, count);
        // TODO: test validations
    }

    /**
     * A collection of photos linked to an instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesControllerGetSalesInstructionsPhotosTest() throws ApiException {
        String shortName = null;
        String salesInstructionID = null;
        Integer offset = null;
        Integer count = null;
        PhotoModelResults response = api.salesControllerGetSalesInstructionsPhotos(shortName, salesInstructionID, offset, count);
        // TODO: test validations
    }

    /**
     * A collection of rooms linked to an instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void salesControllerGetSalesInstructionsRoomsTest() throws ApiException {
        String shortName = null;
        String salesInstructionID = null;
        Integer offset = null;
        Integer count = null;
        PropertyRoomModelResults response = api.salesControllerGetSalesInstructionsRooms(shortName, salesInstructionID, offset, count);
        // TODO: test validations
    }

    /**
     * A collection of all sales feature types linked to a company
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2Tier1ShortNameSalesSalesfeaturetypesGetTest() throws ApiException {
        String shortName = null;
        Integer offset = null;
        Integer count = null;
        SalesFeatureTypeModelResults response = api.v2Tier1ShortNameSalesSalesfeaturetypesGet(shortName, offset, count);
        // TODO: test validations
    }

    /**
     * Get a specific sales feature type given its unique Object ID (OID)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2Tier1ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetTest() throws ApiException {
        String shortName = null;
        String salesFeatureTypeID = null;
        SalesFeatureTypeModel response = api.v2Tier1ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGet(shortName, salesFeatureTypeID);
        // TODO: test validations
    }

    /**
     * A collection of all sales instructions linked to a company
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2Tier1ShortNameSalesSalesinstructionsGetTest() throws ApiException {
        String shortName = null;
        Integer offset = null;
        Integer count = null;
        SalesInstructionModelResults response = api.v2Tier1ShortNameSalesSalesinstructionsGet(shortName, offset, count);
        // TODO: test validations
    }

    /**
     * Get a specific sales instruction given its unique Object ID (OID)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2Tier1ShortNameSalesSalesinstructionsSalesInstructionIDGetTest() throws ApiException {
        String shortName = null;
        String salesInstructionID = null;
        SalesInstructionModel response = api.v2Tier1ShortNameSalesSalesinstructionsSalesInstructionIDGet(shortName, salesInstructionID);
        // TODO: test validations
    }

}
