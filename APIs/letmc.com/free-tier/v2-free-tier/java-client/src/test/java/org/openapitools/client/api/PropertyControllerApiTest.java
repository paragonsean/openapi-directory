/*
 * LetMC Api V2, Free (Tier 1)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-free-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PhotoModelResults;
import org.openapitools.client.model.PropertyFacilityModelResults;
import org.openapitools.client.model.PropertyModel;
import org.openapitools.client.model.PropertyModelResults;
import org.openapitools.client.model.PropertyRoomModelResults;
import org.openapitools.client.model.TenancyModelResults;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PropertyControllerApi
 */
@Disabled
public class PropertyControllerApiTest {

    private final PropertyControllerApi api = new PropertyControllerApi();

    /**
     * A collection of facilities linked to a block, property or room
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void propertyControllerGetPropertiesFacilitiesTest() throws ApiException {
        String shortName = null;
        String propertyID = null;
        Integer offset = null;
        Integer count = null;
        PropertyFacilityModelResults response = api.propertyControllerGetPropertiesFacilities(shortName, propertyID, offset, count);
        // TODO: test validations
    }

    /**
     * A collection showing all the photos linked to a specific block, property or room
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void propertyControllerGetPropertiesPhotosTest() throws ApiException {
        String shortName = null;
        String propertyID = null;
        Integer offset = null;
        Integer count = null;
        PhotoModelResults response = api.propertyControllerGetPropertiesPhotos(shortName, propertyID, offset, count);
        // TODO: test validations
    }

    /**
     * A collection of the rooms that belong to this property or block
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void propertyControllerGetPropertiesRoomsTest() throws ApiException {
        String shortName = null;
        String propertyID = null;
        Integer offset = null;
        Integer count = null;
        PropertyRoomModelResults response = api.propertyControllerGetPropertiesRooms(shortName, propertyID, offset, count);
        // TODO: test validations
    }

    /**
     * A collection of all tenancies associated with this block, property or room
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void propertyControllerGetPropertiesTenanciesTest() throws ApiException {
        String shortName = null;
        String propertyID = null;
        Integer offset = null;
        Integer count = null;
        TenancyModelResults response = api.propertyControllerGetPropertiesTenancies(shortName, propertyID, offset, count);
        // TODO: test validations
    }

    /**
     * Downloads the energy efficiency report (EER) graph for a property
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void propertyControllerGetPropertyEERDownloadTest() throws ApiException {
        String shortName = null;
        String propertyStructureID = null;
        Object response = api.propertyControllerGetPropertyEERDownload(shortName, propertyStructureID);
        // TODO: test validations
    }

    /**
     * Downloads the environmental impact report (EIR) graph for a property
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void propertyControllerGetPropertyEIRDownloadTest() throws ApiException {
        String shortName = null;
        String propertyStructureID = null;
        Object response = api.propertyControllerGetPropertyEIRDownload(shortName, propertyStructureID);
        // TODO: test validations
    }

    /**
     * A collection of all properties within a company
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2Tier1ShortNamePropertyPropertiesGetTest() throws ApiException {
        String shortName = null;
        Integer offset = null;
        Integer count = null;
        PropertyModelResults response = api.v2Tier1ShortNamePropertyPropertiesGet(shortName, offset, count);
        // TODO: test validations
    }

    /**
     * Get a specific property given its unique Object ID (OID)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2Tier1ShortNamePropertyPropertiesPropertyIDGetTest() throws ApiException {
        String shortName = null;
        String propertyID = null;
        PropertyModel response = api.v2Tier1ShortNamePropertyPropertiesPropertyIDGet(shortName, propertyID);
        // TODO: test validations
    }

}
