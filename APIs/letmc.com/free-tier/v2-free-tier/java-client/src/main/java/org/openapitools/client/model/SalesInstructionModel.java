/*
 * LetMC Api V2, Free (Tier 1)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-free-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:12.156803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesInstructionModel {
  public static final String SERIALIZED_NAME_ADDRESS1 = "Address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "Address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_ADDRESS3 = "Address3";
  @SerializedName(SERIALIZED_NAME_ADDRESS3)
  private String address3;

  public static final String SERIALIZED_NAME_ADDRESS4 = "Address4";
  @SerializedName(SERIALIZED_NAME_ADDRESS4)
  private String address4;

  public static final String SERIALIZED_NAME_ADDRESS_NUMBER = "AddressNumber";
  @SerializedName(SERIALIZED_NAME_ADDRESS_NUMBER)
  private String addressNumber;

  public static final String SERIALIZED_NAME_AREA = "Area";
  @SerializedName(SERIALIZED_NAME_AREA)
  private String area;

  public static final String SERIALIZED_NAME_BATHROOMS = "Bathrooms";
  @SerializedName(SERIALIZED_NAME_BATHROOMS)
  private Integer bathrooms;

  public static final String SERIALIZED_NAME_BATHROOMS_ENSUITE = "BathroomsEnsuite";
  @SerializedName(SERIALIZED_NAME_BATHROOMS_ENSUITE)
  private Integer bathroomsEnsuite;

  public static final String SERIALIZED_NAME_BEDROOMS = "Bedrooms";
  @SerializedName(SERIALIZED_NAME_BEDROOMS)
  private Integer bedrooms;

  /**
   * The contract type
   */
  @JsonAdapter(ContractTypeEnum.Adapter.class)
  public enum ContractTypeEnum {
    PENDING("Pending"),
    
    SOLE_AGENCY("SoleAgency"),
    
    SOLE_SELLING_RIGHTS("SoleSellingRights"),
    
    JOINT_SOLE_AGENCY("JointSoleAgency"),
    
    MULTI_AGENCY("MultiAgency"),
    
    SUB_AGENT("SubAgent");

    private String value;

    ContractTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContractTypeEnum fromValue(String value) {
      for (ContractTypeEnum b : ContractTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContractTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContractTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContractTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContractTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContractTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTRACT_TYPE = "ContractType";
  @SerializedName(SERIALIZED_NAME_CONTRACT_TYPE)
  private ContractTypeEnum contractType;

  /**
   * Address country of the property to be sold
   */
  @JsonAdapter(CountryEnum.Adapter.class)
  public enum CountryEnum {
    AFGHANISTAN("Afghanistan"),
    
    ALBANIA("Albania"),
    
    ALGERIA("Algeria"),
    
    ANDORRA("Andorra"),
    
    ANGOLA("Angola"),
    
    ANTIGUA_AND_BARBUDA("AntiguaAndBarbuda"),
    
    ARGENTINA("Argentina"),
    
    ARMENIA("Armenia"),
    
    AUSTRALIA("Australia"),
    
    AUSTRIA("Austria"),
    
    AZERBAIJAN("Azerbaijan"),
    
    BAHAMAS("Bahamas"),
    
    BAHRAIN("Bahrain"),
    
    BANGLADESH("Bangladesh"),
    
    BARBADOS("Barbados"),
    
    BELARUS("Belarus"),
    
    BELGIUM("Belgium"),
    
    BELIZE("Belize"),
    
    BENIN("Benin"),
    
    BHUTAN("Bhutan"),
    
    BOLIVIA("Bolivia"),
    
    BOSNIA_AND_HERZEGOVINA("BosniaAndHerzegovina"),
    
    BOTSWANA("Botswana"),
    
    BRAZIL("Brazil"),
    
    BRUNEI("Brunei"),
    
    BULGARIA("Bulgaria"),
    
    BURKINA_FASO("BurkinaFaso"),
    
    BURUNDI("Burundi"),
    
    CAMBODIA("Cambodia"),
    
    CAMEROON("Cameroon"),
    
    CANADA("Canada"),
    
    CAPE_VERDE("CapeVerde"),
    
    CENTRAL_AFRICAN_REPUBLIC("CentralAfricanRepublic"),
    
    CHAD("Chad"),
    
    CHILE("Chile"),
    
    CHINA("China"),
    
    COLOMBIA("Colombia"),
    
    COMOROS("Comoros"),
    
    CONGO_BRAZZAVILLE("CongoBrazzaville"),
    
    CONGO_DEMOCRATIC_REPUBLIC_OF_THE("CongoDemocraticRepublicOfThe"),
    
    COSTA_RICA("CostaRica"),
    
    COTE_D_IVOIRE("CoteDIvoire"),
    
    CROATIA("Croatia"),
    
    CUBA("Cuba"),
    
    CYPRUS("Cyprus"),
    
    CZECH_REPUBLIC("CzechRepublic"),
    
    DENMARK("Denmark"),
    
    DJIBOUTI("Djibouti"),
    
    DOMINICA("Dominica"),
    
    DOMINICAN_REPUBLIC("DominicanRepublic"),
    
    EAST_TIMOR_TIMOR_TIMUR("EastTimorTimorTimur"),
    
    ECUADOR("Ecuador"),
    
    EGYPT("Egypt"),
    
    EL_SALVADOR("ElSalvador"),
    
    EQUATORIAL_GUINEA("EquatorialGuinea"),
    
    ERITREA("Eritrea"),
    
    ESTONIA("Estonia"),
    
    ETHIOPIA("Ethiopia"),
    
    FIJI("Fiji"),
    
    FINLAND("Finland"),
    
    FRANCE("France"),
    
    GABON("Gabon"),
    
    GAMBIA_THE("GambiaThe"),
    
    GEORGIA("Georgia"),
    
    GERMANY("Germany"),
    
    GHANA("Ghana"),
    
    GREECE("Greece"),
    
    GRENADA("Grenada"),
    
    GUATEMALA("Guatemala"),
    
    GUINEA("Guinea"),
    
    GUINEA_BISSAU("GuineaBissau"),
    
    GUYANA("Guyana"),
    
    HAITI("Haiti"),
    
    HONDURAS("Honduras"),
    
    HUNGARY("Hungary"),
    
    ICELAND("Iceland"),
    
    INDIA("India"),
    
    INDONESIA("Indonesia"),
    
    IRAN("Iran"),
    
    IRAQ("Iraq"),
    
    IRELAND("Ireland"),
    
    ISRAEL("Israel"),
    
    ITALY("Italy"),
    
    JAMAICA("Jamaica"),
    
    JAPAN("Japan"),
    
    JORDAN("Jordan"),
    
    KAZAKHSTAN("Kazakhstan"),
    
    KENYA("Kenya"),
    
    KIRIBATI("Kiribati"),
    
    KOREA_NORTH("KoreaNorth"),
    
    KOREA_SOUTH("KoreaSouth"),
    
    KUWAIT("Kuwait"),
    
    KYRGYZSTAN("Kyrgyzstan"),
    
    LAOS("Laos"),
    
    LATVIA("Latvia"),
    
    LEBANON("Lebanon"),
    
    LESOTHO("Lesotho"),
    
    LIBERIA("Liberia"),
    
    LIBYA("Libya"),
    
    LIECHTENSTEIN("Liechtenstein"),
    
    LITHUANIA("Lithuania"),
    
    LUXEMBOURG("Luxembourg"),
    
    MACEDONIA_FORMER_YUGOSLAV_REPUBLIC_OF("MacedoniaFormerYugoslavRepublicOf"),
    
    MADAGASCAR("Madagascar"),
    
    MALAWI("Malawi"),
    
    MALAYSIA("Malaysia"),
    
    MALDIVES("Maldives"),
    
    MALI("Mali"),
    
    MALTA("Malta"),
    
    MARSHALL_ISLANDS("MarshallIslands"),
    
    MAURITANIA("Mauritania"),
    
    MAURITIUS("Mauritius"),
    
    MEXICO("Mexico"),
    
    MICRONESIA_FEDERATED_STATES_OF("MicronesiaFederatedStatesOf"),
    
    MOLDOVA("Moldova"),
    
    MONACO("Monaco"),
    
    MONGOLIA("Mongolia"),
    
    MOROCCO("Morocco"),
    
    MOZAMBIQUE("Mozambique"),
    
    MYANMAR("Myanmar"),
    
    NAMIBIA("Namibia"),
    
    NAURU("Nauru"),
    
    NEPAL("Nepal"),
    
    NETHERLANDS("Netherlands"),
    
    NEW_ZEALAND("NewZealand"),
    
    NICARAGUA("Nicaragua"),
    
    NIGER("Niger"),
    
    NIGERIA("Nigeria"),
    
    NORWAY("Norway"),
    
    OMAN("Oman"),
    
    PAKISTAN("Pakistan"),
    
    PALAU("Palau"),
    
    PANAMA("Panama"),
    
    PAPUA_NEW_GUINEA("PapuaNewGuinea"),
    
    PARAGUAY("Paraguay"),
    
    PERU("Peru"),
    
    PHILIPPINES("Philippines"),
    
    POLAND("Poland"),
    
    PORTUGAL("Portugal"),
    
    QATAR("Qatar"),
    
    ROMANIA("Romania"),
    
    RUSSIA("Russia"),
    
    RWANDA("Rwanda"),
    
    SAINT_KITTS_AND_NEVIS("SaintKittsAndNevis"),
    
    SAINT_LUCIA("SaintLucia"),
    
    SAINT_VINCENT_AND_THE_GRENADINES("SaintVincentAndTheGrenadines"),
    
    SAMOA("Samoa"),
    
    SAN_MARINO("SanMarino"),
    
    SAO_TOME_AND_PRINCIPE("SaoTomeAndPrincipe"),
    
    SAUDI_ARABIA("SaudiArabia"),
    
    SENEGAL("Senegal"),
    
    SERBIA_AND_MONTENEGRO("SerbiaAndMontenegro"),
    
    SEYCHELLES("Seychelles"),
    
    SIERRA_LEONE("SierraLeone"),
    
    SINGAPORE("Singapore"),
    
    SLOVAKIA("Slovakia"),
    
    SLOVENIA("Slovenia"),
    
    SOLOMON_ISLANDS("SolomonIslands"),
    
    SOMALIA("Somalia"),
    
    SOUTH_AFRICA("SouthAfrica"),
    
    SPAIN("Spain"),
    
    SRI_LANKA("SriLanka"),
    
    SUDAN("Sudan"),
    
    SURINAME("Suriname"),
    
    SWAZILAND("Swaziland"),
    
    SWEDEN("Sweden"),
    
    SWITZERLAND("Switzerland"),
    
    SYRIA("Syria"),
    
    TAIWAN("Taiwan"),
    
    TAJIKISTAN("Tajikistan"),
    
    TANZANIA("Tanzania"),
    
    THAILAND("Thailand"),
    
    TOGO("Togo"),
    
    TONGA("Tonga"),
    
    TRINIDAD_AND_TOBAGO("TrinidadAndTobago"),
    
    TUNISIA("Tunisia"),
    
    TURKEY("Turkey"),
    
    TURKMENISTAN("Turkmenistan"),
    
    TUVALU("Tuvalu"),
    
    UGANDA("Uganda"),
    
    UKRAINE("Ukraine"),
    
    UNITED_ARAB_EMIRATES("UnitedArabEmirates"),
    
    UNITED_KINGDOM("UnitedKingdom"),
    
    UNITED_STATES("UnitedStates"),
    
    URUGUAY("Uruguay"),
    
    UZBEKISTAN("Uzbekistan"),
    
    VANUATU("Vanuatu"),
    
    VATICAN_CITY("VaticanCity"),
    
    VENEZUELA("Venezuela"),
    
    VIETNAM("Vietnam"),
    
    WESTERN_SAHARA("WesternSahara"),
    
    YEMEN("Yemen"),
    
    ZAMBIA("Zambia"),
    
    ZIMBABWE("Zimbabwe"),
    
    UNKNOWN_COUNTRY("UnknownCountry"),
    
    HONG_KONG("HongKong"),
    
    JERSEY("Jersey"),
    
    CHANNEL_ISLANDS("ChannelIslands"),
    
    BERMUDA("Bermuda"),
    
    BRITISH_OVERSEAS_TERRITORY("BritishOverseasTerritory");

    private String value;

    CountryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CountryEnum fromValue(String value) {
      for (CountryEnum b : CountryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CountryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CountryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CountryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CountryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CountryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private CountryEnum country;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVELOPMENT_OPP = "DevelopmentOpp";
  @SerializedName(SERIALIZED_NAME_DEVELOPMENT_OPP)
  private Boolean developmentOpp;

  public static final String SERIALIZED_NAME_DIRECTIONS = "Directions";
  @SerializedName(SERIALIZED_NAME_DIRECTIONS)
  private String directions;

  public static final String SERIALIZED_NAME_EP_C_CURRENT_E_E_R = "EPCCurrentEER";
  @SerializedName(SERIALIZED_NAME_EP_C_CURRENT_E_E_R)
  private Integer epCCurrentEER;

  public static final String SERIALIZED_NAME_EP_C_CURRENT_E_I = "EPCCurrentEI";
  @SerializedName(SERIALIZED_NAME_EP_C_CURRENT_E_I)
  private Integer epCCurrentEI;

  public static final String SERIALIZED_NAME_EP_C_POTENTIAL_E_E_R = "EPCPotentialEER";
  @SerializedName(SERIALIZED_NAME_EP_C_POTENTIAL_E_E_R)
  private Integer epCPotentialEER;

  public static final String SERIALIZED_NAME_EP_C_POTENTIAL_E_I = "EPCPotentialEI";
  @SerializedName(SERIALIZED_NAME_EP_C_POTENTIAL_E_I)
  private Integer epCPotentialEI;

  public static final String SERIALIZED_NAME_ETAG = "ETag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_HAS_ELECTRICITY_SUPPLY = "HasElectricitySupply";
  @SerializedName(SERIALIZED_NAME_HAS_ELECTRICITY_SUPPLY)
  private Boolean hasElectricitySupply;

  public static final String SERIALIZED_NAME_HAS_GAS_SUPPLY = "HasGasSupply";
  @SerializedName(SERIALIZED_NAME_HAS_GAS_SUPPLY)
  private Boolean hasGasSupply;

  public static final String SERIALIZED_NAME_HAS_WATER_METER = "HasWaterMeter";
  @SerializedName(SERIALIZED_NAME_HAS_WATER_METER)
  private Boolean hasWaterMeter;

  public static final String SERIALIZED_NAME_INVESTMENT_OPP = "InvestmentOpp";
  @SerializedName(SERIALIZED_NAME_INVESTMENT_OPP)
  private Boolean investmentOpp;

  public static final String SERIALIZED_NAME_KITCHENS = "Kitchens";
  @SerializedName(SERIALIZED_NAME_KITCHENS)
  private Integer kitchens;

  public static final String SERIALIZED_NAME_O_I_D = "OID";
  @SerializedName(SERIALIZED_NAME_O_I_D)
  private String OID;

  public static final String SERIALIZED_NAME_OUTSIDE_SPACE_BALCONY = "OutsideSpaceBalcony";
  @SerializedName(SERIALIZED_NAME_OUTSIDE_SPACE_BALCONY)
  private Boolean outsideSpaceBalcony;

  public static final String SERIALIZED_NAME_OUTSIDE_SPACE_COMMUNAL_GARDEN = "OutsideSpaceCommunalGarden";
  @SerializedName(SERIALIZED_NAME_OUTSIDE_SPACE_COMMUNAL_GARDEN)
  private Boolean outsideSpaceCommunalGarden;

  public static final String SERIALIZED_NAME_OUTSIDE_SPACE_CONSERVATORY = "OutsideSpaceConservatory";
  @SerializedName(SERIALIZED_NAME_OUTSIDE_SPACE_CONSERVATORY)
  private Boolean outsideSpaceConservatory;

  public static final String SERIALIZED_NAME_OUTSIDE_SPACE_GARDEN = "OutsideSpaceGarden";
  @SerializedName(SERIALIZED_NAME_OUTSIDE_SPACE_GARDEN)
  private Boolean outsideSpaceGarden;

  public static final String SERIALIZED_NAME_OUTSIDE_SPACE_LARGE_GARDEN = "OutsideSpaceLargeGarden";
  @SerializedName(SERIALIZED_NAME_OUTSIDE_SPACE_LARGE_GARDEN)
  private Boolean outsideSpaceLargeGarden;

  public static final String SERIALIZED_NAME_OUTSIDE_SPACE_PATIO = "OutsideSpacePatio";
  @SerializedName(SERIALIZED_NAME_OUTSIDE_SPACE_PATIO)
  private Boolean outsideSpacePatio;

  public static final String SERIALIZED_NAME_OUTSIDE_SPACE_ROOF_TERRACE = "OutsideSpaceRoofTerrace";
  @SerializedName(SERIALIZED_NAME_OUTSIDE_SPACE_ROOF_TERRACE)
  private Boolean outsideSpaceRoofTerrace;

  public static final String SERIALIZED_NAME_OUTSIDE_SPACE_SOUTH_FACING_GARDEN = "OutsideSpaceSouthFacingGarden";
  @SerializedName(SERIALIZED_NAME_OUTSIDE_SPACE_SOUTH_FACING_GARDEN)
  private Boolean outsideSpaceSouthFacingGarden;

  public static final String SERIALIZED_NAME_PARKING_ALLOCATED = "ParkingAllocated";
  @SerializedName(SERIALIZED_NAME_PARKING_ALLOCATED)
  private Boolean parkingAllocated;

  public static final String SERIALIZED_NAME_PARKING_CARPORT = "ParkingCarport";
  @SerializedName(SERIALIZED_NAME_PARKING_CARPORT)
  private Boolean parkingCarport;

  public static final String SERIALIZED_NAME_PARKING_DOUBLE_GARAGE = "ParkingDoubleGarage";
  @SerializedName(SERIALIZED_NAME_PARKING_DOUBLE_GARAGE)
  private Boolean parkingDoubleGarage;

  public static final String SERIALIZED_NAME_PARKING_GARAGE = "ParkingGarage";
  @SerializedName(SERIALIZED_NAME_PARKING_GARAGE)
  private Boolean parkingGarage;

  public static final String SERIALIZED_NAME_PARKING_OFF_ROAD = "ParkingOffRoad";
  @SerializedName(SERIALIZED_NAME_PARKING_OFF_ROAD)
  private Boolean parkingOffRoad;

  public static final String SERIALIZED_NAME_PARKING_ON_ROAD = "ParkingOnRoad";
  @SerializedName(SERIALIZED_NAME_PARKING_ON_ROAD)
  private Boolean parkingOnRoad;

  public static final String SERIALIZED_NAME_PARKING_PERMIT = "ParkingPermit";
  @SerializedName(SERIALIZED_NAME_PARKING_PERMIT)
  private Boolean parkingPermit;

  public static final String SERIALIZED_NAME_PARKING_SECURE_GATED = "ParkingSecureGated";
  @SerializedName(SERIALIZED_NAME_PARKING_SECURE_GATED)
  private Boolean parkingSecureGated;

  public static final String SERIALIZED_NAME_PARKING_TRIPLE_GARAGE = "ParkingTripleGarage";
  @SerializedName(SERIALIZED_NAME_PARKING_TRIPLE_GARAGE)
  private Boolean parkingTripleGarage;

  public static final String SERIALIZED_NAME_POSTCODE = "Postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  private String postcode;

  public static final String SERIALIZED_NAME_PRICE = "Price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  /**
   * The property type
   */
  @JsonAdapter(PropertyOwnableTypeEnum.Adapter.class)
  public enum PropertyOwnableTypeEnum {
    HOUSE("House"),
    
    FLAT_APARTMENT("FlatApartment"),
    
    BUNGALOW("Bungalow"),
    
    LAND("Land"),
    
    HOUSE_FLAT_SHARE("HouseFlatShare"),
    
    GARAGE_PARKING("GarageParking"),
    
    COMMERCIAL_PROPERTY("CommercialProperty"),
    
    BLOCK("Block"),
    
    TERRACED_HOUSE("TerracedHouse"),
    
    END_TERRACE_HOUSE("EndTerraceHouse"),
    
    SEMI_DETACHED_HOUSE("SemiDetachedHouse"),
    
    DETACHED_HOUSE("DetachedHouse"),
    
    SEMI_DETACHED_BUNGALOW("SemiDetachedBungalow"),
    
    TOWN_HOUSE("TownHouse"),
    
    COTTAGE("Cottage"),
    
    SERVICED_APARTMENT("ServicedApartment"),
    
    STUDIO("Studio"),
    
    APARTMENT("Apartment"),
    
    BARN("Barn"),
    
    FARM_HOUSE("FarmHouse"),
    
    PENTHOUSE("Penthouse"),
    
    BUILDING_PLOT("BuildingPlot"),
    
    DETACHED_BUNGALOW("DetachedBungalow"),
    
    LINK_DETACHED("LinkDetached"),
    
    MID_TERRACED_BUNGALOW("MidTerracedBungalow"),
    
    LAND_RESIDENTIAL("LandResidential");

    private String value;

    PropertyOwnableTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PropertyOwnableTypeEnum fromValue(String value) {
      for (PropertyOwnableTypeEnum b : PropertyOwnableTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PropertyOwnableTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PropertyOwnableTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PropertyOwnableTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PropertyOwnableTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PropertyOwnableTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROPERTY_OWNABLE_TYPE = "PropertyOwnableType";
  @SerializedName(SERIALIZED_NAME_PROPERTY_OWNABLE_TYPE)
  private PropertyOwnableTypeEnum propertyOwnableType;

  public static final String SERIALIZED_NAME_RECEPTION_ROOMS = "ReceptionRooms";
  @SerializedName(SERIALIZED_NAME_RECEPTION_ROOMS)
  private Integer receptionRooms;

  /**
   * The current instruction state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    MARKET_APPRAISAL("MarketAppraisal"),
    
    LOST_APPRAISAL("LostAppraisal"),
    
    INSTRUCTED("Instructed"),
    
    ADVERTISED("Advertised"),
    
    UNDER_OFFER("UnderOffer"),
    
    CONTRACTS_EXCHANGED("ContractsExchanged"),
    
    COMPLETED("Completed"),
    
    FALLEN_THROUGH("FallenThrough"),
    
    WITHDRAWN("Withdrawn");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * Instruction tenure
   */
  @JsonAdapter(TenureEnum.Adapter.class)
  public enum TenureEnum {
    FREEHOLD("Freehold"),
    
    LEASEHOLD("Leasehold"),
    
    COMMONHOLD("Commonhold"),
    
    SHARE_OF_FREEHOLD("ShareOfFreehold"),
    
    FLYING_FREEHOLD("FlyingFreehold"),
    
    SHARE_TRANSFER("ShareTransfer"),
    
    UNKNOWN("Unknown");

    private String value;

    TenureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TenureEnum fromValue(String value) {
      for (TenureEnum b : TenureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TenureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TenureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TenureEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TenureEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TenureEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TENURE = "Tenure";
  @SerializedName(SERIALIZED_NAME_TENURE)
  private TenureEnum tenure;

  public static final String SERIALIZED_NAME_VIDEO_U_R_L = "VideoURL";
  @SerializedName(SERIALIZED_NAME_VIDEO_U_R_L)
  private String videoURL;

  public SalesInstructionModel() {
  }

  public SalesInstructionModel address1(String address1) {
    this.address1 = address1;
    return this;
  }

  /**
   * Address 1 of the property to be sold
   * @return address1
   */
  @javax.annotation.Nullable
  public String getAddress1() {
    return address1;
  }

  public void setAddress1(String address1) {
    this.address1 = address1;
  }


  public SalesInstructionModel address2(String address2) {
    this.address2 = address2;
    return this;
  }

  /**
   * Address 2 of the property to be sold
   * @return address2
   */
  @javax.annotation.Nullable
  public String getAddress2() {
    return address2;
  }

  public void setAddress2(String address2) {
    this.address2 = address2;
  }


  public SalesInstructionModel address3(String address3) {
    this.address3 = address3;
    return this;
  }

  /**
   * Address 3 of the property to be sold
   * @return address3
   */
  @javax.annotation.Nullable
  public String getAddress3() {
    return address3;
  }

  public void setAddress3(String address3) {
    this.address3 = address3;
  }


  public SalesInstructionModel address4(String address4) {
    this.address4 = address4;
    return this;
  }

  /**
   * Address 4 of the property to be sold
   * @return address4
   */
  @javax.annotation.Nullable
  public String getAddress4() {
    return address4;
  }

  public void setAddress4(String address4) {
    this.address4 = address4;
  }


  public SalesInstructionModel addressNumber(String addressNumber) {
    this.addressNumber = addressNumber;
    return this;
  }

  /**
   * Address number of the property to be sold
   * @return addressNumber
   */
  @javax.annotation.Nullable
  public String getAddressNumber() {
    return addressNumber;
  }

  public void setAddressNumber(String addressNumber) {
    this.addressNumber = addressNumber;
  }


  public SalesInstructionModel area(String area) {
    this.area = area;
    return this;
  }

  /**
   * The area linked to the instruction
   * @return area
   */
  @javax.annotation.Nullable
  public String getArea() {
    return area;
  }

  public void setArea(String area) {
    this.area = area;
  }


  public SalesInstructionModel bathrooms(Integer bathrooms) {
    this.bathrooms = bathrooms;
    return this;
  }

  /**
   * Number of bathrooms linked to the instruction
   * @return bathrooms
   */
  @javax.annotation.Nullable
  public Integer getBathrooms() {
    return bathrooms;
  }

  public void setBathrooms(Integer bathrooms) {
    this.bathrooms = bathrooms;
  }


  public SalesInstructionModel bathroomsEnsuite(Integer bathroomsEnsuite) {
    this.bathroomsEnsuite = bathroomsEnsuite;
    return this;
  }

  /**
   * How many of the bathrooms are ensuite?
   * @return bathroomsEnsuite
   */
  @javax.annotation.Nullable
  public Integer getBathroomsEnsuite() {
    return bathroomsEnsuite;
  }

  public void setBathroomsEnsuite(Integer bathroomsEnsuite) {
    this.bathroomsEnsuite = bathroomsEnsuite;
  }


  public SalesInstructionModel bedrooms(Integer bedrooms) {
    this.bedrooms = bedrooms;
    return this;
  }

  /**
   * Number of bedrooms linked to the instruction
   * @return bedrooms
   */
  @javax.annotation.Nullable
  public Integer getBedrooms() {
    return bedrooms;
  }

  public void setBedrooms(Integer bedrooms) {
    this.bedrooms = bedrooms;
  }


  public SalesInstructionModel contractType(ContractTypeEnum contractType) {
    this.contractType = contractType;
    return this;
  }

  /**
   * The contract type
   * @return contractType
   */
  @javax.annotation.Nullable
  public ContractTypeEnum getContractType() {
    return contractType;
  }

  public void setContractType(ContractTypeEnum contractType) {
    this.contractType = contractType;
  }


  public SalesInstructionModel country(CountryEnum country) {
    this.country = country;
    return this;
  }

  /**
   * Address country of the property to be sold
   * @return country
   */
  @javax.annotation.Nullable
  public CountryEnum getCountry() {
    return country;
  }

  public void setCountry(CountryEnum country) {
    this.country = country;
  }


  public SalesInstructionModel description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The instruction description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SalesInstructionModel developmentOpp(Boolean developmentOpp) {
    this.developmentOpp = developmentOpp;
    return this;
  }

  /**
   * Is the instruction a development opportunity?
   * @return developmentOpp
   */
  @javax.annotation.Nullable
  public Boolean getDevelopmentOpp() {
    return developmentOpp;
  }

  public void setDevelopmentOpp(Boolean developmentOpp) {
    this.developmentOpp = developmentOpp;
  }


  public SalesInstructionModel directions(String directions) {
    this.directions = directions;
    return this;
  }

  /**
   * Directions linked to the instruction
   * @return directions
   */
  @javax.annotation.Nullable
  public String getDirections() {
    return directions;
  }

  public void setDirections(String directions) {
    this.directions = directions;
  }


  public SalesInstructionModel epCCurrentEER(Integer epCCurrentEER) {
    this.epCCurrentEER = epCCurrentEER;
    return this;
  }

  /**
   * Current EER value
   * @return epCCurrentEER
   */
  @javax.annotation.Nullable
  public Integer getEpCCurrentEER() {
    return epCCurrentEER;
  }

  public void setEpCCurrentEER(Integer epCCurrentEER) {
    this.epCCurrentEER = epCCurrentEER;
  }


  public SalesInstructionModel epCCurrentEI(Integer epCCurrentEI) {
    this.epCCurrentEI = epCCurrentEI;
    return this;
  }

  /**
   * Current EI value
   * @return epCCurrentEI
   */
  @javax.annotation.Nullable
  public Integer getEpCCurrentEI() {
    return epCCurrentEI;
  }

  public void setEpCCurrentEI(Integer epCCurrentEI) {
    this.epCCurrentEI = epCCurrentEI;
  }


  public SalesInstructionModel epCPotentialEER(Integer epCPotentialEER) {
    this.epCPotentialEER = epCPotentialEER;
    return this;
  }

  /**
   * Potential EER value
   * @return epCPotentialEER
   */
  @javax.annotation.Nullable
  public Integer getEpCPotentialEER() {
    return epCPotentialEER;
  }

  public void setEpCPotentialEER(Integer epCPotentialEER) {
    this.epCPotentialEER = epCPotentialEER;
  }


  public SalesInstructionModel epCPotentialEI(Integer epCPotentialEI) {
    this.epCPotentialEI = epCPotentialEI;
    return this;
  }

  /**
   * Potential EI value
   * @return epCPotentialEI
   */
  @javax.annotation.Nullable
  public Integer getEpCPotentialEI() {
    return epCPotentialEI;
  }

  public void setEpCPotentialEI(Integer epCPotentialEI) {
    this.epCPotentialEI = epCPotentialEI;
  }


  public SalesInstructionModel etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * A unique identifier defining the object and change revision.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public SalesInstructionModel hasElectricitySupply(Boolean hasElectricitySupply) {
    this.hasElectricitySupply = hasElectricitySupply;
    return this;
  }

  /**
   * Does the instruction have an electrical supply linked to it?
   * @return hasElectricitySupply
   */
  @javax.annotation.Nullable
  public Boolean getHasElectricitySupply() {
    return hasElectricitySupply;
  }

  public void setHasElectricitySupply(Boolean hasElectricitySupply) {
    this.hasElectricitySupply = hasElectricitySupply;
  }


  public SalesInstructionModel hasGasSupply(Boolean hasGasSupply) {
    this.hasGasSupply = hasGasSupply;
    return this;
  }

  /**
   * Does the instruction have an gas supply linked to it?
   * @return hasGasSupply
   */
  @javax.annotation.Nullable
  public Boolean getHasGasSupply() {
    return hasGasSupply;
  }

  public void setHasGasSupply(Boolean hasGasSupply) {
    this.hasGasSupply = hasGasSupply;
  }


  public SalesInstructionModel hasWaterMeter(Boolean hasWaterMeter) {
    this.hasWaterMeter = hasWaterMeter;
    return this;
  }

  /**
   * Does the instruction have a water meter linked to it?
   * @return hasWaterMeter
   */
  @javax.annotation.Nullable
  public Boolean getHasWaterMeter() {
    return hasWaterMeter;
  }

  public void setHasWaterMeter(Boolean hasWaterMeter) {
    this.hasWaterMeter = hasWaterMeter;
  }


  public SalesInstructionModel investmentOpp(Boolean investmentOpp) {
    this.investmentOpp = investmentOpp;
    return this;
  }

  /**
   * Is the instruction a investment opportunity?
   * @return investmentOpp
   */
  @javax.annotation.Nullable
  public Boolean getInvestmentOpp() {
    return investmentOpp;
  }

  public void setInvestmentOpp(Boolean investmentOpp) {
    this.investmentOpp = investmentOpp;
  }


  public SalesInstructionModel kitchens(Integer kitchens) {
    this.kitchens = kitchens;
    return this;
  }

  /**
   * Number of kitchens linked to the property instruction
   * @return kitchens
   */
  @javax.annotation.Nullable
  public Integer getKitchens() {
    return kitchens;
  }

  public void setKitchens(Integer kitchens) {
    this.kitchens = kitchens;
  }


  public SalesInstructionModel OID(String OID) {
    this.OID = OID;
    return this;
  }

  /**
   * The unique Object ID (OID).
   * @return OID
   */
  @javax.annotation.Nullable
  public String getOID() {
    return OID;
  }

  public void setOID(String OID) {
    this.OID = OID;
  }


  public SalesInstructionModel outsideSpaceBalcony(Boolean outsideSpaceBalcony) {
    this.outsideSpaceBalcony = outsideSpaceBalcony;
    return this;
  }

  /**
   * Does the instruction have an outside balcony linked to it?
   * @return outsideSpaceBalcony
   */
  @javax.annotation.Nullable
  public Boolean getOutsideSpaceBalcony() {
    return outsideSpaceBalcony;
  }

  public void setOutsideSpaceBalcony(Boolean outsideSpaceBalcony) {
    this.outsideSpaceBalcony = outsideSpaceBalcony;
  }


  public SalesInstructionModel outsideSpaceCommunalGarden(Boolean outsideSpaceCommunalGarden) {
    this.outsideSpaceCommunalGarden = outsideSpaceCommunalGarden;
    return this;
  }

  /**
   * Does the instruction have a communal garden linked to it?
   * @return outsideSpaceCommunalGarden
   */
  @javax.annotation.Nullable
  public Boolean getOutsideSpaceCommunalGarden() {
    return outsideSpaceCommunalGarden;
  }

  public void setOutsideSpaceCommunalGarden(Boolean outsideSpaceCommunalGarden) {
    this.outsideSpaceCommunalGarden = outsideSpaceCommunalGarden;
  }


  public SalesInstructionModel outsideSpaceConservatory(Boolean outsideSpaceConservatory) {
    this.outsideSpaceConservatory = outsideSpaceConservatory;
    return this;
  }

  /**
   * Does the instruction have a conservatory linked to it?
   * @return outsideSpaceConservatory
   */
  @javax.annotation.Nullable
  public Boolean getOutsideSpaceConservatory() {
    return outsideSpaceConservatory;
  }

  public void setOutsideSpaceConservatory(Boolean outsideSpaceConservatory) {
    this.outsideSpaceConservatory = outsideSpaceConservatory;
  }


  public SalesInstructionModel outsideSpaceGarden(Boolean outsideSpaceGarden) {
    this.outsideSpaceGarden = outsideSpaceGarden;
    return this;
  }

  /**
   * Does the instruction have a garden linked to it?
   * @return outsideSpaceGarden
   */
  @javax.annotation.Nullable
  public Boolean getOutsideSpaceGarden() {
    return outsideSpaceGarden;
  }

  public void setOutsideSpaceGarden(Boolean outsideSpaceGarden) {
    this.outsideSpaceGarden = outsideSpaceGarden;
  }


  public SalesInstructionModel outsideSpaceLargeGarden(Boolean outsideSpaceLargeGarden) {
    this.outsideSpaceLargeGarden = outsideSpaceLargeGarden;
    return this;
  }

  /**
   * Does the instruction have a large garden linked to it?
   * @return outsideSpaceLargeGarden
   */
  @javax.annotation.Nullable
  public Boolean getOutsideSpaceLargeGarden() {
    return outsideSpaceLargeGarden;
  }

  public void setOutsideSpaceLargeGarden(Boolean outsideSpaceLargeGarden) {
    this.outsideSpaceLargeGarden = outsideSpaceLargeGarden;
  }


  public SalesInstructionModel outsideSpacePatio(Boolean outsideSpacePatio) {
    this.outsideSpacePatio = outsideSpacePatio;
    return this;
  }

  /**
   * Does the instruction have a patio linked to it?
   * @return outsideSpacePatio
   */
  @javax.annotation.Nullable
  public Boolean getOutsideSpacePatio() {
    return outsideSpacePatio;
  }

  public void setOutsideSpacePatio(Boolean outsideSpacePatio) {
    this.outsideSpacePatio = outsideSpacePatio;
  }


  public SalesInstructionModel outsideSpaceRoofTerrace(Boolean outsideSpaceRoofTerrace) {
    this.outsideSpaceRoofTerrace = outsideSpaceRoofTerrace;
    return this;
  }

  /**
   * Does the instruction have a roof terrace linked to it?
   * @return outsideSpaceRoofTerrace
   */
  @javax.annotation.Nullable
  public Boolean getOutsideSpaceRoofTerrace() {
    return outsideSpaceRoofTerrace;
  }

  public void setOutsideSpaceRoofTerrace(Boolean outsideSpaceRoofTerrace) {
    this.outsideSpaceRoofTerrace = outsideSpaceRoofTerrace;
  }


  public SalesInstructionModel outsideSpaceSouthFacingGarden(Boolean outsideSpaceSouthFacingGarden) {
    this.outsideSpaceSouthFacingGarden = outsideSpaceSouthFacingGarden;
    return this;
  }

  /**
   * Does the instruction have a south facing garden?
   * @return outsideSpaceSouthFacingGarden
   */
  @javax.annotation.Nullable
  public Boolean getOutsideSpaceSouthFacingGarden() {
    return outsideSpaceSouthFacingGarden;
  }

  public void setOutsideSpaceSouthFacingGarden(Boolean outsideSpaceSouthFacingGarden) {
    this.outsideSpaceSouthFacingGarden = outsideSpaceSouthFacingGarden;
  }


  public SalesInstructionModel parkingAllocated(Boolean parkingAllocated) {
    this.parkingAllocated = parkingAllocated;
    return this;
  }

  /**
   * Is there any parking allocation linked to the instruction?
   * @return parkingAllocated
   */
  @javax.annotation.Nullable
  public Boolean getParkingAllocated() {
    return parkingAllocated;
  }

  public void setParkingAllocated(Boolean parkingAllocated) {
    this.parkingAllocated = parkingAllocated;
  }


  public SalesInstructionModel parkingCarport(Boolean parkingCarport) {
    this.parkingCarport = parkingCarport;
    return this;
  }

  /**
   * Does the instruction have a carport linked to it?
   * @return parkingCarport
   */
  @javax.annotation.Nullable
  public Boolean getParkingCarport() {
    return parkingCarport;
  }

  public void setParkingCarport(Boolean parkingCarport) {
    this.parkingCarport = parkingCarport;
  }


  public SalesInstructionModel parkingDoubleGarage(Boolean parkingDoubleGarage) {
    this.parkingDoubleGarage = parkingDoubleGarage;
    return this;
  }

  /**
   * Does the instruction have a double garage linked to it?
   * @return parkingDoubleGarage
   */
  @javax.annotation.Nullable
  public Boolean getParkingDoubleGarage() {
    return parkingDoubleGarage;
  }

  public void setParkingDoubleGarage(Boolean parkingDoubleGarage) {
    this.parkingDoubleGarage = parkingDoubleGarage;
  }


  public SalesInstructionModel parkingGarage(Boolean parkingGarage) {
    this.parkingGarage = parkingGarage;
    return this;
  }

  /**
   * Does the instruction have a garage linked to it?
   * @return parkingGarage
   */
  @javax.annotation.Nullable
  public Boolean getParkingGarage() {
    return parkingGarage;
  }

  public void setParkingGarage(Boolean parkingGarage) {
    this.parkingGarage = parkingGarage;
  }


  public SalesInstructionModel parkingOffRoad(Boolean parkingOffRoad) {
    this.parkingOffRoad = parkingOffRoad;
    return this;
  }

  /**
   * Is there off road parking linked to the instruction?
   * @return parkingOffRoad
   */
  @javax.annotation.Nullable
  public Boolean getParkingOffRoad() {
    return parkingOffRoad;
  }

  public void setParkingOffRoad(Boolean parkingOffRoad) {
    this.parkingOffRoad = parkingOffRoad;
  }


  public SalesInstructionModel parkingOnRoad(Boolean parkingOnRoad) {
    this.parkingOnRoad = parkingOnRoad;
    return this;
  }

  /**
   * Is there on road parking linked to the instruction?
   * @return parkingOnRoad
   */
  @javax.annotation.Nullable
  public Boolean getParkingOnRoad() {
    return parkingOnRoad;
  }

  public void setParkingOnRoad(Boolean parkingOnRoad) {
    this.parkingOnRoad = parkingOnRoad;
  }


  public SalesInstructionModel parkingPermit(Boolean parkingPermit) {
    this.parkingPermit = parkingPermit;
    return this;
  }

  /**
   * Is a parking permit required?
   * @return parkingPermit
   */
  @javax.annotation.Nullable
  public Boolean getParkingPermit() {
    return parkingPermit;
  }

  public void setParkingPermit(Boolean parkingPermit) {
    this.parkingPermit = parkingPermit;
  }


  public SalesInstructionModel parkingSecureGated(Boolean parkingSecureGated) {
    this.parkingSecureGated = parkingSecureGated;
    return this;
  }

  /**
   * Is there any secured gate parking linked to the instruction?
   * @return parkingSecureGated
   */
  @javax.annotation.Nullable
  public Boolean getParkingSecureGated() {
    return parkingSecureGated;
  }

  public void setParkingSecureGated(Boolean parkingSecureGated) {
    this.parkingSecureGated = parkingSecureGated;
  }


  public SalesInstructionModel parkingTripleGarage(Boolean parkingTripleGarage) {
    this.parkingTripleGarage = parkingTripleGarage;
    return this;
  }

  /**
   * Does the instruction have a triple garage linked to it?
   * @return parkingTripleGarage
   */
  @javax.annotation.Nullable
  public Boolean getParkingTripleGarage() {
    return parkingTripleGarage;
  }

  public void setParkingTripleGarage(Boolean parkingTripleGarage) {
    this.parkingTripleGarage = parkingTripleGarage;
  }


  public SalesInstructionModel postcode(String postcode) {
    this.postcode = postcode;
    return this;
  }

  /**
   * Postcode of the property to be sold
   * @return postcode
   */
  @javax.annotation.Nullable
  public String getPostcode() {
    return postcode;
  }

  public void setPostcode(String postcode) {
    this.postcode = postcode;
  }


  public SalesInstructionModel price(Double price) {
    this.price = price;
    return this;
  }

  /**
   * The price of the property to be sold
   * @return price
   */
  @javax.annotation.Nullable
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }


  public SalesInstructionModel propertyOwnableType(PropertyOwnableTypeEnum propertyOwnableType) {
    this.propertyOwnableType = propertyOwnableType;
    return this;
  }

  /**
   * The property type
   * @return propertyOwnableType
   */
  @javax.annotation.Nullable
  public PropertyOwnableTypeEnum getPropertyOwnableType() {
    return propertyOwnableType;
  }

  public void setPropertyOwnableType(PropertyOwnableTypeEnum propertyOwnableType) {
    this.propertyOwnableType = propertyOwnableType;
  }


  public SalesInstructionModel receptionRooms(Integer receptionRooms) {
    this.receptionRooms = receptionRooms;
    return this;
  }

  /**
   * Number of reception rooms linked to the instruction
   * @return receptionRooms
   */
  @javax.annotation.Nullable
  public Integer getReceptionRooms() {
    return receptionRooms;
  }

  public void setReceptionRooms(Integer receptionRooms) {
    this.receptionRooms = receptionRooms;
  }


  public SalesInstructionModel state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The current instruction state
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public SalesInstructionModel tenure(TenureEnum tenure) {
    this.tenure = tenure;
    return this;
  }

  /**
   * Instruction tenure
   * @return tenure
   */
  @javax.annotation.Nullable
  public TenureEnum getTenure() {
    return tenure;
  }

  public void setTenure(TenureEnum tenure) {
    this.tenure = tenure;
  }


  public SalesInstructionModel videoURL(String videoURL) {
    this.videoURL = videoURL;
    return this;
  }

  /**
   * The URL of the video linked to the Sales Instruction
   * @return videoURL
   */
  @javax.annotation.Nullable
  public String getVideoURL() {
    return videoURL;
  }

  public void setVideoURL(String videoURL) {
    this.videoURL = videoURL;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesInstructionModel salesInstructionModel = (SalesInstructionModel) o;
    return Objects.equals(this.address1, salesInstructionModel.address1) &&
        Objects.equals(this.address2, salesInstructionModel.address2) &&
        Objects.equals(this.address3, salesInstructionModel.address3) &&
        Objects.equals(this.address4, salesInstructionModel.address4) &&
        Objects.equals(this.addressNumber, salesInstructionModel.addressNumber) &&
        Objects.equals(this.area, salesInstructionModel.area) &&
        Objects.equals(this.bathrooms, salesInstructionModel.bathrooms) &&
        Objects.equals(this.bathroomsEnsuite, salesInstructionModel.bathroomsEnsuite) &&
        Objects.equals(this.bedrooms, salesInstructionModel.bedrooms) &&
        Objects.equals(this.contractType, salesInstructionModel.contractType) &&
        Objects.equals(this.country, salesInstructionModel.country) &&
        Objects.equals(this.description, salesInstructionModel.description) &&
        Objects.equals(this.developmentOpp, salesInstructionModel.developmentOpp) &&
        Objects.equals(this.directions, salesInstructionModel.directions) &&
        Objects.equals(this.epCCurrentEER, salesInstructionModel.epCCurrentEER) &&
        Objects.equals(this.epCCurrentEI, salesInstructionModel.epCCurrentEI) &&
        Objects.equals(this.epCPotentialEER, salesInstructionModel.epCPotentialEER) &&
        Objects.equals(this.epCPotentialEI, salesInstructionModel.epCPotentialEI) &&
        Objects.equals(this.etag, salesInstructionModel.etag) &&
        Objects.equals(this.hasElectricitySupply, salesInstructionModel.hasElectricitySupply) &&
        Objects.equals(this.hasGasSupply, salesInstructionModel.hasGasSupply) &&
        Objects.equals(this.hasWaterMeter, salesInstructionModel.hasWaterMeter) &&
        Objects.equals(this.investmentOpp, salesInstructionModel.investmentOpp) &&
        Objects.equals(this.kitchens, salesInstructionModel.kitchens) &&
        Objects.equals(this.OID, salesInstructionModel.OID) &&
        Objects.equals(this.outsideSpaceBalcony, salesInstructionModel.outsideSpaceBalcony) &&
        Objects.equals(this.outsideSpaceCommunalGarden, salesInstructionModel.outsideSpaceCommunalGarden) &&
        Objects.equals(this.outsideSpaceConservatory, salesInstructionModel.outsideSpaceConservatory) &&
        Objects.equals(this.outsideSpaceGarden, salesInstructionModel.outsideSpaceGarden) &&
        Objects.equals(this.outsideSpaceLargeGarden, salesInstructionModel.outsideSpaceLargeGarden) &&
        Objects.equals(this.outsideSpacePatio, salesInstructionModel.outsideSpacePatio) &&
        Objects.equals(this.outsideSpaceRoofTerrace, salesInstructionModel.outsideSpaceRoofTerrace) &&
        Objects.equals(this.outsideSpaceSouthFacingGarden, salesInstructionModel.outsideSpaceSouthFacingGarden) &&
        Objects.equals(this.parkingAllocated, salesInstructionModel.parkingAllocated) &&
        Objects.equals(this.parkingCarport, salesInstructionModel.parkingCarport) &&
        Objects.equals(this.parkingDoubleGarage, salesInstructionModel.parkingDoubleGarage) &&
        Objects.equals(this.parkingGarage, salesInstructionModel.parkingGarage) &&
        Objects.equals(this.parkingOffRoad, salesInstructionModel.parkingOffRoad) &&
        Objects.equals(this.parkingOnRoad, salesInstructionModel.parkingOnRoad) &&
        Objects.equals(this.parkingPermit, salesInstructionModel.parkingPermit) &&
        Objects.equals(this.parkingSecureGated, salesInstructionModel.parkingSecureGated) &&
        Objects.equals(this.parkingTripleGarage, salesInstructionModel.parkingTripleGarage) &&
        Objects.equals(this.postcode, salesInstructionModel.postcode) &&
        Objects.equals(this.price, salesInstructionModel.price) &&
        Objects.equals(this.propertyOwnableType, salesInstructionModel.propertyOwnableType) &&
        Objects.equals(this.receptionRooms, salesInstructionModel.receptionRooms) &&
        Objects.equals(this.state, salesInstructionModel.state) &&
        Objects.equals(this.tenure, salesInstructionModel.tenure) &&
        Objects.equals(this.videoURL, salesInstructionModel.videoURL);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address1, address2, address3, address4, addressNumber, area, bathrooms, bathroomsEnsuite, bedrooms, contractType, country, description, developmentOpp, directions, epCCurrentEER, epCCurrentEI, epCPotentialEER, epCPotentialEI, etag, hasElectricitySupply, hasGasSupply, hasWaterMeter, investmentOpp, kitchens, OID, outsideSpaceBalcony, outsideSpaceCommunalGarden, outsideSpaceConservatory, outsideSpaceGarden, outsideSpaceLargeGarden, outsideSpacePatio, outsideSpaceRoofTerrace, outsideSpaceSouthFacingGarden, parkingAllocated, parkingCarport, parkingDoubleGarage, parkingGarage, parkingOffRoad, parkingOnRoad, parkingPermit, parkingSecureGated, parkingTripleGarage, postcode, price, propertyOwnableType, receptionRooms, state, tenure, videoURL);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesInstructionModel {\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    address3: ").append(toIndentedString(address3)).append("\n");
    sb.append("    address4: ").append(toIndentedString(address4)).append("\n");
    sb.append("    addressNumber: ").append(toIndentedString(addressNumber)).append("\n");
    sb.append("    area: ").append(toIndentedString(area)).append("\n");
    sb.append("    bathrooms: ").append(toIndentedString(bathrooms)).append("\n");
    sb.append("    bathroomsEnsuite: ").append(toIndentedString(bathroomsEnsuite)).append("\n");
    sb.append("    bedrooms: ").append(toIndentedString(bedrooms)).append("\n");
    sb.append("    contractType: ").append(toIndentedString(contractType)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    developmentOpp: ").append(toIndentedString(developmentOpp)).append("\n");
    sb.append("    directions: ").append(toIndentedString(directions)).append("\n");
    sb.append("    epCCurrentEER: ").append(toIndentedString(epCCurrentEER)).append("\n");
    sb.append("    epCCurrentEI: ").append(toIndentedString(epCCurrentEI)).append("\n");
    sb.append("    epCPotentialEER: ").append(toIndentedString(epCPotentialEER)).append("\n");
    sb.append("    epCPotentialEI: ").append(toIndentedString(epCPotentialEI)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    hasElectricitySupply: ").append(toIndentedString(hasElectricitySupply)).append("\n");
    sb.append("    hasGasSupply: ").append(toIndentedString(hasGasSupply)).append("\n");
    sb.append("    hasWaterMeter: ").append(toIndentedString(hasWaterMeter)).append("\n");
    sb.append("    investmentOpp: ").append(toIndentedString(investmentOpp)).append("\n");
    sb.append("    kitchens: ").append(toIndentedString(kitchens)).append("\n");
    sb.append("    OID: ").append(toIndentedString(OID)).append("\n");
    sb.append("    outsideSpaceBalcony: ").append(toIndentedString(outsideSpaceBalcony)).append("\n");
    sb.append("    outsideSpaceCommunalGarden: ").append(toIndentedString(outsideSpaceCommunalGarden)).append("\n");
    sb.append("    outsideSpaceConservatory: ").append(toIndentedString(outsideSpaceConservatory)).append("\n");
    sb.append("    outsideSpaceGarden: ").append(toIndentedString(outsideSpaceGarden)).append("\n");
    sb.append("    outsideSpaceLargeGarden: ").append(toIndentedString(outsideSpaceLargeGarden)).append("\n");
    sb.append("    outsideSpacePatio: ").append(toIndentedString(outsideSpacePatio)).append("\n");
    sb.append("    outsideSpaceRoofTerrace: ").append(toIndentedString(outsideSpaceRoofTerrace)).append("\n");
    sb.append("    outsideSpaceSouthFacingGarden: ").append(toIndentedString(outsideSpaceSouthFacingGarden)).append("\n");
    sb.append("    parkingAllocated: ").append(toIndentedString(parkingAllocated)).append("\n");
    sb.append("    parkingCarport: ").append(toIndentedString(parkingCarport)).append("\n");
    sb.append("    parkingDoubleGarage: ").append(toIndentedString(parkingDoubleGarage)).append("\n");
    sb.append("    parkingGarage: ").append(toIndentedString(parkingGarage)).append("\n");
    sb.append("    parkingOffRoad: ").append(toIndentedString(parkingOffRoad)).append("\n");
    sb.append("    parkingOnRoad: ").append(toIndentedString(parkingOnRoad)).append("\n");
    sb.append("    parkingPermit: ").append(toIndentedString(parkingPermit)).append("\n");
    sb.append("    parkingSecureGated: ").append(toIndentedString(parkingSecureGated)).append("\n");
    sb.append("    parkingTripleGarage: ").append(toIndentedString(parkingTripleGarage)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    propertyOwnableType: ").append(toIndentedString(propertyOwnableType)).append("\n");
    sb.append("    receptionRooms: ").append(toIndentedString(receptionRooms)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tenure: ").append(toIndentedString(tenure)).append("\n");
    sb.append("    videoURL: ").append(toIndentedString(videoURL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address1");
    openapiFields.add("Address2");
    openapiFields.add("Address3");
    openapiFields.add("Address4");
    openapiFields.add("AddressNumber");
    openapiFields.add("Area");
    openapiFields.add("Bathrooms");
    openapiFields.add("BathroomsEnsuite");
    openapiFields.add("Bedrooms");
    openapiFields.add("ContractType");
    openapiFields.add("Country");
    openapiFields.add("Description");
    openapiFields.add("DevelopmentOpp");
    openapiFields.add("Directions");
    openapiFields.add("EPCCurrentEER");
    openapiFields.add("EPCCurrentEI");
    openapiFields.add("EPCPotentialEER");
    openapiFields.add("EPCPotentialEI");
    openapiFields.add("ETag");
    openapiFields.add("HasElectricitySupply");
    openapiFields.add("HasGasSupply");
    openapiFields.add("HasWaterMeter");
    openapiFields.add("InvestmentOpp");
    openapiFields.add("Kitchens");
    openapiFields.add("OID");
    openapiFields.add("OutsideSpaceBalcony");
    openapiFields.add("OutsideSpaceCommunalGarden");
    openapiFields.add("OutsideSpaceConservatory");
    openapiFields.add("OutsideSpaceGarden");
    openapiFields.add("OutsideSpaceLargeGarden");
    openapiFields.add("OutsideSpacePatio");
    openapiFields.add("OutsideSpaceRoofTerrace");
    openapiFields.add("OutsideSpaceSouthFacingGarden");
    openapiFields.add("ParkingAllocated");
    openapiFields.add("ParkingCarport");
    openapiFields.add("ParkingDoubleGarage");
    openapiFields.add("ParkingGarage");
    openapiFields.add("ParkingOffRoad");
    openapiFields.add("ParkingOnRoad");
    openapiFields.add("ParkingPermit");
    openapiFields.add("ParkingSecureGated");
    openapiFields.add("ParkingTripleGarage");
    openapiFields.add("Postcode");
    openapiFields.add("Price");
    openapiFields.add("PropertyOwnableType");
    openapiFields.add("ReceptionRooms");
    openapiFields.add("State");
    openapiFields.add("Tenure");
    openapiFields.add("VideoURL");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesInstructionModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesInstructionModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesInstructionModel is not found in the empty JSON string", SalesInstructionModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesInstructionModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesInstructionModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Address1") != null && !jsonObj.get("Address1").isJsonNull()) && !jsonObj.get("Address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address1").toString()));
      }
      if ((jsonObj.get("Address2") != null && !jsonObj.get("Address2").isJsonNull()) && !jsonObj.get("Address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address2").toString()));
      }
      if ((jsonObj.get("Address3") != null && !jsonObj.get("Address3").isJsonNull()) && !jsonObj.get("Address3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address3").toString()));
      }
      if ((jsonObj.get("Address4") != null && !jsonObj.get("Address4").isJsonNull()) && !jsonObj.get("Address4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address4").toString()));
      }
      if ((jsonObj.get("AddressNumber") != null && !jsonObj.get("AddressNumber").isJsonNull()) && !jsonObj.get("AddressNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AddressNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AddressNumber").toString()));
      }
      if ((jsonObj.get("Area") != null && !jsonObj.get("Area").isJsonNull()) && !jsonObj.get("Area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Area").toString()));
      }
      if ((jsonObj.get("ContractType") != null && !jsonObj.get("ContractType").isJsonNull()) && !jsonObj.get("ContractType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContractType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContractType").toString()));
      }
      // validate the optional field `ContractType`
      if (jsonObj.get("ContractType") != null && !jsonObj.get("ContractType").isJsonNull()) {
        ContractTypeEnum.validateJsonElement(jsonObj.get("ContractType"));
      }
      if ((jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) && !jsonObj.get("Country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Country").toString()));
      }
      // validate the optional field `Country`
      if (jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) {
        CountryEnum.validateJsonElement(jsonObj.get("Country"));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Directions") != null && !jsonObj.get("Directions").isJsonNull()) && !jsonObj.get("Directions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Directions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Directions").toString()));
      }
      if ((jsonObj.get("ETag") != null && !jsonObj.get("ETag").isJsonNull()) && !jsonObj.get("ETag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ETag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ETag").toString()));
      }
      if ((jsonObj.get("OID") != null && !jsonObj.get("OID").isJsonNull()) && !jsonObj.get("OID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OID").toString()));
      }
      if ((jsonObj.get("Postcode") != null && !jsonObj.get("Postcode").isJsonNull()) && !jsonObj.get("Postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Postcode").toString()));
      }
      if ((jsonObj.get("PropertyOwnableType") != null && !jsonObj.get("PropertyOwnableType").isJsonNull()) && !jsonObj.get("PropertyOwnableType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PropertyOwnableType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PropertyOwnableType").toString()));
      }
      // validate the optional field `PropertyOwnableType`
      if (jsonObj.get("PropertyOwnableType") != null && !jsonObj.get("PropertyOwnableType").isJsonNull()) {
        PropertyOwnableTypeEnum.validateJsonElement(jsonObj.get("PropertyOwnableType"));
      }
      if ((jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) && !jsonObj.get("State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("State").toString()));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("State"));
      }
      if ((jsonObj.get("Tenure") != null && !jsonObj.get("Tenure").isJsonNull()) && !jsonObj.get("Tenure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tenure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Tenure").toString()));
      }
      // validate the optional field `Tenure`
      if (jsonObj.get("Tenure") != null && !jsonObj.get("Tenure").isJsonNull()) {
        TenureEnum.validateJsonElement(jsonObj.get("Tenure"));
      }
      if ((jsonObj.get("VideoURL") != null && !jsonObj.get("VideoURL").isJsonNull()) && !jsonObj.get("VideoURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VideoURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VideoURL").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesInstructionModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesInstructionModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesInstructionModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesInstructionModel.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesInstructionModel>() {
           @Override
           public void write(JsonWriter out, SalesInstructionModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesInstructionModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesInstructionModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesInstructionModel
   * @throws IOException if the JSON string is invalid with respect to SalesInstructionModel
   */
  public static SalesInstructionModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesInstructionModel.class);
  }

  /**
   * Convert an instance of SalesInstructionModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

