/*
 * LetMC Api V2, Free (Tier 1)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-free-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Stores a photo related to a property structure.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:12.156803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PhotoModel {
  public static final String SERIALIZED_NAME_ETAG = "ETag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_FILE_NAME = "FileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_INSPECTION_ITEM = "InspectionItem";
  @SerializedName(SERIALIZED_NAME_INSPECTION_ITEM)
  private String inspectionItem;

  public static final String SERIALIZED_NAME_INTERIM_INSPECTION = "InterimInspection";
  @SerializedName(SERIALIZED_NAME_INTERIM_INSPECTION)
  private String interimInspection;

  public static final String SERIALIZED_NAME_INVENTORY_ITEM = "InventoryItem";
  @SerializedName(SERIALIZED_NAME_INVENTORY_ITEM)
  private String inventoryItem;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_O_I_D = "OID";
  @SerializedName(SERIALIZED_NAME_O_I_D)
  private String OID;

  public static final String SERIALIZED_NAME_PHOTO_NUMBER = "PhotoNumber";
  @SerializedName(SERIALIZED_NAME_PHOTO_NUMBER)
  private Integer photoNumber;

  /**
   * The photo type.
   */
  @JsonAdapter(PhotoTypeEnum.Adapter.class)
  public enum PhotoTypeEnum {
    PHOTO("Photo"),
    
    MAP("Map"),
    
    FLOOR_PLAN("FloorPlan"),
    
    SITE_MAP("SiteMap"),
    
    AERIAL_PHOTO("AerialPhoto");

    private String value;

    PhotoTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhotoTypeEnum fromValue(String value) {
      for (PhotoTypeEnum b : PhotoTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhotoTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhotoTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhotoTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhotoTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PhotoTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHOTO_TYPE = "PhotoType";
  @SerializedName(SERIALIZED_NAME_PHOTO_TYPE)
  private PhotoTypeEnum photoType;

  public static final String SERIALIZED_NAME_PROPERTY = "Property";
  @SerializedName(SERIALIZED_NAME_PROPERTY)
  private String property;

  public static final String SERIALIZED_NAME_ROOM = "Room";
  @SerializedName(SERIALIZED_NAME_ROOM)
  private String room;

  public PhotoModel() {
  }

  public PhotoModel etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * A unique identifier defining the object and change revision.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public PhotoModel fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * The file name.
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public PhotoModel inspectionItem(String inspectionItem) {
    this.inspectionItem = inspectionItem;
    return this;
  }

  /**
   * The inspection item the photo is assigned to (if applicable).
   * @return inspectionItem
   */
  @javax.annotation.Nullable
  public String getInspectionItem() {
    return inspectionItem;
  }

  public void setInspectionItem(String inspectionItem) {
    this.inspectionItem = inspectionItem;
  }


  public PhotoModel interimInspection(String interimInspection) {
    this.interimInspection = interimInspection;
    return this;
  }

  /**
   * The inspection the photo is assigned to (if applicable).
   * @return interimInspection
   */
  @javax.annotation.Nullable
  public String getInterimInspection() {
    return interimInspection;
  }

  public void setInterimInspection(String interimInspection) {
    this.interimInspection = interimInspection;
  }


  public PhotoModel inventoryItem(String inventoryItem) {
    this.inventoryItem = inventoryItem;
    return this;
  }

  /**
   * The inventory item the photo is assigned to (if applicable).
   * @return inventoryItem
   */
  @javax.annotation.Nullable
  public String getInventoryItem() {
    return inventoryItem;
  }

  public void setInventoryItem(String inventoryItem) {
    this.inventoryItem = inventoryItem;
  }


  public PhotoModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The photo name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PhotoModel OID(String OID) {
    this.OID = OID;
    return this;
  }

  /**
   * The unique Object ID (OID).
   * @return OID
   */
  @javax.annotation.Nullable
  public String getOID() {
    return OID;
  }

  public void setOID(String OID) {
    this.OID = OID;
  }


  public PhotoModel photoNumber(Integer photoNumber) {
    this.photoNumber = photoNumber;
    return this;
  }

  /**
   * The photo ordering number
   * @return photoNumber
   */
  @javax.annotation.Nullable
  public Integer getPhotoNumber() {
    return photoNumber;
  }

  public void setPhotoNumber(Integer photoNumber) {
    this.photoNumber = photoNumber;
  }


  public PhotoModel photoType(PhotoTypeEnum photoType) {
    this.photoType = photoType;
    return this;
  }

  /**
   * The photo type.
   * @return photoType
   */
  @javax.annotation.Nullable
  public PhotoTypeEnum getPhotoType() {
    return photoType;
  }

  public void setPhotoType(PhotoTypeEnum photoType) {
    this.photoType = photoType;
  }


  public PhotoModel property(String property) {
    this.property = property;
    return this;
  }

  /**
   * The property the photo is assigned to.
   * @return property
   */
  @javax.annotation.Nullable
  public String getProperty() {
    return property;
  }

  public void setProperty(String property) {
    this.property = property;
  }


  public PhotoModel room(String room) {
    this.room = room;
    return this;
  }

  /**
   * The room the photo is assigned to. (If applicable)
   * @return room
   */
  @javax.annotation.Nullable
  public String getRoom() {
    return room;
  }

  public void setRoom(String room) {
    this.room = room;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhotoModel photoModel = (PhotoModel) o;
    return Objects.equals(this.etag, photoModel.etag) &&
        Objects.equals(this.fileName, photoModel.fileName) &&
        Objects.equals(this.inspectionItem, photoModel.inspectionItem) &&
        Objects.equals(this.interimInspection, photoModel.interimInspection) &&
        Objects.equals(this.inventoryItem, photoModel.inventoryItem) &&
        Objects.equals(this.name, photoModel.name) &&
        Objects.equals(this.OID, photoModel.OID) &&
        Objects.equals(this.photoNumber, photoModel.photoNumber) &&
        Objects.equals(this.photoType, photoModel.photoType) &&
        Objects.equals(this.property, photoModel.property) &&
        Objects.equals(this.room, photoModel.room);
  }

  @Override
  public int hashCode() {
    return Objects.hash(etag, fileName, inspectionItem, interimInspection, inventoryItem, name, OID, photoNumber, photoType, property, room);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhotoModel {\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    inspectionItem: ").append(toIndentedString(inspectionItem)).append("\n");
    sb.append("    interimInspection: ").append(toIndentedString(interimInspection)).append("\n");
    sb.append("    inventoryItem: ").append(toIndentedString(inventoryItem)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    OID: ").append(toIndentedString(OID)).append("\n");
    sb.append("    photoNumber: ").append(toIndentedString(photoNumber)).append("\n");
    sb.append("    photoType: ").append(toIndentedString(photoType)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    room: ").append(toIndentedString(room)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ETag");
    openapiFields.add("FileName");
    openapiFields.add("InspectionItem");
    openapiFields.add("InterimInspection");
    openapiFields.add("InventoryItem");
    openapiFields.add("Name");
    openapiFields.add("OID");
    openapiFields.add("PhotoNumber");
    openapiFields.add("PhotoType");
    openapiFields.add("Property");
    openapiFields.add("Room");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhotoModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhotoModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhotoModel is not found in the empty JSON string", PhotoModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhotoModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhotoModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ETag") != null && !jsonObj.get("ETag").isJsonNull()) && !jsonObj.get("ETag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ETag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ETag").toString()));
      }
      if ((jsonObj.get("FileName") != null && !jsonObj.get("FileName").isJsonNull()) && !jsonObj.get("FileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FileName").toString()));
      }
      if ((jsonObj.get("InspectionItem") != null && !jsonObj.get("InspectionItem").isJsonNull()) && !jsonObj.get("InspectionItem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InspectionItem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InspectionItem").toString()));
      }
      if ((jsonObj.get("InterimInspection") != null && !jsonObj.get("InterimInspection").isJsonNull()) && !jsonObj.get("InterimInspection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InterimInspection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InterimInspection").toString()));
      }
      if ((jsonObj.get("InventoryItem") != null && !jsonObj.get("InventoryItem").isJsonNull()) && !jsonObj.get("InventoryItem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InventoryItem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InventoryItem").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("OID") != null && !jsonObj.get("OID").isJsonNull()) && !jsonObj.get("OID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OID").toString()));
      }
      if ((jsonObj.get("PhotoType") != null && !jsonObj.get("PhotoType").isJsonNull()) && !jsonObj.get("PhotoType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhotoType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhotoType").toString()));
      }
      // validate the optional field `PhotoType`
      if (jsonObj.get("PhotoType") != null && !jsonObj.get("PhotoType").isJsonNull()) {
        PhotoTypeEnum.validateJsonElement(jsonObj.get("PhotoType"));
      }
      if ((jsonObj.get("Property") != null && !jsonObj.get("Property").isJsonNull()) && !jsonObj.get("Property").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Property` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Property").toString()));
      }
      if ((jsonObj.get("Room") != null && !jsonObj.get("Room").isJsonNull()) && !jsonObj.get("Room").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Room` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Room").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhotoModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhotoModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhotoModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhotoModel.class));

       return (TypeAdapter<T>) new TypeAdapter<PhotoModel>() {
           @Override
           public void write(JsonWriter out, PhotoModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhotoModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhotoModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhotoModel
   * @throws IOException if the JSON string is invalid with respect to PhotoModel
   */
  public static PhotoModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhotoModel.class);
  }

  /**
   * Convert an instance of PhotoModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

