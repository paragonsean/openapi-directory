/*
 * LetMC Api V2, Free (Tier 1)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-free-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a diary appointment type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:12.156803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiaryAppointmentTypeModel {
  public static final String SERIALIZED_NAME_ETAG = "ETag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_O_I_D = "OID";
  @SerializedName(SERIALIZED_NAME_O_I_D)
  private String OID;

  /**
   * The appointment system type.
   */
  @JsonAdapter(SystemTypeEnum.Adapter.class)
  public enum SystemTypeEnum {
    VIEWING("Viewing"),
    
    VIEW_AND_VALUE("ViewAndValue"),
    
    OPENING_INSPECTION("OpeningInspection"),
    
    INTERIM_INSPECTION("InterimInspection"),
    
    CLOSING_INSPECTION("ClosingInspection"),
    
    SALES_APPRAISAL("SalesAppraisal"),
    
    CUSTOM("Custom");

    private String value;

    SystemTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SystemTypeEnum fromValue(String value) {
      for (SystemTypeEnum b : SystemTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SystemTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SystemTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SystemTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SystemTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SystemTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYSTEM_TYPE = "SystemType";
  @SerializedName(SERIALIZED_NAME_SYSTEM_TYPE)
  private SystemTypeEnum systemType;

  public DiaryAppointmentTypeModel() {
  }

  public DiaryAppointmentTypeModel etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * A unique identifier defining the object and change revision.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public DiaryAppointmentTypeModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The appointment type name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DiaryAppointmentTypeModel OID(String OID) {
    this.OID = OID;
    return this;
  }

  /**
   * The unique Object ID (OID).
   * @return OID
   */
  @javax.annotation.Nullable
  public String getOID() {
    return OID;
  }

  public void setOID(String OID) {
    this.OID = OID;
  }


  public DiaryAppointmentTypeModel systemType(SystemTypeEnum systemType) {
    this.systemType = systemType;
    return this;
  }

  /**
   * The appointment system type.
   * @return systemType
   */
  @javax.annotation.Nullable
  public SystemTypeEnum getSystemType() {
    return systemType;
  }

  public void setSystemType(SystemTypeEnum systemType) {
    this.systemType = systemType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiaryAppointmentTypeModel diaryAppointmentTypeModel = (DiaryAppointmentTypeModel) o;
    return Objects.equals(this.etag, diaryAppointmentTypeModel.etag) &&
        Objects.equals(this.name, diaryAppointmentTypeModel.name) &&
        Objects.equals(this.OID, diaryAppointmentTypeModel.OID) &&
        Objects.equals(this.systemType, diaryAppointmentTypeModel.systemType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(etag, name, OID, systemType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiaryAppointmentTypeModel {\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    OID: ").append(toIndentedString(OID)).append("\n");
    sb.append("    systemType: ").append(toIndentedString(systemType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ETag");
    openapiFields.add("Name");
    openapiFields.add("OID");
    openapiFields.add("SystemType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiaryAppointmentTypeModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiaryAppointmentTypeModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiaryAppointmentTypeModel is not found in the empty JSON string", DiaryAppointmentTypeModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiaryAppointmentTypeModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiaryAppointmentTypeModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ETag") != null && !jsonObj.get("ETag").isJsonNull()) && !jsonObj.get("ETag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ETag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ETag").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("OID") != null && !jsonObj.get("OID").isJsonNull()) && !jsonObj.get("OID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OID").toString()));
      }
      if ((jsonObj.get("SystemType") != null && !jsonObj.get("SystemType").isJsonNull()) && !jsonObj.get("SystemType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SystemType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SystemType").toString()));
      }
      // validate the optional field `SystemType`
      if (jsonObj.get("SystemType") != null && !jsonObj.get("SystemType").isJsonNull()) {
        SystemTypeEnum.validateJsonElement(jsonObj.get("SystemType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiaryAppointmentTypeModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiaryAppointmentTypeModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiaryAppointmentTypeModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiaryAppointmentTypeModel.class));

       return (TypeAdapter<T>) new TypeAdapter<DiaryAppointmentTypeModel>() {
           @Override
           public void write(JsonWriter out, DiaryAppointmentTypeModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiaryAppointmentTypeModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiaryAppointmentTypeModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiaryAppointmentTypeModel
   * @throws IOException if the JSON string is invalid with respect to DiaryAppointmentTypeModel
   */
  public static DiaryAppointmentTypeModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiaryAppointmentTypeModel.class);
  }

  /**
   * Convert an instance of DiaryAppointmentTypeModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

