/**
 * LetMC Api V2, Free (Tier 1)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-free-tier
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesInstructionModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesInstructionModel::OAISalesInstructionModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesInstructionModel::OAISalesInstructionModel() {
    this->initializeModel();
}

OAISalesInstructionModel::~OAISalesInstructionModel() {}

void OAISalesInstructionModel::initializeModel() {

    m_address1_isSet = false;
    m_address1_isValid = false;

    m_address2_isSet = false;
    m_address2_isValid = false;

    m_address3_isSet = false;
    m_address3_isValid = false;

    m_address4_isSet = false;
    m_address4_isValid = false;

    m_address_number_isSet = false;
    m_address_number_isValid = false;

    m_area_isSet = false;
    m_area_isValid = false;

    m_bathrooms_isSet = false;
    m_bathrooms_isValid = false;

    m_bathrooms_ensuite_isSet = false;
    m_bathrooms_ensuite_isValid = false;

    m_bedrooms_isSet = false;
    m_bedrooms_isValid = false;

    m_contract_type_isSet = false;
    m_contract_type_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_development_opp_isSet = false;
    m_development_opp_isValid = false;

    m_directions_isSet = false;
    m_directions_isValid = false;

    m_epc_current_eer_isSet = false;
    m_epc_current_eer_isValid = false;

    m_epc_current_ei_isSet = false;
    m_epc_current_ei_isValid = false;

    m_epc_potential_eer_isSet = false;
    m_epc_potential_eer_isValid = false;

    m_epc_potential_ei_isSet = false;
    m_epc_potential_ei_isValid = false;

    m_e_tag_isSet = false;
    m_e_tag_isValid = false;

    m_has_electricity_supply_isSet = false;
    m_has_electricity_supply_isValid = false;

    m_has_gas_supply_isSet = false;
    m_has_gas_supply_isValid = false;

    m_has_water_meter_isSet = false;
    m_has_water_meter_isValid = false;

    m_investment_opp_isSet = false;
    m_investment_opp_isValid = false;

    m_kitchens_isSet = false;
    m_kitchens_isValid = false;

    m_oid_isSet = false;
    m_oid_isValid = false;

    m_outside_space_balcony_isSet = false;
    m_outside_space_balcony_isValid = false;

    m_outside_space_communal_garden_isSet = false;
    m_outside_space_communal_garden_isValid = false;

    m_outside_space_conservatory_isSet = false;
    m_outside_space_conservatory_isValid = false;

    m_outside_space_garden_isSet = false;
    m_outside_space_garden_isValid = false;

    m_outside_space_large_garden_isSet = false;
    m_outside_space_large_garden_isValid = false;

    m_outside_space_patio_isSet = false;
    m_outside_space_patio_isValid = false;

    m_outside_space_roof_terrace_isSet = false;
    m_outside_space_roof_terrace_isValid = false;

    m_outside_space_south_facing_garden_isSet = false;
    m_outside_space_south_facing_garden_isValid = false;

    m_parking_allocated_isSet = false;
    m_parking_allocated_isValid = false;

    m_parking_carport_isSet = false;
    m_parking_carport_isValid = false;

    m_parking_double_garage_isSet = false;
    m_parking_double_garage_isValid = false;

    m_parking_garage_isSet = false;
    m_parking_garage_isValid = false;

    m_parking_off_road_isSet = false;
    m_parking_off_road_isValid = false;

    m_parking_on_road_isSet = false;
    m_parking_on_road_isValid = false;

    m_parking_permit_isSet = false;
    m_parking_permit_isValid = false;

    m_parking_secure_gated_isSet = false;
    m_parking_secure_gated_isValid = false;

    m_parking_triple_garage_isSet = false;
    m_parking_triple_garage_isValid = false;

    m_postcode_isSet = false;
    m_postcode_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_property_ownable_type_isSet = false;
    m_property_ownable_type_isValid = false;

    m_reception_rooms_isSet = false;
    m_reception_rooms_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tenure_isSet = false;
    m_tenure_isValid = false;

    m_video_url_isSet = false;
    m_video_url_isValid = false;
}

void OAISalesInstructionModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesInstructionModel::fromJsonObject(QJsonObject json) {

    m_address1_isValid = ::OpenAPI::fromJsonValue(m_address1, json[QString("Address1")]);
    m_address1_isSet = !json[QString("Address1")].isNull() && m_address1_isValid;

    m_address2_isValid = ::OpenAPI::fromJsonValue(m_address2, json[QString("Address2")]);
    m_address2_isSet = !json[QString("Address2")].isNull() && m_address2_isValid;

    m_address3_isValid = ::OpenAPI::fromJsonValue(m_address3, json[QString("Address3")]);
    m_address3_isSet = !json[QString("Address3")].isNull() && m_address3_isValid;

    m_address4_isValid = ::OpenAPI::fromJsonValue(m_address4, json[QString("Address4")]);
    m_address4_isSet = !json[QString("Address4")].isNull() && m_address4_isValid;

    m_address_number_isValid = ::OpenAPI::fromJsonValue(m_address_number, json[QString("AddressNumber")]);
    m_address_number_isSet = !json[QString("AddressNumber")].isNull() && m_address_number_isValid;

    m_area_isValid = ::OpenAPI::fromJsonValue(m_area, json[QString("Area")]);
    m_area_isSet = !json[QString("Area")].isNull() && m_area_isValid;

    m_bathrooms_isValid = ::OpenAPI::fromJsonValue(m_bathrooms, json[QString("Bathrooms")]);
    m_bathrooms_isSet = !json[QString("Bathrooms")].isNull() && m_bathrooms_isValid;

    m_bathrooms_ensuite_isValid = ::OpenAPI::fromJsonValue(m_bathrooms_ensuite, json[QString("BathroomsEnsuite")]);
    m_bathrooms_ensuite_isSet = !json[QString("BathroomsEnsuite")].isNull() && m_bathrooms_ensuite_isValid;

    m_bedrooms_isValid = ::OpenAPI::fromJsonValue(m_bedrooms, json[QString("Bedrooms")]);
    m_bedrooms_isSet = !json[QString("Bedrooms")].isNull() && m_bedrooms_isValid;

    m_contract_type_isValid = ::OpenAPI::fromJsonValue(m_contract_type, json[QString("ContractType")]);
    m_contract_type_isSet = !json[QString("ContractType")].isNull() && m_contract_type_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_development_opp_isValid = ::OpenAPI::fromJsonValue(m_development_opp, json[QString("DevelopmentOpp")]);
    m_development_opp_isSet = !json[QString("DevelopmentOpp")].isNull() && m_development_opp_isValid;

    m_directions_isValid = ::OpenAPI::fromJsonValue(m_directions, json[QString("Directions")]);
    m_directions_isSet = !json[QString("Directions")].isNull() && m_directions_isValid;

    m_epc_current_eer_isValid = ::OpenAPI::fromJsonValue(m_epc_current_eer, json[QString("EPCCurrentEER")]);
    m_epc_current_eer_isSet = !json[QString("EPCCurrentEER")].isNull() && m_epc_current_eer_isValid;

    m_epc_current_ei_isValid = ::OpenAPI::fromJsonValue(m_epc_current_ei, json[QString("EPCCurrentEI")]);
    m_epc_current_ei_isSet = !json[QString("EPCCurrentEI")].isNull() && m_epc_current_ei_isValid;

    m_epc_potential_eer_isValid = ::OpenAPI::fromJsonValue(m_epc_potential_eer, json[QString("EPCPotentialEER")]);
    m_epc_potential_eer_isSet = !json[QString("EPCPotentialEER")].isNull() && m_epc_potential_eer_isValid;

    m_epc_potential_ei_isValid = ::OpenAPI::fromJsonValue(m_epc_potential_ei, json[QString("EPCPotentialEI")]);
    m_epc_potential_ei_isSet = !json[QString("EPCPotentialEI")].isNull() && m_epc_potential_ei_isValid;

    m_e_tag_isValid = ::OpenAPI::fromJsonValue(m_e_tag, json[QString("ETag")]);
    m_e_tag_isSet = !json[QString("ETag")].isNull() && m_e_tag_isValid;

    m_has_electricity_supply_isValid = ::OpenAPI::fromJsonValue(m_has_electricity_supply, json[QString("HasElectricitySupply")]);
    m_has_electricity_supply_isSet = !json[QString("HasElectricitySupply")].isNull() && m_has_electricity_supply_isValid;

    m_has_gas_supply_isValid = ::OpenAPI::fromJsonValue(m_has_gas_supply, json[QString("HasGasSupply")]);
    m_has_gas_supply_isSet = !json[QString("HasGasSupply")].isNull() && m_has_gas_supply_isValid;

    m_has_water_meter_isValid = ::OpenAPI::fromJsonValue(m_has_water_meter, json[QString("HasWaterMeter")]);
    m_has_water_meter_isSet = !json[QString("HasWaterMeter")].isNull() && m_has_water_meter_isValid;

    m_investment_opp_isValid = ::OpenAPI::fromJsonValue(m_investment_opp, json[QString("InvestmentOpp")]);
    m_investment_opp_isSet = !json[QString("InvestmentOpp")].isNull() && m_investment_opp_isValid;

    m_kitchens_isValid = ::OpenAPI::fromJsonValue(m_kitchens, json[QString("Kitchens")]);
    m_kitchens_isSet = !json[QString("Kitchens")].isNull() && m_kitchens_isValid;

    m_oid_isValid = ::OpenAPI::fromJsonValue(m_oid, json[QString("OID")]);
    m_oid_isSet = !json[QString("OID")].isNull() && m_oid_isValid;

    m_outside_space_balcony_isValid = ::OpenAPI::fromJsonValue(m_outside_space_balcony, json[QString("OutsideSpaceBalcony")]);
    m_outside_space_balcony_isSet = !json[QString("OutsideSpaceBalcony")].isNull() && m_outside_space_balcony_isValid;

    m_outside_space_communal_garden_isValid = ::OpenAPI::fromJsonValue(m_outside_space_communal_garden, json[QString("OutsideSpaceCommunalGarden")]);
    m_outside_space_communal_garden_isSet = !json[QString("OutsideSpaceCommunalGarden")].isNull() && m_outside_space_communal_garden_isValid;

    m_outside_space_conservatory_isValid = ::OpenAPI::fromJsonValue(m_outside_space_conservatory, json[QString("OutsideSpaceConservatory")]);
    m_outside_space_conservatory_isSet = !json[QString("OutsideSpaceConservatory")].isNull() && m_outside_space_conservatory_isValid;

    m_outside_space_garden_isValid = ::OpenAPI::fromJsonValue(m_outside_space_garden, json[QString("OutsideSpaceGarden")]);
    m_outside_space_garden_isSet = !json[QString("OutsideSpaceGarden")].isNull() && m_outside_space_garden_isValid;

    m_outside_space_large_garden_isValid = ::OpenAPI::fromJsonValue(m_outside_space_large_garden, json[QString("OutsideSpaceLargeGarden")]);
    m_outside_space_large_garden_isSet = !json[QString("OutsideSpaceLargeGarden")].isNull() && m_outside_space_large_garden_isValid;

    m_outside_space_patio_isValid = ::OpenAPI::fromJsonValue(m_outside_space_patio, json[QString("OutsideSpacePatio")]);
    m_outside_space_patio_isSet = !json[QString("OutsideSpacePatio")].isNull() && m_outside_space_patio_isValid;

    m_outside_space_roof_terrace_isValid = ::OpenAPI::fromJsonValue(m_outside_space_roof_terrace, json[QString("OutsideSpaceRoofTerrace")]);
    m_outside_space_roof_terrace_isSet = !json[QString("OutsideSpaceRoofTerrace")].isNull() && m_outside_space_roof_terrace_isValid;

    m_outside_space_south_facing_garden_isValid = ::OpenAPI::fromJsonValue(m_outside_space_south_facing_garden, json[QString("OutsideSpaceSouthFacingGarden")]);
    m_outside_space_south_facing_garden_isSet = !json[QString("OutsideSpaceSouthFacingGarden")].isNull() && m_outside_space_south_facing_garden_isValid;

    m_parking_allocated_isValid = ::OpenAPI::fromJsonValue(m_parking_allocated, json[QString("ParkingAllocated")]);
    m_parking_allocated_isSet = !json[QString("ParkingAllocated")].isNull() && m_parking_allocated_isValid;

    m_parking_carport_isValid = ::OpenAPI::fromJsonValue(m_parking_carport, json[QString("ParkingCarport")]);
    m_parking_carport_isSet = !json[QString("ParkingCarport")].isNull() && m_parking_carport_isValid;

    m_parking_double_garage_isValid = ::OpenAPI::fromJsonValue(m_parking_double_garage, json[QString("ParkingDoubleGarage")]);
    m_parking_double_garage_isSet = !json[QString("ParkingDoubleGarage")].isNull() && m_parking_double_garage_isValid;

    m_parking_garage_isValid = ::OpenAPI::fromJsonValue(m_parking_garage, json[QString("ParkingGarage")]);
    m_parking_garage_isSet = !json[QString("ParkingGarage")].isNull() && m_parking_garage_isValid;

    m_parking_off_road_isValid = ::OpenAPI::fromJsonValue(m_parking_off_road, json[QString("ParkingOffRoad")]);
    m_parking_off_road_isSet = !json[QString("ParkingOffRoad")].isNull() && m_parking_off_road_isValid;

    m_parking_on_road_isValid = ::OpenAPI::fromJsonValue(m_parking_on_road, json[QString("ParkingOnRoad")]);
    m_parking_on_road_isSet = !json[QString("ParkingOnRoad")].isNull() && m_parking_on_road_isValid;

    m_parking_permit_isValid = ::OpenAPI::fromJsonValue(m_parking_permit, json[QString("ParkingPermit")]);
    m_parking_permit_isSet = !json[QString("ParkingPermit")].isNull() && m_parking_permit_isValid;

    m_parking_secure_gated_isValid = ::OpenAPI::fromJsonValue(m_parking_secure_gated, json[QString("ParkingSecureGated")]);
    m_parking_secure_gated_isSet = !json[QString("ParkingSecureGated")].isNull() && m_parking_secure_gated_isValid;

    m_parking_triple_garage_isValid = ::OpenAPI::fromJsonValue(m_parking_triple_garage, json[QString("ParkingTripleGarage")]);
    m_parking_triple_garage_isSet = !json[QString("ParkingTripleGarage")].isNull() && m_parking_triple_garage_isValid;

    m_postcode_isValid = ::OpenAPI::fromJsonValue(m_postcode, json[QString("Postcode")]);
    m_postcode_isSet = !json[QString("Postcode")].isNull() && m_postcode_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("Price")]);
    m_price_isSet = !json[QString("Price")].isNull() && m_price_isValid;

    m_property_ownable_type_isValid = ::OpenAPI::fromJsonValue(m_property_ownable_type, json[QString("PropertyOwnableType")]);
    m_property_ownable_type_isSet = !json[QString("PropertyOwnableType")].isNull() && m_property_ownable_type_isValid;

    m_reception_rooms_isValid = ::OpenAPI::fromJsonValue(m_reception_rooms, json[QString("ReceptionRooms")]);
    m_reception_rooms_isSet = !json[QString("ReceptionRooms")].isNull() && m_reception_rooms_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_tenure_isValid = ::OpenAPI::fromJsonValue(m_tenure, json[QString("Tenure")]);
    m_tenure_isSet = !json[QString("Tenure")].isNull() && m_tenure_isValid;

    m_video_url_isValid = ::OpenAPI::fromJsonValue(m_video_url, json[QString("VideoURL")]);
    m_video_url_isSet = !json[QString("VideoURL")].isNull() && m_video_url_isValid;
}

QString OAISalesInstructionModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesInstructionModel::asJsonObject() const {
    QJsonObject obj;
    if (m_address1_isSet) {
        obj.insert(QString("Address1"), ::OpenAPI::toJsonValue(m_address1));
    }
    if (m_address2_isSet) {
        obj.insert(QString("Address2"), ::OpenAPI::toJsonValue(m_address2));
    }
    if (m_address3_isSet) {
        obj.insert(QString("Address3"), ::OpenAPI::toJsonValue(m_address3));
    }
    if (m_address4_isSet) {
        obj.insert(QString("Address4"), ::OpenAPI::toJsonValue(m_address4));
    }
    if (m_address_number_isSet) {
        obj.insert(QString("AddressNumber"), ::OpenAPI::toJsonValue(m_address_number));
    }
    if (m_area_isSet) {
        obj.insert(QString("Area"), ::OpenAPI::toJsonValue(m_area));
    }
    if (m_bathrooms_isSet) {
        obj.insert(QString("Bathrooms"), ::OpenAPI::toJsonValue(m_bathrooms));
    }
    if (m_bathrooms_ensuite_isSet) {
        obj.insert(QString("BathroomsEnsuite"), ::OpenAPI::toJsonValue(m_bathrooms_ensuite));
    }
    if (m_bedrooms_isSet) {
        obj.insert(QString("Bedrooms"), ::OpenAPI::toJsonValue(m_bedrooms));
    }
    if (m_contract_type_isSet) {
        obj.insert(QString("ContractType"), ::OpenAPI::toJsonValue(m_contract_type));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_development_opp_isSet) {
        obj.insert(QString("DevelopmentOpp"), ::OpenAPI::toJsonValue(m_development_opp));
    }
    if (m_directions_isSet) {
        obj.insert(QString("Directions"), ::OpenAPI::toJsonValue(m_directions));
    }
    if (m_epc_current_eer_isSet) {
        obj.insert(QString("EPCCurrentEER"), ::OpenAPI::toJsonValue(m_epc_current_eer));
    }
    if (m_epc_current_ei_isSet) {
        obj.insert(QString("EPCCurrentEI"), ::OpenAPI::toJsonValue(m_epc_current_ei));
    }
    if (m_epc_potential_eer_isSet) {
        obj.insert(QString("EPCPotentialEER"), ::OpenAPI::toJsonValue(m_epc_potential_eer));
    }
    if (m_epc_potential_ei_isSet) {
        obj.insert(QString("EPCPotentialEI"), ::OpenAPI::toJsonValue(m_epc_potential_ei));
    }
    if (m_e_tag_isSet) {
        obj.insert(QString("ETag"), ::OpenAPI::toJsonValue(m_e_tag));
    }
    if (m_has_electricity_supply_isSet) {
        obj.insert(QString("HasElectricitySupply"), ::OpenAPI::toJsonValue(m_has_electricity_supply));
    }
    if (m_has_gas_supply_isSet) {
        obj.insert(QString("HasGasSupply"), ::OpenAPI::toJsonValue(m_has_gas_supply));
    }
    if (m_has_water_meter_isSet) {
        obj.insert(QString("HasWaterMeter"), ::OpenAPI::toJsonValue(m_has_water_meter));
    }
    if (m_investment_opp_isSet) {
        obj.insert(QString("InvestmentOpp"), ::OpenAPI::toJsonValue(m_investment_opp));
    }
    if (m_kitchens_isSet) {
        obj.insert(QString("Kitchens"), ::OpenAPI::toJsonValue(m_kitchens));
    }
    if (m_oid_isSet) {
        obj.insert(QString("OID"), ::OpenAPI::toJsonValue(m_oid));
    }
    if (m_outside_space_balcony_isSet) {
        obj.insert(QString("OutsideSpaceBalcony"), ::OpenAPI::toJsonValue(m_outside_space_balcony));
    }
    if (m_outside_space_communal_garden_isSet) {
        obj.insert(QString("OutsideSpaceCommunalGarden"), ::OpenAPI::toJsonValue(m_outside_space_communal_garden));
    }
    if (m_outside_space_conservatory_isSet) {
        obj.insert(QString("OutsideSpaceConservatory"), ::OpenAPI::toJsonValue(m_outside_space_conservatory));
    }
    if (m_outside_space_garden_isSet) {
        obj.insert(QString("OutsideSpaceGarden"), ::OpenAPI::toJsonValue(m_outside_space_garden));
    }
    if (m_outside_space_large_garden_isSet) {
        obj.insert(QString("OutsideSpaceLargeGarden"), ::OpenAPI::toJsonValue(m_outside_space_large_garden));
    }
    if (m_outside_space_patio_isSet) {
        obj.insert(QString("OutsideSpacePatio"), ::OpenAPI::toJsonValue(m_outside_space_patio));
    }
    if (m_outside_space_roof_terrace_isSet) {
        obj.insert(QString("OutsideSpaceRoofTerrace"), ::OpenAPI::toJsonValue(m_outside_space_roof_terrace));
    }
    if (m_outside_space_south_facing_garden_isSet) {
        obj.insert(QString("OutsideSpaceSouthFacingGarden"), ::OpenAPI::toJsonValue(m_outside_space_south_facing_garden));
    }
    if (m_parking_allocated_isSet) {
        obj.insert(QString("ParkingAllocated"), ::OpenAPI::toJsonValue(m_parking_allocated));
    }
    if (m_parking_carport_isSet) {
        obj.insert(QString("ParkingCarport"), ::OpenAPI::toJsonValue(m_parking_carport));
    }
    if (m_parking_double_garage_isSet) {
        obj.insert(QString("ParkingDoubleGarage"), ::OpenAPI::toJsonValue(m_parking_double_garage));
    }
    if (m_parking_garage_isSet) {
        obj.insert(QString("ParkingGarage"), ::OpenAPI::toJsonValue(m_parking_garage));
    }
    if (m_parking_off_road_isSet) {
        obj.insert(QString("ParkingOffRoad"), ::OpenAPI::toJsonValue(m_parking_off_road));
    }
    if (m_parking_on_road_isSet) {
        obj.insert(QString("ParkingOnRoad"), ::OpenAPI::toJsonValue(m_parking_on_road));
    }
    if (m_parking_permit_isSet) {
        obj.insert(QString("ParkingPermit"), ::OpenAPI::toJsonValue(m_parking_permit));
    }
    if (m_parking_secure_gated_isSet) {
        obj.insert(QString("ParkingSecureGated"), ::OpenAPI::toJsonValue(m_parking_secure_gated));
    }
    if (m_parking_triple_garage_isSet) {
        obj.insert(QString("ParkingTripleGarage"), ::OpenAPI::toJsonValue(m_parking_triple_garage));
    }
    if (m_postcode_isSet) {
        obj.insert(QString("Postcode"), ::OpenAPI::toJsonValue(m_postcode));
    }
    if (m_price_isSet) {
        obj.insert(QString("Price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_property_ownable_type_isSet) {
        obj.insert(QString("PropertyOwnableType"), ::OpenAPI::toJsonValue(m_property_ownable_type));
    }
    if (m_reception_rooms_isSet) {
        obj.insert(QString("ReceptionRooms"), ::OpenAPI::toJsonValue(m_reception_rooms));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tenure_isSet) {
        obj.insert(QString("Tenure"), ::OpenAPI::toJsonValue(m_tenure));
    }
    if (m_video_url_isSet) {
        obj.insert(QString("VideoURL"), ::OpenAPI::toJsonValue(m_video_url));
    }
    return obj;
}

QString OAISalesInstructionModel::getAddress1() const {
    return m_address1;
}
void OAISalesInstructionModel::setAddress1(const QString &address1) {
    m_address1 = address1;
    m_address1_isSet = true;
}

bool OAISalesInstructionModel::is_address1_Set() const{
    return m_address1_isSet;
}

bool OAISalesInstructionModel::is_address1_Valid() const{
    return m_address1_isValid;
}

QString OAISalesInstructionModel::getAddress2() const {
    return m_address2;
}
void OAISalesInstructionModel::setAddress2(const QString &address2) {
    m_address2 = address2;
    m_address2_isSet = true;
}

bool OAISalesInstructionModel::is_address2_Set() const{
    return m_address2_isSet;
}

bool OAISalesInstructionModel::is_address2_Valid() const{
    return m_address2_isValid;
}

QString OAISalesInstructionModel::getAddress3() const {
    return m_address3;
}
void OAISalesInstructionModel::setAddress3(const QString &address3) {
    m_address3 = address3;
    m_address3_isSet = true;
}

bool OAISalesInstructionModel::is_address3_Set() const{
    return m_address3_isSet;
}

bool OAISalesInstructionModel::is_address3_Valid() const{
    return m_address3_isValid;
}

QString OAISalesInstructionModel::getAddress4() const {
    return m_address4;
}
void OAISalesInstructionModel::setAddress4(const QString &address4) {
    m_address4 = address4;
    m_address4_isSet = true;
}

bool OAISalesInstructionModel::is_address4_Set() const{
    return m_address4_isSet;
}

bool OAISalesInstructionModel::is_address4_Valid() const{
    return m_address4_isValid;
}

QString OAISalesInstructionModel::getAddressNumber() const {
    return m_address_number;
}
void OAISalesInstructionModel::setAddressNumber(const QString &address_number) {
    m_address_number = address_number;
    m_address_number_isSet = true;
}

bool OAISalesInstructionModel::is_address_number_Set() const{
    return m_address_number_isSet;
}

bool OAISalesInstructionModel::is_address_number_Valid() const{
    return m_address_number_isValid;
}

QString OAISalesInstructionModel::getArea() const {
    return m_area;
}
void OAISalesInstructionModel::setArea(const QString &area) {
    m_area = area;
    m_area_isSet = true;
}

bool OAISalesInstructionModel::is_area_Set() const{
    return m_area_isSet;
}

bool OAISalesInstructionModel::is_area_Valid() const{
    return m_area_isValid;
}

qint32 OAISalesInstructionModel::getBathrooms() const {
    return m_bathrooms;
}
void OAISalesInstructionModel::setBathrooms(const qint32 &bathrooms) {
    m_bathrooms = bathrooms;
    m_bathrooms_isSet = true;
}

bool OAISalesInstructionModel::is_bathrooms_Set() const{
    return m_bathrooms_isSet;
}

bool OAISalesInstructionModel::is_bathrooms_Valid() const{
    return m_bathrooms_isValid;
}

qint32 OAISalesInstructionModel::getBathroomsEnsuite() const {
    return m_bathrooms_ensuite;
}
void OAISalesInstructionModel::setBathroomsEnsuite(const qint32 &bathrooms_ensuite) {
    m_bathrooms_ensuite = bathrooms_ensuite;
    m_bathrooms_ensuite_isSet = true;
}

bool OAISalesInstructionModel::is_bathrooms_ensuite_Set() const{
    return m_bathrooms_ensuite_isSet;
}

bool OAISalesInstructionModel::is_bathrooms_ensuite_Valid() const{
    return m_bathrooms_ensuite_isValid;
}

qint32 OAISalesInstructionModel::getBedrooms() const {
    return m_bedrooms;
}
void OAISalesInstructionModel::setBedrooms(const qint32 &bedrooms) {
    m_bedrooms = bedrooms;
    m_bedrooms_isSet = true;
}

bool OAISalesInstructionModel::is_bedrooms_Set() const{
    return m_bedrooms_isSet;
}

bool OAISalesInstructionModel::is_bedrooms_Valid() const{
    return m_bedrooms_isValid;
}

QString OAISalesInstructionModel::getContractType() const {
    return m_contract_type;
}
void OAISalesInstructionModel::setContractType(const QString &contract_type) {
    m_contract_type = contract_type;
    m_contract_type_isSet = true;
}

bool OAISalesInstructionModel::is_contract_type_Set() const{
    return m_contract_type_isSet;
}

bool OAISalesInstructionModel::is_contract_type_Valid() const{
    return m_contract_type_isValid;
}

QString OAISalesInstructionModel::getCountry() const {
    return m_country;
}
void OAISalesInstructionModel::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAISalesInstructionModel::is_country_Set() const{
    return m_country_isSet;
}

bool OAISalesInstructionModel::is_country_Valid() const{
    return m_country_isValid;
}

QString OAISalesInstructionModel::getDescription() const {
    return m_description;
}
void OAISalesInstructionModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISalesInstructionModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAISalesInstructionModel::is_description_Valid() const{
    return m_description_isValid;
}

bool OAISalesInstructionModel::isDevelopmentOpp() const {
    return m_development_opp;
}
void OAISalesInstructionModel::setDevelopmentOpp(const bool &development_opp) {
    m_development_opp = development_opp;
    m_development_opp_isSet = true;
}

bool OAISalesInstructionModel::is_development_opp_Set() const{
    return m_development_opp_isSet;
}

bool OAISalesInstructionModel::is_development_opp_Valid() const{
    return m_development_opp_isValid;
}

QString OAISalesInstructionModel::getDirections() const {
    return m_directions;
}
void OAISalesInstructionModel::setDirections(const QString &directions) {
    m_directions = directions;
    m_directions_isSet = true;
}

bool OAISalesInstructionModel::is_directions_Set() const{
    return m_directions_isSet;
}

bool OAISalesInstructionModel::is_directions_Valid() const{
    return m_directions_isValid;
}

qint32 OAISalesInstructionModel::getEpcCurrentEer() const {
    return m_epc_current_eer;
}
void OAISalesInstructionModel::setEpcCurrentEer(const qint32 &epc_current_eer) {
    m_epc_current_eer = epc_current_eer;
    m_epc_current_eer_isSet = true;
}

bool OAISalesInstructionModel::is_epc_current_eer_Set() const{
    return m_epc_current_eer_isSet;
}

bool OAISalesInstructionModel::is_epc_current_eer_Valid() const{
    return m_epc_current_eer_isValid;
}

qint32 OAISalesInstructionModel::getEpcCurrentEi() const {
    return m_epc_current_ei;
}
void OAISalesInstructionModel::setEpcCurrentEi(const qint32 &epc_current_ei) {
    m_epc_current_ei = epc_current_ei;
    m_epc_current_ei_isSet = true;
}

bool OAISalesInstructionModel::is_epc_current_ei_Set() const{
    return m_epc_current_ei_isSet;
}

bool OAISalesInstructionModel::is_epc_current_ei_Valid() const{
    return m_epc_current_ei_isValid;
}

qint32 OAISalesInstructionModel::getEpcPotentialEer() const {
    return m_epc_potential_eer;
}
void OAISalesInstructionModel::setEpcPotentialEer(const qint32 &epc_potential_eer) {
    m_epc_potential_eer = epc_potential_eer;
    m_epc_potential_eer_isSet = true;
}

bool OAISalesInstructionModel::is_epc_potential_eer_Set() const{
    return m_epc_potential_eer_isSet;
}

bool OAISalesInstructionModel::is_epc_potential_eer_Valid() const{
    return m_epc_potential_eer_isValid;
}

qint32 OAISalesInstructionModel::getEpcPotentialEi() const {
    return m_epc_potential_ei;
}
void OAISalesInstructionModel::setEpcPotentialEi(const qint32 &epc_potential_ei) {
    m_epc_potential_ei = epc_potential_ei;
    m_epc_potential_ei_isSet = true;
}

bool OAISalesInstructionModel::is_epc_potential_ei_Set() const{
    return m_epc_potential_ei_isSet;
}

bool OAISalesInstructionModel::is_epc_potential_ei_Valid() const{
    return m_epc_potential_ei_isValid;
}

QString OAISalesInstructionModel::getETag() const {
    return m_e_tag;
}
void OAISalesInstructionModel::setETag(const QString &e_tag) {
    m_e_tag = e_tag;
    m_e_tag_isSet = true;
}

bool OAISalesInstructionModel::is_e_tag_Set() const{
    return m_e_tag_isSet;
}

bool OAISalesInstructionModel::is_e_tag_Valid() const{
    return m_e_tag_isValid;
}

bool OAISalesInstructionModel::isHasElectricitySupply() const {
    return m_has_electricity_supply;
}
void OAISalesInstructionModel::setHasElectricitySupply(const bool &has_electricity_supply) {
    m_has_electricity_supply = has_electricity_supply;
    m_has_electricity_supply_isSet = true;
}

bool OAISalesInstructionModel::is_has_electricity_supply_Set() const{
    return m_has_electricity_supply_isSet;
}

bool OAISalesInstructionModel::is_has_electricity_supply_Valid() const{
    return m_has_electricity_supply_isValid;
}

bool OAISalesInstructionModel::isHasGasSupply() const {
    return m_has_gas_supply;
}
void OAISalesInstructionModel::setHasGasSupply(const bool &has_gas_supply) {
    m_has_gas_supply = has_gas_supply;
    m_has_gas_supply_isSet = true;
}

bool OAISalesInstructionModel::is_has_gas_supply_Set() const{
    return m_has_gas_supply_isSet;
}

bool OAISalesInstructionModel::is_has_gas_supply_Valid() const{
    return m_has_gas_supply_isValid;
}

bool OAISalesInstructionModel::isHasWaterMeter() const {
    return m_has_water_meter;
}
void OAISalesInstructionModel::setHasWaterMeter(const bool &has_water_meter) {
    m_has_water_meter = has_water_meter;
    m_has_water_meter_isSet = true;
}

bool OAISalesInstructionModel::is_has_water_meter_Set() const{
    return m_has_water_meter_isSet;
}

bool OAISalesInstructionModel::is_has_water_meter_Valid() const{
    return m_has_water_meter_isValid;
}

bool OAISalesInstructionModel::isInvestmentOpp() const {
    return m_investment_opp;
}
void OAISalesInstructionModel::setInvestmentOpp(const bool &investment_opp) {
    m_investment_opp = investment_opp;
    m_investment_opp_isSet = true;
}

bool OAISalesInstructionModel::is_investment_opp_Set() const{
    return m_investment_opp_isSet;
}

bool OAISalesInstructionModel::is_investment_opp_Valid() const{
    return m_investment_opp_isValid;
}

qint32 OAISalesInstructionModel::getKitchens() const {
    return m_kitchens;
}
void OAISalesInstructionModel::setKitchens(const qint32 &kitchens) {
    m_kitchens = kitchens;
    m_kitchens_isSet = true;
}

bool OAISalesInstructionModel::is_kitchens_Set() const{
    return m_kitchens_isSet;
}

bool OAISalesInstructionModel::is_kitchens_Valid() const{
    return m_kitchens_isValid;
}

QString OAISalesInstructionModel::getOid() const {
    return m_oid;
}
void OAISalesInstructionModel::setOid(const QString &oid) {
    m_oid = oid;
    m_oid_isSet = true;
}

bool OAISalesInstructionModel::is_oid_Set() const{
    return m_oid_isSet;
}

bool OAISalesInstructionModel::is_oid_Valid() const{
    return m_oid_isValid;
}

bool OAISalesInstructionModel::isOutsideSpaceBalcony() const {
    return m_outside_space_balcony;
}
void OAISalesInstructionModel::setOutsideSpaceBalcony(const bool &outside_space_balcony) {
    m_outside_space_balcony = outside_space_balcony;
    m_outside_space_balcony_isSet = true;
}

bool OAISalesInstructionModel::is_outside_space_balcony_Set() const{
    return m_outside_space_balcony_isSet;
}

bool OAISalesInstructionModel::is_outside_space_balcony_Valid() const{
    return m_outside_space_balcony_isValid;
}

bool OAISalesInstructionModel::isOutsideSpaceCommunalGarden() const {
    return m_outside_space_communal_garden;
}
void OAISalesInstructionModel::setOutsideSpaceCommunalGarden(const bool &outside_space_communal_garden) {
    m_outside_space_communal_garden = outside_space_communal_garden;
    m_outside_space_communal_garden_isSet = true;
}

bool OAISalesInstructionModel::is_outside_space_communal_garden_Set() const{
    return m_outside_space_communal_garden_isSet;
}

bool OAISalesInstructionModel::is_outside_space_communal_garden_Valid() const{
    return m_outside_space_communal_garden_isValid;
}

bool OAISalesInstructionModel::isOutsideSpaceConservatory() const {
    return m_outside_space_conservatory;
}
void OAISalesInstructionModel::setOutsideSpaceConservatory(const bool &outside_space_conservatory) {
    m_outside_space_conservatory = outside_space_conservatory;
    m_outside_space_conservatory_isSet = true;
}

bool OAISalesInstructionModel::is_outside_space_conservatory_Set() const{
    return m_outside_space_conservatory_isSet;
}

bool OAISalesInstructionModel::is_outside_space_conservatory_Valid() const{
    return m_outside_space_conservatory_isValid;
}

bool OAISalesInstructionModel::isOutsideSpaceGarden() const {
    return m_outside_space_garden;
}
void OAISalesInstructionModel::setOutsideSpaceGarden(const bool &outside_space_garden) {
    m_outside_space_garden = outside_space_garden;
    m_outside_space_garden_isSet = true;
}

bool OAISalesInstructionModel::is_outside_space_garden_Set() const{
    return m_outside_space_garden_isSet;
}

bool OAISalesInstructionModel::is_outside_space_garden_Valid() const{
    return m_outside_space_garden_isValid;
}

bool OAISalesInstructionModel::isOutsideSpaceLargeGarden() const {
    return m_outside_space_large_garden;
}
void OAISalesInstructionModel::setOutsideSpaceLargeGarden(const bool &outside_space_large_garden) {
    m_outside_space_large_garden = outside_space_large_garden;
    m_outside_space_large_garden_isSet = true;
}

bool OAISalesInstructionModel::is_outside_space_large_garden_Set() const{
    return m_outside_space_large_garden_isSet;
}

bool OAISalesInstructionModel::is_outside_space_large_garden_Valid() const{
    return m_outside_space_large_garden_isValid;
}

bool OAISalesInstructionModel::isOutsideSpacePatio() const {
    return m_outside_space_patio;
}
void OAISalesInstructionModel::setOutsideSpacePatio(const bool &outside_space_patio) {
    m_outside_space_patio = outside_space_patio;
    m_outside_space_patio_isSet = true;
}

bool OAISalesInstructionModel::is_outside_space_patio_Set() const{
    return m_outside_space_patio_isSet;
}

bool OAISalesInstructionModel::is_outside_space_patio_Valid() const{
    return m_outside_space_patio_isValid;
}

bool OAISalesInstructionModel::isOutsideSpaceRoofTerrace() const {
    return m_outside_space_roof_terrace;
}
void OAISalesInstructionModel::setOutsideSpaceRoofTerrace(const bool &outside_space_roof_terrace) {
    m_outside_space_roof_terrace = outside_space_roof_terrace;
    m_outside_space_roof_terrace_isSet = true;
}

bool OAISalesInstructionModel::is_outside_space_roof_terrace_Set() const{
    return m_outside_space_roof_terrace_isSet;
}

bool OAISalesInstructionModel::is_outside_space_roof_terrace_Valid() const{
    return m_outside_space_roof_terrace_isValid;
}

bool OAISalesInstructionModel::isOutsideSpaceSouthFacingGarden() const {
    return m_outside_space_south_facing_garden;
}
void OAISalesInstructionModel::setOutsideSpaceSouthFacingGarden(const bool &outside_space_south_facing_garden) {
    m_outside_space_south_facing_garden = outside_space_south_facing_garden;
    m_outside_space_south_facing_garden_isSet = true;
}

bool OAISalesInstructionModel::is_outside_space_south_facing_garden_Set() const{
    return m_outside_space_south_facing_garden_isSet;
}

bool OAISalesInstructionModel::is_outside_space_south_facing_garden_Valid() const{
    return m_outside_space_south_facing_garden_isValid;
}

bool OAISalesInstructionModel::isParkingAllocated() const {
    return m_parking_allocated;
}
void OAISalesInstructionModel::setParkingAllocated(const bool &parking_allocated) {
    m_parking_allocated = parking_allocated;
    m_parking_allocated_isSet = true;
}

bool OAISalesInstructionModel::is_parking_allocated_Set() const{
    return m_parking_allocated_isSet;
}

bool OAISalesInstructionModel::is_parking_allocated_Valid() const{
    return m_parking_allocated_isValid;
}

bool OAISalesInstructionModel::isParkingCarport() const {
    return m_parking_carport;
}
void OAISalesInstructionModel::setParkingCarport(const bool &parking_carport) {
    m_parking_carport = parking_carport;
    m_parking_carport_isSet = true;
}

bool OAISalesInstructionModel::is_parking_carport_Set() const{
    return m_parking_carport_isSet;
}

bool OAISalesInstructionModel::is_parking_carport_Valid() const{
    return m_parking_carport_isValid;
}

bool OAISalesInstructionModel::isParkingDoubleGarage() const {
    return m_parking_double_garage;
}
void OAISalesInstructionModel::setParkingDoubleGarage(const bool &parking_double_garage) {
    m_parking_double_garage = parking_double_garage;
    m_parking_double_garage_isSet = true;
}

bool OAISalesInstructionModel::is_parking_double_garage_Set() const{
    return m_parking_double_garage_isSet;
}

bool OAISalesInstructionModel::is_parking_double_garage_Valid() const{
    return m_parking_double_garage_isValid;
}

bool OAISalesInstructionModel::isParkingGarage() const {
    return m_parking_garage;
}
void OAISalesInstructionModel::setParkingGarage(const bool &parking_garage) {
    m_parking_garage = parking_garage;
    m_parking_garage_isSet = true;
}

bool OAISalesInstructionModel::is_parking_garage_Set() const{
    return m_parking_garage_isSet;
}

bool OAISalesInstructionModel::is_parking_garage_Valid() const{
    return m_parking_garage_isValid;
}

bool OAISalesInstructionModel::isParkingOffRoad() const {
    return m_parking_off_road;
}
void OAISalesInstructionModel::setParkingOffRoad(const bool &parking_off_road) {
    m_parking_off_road = parking_off_road;
    m_parking_off_road_isSet = true;
}

bool OAISalesInstructionModel::is_parking_off_road_Set() const{
    return m_parking_off_road_isSet;
}

bool OAISalesInstructionModel::is_parking_off_road_Valid() const{
    return m_parking_off_road_isValid;
}

bool OAISalesInstructionModel::isParkingOnRoad() const {
    return m_parking_on_road;
}
void OAISalesInstructionModel::setParkingOnRoad(const bool &parking_on_road) {
    m_parking_on_road = parking_on_road;
    m_parking_on_road_isSet = true;
}

bool OAISalesInstructionModel::is_parking_on_road_Set() const{
    return m_parking_on_road_isSet;
}

bool OAISalesInstructionModel::is_parking_on_road_Valid() const{
    return m_parking_on_road_isValid;
}

bool OAISalesInstructionModel::isParkingPermit() const {
    return m_parking_permit;
}
void OAISalesInstructionModel::setParkingPermit(const bool &parking_permit) {
    m_parking_permit = parking_permit;
    m_parking_permit_isSet = true;
}

bool OAISalesInstructionModel::is_parking_permit_Set() const{
    return m_parking_permit_isSet;
}

bool OAISalesInstructionModel::is_parking_permit_Valid() const{
    return m_parking_permit_isValid;
}

bool OAISalesInstructionModel::isParkingSecureGated() const {
    return m_parking_secure_gated;
}
void OAISalesInstructionModel::setParkingSecureGated(const bool &parking_secure_gated) {
    m_parking_secure_gated = parking_secure_gated;
    m_parking_secure_gated_isSet = true;
}

bool OAISalesInstructionModel::is_parking_secure_gated_Set() const{
    return m_parking_secure_gated_isSet;
}

bool OAISalesInstructionModel::is_parking_secure_gated_Valid() const{
    return m_parking_secure_gated_isValid;
}

bool OAISalesInstructionModel::isParkingTripleGarage() const {
    return m_parking_triple_garage;
}
void OAISalesInstructionModel::setParkingTripleGarage(const bool &parking_triple_garage) {
    m_parking_triple_garage = parking_triple_garage;
    m_parking_triple_garage_isSet = true;
}

bool OAISalesInstructionModel::is_parking_triple_garage_Set() const{
    return m_parking_triple_garage_isSet;
}

bool OAISalesInstructionModel::is_parking_triple_garage_Valid() const{
    return m_parking_triple_garage_isValid;
}

QString OAISalesInstructionModel::getPostcode() const {
    return m_postcode;
}
void OAISalesInstructionModel::setPostcode(const QString &postcode) {
    m_postcode = postcode;
    m_postcode_isSet = true;
}

bool OAISalesInstructionModel::is_postcode_Set() const{
    return m_postcode_isSet;
}

bool OAISalesInstructionModel::is_postcode_Valid() const{
    return m_postcode_isValid;
}

double OAISalesInstructionModel::getPrice() const {
    return m_price;
}
void OAISalesInstructionModel::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAISalesInstructionModel::is_price_Set() const{
    return m_price_isSet;
}

bool OAISalesInstructionModel::is_price_Valid() const{
    return m_price_isValid;
}

QString OAISalesInstructionModel::getPropertyOwnableType() const {
    return m_property_ownable_type;
}
void OAISalesInstructionModel::setPropertyOwnableType(const QString &property_ownable_type) {
    m_property_ownable_type = property_ownable_type;
    m_property_ownable_type_isSet = true;
}

bool OAISalesInstructionModel::is_property_ownable_type_Set() const{
    return m_property_ownable_type_isSet;
}

bool OAISalesInstructionModel::is_property_ownable_type_Valid() const{
    return m_property_ownable_type_isValid;
}

qint32 OAISalesInstructionModel::getReceptionRooms() const {
    return m_reception_rooms;
}
void OAISalesInstructionModel::setReceptionRooms(const qint32 &reception_rooms) {
    m_reception_rooms = reception_rooms;
    m_reception_rooms_isSet = true;
}

bool OAISalesInstructionModel::is_reception_rooms_Set() const{
    return m_reception_rooms_isSet;
}

bool OAISalesInstructionModel::is_reception_rooms_Valid() const{
    return m_reception_rooms_isValid;
}

QString OAISalesInstructionModel::getState() const {
    return m_state;
}
void OAISalesInstructionModel::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISalesInstructionModel::is_state_Set() const{
    return m_state_isSet;
}

bool OAISalesInstructionModel::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISalesInstructionModel::getTenure() const {
    return m_tenure;
}
void OAISalesInstructionModel::setTenure(const QString &tenure) {
    m_tenure = tenure;
    m_tenure_isSet = true;
}

bool OAISalesInstructionModel::is_tenure_Set() const{
    return m_tenure_isSet;
}

bool OAISalesInstructionModel::is_tenure_Valid() const{
    return m_tenure_isValid;
}

QString OAISalesInstructionModel::getVideoUrl() const {
    return m_video_url;
}
void OAISalesInstructionModel::setVideoUrl(const QString &video_url) {
    m_video_url = video_url;
    m_video_url_isSet = true;
}

bool OAISalesInstructionModel::is_video_url_Set() const{
    return m_video_url_isSet;
}

bool OAISalesInstructionModel::is_video_url_Valid() const{
    return m_video_url_isValid;
}

bool OAISalesInstructionModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bathrooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bathrooms_ensuite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bedrooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_development_opp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epc_current_eer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epc_current_ei_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epc_potential_eer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epc_potential_ei_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_electricity_supply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_gas_supply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_water_meter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_investment_opp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kitchens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outside_space_balcony_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outside_space_communal_garden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outside_space_conservatory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outside_space_garden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outside_space_large_garden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outside_space_patio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outside_space_roof_terrace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outside_space_south_facing_garden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parking_allocated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parking_carport_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parking_double_garage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parking_garage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parking_off_road_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parking_on_road_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parking_permit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parking_secure_gated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parking_triple_garage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_ownable_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reception_rooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesInstructionModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
