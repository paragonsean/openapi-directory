/**
 * LetMC Api V2, Free (Tier 1)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-free-tier
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPropertyControllerApi_H
#define OAI_OAIPropertyControllerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAIPhotoModelResults.h"
#include "OAIPropertyFacilityModelResults.h"
#include "OAIPropertyModel.h"
#include "OAIPropertyModelResults.h"
#include "OAIPropertyRoomModelResults.h"
#include "OAITenancyModelResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPropertyControllerApi : public QObject {
    Q_OBJECT

public:
    OAIPropertyControllerApi(const int timeOut = 0);
    ~OAIPropertyControllerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  property_id QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void propertyControllerGetPropertiesFacilities(const QString &short_name, const QString &property_id, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  property_id QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void propertyControllerGetPropertiesPhotos(const QString &short_name, const QString &property_id, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  property_id QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void propertyControllerGetPropertiesRooms(const QString &short_name, const QString &property_id, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  property_id QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void propertyControllerGetPropertiesTenancies(const QString &short_name, const QString &property_id, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  property_structure_id QString [required]
    */
    virtual void propertyControllerGetPropertyEERDownload(const QString &short_name, const QString &property_structure_id);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  property_structure_id QString [required]
    */
    virtual void propertyControllerGetPropertyEIRDownload(const QString &short_name, const QString &property_structure_id);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void v2Tier1ShortNamePropertyPropertiesGet(const QString &short_name, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  property_id QString [required]
    */
    virtual void v2Tier1ShortNamePropertyPropertiesPropertyIDGet(const QString &short_name, const QString &property_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void propertyControllerGetPropertiesFacilitiesCallback(OAIHttpRequestWorker *worker);
    void propertyControllerGetPropertiesPhotosCallback(OAIHttpRequestWorker *worker);
    void propertyControllerGetPropertiesRoomsCallback(OAIHttpRequestWorker *worker);
    void propertyControllerGetPropertiesTenanciesCallback(OAIHttpRequestWorker *worker);
    void propertyControllerGetPropertyEERDownloadCallback(OAIHttpRequestWorker *worker);
    void propertyControllerGetPropertyEIRDownloadCallback(OAIHttpRequestWorker *worker);
    void v2Tier1ShortNamePropertyPropertiesGetCallback(OAIHttpRequestWorker *worker);
    void v2Tier1ShortNamePropertyPropertiesPropertyIDGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void propertyControllerGetPropertiesFacilitiesSignal(OAIPropertyFacilityModelResults summary);
    void propertyControllerGetPropertiesPhotosSignal(OAIPhotoModelResults summary);
    void propertyControllerGetPropertiesRoomsSignal(OAIPropertyRoomModelResults summary);
    void propertyControllerGetPropertiesTenanciesSignal(OAITenancyModelResults summary);
    void propertyControllerGetPropertyEERDownloadSignal(OAIObject summary);
    void propertyControllerGetPropertyEIRDownloadSignal(OAIObject summary);
    void v2Tier1ShortNamePropertyPropertiesGetSignal(OAIPropertyModelResults summary);
    void v2Tier1ShortNamePropertyPropertiesPropertyIDGetSignal(OAIPropertyModel summary);


    void propertyControllerGetPropertiesFacilitiesSignalFull(OAIHttpRequestWorker *worker, OAIPropertyFacilityModelResults summary);
    void propertyControllerGetPropertiesPhotosSignalFull(OAIHttpRequestWorker *worker, OAIPhotoModelResults summary);
    void propertyControllerGetPropertiesRoomsSignalFull(OAIHttpRequestWorker *worker, OAIPropertyRoomModelResults summary);
    void propertyControllerGetPropertiesTenanciesSignalFull(OAIHttpRequestWorker *worker, OAITenancyModelResults summary);
    void propertyControllerGetPropertyEERDownloadSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void propertyControllerGetPropertyEIRDownloadSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void v2Tier1ShortNamePropertyPropertiesGetSignalFull(OAIHttpRequestWorker *worker, OAIPropertyModelResults summary);
    void v2Tier1ShortNamePropertyPropertiesPropertyIDGetSignalFull(OAIHttpRequestWorker *worker, OAIPropertyModel summary);

    Q_DECL_DEPRECATED_X("Use propertyControllerGetPropertiesFacilitiesSignalError() instead")
    void propertyControllerGetPropertiesFacilitiesSignalE(OAIPropertyFacilityModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyControllerGetPropertiesFacilitiesSignalError(OAIPropertyFacilityModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use propertyControllerGetPropertiesPhotosSignalError() instead")
    void propertyControllerGetPropertiesPhotosSignalE(OAIPhotoModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyControllerGetPropertiesPhotosSignalError(OAIPhotoModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use propertyControllerGetPropertiesRoomsSignalError() instead")
    void propertyControllerGetPropertiesRoomsSignalE(OAIPropertyRoomModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyControllerGetPropertiesRoomsSignalError(OAIPropertyRoomModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use propertyControllerGetPropertiesTenanciesSignalError() instead")
    void propertyControllerGetPropertiesTenanciesSignalE(OAITenancyModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyControllerGetPropertiesTenanciesSignalError(OAITenancyModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use propertyControllerGetPropertyEERDownloadSignalError() instead")
    void propertyControllerGetPropertyEERDownloadSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyControllerGetPropertyEERDownloadSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use propertyControllerGetPropertyEIRDownloadSignalError() instead")
    void propertyControllerGetPropertyEIRDownloadSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyControllerGetPropertyEIRDownloadSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier1ShortNamePropertyPropertiesGetSignalError() instead")
    void v2Tier1ShortNamePropertyPropertiesGetSignalE(OAIPropertyModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier1ShortNamePropertyPropertiesGetSignalError(OAIPropertyModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier1ShortNamePropertyPropertiesPropertyIDGetSignalError() instead")
    void v2Tier1ShortNamePropertyPropertiesPropertyIDGetSignalE(OAIPropertyModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier1ShortNamePropertyPropertiesPropertyIDGetSignalError(OAIPropertyModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use propertyControllerGetPropertiesFacilitiesSignalErrorFull() instead")
    void propertyControllerGetPropertiesFacilitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyControllerGetPropertiesFacilitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use propertyControllerGetPropertiesPhotosSignalErrorFull() instead")
    void propertyControllerGetPropertiesPhotosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyControllerGetPropertiesPhotosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use propertyControllerGetPropertiesRoomsSignalErrorFull() instead")
    void propertyControllerGetPropertiesRoomsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyControllerGetPropertiesRoomsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use propertyControllerGetPropertiesTenanciesSignalErrorFull() instead")
    void propertyControllerGetPropertiesTenanciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyControllerGetPropertiesTenanciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use propertyControllerGetPropertyEERDownloadSignalErrorFull() instead")
    void propertyControllerGetPropertyEERDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyControllerGetPropertyEERDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use propertyControllerGetPropertyEIRDownloadSignalErrorFull() instead")
    void propertyControllerGetPropertyEIRDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void propertyControllerGetPropertyEIRDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier1ShortNamePropertyPropertiesGetSignalErrorFull() instead")
    void v2Tier1ShortNamePropertyPropertiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier1ShortNamePropertyPropertiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier1ShortNamePropertyPropertiesPropertyIDGetSignalErrorFull() instead")
    void v2Tier1ShortNamePropertyPropertiesPropertyIDGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier1ShortNamePropertyPropertiesPropertyIDGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
