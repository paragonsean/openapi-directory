/**
 * LetMC Api V2, Free (Tier 1)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-free-tier
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISalesControllerApi_H
#define OAI_OAISalesControllerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAIPhotoModelResults.h"
#include "OAIPropertyRoomModelResults.h"
#include "OAISalesFeatureModelResults.h"
#include "OAISalesFeatureTypeModel.h"
#include "OAISalesFeatureTypeModelResults.h"
#include "OAISalesInstructionModel.h"
#include "OAISalesInstructionModelResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISalesControllerApi : public QObject {
    Q_OBJECT

public:
    OAISalesControllerApi(const int timeOut = 0);
    ~OAISalesControllerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  branch_id QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    * @param[in]  only_developement bool [required]
    * @param[in]  only_investements bool [required]
    * @param[in]  minimum_price double [optional]
    * @param[in]  maximum_price double [optional]
    * @param[in]  minimum_beds qint32 [optional]
    * @param[in]  minimum_bathrooms qint32 [optional]
    * @param[in]  minimum_ensuites qint32 [optional]
    * @param[in]  minimum_toilets qint32 [optional]
    * @param[in]  minimum_reception qint32 [optional]
    */
    virtual void salesControllerGetAdvertisedSales(const QString &short_name, const QString &branch_id, const qint32 &offset, const qint32 &count, const bool &only_developement, const bool &only_investements, const ::OpenAPI::OptionalParam<double> &minimum_price = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &maximum_price = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &minimum_beds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &minimum_bathrooms = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &minimum_ensuites = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &minimum_toilets = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &minimum_reception = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  sales_instruction_id QString [required]
    */
    virtual void salesControllerGetEER(const QString &short_name, const QString &sales_instruction_id);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  sales_instruction_id QString [required]
    */
    virtual void salesControllerGetEIR(const QString &short_name, const QString &sales_instruction_id);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  sales_instruction_id QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void salesControllerGetSalesInstructionsFeatures(const QString &short_name, const QString &sales_instruction_id, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  sales_instruction_id QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void salesControllerGetSalesInstructionsFloorPlans(const QString &short_name, const QString &sales_instruction_id, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  sales_instruction_id QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void salesControllerGetSalesInstructionsPhotos(const QString &short_name, const QString &sales_instruction_id, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  sales_instruction_id QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void salesControllerGetSalesInstructionsRooms(const QString &short_name, const QString &sales_instruction_id, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void v2Tier1ShortNameSalesSalesfeaturetypesGet(const QString &short_name, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  sales_feature_type_id QString [required]
    */
    virtual void v2Tier1ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGet(const QString &short_name, const QString &sales_feature_type_id);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void v2Tier1ShortNameSalesSalesinstructionsGet(const QString &short_name, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  sales_instruction_id QString [required]
    */
    virtual void v2Tier1ShortNameSalesSalesinstructionsSalesInstructionIDGet(const QString &short_name, const QString &sales_instruction_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void salesControllerGetAdvertisedSalesCallback(OAIHttpRequestWorker *worker);
    void salesControllerGetEERCallback(OAIHttpRequestWorker *worker);
    void salesControllerGetEIRCallback(OAIHttpRequestWorker *worker);
    void salesControllerGetSalesInstructionsFeaturesCallback(OAIHttpRequestWorker *worker);
    void salesControllerGetSalesInstructionsFloorPlansCallback(OAIHttpRequestWorker *worker);
    void salesControllerGetSalesInstructionsPhotosCallback(OAIHttpRequestWorker *worker);
    void salesControllerGetSalesInstructionsRoomsCallback(OAIHttpRequestWorker *worker);
    void v2Tier1ShortNameSalesSalesfeaturetypesGetCallback(OAIHttpRequestWorker *worker);
    void v2Tier1ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetCallback(OAIHttpRequestWorker *worker);
    void v2Tier1ShortNameSalesSalesinstructionsGetCallback(OAIHttpRequestWorker *worker);
    void v2Tier1ShortNameSalesSalesinstructionsSalesInstructionIDGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void salesControllerGetAdvertisedSalesSignal(OAISalesInstructionModelResults summary);
    void salesControllerGetEERSignal(OAIObject summary);
    void salesControllerGetEIRSignal(OAIObject summary);
    void salesControllerGetSalesInstructionsFeaturesSignal(OAISalesFeatureModelResults summary);
    void salesControllerGetSalesInstructionsFloorPlansSignal(OAIPhotoModelResults summary);
    void salesControllerGetSalesInstructionsPhotosSignal(OAIPhotoModelResults summary);
    void salesControllerGetSalesInstructionsRoomsSignal(OAIPropertyRoomModelResults summary);
    void v2Tier1ShortNameSalesSalesfeaturetypesGetSignal(OAISalesFeatureTypeModelResults summary);
    void v2Tier1ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetSignal(OAISalesFeatureTypeModel summary);
    void v2Tier1ShortNameSalesSalesinstructionsGetSignal(OAISalesInstructionModelResults summary);
    void v2Tier1ShortNameSalesSalesinstructionsSalesInstructionIDGetSignal(OAISalesInstructionModel summary);


    void salesControllerGetAdvertisedSalesSignalFull(OAIHttpRequestWorker *worker, OAISalesInstructionModelResults summary);
    void salesControllerGetEERSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesControllerGetEIRSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void salesControllerGetSalesInstructionsFeaturesSignalFull(OAIHttpRequestWorker *worker, OAISalesFeatureModelResults summary);
    void salesControllerGetSalesInstructionsFloorPlansSignalFull(OAIHttpRequestWorker *worker, OAIPhotoModelResults summary);
    void salesControllerGetSalesInstructionsPhotosSignalFull(OAIHttpRequestWorker *worker, OAIPhotoModelResults summary);
    void salesControllerGetSalesInstructionsRoomsSignalFull(OAIHttpRequestWorker *worker, OAIPropertyRoomModelResults summary);
    void v2Tier1ShortNameSalesSalesfeaturetypesGetSignalFull(OAIHttpRequestWorker *worker, OAISalesFeatureTypeModelResults summary);
    void v2Tier1ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetSignalFull(OAIHttpRequestWorker *worker, OAISalesFeatureTypeModel summary);
    void v2Tier1ShortNameSalesSalesinstructionsGetSignalFull(OAIHttpRequestWorker *worker, OAISalesInstructionModelResults summary);
    void v2Tier1ShortNameSalesSalesinstructionsSalesInstructionIDGetSignalFull(OAIHttpRequestWorker *worker, OAISalesInstructionModel summary);

    Q_DECL_DEPRECATED_X("Use salesControllerGetAdvertisedSalesSignalError() instead")
    void salesControllerGetAdvertisedSalesSignalE(OAISalesInstructionModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesControllerGetAdvertisedSalesSignalError(OAISalesInstructionModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesControllerGetEERSignalError() instead")
    void salesControllerGetEERSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesControllerGetEERSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesControllerGetEIRSignalError() instead")
    void salesControllerGetEIRSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesControllerGetEIRSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesControllerGetSalesInstructionsFeaturesSignalError() instead")
    void salesControllerGetSalesInstructionsFeaturesSignalE(OAISalesFeatureModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesControllerGetSalesInstructionsFeaturesSignalError(OAISalesFeatureModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesControllerGetSalesInstructionsFloorPlansSignalError() instead")
    void salesControllerGetSalesInstructionsFloorPlansSignalE(OAIPhotoModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesControllerGetSalesInstructionsFloorPlansSignalError(OAIPhotoModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesControllerGetSalesInstructionsPhotosSignalError() instead")
    void salesControllerGetSalesInstructionsPhotosSignalE(OAIPhotoModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesControllerGetSalesInstructionsPhotosSignalError(OAIPhotoModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesControllerGetSalesInstructionsRoomsSignalError() instead")
    void salesControllerGetSalesInstructionsRoomsSignalE(OAIPropertyRoomModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesControllerGetSalesInstructionsRoomsSignalError(OAIPropertyRoomModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier1ShortNameSalesSalesfeaturetypesGetSignalError() instead")
    void v2Tier1ShortNameSalesSalesfeaturetypesGetSignalE(OAISalesFeatureTypeModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier1ShortNameSalesSalesfeaturetypesGetSignalError(OAISalesFeatureTypeModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier1ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetSignalError() instead")
    void v2Tier1ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetSignalE(OAISalesFeatureTypeModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier1ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetSignalError(OAISalesFeatureTypeModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier1ShortNameSalesSalesinstructionsGetSignalError() instead")
    void v2Tier1ShortNameSalesSalesinstructionsGetSignalE(OAISalesInstructionModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier1ShortNameSalesSalesinstructionsGetSignalError(OAISalesInstructionModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier1ShortNameSalesSalesinstructionsSalesInstructionIDGetSignalError() instead")
    void v2Tier1ShortNameSalesSalesinstructionsSalesInstructionIDGetSignalE(OAISalesInstructionModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier1ShortNameSalesSalesinstructionsSalesInstructionIDGetSignalError(OAISalesInstructionModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use salesControllerGetAdvertisedSalesSignalErrorFull() instead")
    void salesControllerGetAdvertisedSalesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesControllerGetAdvertisedSalesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesControllerGetEERSignalErrorFull() instead")
    void salesControllerGetEERSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesControllerGetEERSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesControllerGetEIRSignalErrorFull() instead")
    void salesControllerGetEIRSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesControllerGetEIRSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesControllerGetSalesInstructionsFeaturesSignalErrorFull() instead")
    void salesControllerGetSalesInstructionsFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesControllerGetSalesInstructionsFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesControllerGetSalesInstructionsFloorPlansSignalErrorFull() instead")
    void salesControllerGetSalesInstructionsFloorPlansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesControllerGetSalesInstructionsFloorPlansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesControllerGetSalesInstructionsPhotosSignalErrorFull() instead")
    void salesControllerGetSalesInstructionsPhotosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesControllerGetSalesInstructionsPhotosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesControllerGetSalesInstructionsRoomsSignalErrorFull() instead")
    void salesControllerGetSalesInstructionsRoomsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesControllerGetSalesInstructionsRoomsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier1ShortNameSalesSalesfeaturetypesGetSignalErrorFull() instead")
    void v2Tier1ShortNameSalesSalesfeaturetypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier1ShortNameSalesSalesfeaturetypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier1ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetSignalErrorFull() instead")
    void v2Tier1ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier1ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier1ShortNameSalesSalesinstructionsGetSignalErrorFull() instead")
    void v2Tier1ShortNameSalesSalesinstructionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier1ShortNameSalesSalesinstructionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier1ShortNameSalesSalesinstructionsSalesInstructionIDGetSignalErrorFull() instead")
    void v2Tier1ShortNameSalesSalesinstructionsSalesInstructionIDGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier1ShortNameSalesSalesinstructionsSalesInstructionIDGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
