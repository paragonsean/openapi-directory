/**
 * LetMC Api V2, Free (Tier 1)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-free-tier
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILettingsControllerApi_H
#define OAI_OAILettingsControllerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAITenancyModel.h"
#include "OAITenancyModelResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILettingsControllerApi : public QObject {
    Q_OBJECT

public:
    OAILettingsControllerApi(const int timeOut = 0);
    ~OAILettingsControllerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  branch_id QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    * @param[in]  area_id QString [optional]
    * @param[in]  rent_minimum double [optional]
    * @param[in]  rent_maximum double [optional]
    * @param[in]  maximum_tenants qint32 [optional]
    * @param[in]  want_shared_properties bool [optional]
    * @param[in]  want_student_properties bool [optional]
    */
    virtual void lettingsControllerGetAdvertised(const QString &short_name, const QString &branch_id, const qint32 &offset, const qint32 &count, const ::OpenAPI::OptionalParam<QString> &area_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &rent_minimum = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &rent_maximum = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &maximum_tenants = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &want_shared_properties = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &want_student_properties = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  branch_id QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    * @param[in]  range_start_date QDateTime [required]
    * @param[in]  range_end_date QDateTime [required]
    * @param[in]  area_id QString [optional]
    * @param[in]  rent_minimum double [optional]
    * @param[in]  rent_maximum double [optional]
    * @param[in]  maximum_tenants qint32 [optional]
    * @param[in]  want_shared_properties bool [optional]
    * @param[in]  want_student_properties bool [optional]
    */
    virtual void lettingsControllerGetAdvertisedBetweenDates(const QString &short_name, const QString &branch_id, const qint32 &offset, const qint32 &count, const QDateTime &range_start_date, const QDateTime &range_end_date, const ::OpenAPI::OptionalParam<QString> &area_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &rent_minimum = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &rent_maximum = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &maximum_tenants = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &want_shared_properties = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &want_student_properties = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  tenancy_id QString [required]
    */
    virtual void lettingsControllerGetTenancyBrochure(const QString &short_name, const QString &tenancy_id);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void v2Tier1ShortNameLettingsTenanciesGet(const QString &short_name, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  tenancy_id QString [required]
    */
    virtual void v2Tier1ShortNameLettingsTenanciesTenancyIDGet(const QString &short_name, const QString &tenancy_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void lettingsControllerGetAdvertisedCallback(OAIHttpRequestWorker *worker);
    void lettingsControllerGetAdvertisedBetweenDatesCallback(OAIHttpRequestWorker *worker);
    void lettingsControllerGetTenancyBrochureCallback(OAIHttpRequestWorker *worker);
    void v2Tier1ShortNameLettingsTenanciesGetCallback(OAIHttpRequestWorker *worker);
    void v2Tier1ShortNameLettingsTenanciesTenancyIDGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void lettingsControllerGetAdvertisedSignal(OAITenancyModelResults summary);
    void lettingsControllerGetAdvertisedBetweenDatesSignal(OAITenancyModelResults summary);
    void lettingsControllerGetTenancyBrochureSignal(OAIObject summary);
    void v2Tier1ShortNameLettingsTenanciesGetSignal(OAITenancyModelResults summary);
    void v2Tier1ShortNameLettingsTenanciesTenancyIDGetSignal(OAITenancyModel summary);


    void lettingsControllerGetAdvertisedSignalFull(OAIHttpRequestWorker *worker, OAITenancyModelResults summary);
    void lettingsControllerGetAdvertisedBetweenDatesSignalFull(OAIHttpRequestWorker *worker, OAITenancyModelResults summary);
    void lettingsControllerGetTenancyBrochureSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void v2Tier1ShortNameLettingsTenanciesGetSignalFull(OAIHttpRequestWorker *worker, OAITenancyModelResults summary);
    void v2Tier1ShortNameLettingsTenanciesTenancyIDGetSignalFull(OAIHttpRequestWorker *worker, OAITenancyModel summary);

    Q_DECL_DEPRECATED_X("Use lettingsControllerGetAdvertisedSignalError() instead")
    void lettingsControllerGetAdvertisedSignalE(OAITenancyModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lettingsControllerGetAdvertisedSignalError(OAITenancyModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lettingsControllerGetAdvertisedBetweenDatesSignalError() instead")
    void lettingsControllerGetAdvertisedBetweenDatesSignalE(OAITenancyModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lettingsControllerGetAdvertisedBetweenDatesSignalError(OAITenancyModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lettingsControllerGetTenancyBrochureSignalError() instead")
    void lettingsControllerGetTenancyBrochureSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lettingsControllerGetTenancyBrochureSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier1ShortNameLettingsTenanciesGetSignalError() instead")
    void v2Tier1ShortNameLettingsTenanciesGetSignalE(OAITenancyModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier1ShortNameLettingsTenanciesGetSignalError(OAITenancyModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier1ShortNameLettingsTenanciesTenancyIDGetSignalError() instead")
    void v2Tier1ShortNameLettingsTenanciesTenancyIDGetSignalE(OAITenancyModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier1ShortNameLettingsTenanciesTenancyIDGetSignalError(OAITenancyModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use lettingsControllerGetAdvertisedSignalErrorFull() instead")
    void lettingsControllerGetAdvertisedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lettingsControllerGetAdvertisedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lettingsControllerGetAdvertisedBetweenDatesSignalErrorFull() instead")
    void lettingsControllerGetAdvertisedBetweenDatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lettingsControllerGetAdvertisedBetweenDatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lettingsControllerGetTenancyBrochureSignalErrorFull() instead")
    void lettingsControllerGetTenancyBrochureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lettingsControllerGetTenancyBrochureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier1ShortNameLettingsTenanciesGetSignalErrorFull() instead")
    void v2Tier1ShortNameLettingsTenanciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier1ShortNameLettingsTenanciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier1ShortNameLettingsTenanciesTenancyIDGetSignalErrorFull() instead")
    void v2Tier1ShortNameLettingsTenanciesTenancyIDGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier1ShortNameLettingsTenanciesTenancyIDGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
