/**
 * LetMC Api V2, Free (Tier 1)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-free-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PhotoModel from '../model/PhotoModel';
import PhotoModelResults from '../model/PhotoModelResults';

/**
* PhotoController service.
* @module api/PhotoControllerApi
* @version v2-free-tier
*/
export default class PhotoControllerApi {

    /**
    * Constructs a new PhotoControllerApi. 
    * @alias module:api/PhotoControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the photoControllerGetPhotoDownload operation.
     * @callback module:api/PhotoControllerApi~photoControllerGetPhotoDownloadCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads the photo of a property given the property and photo ID.
     * @param {String} shortName The unique client short-name
     * @param {String} photoID The unique ID of the photo on the property
     * @param {Object} opts Optional parameters
     * @param {Number} [width] An optional parameter specifying the image width
     * @param {Number} [height] An optional parameter specifying the image height
     * @param {module:api/PhotoControllerApi~photoControllerGetPhotoDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    photoControllerGetPhotoDownload(shortName, photoID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling photoControllerGetPhotoDownload");
      }
      // verify the required parameter 'photoID' is set
      if (photoID === undefined || photoID === null) {
        throw new Error("Missing the required parameter 'photoID' when calling photoControllerGetPhotoDownload");
      }

      let pathParams = {
        'shortName': shortName,
        'photoID': photoID
      };
      let queryParams = {
        'width': opts['width'],
        'height': opts['height']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/tier1/{shortName}/photos/photo/{photoID}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Tier1ShortNamePhotoPhotosGet operation.
     * @callback module:api/PhotoControllerApi~v2Tier1ShortNamePhotoPhotosGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhotoModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A collection of all photos in the company
     * @param {String} shortName The unique client short-name
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {module:api/PhotoControllerApi~v2Tier1ShortNamePhotoPhotosGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhotoModelResults}
     */
    v2Tier1ShortNamePhotoPhotosGet(shortName, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling v2Tier1ShortNamePhotoPhotosGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling v2Tier1ShortNamePhotoPhotosGet");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling v2Tier1ShortNamePhotoPhotosGet");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = PhotoModelResults;
      return this.apiClient.callApi(
        '/v2/tier1/{shortName}/photo/photos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Tier1ShortNamePhotoPhotosPhotoIDGet operation.
     * @callback module:api/PhotoControllerApi~v2Tier1ShortNamePhotoPhotosPhotoIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhotoModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific photo given its unique Object ID (OID)
     * @param {String} shortName The unique client short-name
     * @param {String} photoID The unique ID of the Photo
     * @param {module:api/PhotoControllerApi~v2Tier1ShortNamePhotoPhotosPhotoIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhotoModel}
     */
    v2Tier1ShortNamePhotoPhotosPhotoIDGet(shortName, photoID, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling v2Tier1ShortNamePhotoPhotosPhotoIDGet");
      }
      // verify the required parameter 'photoID' is set
      if (photoID === undefined || photoID === null) {
        throw new Error("Missing the required parameter 'photoID' when calling v2Tier1ShortNamePhotoPhotosPhotoIDGet");
      }

      let pathParams = {
        'shortName': shortName,
        'photoID': photoID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = PhotoModel;
      return this.apiClient.callApi(
        '/v2/tier1/{shortName}/photo/photos/{photoID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
