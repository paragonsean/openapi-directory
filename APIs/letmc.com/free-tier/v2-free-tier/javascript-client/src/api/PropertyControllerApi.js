/**
 * LetMC Api V2, Free (Tier 1)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-free-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PhotoModelResults from '../model/PhotoModelResults';
import PropertyFacilityModelResults from '../model/PropertyFacilityModelResults';
import PropertyModel from '../model/PropertyModel';
import PropertyModelResults from '../model/PropertyModelResults';
import PropertyRoomModelResults from '../model/PropertyRoomModelResults';
import TenancyModelResults from '../model/TenancyModelResults';

/**
* PropertyController service.
* @module api/PropertyControllerApi
* @version v2-free-tier
*/
export default class PropertyControllerApi {

    /**
    * Constructs a new PropertyControllerApi. 
    * @alias module:api/PropertyControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the propertyControllerGetPropertiesFacilities operation.
     * @callback module:api/PropertyControllerApi~propertyControllerGetPropertiesFacilitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyFacilityModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A collection of facilities linked to a block, property or room
     * @param {String} shortName The unique client short-name
     * @param {String} propertyID The unique ID of the Property
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {module:api/PropertyControllerApi~propertyControllerGetPropertiesFacilitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyFacilityModelResults}
     */
    propertyControllerGetPropertiesFacilities(shortName, propertyID, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling propertyControllerGetPropertiesFacilities");
      }
      // verify the required parameter 'propertyID' is set
      if (propertyID === undefined || propertyID === null) {
        throw new Error("Missing the required parameter 'propertyID' when calling propertyControllerGetPropertiesFacilities");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling propertyControllerGetPropertiesFacilities");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling propertyControllerGetPropertiesFacilities");
      }

      let pathParams = {
        'shortName': shortName,
        'propertyID': propertyID
      };
      let queryParams = {
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = PropertyFacilityModelResults;
      return this.apiClient.callApi(
        '/v2/tier1/{shortName}/property/properties/{propertyID}/facilities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the propertyControllerGetPropertiesPhotos operation.
     * @callback module:api/PropertyControllerApi~propertyControllerGetPropertiesPhotosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhotoModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A collection showing all the photos linked to a specific block, property or room
     * @param {String} shortName The unique client short-name
     * @param {String} propertyID The unique ID of the Property
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {module:api/PropertyControllerApi~propertyControllerGetPropertiesPhotosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhotoModelResults}
     */
    propertyControllerGetPropertiesPhotos(shortName, propertyID, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling propertyControllerGetPropertiesPhotos");
      }
      // verify the required parameter 'propertyID' is set
      if (propertyID === undefined || propertyID === null) {
        throw new Error("Missing the required parameter 'propertyID' when calling propertyControllerGetPropertiesPhotos");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling propertyControllerGetPropertiesPhotos");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling propertyControllerGetPropertiesPhotos");
      }

      let pathParams = {
        'shortName': shortName,
        'propertyID': propertyID
      };
      let queryParams = {
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = PhotoModelResults;
      return this.apiClient.callApi(
        '/v2/tier1/{shortName}/property/properties/{propertyID}/photos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the propertyControllerGetPropertiesRooms operation.
     * @callback module:api/PropertyControllerApi~propertyControllerGetPropertiesRoomsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyRoomModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A collection of the rooms that belong to this property or block
     * @param {String} shortName The unique client short-name
     * @param {String} propertyID The unique ID of the Property
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {module:api/PropertyControllerApi~propertyControllerGetPropertiesRoomsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyRoomModelResults}
     */
    propertyControllerGetPropertiesRooms(shortName, propertyID, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling propertyControllerGetPropertiesRooms");
      }
      // verify the required parameter 'propertyID' is set
      if (propertyID === undefined || propertyID === null) {
        throw new Error("Missing the required parameter 'propertyID' when calling propertyControllerGetPropertiesRooms");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling propertyControllerGetPropertiesRooms");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling propertyControllerGetPropertiesRooms");
      }

      let pathParams = {
        'shortName': shortName,
        'propertyID': propertyID
      };
      let queryParams = {
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = PropertyRoomModelResults;
      return this.apiClient.callApi(
        '/v2/tier1/{shortName}/property/properties/{propertyID}/rooms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the propertyControllerGetPropertiesTenancies operation.
     * @callback module:api/PropertyControllerApi~propertyControllerGetPropertiesTenanciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenancyModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A collection of all tenancies associated with this block, property or room
     * @param {String} shortName The unique client short-name
     * @param {String} propertyID The unique ID of the Property
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {module:api/PropertyControllerApi~propertyControllerGetPropertiesTenanciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenancyModelResults}
     */
    propertyControllerGetPropertiesTenancies(shortName, propertyID, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling propertyControllerGetPropertiesTenancies");
      }
      // verify the required parameter 'propertyID' is set
      if (propertyID === undefined || propertyID === null) {
        throw new Error("Missing the required parameter 'propertyID' when calling propertyControllerGetPropertiesTenancies");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling propertyControllerGetPropertiesTenancies");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling propertyControllerGetPropertiesTenancies");
      }

      let pathParams = {
        'shortName': shortName,
        'propertyID': propertyID
      };
      let queryParams = {
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = TenancyModelResults;
      return this.apiClient.callApi(
        '/v2/tier1/{shortName}/property/properties/{propertyID}/tenancies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the propertyControllerGetPropertyEERDownload operation.
     * @callback module:api/PropertyControllerApi~propertyControllerGetPropertyEERDownloadCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads the energy efficiency report (EER) graph for a property
     * @param {String} shortName The unique client short-name
     * @param {String} propertyStructureID The unique ID of the property structure
     * @param {module:api/PropertyControllerApi~propertyControllerGetPropertyEERDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    propertyControllerGetPropertyEERDownload(shortName, propertyStructureID, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling propertyControllerGetPropertyEERDownload");
      }
      // verify the required parameter 'propertyStructureID' is set
      if (propertyStructureID === undefined || propertyStructureID === null) {
        throw new Error("Missing the required parameter 'propertyStructureID' when calling propertyControllerGetPropertyEERDownload");
      }

      let pathParams = {
        'shortName': shortName,
        'propertyStructureID': propertyStructureID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/tier1/{shortName}/property/structures/{propertyStructureID}/reports/eer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the propertyControllerGetPropertyEIRDownload operation.
     * @callback module:api/PropertyControllerApi~propertyControllerGetPropertyEIRDownloadCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads the environmental impact report (EIR) graph for a property
     * @param {String} shortName The unique client short-name
     * @param {String} propertyStructureID The unique ID of the property structure
     * @param {module:api/PropertyControllerApi~propertyControllerGetPropertyEIRDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    propertyControllerGetPropertyEIRDownload(shortName, propertyStructureID, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling propertyControllerGetPropertyEIRDownload");
      }
      // verify the required parameter 'propertyStructureID' is set
      if (propertyStructureID === undefined || propertyStructureID === null) {
        throw new Error("Missing the required parameter 'propertyStructureID' when calling propertyControllerGetPropertyEIRDownload");
      }

      let pathParams = {
        'shortName': shortName,
        'propertyStructureID': propertyStructureID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/tier1/{shortName}/property/structures/{propertyStructureID}/reports/eir', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Tier1ShortNamePropertyPropertiesGet operation.
     * @callback module:api/PropertyControllerApi~v2Tier1ShortNamePropertyPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A collection of all properties within a company
     * @param {String} shortName The unique client short-name
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {module:api/PropertyControllerApi~v2Tier1ShortNamePropertyPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyModelResults}
     */
    v2Tier1ShortNamePropertyPropertiesGet(shortName, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling v2Tier1ShortNamePropertyPropertiesGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling v2Tier1ShortNamePropertyPropertiesGet");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling v2Tier1ShortNamePropertyPropertiesGet");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = PropertyModelResults;
      return this.apiClient.callApi(
        '/v2/tier1/{shortName}/property/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Tier1ShortNamePropertyPropertiesPropertyIDGet operation.
     * @callback module:api/PropertyControllerApi~v2Tier1ShortNamePropertyPropertiesPropertyIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific property given its unique Object ID (OID)
     * @param {String} shortName The unique client short-name
     * @param {String} propertyID The unique ID of the Property
     * @param {module:api/PropertyControllerApi~v2Tier1ShortNamePropertyPropertiesPropertyIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyModel}
     */
    v2Tier1ShortNamePropertyPropertiesPropertyIDGet(shortName, propertyID, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling v2Tier1ShortNamePropertyPropertiesPropertyIDGet");
      }
      // verify the required parameter 'propertyID' is set
      if (propertyID === undefined || propertyID === null) {
        throw new Error("Missing the required parameter 'propertyID' when calling v2Tier1ShortNamePropertyPropertiesPropertyIDGet");
      }

      let pathParams = {
        'shortName': shortName,
        'propertyID': propertyID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = PropertyModel;
      return this.apiClient.callApi(
        '/v2/tier1/{shortName}/property/properties/{propertyID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
