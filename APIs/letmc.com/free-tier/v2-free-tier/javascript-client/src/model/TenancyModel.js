/**
 * LetMC Api V2, Free (Tier 1)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-free-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TenancyModel model module.
 * @module model/TenancyModel
 * @version v2-free-tier
 */
class TenancyModel {
    /**
     * Constructs a new <code>TenancyModel</code>.
     * Represents a single tenancy on a property structure. This class may              be considered to be the context of the tenancy strategy pattern. The              strategy is the tenancy service, that dictates the algorithm applied              to the tenancy. This class therefore holds the raw data of a tenancy,              and ignores any tenancy service (fully managed, let only) parameters.
     * @alias module:model/TenancyModel
     */
    constructor() { 
        
        TenancyModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TenancyModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TenancyModel} obj Optional instance to populate.
     * @return {module:model/TenancyModel} The populated <code>TenancyModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TenancyModel();

            if (data.hasOwnProperty('AdvertiseFrom')) {
                obj['AdvertiseFrom'] = ApiClient.convertToType(data['AdvertiseFrom'], 'Date');
            }
            if (data.hasOwnProperty('Area')) {
                obj['Area'] = ApiClient.convertToType(data['Area'], 'String');
            }
            if (data.hasOwnProperty('BondRequired')) {
                obj['BondRequired'] = ApiClient.convertToType(data['BondRequired'], 'Number');
            }
            if (data.hasOwnProperty('Branch')) {
                obj['Branch'] = ApiClient.convertToType(data['Branch'], 'String');
            }
            if (data.hasOwnProperty('ETag')) {
                obj['ETag'] = ApiClient.convertToType(data['ETag'], 'String');
            }
            if (data.hasOwnProperty('Furnished')) {
                obj['Furnished'] = ApiClient.convertToType(data['Furnished'], 'String');
            }
            if (data.hasOwnProperty('GlobalReference')) {
                obj['GlobalReference'] = ApiClient.convertToType(data['GlobalReference'], 'String');
            }
            if (data.hasOwnProperty('IsShareProperty')) {
                obj['IsShareProperty'] = ApiClient.convertToType(data['IsShareProperty'], 'Boolean');
            }
            if (data.hasOwnProperty('IsStudentProperty')) {
                obj['IsStudentProperty'] = ApiClient.convertToType(data['IsStudentProperty'], 'Boolean');
            }
            if (data.hasOwnProperty('IsTenancyAdvertised')) {
                obj['IsTenancyAdvertised'] = ApiClient.convertToType(data['IsTenancyAdvertised'], 'Boolean');
            }
            if (data.hasOwnProperty('IsTenancyProposed')) {
                obj['IsTenancyProposed'] = ApiClient.convertToType(data['IsTenancyProposed'], 'Boolean');
            }
            if (data.hasOwnProperty('MaximumTenants')) {
                obj['MaximumTenants'] = ApiClient.convertToType(data['MaximumTenants'], 'Number');
            }
            if (data.hasOwnProperty('MinimumTenants')) {
                obj['MinimumTenants'] = ApiClient.convertToType(data['MinimumTenants'], 'Number');
            }
            if (data.hasOwnProperty('OID')) {
                obj['OID'] = ApiClient.convertToType(data['OID'], 'String');
            }
            if (data.hasOwnProperty('RentAdvertised')) {
                obj['RentAdvertised'] = ApiClient.convertToType(data['RentAdvertised'], 'Number');
            }
            if (data.hasOwnProperty('RentRecurrence')) {
                obj['RentRecurrence'] = ApiClient.convertToType(data['RentRecurrence'], 'Number');
            }
            if (data.hasOwnProperty('RentSchedule')) {
                obj['RentSchedule'] = ApiClient.convertToType(data['RentSchedule'], 'String');
            }
            if (data.hasOwnProperty('TenancyProperty')) {
                obj['TenancyProperty'] = ApiClient.convertToType(data['TenancyProperty'], 'String');
            }
            if (data.hasOwnProperty('TenantSystemTypes')) {
                obj['TenantSystemTypes'] = ApiClient.convertToType(data['TenantSystemTypes'], ['String']);
            }
            if (data.hasOwnProperty('TermMaximum')) {
                obj['TermMaximum'] = ApiClient.convertToType(data['TermMaximum'], 'Number');
            }
            if (data.hasOwnProperty('TermMinimum')) {
                obj['TermMinimum'] = ApiClient.convertToType(data['TermMinimum'], 'Number');
            }
            if (data.hasOwnProperty('TermStart')) {
                obj['TermStart'] = ApiClient.convertToType(data['TermStart'], 'Date');
            }
            if (data.hasOwnProperty('UtilityCouncilTax')) {
                obj['UtilityCouncilTax'] = ApiClient.convertToType(data['UtilityCouncilTax'], 'String');
            }
            if (data.hasOwnProperty('UtilityElectricity')) {
                obj['UtilityElectricity'] = ApiClient.convertToType(data['UtilityElectricity'], 'String');
            }
            if (data.hasOwnProperty('UtilityGas')) {
                obj['UtilityGas'] = ApiClient.convertToType(data['UtilityGas'], 'String');
            }
            if (data.hasOwnProperty('UtilityTelephone')) {
                obj['UtilityTelephone'] = ApiClient.convertToType(data['UtilityTelephone'], 'String');
            }
            if (data.hasOwnProperty('UtilityWater')) {
                obj['UtilityWater'] = ApiClient.convertToType(data['UtilityWater'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TenancyModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TenancyModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Area'] && !(typeof data['Area'] === 'string' || data['Area'] instanceof String)) {
            throw new Error("Expected the field `Area` to be a primitive type in the JSON string but got " + data['Area']);
        }
        // ensure the json data is a string
        if (data['Branch'] && !(typeof data['Branch'] === 'string' || data['Branch'] instanceof String)) {
            throw new Error("Expected the field `Branch` to be a primitive type in the JSON string but got " + data['Branch']);
        }
        // ensure the json data is a string
        if (data['ETag'] && !(typeof data['ETag'] === 'string' || data['ETag'] instanceof String)) {
            throw new Error("Expected the field `ETag` to be a primitive type in the JSON string but got " + data['ETag']);
        }
        // ensure the json data is a string
        if (data['Furnished'] && !(typeof data['Furnished'] === 'string' || data['Furnished'] instanceof String)) {
            throw new Error("Expected the field `Furnished` to be a primitive type in the JSON string but got " + data['Furnished']);
        }
        // ensure the json data is a string
        if (data['GlobalReference'] && !(typeof data['GlobalReference'] === 'string' || data['GlobalReference'] instanceof String)) {
            throw new Error("Expected the field `GlobalReference` to be a primitive type in the JSON string but got " + data['GlobalReference']);
        }
        // ensure the json data is a string
        if (data['OID'] && !(typeof data['OID'] === 'string' || data['OID'] instanceof String)) {
            throw new Error("Expected the field `OID` to be a primitive type in the JSON string but got " + data['OID']);
        }
        // ensure the json data is a string
        if (data['RentSchedule'] && !(typeof data['RentSchedule'] === 'string' || data['RentSchedule'] instanceof String)) {
            throw new Error("Expected the field `RentSchedule` to be a primitive type in the JSON string but got " + data['RentSchedule']);
        }
        // ensure the json data is a string
        if (data['TenancyProperty'] && !(typeof data['TenancyProperty'] === 'string' || data['TenancyProperty'] instanceof String)) {
            throw new Error("Expected the field `TenancyProperty` to be a primitive type in the JSON string but got " + data['TenancyProperty']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['TenantSystemTypes'])) {
            throw new Error("Expected the field `TenantSystemTypes` to be an array in the JSON data but got " + data['TenantSystemTypes']);
        }
        // ensure the json data is a string
        if (data['UtilityCouncilTax'] && !(typeof data['UtilityCouncilTax'] === 'string' || data['UtilityCouncilTax'] instanceof String)) {
            throw new Error("Expected the field `UtilityCouncilTax` to be a primitive type in the JSON string but got " + data['UtilityCouncilTax']);
        }
        // ensure the json data is a string
        if (data['UtilityElectricity'] && !(typeof data['UtilityElectricity'] === 'string' || data['UtilityElectricity'] instanceof String)) {
            throw new Error("Expected the field `UtilityElectricity` to be a primitive type in the JSON string but got " + data['UtilityElectricity']);
        }
        // ensure the json data is a string
        if (data['UtilityGas'] && !(typeof data['UtilityGas'] === 'string' || data['UtilityGas'] instanceof String)) {
            throw new Error("Expected the field `UtilityGas` to be a primitive type in the JSON string but got " + data['UtilityGas']);
        }
        // ensure the json data is a string
        if (data['UtilityTelephone'] && !(typeof data['UtilityTelephone'] === 'string' || data['UtilityTelephone'] instanceof String)) {
            throw new Error("Expected the field `UtilityTelephone` to be a primitive type in the JSON string but got " + data['UtilityTelephone']);
        }
        // ensure the json data is a string
        if (data['UtilityWater'] && !(typeof data['UtilityWater'] === 'string' || data['UtilityWater'] instanceof String)) {
            throw new Error("Expected the field `UtilityWater` to be a primitive type in the JSON string but got " + data['UtilityWater']);
        }

        return true;
    }


}



/**
 * The date to advertise this tenancy from.
 * @member {Date} AdvertiseFrom
 */
TenancyModel.prototype['AdvertiseFrom'] = undefined;

/**
 * The area containing the instruction.
 * @member {String} Area
 */
TenancyModel.prototype['Area'] = undefined;

/**
 * The total bond required.
 * @member {Number} BondRequired
 */
TenancyModel.prototype['BondRequired'] = undefined;

/**
 * The branch the tenancy is assigned to..
 * @member {String} Branch
 */
TenancyModel.prototype['Branch'] = undefined;

/**
 * A unique identifier defining the object and change revision.
 * @member {String} ETag
 */
TenancyModel.prototype['ETag'] = undefined;

/**
 * The property furnished type.
 * @member {module:model/TenancyModel.FurnishedEnum} Furnished
 */
TenancyModel.prototype['Furnished'] = undefined;

/**
 * The global reference for a tenancy.
 * @member {String} GlobalReference
 */
TenancyModel.prototype['GlobalReference'] = undefined;

/**
 * Is this property a shared property.
 * @member {Boolean} IsShareProperty
 */
TenancyModel.prototype['IsShareProperty'] = undefined;

/**
 * Is this property a student property.
 * @member {Boolean} IsStudentProperty
 */
TenancyModel.prototype['IsStudentProperty'] = undefined;

/**
 * Gets a value indicating whether this tenancy is being advertised. Note              that this will only return true while the tenancy has a valid advertise              date. It will not return true in the proposed phase.
 * @member {Boolean} IsTenancyAdvertised
 */
TenancyModel.prototype['IsTenancyAdvertised'] = undefined;

/**
 * Is the tenancy a proposed tenancy?
 * @member {Boolean} IsTenancyProposed
 */
TenancyModel.prototype['IsTenancyProposed'] = undefined;

/**
 * The maximum number of tenants to advertise for.
 * @member {Number} MaximumTenants
 */
TenancyModel.prototype['MaximumTenants'] = undefined;

/**
 * The minimum number of tenants to advertise for.
 * @member {Number} MinimumTenants
 */
TenancyModel.prototype['MinimumTenants'] = undefined;

/**
 * The unique Object ID (OID).
 * @member {String} OID
 */
TenancyModel.prototype['OID'] = undefined;

/**
 * The advertised amount of rent for the property.
 * @member {Number} RentAdvertised
 */
TenancyModel.prototype['RentAdvertised'] = undefined;

/**
 * The rent schedule recurrence
 * @member {Number} RentRecurrence
 */
TenancyModel.prototype['RentRecurrence'] = undefined;

/**
 * The tenancy rent schedule
 * @member {module:model/TenancyModel.RentScheduleEnum} RentSchedule
 */
TenancyModel.prototype['RentSchedule'] = undefined;

/**
 * The property linked to this tenancy.
 * @member {String} TenancyProperty
 */
TenancyModel.prototype['TenancyProperty'] = undefined;

/**
 * The specific tenant type list, or empty if for all types.
 * @member {Array.<module:model/TenancyModel.TenantSystemTypesEnum>} TenantSystemTypes
 */
TenancyModel.prototype['TenantSystemTypes'] = undefined;

/**
 * The instruction maximum term.
 * @member {Number} TermMaximum
 */
TenancyModel.prototype['TermMaximum'] = undefined;

/**
 * The minimum term.
 * @member {Number} TermMinimum
 */
TenancyModel.prototype['TermMinimum'] = undefined;

/**
 * The instruction start date.
 * @member {Date} TermStart
 */
TenancyModel.prototype['TermStart'] = undefined;

/**
 * Who's responsible for council tax bills.
 * @member {module:model/TenancyModel.UtilityCouncilTaxEnum} UtilityCouncilTax
 */
TenancyModel.prototype['UtilityCouncilTax'] = undefined;

/**
 * Who's responsible for electricity bills.
 * @member {module:model/TenancyModel.UtilityElectricityEnum} UtilityElectricity
 */
TenancyModel.prototype['UtilityElectricity'] = undefined;

/**
 * Who's responsible for Gas bills.
 * @member {module:model/TenancyModel.UtilityGasEnum} UtilityGas
 */
TenancyModel.prototype['UtilityGas'] = undefined;

/**
 * Who's responsible for telephone bills.
 * @member {module:model/TenancyModel.UtilityTelephoneEnum} UtilityTelephone
 */
TenancyModel.prototype['UtilityTelephone'] = undefined;

/**
 * Who's responsible for water bills.
 * @member {module:model/TenancyModel.UtilityWaterEnum} UtilityWater
 */
TenancyModel.prototype['UtilityWater'] = undefined;





/**
 * Allowed values for the <code>Furnished</code> property.
 * @enum {String}
 * @readonly
 */
TenancyModel['FurnishedEnum'] = {

    /**
     * value: "Unfurnished"
     * @const
     */
    "Unfurnished": "Unfurnished",

    /**
     * value: "PartFurnished"
     * @const
     */
    "PartFurnished": "PartFurnished",

    /**
     * value: "Furnished"
     * @const
     */
    "Furnished": "Furnished"
};


/**
 * Allowed values for the <code>RentSchedule</code> property.
 * @enum {String}
 * @readonly
 */
TenancyModel['RentScheduleEnum'] = {

    /**
     * value: "Once"
     * @const
     */
    "Once": "Once",

    /**
     * value: "Daily"
     * @const
     */
    "Daily": "Daily",

    /**
     * value: "Weekly"
     * @const
     */
    "Weekly": "Weekly",

    /**
     * value: "Monthly"
     * @const
     */
    "Monthly": "Monthly",

    /**
     * value: "Yearly"
     * @const
     */
    "Yearly": "Yearly"
};


/**
 * Allowed values for the <code>tenantSystemTypes</code> property.
 * @enum {String}
 * @readonly
 */
TenancyModel['TenantSystemTypesEnum'] = {

    /**
     * value: "Employed"
     * @const
     */
    "Employed": "Employed",

    /**
     * value: "SelfEmployed"
     * @const
     */
    "SelfEmployed": "SelfEmployed",

    /**
     * value: "Unemployed"
     * @const
     */
    "Unemployed": "Unemployed",

    /**
     * value: "Student"
     * @const
     */
    "Student": "Student",

    /**
     * value: "OwnMeans"
     * @const
     */
    "OwnMeans": "OwnMeans",

    /**
     * value: "Retired"
     * @const
     */
    "Retired": "Retired",

    /**
     * value: "Company"
     * @const
     */
    "Company": "Company",

    /**
     * value: "Council"
     * @const
     */
    "Council": "Council"
};


/**
 * Allowed values for the <code>UtilityCouncilTax</code> property.
 * @enum {String}
 * @readonly
 */
TenancyModel['UtilityCouncilTaxEnum'] = {

    /**
     * value: "Tenant"
     * @const
     */
    "Tenant": "Tenant",

    /**
     * value: "Landlord"
     * @const
     */
    "Landlord": "Landlord"
};


/**
 * Allowed values for the <code>UtilityElectricity</code> property.
 * @enum {String}
 * @readonly
 */
TenancyModel['UtilityElectricityEnum'] = {

    /**
     * value: "Tenant"
     * @const
     */
    "Tenant": "Tenant",

    /**
     * value: "Landlord"
     * @const
     */
    "Landlord": "Landlord"
};


/**
 * Allowed values for the <code>UtilityGas</code> property.
 * @enum {String}
 * @readonly
 */
TenancyModel['UtilityGasEnum'] = {

    /**
     * value: "Tenant"
     * @const
     */
    "Tenant": "Tenant",

    /**
     * value: "Landlord"
     * @const
     */
    "Landlord": "Landlord"
};


/**
 * Allowed values for the <code>UtilityTelephone</code> property.
 * @enum {String}
 * @readonly
 */
TenancyModel['UtilityTelephoneEnum'] = {

    /**
     * value: "Tenant"
     * @const
     */
    "Tenant": "Tenant",

    /**
     * value: "Landlord"
     * @const
     */
    "Landlord": "Landlord"
};


/**
 * Allowed values for the <code>UtilityWater</code> property.
 * @enum {String}
 * @readonly
 */
TenancyModel['UtilityWaterEnum'] = {

    /**
     * value: "Tenant"
     * @const
     */
    "Tenant": "Tenant",

    /**
     * value: "Landlord"
     * @const
     */
    "Landlord": "Landlord"
};



export default TenancyModel;

