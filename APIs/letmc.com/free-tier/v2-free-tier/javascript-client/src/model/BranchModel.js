/**
 * LetMC Api V2, Free (Tier 1)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-free-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BranchModel model module.
 * @module model/BranchModel
 * @version v2-free-tier
 */
class BranchModel {
    /**
     * Constructs a new <code>BranchModel</code>.
     * Defines a single branch of a client.
     * @alias module:model/BranchModel
     */
    constructor() { 
        
        BranchModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BranchModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BranchModel} obj Optional instance to populate.
     * @return {module:model/BranchModel} The populated <code>BranchModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BranchModel();

            if (data.hasOwnProperty('Address1')) {
                obj['Address1'] = ApiClient.convertToType(data['Address1'], 'String');
            }
            if (data.hasOwnProperty('Address2')) {
                obj['Address2'] = ApiClient.convertToType(data['Address2'], 'String');
            }
            if (data.hasOwnProperty('Address3')) {
                obj['Address3'] = ApiClient.convertToType(data['Address3'], 'String');
            }
            if (data.hasOwnProperty('Address4')) {
                obj['Address4'] = ApiClient.convertToType(data['Address4'], 'String');
            }
            if (data.hasOwnProperty('CompanyName')) {
                obj['CompanyName'] = ApiClient.convertToType(data['CompanyName'], 'String');
            }
            if (data.hasOwnProperty('County')) {
                obj['County'] = ApiClient.convertToType(data['County'], 'String');
            }
            if (data.hasOwnProperty('EMailAddress')) {
                obj['EMailAddress'] = ApiClient.convertToType(data['EMailAddress'], 'String');
            }
            if (data.hasOwnProperty('ETag')) {
                obj['ETag'] = ApiClient.convertToType(data['ETag'], 'String');
            }
            if (data.hasOwnProperty('FaxPhone')) {
                obj['FaxPhone'] = ApiClient.convertToType(data['FaxPhone'], 'String');
            }
            if (data.hasOwnProperty('LandPhone')) {
                obj['LandPhone'] = ApiClient.convertToType(data['LandPhone'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('OID')) {
                obj['OID'] = ApiClient.convertToType(data['OID'], 'String');
            }
            if (data.hasOwnProperty('Postcode')) {
                obj['Postcode'] = ApiClient.convertToType(data['Postcode'], 'String');
            }
            if (data.hasOwnProperty('WebAddress')) {
                obj['WebAddress'] = ApiClient.convertToType(data['WebAddress'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BranchModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BranchModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Address1'] && !(typeof data['Address1'] === 'string' || data['Address1'] instanceof String)) {
            throw new Error("Expected the field `Address1` to be a primitive type in the JSON string but got " + data['Address1']);
        }
        // ensure the json data is a string
        if (data['Address2'] && !(typeof data['Address2'] === 'string' || data['Address2'] instanceof String)) {
            throw new Error("Expected the field `Address2` to be a primitive type in the JSON string but got " + data['Address2']);
        }
        // ensure the json data is a string
        if (data['Address3'] && !(typeof data['Address3'] === 'string' || data['Address3'] instanceof String)) {
            throw new Error("Expected the field `Address3` to be a primitive type in the JSON string but got " + data['Address3']);
        }
        // ensure the json data is a string
        if (data['Address4'] && !(typeof data['Address4'] === 'string' || data['Address4'] instanceof String)) {
            throw new Error("Expected the field `Address4` to be a primitive type in the JSON string but got " + data['Address4']);
        }
        // ensure the json data is a string
        if (data['CompanyName'] && !(typeof data['CompanyName'] === 'string' || data['CompanyName'] instanceof String)) {
            throw new Error("Expected the field `CompanyName` to be a primitive type in the JSON string but got " + data['CompanyName']);
        }
        // ensure the json data is a string
        if (data['County'] && !(typeof data['County'] === 'string' || data['County'] instanceof String)) {
            throw new Error("Expected the field `County` to be a primitive type in the JSON string but got " + data['County']);
        }
        // ensure the json data is a string
        if (data['EMailAddress'] && !(typeof data['EMailAddress'] === 'string' || data['EMailAddress'] instanceof String)) {
            throw new Error("Expected the field `EMailAddress` to be a primitive type in the JSON string but got " + data['EMailAddress']);
        }
        // ensure the json data is a string
        if (data['ETag'] && !(typeof data['ETag'] === 'string' || data['ETag'] instanceof String)) {
            throw new Error("Expected the field `ETag` to be a primitive type in the JSON string but got " + data['ETag']);
        }
        // ensure the json data is a string
        if (data['FaxPhone'] && !(typeof data['FaxPhone'] === 'string' || data['FaxPhone'] instanceof String)) {
            throw new Error("Expected the field `FaxPhone` to be a primitive type in the JSON string but got " + data['FaxPhone']);
        }
        // ensure the json data is a string
        if (data['LandPhone'] && !(typeof data['LandPhone'] === 'string' || data['LandPhone'] instanceof String)) {
            throw new Error("Expected the field `LandPhone` to be a primitive type in the JSON string but got " + data['LandPhone']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['OID'] && !(typeof data['OID'] === 'string' || data['OID'] instanceof String)) {
            throw new Error("Expected the field `OID` to be a primitive type in the JSON string but got " + data['OID']);
        }
        // ensure the json data is a string
        if (data['Postcode'] && !(typeof data['Postcode'] === 'string' || data['Postcode'] instanceof String)) {
            throw new Error("Expected the field `Postcode` to be a primitive type in the JSON string but got " + data['Postcode']);
        }
        // ensure the json data is a string
        if (data['WebAddress'] && !(typeof data['WebAddress'] === 'string' || data['WebAddress'] instanceof String)) {
            throw new Error("Expected the field `WebAddress` to be a primitive type in the JSON string but got " + data['WebAddress']);
        }

        return true;
    }


}



/**
 * Branch address line 1.
 * @member {String} Address1
 */
BranchModel.prototype['Address1'] = undefined;

/**
 * Branch address line 2.
 * @member {String} Address2
 */
BranchModel.prototype['Address2'] = undefined;

/**
 * Branch address line 3.
 * @member {String} Address3
 */
BranchModel.prototype['Address3'] = undefined;

/**
 * Branch address line 4.
 * @member {String} Address4
 */
BranchModel.prototype['Address4'] = undefined;

/**
 * The relevant company name, if not the one specified on the branch then the one on company.
 * @member {String} CompanyName
 */
BranchModel.prototype['CompanyName'] = undefined;

/**
 * County
 * @member {String} County
 */
BranchModel.prototype['County'] = undefined;

/**
 * Branch email address.
 * @member {String} EMailAddress
 */
BranchModel.prototype['EMailAddress'] = undefined;

/**
 * A unique identifier defining the object and change revision.
 * @member {String} ETag
 */
BranchModel.prototype['ETag'] = undefined;

/**
 * Branch fax phone number.
 * @member {String} FaxPhone
 */
BranchModel.prototype['FaxPhone'] = undefined;

/**
 * Branch land phone number.
 * @member {String} LandPhone
 */
BranchModel.prototype['LandPhone'] = undefined;

/**
 * The branch name.
 * @member {String} Name
 */
BranchModel.prototype['Name'] = undefined;

/**
 * The unique Object ID (OID).
 * @member {String} OID
 */
BranchModel.prototype['OID'] = undefined;

/**
 * Branch address postcode.
 * @member {String} Postcode
 */
BranchModel.prototype['Postcode'] = undefined;

/**
 * Branch web address.
 * @member {String} WebAddress
 */
BranchModel.prototype['WebAddress'] = undefined;






export default BranchModel;

