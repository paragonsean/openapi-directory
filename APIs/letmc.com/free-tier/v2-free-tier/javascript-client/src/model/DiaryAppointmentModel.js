/**
 * LetMC Api V2, Free (Tier 1)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-free-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DiaryAppointmentModel model module.
 * @module model/DiaryAppointmentModel
 * @version v2-free-tier
 */
class DiaryAppointmentModel {
    /**
     * Constructs a new <code>DiaryAppointmentModel</code>.
     * Represents a single diary appointment for a staff member.
     * @alias module:model/DiaryAppointmentModel
     */
    constructor() { 
        
        DiaryAppointmentModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiaryAppointmentModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiaryAppointmentModel} obj Optional instance to populate.
     * @return {module:model/DiaryAppointmentModel} The populated <code>DiaryAppointmentModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiaryAppointmentModel();

            if (data.hasOwnProperty('AppointmentType')) {
                obj['AppointmentType'] = ApiClient.convertToType(data['AppointmentType'], 'String');
            }
            if (data.hasOwnProperty('Cancelled')) {
                obj['Cancelled'] = ApiClient.convertToType(data['Cancelled'], 'Boolean');
            }
            if (data.hasOwnProperty('Comment')) {
                obj['Comment'] = ApiClient.convertToType(data['Comment'], 'String');
            }
            if (data.hasOwnProperty('CreatedAt')) {
                obj['CreatedAt'] = ApiClient.convertToType(data['CreatedAt'], 'Date');
            }
            if (data.hasOwnProperty('CreatedBy')) {
                obj['CreatedBy'] = ApiClient.convertToType(data['CreatedBy'], 'String');
            }
            if (data.hasOwnProperty('ETag')) {
                obj['ETag'] = ApiClient.convertToType(data['ETag'], 'String');
            }
            if (data.hasOwnProperty('End')) {
                obj['End'] = ApiClient.convertToType(data['End'], 'Date');
            }
            if (data.hasOwnProperty('OID')) {
                obj['OID'] = ApiClient.convertToType(data['OID'], 'String');
            }
            if (data.hasOwnProperty('RemindAt')) {
                obj['RemindAt'] = ApiClient.convertToType(data['RemindAt'], 'Date');
            }
            if (data.hasOwnProperty('RemindBefore')) {
                obj['RemindBefore'] = ApiClient.convertToType(data['RemindBefore'], 'String');
            }
            if (data.hasOwnProperty('Staff')) {
                obj['Staff'] = ApiClient.convertToType(data['Staff'], 'String');
            }
            if (data.hasOwnProperty('Start')) {
                obj['Start'] = ApiClient.convertToType(data['Start'], 'Date');
            }
            if (data.hasOwnProperty('Subject')) {
                obj['Subject'] = ApiClient.convertToType(data['Subject'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiaryAppointmentModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiaryAppointmentModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AppointmentType'] && !(typeof data['AppointmentType'] === 'string' || data['AppointmentType'] instanceof String)) {
            throw new Error("Expected the field `AppointmentType` to be a primitive type in the JSON string but got " + data['AppointmentType']);
        }
        // ensure the json data is a string
        if (data['Comment'] && !(typeof data['Comment'] === 'string' || data['Comment'] instanceof String)) {
            throw new Error("Expected the field `Comment` to be a primitive type in the JSON string but got " + data['Comment']);
        }
        // ensure the json data is a string
        if (data['CreatedBy'] && !(typeof data['CreatedBy'] === 'string' || data['CreatedBy'] instanceof String)) {
            throw new Error("Expected the field `CreatedBy` to be a primitive type in the JSON string but got " + data['CreatedBy']);
        }
        // ensure the json data is a string
        if (data['ETag'] && !(typeof data['ETag'] === 'string' || data['ETag'] instanceof String)) {
            throw new Error("Expected the field `ETag` to be a primitive type in the JSON string but got " + data['ETag']);
        }
        // ensure the json data is a string
        if (data['OID'] && !(typeof data['OID'] === 'string' || data['OID'] instanceof String)) {
            throw new Error("Expected the field `OID` to be a primitive type in the JSON string but got " + data['OID']);
        }
        // ensure the json data is a string
        if (data['RemindBefore'] && !(typeof data['RemindBefore'] === 'string' || data['RemindBefore'] instanceof String)) {
            throw new Error("Expected the field `RemindBefore` to be a primitive type in the JSON string but got " + data['RemindBefore']);
        }
        // ensure the json data is a string
        if (data['Staff'] && !(typeof data['Staff'] === 'string' || data['Staff'] instanceof String)) {
            throw new Error("Expected the field `Staff` to be a primitive type in the JSON string but got " + data['Staff']);
        }
        // ensure the json data is a string
        if (data['Subject'] && !(typeof data['Subject'] === 'string' || data['Subject'] instanceof String)) {
            throw new Error("Expected the field `Subject` to be a primitive type in the JSON string but got " + data['Subject']);
        }

        return true;
    }


}



/**
 * The diary appointment type.
 * @member {String} AppointmentType
 */
DiaryAppointmentModel.prototype['AppointmentType'] = undefined;

/**
 * Whether the appointment has been cancelled.
 * @member {Boolean} Cancelled
 */
DiaryAppointmentModel.prototype['Cancelled'] = undefined;

/**
 * The appointment comments text.
 * @member {String} Comment
 */
DiaryAppointmentModel.prototype['Comment'] = undefined;

/**
 * The date/time this appointment was created.
 * @member {Date} CreatedAt
 */
DiaryAppointmentModel.prototype['CreatedAt'] = undefined;

/**
 * The staff member that created this appointment.
 * @member {String} CreatedBy
 */
DiaryAppointmentModel.prototype['CreatedBy'] = undefined;

/**
 * A unique identifier defining the object and change revision.
 * @member {String} ETag
 */
DiaryAppointmentModel.prototype['ETag'] = undefined;

/**
 * The end date/time of this appointment.
 * @member {Date} End
 */
DiaryAppointmentModel.prototype['End'] = undefined;

/**
 * The unique Object ID (OID).
 * @member {String} OID
 */
DiaryAppointmentModel.prototype['OID'] = undefined;

/**
 * The date/time to remind the staff member of this appointment.
 * @member {Date} RemindAt
 */
DiaryAppointmentModel.prototype['RemindAt'] = undefined;

/**
 * The number of minutes before the appointment start date/time to remind the staff member. -1 means don't remind.
 * @member {module:model/DiaryAppointmentModel.RemindBeforeEnum} RemindBefore
 */
DiaryAppointmentModel.prototype['RemindBefore'] = undefined;

/**
 * The staff member holding this appointment.
 * @member {String} Staff
 */
DiaryAppointmentModel.prototype['Staff'] = undefined;

/**
 * The start date/time of this appointment.
 * @member {Date} Start
 */
DiaryAppointmentModel.prototype['Start'] = undefined;

/**
 * The appointment subject text.
 * @member {String} Subject
 */
DiaryAppointmentModel.prototype['Subject'] = undefined;





/**
 * Allowed values for the <code>RemindBefore</code> property.
 * @enum {String}
 * @readonly
 */
DiaryAppointmentModel['RemindBeforeEnum'] = {

    /**
     * value: "Min"
     * @const
     */
    "Min": "Min",

    /**
     * value: "Min2"
     * @const
     */
    "Min2": "Min2",

    /**
     * value: "Min5"
     * @const
     */
    "Min5": "Min5",

    /**
     * value: "Min10"
     * @const
     */
    "Min10": "Min10",

    /**
     * value: "Min15"
     * @const
     */
    "Min15": "Min15",

    /**
     * value: "Min30"
     * @const
     */
    "Min30": "Min30",

    /**
     * value: "Min45"
     * @const
     */
    "Min45": "Min45",

    /**
     * value: "Hour"
     * @const
     */
    "Hour": "Hour",

    /**
     * value: "Hour2"
     * @const
     */
    "Hour2": "Hour2",

    /**
     * value: "Hour3"
     * @const
     */
    "Hour3": "Hour3",

    /**
     * value: "Hour6"
     * @const
     */
    "Hour6": "Hour6",

    /**
     * value: "Hour12"
     * @const
     */
    "Hour12": "Hour12",

    /**
     * value: "Day"
     * @const
     */
    "Day": "Day",

    /**
     * value: "Day2"
     * @const
     */
    "Day2": "Day2",

    /**
     * value: "Day3"
     * @const
     */
    "Day3": "Day3",

    /**
     * value: "Week"
     * @const
     */
    "Week": "Week",

    /**
     * value: "NoReminder"
     * @const
     */
    "NoReminder": "NoReminder"
};



export default DiaryAppointmentModel;

