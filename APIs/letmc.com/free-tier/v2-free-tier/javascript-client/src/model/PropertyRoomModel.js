/**
 * LetMC Api V2, Free (Tier 1)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-free-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PropertyRoomModel model module.
 * @module model/PropertyRoomModel
 * @version v2-free-tier
 */
class PropertyRoomModel {
    /**
     * Constructs a new <code>PropertyRoomModel</code>.
     * A single room (bedroom) property structure.
     * @alias module:model/PropertyRoomModel
     */
    constructor() { 
        
        PropertyRoomModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PropertyRoomModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PropertyRoomModel} obj Optional instance to populate.
     * @return {module:model/PropertyRoomModel} The populated <code>PropertyRoomModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropertyRoomModel();

            if (data.hasOwnProperty('Area')) {
                obj['Area'] = ApiClient.convertToType(data['Area'], 'String');
            }
            if (data.hasOwnProperty('Branch')) {
                obj['Branch'] = ApiClient.convertToType(data['Branch'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('ETag')) {
                obj['ETag'] = ApiClient.convertToType(data['ETag'], 'String');
            }
            if (data.hasOwnProperty('FullAddress')) {
                obj['FullAddress'] = ApiClient.convertToType(data['FullAddress'], 'String');
            }
            if (data.hasOwnProperty('GlobalReference')) {
                obj['GlobalReference'] = ApiClient.convertToType(data['GlobalReference'], 'String');
            }
            if (data.hasOwnProperty('HeightCentimeters')) {
                obj['HeightCentimeters'] = ApiClient.convertToType(data['HeightCentimeters'], 'Number');
            }
            if (data.hasOwnProperty('HeightMeters')) {
                obj['HeightMeters'] = ApiClient.convertToType(data['HeightMeters'], 'Number');
            }
            if (data.hasOwnProperty('LengthCentimeters')) {
                obj['LengthCentimeters'] = ApiClient.convertToType(data['LengthCentimeters'], 'Number');
            }
            if (data.hasOwnProperty('LengthMeters')) {
                obj['LengthMeters'] = ApiClient.convertToType(data['LengthMeters'], 'Number');
            }
            if (data.hasOwnProperty('MainPhoto')) {
                obj['MainPhoto'] = ApiClient.convertToType(data['MainPhoto'], 'String');
            }
            if (data.hasOwnProperty('ManagedByStaff')) {
                obj['ManagedByStaff'] = ApiClient.convertToType(data['ManagedByStaff'], 'String');
            }
            if (data.hasOwnProperty('OID')) {
                obj['OID'] = ApiClient.convertToType(data['OID'], 'String');
            }
            if (data.hasOwnProperty('PropertySource')) {
                obj['PropertySource'] = ApiClient.convertToType(data['PropertySource'], 'String');
            }
            if (data.hasOwnProperty('RoomFloor')) {
                obj['RoomFloor'] = ApiClient.convertToType(data['RoomFloor'], 'String');
            }
            if (data.hasOwnProperty('RoomName')) {
                obj['RoomName'] = ApiClient.convertToType(data['RoomName'], 'String');
            }
            if (data.hasOwnProperty('WidthCentiMeters')) {
                obj['WidthCentiMeters'] = ApiClient.convertToType(data['WidthCentiMeters'], 'Number');
            }
            if (data.hasOwnProperty('WidthMeters')) {
                obj['WidthMeters'] = ApiClient.convertToType(data['WidthMeters'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PropertyRoomModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PropertyRoomModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Area'] && !(typeof data['Area'] === 'string' || data['Area'] instanceof String)) {
            throw new Error("Expected the field `Area` to be a primitive type in the JSON string but got " + data['Area']);
        }
        // ensure the json data is a string
        if (data['Branch'] && !(typeof data['Branch'] === 'string' || data['Branch'] instanceof String)) {
            throw new Error("Expected the field `Branch` to be a primitive type in the JSON string but got " + data['Branch']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['ETag'] && !(typeof data['ETag'] === 'string' || data['ETag'] instanceof String)) {
            throw new Error("Expected the field `ETag` to be a primitive type in the JSON string but got " + data['ETag']);
        }
        // ensure the json data is a string
        if (data['FullAddress'] && !(typeof data['FullAddress'] === 'string' || data['FullAddress'] instanceof String)) {
            throw new Error("Expected the field `FullAddress` to be a primitive type in the JSON string but got " + data['FullAddress']);
        }
        // ensure the json data is a string
        if (data['GlobalReference'] && !(typeof data['GlobalReference'] === 'string' || data['GlobalReference'] instanceof String)) {
            throw new Error("Expected the field `GlobalReference` to be a primitive type in the JSON string but got " + data['GlobalReference']);
        }
        // ensure the json data is a string
        if (data['MainPhoto'] && !(typeof data['MainPhoto'] === 'string' || data['MainPhoto'] instanceof String)) {
            throw new Error("Expected the field `MainPhoto` to be a primitive type in the JSON string but got " + data['MainPhoto']);
        }
        // ensure the json data is a string
        if (data['ManagedByStaff'] && !(typeof data['ManagedByStaff'] === 'string' || data['ManagedByStaff'] instanceof String)) {
            throw new Error("Expected the field `ManagedByStaff` to be a primitive type in the JSON string but got " + data['ManagedByStaff']);
        }
        // ensure the json data is a string
        if (data['OID'] && !(typeof data['OID'] === 'string' || data['OID'] instanceof String)) {
            throw new Error("Expected the field `OID` to be a primitive type in the JSON string but got " + data['OID']);
        }
        // ensure the json data is a string
        if (data['PropertySource'] && !(typeof data['PropertySource'] === 'string' || data['PropertySource'] instanceof String)) {
            throw new Error("Expected the field `PropertySource` to be a primitive type in the JSON string but got " + data['PropertySource']);
        }
        // ensure the json data is a string
        if (data['RoomFloor'] && !(typeof data['RoomFloor'] === 'string' || data['RoomFloor'] instanceof String)) {
            throw new Error("Expected the field `RoomFloor` to be a primitive type in the JSON string but got " + data['RoomFloor']);
        }
        // ensure the json data is a string
        if (data['RoomName'] && !(typeof data['RoomName'] === 'string' || data['RoomName'] instanceof String)) {
            throw new Error("Expected the field `RoomName` to be a primitive type in the JSON string but got " + data['RoomName']);
        }

        return true;
    }


}



/**
 * The area the property is located in.
 * @member {String} Area
 */
PropertyRoomModel.prototype['Area'] = undefined;

/**
 * The branch the block, property or room is assigned to
 * @member {String} Branch
 */
PropertyRoomModel.prototype['Branch'] = undefined;

/**
 * The block, property or room description.
 * @member {String} Description
 */
PropertyRoomModel.prototype['Description'] = undefined;

/**
 * A unique identifier defining the object and change revision.
 * @member {String} ETag
 */
PropertyRoomModel.prototype['ETag'] = undefined;

/**
 * The full address of a block, property or room, formatted with line breaks such that it may be used on a letter directly.
 * @member {String} FullAddress
 */
PropertyRoomModel.prototype['FullAddress'] = undefined;

/**
 * The global reference to this block, property or room
 * @member {String} GlobalReference
 */
PropertyRoomModel.prototype['GlobalReference'] = undefined;

/**
 * Gets the CentiMeter part of the room Height.
 * @member {Number} HeightCentimeters
 */
PropertyRoomModel.prototype['HeightCentimeters'] = undefined;

/**
 * Gets the Meter part of the room Height.
 * @member {Number} HeightMeters
 */
PropertyRoomModel.prototype['HeightMeters'] = undefined;

/**
 * Gets the CentiMeter part of the room Length.
 * @member {Number} LengthCentimeters
 */
PropertyRoomModel.prototype['LengthCentimeters'] = undefined;

/**
 * Gets the Meter part of the room Length.
 * @member {Number} LengthMeters
 */
PropertyRoomModel.prototype['LengthMeters'] = undefined;

/**
 * Gets the main photo, if there is one.
 * @member {String} MainPhoto
 */
PropertyRoomModel.prototype['MainPhoto'] = undefined;

/**
 * The staff memeber that manages the block, property or room
 * @member {String} ManagedByStaff
 */
PropertyRoomModel.prototype['ManagedByStaff'] = undefined;

/**
 * The unique Object ID (OID).
 * @member {String} OID
 */
PropertyRoomModel.prototype['OID'] = undefined;

/**
 * The block, property or room source type
 * @member {String} PropertySource
 */
PropertyRoomModel.prototype['PropertySource'] = undefined;

/**
 * Gets and sets the room floor.
 * @member {module:model/PropertyRoomModel.RoomFloorEnum} RoomFloor
 */
PropertyRoomModel.prototype['RoomFloor'] = undefined;

/**
 * The room name (if applicable).
 * @member {String} RoomName
 */
PropertyRoomModel.prototype['RoomName'] = undefined;

/**
 * Gets the CentiMeter part of the room width.
 * @member {Number} WidthCentiMeters
 */
PropertyRoomModel.prototype['WidthCentiMeters'] = undefined;

/**
 * Gets the Meter part of the room width.
 * @member {Number} WidthMeters
 */
PropertyRoomModel.prototype['WidthMeters'] = undefined;





/**
 * Allowed values for the <code>RoomFloor</code> property.
 * @enum {String}
 * @readonly
 */
PropertyRoomModel['RoomFloorEnum'] = {

    /**
     * value: "Basement"
     * @const
     */
    "Basement": "Basement",

    /**
     * value: "Ground"
     * @const
     */
    "Ground": "Ground",

    /**
     * value: "First"
     * @const
     */
    "First": "First",

    /**
     * value: "Second"
     * @const
     */
    "Second": "Second",

    /**
     * value: "Third"
     * @const
     */
    "Third": "Third",

    /**
     * value: "Fourth"
     * @const
     */
    "Fourth": "Fourth",

    /**
     * value: "Fifth"
     * @const
     */
    "Fifth": "Fifth",

    /**
     * value: "SixthPlus"
     * @const
     */
    "SixthPlus": "SixthPlus",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown"
};



export default PropertyRoomModel;

