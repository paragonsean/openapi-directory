/**
 * LetMC Api V2, Free (Tier 1)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-free-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CompanyModel model module.
 * @module model/CompanyModel
 * @version v2-free-tier
 */
class CompanyModel {
    /**
     * Constructs a new <code>CompanyModel</code>.
     * The search code for the ApplicationCompany storage object.
     * @alias module:model/CompanyModel
     */
    constructor() { 
        
        CompanyModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompanyModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompanyModel} obj Optional instance to populate.
     * @return {module:model/CompanyModel} The populated <code>CompanyModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompanyModel();

            if (data.hasOwnProperty('CompanyName')) {
                obj['CompanyName'] = ApiClient.convertToType(data['CompanyName'], 'String');
            }
            if (data.hasOwnProperty('CompanyRegistration')) {
                obj['CompanyRegistration'] = ApiClient.convertToType(data['CompanyRegistration'], 'String');
            }
            if (data.hasOwnProperty('ETag')) {
                obj['ETag'] = ApiClient.convertToType(data['ETag'], 'String');
            }
            if (data.hasOwnProperty('MarketingCompanyName')) {
                obj['MarketingCompanyName'] = ApiClient.convertToType(data['MarketingCompanyName'], 'String');
            }
            if (data.hasOwnProperty('OID')) {
                obj['OID'] = ApiClient.convertToType(data['OID'], 'String');
            }
            if (data.hasOwnProperty('ShortName')) {
                obj['ShortName'] = ApiClient.convertToType(data['ShortName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompanyModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompanyModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CompanyName'] && !(typeof data['CompanyName'] === 'string' || data['CompanyName'] instanceof String)) {
            throw new Error("Expected the field `CompanyName` to be a primitive type in the JSON string but got " + data['CompanyName']);
        }
        // ensure the json data is a string
        if (data['CompanyRegistration'] && !(typeof data['CompanyRegistration'] === 'string' || data['CompanyRegistration'] instanceof String)) {
            throw new Error("Expected the field `CompanyRegistration` to be a primitive type in the JSON string but got " + data['CompanyRegistration']);
        }
        // ensure the json data is a string
        if (data['ETag'] && !(typeof data['ETag'] === 'string' || data['ETag'] instanceof String)) {
            throw new Error("Expected the field `ETag` to be a primitive type in the JSON string but got " + data['ETag']);
        }
        // ensure the json data is a string
        if (data['MarketingCompanyName'] && !(typeof data['MarketingCompanyName'] === 'string' || data['MarketingCompanyName'] instanceof String)) {
            throw new Error("Expected the field `MarketingCompanyName` to be a primitive type in the JSON string but got " + data['MarketingCompanyName']);
        }
        // ensure the json data is a string
        if (data['OID'] && !(typeof data['OID'] === 'string' || data['OID'] instanceof String)) {
            throw new Error("Expected the field `OID` to be a primitive type in the JSON string but got " + data['OID']);
        }
        // ensure the json data is a string
        if (data['ShortName'] && !(typeof data['ShortName'] === 'string' || data['ShortName'] instanceof String)) {
            throw new Error("Expected the field `ShortName` to be a primitive type in the JSON string but got " + data['ShortName']);
        }

        return true;
    }


}



/**
 * Company name
 * @member {String} CompanyName
 */
CompanyModel.prototype['CompanyName'] = undefined;

/**
 * Company registration number
 * @member {String} CompanyRegistration
 */
CompanyModel.prototype['CompanyRegistration'] = undefined;

/**
 * A unique identifier defining the object and change revision.
 * @member {String} ETag
 */
CompanyModel.prototype['ETag'] = undefined;

/**
 * Company Marketing Name
 * @member {String} MarketingCompanyName
 */
CompanyModel.prototype['MarketingCompanyName'] = undefined;

/**
 * The unique Object ID (OID).
 * @member {String} OID
 */
CompanyModel.prototype['OID'] = undefined;

/**
 * The unique identifier assigned to the client
 * @member {String} ShortName
 */
CompanyModel.prototype['ShortName'] = undefined;






export default CompanyModel;

