# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SalesInstructionModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address1: str=None, address2: str=None, address3: str=None, address4: str=None, address_number: str=None, area: str=None, bathrooms: int=None, bathrooms_ensuite: int=None, bedrooms: int=None, contract_type: str=None, country: str=None, description: str=None, development_opp: bool=None, directions: str=None, epc_current_eer: int=None, epc_current_ei: int=None, epc_potential_eer: int=None, epc_potential_ei: int=None, e_tag: str=None, has_electricity_supply: bool=None, has_gas_supply: bool=None, has_water_meter: bool=None, investment_opp: bool=None, kitchens: int=None, oid: str=None, outside_space_balcony: bool=None, outside_space_communal_garden: bool=None, outside_space_conservatory: bool=None, outside_space_garden: bool=None, outside_space_large_garden: bool=None, outside_space_patio: bool=None, outside_space_roof_terrace: bool=None, outside_space_south_facing_garden: bool=None, parking_allocated: bool=None, parking_carport: bool=None, parking_double_garage: bool=None, parking_garage: bool=None, parking_off_road: bool=None, parking_on_road: bool=None, parking_permit: bool=None, parking_secure_gated: bool=None, parking_triple_garage: bool=None, postcode: str=None, price: float=None, property_ownable_type: str=None, reception_rooms: int=None, state: str=None, tenure: str=None, video_url: str=None):
        """SalesInstructionModel - a model defined in OpenAPI

        :param address1: The address1 of this SalesInstructionModel.
        :param address2: The address2 of this SalesInstructionModel.
        :param address3: The address3 of this SalesInstructionModel.
        :param address4: The address4 of this SalesInstructionModel.
        :param address_number: The address_number of this SalesInstructionModel.
        :param area: The area of this SalesInstructionModel.
        :param bathrooms: The bathrooms of this SalesInstructionModel.
        :param bathrooms_ensuite: The bathrooms_ensuite of this SalesInstructionModel.
        :param bedrooms: The bedrooms of this SalesInstructionModel.
        :param contract_type: The contract_type of this SalesInstructionModel.
        :param country: The country of this SalesInstructionModel.
        :param description: The description of this SalesInstructionModel.
        :param development_opp: The development_opp of this SalesInstructionModel.
        :param directions: The directions of this SalesInstructionModel.
        :param epc_current_eer: The epc_current_eer of this SalesInstructionModel.
        :param epc_current_ei: The epc_current_ei of this SalesInstructionModel.
        :param epc_potential_eer: The epc_potential_eer of this SalesInstructionModel.
        :param epc_potential_ei: The epc_potential_ei of this SalesInstructionModel.
        :param e_tag: The e_tag of this SalesInstructionModel.
        :param has_electricity_supply: The has_electricity_supply of this SalesInstructionModel.
        :param has_gas_supply: The has_gas_supply of this SalesInstructionModel.
        :param has_water_meter: The has_water_meter of this SalesInstructionModel.
        :param investment_opp: The investment_opp of this SalesInstructionModel.
        :param kitchens: The kitchens of this SalesInstructionModel.
        :param oid: The oid of this SalesInstructionModel.
        :param outside_space_balcony: The outside_space_balcony of this SalesInstructionModel.
        :param outside_space_communal_garden: The outside_space_communal_garden of this SalesInstructionModel.
        :param outside_space_conservatory: The outside_space_conservatory of this SalesInstructionModel.
        :param outside_space_garden: The outside_space_garden of this SalesInstructionModel.
        :param outside_space_large_garden: The outside_space_large_garden of this SalesInstructionModel.
        :param outside_space_patio: The outside_space_patio of this SalesInstructionModel.
        :param outside_space_roof_terrace: The outside_space_roof_terrace of this SalesInstructionModel.
        :param outside_space_south_facing_garden: The outside_space_south_facing_garden of this SalesInstructionModel.
        :param parking_allocated: The parking_allocated of this SalesInstructionModel.
        :param parking_carport: The parking_carport of this SalesInstructionModel.
        :param parking_double_garage: The parking_double_garage of this SalesInstructionModel.
        :param parking_garage: The parking_garage of this SalesInstructionModel.
        :param parking_off_road: The parking_off_road of this SalesInstructionModel.
        :param parking_on_road: The parking_on_road of this SalesInstructionModel.
        :param parking_permit: The parking_permit of this SalesInstructionModel.
        :param parking_secure_gated: The parking_secure_gated of this SalesInstructionModel.
        :param parking_triple_garage: The parking_triple_garage of this SalesInstructionModel.
        :param postcode: The postcode of this SalesInstructionModel.
        :param price: The price of this SalesInstructionModel.
        :param property_ownable_type: The property_ownable_type of this SalesInstructionModel.
        :param reception_rooms: The reception_rooms of this SalesInstructionModel.
        :param state: The state of this SalesInstructionModel.
        :param tenure: The tenure of this SalesInstructionModel.
        :param video_url: The video_url of this SalesInstructionModel.
        """
        self.openapi_types = {
            'address1': str,
            'address2': str,
            'address3': str,
            'address4': str,
            'address_number': str,
            'area': str,
            'bathrooms': int,
            'bathrooms_ensuite': int,
            'bedrooms': int,
            'contract_type': str,
            'country': str,
            'description': str,
            'development_opp': bool,
            'directions': str,
            'epc_current_eer': int,
            'epc_current_ei': int,
            'epc_potential_eer': int,
            'epc_potential_ei': int,
            'e_tag': str,
            'has_electricity_supply': bool,
            'has_gas_supply': bool,
            'has_water_meter': bool,
            'investment_opp': bool,
            'kitchens': int,
            'oid': str,
            'outside_space_balcony': bool,
            'outside_space_communal_garden': bool,
            'outside_space_conservatory': bool,
            'outside_space_garden': bool,
            'outside_space_large_garden': bool,
            'outside_space_patio': bool,
            'outside_space_roof_terrace': bool,
            'outside_space_south_facing_garden': bool,
            'parking_allocated': bool,
            'parking_carport': bool,
            'parking_double_garage': bool,
            'parking_garage': bool,
            'parking_off_road': bool,
            'parking_on_road': bool,
            'parking_permit': bool,
            'parking_secure_gated': bool,
            'parking_triple_garage': bool,
            'postcode': str,
            'price': float,
            'property_ownable_type': str,
            'reception_rooms': int,
            'state': str,
            'tenure': str,
            'video_url': str
        }

        self.attribute_map = {
            'address1': 'Address1',
            'address2': 'Address2',
            'address3': 'Address3',
            'address4': 'Address4',
            'address_number': 'AddressNumber',
            'area': 'Area',
            'bathrooms': 'Bathrooms',
            'bathrooms_ensuite': 'BathroomsEnsuite',
            'bedrooms': 'Bedrooms',
            'contract_type': 'ContractType',
            'country': 'Country',
            'description': 'Description',
            'development_opp': 'DevelopmentOpp',
            'directions': 'Directions',
            'epc_current_eer': 'EPCCurrentEER',
            'epc_current_ei': 'EPCCurrentEI',
            'epc_potential_eer': 'EPCPotentialEER',
            'epc_potential_ei': 'EPCPotentialEI',
            'e_tag': 'ETag',
            'has_electricity_supply': 'HasElectricitySupply',
            'has_gas_supply': 'HasGasSupply',
            'has_water_meter': 'HasWaterMeter',
            'investment_opp': 'InvestmentOpp',
            'kitchens': 'Kitchens',
            'oid': 'OID',
            'outside_space_balcony': 'OutsideSpaceBalcony',
            'outside_space_communal_garden': 'OutsideSpaceCommunalGarden',
            'outside_space_conservatory': 'OutsideSpaceConservatory',
            'outside_space_garden': 'OutsideSpaceGarden',
            'outside_space_large_garden': 'OutsideSpaceLargeGarden',
            'outside_space_patio': 'OutsideSpacePatio',
            'outside_space_roof_terrace': 'OutsideSpaceRoofTerrace',
            'outside_space_south_facing_garden': 'OutsideSpaceSouthFacingGarden',
            'parking_allocated': 'ParkingAllocated',
            'parking_carport': 'ParkingCarport',
            'parking_double_garage': 'ParkingDoubleGarage',
            'parking_garage': 'ParkingGarage',
            'parking_off_road': 'ParkingOffRoad',
            'parking_on_road': 'ParkingOnRoad',
            'parking_permit': 'ParkingPermit',
            'parking_secure_gated': 'ParkingSecureGated',
            'parking_triple_garage': 'ParkingTripleGarage',
            'postcode': 'Postcode',
            'price': 'Price',
            'property_ownable_type': 'PropertyOwnableType',
            'reception_rooms': 'ReceptionRooms',
            'state': 'State',
            'tenure': 'Tenure',
            'video_url': 'VideoURL'
        }

        self._address1 = address1
        self._address2 = address2
        self._address3 = address3
        self._address4 = address4
        self._address_number = address_number
        self._area = area
        self._bathrooms = bathrooms
        self._bathrooms_ensuite = bathrooms_ensuite
        self._bedrooms = bedrooms
        self._contract_type = contract_type
        self._country = country
        self._description = description
        self._development_opp = development_opp
        self._directions = directions
        self._epc_current_eer = epc_current_eer
        self._epc_current_ei = epc_current_ei
        self._epc_potential_eer = epc_potential_eer
        self._epc_potential_ei = epc_potential_ei
        self._e_tag = e_tag
        self._has_electricity_supply = has_electricity_supply
        self._has_gas_supply = has_gas_supply
        self._has_water_meter = has_water_meter
        self._investment_opp = investment_opp
        self._kitchens = kitchens
        self._oid = oid
        self._outside_space_balcony = outside_space_balcony
        self._outside_space_communal_garden = outside_space_communal_garden
        self._outside_space_conservatory = outside_space_conservatory
        self._outside_space_garden = outside_space_garden
        self._outside_space_large_garden = outside_space_large_garden
        self._outside_space_patio = outside_space_patio
        self._outside_space_roof_terrace = outside_space_roof_terrace
        self._outside_space_south_facing_garden = outside_space_south_facing_garden
        self._parking_allocated = parking_allocated
        self._parking_carport = parking_carport
        self._parking_double_garage = parking_double_garage
        self._parking_garage = parking_garage
        self._parking_off_road = parking_off_road
        self._parking_on_road = parking_on_road
        self._parking_permit = parking_permit
        self._parking_secure_gated = parking_secure_gated
        self._parking_triple_garage = parking_triple_garage
        self._postcode = postcode
        self._price = price
        self._property_ownable_type = property_ownable_type
        self._reception_rooms = reception_rooms
        self._state = state
        self._tenure = tenure
        self._video_url = video_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesInstructionModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesInstructionModel of this SalesInstructionModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address1(self):
        """Gets the address1 of this SalesInstructionModel.

        Address 1 of the property to be sold

        :return: The address1 of this SalesInstructionModel.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this SalesInstructionModel.

        Address 1 of the property to be sold

        :param address1: The address1 of this SalesInstructionModel.
        :type address1: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this SalesInstructionModel.

        Address 2 of the property to be sold

        :return: The address2 of this SalesInstructionModel.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this SalesInstructionModel.

        Address 2 of the property to be sold

        :param address2: The address2 of this SalesInstructionModel.
        :type address2: str
        """

        self._address2 = address2

    @property
    def address3(self):
        """Gets the address3 of this SalesInstructionModel.

        Address 3 of the property to be sold

        :return: The address3 of this SalesInstructionModel.
        :rtype: str
        """
        return self._address3

    @address3.setter
    def address3(self, address3):
        """Sets the address3 of this SalesInstructionModel.

        Address 3 of the property to be sold

        :param address3: The address3 of this SalesInstructionModel.
        :type address3: str
        """

        self._address3 = address3

    @property
    def address4(self):
        """Gets the address4 of this SalesInstructionModel.

        Address 4 of the property to be sold

        :return: The address4 of this SalesInstructionModel.
        :rtype: str
        """
        return self._address4

    @address4.setter
    def address4(self, address4):
        """Sets the address4 of this SalesInstructionModel.

        Address 4 of the property to be sold

        :param address4: The address4 of this SalesInstructionModel.
        :type address4: str
        """

        self._address4 = address4

    @property
    def address_number(self):
        """Gets the address_number of this SalesInstructionModel.

        Address number of the property to be sold

        :return: The address_number of this SalesInstructionModel.
        :rtype: str
        """
        return self._address_number

    @address_number.setter
    def address_number(self, address_number):
        """Sets the address_number of this SalesInstructionModel.

        Address number of the property to be sold

        :param address_number: The address_number of this SalesInstructionModel.
        :type address_number: str
        """

        self._address_number = address_number

    @property
    def area(self):
        """Gets the area of this SalesInstructionModel.

        The area linked to the instruction

        :return: The area of this SalesInstructionModel.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this SalesInstructionModel.

        The area linked to the instruction

        :param area: The area of this SalesInstructionModel.
        :type area: str
        """

        self._area = area

    @property
    def bathrooms(self):
        """Gets the bathrooms of this SalesInstructionModel.

        Number of bathrooms linked to the instruction

        :return: The bathrooms of this SalesInstructionModel.
        :rtype: int
        """
        return self._bathrooms

    @bathrooms.setter
    def bathrooms(self, bathrooms):
        """Sets the bathrooms of this SalesInstructionModel.

        Number of bathrooms linked to the instruction

        :param bathrooms: The bathrooms of this SalesInstructionModel.
        :type bathrooms: int
        """

        self._bathrooms = bathrooms

    @property
    def bathrooms_ensuite(self):
        """Gets the bathrooms_ensuite of this SalesInstructionModel.

        How many of the bathrooms are ensuite?

        :return: The bathrooms_ensuite of this SalesInstructionModel.
        :rtype: int
        """
        return self._bathrooms_ensuite

    @bathrooms_ensuite.setter
    def bathrooms_ensuite(self, bathrooms_ensuite):
        """Sets the bathrooms_ensuite of this SalesInstructionModel.

        How many of the bathrooms are ensuite?

        :param bathrooms_ensuite: The bathrooms_ensuite of this SalesInstructionModel.
        :type bathrooms_ensuite: int
        """

        self._bathrooms_ensuite = bathrooms_ensuite

    @property
    def bedrooms(self):
        """Gets the bedrooms of this SalesInstructionModel.

        Number of bedrooms linked to the instruction

        :return: The bedrooms of this SalesInstructionModel.
        :rtype: int
        """
        return self._bedrooms

    @bedrooms.setter
    def bedrooms(self, bedrooms):
        """Sets the bedrooms of this SalesInstructionModel.

        Number of bedrooms linked to the instruction

        :param bedrooms: The bedrooms of this SalesInstructionModel.
        :type bedrooms: int
        """

        self._bedrooms = bedrooms

    @property
    def contract_type(self):
        """Gets the contract_type of this SalesInstructionModel.

        The contract type

        :return: The contract_type of this SalesInstructionModel.
        :rtype: str
        """
        return self._contract_type

    @contract_type.setter
    def contract_type(self, contract_type):
        """Sets the contract_type of this SalesInstructionModel.

        The contract type

        :param contract_type: The contract_type of this SalesInstructionModel.
        :type contract_type: str
        """
        allowed_values = ["Pending", "SoleAgency", "SoleSellingRights", "JointSoleAgency", "MultiAgency", "SubAgent"]  # noqa: E501
        if contract_type not in allowed_values:
            raise ValueError(
                "Invalid value for `contract_type` ({0}), must be one of {1}"
                .format(contract_type, allowed_values)
            )

        self._contract_type = contract_type

    @property
    def country(self):
        """Gets the country of this SalesInstructionModel.

        Address country of the property to be sold

        :return: The country of this SalesInstructionModel.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SalesInstructionModel.

        Address country of the property to be sold

        :param country: The country of this SalesInstructionModel.
        :type country: str
        """
        allowed_values = ["Afghanistan", "Albania", "Algeria", "Andorra", "Angola", "AntiguaAndBarbuda", "Argentina", "Armenia", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bhutan", "Bolivia", "BosniaAndHerzegovina", "Botswana", "Brazil", "Brunei", "Bulgaria", "BurkinaFaso", "Burundi", "Cambodia", "Cameroon", "Canada", "CapeVerde", "CentralAfricanRepublic", "Chad", "Chile", "China", "Colombia", "Comoros", "CongoBrazzaville", "CongoDemocraticRepublicOfThe", "CostaRica", "CoteDIvoire", "Croatia", "Cuba", "Cyprus", "CzechRepublic", "Denmark", "Djibouti", "Dominica", "DominicanRepublic", "EastTimorTimorTimur", "Ecuador", "Egypt", "ElSalvador", "EquatorialGuinea", "Eritrea", "Estonia", "Ethiopia", "Fiji", "Finland", "France", "Gabon", "GambiaThe", "Georgia", "Germany", "Ghana", "Greece", "Grenada", "Guatemala", "Guinea", "GuineaBissau", "Guyana", "Haiti", "Honduras", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "KoreaNorth", "KoreaSouth", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "MacedoniaFormerYugoslavRepublicOf", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "MarshallIslands", "Mauritania", "Mauritius", "Mexico", "MicronesiaFederatedStatesOf", "Moldova", "Monaco", "Mongolia", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "NewZealand", "Nicaragua", "Niger", "Nigeria", "Norway", "Oman", "Pakistan", "Palau", "Panama", "PapuaNewGuinea", "Paraguay", "Peru", "Philippines", "Poland", "Portugal", "Qatar", "Romania", "Russia", "Rwanda", "SaintKittsAndNevis", "SaintLucia", "SaintVincentAndTheGrenadines", "Samoa", "SanMarino", "SaoTomeAndPrincipe", "SaudiArabia", "Senegal", "SerbiaAndMontenegro", "Seychelles", "SierraLeone", "Singapore", "Slovakia", "Slovenia", "SolomonIslands", "Somalia", "SouthAfrica", "Spain", "SriLanka", "Sudan", "Suriname", "Swaziland", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "Togo", "Tonga", "TrinidadAndTobago", "Tunisia", "Turkey", "Turkmenistan", "Tuvalu", "Uganda", "Ukraine", "UnitedArabEmirates", "UnitedKingdom", "UnitedStates", "Uruguay", "Uzbekistan", "Vanuatu", "VaticanCity", "Venezuela", "Vietnam", "WesternSahara", "Yemen", "Zambia", "Zimbabwe", "UnknownCountry", "HongKong", "Jersey", "ChannelIslands", "Bermuda", "BritishOverseasTerritory"]  # noqa: E501
        if country not in allowed_values:
            raise ValueError(
                "Invalid value for `country` ({0}), must be one of {1}"
                .format(country, allowed_values)
            )

        self._country = country

    @property
    def description(self):
        """Gets the description of this SalesInstructionModel.

        The instruction description

        :return: The description of this SalesInstructionModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SalesInstructionModel.

        The instruction description

        :param description: The description of this SalesInstructionModel.
        :type description: str
        """

        self._description = description

    @property
    def development_opp(self):
        """Gets the development_opp of this SalesInstructionModel.

        Is the instruction a development opportunity?

        :return: The development_opp of this SalesInstructionModel.
        :rtype: bool
        """
        return self._development_opp

    @development_opp.setter
    def development_opp(self, development_opp):
        """Sets the development_opp of this SalesInstructionModel.

        Is the instruction a development opportunity?

        :param development_opp: The development_opp of this SalesInstructionModel.
        :type development_opp: bool
        """

        self._development_opp = development_opp

    @property
    def directions(self):
        """Gets the directions of this SalesInstructionModel.

        Directions linked to the instruction

        :return: The directions of this SalesInstructionModel.
        :rtype: str
        """
        return self._directions

    @directions.setter
    def directions(self, directions):
        """Sets the directions of this SalesInstructionModel.

        Directions linked to the instruction

        :param directions: The directions of this SalesInstructionModel.
        :type directions: str
        """

        self._directions = directions

    @property
    def epc_current_eer(self):
        """Gets the epc_current_eer of this SalesInstructionModel.

        Current EER value

        :return: The epc_current_eer of this SalesInstructionModel.
        :rtype: int
        """
        return self._epc_current_eer

    @epc_current_eer.setter
    def epc_current_eer(self, epc_current_eer):
        """Sets the epc_current_eer of this SalesInstructionModel.

        Current EER value

        :param epc_current_eer: The epc_current_eer of this SalesInstructionModel.
        :type epc_current_eer: int
        """

        self._epc_current_eer = epc_current_eer

    @property
    def epc_current_ei(self):
        """Gets the epc_current_ei of this SalesInstructionModel.

        Current EI value

        :return: The epc_current_ei of this SalesInstructionModel.
        :rtype: int
        """
        return self._epc_current_ei

    @epc_current_ei.setter
    def epc_current_ei(self, epc_current_ei):
        """Sets the epc_current_ei of this SalesInstructionModel.

        Current EI value

        :param epc_current_ei: The epc_current_ei of this SalesInstructionModel.
        :type epc_current_ei: int
        """

        self._epc_current_ei = epc_current_ei

    @property
    def epc_potential_eer(self):
        """Gets the epc_potential_eer of this SalesInstructionModel.

        Potential EER value

        :return: The epc_potential_eer of this SalesInstructionModel.
        :rtype: int
        """
        return self._epc_potential_eer

    @epc_potential_eer.setter
    def epc_potential_eer(self, epc_potential_eer):
        """Sets the epc_potential_eer of this SalesInstructionModel.

        Potential EER value

        :param epc_potential_eer: The epc_potential_eer of this SalesInstructionModel.
        :type epc_potential_eer: int
        """

        self._epc_potential_eer = epc_potential_eer

    @property
    def epc_potential_ei(self):
        """Gets the epc_potential_ei of this SalesInstructionModel.

        Potential EI value

        :return: The epc_potential_ei of this SalesInstructionModel.
        :rtype: int
        """
        return self._epc_potential_ei

    @epc_potential_ei.setter
    def epc_potential_ei(self, epc_potential_ei):
        """Sets the epc_potential_ei of this SalesInstructionModel.

        Potential EI value

        :param epc_potential_ei: The epc_potential_ei of this SalesInstructionModel.
        :type epc_potential_ei: int
        """

        self._epc_potential_ei = epc_potential_ei

    @property
    def e_tag(self):
        """Gets the e_tag of this SalesInstructionModel.

        A unique identifier defining the object and change revision.

        :return: The e_tag of this SalesInstructionModel.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this SalesInstructionModel.

        A unique identifier defining the object and change revision.

        :param e_tag: The e_tag of this SalesInstructionModel.
        :type e_tag: str
        """

        self._e_tag = e_tag

    @property
    def has_electricity_supply(self):
        """Gets the has_electricity_supply of this SalesInstructionModel.

        Does the instruction have an electrical supply linked to it?

        :return: The has_electricity_supply of this SalesInstructionModel.
        :rtype: bool
        """
        return self._has_electricity_supply

    @has_electricity_supply.setter
    def has_electricity_supply(self, has_electricity_supply):
        """Sets the has_electricity_supply of this SalesInstructionModel.

        Does the instruction have an electrical supply linked to it?

        :param has_electricity_supply: The has_electricity_supply of this SalesInstructionModel.
        :type has_electricity_supply: bool
        """

        self._has_electricity_supply = has_electricity_supply

    @property
    def has_gas_supply(self):
        """Gets the has_gas_supply of this SalesInstructionModel.

        Does the instruction have an gas supply linked to it?

        :return: The has_gas_supply of this SalesInstructionModel.
        :rtype: bool
        """
        return self._has_gas_supply

    @has_gas_supply.setter
    def has_gas_supply(self, has_gas_supply):
        """Sets the has_gas_supply of this SalesInstructionModel.

        Does the instruction have an gas supply linked to it?

        :param has_gas_supply: The has_gas_supply of this SalesInstructionModel.
        :type has_gas_supply: bool
        """

        self._has_gas_supply = has_gas_supply

    @property
    def has_water_meter(self):
        """Gets the has_water_meter of this SalesInstructionModel.

        Does the instruction have a water meter linked to it?

        :return: The has_water_meter of this SalesInstructionModel.
        :rtype: bool
        """
        return self._has_water_meter

    @has_water_meter.setter
    def has_water_meter(self, has_water_meter):
        """Sets the has_water_meter of this SalesInstructionModel.

        Does the instruction have a water meter linked to it?

        :param has_water_meter: The has_water_meter of this SalesInstructionModel.
        :type has_water_meter: bool
        """

        self._has_water_meter = has_water_meter

    @property
    def investment_opp(self):
        """Gets the investment_opp of this SalesInstructionModel.

        Is the instruction a investment opportunity?

        :return: The investment_opp of this SalesInstructionModel.
        :rtype: bool
        """
        return self._investment_opp

    @investment_opp.setter
    def investment_opp(self, investment_opp):
        """Sets the investment_opp of this SalesInstructionModel.

        Is the instruction a investment opportunity?

        :param investment_opp: The investment_opp of this SalesInstructionModel.
        :type investment_opp: bool
        """

        self._investment_opp = investment_opp

    @property
    def kitchens(self):
        """Gets the kitchens of this SalesInstructionModel.

        Number of kitchens linked to the property instruction

        :return: The kitchens of this SalesInstructionModel.
        :rtype: int
        """
        return self._kitchens

    @kitchens.setter
    def kitchens(self, kitchens):
        """Sets the kitchens of this SalesInstructionModel.

        Number of kitchens linked to the property instruction

        :param kitchens: The kitchens of this SalesInstructionModel.
        :type kitchens: int
        """

        self._kitchens = kitchens

    @property
    def oid(self):
        """Gets the oid of this SalesInstructionModel.

        The unique Object ID (OID).

        :return: The oid of this SalesInstructionModel.
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this SalesInstructionModel.

        The unique Object ID (OID).

        :param oid: The oid of this SalesInstructionModel.
        :type oid: str
        """

        self._oid = oid

    @property
    def outside_space_balcony(self):
        """Gets the outside_space_balcony of this SalesInstructionModel.

        Does the instruction have an outside balcony linked to it?

        :return: The outside_space_balcony of this SalesInstructionModel.
        :rtype: bool
        """
        return self._outside_space_balcony

    @outside_space_balcony.setter
    def outside_space_balcony(self, outside_space_balcony):
        """Sets the outside_space_balcony of this SalesInstructionModel.

        Does the instruction have an outside balcony linked to it?

        :param outside_space_balcony: The outside_space_balcony of this SalesInstructionModel.
        :type outside_space_balcony: bool
        """

        self._outside_space_balcony = outside_space_balcony

    @property
    def outside_space_communal_garden(self):
        """Gets the outside_space_communal_garden of this SalesInstructionModel.

        Does the instruction have a communal garden linked to it?

        :return: The outside_space_communal_garden of this SalesInstructionModel.
        :rtype: bool
        """
        return self._outside_space_communal_garden

    @outside_space_communal_garden.setter
    def outside_space_communal_garden(self, outside_space_communal_garden):
        """Sets the outside_space_communal_garden of this SalesInstructionModel.

        Does the instruction have a communal garden linked to it?

        :param outside_space_communal_garden: The outside_space_communal_garden of this SalesInstructionModel.
        :type outside_space_communal_garden: bool
        """

        self._outside_space_communal_garden = outside_space_communal_garden

    @property
    def outside_space_conservatory(self):
        """Gets the outside_space_conservatory of this SalesInstructionModel.

        Does the instruction have a conservatory linked to it?

        :return: The outside_space_conservatory of this SalesInstructionModel.
        :rtype: bool
        """
        return self._outside_space_conservatory

    @outside_space_conservatory.setter
    def outside_space_conservatory(self, outside_space_conservatory):
        """Sets the outside_space_conservatory of this SalesInstructionModel.

        Does the instruction have a conservatory linked to it?

        :param outside_space_conservatory: The outside_space_conservatory of this SalesInstructionModel.
        :type outside_space_conservatory: bool
        """

        self._outside_space_conservatory = outside_space_conservatory

    @property
    def outside_space_garden(self):
        """Gets the outside_space_garden of this SalesInstructionModel.

        Does the instruction have a garden linked to it?

        :return: The outside_space_garden of this SalesInstructionModel.
        :rtype: bool
        """
        return self._outside_space_garden

    @outside_space_garden.setter
    def outside_space_garden(self, outside_space_garden):
        """Sets the outside_space_garden of this SalesInstructionModel.

        Does the instruction have a garden linked to it?

        :param outside_space_garden: The outside_space_garden of this SalesInstructionModel.
        :type outside_space_garden: bool
        """

        self._outside_space_garden = outside_space_garden

    @property
    def outside_space_large_garden(self):
        """Gets the outside_space_large_garden of this SalesInstructionModel.

        Does the instruction have a large garden linked to it?

        :return: The outside_space_large_garden of this SalesInstructionModel.
        :rtype: bool
        """
        return self._outside_space_large_garden

    @outside_space_large_garden.setter
    def outside_space_large_garden(self, outside_space_large_garden):
        """Sets the outside_space_large_garden of this SalesInstructionModel.

        Does the instruction have a large garden linked to it?

        :param outside_space_large_garden: The outside_space_large_garden of this SalesInstructionModel.
        :type outside_space_large_garden: bool
        """

        self._outside_space_large_garden = outside_space_large_garden

    @property
    def outside_space_patio(self):
        """Gets the outside_space_patio of this SalesInstructionModel.

        Does the instruction have a patio linked to it?

        :return: The outside_space_patio of this SalesInstructionModel.
        :rtype: bool
        """
        return self._outside_space_patio

    @outside_space_patio.setter
    def outside_space_patio(self, outside_space_patio):
        """Sets the outside_space_patio of this SalesInstructionModel.

        Does the instruction have a patio linked to it?

        :param outside_space_patio: The outside_space_patio of this SalesInstructionModel.
        :type outside_space_patio: bool
        """

        self._outside_space_patio = outside_space_patio

    @property
    def outside_space_roof_terrace(self):
        """Gets the outside_space_roof_terrace of this SalesInstructionModel.

        Does the instruction have a roof terrace linked to it?

        :return: The outside_space_roof_terrace of this SalesInstructionModel.
        :rtype: bool
        """
        return self._outside_space_roof_terrace

    @outside_space_roof_terrace.setter
    def outside_space_roof_terrace(self, outside_space_roof_terrace):
        """Sets the outside_space_roof_terrace of this SalesInstructionModel.

        Does the instruction have a roof terrace linked to it?

        :param outside_space_roof_terrace: The outside_space_roof_terrace of this SalesInstructionModel.
        :type outside_space_roof_terrace: bool
        """

        self._outside_space_roof_terrace = outside_space_roof_terrace

    @property
    def outside_space_south_facing_garden(self):
        """Gets the outside_space_south_facing_garden of this SalesInstructionModel.

        Does the instruction have a south facing garden?

        :return: The outside_space_south_facing_garden of this SalesInstructionModel.
        :rtype: bool
        """
        return self._outside_space_south_facing_garden

    @outside_space_south_facing_garden.setter
    def outside_space_south_facing_garden(self, outside_space_south_facing_garden):
        """Sets the outside_space_south_facing_garden of this SalesInstructionModel.

        Does the instruction have a south facing garden?

        :param outside_space_south_facing_garden: The outside_space_south_facing_garden of this SalesInstructionModel.
        :type outside_space_south_facing_garden: bool
        """

        self._outside_space_south_facing_garden = outside_space_south_facing_garden

    @property
    def parking_allocated(self):
        """Gets the parking_allocated of this SalesInstructionModel.

        Is there any parking allocation linked to the instruction?

        :return: The parking_allocated of this SalesInstructionModel.
        :rtype: bool
        """
        return self._parking_allocated

    @parking_allocated.setter
    def parking_allocated(self, parking_allocated):
        """Sets the parking_allocated of this SalesInstructionModel.

        Is there any parking allocation linked to the instruction?

        :param parking_allocated: The parking_allocated of this SalesInstructionModel.
        :type parking_allocated: bool
        """

        self._parking_allocated = parking_allocated

    @property
    def parking_carport(self):
        """Gets the parking_carport of this SalesInstructionModel.

        Does the instruction have a carport linked to it?

        :return: The parking_carport of this SalesInstructionModel.
        :rtype: bool
        """
        return self._parking_carport

    @parking_carport.setter
    def parking_carport(self, parking_carport):
        """Sets the parking_carport of this SalesInstructionModel.

        Does the instruction have a carport linked to it?

        :param parking_carport: The parking_carport of this SalesInstructionModel.
        :type parking_carport: bool
        """

        self._parking_carport = parking_carport

    @property
    def parking_double_garage(self):
        """Gets the parking_double_garage of this SalesInstructionModel.

        Does the instruction have a double garage linked to it?

        :return: The parking_double_garage of this SalesInstructionModel.
        :rtype: bool
        """
        return self._parking_double_garage

    @parking_double_garage.setter
    def parking_double_garage(self, parking_double_garage):
        """Sets the parking_double_garage of this SalesInstructionModel.

        Does the instruction have a double garage linked to it?

        :param parking_double_garage: The parking_double_garage of this SalesInstructionModel.
        :type parking_double_garage: bool
        """

        self._parking_double_garage = parking_double_garage

    @property
    def parking_garage(self):
        """Gets the parking_garage of this SalesInstructionModel.

        Does the instruction have a garage linked to it?

        :return: The parking_garage of this SalesInstructionModel.
        :rtype: bool
        """
        return self._parking_garage

    @parking_garage.setter
    def parking_garage(self, parking_garage):
        """Sets the parking_garage of this SalesInstructionModel.

        Does the instruction have a garage linked to it?

        :param parking_garage: The parking_garage of this SalesInstructionModel.
        :type parking_garage: bool
        """

        self._parking_garage = parking_garage

    @property
    def parking_off_road(self):
        """Gets the parking_off_road of this SalesInstructionModel.

        Is there off road parking linked to the instruction?

        :return: The parking_off_road of this SalesInstructionModel.
        :rtype: bool
        """
        return self._parking_off_road

    @parking_off_road.setter
    def parking_off_road(self, parking_off_road):
        """Sets the parking_off_road of this SalesInstructionModel.

        Is there off road parking linked to the instruction?

        :param parking_off_road: The parking_off_road of this SalesInstructionModel.
        :type parking_off_road: bool
        """

        self._parking_off_road = parking_off_road

    @property
    def parking_on_road(self):
        """Gets the parking_on_road of this SalesInstructionModel.

        Is there on road parking linked to the instruction?

        :return: The parking_on_road of this SalesInstructionModel.
        :rtype: bool
        """
        return self._parking_on_road

    @parking_on_road.setter
    def parking_on_road(self, parking_on_road):
        """Sets the parking_on_road of this SalesInstructionModel.

        Is there on road parking linked to the instruction?

        :param parking_on_road: The parking_on_road of this SalesInstructionModel.
        :type parking_on_road: bool
        """

        self._parking_on_road = parking_on_road

    @property
    def parking_permit(self):
        """Gets the parking_permit of this SalesInstructionModel.

        Is a parking permit required?

        :return: The parking_permit of this SalesInstructionModel.
        :rtype: bool
        """
        return self._parking_permit

    @parking_permit.setter
    def parking_permit(self, parking_permit):
        """Sets the parking_permit of this SalesInstructionModel.

        Is a parking permit required?

        :param parking_permit: The parking_permit of this SalesInstructionModel.
        :type parking_permit: bool
        """

        self._parking_permit = parking_permit

    @property
    def parking_secure_gated(self):
        """Gets the parking_secure_gated of this SalesInstructionModel.

        Is there any secured gate parking linked to the instruction?

        :return: The parking_secure_gated of this SalesInstructionModel.
        :rtype: bool
        """
        return self._parking_secure_gated

    @parking_secure_gated.setter
    def parking_secure_gated(self, parking_secure_gated):
        """Sets the parking_secure_gated of this SalesInstructionModel.

        Is there any secured gate parking linked to the instruction?

        :param parking_secure_gated: The parking_secure_gated of this SalesInstructionModel.
        :type parking_secure_gated: bool
        """

        self._parking_secure_gated = parking_secure_gated

    @property
    def parking_triple_garage(self):
        """Gets the parking_triple_garage of this SalesInstructionModel.

        Does the instruction have a triple garage linked to it?

        :return: The parking_triple_garage of this SalesInstructionModel.
        :rtype: bool
        """
        return self._parking_triple_garage

    @parking_triple_garage.setter
    def parking_triple_garage(self, parking_triple_garage):
        """Sets the parking_triple_garage of this SalesInstructionModel.

        Does the instruction have a triple garage linked to it?

        :param parking_triple_garage: The parking_triple_garage of this SalesInstructionModel.
        :type parking_triple_garage: bool
        """

        self._parking_triple_garage = parking_triple_garage

    @property
    def postcode(self):
        """Gets the postcode of this SalesInstructionModel.

        Postcode of the property to be sold

        :return: The postcode of this SalesInstructionModel.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this SalesInstructionModel.

        Postcode of the property to be sold

        :param postcode: The postcode of this SalesInstructionModel.
        :type postcode: str
        """

        self._postcode = postcode

    @property
    def price(self):
        """Gets the price of this SalesInstructionModel.

        The price of the property to be sold

        :return: The price of this SalesInstructionModel.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SalesInstructionModel.

        The price of the property to be sold

        :param price: The price of this SalesInstructionModel.
        :type price: float
        """

        self._price = price

    @property
    def property_ownable_type(self):
        """Gets the property_ownable_type of this SalesInstructionModel.

        The property type

        :return: The property_ownable_type of this SalesInstructionModel.
        :rtype: str
        """
        return self._property_ownable_type

    @property_ownable_type.setter
    def property_ownable_type(self, property_ownable_type):
        """Sets the property_ownable_type of this SalesInstructionModel.

        The property type

        :param property_ownable_type: The property_ownable_type of this SalesInstructionModel.
        :type property_ownable_type: str
        """
        allowed_values = ["House", "FlatApartment", "Bungalow", "Land", "HouseFlatShare", "GarageParking", "CommercialProperty", "Block", "TerracedHouse", "EndTerraceHouse", "SemiDetachedHouse", "DetachedHouse", "SemiDetachedBungalow", "TownHouse", "Cottage", "ServicedApartment", "Studio", "Apartment", "Barn", "FarmHouse", "Penthouse", "BuildingPlot", "DetachedBungalow", "LinkDetached", "MidTerracedBungalow", "LandResidential"]  # noqa: E501
        if property_ownable_type not in allowed_values:
            raise ValueError(
                "Invalid value for `property_ownable_type` ({0}), must be one of {1}"
                .format(property_ownable_type, allowed_values)
            )

        self._property_ownable_type = property_ownable_type

    @property
    def reception_rooms(self):
        """Gets the reception_rooms of this SalesInstructionModel.

        Number of reception rooms linked to the instruction

        :return: The reception_rooms of this SalesInstructionModel.
        :rtype: int
        """
        return self._reception_rooms

    @reception_rooms.setter
    def reception_rooms(self, reception_rooms):
        """Sets the reception_rooms of this SalesInstructionModel.

        Number of reception rooms linked to the instruction

        :param reception_rooms: The reception_rooms of this SalesInstructionModel.
        :type reception_rooms: int
        """

        self._reception_rooms = reception_rooms

    @property
    def state(self):
        """Gets the state of this SalesInstructionModel.

        The current instruction state

        :return: The state of this SalesInstructionModel.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SalesInstructionModel.

        The current instruction state

        :param state: The state of this SalesInstructionModel.
        :type state: str
        """
        allowed_values = ["MarketAppraisal", "LostAppraisal", "Instructed", "Advertised", "UnderOffer", "ContractsExchanged", "Completed", "FallenThrough", "Withdrawn"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def tenure(self):
        """Gets the tenure of this SalesInstructionModel.

        Instruction tenure

        :return: The tenure of this SalesInstructionModel.
        :rtype: str
        """
        return self._tenure

    @tenure.setter
    def tenure(self, tenure):
        """Sets the tenure of this SalesInstructionModel.

        Instruction tenure

        :param tenure: The tenure of this SalesInstructionModel.
        :type tenure: str
        """
        allowed_values = ["Freehold", "Leasehold", "Commonhold", "ShareOfFreehold", "FlyingFreehold", "ShareTransfer", "Unknown"]  # noqa: E501
        if tenure not in allowed_values:
            raise ValueError(
                "Invalid value for `tenure` ({0}), must be one of {1}"
                .format(tenure, allowed_values)
            )

        self._tenure = tenure

    @property
    def video_url(self):
        """Gets the video_url of this SalesInstructionModel.

        The URL of the video linked to the Sales Instruction

        :return: The video_url of this SalesInstructionModel.
        :rtype: str
        """
        return self._video_url

    @video_url.setter
    def video_url(self, video_url):
        """Sets the video_url of this SalesInstructionModel.

        The URL of the video linked to the Sales Instruction

        :param video_url: The video_url of this SalesInstructionModel.
        :type video_url: str
        """

        self._video_url = video_url
