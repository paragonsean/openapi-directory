/*
 * agentOS API V3, Maintenance Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-maintenance
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MaintenanceDocumentModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Submission Model - Handles all fields required to submit an online maintenance job
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:07.303250-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MaintenanceIssueModel {
  public static final String SERIALIZED_NAME_DOCUMENTS = "Documents";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS)
  private List<MaintenanceDocumentModel> documents = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTERNAL_I_D = "ExternalID";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_I_D)
  private String externalID;

  public static final String SERIALIZED_NAME_ISSUE_FAULT = "IssueFault";
  @SerializedName(SERIALIZED_NAME_ISSUE_FAULT)
  private String issueFault;

  public static final String SERIALIZED_NAME_ISSUE_NOTES = "IssueNotes";
  @SerializedName(SERIALIZED_NAME_ISSUE_NOTES)
  private String issueNotes;

  /**
   * The priority of the job (Defaults to &#39;Low&#39; if incorrect value or empty)
   */
  @JsonAdapter(IssuePriorityEnum.Adapter.class)
  public enum IssuePriorityEnum {
    LOW("Low"),
    
    MEDIUM("Medium"),
    
    HIGH("High");

    private String value;

    IssuePriorityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IssuePriorityEnum fromValue(String value) {
      for (IssuePriorityEnum b : IssuePriorityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IssuePriorityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IssuePriorityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IssuePriorityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IssuePriorityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IssuePriorityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ISSUE_PRIORITY = "IssuePriority";
  @SerializedName(SERIALIZED_NAME_ISSUE_PRIORITY)
  private IssuePriorityEnum issuePriority;

  public static final String SERIALIZED_NAME_ISSUE_TITLE = "IssueTitle";
  @SerializedName(SERIALIZED_NAME_ISSUE_TITLE)
  private String issueTitle;

  public static final String SERIALIZED_NAME_PROPERTY_ADDRESS1 = "PropertyAddress1";
  @SerializedName(SERIALIZED_NAME_PROPERTY_ADDRESS1)
  private String propertyAddress1;

  public static final String SERIALIZED_NAME_PROPERTY_ADDRESS2 = "PropertyAddress2";
  @SerializedName(SERIALIZED_NAME_PROPERTY_ADDRESS2)
  private String propertyAddress2;

  public static final String SERIALIZED_NAME_PROPERTY_ADDRESS3 = "PropertyAddress3";
  @SerializedName(SERIALIZED_NAME_PROPERTY_ADDRESS3)
  private String propertyAddress3;

  public static final String SERIALIZED_NAME_PROPERTY_ADDRESS4 = "PropertyAddress4";
  @SerializedName(SERIALIZED_NAME_PROPERTY_ADDRESS4)
  private String propertyAddress4;

  public static final String SERIALIZED_NAME_PROPERTY_COUNTRY = "PropertyCountry";
  @SerializedName(SERIALIZED_NAME_PROPERTY_COUNTRY)
  private String propertyCountry;

  public static final String SERIALIZED_NAME_PROPERTY_POSTCODE = "PropertyPostcode";
  @SerializedName(SERIALIZED_NAME_PROPERTY_POSTCODE)
  private String propertyPostcode;

  public static final String SERIALIZED_NAME_REPORTED_AT = "ReportedAt";
  @SerializedName(SERIALIZED_NAME_REPORTED_AT)
  private OffsetDateTime reportedAt;

  public static final String SERIALIZED_NAME_TENANT_E_MAIL_ADDRESS = "TenantEMailAddress";
  @SerializedName(SERIALIZED_NAME_TENANT_E_MAIL_ADDRESS)
  private String tenantEMailAddress;

  public static final String SERIALIZED_NAME_TENANT_FORENAME = "TenantForename";
  @SerializedName(SERIALIZED_NAME_TENANT_FORENAME)
  private String tenantForename;

  public static final String SERIALIZED_NAME_TENANT_PHONE_PRIMARY = "TenantPhonePrimary";
  @SerializedName(SERIALIZED_NAME_TENANT_PHONE_PRIMARY)
  private String tenantPhonePrimary;

  public static final String SERIALIZED_NAME_TENANT_PHONE_SECONDARY = "TenantPhoneSecondary";
  @SerializedName(SERIALIZED_NAME_TENANT_PHONE_SECONDARY)
  private String tenantPhoneSecondary;

  public static final String SERIALIZED_NAME_TENANT_PRESENCE_REQUESTED = "TenantPresenceRequested";
  @SerializedName(SERIALIZED_NAME_TENANT_PRESENCE_REQUESTED)
  private Boolean tenantPresenceRequested;

  public static final String SERIALIZED_NAME_TENANT_SURNAME = "TenantSurname";
  @SerializedName(SERIALIZED_NAME_TENANT_SURNAME)
  private String tenantSurname;

  public static final String SERIALIZED_NAME_TENANT_TITLE = "TenantTitle";
  @SerializedName(SERIALIZED_NAME_TENANT_TITLE)
  private String tenantTitle;

  public MaintenanceIssueModel() {
  }

  public MaintenanceIssueModel documents(List<MaintenanceDocumentModel> documents) {
    this.documents = documents;
    return this;
  }

  public MaintenanceIssueModel addDocumentsItem(MaintenanceDocumentModel documentsItem) {
    if (this.documents == null) {
      this.documents = new ArrayList<>();
    }
    this.documents.add(documentsItem);
    return this;
  }

  /**
   * Documents linked to a submitted maintenance job
   * @return documents
   */
  @javax.annotation.Nullable
  public List<MaintenanceDocumentModel> getDocuments() {
    return documents;
  }

  public void setDocuments(List<MaintenanceDocumentModel> documents) {
    this.documents = documents;
  }


  public MaintenanceIssueModel externalID(String externalID) {
    this.externalID = externalID;
    return this;
  }

  /**
   * ID used externally to manage jobs before sending to the system. This has a 10 character limit.
   * @return externalID
   */
  @javax.annotation.Nullable
  public String getExternalID() {
    return externalID;
  }

  public void setExternalID(String externalID) {
    this.externalID = externalID;
  }


  public MaintenanceIssueModel issueFault(String issueFault) {
    this.issueFault = issueFault;
    return this;
  }

  /**
   * The fault title if applicable
   * @return issueFault
   */
  @javax.annotation.Nullable
  public String getIssueFault() {
    return issueFault;
  }

  public void setIssueFault(String issueFault) {
    this.issueFault = issueFault;
  }


  public MaintenanceIssueModel issueNotes(String issueNotes) {
    this.issueNotes = issueNotes;
    return this;
  }

  /**
   * Fault notes
   * @return issueNotes
   */
  @javax.annotation.Nullable
  public String getIssueNotes() {
    return issueNotes;
  }

  public void setIssueNotes(String issueNotes) {
    this.issueNotes = issueNotes;
  }


  public MaintenanceIssueModel issuePriority(IssuePriorityEnum issuePriority) {
    this.issuePriority = issuePriority;
    return this;
  }

  /**
   * The priority of the job (Defaults to &#39;Low&#39; if incorrect value or empty)
   * @return issuePriority
   */
  @javax.annotation.Nullable
  public IssuePriorityEnum getIssuePriority() {
    return issuePriority;
  }

  public void setIssuePriority(IssuePriorityEnum issuePriority) {
    this.issuePriority = issuePriority;
  }


  public MaintenanceIssueModel issueTitle(String issueTitle) {
    this.issueTitle = issueTitle;
    return this;
  }

  /**
   * The title of the issue
   * @return issueTitle
   */
  @javax.annotation.Nullable
  public String getIssueTitle() {
    return issueTitle;
  }

  public void setIssueTitle(String issueTitle) {
    this.issueTitle = issueTitle;
  }


  public MaintenanceIssueModel propertyAddress1(String propertyAddress1) {
    this.propertyAddress1 = propertyAddress1;
    return this;
  }

  /**
   * The first line of the property address
   * @return propertyAddress1
   */
  @javax.annotation.Nullable
  public String getPropertyAddress1() {
    return propertyAddress1;
  }

  public void setPropertyAddress1(String propertyAddress1) {
    this.propertyAddress1 = propertyAddress1;
  }


  public MaintenanceIssueModel propertyAddress2(String propertyAddress2) {
    this.propertyAddress2 = propertyAddress2;
    return this;
  }

  /**
   * The second line of the property address
   * @return propertyAddress2
   */
  @javax.annotation.Nullable
  public String getPropertyAddress2() {
    return propertyAddress2;
  }

  public void setPropertyAddress2(String propertyAddress2) {
    this.propertyAddress2 = propertyAddress2;
  }


  public MaintenanceIssueModel propertyAddress3(String propertyAddress3) {
    this.propertyAddress3 = propertyAddress3;
    return this;
  }

  /**
   * The third line of the property address
   * @return propertyAddress3
   */
  @javax.annotation.Nullable
  public String getPropertyAddress3() {
    return propertyAddress3;
  }

  public void setPropertyAddress3(String propertyAddress3) {
    this.propertyAddress3 = propertyAddress3;
  }


  public MaintenanceIssueModel propertyAddress4(String propertyAddress4) {
    this.propertyAddress4 = propertyAddress4;
    return this;
  }

  /**
   * The forth line of the property address
   * @return propertyAddress4
   */
  @javax.annotation.Nullable
  public String getPropertyAddress4() {
    return propertyAddress4;
  }

  public void setPropertyAddress4(String propertyAddress4) {
    this.propertyAddress4 = propertyAddress4;
  }


  public MaintenanceIssueModel propertyCountry(String propertyCountry) {
    this.propertyCountry = propertyCountry;
    return this;
  }

  /**
   * The country the property is located
   * @return propertyCountry
   */
  @javax.annotation.Nullable
  public String getPropertyCountry() {
    return propertyCountry;
  }

  public void setPropertyCountry(String propertyCountry) {
    this.propertyCountry = propertyCountry;
  }


  public MaintenanceIssueModel propertyPostcode(String propertyPostcode) {
    this.propertyPostcode = propertyPostcode;
    return this;
  }

  /**
   * The property postcode
   * @return propertyPostcode
   */
  @javax.annotation.Nullable
  public String getPropertyPostcode() {
    return propertyPostcode;
  }

  public void setPropertyPostcode(String propertyPostcode) {
    this.propertyPostcode = propertyPostcode;
  }


  public MaintenanceIssueModel reportedAt(OffsetDateTime reportedAt) {
    this.reportedAt = reportedAt;
    return this;
  }

  /**
   * The date the job was reported
   * @return reportedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReportedAt() {
    return reportedAt;
  }

  public void setReportedAt(OffsetDateTime reportedAt) {
    this.reportedAt = reportedAt;
  }


  public MaintenanceIssueModel tenantEMailAddress(String tenantEMailAddress) {
    this.tenantEMailAddress = tenantEMailAddress;
    return this;
  }

  /**
   * The email address of the Tenant
   * @return tenantEMailAddress
   */
  @javax.annotation.Nullable
  public String getTenantEMailAddress() {
    return tenantEMailAddress;
  }

  public void setTenantEMailAddress(String tenantEMailAddress) {
    this.tenantEMailAddress = tenantEMailAddress;
  }


  public MaintenanceIssueModel tenantForename(String tenantForename) {
    this.tenantForename = tenantForename;
    return this;
  }

  /**
   * The forename of the Tenant
   * @return tenantForename
   */
  @javax.annotation.Nullable
  public String getTenantForename() {
    return tenantForename;
  }

  public void setTenantForename(String tenantForename) {
    this.tenantForename = tenantForename;
  }


  public MaintenanceIssueModel tenantPhonePrimary(String tenantPhonePrimary) {
    this.tenantPhonePrimary = tenantPhonePrimary;
    return this;
  }

  /**
   * The primary phone number of the Tenant
   * @return tenantPhonePrimary
   */
  @javax.annotation.Nullable
  public String getTenantPhonePrimary() {
    return tenantPhonePrimary;
  }

  public void setTenantPhonePrimary(String tenantPhonePrimary) {
    this.tenantPhonePrimary = tenantPhonePrimary;
  }


  public MaintenanceIssueModel tenantPhoneSecondary(String tenantPhoneSecondary) {
    this.tenantPhoneSecondary = tenantPhoneSecondary;
    return this;
  }

  /**
   * The secondary phone number of the Tenant
   * @return tenantPhoneSecondary
   */
  @javax.annotation.Nullable
  public String getTenantPhoneSecondary() {
    return tenantPhoneSecondary;
  }

  public void setTenantPhoneSecondary(String tenantPhoneSecondary) {
    this.tenantPhoneSecondary = tenantPhoneSecondary;
  }


  public MaintenanceIssueModel tenantPresenceRequested(Boolean tenantPresenceRequested) {
    this.tenantPresenceRequested = tenantPresenceRequested;
    return this;
  }

  /**
   * Is the Tenant’s presence requested during the maintenance visit? (Defaults to “false” if incorrect value or empty)
   * @return tenantPresenceRequested
   */
  @javax.annotation.Nullable
  public Boolean getTenantPresenceRequested() {
    return tenantPresenceRequested;
  }

  public void setTenantPresenceRequested(Boolean tenantPresenceRequested) {
    this.tenantPresenceRequested = tenantPresenceRequested;
  }


  public MaintenanceIssueModel tenantSurname(String tenantSurname) {
    this.tenantSurname = tenantSurname;
    return this;
  }

  /**
   * The surname of the Tenant
   * @return tenantSurname
   */
  @javax.annotation.Nullable
  public String getTenantSurname() {
    return tenantSurname;
  }

  public void setTenantSurname(String tenantSurname) {
    this.tenantSurname = tenantSurname;
  }


  public MaintenanceIssueModel tenantTitle(String tenantTitle) {
    this.tenantTitle = tenantTitle;
    return this;
  }

  /**
   * The title of the Tenant
   * @return tenantTitle
   */
  @javax.annotation.Nullable
  public String getTenantTitle() {
    return tenantTitle;
  }

  public void setTenantTitle(String tenantTitle) {
    this.tenantTitle = tenantTitle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaintenanceIssueModel maintenanceIssueModel = (MaintenanceIssueModel) o;
    return Objects.equals(this.documents, maintenanceIssueModel.documents) &&
        Objects.equals(this.externalID, maintenanceIssueModel.externalID) &&
        Objects.equals(this.issueFault, maintenanceIssueModel.issueFault) &&
        Objects.equals(this.issueNotes, maintenanceIssueModel.issueNotes) &&
        Objects.equals(this.issuePriority, maintenanceIssueModel.issuePriority) &&
        Objects.equals(this.issueTitle, maintenanceIssueModel.issueTitle) &&
        Objects.equals(this.propertyAddress1, maintenanceIssueModel.propertyAddress1) &&
        Objects.equals(this.propertyAddress2, maintenanceIssueModel.propertyAddress2) &&
        Objects.equals(this.propertyAddress3, maintenanceIssueModel.propertyAddress3) &&
        Objects.equals(this.propertyAddress4, maintenanceIssueModel.propertyAddress4) &&
        Objects.equals(this.propertyCountry, maintenanceIssueModel.propertyCountry) &&
        Objects.equals(this.propertyPostcode, maintenanceIssueModel.propertyPostcode) &&
        Objects.equals(this.reportedAt, maintenanceIssueModel.reportedAt) &&
        Objects.equals(this.tenantEMailAddress, maintenanceIssueModel.tenantEMailAddress) &&
        Objects.equals(this.tenantForename, maintenanceIssueModel.tenantForename) &&
        Objects.equals(this.tenantPhonePrimary, maintenanceIssueModel.tenantPhonePrimary) &&
        Objects.equals(this.tenantPhoneSecondary, maintenanceIssueModel.tenantPhoneSecondary) &&
        Objects.equals(this.tenantPresenceRequested, maintenanceIssueModel.tenantPresenceRequested) &&
        Objects.equals(this.tenantSurname, maintenanceIssueModel.tenantSurname) &&
        Objects.equals(this.tenantTitle, maintenanceIssueModel.tenantTitle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documents, externalID, issueFault, issueNotes, issuePriority, issueTitle, propertyAddress1, propertyAddress2, propertyAddress3, propertyAddress4, propertyCountry, propertyPostcode, reportedAt, tenantEMailAddress, tenantForename, tenantPhonePrimary, tenantPhoneSecondary, tenantPresenceRequested, tenantSurname, tenantTitle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaintenanceIssueModel {\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    externalID: ").append(toIndentedString(externalID)).append("\n");
    sb.append("    issueFault: ").append(toIndentedString(issueFault)).append("\n");
    sb.append("    issueNotes: ").append(toIndentedString(issueNotes)).append("\n");
    sb.append("    issuePriority: ").append(toIndentedString(issuePriority)).append("\n");
    sb.append("    issueTitle: ").append(toIndentedString(issueTitle)).append("\n");
    sb.append("    propertyAddress1: ").append(toIndentedString(propertyAddress1)).append("\n");
    sb.append("    propertyAddress2: ").append(toIndentedString(propertyAddress2)).append("\n");
    sb.append("    propertyAddress3: ").append(toIndentedString(propertyAddress3)).append("\n");
    sb.append("    propertyAddress4: ").append(toIndentedString(propertyAddress4)).append("\n");
    sb.append("    propertyCountry: ").append(toIndentedString(propertyCountry)).append("\n");
    sb.append("    propertyPostcode: ").append(toIndentedString(propertyPostcode)).append("\n");
    sb.append("    reportedAt: ").append(toIndentedString(reportedAt)).append("\n");
    sb.append("    tenantEMailAddress: ").append(toIndentedString(tenantEMailAddress)).append("\n");
    sb.append("    tenantForename: ").append(toIndentedString(tenantForename)).append("\n");
    sb.append("    tenantPhonePrimary: ").append(toIndentedString(tenantPhonePrimary)).append("\n");
    sb.append("    tenantPhoneSecondary: ").append(toIndentedString(tenantPhoneSecondary)).append("\n");
    sb.append("    tenantPresenceRequested: ").append(toIndentedString(tenantPresenceRequested)).append("\n");
    sb.append("    tenantSurname: ").append(toIndentedString(tenantSurname)).append("\n");
    sb.append("    tenantTitle: ").append(toIndentedString(tenantTitle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Documents");
    openapiFields.add("ExternalID");
    openapiFields.add("IssueFault");
    openapiFields.add("IssueNotes");
    openapiFields.add("IssuePriority");
    openapiFields.add("IssueTitle");
    openapiFields.add("PropertyAddress1");
    openapiFields.add("PropertyAddress2");
    openapiFields.add("PropertyAddress3");
    openapiFields.add("PropertyAddress4");
    openapiFields.add("PropertyCountry");
    openapiFields.add("PropertyPostcode");
    openapiFields.add("ReportedAt");
    openapiFields.add("TenantEMailAddress");
    openapiFields.add("TenantForename");
    openapiFields.add("TenantPhonePrimary");
    openapiFields.add("TenantPhoneSecondary");
    openapiFields.add("TenantPresenceRequested");
    openapiFields.add("TenantSurname");
    openapiFields.add("TenantTitle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MaintenanceIssueModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MaintenanceIssueModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MaintenanceIssueModel is not found in the empty JSON string", MaintenanceIssueModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MaintenanceIssueModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MaintenanceIssueModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Documents") != null && !jsonObj.get("Documents").isJsonNull()) {
        JsonArray jsonArraydocuments = jsonObj.getAsJsonArray("Documents");
        if (jsonArraydocuments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Documents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Documents` to be an array in the JSON string but got `%s`", jsonObj.get("Documents").toString()));
          }

          // validate the optional field `Documents` (array)
          for (int i = 0; i < jsonArraydocuments.size(); i++) {
            MaintenanceDocumentModel.validateJsonElement(jsonArraydocuments.get(i));
          };
        }
      }
      if ((jsonObj.get("ExternalID") != null && !jsonObj.get("ExternalID").isJsonNull()) && !jsonObj.get("ExternalID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExternalID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExternalID").toString()));
      }
      if ((jsonObj.get("IssueFault") != null && !jsonObj.get("IssueFault").isJsonNull()) && !jsonObj.get("IssueFault").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IssueFault` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IssueFault").toString()));
      }
      if ((jsonObj.get("IssueNotes") != null && !jsonObj.get("IssueNotes").isJsonNull()) && !jsonObj.get("IssueNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IssueNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IssueNotes").toString()));
      }
      if ((jsonObj.get("IssuePriority") != null && !jsonObj.get("IssuePriority").isJsonNull()) && !jsonObj.get("IssuePriority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IssuePriority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IssuePriority").toString()));
      }
      // validate the optional field `IssuePriority`
      if (jsonObj.get("IssuePriority") != null && !jsonObj.get("IssuePriority").isJsonNull()) {
        IssuePriorityEnum.validateJsonElement(jsonObj.get("IssuePriority"));
      }
      if ((jsonObj.get("IssueTitle") != null && !jsonObj.get("IssueTitle").isJsonNull()) && !jsonObj.get("IssueTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IssueTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IssueTitle").toString()));
      }
      if ((jsonObj.get("PropertyAddress1") != null && !jsonObj.get("PropertyAddress1").isJsonNull()) && !jsonObj.get("PropertyAddress1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PropertyAddress1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PropertyAddress1").toString()));
      }
      if ((jsonObj.get("PropertyAddress2") != null && !jsonObj.get("PropertyAddress2").isJsonNull()) && !jsonObj.get("PropertyAddress2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PropertyAddress2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PropertyAddress2").toString()));
      }
      if ((jsonObj.get("PropertyAddress3") != null && !jsonObj.get("PropertyAddress3").isJsonNull()) && !jsonObj.get("PropertyAddress3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PropertyAddress3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PropertyAddress3").toString()));
      }
      if ((jsonObj.get("PropertyAddress4") != null && !jsonObj.get("PropertyAddress4").isJsonNull()) && !jsonObj.get("PropertyAddress4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PropertyAddress4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PropertyAddress4").toString()));
      }
      if ((jsonObj.get("PropertyCountry") != null && !jsonObj.get("PropertyCountry").isJsonNull()) && !jsonObj.get("PropertyCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PropertyCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PropertyCountry").toString()));
      }
      if ((jsonObj.get("PropertyPostcode") != null && !jsonObj.get("PropertyPostcode").isJsonNull()) && !jsonObj.get("PropertyPostcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PropertyPostcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PropertyPostcode").toString()));
      }
      if ((jsonObj.get("TenantEMailAddress") != null && !jsonObj.get("TenantEMailAddress").isJsonNull()) && !jsonObj.get("TenantEMailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TenantEMailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TenantEMailAddress").toString()));
      }
      if ((jsonObj.get("TenantForename") != null && !jsonObj.get("TenantForename").isJsonNull()) && !jsonObj.get("TenantForename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TenantForename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TenantForename").toString()));
      }
      if ((jsonObj.get("TenantPhonePrimary") != null && !jsonObj.get("TenantPhonePrimary").isJsonNull()) && !jsonObj.get("TenantPhonePrimary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TenantPhonePrimary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TenantPhonePrimary").toString()));
      }
      if ((jsonObj.get("TenantPhoneSecondary") != null && !jsonObj.get("TenantPhoneSecondary").isJsonNull()) && !jsonObj.get("TenantPhoneSecondary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TenantPhoneSecondary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TenantPhoneSecondary").toString()));
      }
      if ((jsonObj.get("TenantSurname") != null && !jsonObj.get("TenantSurname").isJsonNull()) && !jsonObj.get("TenantSurname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TenantSurname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TenantSurname").toString()));
      }
      if ((jsonObj.get("TenantTitle") != null && !jsonObj.get("TenantTitle").isJsonNull()) && !jsonObj.get("TenantTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TenantTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TenantTitle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MaintenanceIssueModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MaintenanceIssueModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MaintenanceIssueModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MaintenanceIssueModel.class));

       return (TypeAdapter<T>) new TypeAdapter<MaintenanceIssueModel>() {
           @Override
           public void write(JsonWriter out, MaintenanceIssueModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MaintenanceIssueModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MaintenanceIssueModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MaintenanceIssueModel
   * @throws IOException if the JSON string is invalid with respect to MaintenanceIssueModel
   */
  public static MaintenanceIssueModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MaintenanceIssueModel.class);
  }

  /**
   * Convert an instance of MaintenanceIssueModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

