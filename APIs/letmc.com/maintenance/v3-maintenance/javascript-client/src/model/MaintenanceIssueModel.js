/**
 * agentOS API V3, Maintenance Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-maintenance
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MaintenanceDocumentModel from './MaintenanceDocumentModel';

/**
 * The MaintenanceIssueModel model module.
 * @module model/MaintenanceIssueModel
 * @version v3-maintenance
 */
class MaintenanceIssueModel {
    /**
     * Constructs a new <code>MaintenanceIssueModel</code>.
     * Submission Model - Handles all fields required to submit an online maintenance job
     * @alias module:model/MaintenanceIssueModel
     */
    constructor() { 
        
        MaintenanceIssueModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MaintenanceIssueModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MaintenanceIssueModel} obj Optional instance to populate.
     * @return {module:model/MaintenanceIssueModel} The populated <code>MaintenanceIssueModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MaintenanceIssueModel();

            if (data.hasOwnProperty('Documents')) {
                obj['Documents'] = ApiClient.convertToType(data['Documents'], [MaintenanceDocumentModel]);
            }
            if (data.hasOwnProperty('ExternalID')) {
                obj['ExternalID'] = ApiClient.convertToType(data['ExternalID'], 'String');
            }
            if (data.hasOwnProperty('IssueFault')) {
                obj['IssueFault'] = ApiClient.convertToType(data['IssueFault'], 'String');
            }
            if (data.hasOwnProperty('IssueNotes')) {
                obj['IssueNotes'] = ApiClient.convertToType(data['IssueNotes'], 'String');
            }
            if (data.hasOwnProperty('IssuePriority')) {
                obj['IssuePriority'] = ApiClient.convertToType(data['IssuePriority'], 'String');
            }
            if (data.hasOwnProperty('IssueTitle')) {
                obj['IssueTitle'] = ApiClient.convertToType(data['IssueTitle'], 'String');
            }
            if (data.hasOwnProperty('PropertyAddress1')) {
                obj['PropertyAddress1'] = ApiClient.convertToType(data['PropertyAddress1'], 'String');
            }
            if (data.hasOwnProperty('PropertyAddress2')) {
                obj['PropertyAddress2'] = ApiClient.convertToType(data['PropertyAddress2'], 'String');
            }
            if (data.hasOwnProperty('PropertyAddress3')) {
                obj['PropertyAddress3'] = ApiClient.convertToType(data['PropertyAddress3'], 'String');
            }
            if (data.hasOwnProperty('PropertyAddress4')) {
                obj['PropertyAddress4'] = ApiClient.convertToType(data['PropertyAddress4'], 'String');
            }
            if (data.hasOwnProperty('PropertyCountry')) {
                obj['PropertyCountry'] = ApiClient.convertToType(data['PropertyCountry'], 'String');
            }
            if (data.hasOwnProperty('PropertyPostcode')) {
                obj['PropertyPostcode'] = ApiClient.convertToType(data['PropertyPostcode'], 'String');
            }
            if (data.hasOwnProperty('ReportedAt')) {
                obj['ReportedAt'] = ApiClient.convertToType(data['ReportedAt'], 'Date');
            }
            if (data.hasOwnProperty('TenantEMailAddress')) {
                obj['TenantEMailAddress'] = ApiClient.convertToType(data['TenantEMailAddress'], 'String');
            }
            if (data.hasOwnProperty('TenantForename')) {
                obj['TenantForename'] = ApiClient.convertToType(data['TenantForename'], 'String');
            }
            if (data.hasOwnProperty('TenantPhonePrimary')) {
                obj['TenantPhonePrimary'] = ApiClient.convertToType(data['TenantPhonePrimary'], 'String');
            }
            if (data.hasOwnProperty('TenantPhoneSecondary')) {
                obj['TenantPhoneSecondary'] = ApiClient.convertToType(data['TenantPhoneSecondary'], 'String');
            }
            if (data.hasOwnProperty('TenantPresenceRequested')) {
                obj['TenantPresenceRequested'] = ApiClient.convertToType(data['TenantPresenceRequested'], 'Boolean');
            }
            if (data.hasOwnProperty('TenantSurname')) {
                obj['TenantSurname'] = ApiClient.convertToType(data['TenantSurname'], 'String');
            }
            if (data.hasOwnProperty('TenantTitle')) {
                obj['TenantTitle'] = ApiClient.convertToType(data['TenantTitle'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MaintenanceIssueModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MaintenanceIssueModel</code>.
     */
    static validateJSON(data) {
        if (data['Documents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Documents'])) {
                throw new Error("Expected the field `Documents` to be an array in the JSON data but got " + data['Documents']);
            }
            // validate the optional field `Documents` (array)
            for (const item of data['Documents']) {
                MaintenanceDocumentModel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ExternalID'] && !(typeof data['ExternalID'] === 'string' || data['ExternalID'] instanceof String)) {
            throw new Error("Expected the field `ExternalID` to be a primitive type in the JSON string but got " + data['ExternalID']);
        }
        // ensure the json data is a string
        if (data['IssueFault'] && !(typeof data['IssueFault'] === 'string' || data['IssueFault'] instanceof String)) {
            throw new Error("Expected the field `IssueFault` to be a primitive type in the JSON string but got " + data['IssueFault']);
        }
        // ensure the json data is a string
        if (data['IssueNotes'] && !(typeof data['IssueNotes'] === 'string' || data['IssueNotes'] instanceof String)) {
            throw new Error("Expected the field `IssueNotes` to be a primitive type in the JSON string but got " + data['IssueNotes']);
        }
        // ensure the json data is a string
        if (data['IssuePriority'] && !(typeof data['IssuePriority'] === 'string' || data['IssuePriority'] instanceof String)) {
            throw new Error("Expected the field `IssuePriority` to be a primitive type in the JSON string but got " + data['IssuePriority']);
        }
        // ensure the json data is a string
        if (data['IssueTitle'] && !(typeof data['IssueTitle'] === 'string' || data['IssueTitle'] instanceof String)) {
            throw new Error("Expected the field `IssueTitle` to be a primitive type in the JSON string but got " + data['IssueTitle']);
        }
        // ensure the json data is a string
        if (data['PropertyAddress1'] && !(typeof data['PropertyAddress1'] === 'string' || data['PropertyAddress1'] instanceof String)) {
            throw new Error("Expected the field `PropertyAddress1` to be a primitive type in the JSON string but got " + data['PropertyAddress1']);
        }
        // ensure the json data is a string
        if (data['PropertyAddress2'] && !(typeof data['PropertyAddress2'] === 'string' || data['PropertyAddress2'] instanceof String)) {
            throw new Error("Expected the field `PropertyAddress2` to be a primitive type in the JSON string but got " + data['PropertyAddress2']);
        }
        // ensure the json data is a string
        if (data['PropertyAddress3'] && !(typeof data['PropertyAddress3'] === 'string' || data['PropertyAddress3'] instanceof String)) {
            throw new Error("Expected the field `PropertyAddress3` to be a primitive type in the JSON string but got " + data['PropertyAddress3']);
        }
        // ensure the json data is a string
        if (data['PropertyAddress4'] && !(typeof data['PropertyAddress4'] === 'string' || data['PropertyAddress4'] instanceof String)) {
            throw new Error("Expected the field `PropertyAddress4` to be a primitive type in the JSON string but got " + data['PropertyAddress4']);
        }
        // ensure the json data is a string
        if (data['PropertyCountry'] && !(typeof data['PropertyCountry'] === 'string' || data['PropertyCountry'] instanceof String)) {
            throw new Error("Expected the field `PropertyCountry` to be a primitive type in the JSON string but got " + data['PropertyCountry']);
        }
        // ensure the json data is a string
        if (data['PropertyPostcode'] && !(typeof data['PropertyPostcode'] === 'string' || data['PropertyPostcode'] instanceof String)) {
            throw new Error("Expected the field `PropertyPostcode` to be a primitive type in the JSON string but got " + data['PropertyPostcode']);
        }
        // ensure the json data is a string
        if (data['TenantEMailAddress'] && !(typeof data['TenantEMailAddress'] === 'string' || data['TenantEMailAddress'] instanceof String)) {
            throw new Error("Expected the field `TenantEMailAddress` to be a primitive type in the JSON string but got " + data['TenantEMailAddress']);
        }
        // ensure the json data is a string
        if (data['TenantForename'] && !(typeof data['TenantForename'] === 'string' || data['TenantForename'] instanceof String)) {
            throw new Error("Expected the field `TenantForename` to be a primitive type in the JSON string but got " + data['TenantForename']);
        }
        // ensure the json data is a string
        if (data['TenantPhonePrimary'] && !(typeof data['TenantPhonePrimary'] === 'string' || data['TenantPhonePrimary'] instanceof String)) {
            throw new Error("Expected the field `TenantPhonePrimary` to be a primitive type in the JSON string but got " + data['TenantPhonePrimary']);
        }
        // ensure the json data is a string
        if (data['TenantPhoneSecondary'] && !(typeof data['TenantPhoneSecondary'] === 'string' || data['TenantPhoneSecondary'] instanceof String)) {
            throw new Error("Expected the field `TenantPhoneSecondary` to be a primitive type in the JSON string but got " + data['TenantPhoneSecondary']);
        }
        // ensure the json data is a string
        if (data['TenantSurname'] && !(typeof data['TenantSurname'] === 'string' || data['TenantSurname'] instanceof String)) {
            throw new Error("Expected the field `TenantSurname` to be a primitive type in the JSON string but got " + data['TenantSurname']);
        }
        // ensure the json data is a string
        if (data['TenantTitle'] && !(typeof data['TenantTitle'] === 'string' || data['TenantTitle'] instanceof String)) {
            throw new Error("Expected the field `TenantTitle` to be a primitive type in the JSON string but got " + data['TenantTitle']);
        }

        return true;
    }


}



/**
 * Documents linked to a submitted maintenance job
 * @member {Array.<module:model/MaintenanceDocumentModel>} Documents
 */
MaintenanceIssueModel.prototype['Documents'] = undefined;

/**
 * ID used externally to manage jobs before sending to the system. This has a 10 character limit.
 * @member {String} ExternalID
 */
MaintenanceIssueModel.prototype['ExternalID'] = undefined;

/**
 * The fault title if applicable
 * @member {String} IssueFault
 */
MaintenanceIssueModel.prototype['IssueFault'] = undefined;

/**
 * Fault notes
 * @member {String} IssueNotes
 */
MaintenanceIssueModel.prototype['IssueNotes'] = undefined;

/**
 * The priority of the job (Defaults to 'Low' if incorrect value or empty)
 * @member {module:model/MaintenanceIssueModel.IssuePriorityEnum} IssuePriority
 */
MaintenanceIssueModel.prototype['IssuePriority'] = undefined;

/**
 * The title of the issue
 * @member {String} IssueTitle
 */
MaintenanceIssueModel.prototype['IssueTitle'] = undefined;

/**
 * The first line of the property address
 * @member {String} PropertyAddress1
 */
MaintenanceIssueModel.prototype['PropertyAddress1'] = undefined;

/**
 * The second line of the property address
 * @member {String} PropertyAddress2
 */
MaintenanceIssueModel.prototype['PropertyAddress2'] = undefined;

/**
 * The third line of the property address
 * @member {String} PropertyAddress3
 */
MaintenanceIssueModel.prototype['PropertyAddress3'] = undefined;

/**
 * The forth line of the property address
 * @member {String} PropertyAddress4
 */
MaintenanceIssueModel.prototype['PropertyAddress4'] = undefined;

/**
 * The country the property is located
 * @member {String} PropertyCountry
 */
MaintenanceIssueModel.prototype['PropertyCountry'] = undefined;

/**
 * The property postcode
 * @member {String} PropertyPostcode
 */
MaintenanceIssueModel.prototype['PropertyPostcode'] = undefined;

/**
 * The date the job was reported
 * @member {Date} ReportedAt
 */
MaintenanceIssueModel.prototype['ReportedAt'] = undefined;

/**
 * The email address of the Tenant
 * @member {String} TenantEMailAddress
 */
MaintenanceIssueModel.prototype['TenantEMailAddress'] = undefined;

/**
 * The forename of the Tenant
 * @member {String} TenantForename
 */
MaintenanceIssueModel.prototype['TenantForename'] = undefined;

/**
 * The primary phone number of the Tenant
 * @member {String} TenantPhonePrimary
 */
MaintenanceIssueModel.prototype['TenantPhonePrimary'] = undefined;

/**
 * The secondary phone number of the Tenant
 * @member {String} TenantPhoneSecondary
 */
MaintenanceIssueModel.prototype['TenantPhoneSecondary'] = undefined;

/**
 * Is the Tenant’s presence requested during the maintenance visit? (Defaults to “false” if incorrect value or empty)
 * @member {Boolean} TenantPresenceRequested
 */
MaintenanceIssueModel.prototype['TenantPresenceRequested'] = undefined;

/**
 * The surname of the Tenant
 * @member {String} TenantSurname
 */
MaintenanceIssueModel.prototype['TenantSurname'] = undefined;

/**
 * The title of the Tenant
 * @member {String} TenantTitle
 */
MaintenanceIssueModel.prototype['TenantTitle'] = undefined;





/**
 * Allowed values for the <code>IssuePriority</code> property.
 * @enum {String}
 * @readonly
 */
MaintenanceIssueModel['IssuePriorityEnum'] = {

    /**
     * value: "Low"
     * @const
     */
    "Low": "Low",

    /**
     * value: "Medium"
     * @const
     */
    "Medium": "Medium",

    /**
     * value: "High"
     * @const
     */
    "High": "High"
};



export default MaintenanceIssueModel;

