# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.maintenance_document_model import MaintenanceDocumentModel
from openapi_server import util


class MaintenanceIssueModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, documents: List[MaintenanceDocumentModel]=None, external_id: str=None, issue_fault: str=None, issue_notes: str=None, issue_priority: str=None, issue_title: str=None, property_address1: str=None, property_address2: str=None, property_address3: str=None, property_address4: str=None, property_country: str=None, property_postcode: str=None, reported_at: datetime=None, tenant_e_mail_address: str=None, tenant_forename: str=None, tenant_phone_primary: str=None, tenant_phone_secondary: str=None, tenant_presence_requested: bool=None, tenant_surname: str=None, tenant_title: str=None):
        """MaintenanceIssueModel - a model defined in OpenAPI

        :param documents: The documents of this MaintenanceIssueModel.
        :param external_id: The external_id of this MaintenanceIssueModel.
        :param issue_fault: The issue_fault of this MaintenanceIssueModel.
        :param issue_notes: The issue_notes of this MaintenanceIssueModel.
        :param issue_priority: The issue_priority of this MaintenanceIssueModel.
        :param issue_title: The issue_title of this MaintenanceIssueModel.
        :param property_address1: The property_address1 of this MaintenanceIssueModel.
        :param property_address2: The property_address2 of this MaintenanceIssueModel.
        :param property_address3: The property_address3 of this MaintenanceIssueModel.
        :param property_address4: The property_address4 of this MaintenanceIssueModel.
        :param property_country: The property_country of this MaintenanceIssueModel.
        :param property_postcode: The property_postcode of this MaintenanceIssueModel.
        :param reported_at: The reported_at of this MaintenanceIssueModel.
        :param tenant_e_mail_address: The tenant_e_mail_address of this MaintenanceIssueModel.
        :param tenant_forename: The tenant_forename of this MaintenanceIssueModel.
        :param tenant_phone_primary: The tenant_phone_primary of this MaintenanceIssueModel.
        :param tenant_phone_secondary: The tenant_phone_secondary of this MaintenanceIssueModel.
        :param tenant_presence_requested: The tenant_presence_requested of this MaintenanceIssueModel.
        :param tenant_surname: The tenant_surname of this MaintenanceIssueModel.
        :param tenant_title: The tenant_title of this MaintenanceIssueModel.
        """
        self.openapi_types = {
            'documents': List[MaintenanceDocumentModel],
            'external_id': str,
            'issue_fault': str,
            'issue_notes': str,
            'issue_priority': str,
            'issue_title': str,
            'property_address1': str,
            'property_address2': str,
            'property_address3': str,
            'property_address4': str,
            'property_country': str,
            'property_postcode': str,
            'reported_at': datetime,
            'tenant_e_mail_address': str,
            'tenant_forename': str,
            'tenant_phone_primary': str,
            'tenant_phone_secondary': str,
            'tenant_presence_requested': bool,
            'tenant_surname': str,
            'tenant_title': str
        }

        self.attribute_map = {
            'documents': 'Documents',
            'external_id': 'ExternalID',
            'issue_fault': 'IssueFault',
            'issue_notes': 'IssueNotes',
            'issue_priority': 'IssuePriority',
            'issue_title': 'IssueTitle',
            'property_address1': 'PropertyAddress1',
            'property_address2': 'PropertyAddress2',
            'property_address3': 'PropertyAddress3',
            'property_address4': 'PropertyAddress4',
            'property_country': 'PropertyCountry',
            'property_postcode': 'PropertyPostcode',
            'reported_at': 'ReportedAt',
            'tenant_e_mail_address': 'TenantEMailAddress',
            'tenant_forename': 'TenantForename',
            'tenant_phone_primary': 'TenantPhonePrimary',
            'tenant_phone_secondary': 'TenantPhoneSecondary',
            'tenant_presence_requested': 'TenantPresenceRequested',
            'tenant_surname': 'TenantSurname',
            'tenant_title': 'TenantTitle'
        }

        self._documents = documents
        self._external_id = external_id
        self._issue_fault = issue_fault
        self._issue_notes = issue_notes
        self._issue_priority = issue_priority
        self._issue_title = issue_title
        self._property_address1 = property_address1
        self._property_address2 = property_address2
        self._property_address3 = property_address3
        self._property_address4 = property_address4
        self._property_country = property_country
        self._property_postcode = property_postcode
        self._reported_at = reported_at
        self._tenant_e_mail_address = tenant_e_mail_address
        self._tenant_forename = tenant_forename
        self._tenant_phone_primary = tenant_phone_primary
        self._tenant_phone_secondary = tenant_phone_secondary
        self._tenant_presence_requested = tenant_presence_requested
        self._tenant_surname = tenant_surname
        self._tenant_title = tenant_title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaintenanceIssueModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaintenanceIssueModel of this MaintenanceIssueModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def documents(self):
        """Gets the documents of this MaintenanceIssueModel.

        Documents linked to a submitted maintenance job

        :return: The documents of this MaintenanceIssueModel.
        :rtype: List[MaintenanceDocumentModel]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this MaintenanceIssueModel.

        Documents linked to a submitted maintenance job

        :param documents: The documents of this MaintenanceIssueModel.
        :type documents: List[MaintenanceDocumentModel]
        """

        self._documents = documents

    @property
    def external_id(self):
        """Gets the external_id of this MaintenanceIssueModel.

        ID used externally to manage jobs before sending to the system. This has a 10 character limit.

        :return: The external_id of this MaintenanceIssueModel.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this MaintenanceIssueModel.

        ID used externally to manage jobs before sending to the system. This has a 10 character limit.

        :param external_id: The external_id of this MaintenanceIssueModel.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def issue_fault(self):
        """Gets the issue_fault of this MaintenanceIssueModel.

        The fault title if applicable

        :return: The issue_fault of this MaintenanceIssueModel.
        :rtype: str
        """
        return self._issue_fault

    @issue_fault.setter
    def issue_fault(self, issue_fault):
        """Sets the issue_fault of this MaintenanceIssueModel.

        The fault title if applicable

        :param issue_fault: The issue_fault of this MaintenanceIssueModel.
        :type issue_fault: str
        """

        self._issue_fault = issue_fault

    @property
    def issue_notes(self):
        """Gets the issue_notes of this MaintenanceIssueModel.

        Fault notes

        :return: The issue_notes of this MaintenanceIssueModel.
        :rtype: str
        """
        return self._issue_notes

    @issue_notes.setter
    def issue_notes(self, issue_notes):
        """Sets the issue_notes of this MaintenanceIssueModel.

        Fault notes

        :param issue_notes: The issue_notes of this MaintenanceIssueModel.
        :type issue_notes: str
        """

        self._issue_notes = issue_notes

    @property
    def issue_priority(self):
        """Gets the issue_priority of this MaintenanceIssueModel.

        The priority of the job (Defaults to 'Low' if incorrect value or empty)

        :return: The issue_priority of this MaintenanceIssueModel.
        :rtype: str
        """
        return self._issue_priority

    @issue_priority.setter
    def issue_priority(self, issue_priority):
        """Sets the issue_priority of this MaintenanceIssueModel.

        The priority of the job (Defaults to 'Low' if incorrect value or empty)

        :param issue_priority: The issue_priority of this MaintenanceIssueModel.
        :type issue_priority: str
        """
        allowed_values = ["Low", "Medium", "High"]  # noqa: E501
        if issue_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `issue_priority` ({0}), must be one of {1}"
                .format(issue_priority, allowed_values)
            )

        self._issue_priority = issue_priority

    @property
    def issue_title(self):
        """Gets the issue_title of this MaintenanceIssueModel.

        The title of the issue

        :return: The issue_title of this MaintenanceIssueModel.
        :rtype: str
        """
        return self._issue_title

    @issue_title.setter
    def issue_title(self, issue_title):
        """Sets the issue_title of this MaintenanceIssueModel.

        The title of the issue

        :param issue_title: The issue_title of this MaintenanceIssueModel.
        :type issue_title: str
        """

        self._issue_title = issue_title

    @property
    def property_address1(self):
        """Gets the property_address1 of this MaintenanceIssueModel.

        The first line of the property address

        :return: The property_address1 of this MaintenanceIssueModel.
        :rtype: str
        """
        return self._property_address1

    @property_address1.setter
    def property_address1(self, property_address1):
        """Sets the property_address1 of this MaintenanceIssueModel.

        The first line of the property address

        :param property_address1: The property_address1 of this MaintenanceIssueModel.
        :type property_address1: str
        """

        self._property_address1 = property_address1

    @property
    def property_address2(self):
        """Gets the property_address2 of this MaintenanceIssueModel.

        The second line of the property address

        :return: The property_address2 of this MaintenanceIssueModel.
        :rtype: str
        """
        return self._property_address2

    @property_address2.setter
    def property_address2(self, property_address2):
        """Sets the property_address2 of this MaintenanceIssueModel.

        The second line of the property address

        :param property_address2: The property_address2 of this MaintenanceIssueModel.
        :type property_address2: str
        """

        self._property_address2 = property_address2

    @property
    def property_address3(self):
        """Gets the property_address3 of this MaintenanceIssueModel.

        The third line of the property address

        :return: The property_address3 of this MaintenanceIssueModel.
        :rtype: str
        """
        return self._property_address3

    @property_address3.setter
    def property_address3(self, property_address3):
        """Sets the property_address3 of this MaintenanceIssueModel.

        The third line of the property address

        :param property_address3: The property_address3 of this MaintenanceIssueModel.
        :type property_address3: str
        """

        self._property_address3 = property_address3

    @property
    def property_address4(self):
        """Gets the property_address4 of this MaintenanceIssueModel.

        The forth line of the property address

        :return: The property_address4 of this MaintenanceIssueModel.
        :rtype: str
        """
        return self._property_address4

    @property_address4.setter
    def property_address4(self, property_address4):
        """Sets the property_address4 of this MaintenanceIssueModel.

        The forth line of the property address

        :param property_address4: The property_address4 of this MaintenanceIssueModel.
        :type property_address4: str
        """

        self._property_address4 = property_address4

    @property
    def property_country(self):
        """Gets the property_country of this MaintenanceIssueModel.

        The country the property is located

        :return: The property_country of this MaintenanceIssueModel.
        :rtype: str
        """
        return self._property_country

    @property_country.setter
    def property_country(self, property_country):
        """Sets the property_country of this MaintenanceIssueModel.

        The country the property is located

        :param property_country: The property_country of this MaintenanceIssueModel.
        :type property_country: str
        """

        self._property_country = property_country

    @property
    def property_postcode(self):
        """Gets the property_postcode of this MaintenanceIssueModel.

        The property postcode

        :return: The property_postcode of this MaintenanceIssueModel.
        :rtype: str
        """
        return self._property_postcode

    @property_postcode.setter
    def property_postcode(self, property_postcode):
        """Sets the property_postcode of this MaintenanceIssueModel.

        The property postcode

        :param property_postcode: The property_postcode of this MaintenanceIssueModel.
        :type property_postcode: str
        """

        self._property_postcode = property_postcode

    @property
    def reported_at(self):
        """Gets the reported_at of this MaintenanceIssueModel.

        The date the job was reported

        :return: The reported_at of this MaintenanceIssueModel.
        :rtype: datetime
        """
        return self._reported_at

    @reported_at.setter
    def reported_at(self, reported_at):
        """Sets the reported_at of this MaintenanceIssueModel.

        The date the job was reported

        :param reported_at: The reported_at of this MaintenanceIssueModel.
        :type reported_at: datetime
        """

        self._reported_at = reported_at

    @property
    def tenant_e_mail_address(self):
        """Gets the tenant_e_mail_address of this MaintenanceIssueModel.

        The email address of the Tenant

        :return: The tenant_e_mail_address of this MaintenanceIssueModel.
        :rtype: str
        """
        return self._tenant_e_mail_address

    @tenant_e_mail_address.setter
    def tenant_e_mail_address(self, tenant_e_mail_address):
        """Sets the tenant_e_mail_address of this MaintenanceIssueModel.

        The email address of the Tenant

        :param tenant_e_mail_address: The tenant_e_mail_address of this MaintenanceIssueModel.
        :type tenant_e_mail_address: str
        """

        self._tenant_e_mail_address = tenant_e_mail_address

    @property
    def tenant_forename(self):
        """Gets the tenant_forename of this MaintenanceIssueModel.

        The forename of the Tenant

        :return: The tenant_forename of this MaintenanceIssueModel.
        :rtype: str
        """
        return self._tenant_forename

    @tenant_forename.setter
    def tenant_forename(self, tenant_forename):
        """Sets the tenant_forename of this MaintenanceIssueModel.

        The forename of the Tenant

        :param tenant_forename: The tenant_forename of this MaintenanceIssueModel.
        :type tenant_forename: str
        """

        self._tenant_forename = tenant_forename

    @property
    def tenant_phone_primary(self):
        """Gets the tenant_phone_primary of this MaintenanceIssueModel.

        The primary phone number of the Tenant

        :return: The tenant_phone_primary of this MaintenanceIssueModel.
        :rtype: str
        """
        return self._tenant_phone_primary

    @tenant_phone_primary.setter
    def tenant_phone_primary(self, tenant_phone_primary):
        """Sets the tenant_phone_primary of this MaintenanceIssueModel.

        The primary phone number of the Tenant

        :param tenant_phone_primary: The tenant_phone_primary of this MaintenanceIssueModel.
        :type tenant_phone_primary: str
        """

        self._tenant_phone_primary = tenant_phone_primary

    @property
    def tenant_phone_secondary(self):
        """Gets the tenant_phone_secondary of this MaintenanceIssueModel.

        The secondary phone number of the Tenant

        :return: The tenant_phone_secondary of this MaintenanceIssueModel.
        :rtype: str
        """
        return self._tenant_phone_secondary

    @tenant_phone_secondary.setter
    def tenant_phone_secondary(self, tenant_phone_secondary):
        """Sets the tenant_phone_secondary of this MaintenanceIssueModel.

        The secondary phone number of the Tenant

        :param tenant_phone_secondary: The tenant_phone_secondary of this MaintenanceIssueModel.
        :type tenant_phone_secondary: str
        """

        self._tenant_phone_secondary = tenant_phone_secondary

    @property
    def tenant_presence_requested(self):
        """Gets the tenant_presence_requested of this MaintenanceIssueModel.

        Is the Tenant’s presence requested during the maintenance visit? (Defaults to “false” if incorrect value or empty)

        :return: The tenant_presence_requested of this MaintenanceIssueModel.
        :rtype: bool
        """
        return self._tenant_presence_requested

    @tenant_presence_requested.setter
    def tenant_presence_requested(self, tenant_presence_requested):
        """Sets the tenant_presence_requested of this MaintenanceIssueModel.

        Is the Tenant’s presence requested during the maintenance visit? (Defaults to “false” if incorrect value or empty)

        :param tenant_presence_requested: The tenant_presence_requested of this MaintenanceIssueModel.
        :type tenant_presence_requested: bool
        """

        self._tenant_presence_requested = tenant_presence_requested

    @property
    def tenant_surname(self):
        """Gets the tenant_surname of this MaintenanceIssueModel.

        The surname of the Tenant

        :return: The tenant_surname of this MaintenanceIssueModel.
        :rtype: str
        """
        return self._tenant_surname

    @tenant_surname.setter
    def tenant_surname(self, tenant_surname):
        """Sets the tenant_surname of this MaintenanceIssueModel.

        The surname of the Tenant

        :param tenant_surname: The tenant_surname of this MaintenanceIssueModel.
        :type tenant_surname: str
        """

        self._tenant_surname = tenant_surname

    @property
    def tenant_title(self):
        """Gets the tenant_title of this MaintenanceIssueModel.

        The title of the Tenant

        :return: The tenant_title of this MaintenanceIssueModel.
        :rtype: str
        """
        return self._tenant_title

    @tenant_title.setter
    def tenant_title(self, tenant_title):
        """Sets the tenant_title of this MaintenanceIssueModel.

        The title of the Tenant

        :param tenant_title: The tenant_title of this MaintenanceIssueModel.
        :type tenant_title: str
        """

        self._tenant_title = tenant_title
