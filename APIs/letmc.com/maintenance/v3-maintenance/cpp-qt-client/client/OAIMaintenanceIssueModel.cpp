/**
 * agentOS API V3, Maintenance Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-maintenance
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaintenanceIssueModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaintenanceIssueModel::OAIMaintenanceIssueModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaintenanceIssueModel::OAIMaintenanceIssueModel() {
    this->initializeModel();
}

OAIMaintenanceIssueModel::~OAIMaintenanceIssueModel() {}

void OAIMaintenanceIssueModel::initializeModel() {

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_issue_fault_isSet = false;
    m_issue_fault_isValid = false;

    m_issue_notes_isSet = false;
    m_issue_notes_isValid = false;

    m_issue_priority_isSet = false;
    m_issue_priority_isValid = false;

    m_issue_title_isSet = false;
    m_issue_title_isValid = false;

    m_property_address1_isSet = false;
    m_property_address1_isValid = false;

    m_property_address2_isSet = false;
    m_property_address2_isValid = false;

    m_property_address3_isSet = false;
    m_property_address3_isValid = false;

    m_property_address4_isSet = false;
    m_property_address4_isValid = false;

    m_property_country_isSet = false;
    m_property_country_isValid = false;

    m_property_postcode_isSet = false;
    m_property_postcode_isValid = false;

    m_reported_at_isSet = false;
    m_reported_at_isValid = false;

    m_tenant_e_mail_address_isSet = false;
    m_tenant_e_mail_address_isValid = false;

    m_tenant_forename_isSet = false;
    m_tenant_forename_isValid = false;

    m_tenant_phone_primary_isSet = false;
    m_tenant_phone_primary_isValid = false;

    m_tenant_phone_secondary_isSet = false;
    m_tenant_phone_secondary_isValid = false;

    m_tenant_presence_requested_isSet = false;
    m_tenant_presence_requested_isValid = false;

    m_tenant_surname_isSet = false;
    m_tenant_surname_isValid = false;

    m_tenant_title_isSet = false;
    m_tenant_title_isValid = false;
}

void OAIMaintenanceIssueModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaintenanceIssueModel::fromJsonObject(QJsonObject json) {

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("Documents")]);
    m_documents_isSet = !json[QString("Documents")].isNull() && m_documents_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("ExternalID")]);
    m_external_id_isSet = !json[QString("ExternalID")].isNull() && m_external_id_isValid;

    m_issue_fault_isValid = ::OpenAPI::fromJsonValue(m_issue_fault, json[QString("IssueFault")]);
    m_issue_fault_isSet = !json[QString("IssueFault")].isNull() && m_issue_fault_isValid;

    m_issue_notes_isValid = ::OpenAPI::fromJsonValue(m_issue_notes, json[QString("IssueNotes")]);
    m_issue_notes_isSet = !json[QString("IssueNotes")].isNull() && m_issue_notes_isValid;

    m_issue_priority_isValid = ::OpenAPI::fromJsonValue(m_issue_priority, json[QString("IssuePriority")]);
    m_issue_priority_isSet = !json[QString("IssuePriority")].isNull() && m_issue_priority_isValid;

    m_issue_title_isValid = ::OpenAPI::fromJsonValue(m_issue_title, json[QString("IssueTitle")]);
    m_issue_title_isSet = !json[QString("IssueTitle")].isNull() && m_issue_title_isValid;

    m_property_address1_isValid = ::OpenAPI::fromJsonValue(m_property_address1, json[QString("PropertyAddress1")]);
    m_property_address1_isSet = !json[QString("PropertyAddress1")].isNull() && m_property_address1_isValid;

    m_property_address2_isValid = ::OpenAPI::fromJsonValue(m_property_address2, json[QString("PropertyAddress2")]);
    m_property_address2_isSet = !json[QString("PropertyAddress2")].isNull() && m_property_address2_isValid;

    m_property_address3_isValid = ::OpenAPI::fromJsonValue(m_property_address3, json[QString("PropertyAddress3")]);
    m_property_address3_isSet = !json[QString("PropertyAddress3")].isNull() && m_property_address3_isValid;

    m_property_address4_isValid = ::OpenAPI::fromJsonValue(m_property_address4, json[QString("PropertyAddress4")]);
    m_property_address4_isSet = !json[QString("PropertyAddress4")].isNull() && m_property_address4_isValid;

    m_property_country_isValid = ::OpenAPI::fromJsonValue(m_property_country, json[QString("PropertyCountry")]);
    m_property_country_isSet = !json[QString("PropertyCountry")].isNull() && m_property_country_isValid;

    m_property_postcode_isValid = ::OpenAPI::fromJsonValue(m_property_postcode, json[QString("PropertyPostcode")]);
    m_property_postcode_isSet = !json[QString("PropertyPostcode")].isNull() && m_property_postcode_isValid;

    m_reported_at_isValid = ::OpenAPI::fromJsonValue(m_reported_at, json[QString("ReportedAt")]);
    m_reported_at_isSet = !json[QString("ReportedAt")].isNull() && m_reported_at_isValid;

    m_tenant_e_mail_address_isValid = ::OpenAPI::fromJsonValue(m_tenant_e_mail_address, json[QString("TenantEMailAddress")]);
    m_tenant_e_mail_address_isSet = !json[QString("TenantEMailAddress")].isNull() && m_tenant_e_mail_address_isValid;

    m_tenant_forename_isValid = ::OpenAPI::fromJsonValue(m_tenant_forename, json[QString("TenantForename")]);
    m_tenant_forename_isSet = !json[QString("TenantForename")].isNull() && m_tenant_forename_isValid;

    m_tenant_phone_primary_isValid = ::OpenAPI::fromJsonValue(m_tenant_phone_primary, json[QString("TenantPhonePrimary")]);
    m_tenant_phone_primary_isSet = !json[QString("TenantPhonePrimary")].isNull() && m_tenant_phone_primary_isValid;

    m_tenant_phone_secondary_isValid = ::OpenAPI::fromJsonValue(m_tenant_phone_secondary, json[QString("TenantPhoneSecondary")]);
    m_tenant_phone_secondary_isSet = !json[QString("TenantPhoneSecondary")].isNull() && m_tenant_phone_secondary_isValid;

    m_tenant_presence_requested_isValid = ::OpenAPI::fromJsonValue(m_tenant_presence_requested, json[QString("TenantPresenceRequested")]);
    m_tenant_presence_requested_isSet = !json[QString("TenantPresenceRequested")].isNull() && m_tenant_presence_requested_isValid;

    m_tenant_surname_isValid = ::OpenAPI::fromJsonValue(m_tenant_surname, json[QString("TenantSurname")]);
    m_tenant_surname_isSet = !json[QString("TenantSurname")].isNull() && m_tenant_surname_isValid;

    m_tenant_title_isValid = ::OpenAPI::fromJsonValue(m_tenant_title, json[QString("TenantTitle")]);
    m_tenant_title_isSet = !json[QString("TenantTitle")].isNull() && m_tenant_title_isValid;
}

QString OAIMaintenanceIssueModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaintenanceIssueModel::asJsonObject() const {
    QJsonObject obj;
    if (m_documents.size() > 0) {
        obj.insert(QString("Documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("ExternalID"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_issue_fault_isSet) {
        obj.insert(QString("IssueFault"), ::OpenAPI::toJsonValue(m_issue_fault));
    }
    if (m_issue_notes_isSet) {
        obj.insert(QString("IssueNotes"), ::OpenAPI::toJsonValue(m_issue_notes));
    }
    if (m_issue_priority_isSet) {
        obj.insert(QString("IssuePriority"), ::OpenAPI::toJsonValue(m_issue_priority));
    }
    if (m_issue_title_isSet) {
        obj.insert(QString("IssueTitle"), ::OpenAPI::toJsonValue(m_issue_title));
    }
    if (m_property_address1_isSet) {
        obj.insert(QString("PropertyAddress1"), ::OpenAPI::toJsonValue(m_property_address1));
    }
    if (m_property_address2_isSet) {
        obj.insert(QString("PropertyAddress2"), ::OpenAPI::toJsonValue(m_property_address2));
    }
    if (m_property_address3_isSet) {
        obj.insert(QString("PropertyAddress3"), ::OpenAPI::toJsonValue(m_property_address3));
    }
    if (m_property_address4_isSet) {
        obj.insert(QString("PropertyAddress4"), ::OpenAPI::toJsonValue(m_property_address4));
    }
    if (m_property_country_isSet) {
        obj.insert(QString("PropertyCountry"), ::OpenAPI::toJsonValue(m_property_country));
    }
    if (m_property_postcode_isSet) {
        obj.insert(QString("PropertyPostcode"), ::OpenAPI::toJsonValue(m_property_postcode));
    }
    if (m_reported_at_isSet) {
        obj.insert(QString("ReportedAt"), ::OpenAPI::toJsonValue(m_reported_at));
    }
    if (m_tenant_e_mail_address_isSet) {
        obj.insert(QString("TenantEMailAddress"), ::OpenAPI::toJsonValue(m_tenant_e_mail_address));
    }
    if (m_tenant_forename_isSet) {
        obj.insert(QString("TenantForename"), ::OpenAPI::toJsonValue(m_tenant_forename));
    }
    if (m_tenant_phone_primary_isSet) {
        obj.insert(QString("TenantPhonePrimary"), ::OpenAPI::toJsonValue(m_tenant_phone_primary));
    }
    if (m_tenant_phone_secondary_isSet) {
        obj.insert(QString("TenantPhoneSecondary"), ::OpenAPI::toJsonValue(m_tenant_phone_secondary));
    }
    if (m_tenant_presence_requested_isSet) {
        obj.insert(QString("TenantPresenceRequested"), ::OpenAPI::toJsonValue(m_tenant_presence_requested));
    }
    if (m_tenant_surname_isSet) {
        obj.insert(QString("TenantSurname"), ::OpenAPI::toJsonValue(m_tenant_surname));
    }
    if (m_tenant_title_isSet) {
        obj.insert(QString("TenantTitle"), ::OpenAPI::toJsonValue(m_tenant_title));
    }
    return obj;
}

QList<OAIMaintenanceDocumentModel> OAIMaintenanceIssueModel::getDocuments() const {
    return m_documents;
}
void OAIMaintenanceIssueModel::setDocuments(const QList<OAIMaintenanceDocumentModel> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIMaintenanceIssueModel::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIMaintenanceIssueModel::is_documents_Valid() const{
    return m_documents_isValid;
}

QString OAIMaintenanceIssueModel::getExternalId() const {
    return m_external_id;
}
void OAIMaintenanceIssueModel::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIMaintenanceIssueModel::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIMaintenanceIssueModel::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAIMaintenanceIssueModel::getIssueFault() const {
    return m_issue_fault;
}
void OAIMaintenanceIssueModel::setIssueFault(const QString &issue_fault) {
    m_issue_fault = issue_fault;
    m_issue_fault_isSet = true;
}

bool OAIMaintenanceIssueModel::is_issue_fault_Set() const{
    return m_issue_fault_isSet;
}

bool OAIMaintenanceIssueModel::is_issue_fault_Valid() const{
    return m_issue_fault_isValid;
}

QString OAIMaintenanceIssueModel::getIssueNotes() const {
    return m_issue_notes;
}
void OAIMaintenanceIssueModel::setIssueNotes(const QString &issue_notes) {
    m_issue_notes = issue_notes;
    m_issue_notes_isSet = true;
}

bool OAIMaintenanceIssueModel::is_issue_notes_Set() const{
    return m_issue_notes_isSet;
}

bool OAIMaintenanceIssueModel::is_issue_notes_Valid() const{
    return m_issue_notes_isValid;
}

QString OAIMaintenanceIssueModel::getIssuePriority() const {
    return m_issue_priority;
}
void OAIMaintenanceIssueModel::setIssuePriority(const QString &issue_priority) {
    m_issue_priority = issue_priority;
    m_issue_priority_isSet = true;
}

bool OAIMaintenanceIssueModel::is_issue_priority_Set() const{
    return m_issue_priority_isSet;
}

bool OAIMaintenanceIssueModel::is_issue_priority_Valid() const{
    return m_issue_priority_isValid;
}

QString OAIMaintenanceIssueModel::getIssueTitle() const {
    return m_issue_title;
}
void OAIMaintenanceIssueModel::setIssueTitle(const QString &issue_title) {
    m_issue_title = issue_title;
    m_issue_title_isSet = true;
}

bool OAIMaintenanceIssueModel::is_issue_title_Set() const{
    return m_issue_title_isSet;
}

bool OAIMaintenanceIssueModel::is_issue_title_Valid() const{
    return m_issue_title_isValid;
}

QString OAIMaintenanceIssueModel::getPropertyAddress1() const {
    return m_property_address1;
}
void OAIMaintenanceIssueModel::setPropertyAddress1(const QString &property_address1) {
    m_property_address1 = property_address1;
    m_property_address1_isSet = true;
}

bool OAIMaintenanceIssueModel::is_property_address1_Set() const{
    return m_property_address1_isSet;
}

bool OAIMaintenanceIssueModel::is_property_address1_Valid() const{
    return m_property_address1_isValid;
}

QString OAIMaintenanceIssueModel::getPropertyAddress2() const {
    return m_property_address2;
}
void OAIMaintenanceIssueModel::setPropertyAddress2(const QString &property_address2) {
    m_property_address2 = property_address2;
    m_property_address2_isSet = true;
}

bool OAIMaintenanceIssueModel::is_property_address2_Set() const{
    return m_property_address2_isSet;
}

bool OAIMaintenanceIssueModel::is_property_address2_Valid() const{
    return m_property_address2_isValid;
}

QString OAIMaintenanceIssueModel::getPropertyAddress3() const {
    return m_property_address3;
}
void OAIMaintenanceIssueModel::setPropertyAddress3(const QString &property_address3) {
    m_property_address3 = property_address3;
    m_property_address3_isSet = true;
}

bool OAIMaintenanceIssueModel::is_property_address3_Set() const{
    return m_property_address3_isSet;
}

bool OAIMaintenanceIssueModel::is_property_address3_Valid() const{
    return m_property_address3_isValid;
}

QString OAIMaintenanceIssueModel::getPropertyAddress4() const {
    return m_property_address4;
}
void OAIMaintenanceIssueModel::setPropertyAddress4(const QString &property_address4) {
    m_property_address4 = property_address4;
    m_property_address4_isSet = true;
}

bool OAIMaintenanceIssueModel::is_property_address4_Set() const{
    return m_property_address4_isSet;
}

bool OAIMaintenanceIssueModel::is_property_address4_Valid() const{
    return m_property_address4_isValid;
}

QString OAIMaintenanceIssueModel::getPropertyCountry() const {
    return m_property_country;
}
void OAIMaintenanceIssueModel::setPropertyCountry(const QString &property_country) {
    m_property_country = property_country;
    m_property_country_isSet = true;
}

bool OAIMaintenanceIssueModel::is_property_country_Set() const{
    return m_property_country_isSet;
}

bool OAIMaintenanceIssueModel::is_property_country_Valid() const{
    return m_property_country_isValid;
}

QString OAIMaintenanceIssueModel::getPropertyPostcode() const {
    return m_property_postcode;
}
void OAIMaintenanceIssueModel::setPropertyPostcode(const QString &property_postcode) {
    m_property_postcode = property_postcode;
    m_property_postcode_isSet = true;
}

bool OAIMaintenanceIssueModel::is_property_postcode_Set() const{
    return m_property_postcode_isSet;
}

bool OAIMaintenanceIssueModel::is_property_postcode_Valid() const{
    return m_property_postcode_isValid;
}

QDateTime OAIMaintenanceIssueModel::getReportedAt() const {
    return m_reported_at;
}
void OAIMaintenanceIssueModel::setReportedAt(const QDateTime &reported_at) {
    m_reported_at = reported_at;
    m_reported_at_isSet = true;
}

bool OAIMaintenanceIssueModel::is_reported_at_Set() const{
    return m_reported_at_isSet;
}

bool OAIMaintenanceIssueModel::is_reported_at_Valid() const{
    return m_reported_at_isValid;
}

QString OAIMaintenanceIssueModel::getTenantEMailAddress() const {
    return m_tenant_e_mail_address;
}
void OAIMaintenanceIssueModel::setTenantEMailAddress(const QString &tenant_e_mail_address) {
    m_tenant_e_mail_address = tenant_e_mail_address;
    m_tenant_e_mail_address_isSet = true;
}

bool OAIMaintenanceIssueModel::is_tenant_e_mail_address_Set() const{
    return m_tenant_e_mail_address_isSet;
}

bool OAIMaintenanceIssueModel::is_tenant_e_mail_address_Valid() const{
    return m_tenant_e_mail_address_isValid;
}

QString OAIMaintenanceIssueModel::getTenantForename() const {
    return m_tenant_forename;
}
void OAIMaintenanceIssueModel::setTenantForename(const QString &tenant_forename) {
    m_tenant_forename = tenant_forename;
    m_tenant_forename_isSet = true;
}

bool OAIMaintenanceIssueModel::is_tenant_forename_Set() const{
    return m_tenant_forename_isSet;
}

bool OAIMaintenanceIssueModel::is_tenant_forename_Valid() const{
    return m_tenant_forename_isValid;
}

QString OAIMaintenanceIssueModel::getTenantPhonePrimary() const {
    return m_tenant_phone_primary;
}
void OAIMaintenanceIssueModel::setTenantPhonePrimary(const QString &tenant_phone_primary) {
    m_tenant_phone_primary = tenant_phone_primary;
    m_tenant_phone_primary_isSet = true;
}

bool OAIMaintenanceIssueModel::is_tenant_phone_primary_Set() const{
    return m_tenant_phone_primary_isSet;
}

bool OAIMaintenanceIssueModel::is_tenant_phone_primary_Valid() const{
    return m_tenant_phone_primary_isValid;
}

QString OAIMaintenanceIssueModel::getTenantPhoneSecondary() const {
    return m_tenant_phone_secondary;
}
void OAIMaintenanceIssueModel::setTenantPhoneSecondary(const QString &tenant_phone_secondary) {
    m_tenant_phone_secondary = tenant_phone_secondary;
    m_tenant_phone_secondary_isSet = true;
}

bool OAIMaintenanceIssueModel::is_tenant_phone_secondary_Set() const{
    return m_tenant_phone_secondary_isSet;
}

bool OAIMaintenanceIssueModel::is_tenant_phone_secondary_Valid() const{
    return m_tenant_phone_secondary_isValid;
}

bool OAIMaintenanceIssueModel::isTenantPresenceRequested() const {
    return m_tenant_presence_requested;
}
void OAIMaintenanceIssueModel::setTenantPresenceRequested(const bool &tenant_presence_requested) {
    m_tenant_presence_requested = tenant_presence_requested;
    m_tenant_presence_requested_isSet = true;
}

bool OAIMaintenanceIssueModel::is_tenant_presence_requested_Set() const{
    return m_tenant_presence_requested_isSet;
}

bool OAIMaintenanceIssueModel::is_tenant_presence_requested_Valid() const{
    return m_tenant_presence_requested_isValid;
}

QString OAIMaintenanceIssueModel::getTenantSurname() const {
    return m_tenant_surname;
}
void OAIMaintenanceIssueModel::setTenantSurname(const QString &tenant_surname) {
    m_tenant_surname = tenant_surname;
    m_tenant_surname_isSet = true;
}

bool OAIMaintenanceIssueModel::is_tenant_surname_Set() const{
    return m_tenant_surname_isSet;
}

bool OAIMaintenanceIssueModel::is_tenant_surname_Valid() const{
    return m_tenant_surname_isValid;
}

QString OAIMaintenanceIssueModel::getTenantTitle() const {
    return m_tenant_title;
}
void OAIMaintenanceIssueModel::setTenantTitle(const QString &tenant_title) {
    m_tenant_title = tenant_title;
    m_tenant_title_isSet = true;
}

bool OAIMaintenanceIssueModel::is_tenant_title_Set() const{
    return m_tenant_title_isSet;
}

bool OAIMaintenanceIssueModel::is_tenant_title_Valid() const{
    return m_tenant_title_isValid;
}

bool OAIMaintenanceIssueModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_fault_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_address3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_address4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reported_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_e_mail_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_forename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_phone_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_phone_secondary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_presence_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_surname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaintenanceIssueModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
