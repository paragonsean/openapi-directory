/**
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDiaryControllerApi_H
#define OAI_OAIDiaryControllerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDiaryAllocationModel.h"
#include "OAIDiaryAllocationModelResults.h"
#include "OAIDiaryAppointmentModel.h"
#include "OAIDiaryAppointmentModelResults.h"
#include "OAIDiaryAppointmentTypeModel.h"
#include "OAIDiaryAppointmentTypeModelResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDiaryControllerApi : public QObject {
    Q_OBJECT

public:
    OAIDiaryControllerApi(const int timeOut = 0);
    ~OAIDiaryControllerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  diary_allocation_id QString [required]
    */
    virtual void v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGet(const QString &short_name, const QString &diary_allocation_id);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void v2Tier2ShortNameDiaryAllocationsGet(const QString &short_name, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  diary_appointment_id QString [required]
    */
    virtual void v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGet(const QString &short_name, const QString &diary_appointment_id);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void v2Tier2ShortNameDiaryAppointmentsGet(const QString &short_name, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  diary_appointment_type_id QString [required]
    */
    virtual void v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGet(const QString &short_name, const QString &diary_appointment_type_id);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void v2Tier2ShortNameDiaryAppointmenttypesGet(const QString &short_name, const qint32 &offset, const qint32 &count);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetCallback(OAIHttpRequestWorker *worker);
    void v2Tier2ShortNameDiaryAllocationsGetCallback(OAIHttpRequestWorker *worker);
    void v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetCallback(OAIHttpRequestWorker *worker);
    void v2Tier2ShortNameDiaryAppointmentsGetCallback(OAIHttpRequestWorker *worker);
    void v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetCallback(OAIHttpRequestWorker *worker);
    void v2Tier2ShortNameDiaryAppointmenttypesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetSignal(OAIDiaryAllocationModel summary);
    void v2Tier2ShortNameDiaryAllocationsGetSignal(OAIDiaryAllocationModelResults summary);
    void v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetSignal(OAIDiaryAppointmentModel summary);
    void v2Tier2ShortNameDiaryAppointmentsGetSignal(OAIDiaryAppointmentModelResults summary);
    void v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetSignal(OAIDiaryAppointmentTypeModel summary);
    void v2Tier2ShortNameDiaryAppointmenttypesGetSignal(OAIDiaryAppointmentTypeModelResults summary);


    void v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetSignalFull(OAIHttpRequestWorker *worker, OAIDiaryAllocationModel summary);
    void v2Tier2ShortNameDiaryAllocationsGetSignalFull(OAIHttpRequestWorker *worker, OAIDiaryAllocationModelResults summary);
    void v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetSignalFull(OAIHttpRequestWorker *worker, OAIDiaryAppointmentModel summary);
    void v2Tier2ShortNameDiaryAppointmentsGetSignalFull(OAIHttpRequestWorker *worker, OAIDiaryAppointmentModelResults summary);
    void v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetSignalFull(OAIHttpRequestWorker *worker, OAIDiaryAppointmentTypeModel summary);
    void v2Tier2ShortNameDiaryAppointmenttypesGetSignalFull(OAIHttpRequestWorker *worker, OAIDiaryAppointmentTypeModelResults summary);

    Q_DECL_DEPRECATED_X("Use v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetSignalError() instead")
    void v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetSignalE(OAIDiaryAllocationModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetSignalError(OAIDiaryAllocationModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier2ShortNameDiaryAllocationsGetSignalError() instead")
    void v2Tier2ShortNameDiaryAllocationsGetSignalE(OAIDiaryAllocationModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier2ShortNameDiaryAllocationsGetSignalError(OAIDiaryAllocationModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetSignalError() instead")
    void v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetSignalE(OAIDiaryAppointmentModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetSignalError(OAIDiaryAppointmentModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier2ShortNameDiaryAppointmentsGetSignalError() instead")
    void v2Tier2ShortNameDiaryAppointmentsGetSignalE(OAIDiaryAppointmentModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier2ShortNameDiaryAppointmentsGetSignalError(OAIDiaryAppointmentModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetSignalError() instead")
    void v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetSignalE(OAIDiaryAppointmentTypeModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetSignalError(OAIDiaryAppointmentTypeModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier2ShortNameDiaryAppointmenttypesGetSignalError() instead")
    void v2Tier2ShortNameDiaryAppointmenttypesGetSignalE(OAIDiaryAppointmentTypeModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier2ShortNameDiaryAppointmenttypesGetSignalError(OAIDiaryAppointmentTypeModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetSignalErrorFull() instead")
    void v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier2ShortNameDiaryAllocationsGetSignalErrorFull() instead")
    void v2Tier2ShortNameDiaryAllocationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier2ShortNameDiaryAllocationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetSignalErrorFull() instead")
    void v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier2ShortNameDiaryAppointmentsGetSignalErrorFull() instead")
    void v2Tier2ShortNameDiaryAppointmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier2ShortNameDiaryAppointmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetSignalErrorFull() instead")
    void v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier2ShortNameDiaryAppointmenttypesGetSignalErrorFull() instead")
    void v2Tier2ShortNameDiaryAppointmenttypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier2ShortNameDiaryAppointmenttypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
