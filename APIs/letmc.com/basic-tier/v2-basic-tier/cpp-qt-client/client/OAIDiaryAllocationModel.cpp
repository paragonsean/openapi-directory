/**
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiaryAllocationModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiaryAllocationModel::OAIDiaryAllocationModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiaryAllocationModel::OAIDiaryAllocationModel() {
    this->initializeModel();
}

OAIDiaryAllocationModel::~OAIDiaryAllocationModel() {}

void OAIDiaryAllocationModel::initializeModel() {

    m_appointment_type_isSet = false;
    m_appointment_type_isValid = false;

    m_e_tag_isSet = false;
    m_e_tag_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_oid_isSet = false;
    m_oid_isValid = false;

    m_staff_isSet = false;
    m_staff_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAIDiaryAllocationModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiaryAllocationModel::fromJsonObject(QJsonObject json) {

    m_appointment_type_isValid = ::OpenAPI::fromJsonValue(m_appointment_type, json[QString("AppointmentType")]);
    m_appointment_type_isSet = !json[QString("AppointmentType")].isNull() && m_appointment_type_isValid;

    m_e_tag_isValid = ::OpenAPI::fromJsonValue(m_e_tag, json[QString("ETag")]);
    m_e_tag_isSet = !json[QString("ETag")].isNull() && m_e_tag_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("End")]);
    m_end_isSet = !json[QString("End")].isNull() && m_end_isValid;

    m_oid_isValid = ::OpenAPI::fromJsonValue(m_oid, json[QString("OID")]);
    m_oid_isSet = !json[QString("OID")].isNull() && m_oid_isValid;

    m_staff_isValid = ::OpenAPI::fromJsonValue(m_staff, json[QString("Staff")]);
    m_staff_isSet = !json[QString("Staff")].isNull() && m_staff_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("Start")]);
    m_start_isSet = !json[QString("Start")].isNull() && m_start_isValid;
}

QString OAIDiaryAllocationModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiaryAllocationModel::asJsonObject() const {
    QJsonObject obj;
    if (m_appointment_type_isSet) {
        obj.insert(QString("AppointmentType"), ::OpenAPI::toJsonValue(m_appointment_type));
    }
    if (m_e_tag_isSet) {
        obj.insert(QString("ETag"), ::OpenAPI::toJsonValue(m_e_tag));
    }
    if (m_end_isSet) {
        obj.insert(QString("End"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_oid_isSet) {
        obj.insert(QString("OID"), ::OpenAPI::toJsonValue(m_oid));
    }
    if (m_staff_isSet) {
        obj.insert(QString("Staff"), ::OpenAPI::toJsonValue(m_staff));
    }
    if (m_start_isSet) {
        obj.insert(QString("Start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

QString OAIDiaryAllocationModel::getAppointmentType() const {
    return m_appointment_type;
}
void OAIDiaryAllocationModel::setAppointmentType(const QString &appointment_type) {
    m_appointment_type = appointment_type;
    m_appointment_type_isSet = true;
}

bool OAIDiaryAllocationModel::is_appointment_type_Set() const{
    return m_appointment_type_isSet;
}

bool OAIDiaryAllocationModel::is_appointment_type_Valid() const{
    return m_appointment_type_isValid;
}

QString OAIDiaryAllocationModel::getETag() const {
    return m_e_tag;
}
void OAIDiaryAllocationModel::setETag(const QString &e_tag) {
    m_e_tag = e_tag;
    m_e_tag_isSet = true;
}

bool OAIDiaryAllocationModel::is_e_tag_Set() const{
    return m_e_tag_isSet;
}

bool OAIDiaryAllocationModel::is_e_tag_Valid() const{
    return m_e_tag_isValid;
}

QDateTime OAIDiaryAllocationModel::getEnd() const {
    return m_end;
}
void OAIDiaryAllocationModel::setEnd(const QDateTime &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIDiaryAllocationModel::is_end_Set() const{
    return m_end_isSet;
}

bool OAIDiaryAllocationModel::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIDiaryAllocationModel::getOid() const {
    return m_oid;
}
void OAIDiaryAllocationModel::setOid(const QString &oid) {
    m_oid = oid;
    m_oid_isSet = true;
}

bool OAIDiaryAllocationModel::is_oid_Set() const{
    return m_oid_isSet;
}

bool OAIDiaryAllocationModel::is_oid_Valid() const{
    return m_oid_isValid;
}

QString OAIDiaryAllocationModel::getStaff() const {
    return m_staff;
}
void OAIDiaryAllocationModel::setStaff(const QString &staff) {
    m_staff = staff;
    m_staff_isSet = true;
}

bool OAIDiaryAllocationModel::is_staff_Set() const{
    return m_staff_isSet;
}

bool OAIDiaryAllocationModel::is_staff_Valid() const{
    return m_staff_isValid;
}

QDateTime OAIDiaryAllocationModel::getStart() const {
    return m_start;
}
void OAIDiaryAllocationModel::setStart(const QDateTime &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIDiaryAllocationModel::is_start_Set() const{
    return m_start_isSet;
}

bool OAIDiaryAllocationModel::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIDiaryAllocationModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appointment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_staff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiaryAllocationModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
