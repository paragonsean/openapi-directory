/**
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPropertyRoomModel.h
 *
 * A single room (bedroom) property structure.
 */

#ifndef OAIPropertyRoomModel_H
#define OAIPropertyRoomModel_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPropertyRoomModel : public OAIObject {
public:
    OAIPropertyRoomModel();
    OAIPropertyRoomModel(QString json);
    ~OAIPropertyRoomModel() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArea() const;
    void setArea(const QString &area);
    bool is_area_Set() const;
    bool is_area_Valid() const;

    QString getBranch() const;
    void setBranch(const QString &branch);
    bool is_branch_Set() const;
    bool is_branch_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getETag() const;
    void setETag(const QString &e_tag);
    bool is_e_tag_Set() const;
    bool is_e_tag_Valid() const;

    QString getFullAddress() const;
    void setFullAddress(const QString &full_address);
    bool is_full_address_Set() const;
    bool is_full_address_Valid() const;

    QString getGlobalReference() const;
    void setGlobalReference(const QString &global_reference);
    bool is_global_reference_Set() const;
    bool is_global_reference_Valid() const;

    qint32 getHeightCentimeters() const;
    void setHeightCentimeters(const qint32 &height_centimeters);
    bool is_height_centimeters_Set() const;
    bool is_height_centimeters_Valid() const;

    qint32 getHeightMeters() const;
    void setHeightMeters(const qint32 &height_meters);
    bool is_height_meters_Set() const;
    bool is_height_meters_Valid() const;

    qint32 getLengthCentimeters() const;
    void setLengthCentimeters(const qint32 &length_centimeters);
    bool is_length_centimeters_Set() const;
    bool is_length_centimeters_Valid() const;

    qint32 getLengthMeters() const;
    void setLengthMeters(const qint32 &length_meters);
    bool is_length_meters_Set() const;
    bool is_length_meters_Valid() const;

    QString getMainPhoto() const;
    void setMainPhoto(const QString &main_photo);
    bool is_main_photo_Set() const;
    bool is_main_photo_Valid() const;

    QString getManagedByStaff() const;
    void setManagedByStaff(const QString &managed_by_staff);
    bool is_managed_by_staff_Set() const;
    bool is_managed_by_staff_Valid() const;

    QString getOid() const;
    void setOid(const QString &oid);
    bool is_oid_Set() const;
    bool is_oid_Valid() const;

    QString getPropertySource() const;
    void setPropertySource(const QString &property_source);
    bool is_property_source_Set() const;
    bool is_property_source_Valid() const;

    QString getRoomFloor() const;
    void setRoomFloor(const QString &room_floor);
    bool is_room_floor_Set() const;
    bool is_room_floor_Valid() const;

    QString getRoomName() const;
    void setRoomName(const QString &room_name);
    bool is_room_name_Set() const;
    bool is_room_name_Valid() const;

    qint32 getWidthCentiMeters() const;
    void setWidthCentiMeters(const qint32 &width_centi_meters);
    bool is_width_centi_meters_Set() const;
    bool is_width_centi_meters_Valid() const;

    qint32 getWidthMeters() const;
    void setWidthMeters(const qint32 &width_meters);
    bool is_width_meters_Set() const;
    bool is_width_meters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_area;
    bool m_area_isSet;
    bool m_area_isValid;

    QString m_branch;
    bool m_branch_isSet;
    bool m_branch_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_e_tag;
    bool m_e_tag_isSet;
    bool m_e_tag_isValid;

    QString m_full_address;
    bool m_full_address_isSet;
    bool m_full_address_isValid;

    QString m_global_reference;
    bool m_global_reference_isSet;
    bool m_global_reference_isValid;

    qint32 m_height_centimeters;
    bool m_height_centimeters_isSet;
    bool m_height_centimeters_isValid;

    qint32 m_height_meters;
    bool m_height_meters_isSet;
    bool m_height_meters_isValid;

    qint32 m_length_centimeters;
    bool m_length_centimeters_isSet;
    bool m_length_centimeters_isValid;

    qint32 m_length_meters;
    bool m_length_meters_isSet;
    bool m_length_meters_isValid;

    QString m_main_photo;
    bool m_main_photo_isSet;
    bool m_main_photo_isValid;

    QString m_managed_by_staff;
    bool m_managed_by_staff_isSet;
    bool m_managed_by_staff_isValid;

    QString m_oid;
    bool m_oid_isSet;
    bool m_oid_isValid;

    QString m_property_source;
    bool m_property_source_isSet;
    bool m_property_source_isValid;

    QString m_room_floor;
    bool m_room_floor_isSet;
    bool m_room_floor_isValid;

    QString m_room_name;
    bool m_room_name_isSet;
    bool m_room_name_isValid;

    qint32 m_width_centi_meters;
    bool m_width_centi_meters_isSet;
    bool m_width_centi_meters_isValid;

    qint32 m_width_meters;
    bool m_width_meters_isSet;
    bool m_width_meters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPropertyRoomModel)

#endif // OAIPropertyRoomModel_H
