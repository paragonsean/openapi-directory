/**
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICountyControllerApi_H
#define OAI_OAICountyControllerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBranchModelResults.h"
#include "OAICountyModel.h"
#include "OAICountyModelResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICountyControllerApi : public QObject {
    Q_OBJECT

public:
    OAICountyControllerApi(const int timeOut = 0);
    ~OAICountyControllerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  county_id QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void countyControllerGetCountiesBranches(const QString &short_name, const QString &county_id, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  county_id QString [required]
    */
    virtual void v2Tier2ShortNameCountyCountiesCountyIDGet(const QString &short_name, const QString &county_id);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void v2Tier2ShortNameCountyCountiesGet(const QString &short_name, const qint32 &offset, const qint32 &count);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void countyControllerGetCountiesBranchesCallback(OAIHttpRequestWorker *worker);
    void v2Tier2ShortNameCountyCountiesCountyIDGetCallback(OAIHttpRequestWorker *worker);
    void v2Tier2ShortNameCountyCountiesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void countyControllerGetCountiesBranchesSignal(OAIBranchModelResults summary);
    void v2Tier2ShortNameCountyCountiesCountyIDGetSignal(OAICountyModel summary);
    void v2Tier2ShortNameCountyCountiesGetSignal(OAICountyModelResults summary);


    void countyControllerGetCountiesBranchesSignalFull(OAIHttpRequestWorker *worker, OAIBranchModelResults summary);
    void v2Tier2ShortNameCountyCountiesCountyIDGetSignalFull(OAIHttpRequestWorker *worker, OAICountyModel summary);
    void v2Tier2ShortNameCountyCountiesGetSignalFull(OAIHttpRequestWorker *worker, OAICountyModelResults summary);

    Q_DECL_DEPRECATED_X("Use countyControllerGetCountiesBranchesSignalError() instead")
    void countyControllerGetCountiesBranchesSignalE(OAIBranchModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countyControllerGetCountiesBranchesSignalError(OAIBranchModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier2ShortNameCountyCountiesCountyIDGetSignalError() instead")
    void v2Tier2ShortNameCountyCountiesCountyIDGetSignalE(OAICountyModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier2ShortNameCountyCountiesCountyIDGetSignalError(OAICountyModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier2ShortNameCountyCountiesGetSignalError() instead")
    void v2Tier2ShortNameCountyCountiesGetSignalE(OAICountyModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier2ShortNameCountyCountiesGetSignalError(OAICountyModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use countyControllerGetCountiesBranchesSignalErrorFull() instead")
    void countyControllerGetCountiesBranchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countyControllerGetCountiesBranchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier2ShortNameCountyCountiesCountyIDGetSignalErrorFull() instead")
    void v2Tier2ShortNameCountyCountiesCountyIDGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier2ShortNameCountyCountiesCountyIDGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2Tier2ShortNameCountyCountiesGetSignalErrorFull() instead")
    void v2Tier2ShortNameCountyCountiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2Tier2ShortNameCountyCountiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
