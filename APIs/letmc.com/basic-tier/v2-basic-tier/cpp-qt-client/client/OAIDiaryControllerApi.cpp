/**
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiaryControllerApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDiaryControllerApi::OAIDiaryControllerApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIDiaryControllerApi::~OAIDiaryControllerApi() {
}

void OAIDiaryControllerApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://live-api.letmc.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGet", defaultConf);
    _serverIndices.insert("v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGet", 0);
    _serverConfigs.insert("v2Tier2ShortNameDiaryAllocationsGet", defaultConf);
    _serverIndices.insert("v2Tier2ShortNameDiaryAllocationsGet", 0);
    _serverConfigs.insert("v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGet", defaultConf);
    _serverIndices.insert("v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGet", 0);
    _serverConfigs.insert("v2Tier2ShortNameDiaryAppointmentsGet", defaultConf);
    _serverIndices.insert("v2Tier2ShortNameDiaryAppointmentsGet", 0);
    _serverConfigs.insert("v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGet", defaultConf);
    _serverIndices.insert("v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGet", 0);
    _serverConfigs.insert("v2Tier2ShortNameDiaryAppointmenttypesGet", defaultConf);
    _serverIndices.insert("v2Tier2ShortNameDiaryAppointmenttypesGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIDiaryControllerApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIDiaryControllerApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIDiaryControllerApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIDiaryControllerApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIDiaryControllerApi::setUsername(const QString &username) {
    _username = username;
}

void OAIDiaryControllerApi::setPassword(const QString &password) {
    _password = password;
}


void OAIDiaryControllerApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIDiaryControllerApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIDiaryControllerApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIDiaryControllerApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDiaryControllerApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDiaryControllerApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIDiaryControllerApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIDiaryControllerApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIDiaryControllerApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIDiaryControllerApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIDiaryControllerApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIDiaryControllerApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIDiaryControllerApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIDiaryControllerApi::v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGet(const QString &short_name, const QString &diary_allocation_id) {
    QString fullPath = QString(_serverConfigs["v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGet"][_serverIndices.value("v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGet")].URL()+"/v2/tier2/{shortName}/diary/allocations/{diaryAllocationID}");
    
    
    {
        QString short_namePathParam("{");
        short_namePathParam.append("shortName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "shortName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"shortName"+pathSuffix : pathPrefix;
        fullPath.replace(short_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(short_name)));
    }
    
    {
        QString diary_allocation_idPathParam("{");
        diary_allocation_idPathParam.append("diaryAllocationID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "diaryAllocationID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"diaryAllocationID"+pathSuffix : pathPrefix;
        fullPath.replace(diary_allocation_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(diary_allocation_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiaryControllerApi::v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetCallback);
    connect(this, &OAIDiaryControllerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiaryControllerApi::v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDiaryAllocationModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetSignal(output);
        Q_EMIT v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetSignalE(output, error_type, error_str);
        Q_EMIT v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetSignalError(output, error_type, error_str);
        Q_EMIT v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiaryControllerApi::v2Tier2ShortNameDiaryAllocationsGet(const QString &short_name, const qint32 &offset, const qint32 &count) {
    QString fullPath = QString(_serverConfigs["v2Tier2ShortNameDiaryAllocationsGet"][_serverIndices.value("v2Tier2ShortNameDiaryAllocationsGet")].URL()+"/v2/tier2/{shortName}/diary/allocations");
    
    
    {
        QString short_namePathParam("{");
        short_namePathParam.append("shortName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "shortName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"shortName"+pathSuffix : pathPrefix;
        fullPath.replace(short_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(short_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "count", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("count")).append(querySuffix).append(QUrl::toPercentEncoding(count));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiaryControllerApi::v2Tier2ShortNameDiaryAllocationsGetCallback);
    connect(this, &OAIDiaryControllerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiaryControllerApi::v2Tier2ShortNameDiaryAllocationsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDiaryAllocationModelResults output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v2Tier2ShortNameDiaryAllocationsGetSignal(output);
        Q_EMIT v2Tier2ShortNameDiaryAllocationsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v2Tier2ShortNameDiaryAllocationsGetSignalE(output, error_type, error_str);
        Q_EMIT v2Tier2ShortNameDiaryAllocationsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v2Tier2ShortNameDiaryAllocationsGetSignalError(output, error_type, error_str);
        Q_EMIT v2Tier2ShortNameDiaryAllocationsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiaryControllerApi::v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGet(const QString &short_name, const QString &diary_appointment_id) {
    QString fullPath = QString(_serverConfigs["v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGet"][_serverIndices.value("v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGet")].URL()+"/v2/tier2/{shortName}/diary/appointments/{diaryAppointmentID}");
    
    
    {
        QString short_namePathParam("{");
        short_namePathParam.append("shortName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "shortName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"shortName"+pathSuffix : pathPrefix;
        fullPath.replace(short_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(short_name)));
    }
    
    {
        QString diary_appointment_idPathParam("{");
        diary_appointment_idPathParam.append("diaryAppointmentID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "diaryAppointmentID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"diaryAppointmentID"+pathSuffix : pathPrefix;
        fullPath.replace(diary_appointment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(diary_appointment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiaryControllerApi::v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetCallback);
    connect(this, &OAIDiaryControllerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiaryControllerApi::v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDiaryAppointmentModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetSignal(output);
        Q_EMIT v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetSignalE(output, error_type, error_str);
        Q_EMIT v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetSignalError(output, error_type, error_str);
        Q_EMIT v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiaryControllerApi::v2Tier2ShortNameDiaryAppointmentsGet(const QString &short_name, const qint32 &offset, const qint32 &count) {
    QString fullPath = QString(_serverConfigs["v2Tier2ShortNameDiaryAppointmentsGet"][_serverIndices.value("v2Tier2ShortNameDiaryAppointmentsGet")].URL()+"/v2/tier2/{shortName}/diary/appointments");
    
    
    {
        QString short_namePathParam("{");
        short_namePathParam.append("shortName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "shortName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"shortName"+pathSuffix : pathPrefix;
        fullPath.replace(short_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(short_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "count", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("count")).append(querySuffix).append(QUrl::toPercentEncoding(count));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiaryControllerApi::v2Tier2ShortNameDiaryAppointmentsGetCallback);
    connect(this, &OAIDiaryControllerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiaryControllerApi::v2Tier2ShortNameDiaryAppointmentsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDiaryAppointmentModelResults output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v2Tier2ShortNameDiaryAppointmentsGetSignal(output);
        Q_EMIT v2Tier2ShortNameDiaryAppointmentsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v2Tier2ShortNameDiaryAppointmentsGetSignalE(output, error_type, error_str);
        Q_EMIT v2Tier2ShortNameDiaryAppointmentsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v2Tier2ShortNameDiaryAppointmentsGetSignalError(output, error_type, error_str);
        Q_EMIT v2Tier2ShortNameDiaryAppointmentsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiaryControllerApi::v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGet(const QString &short_name, const QString &diary_appointment_type_id) {
    QString fullPath = QString(_serverConfigs["v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGet"][_serverIndices.value("v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGet")].URL()+"/v2/tier2/{shortName}/diary/appointmenttypes/{diaryAppointmentTypeID}");
    
    
    {
        QString short_namePathParam("{");
        short_namePathParam.append("shortName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "shortName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"shortName"+pathSuffix : pathPrefix;
        fullPath.replace(short_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(short_name)));
    }
    
    {
        QString diary_appointment_type_idPathParam("{");
        diary_appointment_type_idPathParam.append("diaryAppointmentTypeID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "diaryAppointmentTypeID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"diaryAppointmentTypeID"+pathSuffix : pathPrefix;
        fullPath.replace(diary_appointment_type_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(diary_appointment_type_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiaryControllerApi::v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetCallback);
    connect(this, &OAIDiaryControllerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiaryControllerApi::v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDiaryAppointmentTypeModel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetSignal(output);
        Q_EMIT v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetSignalE(output, error_type, error_str);
        Q_EMIT v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetSignalError(output, error_type, error_str);
        Q_EMIT v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiaryControllerApi::v2Tier2ShortNameDiaryAppointmenttypesGet(const QString &short_name, const qint32 &offset, const qint32 &count) {
    QString fullPath = QString(_serverConfigs["v2Tier2ShortNameDiaryAppointmenttypesGet"][_serverIndices.value("v2Tier2ShortNameDiaryAppointmenttypesGet")].URL()+"/v2/tier2/{shortName}/diary/appointmenttypes");
    
    
    {
        QString short_namePathParam("{");
        short_namePathParam.append("shortName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "shortName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"shortName"+pathSuffix : pathPrefix;
        fullPath.replace(short_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(short_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(offset));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "count", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("count")).append(querySuffix).append(QUrl::toPercentEncoding(count));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDiaryControllerApi::v2Tier2ShortNameDiaryAppointmenttypesGetCallback);
    connect(this, &OAIDiaryControllerApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDiaryControllerApi::v2Tier2ShortNameDiaryAppointmenttypesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDiaryAppointmentTypeModelResults output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v2Tier2ShortNameDiaryAppointmenttypesGetSignal(output);
        Q_EMIT v2Tier2ShortNameDiaryAppointmenttypesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v2Tier2ShortNameDiaryAppointmenttypesGetSignalE(output, error_type, error_str);
        Q_EMIT v2Tier2ShortNameDiaryAppointmenttypesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v2Tier2ShortNameDiaryAppointmenttypesGetSignalError(output, error_type, error_str);
        Q_EMIT v2Tier2ShortNameDiaryAppointmenttypesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDiaryControllerApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
