/**
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhotoModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhotoModel::OAIPhotoModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhotoModel::OAIPhotoModel() {
    this->initializeModel();
}

OAIPhotoModel::~OAIPhotoModel() {}

void OAIPhotoModel::initializeModel() {

    m_e_tag_isSet = false;
    m_e_tag_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_inspection_item_isSet = false;
    m_inspection_item_isValid = false;

    m_interim_inspection_isSet = false;
    m_interim_inspection_isValid = false;

    m_inventory_item_isSet = false;
    m_inventory_item_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_oid_isSet = false;
    m_oid_isValid = false;

    m_photo_number_isSet = false;
    m_photo_number_isValid = false;

    m_photo_type_isSet = false;
    m_photo_type_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;

    m_room_isSet = false;
    m_room_isValid = false;
}

void OAIPhotoModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhotoModel::fromJsonObject(QJsonObject json) {

    m_e_tag_isValid = ::OpenAPI::fromJsonValue(m_e_tag, json[QString("ETag")]);
    m_e_tag_isSet = !json[QString("ETag")].isNull() && m_e_tag_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("FileName")]);
    m_file_name_isSet = !json[QString("FileName")].isNull() && m_file_name_isValid;

    m_inspection_item_isValid = ::OpenAPI::fromJsonValue(m_inspection_item, json[QString("InspectionItem")]);
    m_inspection_item_isSet = !json[QString("InspectionItem")].isNull() && m_inspection_item_isValid;

    m_interim_inspection_isValid = ::OpenAPI::fromJsonValue(m_interim_inspection, json[QString("InterimInspection")]);
    m_interim_inspection_isSet = !json[QString("InterimInspection")].isNull() && m_interim_inspection_isValid;

    m_inventory_item_isValid = ::OpenAPI::fromJsonValue(m_inventory_item, json[QString("InventoryItem")]);
    m_inventory_item_isSet = !json[QString("InventoryItem")].isNull() && m_inventory_item_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_oid_isValid = ::OpenAPI::fromJsonValue(m_oid, json[QString("OID")]);
    m_oid_isSet = !json[QString("OID")].isNull() && m_oid_isValid;

    m_photo_number_isValid = ::OpenAPI::fromJsonValue(m_photo_number, json[QString("PhotoNumber")]);
    m_photo_number_isSet = !json[QString("PhotoNumber")].isNull() && m_photo_number_isValid;

    m_photo_type_isValid = ::OpenAPI::fromJsonValue(m_photo_type, json[QString("PhotoType")]);
    m_photo_type_isSet = !json[QString("PhotoType")].isNull() && m_photo_type_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("Property")]);
    m_property_isSet = !json[QString("Property")].isNull() && m_property_isValid;

    m_room_isValid = ::OpenAPI::fromJsonValue(m_room, json[QString("Room")]);
    m_room_isSet = !json[QString("Room")].isNull() && m_room_isValid;
}

QString OAIPhotoModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhotoModel::asJsonObject() const {
    QJsonObject obj;
    if (m_e_tag_isSet) {
        obj.insert(QString("ETag"), ::OpenAPI::toJsonValue(m_e_tag));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("FileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_inspection_item_isSet) {
        obj.insert(QString("InspectionItem"), ::OpenAPI::toJsonValue(m_inspection_item));
    }
    if (m_interim_inspection_isSet) {
        obj.insert(QString("InterimInspection"), ::OpenAPI::toJsonValue(m_interim_inspection));
    }
    if (m_inventory_item_isSet) {
        obj.insert(QString("InventoryItem"), ::OpenAPI::toJsonValue(m_inventory_item));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_oid_isSet) {
        obj.insert(QString("OID"), ::OpenAPI::toJsonValue(m_oid));
    }
    if (m_photo_number_isSet) {
        obj.insert(QString("PhotoNumber"), ::OpenAPI::toJsonValue(m_photo_number));
    }
    if (m_photo_type_isSet) {
        obj.insert(QString("PhotoType"), ::OpenAPI::toJsonValue(m_photo_type));
    }
    if (m_property_isSet) {
        obj.insert(QString("Property"), ::OpenAPI::toJsonValue(m_property));
    }
    if (m_room_isSet) {
        obj.insert(QString("Room"), ::OpenAPI::toJsonValue(m_room));
    }
    return obj;
}

QString OAIPhotoModel::getETag() const {
    return m_e_tag;
}
void OAIPhotoModel::setETag(const QString &e_tag) {
    m_e_tag = e_tag;
    m_e_tag_isSet = true;
}

bool OAIPhotoModel::is_e_tag_Set() const{
    return m_e_tag_isSet;
}

bool OAIPhotoModel::is_e_tag_Valid() const{
    return m_e_tag_isValid;
}

QString OAIPhotoModel::getFileName() const {
    return m_file_name;
}
void OAIPhotoModel::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIPhotoModel::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIPhotoModel::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIPhotoModel::getInspectionItem() const {
    return m_inspection_item;
}
void OAIPhotoModel::setInspectionItem(const QString &inspection_item) {
    m_inspection_item = inspection_item;
    m_inspection_item_isSet = true;
}

bool OAIPhotoModel::is_inspection_item_Set() const{
    return m_inspection_item_isSet;
}

bool OAIPhotoModel::is_inspection_item_Valid() const{
    return m_inspection_item_isValid;
}

QString OAIPhotoModel::getInterimInspection() const {
    return m_interim_inspection;
}
void OAIPhotoModel::setInterimInspection(const QString &interim_inspection) {
    m_interim_inspection = interim_inspection;
    m_interim_inspection_isSet = true;
}

bool OAIPhotoModel::is_interim_inspection_Set() const{
    return m_interim_inspection_isSet;
}

bool OAIPhotoModel::is_interim_inspection_Valid() const{
    return m_interim_inspection_isValid;
}

QString OAIPhotoModel::getInventoryItem() const {
    return m_inventory_item;
}
void OAIPhotoModel::setInventoryItem(const QString &inventory_item) {
    m_inventory_item = inventory_item;
    m_inventory_item_isSet = true;
}

bool OAIPhotoModel::is_inventory_item_Set() const{
    return m_inventory_item_isSet;
}

bool OAIPhotoModel::is_inventory_item_Valid() const{
    return m_inventory_item_isValid;
}

QString OAIPhotoModel::getName() const {
    return m_name;
}
void OAIPhotoModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPhotoModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPhotoModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPhotoModel::getOid() const {
    return m_oid;
}
void OAIPhotoModel::setOid(const QString &oid) {
    m_oid = oid;
    m_oid_isSet = true;
}

bool OAIPhotoModel::is_oid_Set() const{
    return m_oid_isSet;
}

bool OAIPhotoModel::is_oid_Valid() const{
    return m_oid_isValid;
}

qint32 OAIPhotoModel::getPhotoNumber() const {
    return m_photo_number;
}
void OAIPhotoModel::setPhotoNumber(const qint32 &photo_number) {
    m_photo_number = photo_number;
    m_photo_number_isSet = true;
}

bool OAIPhotoModel::is_photo_number_Set() const{
    return m_photo_number_isSet;
}

bool OAIPhotoModel::is_photo_number_Valid() const{
    return m_photo_number_isValid;
}

QString OAIPhotoModel::getPhotoType() const {
    return m_photo_type;
}
void OAIPhotoModel::setPhotoType(const QString &photo_type) {
    m_photo_type = photo_type;
    m_photo_type_isSet = true;
}

bool OAIPhotoModel::is_photo_type_Set() const{
    return m_photo_type_isSet;
}

bool OAIPhotoModel::is_photo_type_Valid() const{
    return m_photo_type_isValid;
}

QString OAIPhotoModel::getProperty() const {
    return m_property;
}
void OAIPhotoModel::setProperty(const QString &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAIPhotoModel::is_property_Set() const{
    return m_property_isSet;
}

bool OAIPhotoModel::is_property_Valid() const{
    return m_property_isValid;
}

QString OAIPhotoModel::getRoom() const {
    return m_room;
}
void OAIPhotoModel::setRoom(const QString &room) {
    m_room = room;
    m_room_isSet = true;
}

bool OAIPhotoModel::is_room_Set() const{
    return m_room_isSet;
}

bool OAIPhotoModel::is_room_Valid() const{
    return m_room_isValid;
}

bool OAIPhotoModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inspection_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interim_inspection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhotoModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
