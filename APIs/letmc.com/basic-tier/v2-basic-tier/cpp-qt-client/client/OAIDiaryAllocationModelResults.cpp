/**
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiaryAllocationModelResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiaryAllocationModelResults::OAIDiaryAllocationModelResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiaryAllocationModelResults::OAIDiaryAllocationModelResults() {
    this->initializeModel();
}

OAIDiaryAllocationModelResults::~OAIDiaryAllocationModelResults() {}

void OAIDiaryAllocationModelResults::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;
}

void OAIDiaryAllocationModelResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiaryAllocationModelResults::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("Count")]);
    m_count_isSet = !json[QString("Count")].isNull() && m_count_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("Data")]);
    m_data_isSet = !json[QString("Data")].isNull() && m_data_isValid;
}

QString OAIDiaryAllocationModelResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiaryAllocationModelResults::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("Count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("Data"), ::OpenAPI::toJsonValue(m_data));
    }
    return obj;
}

qint32 OAIDiaryAllocationModelResults::getCount() const {
    return m_count;
}
void OAIDiaryAllocationModelResults::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIDiaryAllocationModelResults::is_count_Set() const{
    return m_count_isSet;
}

bool OAIDiaryAllocationModelResults::is_count_Valid() const{
    return m_count_isValid;
}

QList<OAIDiaryAllocationModel> OAIDiaryAllocationModelResults::getData() const {
    return m_data;
}
void OAIDiaryAllocationModelResults::setData(const QList<OAIDiaryAllocationModel> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIDiaryAllocationModelResults::is_data_Set() const{
    return m_data_isSet;
}

bool OAIDiaryAllocationModelResults::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIDiaryAllocationModelResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiaryAllocationModelResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
