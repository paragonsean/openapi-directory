/**
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIViewingControllerApi_H
#define OAI_OAIViewingControllerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIViewingBookingModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIViewingControllerApi : public QObject {
    Q_OBJECT

public:
    OAIViewingControllerApi(const int timeOut = 0);
    ~OAIViewingControllerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  preferred_date QDateTime [required]
    * @param[in]  property_ids_to_view QList<QString> [required]
    */
    virtual void viewingControllerGetBookings(const QString &short_name, const QDateTime &preferred_date, const QList<QString> &property_ids_to_view);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  forename QString [required]
    * @param[in]  surname QString [required]
    * @param[in]  mobile_phone QString [required]
    * @param[in]  email_address QString [required]
    * @param[in]  property_ids_to_view QList<QString> [required]
    * @param[in]  selected_viewing_slot OAIViewingBookingModel [required]
    * @param[in]  want_room_in_shared_property bool [optional]
    * @param[in]  alert_min_rent double [optional]
    * @param[in]  alert_max_rent double [optional]
    * @param[in]  alert_number_of_beds qint32 [optional]
    * @param[in]  alert_area_id QString [optional]
    * @param[in]  alert_tenant_type QString [optional]
    * @param[in]  subscribe_to_email_alerts bool [optional]
    * @param[in]  subscribe_to_sms_alerts bool [optional]
    */
    virtual void viewingControllerMakeBooking(const QString &short_name, const QString &forename, const QString &surname, const QString &mobile_phone, const QString &email_address, const QList<QString> &property_ids_to_view, const OAIViewingBookingModel &selected_viewing_slot, const ::OpenAPI::OptionalParam<bool> &want_room_in_shared_property = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &alert_min_rent = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &alert_max_rent = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &alert_number_of_beds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &alert_area_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alert_tenant_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &subscribe_to_email_alerts = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &subscribe_to_sms_alerts = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void viewingControllerGetBookingsCallback(OAIHttpRequestWorker *worker);
    void viewingControllerMakeBookingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void viewingControllerGetBookingsSignal(QList<OAIViewingBookingModel> summary);
    void viewingControllerMakeBookingSignal(bool summary);


    void viewingControllerGetBookingsSignalFull(OAIHttpRequestWorker *worker, QList<OAIViewingBookingModel> summary);
    void viewingControllerMakeBookingSignalFull(OAIHttpRequestWorker *worker, bool summary);

    Q_DECL_DEPRECATED_X("Use viewingControllerGetBookingsSignalError() instead")
    void viewingControllerGetBookingsSignalE(QList<OAIViewingBookingModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void viewingControllerGetBookingsSignalError(QList<OAIViewingBookingModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewingControllerMakeBookingSignalError() instead")
    void viewingControllerMakeBookingSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void viewingControllerMakeBookingSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use viewingControllerGetBookingsSignalErrorFull() instead")
    void viewingControllerGetBookingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewingControllerGetBookingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewingControllerMakeBookingSignalErrorFull() instead")
    void viewingControllerMakeBookingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewingControllerMakeBookingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
