/**
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITenancyModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITenancyModel::OAITenancyModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITenancyModel::OAITenancyModel() {
    this->initializeModel();
}

OAITenancyModel::~OAITenancyModel() {}

void OAITenancyModel::initializeModel() {

    m_advertise_from_isSet = false;
    m_advertise_from_isValid = false;

    m_area_isSet = false;
    m_area_isValid = false;

    m_bond_required_isSet = false;
    m_bond_required_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_e_tag_isSet = false;
    m_e_tag_isValid = false;

    m_furnished_isSet = false;
    m_furnished_isValid = false;

    m_global_reference_isSet = false;
    m_global_reference_isValid = false;

    m_is_share_property_isSet = false;
    m_is_share_property_isValid = false;

    m_is_student_property_isSet = false;
    m_is_student_property_isValid = false;

    m_is_tenancy_advertised_isSet = false;
    m_is_tenancy_advertised_isValid = false;

    m_is_tenancy_proposed_isSet = false;
    m_is_tenancy_proposed_isValid = false;

    m_maximum_tenants_isSet = false;
    m_maximum_tenants_isValid = false;

    m_minimum_tenants_isSet = false;
    m_minimum_tenants_isValid = false;

    m_oid_isSet = false;
    m_oid_isValid = false;

    m_rent_advertised_isSet = false;
    m_rent_advertised_isValid = false;

    m_rent_recurrence_isSet = false;
    m_rent_recurrence_isValid = false;

    m_rent_schedule_isSet = false;
    m_rent_schedule_isValid = false;

    m_tenancy_property_isSet = false;
    m_tenancy_property_isValid = false;

    m_tenant_system_types_isSet = false;
    m_tenant_system_types_isValid = false;

    m_term_maximum_isSet = false;
    m_term_maximum_isValid = false;

    m_term_minimum_isSet = false;
    m_term_minimum_isValid = false;

    m_term_start_isSet = false;
    m_term_start_isValid = false;

    m_utility_council_tax_isSet = false;
    m_utility_council_tax_isValid = false;

    m_utility_electricity_isSet = false;
    m_utility_electricity_isValid = false;

    m_utility_gas_isSet = false;
    m_utility_gas_isValid = false;

    m_utility_telephone_isSet = false;
    m_utility_telephone_isValid = false;

    m_utility_water_isSet = false;
    m_utility_water_isValid = false;
}

void OAITenancyModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITenancyModel::fromJsonObject(QJsonObject json) {

    m_advertise_from_isValid = ::OpenAPI::fromJsonValue(m_advertise_from, json[QString("AdvertiseFrom")]);
    m_advertise_from_isSet = !json[QString("AdvertiseFrom")].isNull() && m_advertise_from_isValid;

    m_area_isValid = ::OpenAPI::fromJsonValue(m_area, json[QString("Area")]);
    m_area_isSet = !json[QString("Area")].isNull() && m_area_isValid;

    m_bond_required_isValid = ::OpenAPI::fromJsonValue(m_bond_required, json[QString("BondRequired")]);
    m_bond_required_isSet = !json[QString("BondRequired")].isNull() && m_bond_required_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("Branch")]);
    m_branch_isSet = !json[QString("Branch")].isNull() && m_branch_isValid;

    m_e_tag_isValid = ::OpenAPI::fromJsonValue(m_e_tag, json[QString("ETag")]);
    m_e_tag_isSet = !json[QString("ETag")].isNull() && m_e_tag_isValid;

    m_furnished_isValid = ::OpenAPI::fromJsonValue(m_furnished, json[QString("Furnished")]);
    m_furnished_isSet = !json[QString("Furnished")].isNull() && m_furnished_isValid;

    m_global_reference_isValid = ::OpenAPI::fromJsonValue(m_global_reference, json[QString("GlobalReference")]);
    m_global_reference_isSet = !json[QString("GlobalReference")].isNull() && m_global_reference_isValid;

    m_is_share_property_isValid = ::OpenAPI::fromJsonValue(m_is_share_property, json[QString("IsShareProperty")]);
    m_is_share_property_isSet = !json[QString("IsShareProperty")].isNull() && m_is_share_property_isValid;

    m_is_student_property_isValid = ::OpenAPI::fromJsonValue(m_is_student_property, json[QString("IsStudentProperty")]);
    m_is_student_property_isSet = !json[QString("IsStudentProperty")].isNull() && m_is_student_property_isValid;

    m_is_tenancy_advertised_isValid = ::OpenAPI::fromJsonValue(m_is_tenancy_advertised, json[QString("IsTenancyAdvertised")]);
    m_is_tenancy_advertised_isSet = !json[QString("IsTenancyAdvertised")].isNull() && m_is_tenancy_advertised_isValid;

    m_is_tenancy_proposed_isValid = ::OpenAPI::fromJsonValue(m_is_tenancy_proposed, json[QString("IsTenancyProposed")]);
    m_is_tenancy_proposed_isSet = !json[QString("IsTenancyProposed")].isNull() && m_is_tenancy_proposed_isValid;

    m_maximum_tenants_isValid = ::OpenAPI::fromJsonValue(m_maximum_tenants, json[QString("MaximumTenants")]);
    m_maximum_tenants_isSet = !json[QString("MaximumTenants")].isNull() && m_maximum_tenants_isValid;

    m_minimum_tenants_isValid = ::OpenAPI::fromJsonValue(m_minimum_tenants, json[QString("MinimumTenants")]);
    m_minimum_tenants_isSet = !json[QString("MinimumTenants")].isNull() && m_minimum_tenants_isValid;

    m_oid_isValid = ::OpenAPI::fromJsonValue(m_oid, json[QString("OID")]);
    m_oid_isSet = !json[QString("OID")].isNull() && m_oid_isValid;

    m_rent_advertised_isValid = ::OpenAPI::fromJsonValue(m_rent_advertised, json[QString("RentAdvertised")]);
    m_rent_advertised_isSet = !json[QString("RentAdvertised")].isNull() && m_rent_advertised_isValid;

    m_rent_recurrence_isValid = ::OpenAPI::fromJsonValue(m_rent_recurrence, json[QString("RentRecurrence")]);
    m_rent_recurrence_isSet = !json[QString("RentRecurrence")].isNull() && m_rent_recurrence_isValid;

    m_rent_schedule_isValid = ::OpenAPI::fromJsonValue(m_rent_schedule, json[QString("RentSchedule")]);
    m_rent_schedule_isSet = !json[QString("RentSchedule")].isNull() && m_rent_schedule_isValid;

    m_tenancy_property_isValid = ::OpenAPI::fromJsonValue(m_tenancy_property, json[QString("TenancyProperty")]);
    m_tenancy_property_isSet = !json[QString("TenancyProperty")].isNull() && m_tenancy_property_isValid;

    m_tenant_system_types_isValid = ::OpenAPI::fromJsonValue(m_tenant_system_types, json[QString("TenantSystemTypes")]);
    m_tenant_system_types_isSet = !json[QString("TenantSystemTypes")].isNull() && m_tenant_system_types_isValid;

    m_term_maximum_isValid = ::OpenAPI::fromJsonValue(m_term_maximum, json[QString("TermMaximum")]);
    m_term_maximum_isSet = !json[QString("TermMaximum")].isNull() && m_term_maximum_isValid;

    m_term_minimum_isValid = ::OpenAPI::fromJsonValue(m_term_minimum, json[QString("TermMinimum")]);
    m_term_minimum_isSet = !json[QString("TermMinimum")].isNull() && m_term_minimum_isValid;

    m_term_start_isValid = ::OpenAPI::fromJsonValue(m_term_start, json[QString("TermStart")]);
    m_term_start_isSet = !json[QString("TermStart")].isNull() && m_term_start_isValid;

    m_utility_council_tax_isValid = ::OpenAPI::fromJsonValue(m_utility_council_tax, json[QString("UtilityCouncilTax")]);
    m_utility_council_tax_isSet = !json[QString("UtilityCouncilTax")].isNull() && m_utility_council_tax_isValid;

    m_utility_electricity_isValid = ::OpenAPI::fromJsonValue(m_utility_electricity, json[QString("UtilityElectricity")]);
    m_utility_electricity_isSet = !json[QString("UtilityElectricity")].isNull() && m_utility_electricity_isValid;

    m_utility_gas_isValid = ::OpenAPI::fromJsonValue(m_utility_gas, json[QString("UtilityGas")]);
    m_utility_gas_isSet = !json[QString("UtilityGas")].isNull() && m_utility_gas_isValid;

    m_utility_telephone_isValid = ::OpenAPI::fromJsonValue(m_utility_telephone, json[QString("UtilityTelephone")]);
    m_utility_telephone_isSet = !json[QString("UtilityTelephone")].isNull() && m_utility_telephone_isValid;

    m_utility_water_isValid = ::OpenAPI::fromJsonValue(m_utility_water, json[QString("UtilityWater")]);
    m_utility_water_isSet = !json[QString("UtilityWater")].isNull() && m_utility_water_isValid;
}

QString OAITenancyModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITenancyModel::asJsonObject() const {
    QJsonObject obj;
    if (m_advertise_from_isSet) {
        obj.insert(QString("AdvertiseFrom"), ::OpenAPI::toJsonValue(m_advertise_from));
    }
    if (m_area_isSet) {
        obj.insert(QString("Area"), ::OpenAPI::toJsonValue(m_area));
    }
    if (m_bond_required_isSet) {
        obj.insert(QString("BondRequired"), ::OpenAPI::toJsonValue(m_bond_required));
    }
    if (m_branch_isSet) {
        obj.insert(QString("Branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_e_tag_isSet) {
        obj.insert(QString("ETag"), ::OpenAPI::toJsonValue(m_e_tag));
    }
    if (m_furnished_isSet) {
        obj.insert(QString("Furnished"), ::OpenAPI::toJsonValue(m_furnished));
    }
    if (m_global_reference_isSet) {
        obj.insert(QString("GlobalReference"), ::OpenAPI::toJsonValue(m_global_reference));
    }
    if (m_is_share_property_isSet) {
        obj.insert(QString("IsShareProperty"), ::OpenAPI::toJsonValue(m_is_share_property));
    }
    if (m_is_student_property_isSet) {
        obj.insert(QString("IsStudentProperty"), ::OpenAPI::toJsonValue(m_is_student_property));
    }
    if (m_is_tenancy_advertised_isSet) {
        obj.insert(QString("IsTenancyAdvertised"), ::OpenAPI::toJsonValue(m_is_tenancy_advertised));
    }
    if (m_is_tenancy_proposed_isSet) {
        obj.insert(QString("IsTenancyProposed"), ::OpenAPI::toJsonValue(m_is_tenancy_proposed));
    }
    if (m_maximum_tenants_isSet) {
        obj.insert(QString("MaximumTenants"), ::OpenAPI::toJsonValue(m_maximum_tenants));
    }
    if (m_minimum_tenants_isSet) {
        obj.insert(QString("MinimumTenants"), ::OpenAPI::toJsonValue(m_minimum_tenants));
    }
    if (m_oid_isSet) {
        obj.insert(QString("OID"), ::OpenAPI::toJsonValue(m_oid));
    }
    if (m_rent_advertised_isSet) {
        obj.insert(QString("RentAdvertised"), ::OpenAPI::toJsonValue(m_rent_advertised));
    }
    if (m_rent_recurrence_isSet) {
        obj.insert(QString("RentRecurrence"), ::OpenAPI::toJsonValue(m_rent_recurrence));
    }
    if (m_rent_schedule_isSet) {
        obj.insert(QString("RentSchedule"), ::OpenAPI::toJsonValue(m_rent_schedule));
    }
    if (m_tenancy_property_isSet) {
        obj.insert(QString("TenancyProperty"), ::OpenAPI::toJsonValue(m_tenancy_property));
    }
    if (m_tenant_system_types.size() > 0) {
        obj.insert(QString("TenantSystemTypes"), ::OpenAPI::toJsonValue(m_tenant_system_types));
    }
    if (m_term_maximum_isSet) {
        obj.insert(QString("TermMaximum"), ::OpenAPI::toJsonValue(m_term_maximum));
    }
    if (m_term_minimum_isSet) {
        obj.insert(QString("TermMinimum"), ::OpenAPI::toJsonValue(m_term_minimum));
    }
    if (m_term_start_isSet) {
        obj.insert(QString("TermStart"), ::OpenAPI::toJsonValue(m_term_start));
    }
    if (m_utility_council_tax_isSet) {
        obj.insert(QString("UtilityCouncilTax"), ::OpenAPI::toJsonValue(m_utility_council_tax));
    }
    if (m_utility_electricity_isSet) {
        obj.insert(QString("UtilityElectricity"), ::OpenAPI::toJsonValue(m_utility_electricity));
    }
    if (m_utility_gas_isSet) {
        obj.insert(QString("UtilityGas"), ::OpenAPI::toJsonValue(m_utility_gas));
    }
    if (m_utility_telephone_isSet) {
        obj.insert(QString("UtilityTelephone"), ::OpenAPI::toJsonValue(m_utility_telephone));
    }
    if (m_utility_water_isSet) {
        obj.insert(QString("UtilityWater"), ::OpenAPI::toJsonValue(m_utility_water));
    }
    return obj;
}

QDateTime OAITenancyModel::getAdvertiseFrom() const {
    return m_advertise_from;
}
void OAITenancyModel::setAdvertiseFrom(const QDateTime &advertise_from) {
    m_advertise_from = advertise_from;
    m_advertise_from_isSet = true;
}

bool OAITenancyModel::is_advertise_from_Set() const{
    return m_advertise_from_isSet;
}

bool OAITenancyModel::is_advertise_from_Valid() const{
    return m_advertise_from_isValid;
}

QString OAITenancyModel::getArea() const {
    return m_area;
}
void OAITenancyModel::setArea(const QString &area) {
    m_area = area;
    m_area_isSet = true;
}

bool OAITenancyModel::is_area_Set() const{
    return m_area_isSet;
}

bool OAITenancyModel::is_area_Valid() const{
    return m_area_isValid;
}

double OAITenancyModel::getBondRequired() const {
    return m_bond_required;
}
void OAITenancyModel::setBondRequired(const double &bond_required) {
    m_bond_required = bond_required;
    m_bond_required_isSet = true;
}

bool OAITenancyModel::is_bond_required_Set() const{
    return m_bond_required_isSet;
}

bool OAITenancyModel::is_bond_required_Valid() const{
    return m_bond_required_isValid;
}

QString OAITenancyModel::getBranch() const {
    return m_branch;
}
void OAITenancyModel::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAITenancyModel::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAITenancyModel::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAITenancyModel::getETag() const {
    return m_e_tag;
}
void OAITenancyModel::setETag(const QString &e_tag) {
    m_e_tag = e_tag;
    m_e_tag_isSet = true;
}

bool OAITenancyModel::is_e_tag_Set() const{
    return m_e_tag_isSet;
}

bool OAITenancyModel::is_e_tag_Valid() const{
    return m_e_tag_isValid;
}

QString OAITenancyModel::getFurnished() const {
    return m_furnished;
}
void OAITenancyModel::setFurnished(const QString &furnished) {
    m_furnished = furnished;
    m_furnished_isSet = true;
}

bool OAITenancyModel::is_furnished_Set() const{
    return m_furnished_isSet;
}

bool OAITenancyModel::is_furnished_Valid() const{
    return m_furnished_isValid;
}

QString OAITenancyModel::getGlobalReference() const {
    return m_global_reference;
}
void OAITenancyModel::setGlobalReference(const QString &global_reference) {
    m_global_reference = global_reference;
    m_global_reference_isSet = true;
}

bool OAITenancyModel::is_global_reference_Set() const{
    return m_global_reference_isSet;
}

bool OAITenancyModel::is_global_reference_Valid() const{
    return m_global_reference_isValid;
}

bool OAITenancyModel::isIsShareProperty() const {
    return m_is_share_property;
}
void OAITenancyModel::setIsShareProperty(const bool &is_share_property) {
    m_is_share_property = is_share_property;
    m_is_share_property_isSet = true;
}

bool OAITenancyModel::is_is_share_property_Set() const{
    return m_is_share_property_isSet;
}

bool OAITenancyModel::is_is_share_property_Valid() const{
    return m_is_share_property_isValid;
}

bool OAITenancyModel::isIsStudentProperty() const {
    return m_is_student_property;
}
void OAITenancyModel::setIsStudentProperty(const bool &is_student_property) {
    m_is_student_property = is_student_property;
    m_is_student_property_isSet = true;
}

bool OAITenancyModel::is_is_student_property_Set() const{
    return m_is_student_property_isSet;
}

bool OAITenancyModel::is_is_student_property_Valid() const{
    return m_is_student_property_isValid;
}

bool OAITenancyModel::isIsTenancyAdvertised() const {
    return m_is_tenancy_advertised;
}
void OAITenancyModel::setIsTenancyAdvertised(const bool &is_tenancy_advertised) {
    m_is_tenancy_advertised = is_tenancy_advertised;
    m_is_tenancy_advertised_isSet = true;
}

bool OAITenancyModel::is_is_tenancy_advertised_Set() const{
    return m_is_tenancy_advertised_isSet;
}

bool OAITenancyModel::is_is_tenancy_advertised_Valid() const{
    return m_is_tenancy_advertised_isValid;
}

bool OAITenancyModel::isIsTenancyProposed() const {
    return m_is_tenancy_proposed;
}
void OAITenancyModel::setIsTenancyProposed(const bool &is_tenancy_proposed) {
    m_is_tenancy_proposed = is_tenancy_proposed;
    m_is_tenancy_proposed_isSet = true;
}

bool OAITenancyModel::is_is_tenancy_proposed_Set() const{
    return m_is_tenancy_proposed_isSet;
}

bool OAITenancyModel::is_is_tenancy_proposed_Valid() const{
    return m_is_tenancy_proposed_isValid;
}

qint32 OAITenancyModel::getMaximumTenants() const {
    return m_maximum_tenants;
}
void OAITenancyModel::setMaximumTenants(const qint32 &maximum_tenants) {
    m_maximum_tenants = maximum_tenants;
    m_maximum_tenants_isSet = true;
}

bool OAITenancyModel::is_maximum_tenants_Set() const{
    return m_maximum_tenants_isSet;
}

bool OAITenancyModel::is_maximum_tenants_Valid() const{
    return m_maximum_tenants_isValid;
}

qint32 OAITenancyModel::getMinimumTenants() const {
    return m_minimum_tenants;
}
void OAITenancyModel::setMinimumTenants(const qint32 &minimum_tenants) {
    m_minimum_tenants = minimum_tenants;
    m_minimum_tenants_isSet = true;
}

bool OAITenancyModel::is_minimum_tenants_Set() const{
    return m_minimum_tenants_isSet;
}

bool OAITenancyModel::is_minimum_tenants_Valid() const{
    return m_minimum_tenants_isValid;
}

QString OAITenancyModel::getOid() const {
    return m_oid;
}
void OAITenancyModel::setOid(const QString &oid) {
    m_oid = oid;
    m_oid_isSet = true;
}

bool OAITenancyModel::is_oid_Set() const{
    return m_oid_isSet;
}

bool OAITenancyModel::is_oid_Valid() const{
    return m_oid_isValid;
}

double OAITenancyModel::getRentAdvertised() const {
    return m_rent_advertised;
}
void OAITenancyModel::setRentAdvertised(const double &rent_advertised) {
    m_rent_advertised = rent_advertised;
    m_rent_advertised_isSet = true;
}

bool OAITenancyModel::is_rent_advertised_Set() const{
    return m_rent_advertised_isSet;
}

bool OAITenancyModel::is_rent_advertised_Valid() const{
    return m_rent_advertised_isValid;
}

qint32 OAITenancyModel::getRentRecurrence() const {
    return m_rent_recurrence;
}
void OAITenancyModel::setRentRecurrence(const qint32 &rent_recurrence) {
    m_rent_recurrence = rent_recurrence;
    m_rent_recurrence_isSet = true;
}

bool OAITenancyModel::is_rent_recurrence_Set() const{
    return m_rent_recurrence_isSet;
}

bool OAITenancyModel::is_rent_recurrence_Valid() const{
    return m_rent_recurrence_isValid;
}

QString OAITenancyModel::getRentSchedule() const {
    return m_rent_schedule;
}
void OAITenancyModel::setRentSchedule(const QString &rent_schedule) {
    m_rent_schedule = rent_schedule;
    m_rent_schedule_isSet = true;
}

bool OAITenancyModel::is_rent_schedule_Set() const{
    return m_rent_schedule_isSet;
}

bool OAITenancyModel::is_rent_schedule_Valid() const{
    return m_rent_schedule_isValid;
}

QString OAITenancyModel::getTenancyProperty() const {
    return m_tenancy_property;
}
void OAITenancyModel::setTenancyProperty(const QString &tenancy_property) {
    m_tenancy_property = tenancy_property;
    m_tenancy_property_isSet = true;
}

bool OAITenancyModel::is_tenancy_property_Set() const{
    return m_tenancy_property_isSet;
}

bool OAITenancyModel::is_tenancy_property_Valid() const{
    return m_tenancy_property_isValid;
}

QList<QString> OAITenancyModel::getTenantSystemTypes() const {
    return m_tenant_system_types;
}
void OAITenancyModel::setTenantSystemTypes(const QList<QString> &tenant_system_types) {
    m_tenant_system_types = tenant_system_types;
    m_tenant_system_types_isSet = true;
}

bool OAITenancyModel::is_tenant_system_types_Set() const{
    return m_tenant_system_types_isSet;
}

bool OAITenancyModel::is_tenant_system_types_Valid() const{
    return m_tenant_system_types_isValid;
}

qint32 OAITenancyModel::getTermMaximum() const {
    return m_term_maximum;
}
void OAITenancyModel::setTermMaximum(const qint32 &term_maximum) {
    m_term_maximum = term_maximum;
    m_term_maximum_isSet = true;
}

bool OAITenancyModel::is_term_maximum_Set() const{
    return m_term_maximum_isSet;
}

bool OAITenancyModel::is_term_maximum_Valid() const{
    return m_term_maximum_isValid;
}

qint32 OAITenancyModel::getTermMinimum() const {
    return m_term_minimum;
}
void OAITenancyModel::setTermMinimum(const qint32 &term_minimum) {
    m_term_minimum = term_minimum;
    m_term_minimum_isSet = true;
}

bool OAITenancyModel::is_term_minimum_Set() const{
    return m_term_minimum_isSet;
}

bool OAITenancyModel::is_term_minimum_Valid() const{
    return m_term_minimum_isValid;
}

QDateTime OAITenancyModel::getTermStart() const {
    return m_term_start;
}
void OAITenancyModel::setTermStart(const QDateTime &term_start) {
    m_term_start = term_start;
    m_term_start_isSet = true;
}

bool OAITenancyModel::is_term_start_Set() const{
    return m_term_start_isSet;
}

bool OAITenancyModel::is_term_start_Valid() const{
    return m_term_start_isValid;
}

QString OAITenancyModel::getUtilityCouncilTax() const {
    return m_utility_council_tax;
}
void OAITenancyModel::setUtilityCouncilTax(const QString &utility_council_tax) {
    m_utility_council_tax = utility_council_tax;
    m_utility_council_tax_isSet = true;
}

bool OAITenancyModel::is_utility_council_tax_Set() const{
    return m_utility_council_tax_isSet;
}

bool OAITenancyModel::is_utility_council_tax_Valid() const{
    return m_utility_council_tax_isValid;
}

QString OAITenancyModel::getUtilityElectricity() const {
    return m_utility_electricity;
}
void OAITenancyModel::setUtilityElectricity(const QString &utility_electricity) {
    m_utility_electricity = utility_electricity;
    m_utility_electricity_isSet = true;
}

bool OAITenancyModel::is_utility_electricity_Set() const{
    return m_utility_electricity_isSet;
}

bool OAITenancyModel::is_utility_electricity_Valid() const{
    return m_utility_electricity_isValid;
}

QString OAITenancyModel::getUtilityGas() const {
    return m_utility_gas;
}
void OAITenancyModel::setUtilityGas(const QString &utility_gas) {
    m_utility_gas = utility_gas;
    m_utility_gas_isSet = true;
}

bool OAITenancyModel::is_utility_gas_Set() const{
    return m_utility_gas_isSet;
}

bool OAITenancyModel::is_utility_gas_Valid() const{
    return m_utility_gas_isValid;
}

QString OAITenancyModel::getUtilityTelephone() const {
    return m_utility_telephone;
}
void OAITenancyModel::setUtilityTelephone(const QString &utility_telephone) {
    m_utility_telephone = utility_telephone;
    m_utility_telephone_isSet = true;
}

bool OAITenancyModel::is_utility_telephone_Set() const{
    return m_utility_telephone_isSet;
}

bool OAITenancyModel::is_utility_telephone_Valid() const{
    return m_utility_telephone_isValid;
}

QString OAITenancyModel::getUtilityWater() const {
    return m_utility_water;
}
void OAITenancyModel::setUtilityWater(const QString &utility_water) {
    m_utility_water = utility_water;
    m_utility_water_isSet = true;
}

bool OAITenancyModel::is_utility_water_Set() const{
    return m_utility_water_isSet;
}

bool OAITenancyModel::is_utility_water_Valid() const{
    return m_utility_water_isValid;
}

bool OAITenancyModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertise_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bond_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_furnished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_share_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_student_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tenancy_advertised_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tenancy_proposed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_tenants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_tenants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent_advertised_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent_recurrence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenancy_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_system_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utility_council_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utility_electricity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utility_gas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utility_telephone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utility_water_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITenancyModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
