openapi: 3.0.1
info:
  contact: {}
  title: "LetMC Api V2, Basic (Tier 2)"
  version: v2-basic-tier
  x-apisguru-categories:
  - ecommerce
  x-logo:
    url: https://twitter.com/agentOSSoftware/profile_image?size=original
  x-origin:
  - format: swagger
    url: https://live-api.letmc.com/swagger/docs/v2-basic-tier
    version: "2.0"
  x-providerName: letmc.com
  x-serviceName: basic-tier
servers:
- url: https://live-api.letmc.com/
paths:
  /v2/tier2/{shortName}/area/areas:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_area_areas_get
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AreaModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/AreaModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/AreaModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/AreaModelResults'
          description: OK
      summary: A collection of all the areas for a company
      tags:
      - AreaController
      x-openapi-router-controller: openapi_server.controllers.area_controller_controller
  /v2/tier2/{shortName}/area/areas/{areaID}:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_area_areas_area_idget
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the Area
        in: path
        name: areaID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AreaModel'
            text/json:
              schema:
                $ref: '#/components/schemas/AreaModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/AreaModel'
            text/xml:
              schema:
                $ref: '#/components/schemas/AreaModel'
          description: OK
      summary: Get a specific area given its unique Object ID (OID)
      tags:
      - AreaController
      x-openapi-router-controller: openapi_server.controllers.area_controller_controller
  /v2/tier2/{shortName}/branch/branches:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_branch_branches_get
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/BranchModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/BranchModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/BranchModelResults'
          description: OK
      summary: All branches defined for a company
      tags:
      - BranchController
      x-openapi-router-controller: openapi_server.controllers.branch_controller_controller
  /v2/tier2/{shortName}/branch/branches/{branchID}:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_branch_branches_branch_idget
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the Branch
        in: path
        name: branchID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchModel'
            text/json:
              schema:
                $ref: '#/components/schemas/BranchModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/BranchModel'
            text/xml:
              schema:
                $ref: '#/components/schemas/BranchModel'
          description: OK
      summary: Get a specific branch given its unique Object ID (OID)
      tags:
      - BranchController
      x-openapi-router-controller: openapi_server.controllers.branch_controller_controller
  /v2/tier2/{shortName}/company:
    get:
      deprecated: false
      operationId: company_controller_get_company
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyModel'
            text/json:
              schema:
                $ref: '#/components/schemas/CompanyModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/CompanyModel'
            text/xml:
              schema:
                $ref: '#/components/schemas/CompanyModel'
          description: OK
      summary: Information about a specific company
      tags:
      - CompanyController
      x-openapi-router-controller: openapi_server.controllers.company_controller_controller
  /v2/tier2/{shortName}/county/counties:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_county_counties_get
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountyModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/CountyModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/CountyModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/CountyModelResults'
          description: OK
      summary: A collection of all counties available for a company
      tags:
      - CountyController
      x-openapi-router-controller: openapi_server.controllers.county_controller_controller
  /v2/tier2/{shortName}/county/counties/{countyID}:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_county_counties_county_idget
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the County
        in: path
        name: countyID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountyModel'
            text/json:
              schema:
                $ref: '#/components/schemas/CountyModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/CountyModel'
            text/xml:
              schema:
                $ref: '#/components/schemas/CountyModel'
          description: OK
      summary: Get a specific county given its unique Object ID (OID)
      tags:
      - CountyController
      x-openapi-router-controller: openapi_server.controllers.county_controller_controller
  /v2/tier2/{shortName}/county/counties/{countyID}/branches:
    get:
      deprecated: false
      operationId: county_controller_get_counties_branches
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the County
        in: path
        name: countyID
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/BranchModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/BranchModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/BranchModelResults'
          description: OK
      summary: A collection of branches that manage a specific county
      tags:
      - CountyController
      x-openapi-router-controller: openapi_server.controllers.county_controller_controller
  /v2/tier2/{shortName}/diary/allocations:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_diary_allocations_get
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiaryAllocationModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/DiaryAllocationModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/DiaryAllocationModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/DiaryAllocationModelResults'
          description: OK
      summary: A collection of all diary allocations
      tags:
      - DiaryController
      x-openapi-router-controller: openapi_server.controllers.diary_controller_controller
  /v2/tier2/{shortName}/diary/allocations/{diaryAllocationID}:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_diary_allocations_diary_allocation_idget
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the DiaryAllocation
        in: path
        name: diaryAllocationID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiaryAllocationModel'
            text/json:
              schema:
                $ref: '#/components/schemas/DiaryAllocationModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/DiaryAllocationModel'
            text/xml:
              schema:
                $ref: '#/components/schemas/DiaryAllocationModel'
          description: OK
      summary: Get a specific diary allocation given its unique Object ID (OID)
      tags:
      - DiaryController
      x-openapi-router-controller: openapi_server.controllers.diary_controller_controller
  /v2/tier2/{shortName}/diary/appointments:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_diary_appointments_get
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiaryAppointmentModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/DiaryAppointmentModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/DiaryAppointmentModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/DiaryAppointmentModelResults'
          description: OK
      summary: A collection of all diary appointments
      tags:
      - DiaryController
      x-openapi-router-controller: openapi_server.controllers.diary_controller_controller
  /v2/tier2/{shortName}/diary/appointments/{diaryAppointmentID}:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_diary_appointments_diary_appointment_idget
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the DiaryAppointment
        in: path
        name: diaryAppointmentID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiaryAppointmentModel'
            text/json:
              schema:
                $ref: '#/components/schemas/DiaryAppointmentModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/DiaryAppointmentModel'
            text/xml:
              schema:
                $ref: '#/components/schemas/DiaryAppointmentModel'
          description: OK
      summary: Get a specific diary appointment given its unique Object ID (OID)
      tags:
      - DiaryController
      x-openapi-router-controller: openapi_server.controllers.diary_controller_controller
  /v2/tier2/{shortName}/diary/appointmenttypes:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_diary_appointmenttypes_get
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiaryAppointmentTypeModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/DiaryAppointmentTypeModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/DiaryAppointmentTypeModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/DiaryAppointmentTypeModelResults'
          description: OK
      summary: A collection of all diary appointment types
      tags:
      - DiaryController
      x-openapi-router-controller: openapi_server.controllers.diary_controller_controller
  /v2/tier2/{shortName}/diary/appointmenttypes/{diaryAppointmentTypeID}:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_diary_appointmenttypes_diary_appointment_type_idget
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the DiaryAppointmentType
        in: path
        name: diaryAppointmentTypeID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiaryAppointmentTypeModel'
            text/json:
              schema:
                $ref: '#/components/schemas/DiaryAppointmentTypeModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/DiaryAppointmentTypeModel'
            text/xml:
              schema:
                $ref: '#/components/schemas/DiaryAppointmentTypeModel'
          description: OK
      summary: Get a specific diary appointment type given its unique Object ID (OID)
      tags:
      - DiaryController
      x-openapi-router-controller: openapi_server.controllers.diary_controller_controller
  /v2/tier2/{shortName}/lettings/advertised:
    get:
      deprecated: false
      operationId: lettings_controller_get_advertised
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the Branch
        in: query
        name: branchID
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      - description: The unique ID of the Area
        in: query
        name: areaID
        schema:
          type: string
      - description: The minimum advertised rent to search for
        in: query
        name: rentMinimum
        schema:
          format: double
          type: number
      - description: The maximum advertised rent to search for
        in: query
        name: rentMaximum
        schema:
          format: double
          type: number
      - description: The maximum number of tenants a property can accommodate
        in: query
        name: maximumTenants
        schema:
          format: int32
          type: integer
      - description: Search for shared properties?
        in: query
        name: wantSharedProperties
        schema:
          type: boolean
      - description: Search for student properties?
        in: query
        name: wantStudentProperties
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenancyModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/TenancyModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/TenancyModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/TenancyModelResults'
          description: OK
      summary: Search all properties available for rent given a range of search criteria.
      tags:
      - LettingsController
      x-openapi-router-controller: openapi_server.controllers.lettings_controller_controller
  /v2/tier2/{shortName}/lettings/advertisedbetweendates:
    get:
      deprecated: false
      operationId: lettings_controller_get_advertised_between_dates
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the Branch
        in: query
        name: branchID
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      - description: The date to search from
        in: query
        name: rangeStartDate
        required: true
        schema:
          format: date-time
          type: string
      - description: The date to search to
        in: query
        name: rangeEndDate
        required: true
        schema:
          format: date-time
          type: string
      - description: The unique ID of the Area
        in: query
        name: areaID
        schema:
          type: string
      - description: The minimum advertised rent to search for
        in: query
        name: rentMinimum
        schema:
          format: double
          type: number
      - description: The maximum advertised rent to search for
        in: query
        name: rentMaximum
        schema:
          format: double
          type: number
      - description: The maximum number of tenants a property can accommodate
        in: query
        name: maximumTenants
        schema:
          format: int32
          type: integer
      - description: Search for shared properties?
        in: query
        name: wantSharedProperties
        schema:
          type: boolean
      - description: Search for student properties?
        in: query
        name: wantStudentProperties
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenancyModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/TenancyModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/TenancyModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/TenancyModelResults'
          description: OK
      summary: Search all properties available for rent given a range of search criteria
        and dates.
      tags:
      - LettingsController
      x-openapi-router-controller: openapi_server.controllers.lettings_controller_controller
  /v2/tier2/{shortName}/lettings/tenancies:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_lettings_tenancies_get
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenancyModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/TenancyModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/TenancyModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/TenancyModelResults'
          description: OK
      summary: A collection of all the company's tenancies
      tags:
      - LettingsController
      x-openapi-router-controller: openapi_server.controllers.lettings_controller_controller
  /v2/tier2/{shortName}/lettings/tenancies/{tenancyID}:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_lettings_tenancies_tenancy_idget
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the Tenancy
        in: path
        name: tenancyID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenancyModel'
            text/json:
              schema:
                $ref: '#/components/schemas/TenancyModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/TenancyModel'
            text/xml:
              schema:
                $ref: '#/components/schemas/TenancyModel'
          description: OK
      summary: Get a specific tenancy given its unique Object ID (OID)
      tags:
      - LettingsController
      x-openapi-router-controller: openapi_server.controllers.lettings_controller_controller
  /v2/tier2/{shortName}/lettings/tenancies/{tenancyID}/brochure:
    get:
      deprecated: false
      operationId: lettings_controller_get_tenancy_brochure
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the tenancy
        in: path
        name: tenancyID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
            text/json:
              schema:
                $ref: '#/components/schemas/Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
      summary: Downloads the brochure relating to the latest advertised rental of
        a property
      tags:
      - LettingsController
      x-openapi-router-controller: openapi_server.controllers.lettings_controller_controller
  /v2/tier2/{shortName}/photo/photos:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_photo_photos_get
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/PhotoModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/PhotoModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/PhotoModelResults'
          description: OK
      summary: A collection of all photos in the company
      tags:
      - PhotoController
      x-openapi-router-controller: openapi_server.controllers.photo_controller_controller
  /v2/tier2/{shortName}/photo/photos/{photoID}:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_photo_photos_photo_idget
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the Photo
        in: path
        name: photoID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoModel'
            text/json:
              schema:
                $ref: '#/components/schemas/PhotoModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/PhotoModel'
            text/xml:
              schema:
                $ref: '#/components/schemas/PhotoModel'
          description: OK
      summary: Get a specific photo given its unique Object ID (OID)
      tags:
      - PhotoController
      x-openapi-router-controller: openapi_server.controllers.photo_controller_controller
  /v2/tier2/{shortName}/photos/photo/{photoID}/download:
    get:
      deprecated: false
      operationId: photo_controller_get_photo_download
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the photo on the property
        in: path
        name: photoID
        required: true
        schema:
          type: string
      - description: An optional parameter specifying the image width
        in: query
        name: width
        schema:
          format: int32
          type: integer
      - description: An optional parameter specifying the image height
        in: query
        name: height
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
            text/json:
              schema:
                $ref: '#/components/schemas/Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
      summary: Downloads the photo of a property given the property and photo ID.
      tags:
      - PhotoController
      x-openapi-router-controller: openapi_server.controllers.photo_controller_controller
  /v2/tier2/{shortName}/property/properties:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_property_properties_get
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/PropertyModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/PropertyModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/PropertyModelResults'
          description: OK
      summary: A collection of all properties within a company
      tags:
      - PropertyController
      x-openapi-router-controller: openapi_server.controllers.property_controller_controller
  /v2/tier2/{shortName}/property/properties/{propertyID}:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_property_properties_property_idget
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the Property
        in: path
        name: propertyID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyModel'
            text/json:
              schema:
                $ref: '#/components/schemas/PropertyModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/PropertyModel'
            text/xml:
              schema:
                $ref: '#/components/schemas/PropertyModel'
          description: OK
      summary: Get a specific property given its unique Object ID (OID)
      tags:
      - PropertyController
      x-openapi-router-controller: openapi_server.controllers.property_controller_controller
  /v2/tier2/{shortName}/property/properties/{propertyID}/facilities:
    get:
      deprecated: false
      operationId: property_controller_get_properties_facilities
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the Property
        in: path
        name: propertyID
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyFacilityModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/PropertyFacilityModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/PropertyFacilityModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/PropertyFacilityModelResults'
          description: OK
      summary: "A collection of facilities linked to a block, property or room"
      tags:
      - PropertyController
      x-openapi-router-controller: openapi_server.controllers.property_controller_controller
  /v2/tier2/{shortName}/property/properties/{propertyID}/photos:
    get:
      deprecated: false
      operationId: property_controller_get_properties_photos
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the Property
        in: path
        name: propertyID
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/PhotoModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/PhotoModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/PhotoModelResults'
          description: OK
      summary: "A collection showing all the photos linked to a specific block, property\
        \ or room"
      tags:
      - PropertyController
      x-openapi-router-controller: openapi_server.controllers.property_controller_controller
  /v2/tier2/{shortName}/property/properties/{propertyID}/rooms:
    get:
      deprecated: false
      operationId: property_controller_get_properties_rooms
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the Property
        in: path
        name: propertyID
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyRoomModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/PropertyRoomModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/PropertyRoomModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/PropertyRoomModelResults'
          description: OK
      summary: A collection of the rooms that belong to this property or block
      tags:
      - PropertyController
      x-openapi-router-controller: openapi_server.controllers.property_controller_controller
  /v2/tier2/{shortName}/property/properties/{propertyID}/tenancies:
    get:
      deprecated: false
      operationId: property_controller_get_properties_tenancies
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the Property
        in: path
        name: propertyID
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenancyModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/TenancyModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/TenancyModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/TenancyModelResults'
          description: OK
      summary: "A collection of all tenancies associated with this block, property\
        \ or room"
      tags:
      - PropertyController
      x-openapi-router-controller: openapi_server.controllers.property_controller_controller
  /v2/tier2/{shortName}/property/structures/{propertyStructureID}/reports/eer:
    get:
      deprecated: false
      operationId: property_controller_get_property_eer_download
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the property structure
        in: path
        name: propertyStructureID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
            text/json:
              schema:
                $ref: '#/components/schemas/Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
      summary: Downloads the energy efficiency report (EER) graph for a property
      tags:
      - PropertyController
      x-openapi-router-controller: openapi_server.controllers.property_controller_controller
  /v2/tier2/{shortName}/property/structures/{propertyStructureID}/reports/eir:
    get:
      deprecated: false
      operationId: property_controller_get_property_eir_download
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the property structure
        in: path
        name: propertyStructureID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
            text/json:
              schema:
                $ref: '#/components/schemas/Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
      summary: Downloads the environmental impact report (EIR) graph for a property
      tags:
      - PropertyController
      x-openapi-router-controller: openapi_server.controllers.property_controller_controller
  /v2/tier2/{shortName}/sales/advertisedsales:
    get:
      deprecated: false
      operationId: sales_controller_get_advertised_sales
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the Branch
        in: query
        name: branchID
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      - description: Show only development properties?
        in: query
        name: onlyDevelopement
        required: true
        schema:
          type: boolean
      - description: Show only investment properties?
        in: query
        name: onlyInvestements
        required: true
        schema:
          type: boolean
      - description: The minimum price to search for
        in: query
        name: minimumPrice
        schema:
          format: double
          type: number
      - description: The maximum price to search for
        in: query
        name: maximumPrice
        schema:
          format: double
          type: number
      - description: The minimum beds to search for
        in: query
        name: minimumBeds
        schema:
          format: int32
          type: integer
      - description: The minimum bathrooms to search for
        in: query
        name: minimumBathrooms
        schema:
          format: int32
          type: integer
      - description: The minimum ensuite bathrooms to search for
        in: query
        name: minimumEnsuites
        schema:
          format: int32
          type: integer
      - description: The minimum toilets to search for
        in: query
        name: minimumToilets
        schema:
          format: int32
          type: integer
      - description: The minimum reception rooms to search for
        in: query
        name: minimumReception
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesInstructionModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/SalesInstructionModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/SalesInstructionModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/SalesInstructionModelResults'
          description: OK
      summary: Search all sales properties available given a range of search criteria
      tags:
      - SalesController
      x-openapi-router-controller: openapi_server.controllers.sales_controller_controller
  /v2/tier2/{shortName}/sales/reports/eer/{salesInstructionID}:
    get:
      deprecated: false
      operationId: sales_controller_get_eer
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the SalesInstruction
        in: path
        name: salesInstructionID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
            text/json:
              schema:
                $ref: '#/components/schemas/Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
      summary: Downloads the energy efficiency report (EER) graph for a sales instruction
      tags:
      - SalesController
      x-openapi-router-controller: openapi_server.controllers.sales_controller_controller
  /v2/tier2/{shortName}/sales/reports/eir/{salesInstructionID}:
    get:
      deprecated: false
      operationId: sales_controller_get_eir
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the SalesInstruction
        in: path
        name: salesInstructionID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
            text/json:
              schema:
                $ref: '#/components/schemas/Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
      summary: Downloads the energy efficiency report (EIR) graph for a sales instruction
      tags:
      - SalesController
      x-openapi-router-controller: openapi_server.controllers.sales_controller_controller
  /v2/tier2/{shortName}/sales/salesfeaturetypes:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_sales_salesfeaturetypes_get
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesFeatureTypeModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/SalesFeatureTypeModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/SalesFeatureTypeModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/SalesFeatureTypeModelResults'
          description: OK
      summary: A collection of all sales feature types linked to a company
      tags:
      - SalesController
      x-openapi-router-controller: openapi_server.controllers.sales_controller_controller
  /v2/tier2/{shortName}/sales/salesfeaturetypes/{salesFeatureTypeID}:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_sales_salesfeaturetypes_sales_feature_type_idget
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the SalesFeatureType
        in: path
        name: salesFeatureTypeID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesFeatureTypeModel'
            text/json:
              schema:
                $ref: '#/components/schemas/SalesFeatureTypeModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/SalesFeatureTypeModel'
            text/xml:
              schema:
                $ref: '#/components/schemas/SalesFeatureTypeModel'
          description: OK
      summary: Get a specific sales feature type given its unique Object ID (OID)
      tags:
      - SalesController
      x-openapi-router-controller: openapi_server.controllers.sales_controller_controller
  /v2/tier2/{shortName}/sales/salesinstructions:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_sales_salesinstructions_get
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesInstructionModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/SalesInstructionModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/SalesInstructionModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/SalesInstructionModelResults'
          description: OK
      summary: A collection of all sales instructions linked to a company
      tags:
      - SalesController
      x-openapi-router-controller: openapi_server.controllers.sales_controller_controller
  /v2/tier2/{shortName}/sales/salesinstructions/{salesInstructionID}:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_sales_salesinstructions_sales_instruction_idget
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the SalesInstruction
        in: path
        name: salesInstructionID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesInstructionModel'
            text/json:
              schema:
                $ref: '#/components/schemas/SalesInstructionModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/SalesInstructionModel'
            text/xml:
              schema:
                $ref: '#/components/schemas/SalesInstructionModel'
          description: OK
      summary: Get a specific sales instruction given its unique Object ID (OID)
      tags:
      - SalesController
      x-openapi-router-controller: openapi_server.controllers.sales_controller_controller
  /v2/tier2/{shortName}/sales/salesinstructions/{salesInstructionID}/features:
    get:
      deprecated: false
      operationId: sales_controller_get_sales_instructions_features
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the SalesInstruction
        in: path
        name: salesInstructionID
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesFeatureModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/SalesFeatureModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/SalesFeatureModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/SalesFeatureModelResults'
          description: OK
      summary: A collection of all features linked to a sales instruction
      tags:
      - SalesController
      x-openapi-router-controller: openapi_server.controllers.sales_controller_controller
  /v2/tier2/{shortName}/sales/salesinstructions/{salesInstructionID}/floorplans:
    get:
      deprecated: false
      operationId: sales_controller_get_sales_instructions_floor_plans
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the SalesInstruction
        in: path
        name: salesInstructionID
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/PhotoModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/PhotoModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/PhotoModelResults'
          description: OK
      summary: A collection of floor plans linked to an instruction
      tags:
      - SalesController
      x-openapi-router-controller: openapi_server.controllers.sales_controller_controller
  /v2/tier2/{shortName}/sales/salesinstructions/{salesInstructionID}/photos:
    get:
      deprecated: false
      operationId: sales_controller_get_sales_instructions_photos
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the SalesInstruction
        in: path
        name: salesInstructionID
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/PhotoModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/PhotoModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/PhotoModelResults'
          description: OK
      summary: A collection of photos linked to an instruction
      tags:
      - SalesController
      x-openapi-router-controller: openapi_server.controllers.sales_controller_controller
  /v2/tier2/{shortName}/sales/salesinstructions/{salesInstructionID}/rooms:
    get:
      deprecated: false
      operationId: sales_controller_get_sales_instructions_rooms
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the SalesInstruction
        in: path
        name: salesInstructionID
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyRoomModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/PropertyRoomModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/PropertyRoomModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/PropertyRoomModelResults'
          description: OK
      summary: A collection of rooms linked to an instruction
      tags:
      - SalesController
      x-openapi-router-controller: openapi_server.controllers.sales_controller_controller
  /v2/tier2/{shortName}/staff/staff:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_staff_staff_get
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The index of the first item to return
        in: query
        name: offset
        required: true
        schema:
          format: int32
          type: integer
      - description: The maximum number of items to return (up to 1000 per request)
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationStaffModelResults'
            text/json:
              schema:
                $ref: '#/components/schemas/ApplicationStaffModelResults'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApplicationStaffModelResults'
            text/xml:
              schema:
                $ref: '#/components/schemas/ApplicationStaffModelResults'
          description: OK
      summary: A collection of all the staff members linked to a specific company
      tags:
      - StaffController
      x-openapi-router-controller: openapi_server.controllers.staff_controller_controller
  /v2/tier2/{shortName}/staff/staff/{applicationStaffID}:
    get:
      deprecated: false
      operationId: v2_tier2_short_name_staff_staff_application_staff_idget
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The unique ID of the ApplicationStaff
        in: path
        name: applicationStaffID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationStaffModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApplicationStaffModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApplicationStaffModel'
            text/xml:
              schema:
                $ref: '#/components/schemas/ApplicationStaffModel'
          description: OK
      summary: Get a specific application staff given its unique Object ID (OID)
      tags:
      - StaffController
      x-openapi-router-controller: openapi_server.controllers.staff_controller_controller
  /v2/tier2/{shortName}/viewing/bookings:
    get:
      deprecated: false
      operationId: viewing_controller_get_bookings
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The preferred date for a viewing
        in: query
        name: preferredDate
        required: true
        schema:
          format: date-time
          type: string
      - description: An array of unique IDs of properties to view
        explode: true
        in: query
        name: propertyIDsToView
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ViewingBookingModel'
                type: array
            text/json:
              schema:
                items:
                  $ref: '#/components/schemas/ViewingBookingModel'
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/ViewingBookingModel'
                type: array
            text/xml:
              schema:
                items:
                  $ref: '#/components/schemas/ViewingBookingModel'
                type: array
          description: OK
      summary: Gets a list of available viewing slots for one or more properties
      tags:
      - ViewingController
      x-openapi-router-controller: openapi_server.controllers.viewing_controller_controller
    post:
      deprecated: false
      operationId: viewing_controller_make_booking
      parameters:
      - description: The unique client short-name
        in: path
        name: shortName
        required: true
        schema:
          type: string
      - description: The forename of the prospect
        in: query
        name: forename
        required: true
        schema:
          type: string
      - description: The surname of the prospect
        in: query
        name: surname
        required: true
        schema:
          type: string
      - description: The mobile phone number of the prospect
        in: query
        name: mobilePhone
        required: true
        schema:
          type: string
      - description: The email address of the prospect
        in: query
        name: emailAddress
        required: true
        schema:
          type: string
      - description: An array of unique IDs of properties to view
        explode: true
        in: query
        name: propertyIDsToView
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Whether the prospect wants a shared property
        in: query
        name: wantRoomInSharedProperty
        schema:
          type: boolean
      - description: The minimum rent amount the prospect is looking for
        in: query
        name: alertMinRent
        schema:
          format: double
          type: number
      - description: The maximum rent amount the prospect is looking for
        in: query
        name: alertMaxRent
        schema:
          format: double
          type: number
      - description: The minimum number of beds the prospect is looking for
        in: query
        name: alertNumberOfBeds
        schema:
          format: int32
          type: integer
      - description: The unique ID of the area the prospect is looking for
        in: query
        name: alertAreaID
        schema:
          type: string
      - description: The tenanct type the prospect is looking for
        in: query
        name: alertTenantType
        schema:
          enum:
          - Employed
          - SelfEmployed
          - Unemployed
          - Student
          - OwnMeans
          - Retired
          - Company
          - Council
          type: string
      - description: Whether to subscribe the prospect to email alerts
        in: query
        name: subscribeToEmailAlerts
        schema:
          type: boolean
      - description: Whether to subscribe the prospect to SMS alerts
        in: query
        name: subscribeToSMSAlerts
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViewingBookingModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ViewingBookingModel'
          application/xml:
            schema:
              $ref: '#/components/schemas/ViewingBookingModel'
          text/xml:
            schema:
              $ref: '#/components/schemas/ViewingBookingModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ViewingBookingModel'
        description: The prospect's selected viewing slot
        required: true
        x-body-name: selectedViewingSlot
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
            application/xml:
              schema:
                type: boolean
            text/xml:
              schema:
                type: boolean
          description: OK
      summary: Book an appointment for a viewing slot returned from the GET verb
      tags:
      - ViewingController
      x-codegen-request-body-name: selectedViewingSlot
      x-openapi-router-controller: openapi_server.controllers.viewing_controller_controller
components:
  schemas:
    ApplicationStaffModel:
      description: Holds the information about a member of staff.
      example:
        ContactMobile: ContactMobile
        DateOfBirth: 2000-01-23T04:56:07.000+00:00
        ManagedBy: ManagedBy
        ETag: ETag
        GlobalReference: GlobalReference
        IsEnabled: true
        Forename: Forename
        Title: Title
        ContactEMail: ContactEMail
        Middlename: Middlename
        OID: OID
        Surname: Surname
      properties:
        ContactEMail:
          description: The user's email contact.
          title: ContactEMail
          type: string
        ContactMobile:
          description: The user's mobile contact.
          title: ContactMobile
          type: string
        DateOfBirth:
          description: The user's date of birth.
          format: date-time
          title: DateOfBirth
          type: string
        ETag:
          description: A unique identifier defining the object and change revision.
          title: ETag
          type: string
        Forename:
          description: The user's forename.
          title: Forename
          type: string
        GlobalReference:
          description: The global reference to this user.
          title: GlobalReference
          type: string
        IsEnabled:
          description: Is this staff member enabled?
          title: IsEnabled
          type: boolean
        ManagedBy:
          description: The branch linked to this user
          title: ManagedBy
          type: string
        Middlename:
          description: The user's middlename.
          title: Middlename
          type: string
        OID:
          description: The unique Object ID (OID).
          title: OID
          type: string
        Surname:
          description: The user's surname.
          title: Surname
          type: string
        Title:
          description: The user's title.
          title: Title
          type: string
      title: ApplicationStaffModel
      type: object
    ApplicationStaffModelResults:
      description: Holds results from a paged query returning ApplicationStaffModel
        values
      example:
        Data:
        - ContactMobile: ContactMobile
          DateOfBirth: 2000-01-23T04:56:07.000+00:00
          ManagedBy: ManagedBy
          ETag: ETag
          GlobalReference: GlobalReference
          IsEnabled: true
          Forename: Forename
          Title: Title
          ContactEMail: ContactEMail
          Middlename: Middlename
          OID: OID
          Surname: Surname
        - ContactMobile: ContactMobile
          DateOfBirth: 2000-01-23T04:56:07.000+00:00
          ManagedBy: ManagedBy
          ETag: ETag
          GlobalReference: GlobalReference
          IsEnabled: true
          Forename: Forename
          Title: Title
          ContactEMail: ContactEMail
          Middlename: Middlename
          OID: OID
          Surname: Surname
        Count: 0
      properties:
        Count:
          description: The total number of results available for all pages
          format: int32
          title: Count
          type: integer
        Data:
          description: The resulting data returned from the paged query range
          items:
            $ref: '#/components/schemas/ApplicationStaffModel'
          title: Data
          type: array
      title: ApplicationStaffModelResults
      type: object
    AreaModel:
      description: Stores the information about a single property area.
      example:
        ETag: ETag
        Branch: Branch
        ShowOnSites: true
        OID: OID
        Name: Name
      properties:
        Branch:
          description: The branch that manages this area.
          title: Branch
          type: string
        ETag:
          description: A unique identifier defining the object and change revision.
          title: ETag
          type: string
        Name:
          description: The property area name.
          title: Name
          type: string
        OID:
          description: The unique Object ID (OID).
          title: OID
          type: string
        ShowOnSites:
          description: Show the area on sites?
          title: ShowOnSites
          type: boolean
      title: AreaModel
      type: object
    AreaModelResults:
      description: Holds results from a paged query returning AreaModel values
      example:
        Data:
        - ETag: ETag
          Branch: Branch
          ShowOnSites: true
          OID: OID
          Name: Name
        - ETag: ETag
          Branch: Branch
          ShowOnSites: true
          OID: OID
          Name: Name
        Count: 0
      properties:
        Count:
          description: The total number of results available for all pages
          format: int32
          title: Count
          type: integer
        Data:
          description: The resulting data returned from the paged query range
          items:
            $ref: '#/components/schemas/AreaModel'
          title: Data
          type: array
      title: AreaModelResults
      type: object
    BranchModel:
      description: Defines a single branch of a client.
      example:
        EMailAddress: EMailAddress
        Address2: Address2
        Address3: Address3
        Address1: Address1
        OID: OID
        County: County
        Postcode: Postcode
        LandPhone: LandPhone
        Name: Name
        CompanyName: CompanyName
        ETag: ETag
        Address4: Address4
        WebAddress: WebAddress
        FaxPhone: FaxPhone
      properties:
        Address1:
          description: Branch address line 1.
          title: Address1
          type: string
        Address2:
          description: Branch address line 2.
          title: Address2
          type: string
        Address3:
          description: Branch address line 3.
          title: Address3
          type: string
        Address4:
          description: Branch address line 4.
          title: Address4
          type: string
        CompanyName:
          description: "The relevant company name, if not the one specified on the\
            \ branch then the one on company."
          title: CompanyName
          type: string
        County:
          description: County
          title: County
          type: string
        EMailAddress:
          description: Branch email address.
          title: EMailAddress
          type: string
        ETag:
          description: A unique identifier defining the object and change revision.
          title: ETag
          type: string
        FaxPhone:
          description: Branch fax phone number.
          title: FaxPhone
          type: string
        LandPhone:
          description: Branch land phone number.
          title: LandPhone
          type: string
        Name:
          description: The branch name.
          title: Name
          type: string
        OID:
          description: The unique Object ID (OID).
          title: OID
          type: string
        Postcode:
          description: Branch address postcode.
          title: Postcode
          type: string
        WebAddress:
          description: Branch web address.
          title: WebAddress
          type: string
      title: BranchModel
      type: object
    BranchModelResults:
      description: Holds results from a paged query returning BranchModel values
      example:
        Data:
        - EMailAddress: EMailAddress
          Address2: Address2
          Address3: Address3
          Address1: Address1
          OID: OID
          County: County
          Postcode: Postcode
          LandPhone: LandPhone
          Name: Name
          CompanyName: CompanyName
          ETag: ETag
          Address4: Address4
          WebAddress: WebAddress
          FaxPhone: FaxPhone
        - EMailAddress: EMailAddress
          Address2: Address2
          Address3: Address3
          Address1: Address1
          OID: OID
          County: County
          Postcode: Postcode
          LandPhone: LandPhone
          Name: Name
          CompanyName: CompanyName
          ETag: ETag
          Address4: Address4
          WebAddress: WebAddress
          FaxPhone: FaxPhone
        Count: 0
      properties:
        Count:
          description: The total number of results available for all pages
          format: int32
          title: Count
          type: integer
        Data:
          description: The resulting data returned from the paged query range
          items:
            $ref: '#/components/schemas/BranchModel'
          title: Data
          type: array
      title: BranchModelResults
      type: object
    CompanyModel:
      description: The search code for the ApplicationCompany storage object.
      example:
        CompanyName: CompanyName
        MarketingCompanyName: MarketingCompanyName
        ETag: ETag
        ShortName: ShortName
        OID: OID
        CompanyRegistration: CompanyRegistration
      properties:
        CompanyName:
          description: Company name
          title: CompanyName
          type: string
        CompanyRegistration:
          description: Company registration number
          title: CompanyRegistration
          type: string
        ETag:
          description: A unique identifier defining the object and change revision.
          title: ETag
          type: string
        MarketingCompanyName:
          description: Company Marketing Name
          title: MarketingCompanyName
          type: string
        OID:
          description: The unique Object ID (OID).
          title: OID
          type: string
        ShortName:
          description: The unique identifier assigned to the client
          title: ShortName
          type: string
      title: CompanyModel
      type: object
    CountyModel:
      description: Stores the information about a single property County. A County
        can have a number of areas linked to it.
      example:
        ETag: ETag
        OID: OID
        Name: Name
      properties:
        ETag:
          description: A unique identifier defining the object and change revision.
          title: ETag
          type: string
        Name:
          description: The property county name.
          title: Name
          type: string
        OID:
          description: The unique Object ID (OID).
          title: OID
          type: string
      title: CountyModel
      type: object
    CountyModelResults:
      description: Holds results from a paged query returning CountyModel values
      example:
        Data:
        - ETag: ETag
          OID: OID
          Name: Name
        - ETag: ETag
          OID: OID
          Name: Name
        Count: 0
      properties:
        Count:
          description: The total number of results available for all pages
          format: int32
          title: Count
          type: integer
        Data:
          description: The resulting data returned from the paged query range
          items:
            $ref: '#/components/schemas/CountyModel'
          title: Data
          type: array
      title: CountyModelResults
      type: object
    DiaryAllocationModel:
      description: "Represents a single diary allocation, capable of holding a number\r\
        \n            of appointments associated with a member of staff."
      example:
        AppointmentType: AppointmentType
        ETag: ETag
        Start: 2000-01-23T04:56:07.000+00:00
        Staff: Staff
        End: 2000-01-23T04:56:07.000+00:00
        OID: OID
      properties:
        AppointmentType:
          description: The diary appointment type.
          title: AppointmentType
          type: string
        ETag:
          description: A unique identifier defining the object and change revision.
          title: ETag
          type: string
        End:
          description: The end date/time of this allocation.
          format: date-time
          title: End
          type: string
        OID:
          description: The unique Object ID (OID).
          title: OID
          type: string
        Staff:
          description: The staff member holding this allocation.
          title: Staff
          type: string
        Start:
          description: The start date/time of this allocation.
          format: date-time
          title: Start
          type: string
      title: DiaryAllocationModel
      type: object
    DiaryAllocationModelResults:
      description: Holds results from a paged query returning DiaryAllocationModel
        values
      example:
        Data:
        - AppointmentType: AppointmentType
          ETag: ETag
          Start: 2000-01-23T04:56:07.000+00:00
          Staff: Staff
          End: 2000-01-23T04:56:07.000+00:00
          OID: OID
        - AppointmentType: AppointmentType
          ETag: ETag
          Start: 2000-01-23T04:56:07.000+00:00
          Staff: Staff
          End: 2000-01-23T04:56:07.000+00:00
          OID: OID
        Count: 0
      properties:
        Count:
          description: The total number of results available for all pages
          format: int32
          title: Count
          type: integer
        Data:
          description: The resulting data returned from the paged query range
          items:
            $ref: '#/components/schemas/DiaryAllocationModel'
          title: Data
          type: array
      title: DiaryAllocationModelResults
      type: object
    DiaryAppointmentModel:
      description: Represents a single diary appointment for a staff member.
      example:
        Comment: Comment
        CreatedBy: CreatedBy
        RemindBefore: Min
        Start: 2000-01-23T04:56:07.000+00:00
        CreatedAt: 2000-01-23T04:56:07.000+00:00
        Staff: Staff
        RemindAt: 2000-01-23T04:56:07.000+00:00
        Cancelled: true
        OID: OID
        Subject: Subject
        AppointmentType: AppointmentType
        ETag: ETag
        End: 2000-01-23T04:56:07.000+00:00
      properties:
        AppointmentType:
          description: The diary appointment type.
          title: AppointmentType
          type: string
        Cancelled:
          description: Whether the appointment has been cancelled.
          title: Cancelled
          type: boolean
        Comment:
          description: The appointment comments text.
          title: Comment
          type: string
        CreatedAt:
          description: The date/time this appointment was created.
          format: date-time
          title: CreatedAt
          type: string
        CreatedBy:
          description: The staff member that created this appointment.
          title: CreatedBy
          type: string
        ETag:
          description: A unique identifier defining the object and change revision.
          title: ETag
          type: string
        End:
          description: The end date/time of this appointment.
          format: date-time
          title: End
          type: string
        OID:
          description: The unique Object ID (OID).
          title: OID
          type: string
        RemindAt:
          description: The date/time to remind the staff member of this appointment.
          format: date-time
          title: RemindAt
          type: string
        RemindBefore:
          description: The number of minutes before the appointment start date/time
            to remind the staff member. -1 means don't remind.
          enum:
          - Min
          - Min2
          - Min5
          - Min10
          - Min15
          - Min30
          - Min45
          - Hour
          - Hour2
          - Hour3
          - Hour6
          - Hour12
          - Day
          - Day2
          - Day3
          - Week
          - NoReminder
          title: RemindBefore
          type: string
        Staff:
          description: The staff member holding this appointment.
          title: Staff
          type: string
        Start:
          description: The start date/time of this appointment.
          format: date-time
          title: Start
          type: string
        Subject:
          description: The appointment subject text.
          title: Subject
          type: string
      title: DiaryAppointmentModel
      type: object
    DiaryAppointmentModelResults:
      description: Holds results from a paged query returning DiaryAppointmentModel
        values
      example:
        Data:
        - Comment: Comment
          CreatedBy: CreatedBy
          RemindBefore: Min
          Start: 2000-01-23T04:56:07.000+00:00
          CreatedAt: 2000-01-23T04:56:07.000+00:00
          Staff: Staff
          RemindAt: 2000-01-23T04:56:07.000+00:00
          Cancelled: true
          OID: OID
          Subject: Subject
          AppointmentType: AppointmentType
          ETag: ETag
          End: 2000-01-23T04:56:07.000+00:00
        - Comment: Comment
          CreatedBy: CreatedBy
          RemindBefore: Min
          Start: 2000-01-23T04:56:07.000+00:00
          CreatedAt: 2000-01-23T04:56:07.000+00:00
          Staff: Staff
          RemindAt: 2000-01-23T04:56:07.000+00:00
          Cancelled: true
          OID: OID
          Subject: Subject
          AppointmentType: AppointmentType
          ETag: ETag
          End: 2000-01-23T04:56:07.000+00:00
        Count: 0
      properties:
        Count:
          description: The total number of results available for all pages
          format: int32
          title: Count
          type: integer
        Data:
          description: The resulting data returned from the paged query range
          items:
            $ref: '#/components/schemas/DiaryAppointmentModel'
          title: Data
          type: array
      title: DiaryAppointmentModelResults
      type: object
    DiaryAppointmentTypeModel:
      description: Represents a diary appointment type.
      example:
        ETag: ETag
        SystemType: Viewing
        OID: OID
        Name: Name
      properties:
        ETag:
          description: A unique identifier defining the object and change revision.
          title: ETag
          type: string
        Name:
          description: The appointment type name.
          title: Name
          type: string
        OID:
          description: The unique Object ID (OID).
          title: OID
          type: string
        SystemType:
          description: The appointment system type.
          enum:
          - Viewing
          - ViewAndValue
          - OpeningInspection
          - InterimInspection
          - ClosingInspection
          - SalesAppraisal
          - Custom
          title: SystemType
          type: string
      title: DiaryAppointmentTypeModel
      type: object
    DiaryAppointmentTypeModelResults:
      description: Holds results from a paged query returning DiaryAppointmentTypeModel
        values
      example:
        Data:
        - ETag: ETag
          SystemType: Viewing
          OID: OID
          Name: Name
        - ETag: ETag
          SystemType: Viewing
          OID: OID
          Name: Name
        Count: 0
      properties:
        Count:
          description: The total number of results available for all pages
          format: int32
          title: Count
          type: integer
        Data:
          description: The resulting data returned from the paged query range
          items:
            $ref: '#/components/schemas/DiaryAppointmentTypeModel'
          title: Data
          type: array
      title: DiaryAppointmentTypeModelResults
      type: object
    Object:
      type: object
    PhotoModel:
      description: Stores a photo related to a property structure.
      example:
        InventoryItem: InventoryItem
        ETag: ETag
        FileName: FileName
        PhotoNumber: 6
        InterimInspection: InterimInspection
        PhotoType: Photo
        OID: OID
        Property: Property
        Room: Room
        InspectionItem: InspectionItem
        Name: Name
      properties:
        ETag:
          description: A unique identifier defining the object and change revision.
          title: ETag
          type: string
        FileName:
          description: The file name.
          title: FileName
          type: string
        InspectionItem:
          description: The inspection item the photo is assigned to (if applicable).
          title: InspectionItem
          type: string
        InterimInspection:
          description: The inspection the photo is assigned to (if applicable).
          title: InterimInspection
          type: string
        InventoryItem:
          description: The inventory item the photo is assigned to (if applicable).
          title: InventoryItem
          type: string
        Name:
          description: The photo name.
          title: Name
          type: string
        OID:
          description: The unique Object ID (OID).
          title: OID
          type: string
        PhotoNumber:
          description: The photo ordering number
          format: int32
          title: PhotoNumber
          type: integer
        PhotoType:
          description: The photo type.
          enum:
          - Photo
          - Map
          - FloorPlan
          - SiteMap
          - AerialPhoto
          title: PhotoType
          type: string
        Property:
          description: The property the photo is assigned to.
          title: Property
          type: string
        Room:
          description: The room the photo is assigned to. (If applicable)
          title: Room
          type: string
      title: PhotoModel
      type: object
    PhotoModelResults:
      description: Holds results from a paged query returning PhotoModel values
      example:
        Data:
        - InventoryItem: InventoryItem
          ETag: ETag
          FileName: FileName
          PhotoNumber: 6
          InterimInspection: InterimInspection
          PhotoType: Photo
          OID: OID
          Property: Property
          Room: Room
          InspectionItem: InspectionItem
          Name: Name
        - InventoryItem: InventoryItem
          ETag: ETag
          FileName: FileName
          PhotoNumber: 6
          InterimInspection: InterimInspection
          PhotoType: Photo
          OID: OID
          Property: Property
          Room: Room
          InspectionItem: InspectionItem
          Name: Name
        Count: 0
      properties:
        Count:
          description: The total number of results available for all pages
          format: int32
          title: Count
          type: integer
        Data:
          description: The resulting data returned from the paged query range
          items:
            $ref: '#/components/schemas/PhotoModel'
          title: Data
          type: array
      title: PhotoModelResults
      type: object
    PropertyFacilityModel:
      description: Stores the information about a single property facility.
      example:
        ETag: ETag
        OID: OID
        Name: Name
      properties:
        ETag:
          description: A unique identifier defining the object and change revision.
          title: ETag
          type: string
        Name:
          description: Display Name
          title: Name
          type: string
        OID:
          description: The unique Object ID (OID).
          title: OID
          type: string
      title: PropertyFacilityModel
      type: object
    PropertyFacilityModelResults:
      description: Holds results from a paged query returning PropertyFacilityModel
        values
      example:
        Data:
        - ETag: ETag
          OID: OID
          Name: Name
        - ETag: ETag
          OID: OID
          Name: Name
        Count: 0
      properties:
        Count:
          description: The total number of results available for all pages
          format: int32
          title: Count
          type: integer
        Data:
          description: The resulting data returned from the paged query range
          items:
            $ref: '#/components/schemas/PropertyFacilityModel'
          title: Data
          type: array
      title: PropertyFacilityModelResults
      type: object
    PropertyModel:
      description: Stores the 'Sales' type fields for property ownable as a stepping
        stone to a full on BO when we finally get the go ahead to write sales!!
      example:
        FullAddress: FullAddress
        Description: Description
        RoomName: RoomName
        GlobalReference: GlobalReference
        OID: OID
        PropertyType: House
        PropertySource: PropertySource
        VideoURL: VideoURL
        Area: Area
        ETag: ETag
        Branch: Branch
        MainPhoto: MainPhoto
        ManagedByStaff: ManagedByStaff
      properties:
        Area:
          description: The area the property is located in.
          title: Area
          type: string
        Branch:
          description: "The branch the block, property or room is assigned to"
          title: Branch
          type: string
        Description:
          description: "The block, property or room description."
          title: Description
          type: string
        ETag:
          description: A unique identifier defining the object and change revision.
          title: ETag
          type: string
        FullAddress:
          description: "The full address of a block, property or room, formatted with\
            \ line breaks such that it may be used on a letter directly."
          title: FullAddress
          type: string
        GlobalReference:
          description: "The global reference to this block, property or room"
          title: GlobalReference
          type: string
        MainPhoto:
          description: "Gets the main photo, if there is one."
          title: MainPhoto
          type: string
        ManagedByStaff:
          description: "The staff memeber that manages the block, property or room"
          title: ManagedByStaff
          type: string
        OID:
          description: The unique Object ID (OID).
          title: OID
          type: string
        PropertySource:
          description: "The block, property or room source type"
          title: PropertySource
          type: string
        PropertyType:
          description: The block or property type.
          enum:
          - House
          - FlatApartment
          - Bungalow
          - Land
          - HouseFlatShare
          - GarageParking
          - CommercialProperty
          - Block
          - TerracedHouse
          - EndTerraceHouse
          - SemiDetachedHouse
          - DetachedHouse
          - SemiDetachedBungalow
          - TownHouse
          - Cottage
          - ServicedApartment
          - Studio
          - Apartment
          - Barn
          - FarmHouse
          - Penthouse
          - BuildingPlot
          - DetachedBungalow
          - LinkDetached
          - MidTerracedBungalow
          - LandResidential
          title: PropertyType
          type: string
        RoomName:
          description: The room name (if applicable).
          title: RoomName
          type: string
        VideoURL:
          description: URL of the video linked to the property
          title: VideoURL
          type: string
      title: PropertyModel
      type: object
    PropertyModelResults:
      description: Holds results from a paged query returning PropertyModel values
      example:
        Data:
        - FullAddress: FullAddress
          Description: Description
          RoomName: RoomName
          GlobalReference: GlobalReference
          OID: OID
          PropertyType: House
          PropertySource: PropertySource
          VideoURL: VideoURL
          Area: Area
          ETag: ETag
          Branch: Branch
          MainPhoto: MainPhoto
          ManagedByStaff: ManagedByStaff
        - FullAddress: FullAddress
          Description: Description
          RoomName: RoomName
          GlobalReference: GlobalReference
          OID: OID
          PropertyType: House
          PropertySource: PropertySource
          VideoURL: VideoURL
          Area: Area
          ETag: ETag
          Branch: Branch
          MainPhoto: MainPhoto
          ManagedByStaff: ManagedByStaff
        Count: 0
      properties:
        Count:
          description: The total number of results available for all pages
          format: int32
          title: Count
          type: integer
        Data:
          description: The resulting data returned from the paged query range
          items:
            $ref: '#/components/schemas/PropertyModel'
          title: Data
          type: array
      title: PropertyModelResults
      type: object
    PropertyRoomModel:
      description: A single room (bedroom) property structure.
      example:
        HeightMeters: 1
        FullAddress: FullAddress
        Description: Description
        RoomName: RoomName
        GlobalReference: GlobalReference
        LengthCentimeters: 5
        OID: OID
        PropertySource: PropertySource
        Area: Area
        ETag: ETag
        Branch: Branch
        LengthMeters: 5
        MainPhoto: MainPhoto
        HeightCentimeters: 6
        ManagedByStaff: ManagedByStaff
        RoomFloor: Basement
        WidthCentiMeters: 2
        WidthMeters: 7
      properties:
        Area:
          description: The area the property is located in.
          title: Area
          type: string
        Branch:
          description: "The branch the block, property or room is assigned to"
          title: Branch
          type: string
        Description:
          description: "The block, property or room description."
          title: Description
          type: string
        ETag:
          description: A unique identifier defining the object and change revision.
          title: ETag
          type: string
        FullAddress:
          description: "The full address of a block, property or room, formatted with\
            \ line breaks such that it may be used on a letter directly."
          title: FullAddress
          type: string
        GlobalReference:
          description: "The global reference to this block, property or room"
          title: GlobalReference
          type: string
        HeightCentimeters:
          description: Gets the CentiMeter part of the room Height.
          format: int32
          title: HeightCentimeters
          type: integer
        HeightMeters:
          description: Gets the Meter part of the room Height.
          format: int32
          title: HeightMeters
          type: integer
        LengthCentimeters:
          description: Gets the CentiMeter part of the room Length.
          format: int32
          title: LengthCentimeters
          type: integer
        LengthMeters:
          description: Gets the Meter part of the room Length.
          format: int32
          title: LengthMeters
          type: integer
        MainPhoto:
          description: "Gets the main photo, if there is one."
          title: MainPhoto
          type: string
        ManagedByStaff:
          description: "The staff memeber that manages the block, property or room"
          title: ManagedByStaff
          type: string
        OID:
          description: The unique Object ID (OID).
          title: OID
          type: string
        PropertySource:
          description: "The block, property or room source type"
          title: PropertySource
          type: string
        RoomFloor:
          description: Gets and sets the room floor.
          enum:
          - Basement
          - Ground
          - First
          - Second
          - Third
          - Fourth
          - Fifth
          - SixthPlus
          - Unknown
          title: RoomFloor
          type: string
        RoomName:
          description: The room name (if applicable).
          title: RoomName
          type: string
        WidthCentiMeters:
          description: Gets the CentiMeter part of the room width.
          format: int32
          title: WidthCentiMeters
          type: integer
        WidthMeters:
          description: Gets the Meter part of the room width.
          format: int32
          title: WidthMeters
          type: integer
      title: PropertyRoomModel
      type: object
    PropertyRoomModelResults:
      description: Holds results from a paged query returning PropertyRoomModel values
      example:
        Data:
        - HeightMeters: 1
          FullAddress: FullAddress
          Description: Description
          RoomName: RoomName
          GlobalReference: GlobalReference
          LengthCentimeters: 5
          OID: OID
          PropertySource: PropertySource
          Area: Area
          ETag: ETag
          Branch: Branch
          LengthMeters: 5
          MainPhoto: MainPhoto
          HeightCentimeters: 6
          ManagedByStaff: ManagedByStaff
          RoomFloor: Basement
          WidthCentiMeters: 2
          WidthMeters: 7
        - HeightMeters: 1
          FullAddress: FullAddress
          Description: Description
          RoomName: RoomName
          GlobalReference: GlobalReference
          LengthCentimeters: 5
          OID: OID
          PropertySource: PropertySource
          Area: Area
          ETag: ETag
          Branch: Branch
          LengthMeters: 5
          MainPhoto: MainPhoto
          HeightCentimeters: 6
          ManagedByStaff: ManagedByStaff
          RoomFloor: Basement
          WidthCentiMeters: 2
          WidthMeters: 7
        Count: 0
      properties:
        Count:
          description: The total number of results available for all pages
          format: int32
          title: Count
          type: integer
        Data:
          description: The resulting data returned from the paged query range
          items:
            $ref: '#/components/schemas/PropertyRoomModel'
          title: Data
          type: array
      title: PropertyRoomModelResults
      type: object
    SalesFeatureModel:
      description: ""
      example:
        Comment: Comment
        Type: Type
        ETag: ETag
        OID: OID
      properties:
        Comment:
          description: The feature comment
          title: Comment
          type: string
        ETag:
          description: A unique identifier defining the object and change revision.
          title: ETag
          type: string
        OID:
          description: The unique Object ID (OID).
          title: OID
          type: string
        Type:
          description: The feature type
          title: Type
          type: string
      title: SalesFeatureModel
      type: object
    SalesFeatureModelResults:
      description: Holds results from a paged query returning SalesFeatureModel values
      example:
        Data:
        - Comment: Comment
          Type: Type
          ETag: ETag
          OID: OID
        - Comment: Comment
          Type: Type
          ETag: ETag
          OID: OID
        Count: 0
      properties:
        Count:
          description: The total number of results available for all pages
          format: int32
          title: Count
          type: integer
        Data:
          description: The resulting data returned from the paged query range
          items:
            $ref: '#/components/schemas/SalesFeatureModel'
          title: Data
          type: array
      title: SalesFeatureModelResults
      type: object
    SalesFeatureTypeModel:
      description: ""
      example:
        ETag: ETag
        OID: OID
        Name: Name
      properties:
        ETag:
          description: A unique identifier defining the object and change revision.
          title: ETag
          type: string
        Name:
          description: The name of the feature type
          title: Name
          type: string
        OID:
          description: The unique Object ID (OID).
          title: OID
          type: string
      title: SalesFeatureTypeModel
      type: object
    SalesFeatureTypeModelResults:
      description: Holds results from a paged query returning SalesFeatureTypeModel
        values
      example:
        Data:
        - ETag: ETag
          OID: OID
          Name: Name
        - ETag: ETag
          OID: OID
          Name: Name
        Count: 0
      properties:
        Count:
          description: The total number of results available for all pages
          format: int32
          title: Count
          type: integer
        Data:
          description: The resulting data returned from the paged query range
          items:
            $ref: '#/components/schemas/SalesFeatureTypeModel'
          title: Data
          type: array
      title: SalesFeatureTypeModelResults
      type: object
    SalesInstructionModel:
      description: ""
      example:
        OutsideSpacePatio: true
        ParkingTripleGarage: true
        Kitchens: 3
        ParkingOnRoad: true
        ParkingCarport: true
        EPCPotentialEER: 7
        DevelopmentOpp: true
        EPCPotentialEI: 9
        EPCCurrentEER: 5
        OutsideSpaceSouthFacingGarden: true
        OID: OID
        ParkingGarage: true
        Postcode: Postcode
        Area: Area
        OutsideSpaceLargeGarden: true
        Bedrooms: 5
        ETag: ETag
        Price: 2.027123023002322
        State: MarketAppraisal
        AddressNumber: AddressNumber
        ContractType: Pending
        Country: Afghanistan
        InvestmentOpp: true
        OutsideSpaceCommunalGarden: true
        HasElectricitySupply: true
        Description: Description
        BathroomsEnsuite: 1
        Directions: Directions
        OutsideSpaceConservatory: true
        HasWaterMeter: true
        Tenure: Freehold
        ParkingOffRoad: true
        HasGasSupply: true
        Address4: Address4
        ParkingSecureGated: true
        ParkingDoubleGarage: true
        ParkingPermit: true
        OutsideSpaceBalcony: true
        ReceptionRooms: 4
        Address2: Address2
        Address3: Address3
        Address1: Address1
        PropertyOwnableType: House
        VideoURL: VideoURL
        EPCCurrentEI: 2
        OutsideSpaceGarden: true
        ParkingAllocated: true
        Bathrooms: 6
        OutsideSpaceRoofTerrace: true
      properties:
        Address1:
          description: Address 1 of the property to be sold
          title: Address1
          type: string
        Address2:
          description: Address 2 of the property to be sold
          title: Address2
          type: string
        Address3:
          description: Address 3 of the property to be sold
          title: Address3
          type: string
        Address4:
          description: Address 4 of the property to be sold
          title: Address4
          type: string
        AddressNumber:
          description: Address number of the property to be sold
          title: AddressNumber
          type: string
        Area:
          description: The area linked to the instruction
          title: Area
          type: string
        Bathrooms:
          description: Number of bathrooms linked to the instruction
          format: int32
          title: Bathrooms
          type: integer
        BathroomsEnsuite:
          description: How many of the bathrooms are ensuite?
          format: int32
          title: BathroomsEnsuite
          type: integer
        Bedrooms:
          description: Number of bedrooms linked to the instruction
          format: int32
          title: Bedrooms
          type: integer
        ContractType:
          description: The contract type
          enum:
          - Pending
          - SoleAgency
          - SoleSellingRights
          - JointSoleAgency
          - MultiAgency
          - SubAgent
          title: ContractType
          type: string
        Country:
          description: Address country of the property to be sold
          enum:
          - Afghanistan
          - Albania
          - Algeria
          - Andorra
          - Angola
          - AntiguaAndBarbuda
          - Argentina
          - Armenia
          - Australia
          - Austria
          - Azerbaijan
          - Bahamas
          - Bahrain
          - Bangladesh
          - Barbados
          - Belarus
          - Belgium
          - Belize
          - Benin
          - Bhutan
          - Bolivia
          - BosniaAndHerzegovina
          - Botswana
          - Brazil
          - Brunei
          - Bulgaria
          - BurkinaFaso
          - Burundi
          - Cambodia
          - Cameroon
          - Canada
          - CapeVerde
          - CentralAfricanRepublic
          - Chad
          - Chile
          - China
          - Colombia
          - Comoros
          - CongoBrazzaville
          - CongoDemocraticRepublicOfThe
          - CostaRica
          - CoteDIvoire
          - Croatia
          - Cuba
          - Cyprus
          - CzechRepublic
          - Denmark
          - Djibouti
          - Dominica
          - DominicanRepublic
          - EastTimorTimorTimur
          - Ecuador
          - Egypt
          - ElSalvador
          - EquatorialGuinea
          - Eritrea
          - Estonia
          - Ethiopia
          - Fiji
          - Finland
          - France
          - Gabon
          - GambiaThe
          - Georgia
          - Germany
          - Ghana
          - Greece
          - Grenada
          - Guatemala
          - Guinea
          - GuineaBissau
          - Guyana
          - Haiti
          - Honduras
          - Hungary
          - Iceland
          - India
          - Indonesia
          - Iran
          - Iraq
          - Ireland
          - Israel
          - Italy
          - Jamaica
          - Japan
          - Jordan
          - Kazakhstan
          - Kenya
          - Kiribati
          - KoreaNorth
          - KoreaSouth
          - Kuwait
          - Kyrgyzstan
          - Laos
          - Latvia
          - Lebanon
          - Lesotho
          - Liberia
          - Libya
          - Liechtenstein
          - Lithuania
          - Luxembourg
          - MacedoniaFormerYugoslavRepublicOf
          - Madagascar
          - Malawi
          - Malaysia
          - Maldives
          - Mali
          - Malta
          - MarshallIslands
          - Mauritania
          - Mauritius
          - Mexico
          - MicronesiaFederatedStatesOf
          - Moldova
          - Monaco
          - Mongolia
          - Morocco
          - Mozambique
          - Myanmar
          - Namibia
          - Nauru
          - Nepal
          - Netherlands
          - NewZealand
          - Nicaragua
          - Niger
          - Nigeria
          - Norway
          - Oman
          - Pakistan
          - Palau
          - Panama
          - PapuaNewGuinea
          - Paraguay
          - Peru
          - Philippines
          - Poland
          - Portugal
          - Qatar
          - Romania
          - Russia
          - Rwanda
          - SaintKittsAndNevis
          - SaintLucia
          - SaintVincentAndTheGrenadines
          - Samoa
          - SanMarino
          - SaoTomeAndPrincipe
          - SaudiArabia
          - Senegal
          - SerbiaAndMontenegro
          - Seychelles
          - SierraLeone
          - Singapore
          - Slovakia
          - Slovenia
          - SolomonIslands
          - Somalia
          - SouthAfrica
          - Spain
          - SriLanka
          - Sudan
          - Suriname
          - Swaziland
          - Sweden
          - Switzerland
          - Syria
          - Taiwan
          - Tajikistan
          - Tanzania
          - Thailand
          - Togo
          - Tonga
          - TrinidadAndTobago
          - Tunisia
          - Turkey
          - Turkmenistan
          - Tuvalu
          - Uganda
          - Ukraine
          - UnitedArabEmirates
          - UnitedKingdom
          - UnitedStates
          - Uruguay
          - Uzbekistan
          - Vanuatu
          - VaticanCity
          - Venezuela
          - Vietnam
          - WesternSahara
          - Yemen
          - Zambia
          - Zimbabwe
          - UnknownCountry
          - HongKong
          - Jersey
          - ChannelIslands
          - Bermuda
          - BritishOverseasTerritory
          title: Country
          type: string
        Description:
          description: The instruction description
          title: Description
          type: string
        DevelopmentOpp:
          description: Is the instruction a development opportunity?
          title: DevelopmentOpp
          type: boolean
        Directions:
          description: Directions linked to the instruction
          title: Directions
          type: string
        EPCCurrentEER:
          description: Current EER value
          format: int32
          title: EPCCurrentEER
          type: integer
        EPCCurrentEI:
          description: Current EI value
          format: int32
          title: EPCCurrentEI
          type: integer
        EPCPotentialEER:
          description: Potential EER value
          format: int32
          title: EPCPotentialEER
          type: integer
        EPCPotentialEI:
          description: Potential EI value
          format: int32
          title: EPCPotentialEI
          type: integer
        ETag:
          description: A unique identifier defining the object and change revision.
          title: ETag
          type: string
        HasElectricitySupply:
          description: Does the instruction have an electrical supply linked to it?
          title: HasElectricitySupply
          type: boolean
        HasGasSupply:
          description: Does the instruction have an gas supply linked to it?
          title: HasGasSupply
          type: boolean
        HasWaterMeter:
          description: Does the instruction have a water meter linked to it?
          title: HasWaterMeter
          type: boolean
        InvestmentOpp:
          description: Is the instruction a investment opportunity?
          title: InvestmentOpp
          type: boolean
        Kitchens:
          description: Number of kitchens linked to the property instruction
          format: int32
          title: Kitchens
          type: integer
        OID:
          description: The unique Object ID (OID).
          title: OID
          type: string
        OutsideSpaceBalcony:
          description: Does the instruction have an outside balcony linked to it?
          title: OutsideSpaceBalcony
          type: boolean
        OutsideSpaceCommunalGarden:
          description: Does the instruction have a communal garden linked to it?
          title: OutsideSpaceCommunalGarden
          type: boolean
        OutsideSpaceConservatory:
          description: Does the instruction have a conservatory linked to it?
          title: OutsideSpaceConservatory
          type: boolean
        OutsideSpaceGarden:
          description: Does the instruction have a garden linked to it?
          title: OutsideSpaceGarden
          type: boolean
        OutsideSpaceLargeGarden:
          description: Does the instruction have a large garden linked to it?
          title: OutsideSpaceLargeGarden
          type: boolean
        OutsideSpacePatio:
          description: Does the instruction have a patio linked to it?
          title: OutsideSpacePatio
          type: boolean
        OutsideSpaceRoofTerrace:
          description: Does the instruction have a roof terrace linked to it?
          title: OutsideSpaceRoofTerrace
          type: boolean
        OutsideSpaceSouthFacingGarden:
          description: Does the instruction have a south facing garden?
          title: OutsideSpaceSouthFacingGarden
          type: boolean
        ParkingAllocated:
          description: Is there any parking allocation linked to the instruction?
          title: ParkingAllocated
          type: boolean
        ParkingCarport:
          description: Does the instruction have a carport linked to it?
          title: ParkingCarport
          type: boolean
        ParkingDoubleGarage:
          description: Does the instruction have a double garage linked to it?
          title: ParkingDoubleGarage
          type: boolean
        ParkingGarage:
          description: Does the instruction have a garage linked to it?
          title: ParkingGarage
          type: boolean
        ParkingOffRoad:
          description: Is there off road parking linked to the instruction?
          title: ParkingOffRoad
          type: boolean
        ParkingOnRoad:
          description: Is there on road parking linked to the instruction?
          title: ParkingOnRoad
          type: boolean
        ParkingPermit:
          description: Is a parking permit required?
          title: ParkingPermit
          type: boolean
        ParkingSecureGated:
          description: Is there any secured gate parking linked to the instruction?
          title: ParkingSecureGated
          type: boolean
        ParkingTripleGarage:
          description: Does the instruction have a triple garage linked to it?
          title: ParkingTripleGarage
          type: boolean
        Postcode:
          description: Postcode of the property to be sold
          title: Postcode
          type: string
        Price:
          description: The price of the property to be sold
          format: double
          title: Price
          type: number
        PropertyOwnableType:
          description: The property type
          enum:
          - House
          - FlatApartment
          - Bungalow
          - Land
          - HouseFlatShare
          - GarageParking
          - CommercialProperty
          - Block
          - TerracedHouse
          - EndTerraceHouse
          - SemiDetachedHouse
          - DetachedHouse
          - SemiDetachedBungalow
          - TownHouse
          - Cottage
          - ServicedApartment
          - Studio
          - Apartment
          - Barn
          - FarmHouse
          - Penthouse
          - BuildingPlot
          - DetachedBungalow
          - LinkDetached
          - MidTerracedBungalow
          - LandResidential
          title: PropertyOwnableType
          type: string
        ReceptionRooms:
          description: Number of reception rooms linked to the instruction
          format: int32
          title: ReceptionRooms
          type: integer
        State:
          description: The current instruction state
          enum:
          - MarketAppraisal
          - LostAppraisal
          - Instructed
          - Advertised
          - UnderOffer
          - ContractsExchanged
          - Completed
          - FallenThrough
          - Withdrawn
          title: State
          type: string
        Tenure:
          description: Instruction tenure
          enum:
          - Freehold
          - Leasehold
          - Commonhold
          - ShareOfFreehold
          - FlyingFreehold
          - ShareTransfer
          - Unknown
          title: Tenure
          type: string
        VideoURL:
          description: The URL of the video linked to the Sales Instruction
          title: VideoURL
          type: string
      title: SalesInstructionModel
      type: object
    SalesInstructionModelResults:
      description: Holds results from a paged query returning SalesInstructionModel
        values
      example:
        Data:
        - OutsideSpacePatio: true
          ParkingTripleGarage: true
          Kitchens: 3
          ParkingOnRoad: true
          ParkingCarport: true
          EPCPotentialEER: 7
          DevelopmentOpp: true
          EPCPotentialEI: 9
          EPCCurrentEER: 5
          OutsideSpaceSouthFacingGarden: true
          OID: OID
          ParkingGarage: true
          Postcode: Postcode
          Area: Area
          OutsideSpaceLargeGarden: true
          Bedrooms: 5
          ETag: ETag
          Price: 2.027123023002322
          State: MarketAppraisal
          AddressNumber: AddressNumber
          ContractType: Pending
          Country: Afghanistan
          InvestmentOpp: true
          OutsideSpaceCommunalGarden: true
          HasElectricitySupply: true
          Description: Description
          BathroomsEnsuite: 1
          Directions: Directions
          OutsideSpaceConservatory: true
          HasWaterMeter: true
          Tenure: Freehold
          ParkingOffRoad: true
          HasGasSupply: true
          Address4: Address4
          ParkingSecureGated: true
          ParkingDoubleGarage: true
          ParkingPermit: true
          OutsideSpaceBalcony: true
          ReceptionRooms: 4
          Address2: Address2
          Address3: Address3
          Address1: Address1
          PropertyOwnableType: House
          VideoURL: VideoURL
          EPCCurrentEI: 2
          OutsideSpaceGarden: true
          ParkingAllocated: true
          Bathrooms: 6
          OutsideSpaceRoofTerrace: true
        - OutsideSpacePatio: true
          ParkingTripleGarage: true
          Kitchens: 3
          ParkingOnRoad: true
          ParkingCarport: true
          EPCPotentialEER: 7
          DevelopmentOpp: true
          EPCPotentialEI: 9
          EPCCurrentEER: 5
          OutsideSpaceSouthFacingGarden: true
          OID: OID
          ParkingGarage: true
          Postcode: Postcode
          Area: Area
          OutsideSpaceLargeGarden: true
          Bedrooms: 5
          ETag: ETag
          Price: 2.027123023002322
          State: MarketAppraisal
          AddressNumber: AddressNumber
          ContractType: Pending
          Country: Afghanistan
          InvestmentOpp: true
          OutsideSpaceCommunalGarden: true
          HasElectricitySupply: true
          Description: Description
          BathroomsEnsuite: 1
          Directions: Directions
          OutsideSpaceConservatory: true
          HasWaterMeter: true
          Tenure: Freehold
          ParkingOffRoad: true
          HasGasSupply: true
          Address4: Address4
          ParkingSecureGated: true
          ParkingDoubleGarage: true
          ParkingPermit: true
          OutsideSpaceBalcony: true
          ReceptionRooms: 4
          Address2: Address2
          Address3: Address3
          Address1: Address1
          PropertyOwnableType: House
          VideoURL: VideoURL
          EPCCurrentEI: 2
          OutsideSpaceGarden: true
          ParkingAllocated: true
          Bathrooms: 6
          OutsideSpaceRoofTerrace: true
        Count: 0
      properties:
        Count:
          description: The total number of results available for all pages
          format: int32
          title: Count
          type: integer
        Data:
          description: The resulting data returned from the paged query range
          items:
            $ref: '#/components/schemas/SalesInstructionModel'
          title: Data
          type: array
      title: SalesInstructionModelResults
      type: object
    TenancyModel:
      description: "Represents a single tenancy on a property structure. This class\
        \ may\r\n            be considered to be the context of the tenancy strategy\
        \ pattern. The\r\n            strategy is the tenancy service, that dictates\
        \ the algorithm applied\r\n            to the tenancy. This class therefore\
        \ holds the raw data of a tenancy,\r\n            and ignores any tenancy\
        \ service (fully managed, let only) parameters."
      example:
        TermMaximum: 7
        UtilityGas: Tenant
        BondRequired: 6.027456183070403
        Furnished: Unfurnished
        UtilityWater: Tenant
        IsStudentProperty: true
        MaximumTenants: 1
        Branch: Branch
        TenantSystemTypes:
        - Employed
        - Employed
        MinimumTenants: 5
        RentAdvertised: 5.637376656633329
        TenancyProperty: TenancyProperty
        IsTenancyProposed: true
        RentSchedule: Once
        GlobalReference: GlobalReference
        UtilityElectricity: Tenant
        OID: OID
        TermMinimum: 9
        RentRecurrence: 2
        TermStart: 2000-01-23T04:56:07.000+00:00
        Area: Area
        ETag: ETag
        UtilityTelephone: Tenant
        IsShareProperty: true
        AdvertiseFrom: 2000-01-23T04:56:07.000+00:00
        IsTenancyAdvertised: true
        UtilityCouncilTax: Tenant
      properties:
        AdvertiseFrom:
          description: The date to advertise this tenancy from.
          format: date-time
          title: AdvertiseFrom
          type: string
        Area:
          description: The area containing the instruction.
          title: Area
          type: string
        BondRequired:
          description: The total bond required.
          format: double
          title: BondRequired
          type: number
        Branch:
          description: The branch the tenancy is assigned to..
          title: Branch
          type: string
        ETag:
          description: A unique identifier defining the object and change revision.
          title: ETag
          type: string
        Furnished:
          description: The property furnished type.
          enum:
          - Unfurnished
          - PartFurnished
          - Furnished
          title: Furnished
          type: string
        GlobalReference:
          description: The global reference for a tenancy.
          title: GlobalReference
          type: string
        IsShareProperty:
          description: Is this property a shared property.
          title: IsShareProperty
          type: boolean
        IsStudentProperty:
          description: Is this property a student property.
          title: IsStudentProperty
          type: boolean
        IsTenancyAdvertised:
          description: "Gets a value indicating whether this tenancy is being advertised.\
            \ Note\r\n            that this will only return true while the tenancy\
            \ has a valid advertise\r\n            date. It will not return true in\
            \ the proposed phase."
          title: IsTenancyAdvertised
          type: boolean
        IsTenancyProposed:
          description: Is the tenancy a proposed tenancy?
          title: IsTenancyProposed
          type: boolean
        MaximumTenants:
          description: The maximum number of tenants to advertise for.
          format: int32
          title: MaximumTenants
          type: integer
        MinimumTenants:
          description: The minimum number of tenants to advertise for.
          format: int32
          title: MinimumTenants
          type: integer
        OID:
          description: The unique Object ID (OID).
          title: OID
          type: string
        RentAdvertised:
          description: The advertised amount of rent for the property.
          format: double
          title: RentAdvertised
          type: number
        RentRecurrence:
          description: The rent schedule recurrence
          format: int32
          title: RentRecurrence
          type: integer
        RentSchedule:
          description: The tenancy rent schedule
          enum:
          - Once
          - Daily
          - Weekly
          - Monthly
          - Yearly
          title: RentSchedule
          type: string
        TenancyProperty:
          description: The property linked to this tenancy.
          title: TenancyProperty
          type: string
        TenantSystemTypes:
          description: "The specific tenant type list, or empty if for all types."
          items:
            enum:
            - Employed
            - SelfEmployed
            - Unemployed
            - Student
            - OwnMeans
            - Retired
            - Company
            - Council
            type: string
          title: TenantSystemTypes
          type: array
        TermMaximum:
          description: The instruction maximum term.
          format: int32
          title: TermMaximum
          type: integer
        TermMinimum:
          description: The minimum term.
          format: int32
          title: TermMinimum
          type: integer
        TermStart:
          description: The instruction start date.
          format: date-time
          title: TermStart
          type: string
        UtilityCouncilTax:
          description: Who's responsible for council tax bills.
          enum:
          - Tenant
          - Landlord
          title: UtilityCouncilTax
          type: string
        UtilityElectricity:
          description: Who's responsible for electricity bills.
          enum:
          - Tenant
          - Landlord
          title: UtilityElectricity
          type: string
        UtilityGas:
          description: Who's responsible for Gas bills.
          enum:
          - Tenant
          - Landlord
          title: UtilityGas
          type: string
        UtilityTelephone:
          description: Who's responsible for telephone bills.
          enum:
          - Tenant
          - Landlord
          title: UtilityTelephone
          type: string
        UtilityWater:
          description: Who's responsible for water bills.
          enum:
          - Tenant
          - Landlord
          title: UtilityWater
          type: string
      title: TenancyModel
      type: object
    TenancyModelResults:
      description: Holds results from a paged query returning TenancyModel values
      example:
        Data:
        - TermMaximum: 7
          UtilityGas: Tenant
          BondRequired: 6.027456183070403
          Furnished: Unfurnished
          UtilityWater: Tenant
          IsStudentProperty: true
          MaximumTenants: 1
          Branch: Branch
          TenantSystemTypes:
          - Employed
          - Employed
          MinimumTenants: 5
          RentAdvertised: 5.637376656633329
          TenancyProperty: TenancyProperty
          IsTenancyProposed: true
          RentSchedule: Once
          GlobalReference: GlobalReference
          UtilityElectricity: Tenant
          OID: OID
          TermMinimum: 9
          RentRecurrence: 2
          TermStart: 2000-01-23T04:56:07.000+00:00
          Area: Area
          ETag: ETag
          UtilityTelephone: Tenant
          IsShareProperty: true
          AdvertiseFrom: 2000-01-23T04:56:07.000+00:00
          IsTenancyAdvertised: true
          UtilityCouncilTax: Tenant
        - TermMaximum: 7
          UtilityGas: Tenant
          BondRequired: 6.027456183070403
          Furnished: Unfurnished
          UtilityWater: Tenant
          IsStudentProperty: true
          MaximumTenants: 1
          Branch: Branch
          TenantSystemTypes:
          - Employed
          - Employed
          MinimumTenants: 5
          RentAdvertised: 5.637376656633329
          TenancyProperty: TenancyProperty
          IsTenancyProposed: true
          RentSchedule: Once
          GlobalReference: GlobalReference
          UtilityElectricity: Tenant
          OID: OID
          TermMinimum: 9
          RentRecurrence: 2
          TermStart: 2000-01-23T04:56:07.000+00:00
          Area: Area
          ETag: ETag
          UtilityTelephone: Tenant
          IsShareProperty: true
          AdvertiseFrom: 2000-01-23T04:56:07.000+00:00
          IsTenancyAdvertised: true
          UtilityCouncilTax: Tenant
        Count: 0
      properties:
        Count:
          description: The total number of results available for all pages
          format: int32
          title: Count
          type: integer
        Data:
          description: The resulting data returned from the paged query range
          items:
            $ref: '#/components/schemas/TenancyModel'
          title: Data
          type: array
      title: TenancyModelResults
      type: object
    ViewingBookingModel:
      description: Represents a viewing booking slot
      example:
        StaffID: StaffID
        Start: 2000-01-23T04:56:07.000+00:00
        End: 2000-01-23T04:56:07.000+00:00
        StaffName: StaffName
      properties:
        End:
          description: The end time of the booking
          format: date-time
          title: End
          type: string
        StaffID:
          description: The unique ID of the staff member this booking is with
          title: StaffID
          type: string
        StaffName:
          description: The name of the staff member this booking is with
          title: StaffName
          type: string
        Start:
          description: The start time of the booking
          format: date-time
          title: Start
          type: string
      required:
      - End
      - StaffID
      - StaffName
      - Start
      title: ViewingBookingModel
      type: object
  securitySchemes:
    apiKey:
      description: ApiKey Authentication
      in: header
      name: ApiKey
      type: apiKey
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_apiKey
    basic:
      description: Basic HTTP Authentication
      scheme: basic
      type: http
      x-basicInfoFunc: openapi_server.controllers.security_controller.info_from_basic
x-original-swagger-version: "2.0"
