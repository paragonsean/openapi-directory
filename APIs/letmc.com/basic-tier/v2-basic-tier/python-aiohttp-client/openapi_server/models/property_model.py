# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PropertyModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area: str=None, branch: str=None, description: str=None, e_tag: str=None, full_address: str=None, global_reference: str=None, main_photo: str=None, managed_by_staff: str=None, oid: str=None, property_source: str=None, property_type: str=None, room_name: str=None, video_url: str=None):
        """PropertyModel - a model defined in OpenAPI

        :param area: The area of this PropertyModel.
        :param branch: The branch of this PropertyModel.
        :param description: The description of this PropertyModel.
        :param e_tag: The e_tag of this PropertyModel.
        :param full_address: The full_address of this PropertyModel.
        :param global_reference: The global_reference of this PropertyModel.
        :param main_photo: The main_photo of this PropertyModel.
        :param managed_by_staff: The managed_by_staff of this PropertyModel.
        :param oid: The oid of this PropertyModel.
        :param property_source: The property_source of this PropertyModel.
        :param property_type: The property_type of this PropertyModel.
        :param room_name: The room_name of this PropertyModel.
        :param video_url: The video_url of this PropertyModel.
        """
        self.openapi_types = {
            'area': str,
            'branch': str,
            'description': str,
            'e_tag': str,
            'full_address': str,
            'global_reference': str,
            'main_photo': str,
            'managed_by_staff': str,
            'oid': str,
            'property_source': str,
            'property_type': str,
            'room_name': str,
            'video_url': str
        }

        self.attribute_map = {
            'area': 'Area',
            'branch': 'Branch',
            'description': 'Description',
            'e_tag': 'ETag',
            'full_address': 'FullAddress',
            'global_reference': 'GlobalReference',
            'main_photo': 'MainPhoto',
            'managed_by_staff': 'ManagedByStaff',
            'oid': 'OID',
            'property_source': 'PropertySource',
            'property_type': 'PropertyType',
            'room_name': 'RoomName',
            'video_url': 'VideoURL'
        }

        self._area = area
        self._branch = branch
        self._description = description
        self._e_tag = e_tag
        self._full_address = full_address
        self._global_reference = global_reference
        self._main_photo = main_photo
        self._managed_by_staff = managed_by_staff
        self._oid = oid
        self._property_source = property_source
        self._property_type = property_type
        self._room_name = room_name
        self._video_url = video_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PropertyModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PropertyModel of this PropertyModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area(self):
        """Gets the area of this PropertyModel.

        The area the property is located in.

        :return: The area of this PropertyModel.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this PropertyModel.

        The area the property is located in.

        :param area: The area of this PropertyModel.
        :type area: str
        """

        self._area = area

    @property
    def branch(self):
        """Gets the branch of this PropertyModel.

        The branch the block, property or room is assigned to

        :return: The branch of this PropertyModel.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this PropertyModel.

        The branch the block, property or room is assigned to

        :param branch: The branch of this PropertyModel.
        :type branch: str
        """

        self._branch = branch

    @property
    def description(self):
        """Gets the description of this PropertyModel.

        The block, property or room description.

        :return: The description of this PropertyModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PropertyModel.

        The block, property or room description.

        :param description: The description of this PropertyModel.
        :type description: str
        """

        self._description = description

    @property
    def e_tag(self):
        """Gets the e_tag of this PropertyModel.

        A unique identifier defining the object and change revision.

        :return: The e_tag of this PropertyModel.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this PropertyModel.

        A unique identifier defining the object and change revision.

        :param e_tag: The e_tag of this PropertyModel.
        :type e_tag: str
        """

        self._e_tag = e_tag

    @property
    def full_address(self):
        """Gets the full_address of this PropertyModel.

        The full address of a block, property or room, formatted with line breaks such that it may be used on a letter directly.

        :return: The full_address of this PropertyModel.
        :rtype: str
        """
        return self._full_address

    @full_address.setter
    def full_address(self, full_address):
        """Sets the full_address of this PropertyModel.

        The full address of a block, property or room, formatted with line breaks such that it may be used on a letter directly.

        :param full_address: The full_address of this PropertyModel.
        :type full_address: str
        """

        self._full_address = full_address

    @property
    def global_reference(self):
        """Gets the global_reference of this PropertyModel.

        The global reference to this block, property or room

        :return: The global_reference of this PropertyModel.
        :rtype: str
        """
        return self._global_reference

    @global_reference.setter
    def global_reference(self, global_reference):
        """Sets the global_reference of this PropertyModel.

        The global reference to this block, property or room

        :param global_reference: The global_reference of this PropertyModel.
        :type global_reference: str
        """

        self._global_reference = global_reference

    @property
    def main_photo(self):
        """Gets the main_photo of this PropertyModel.

        Gets the main photo, if there is one.

        :return: The main_photo of this PropertyModel.
        :rtype: str
        """
        return self._main_photo

    @main_photo.setter
    def main_photo(self, main_photo):
        """Sets the main_photo of this PropertyModel.

        Gets the main photo, if there is one.

        :param main_photo: The main_photo of this PropertyModel.
        :type main_photo: str
        """

        self._main_photo = main_photo

    @property
    def managed_by_staff(self):
        """Gets the managed_by_staff of this PropertyModel.

        The staff memeber that manages the block, property or room

        :return: The managed_by_staff of this PropertyModel.
        :rtype: str
        """
        return self._managed_by_staff

    @managed_by_staff.setter
    def managed_by_staff(self, managed_by_staff):
        """Sets the managed_by_staff of this PropertyModel.

        The staff memeber that manages the block, property or room

        :param managed_by_staff: The managed_by_staff of this PropertyModel.
        :type managed_by_staff: str
        """

        self._managed_by_staff = managed_by_staff

    @property
    def oid(self):
        """Gets the oid of this PropertyModel.

        The unique Object ID (OID).

        :return: The oid of this PropertyModel.
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this PropertyModel.

        The unique Object ID (OID).

        :param oid: The oid of this PropertyModel.
        :type oid: str
        """

        self._oid = oid

    @property
    def property_source(self):
        """Gets the property_source of this PropertyModel.

        The block, property or room source type

        :return: The property_source of this PropertyModel.
        :rtype: str
        """
        return self._property_source

    @property_source.setter
    def property_source(self, property_source):
        """Sets the property_source of this PropertyModel.

        The block, property or room source type

        :param property_source: The property_source of this PropertyModel.
        :type property_source: str
        """

        self._property_source = property_source

    @property
    def property_type(self):
        """Gets the property_type of this PropertyModel.

        The block or property type.

        :return: The property_type of this PropertyModel.
        :rtype: str
        """
        return self._property_type

    @property_type.setter
    def property_type(self, property_type):
        """Sets the property_type of this PropertyModel.

        The block or property type.

        :param property_type: The property_type of this PropertyModel.
        :type property_type: str
        """
        allowed_values = ["House", "FlatApartment", "Bungalow", "Land", "HouseFlatShare", "GarageParking", "CommercialProperty", "Block", "TerracedHouse", "EndTerraceHouse", "SemiDetachedHouse", "DetachedHouse", "SemiDetachedBungalow", "TownHouse", "Cottage", "ServicedApartment", "Studio", "Apartment", "Barn", "FarmHouse", "Penthouse", "BuildingPlot", "DetachedBungalow", "LinkDetached", "MidTerracedBungalow", "LandResidential"]  # noqa: E501
        if property_type not in allowed_values:
            raise ValueError(
                "Invalid value for `property_type` ({0}), must be one of {1}"
                .format(property_type, allowed_values)
            )

        self._property_type = property_type

    @property
    def room_name(self):
        """Gets the room_name of this PropertyModel.

        The room name (if applicable).

        :return: The room_name of this PropertyModel.
        :rtype: str
        """
        return self._room_name

    @room_name.setter
    def room_name(self, room_name):
        """Sets the room_name of this PropertyModel.

        The room name (if applicable).

        :param room_name: The room_name of this PropertyModel.
        :type room_name: str
        """

        self._room_name = room_name

    @property
    def video_url(self):
        """Gets the video_url of this PropertyModel.

        URL of the video linked to the property

        :return: The video_url of this PropertyModel.
        :rtype: str
        """
        return self._video_url

    @video_url.setter
    def video_url(self, video_url):
        """Sets the video_url of this PropertyModel.

        URL of the video linked to the property

        :param video_url: The video_url of this PropertyModel.
        :type video_url: str
        """

        self._video_url = video_url
