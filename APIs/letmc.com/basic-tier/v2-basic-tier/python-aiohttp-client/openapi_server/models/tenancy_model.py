# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TenancyModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertise_from: datetime=None, area: str=None, bond_required: float=None, branch: str=None, e_tag: str=None, furnished: str=None, global_reference: str=None, is_share_property: bool=None, is_student_property: bool=None, is_tenancy_advertised: bool=None, is_tenancy_proposed: bool=None, maximum_tenants: int=None, minimum_tenants: int=None, oid: str=None, rent_advertised: float=None, rent_recurrence: int=None, rent_schedule: str=None, tenancy_property: str=None, tenant_system_types: List[str]=None, term_maximum: int=None, term_minimum: int=None, term_start: datetime=None, utility_council_tax: str=None, utility_electricity: str=None, utility_gas: str=None, utility_telephone: str=None, utility_water: str=None):
        """TenancyModel - a model defined in OpenAPI

        :param advertise_from: The advertise_from of this TenancyModel.
        :param area: The area of this TenancyModel.
        :param bond_required: The bond_required of this TenancyModel.
        :param branch: The branch of this TenancyModel.
        :param e_tag: The e_tag of this TenancyModel.
        :param furnished: The furnished of this TenancyModel.
        :param global_reference: The global_reference of this TenancyModel.
        :param is_share_property: The is_share_property of this TenancyModel.
        :param is_student_property: The is_student_property of this TenancyModel.
        :param is_tenancy_advertised: The is_tenancy_advertised of this TenancyModel.
        :param is_tenancy_proposed: The is_tenancy_proposed of this TenancyModel.
        :param maximum_tenants: The maximum_tenants of this TenancyModel.
        :param minimum_tenants: The minimum_tenants of this TenancyModel.
        :param oid: The oid of this TenancyModel.
        :param rent_advertised: The rent_advertised of this TenancyModel.
        :param rent_recurrence: The rent_recurrence of this TenancyModel.
        :param rent_schedule: The rent_schedule of this TenancyModel.
        :param tenancy_property: The tenancy_property of this TenancyModel.
        :param tenant_system_types: The tenant_system_types of this TenancyModel.
        :param term_maximum: The term_maximum of this TenancyModel.
        :param term_minimum: The term_minimum of this TenancyModel.
        :param term_start: The term_start of this TenancyModel.
        :param utility_council_tax: The utility_council_tax of this TenancyModel.
        :param utility_electricity: The utility_electricity of this TenancyModel.
        :param utility_gas: The utility_gas of this TenancyModel.
        :param utility_telephone: The utility_telephone of this TenancyModel.
        :param utility_water: The utility_water of this TenancyModel.
        """
        self.openapi_types = {
            'advertise_from': datetime,
            'area': str,
            'bond_required': float,
            'branch': str,
            'e_tag': str,
            'furnished': str,
            'global_reference': str,
            'is_share_property': bool,
            'is_student_property': bool,
            'is_tenancy_advertised': bool,
            'is_tenancy_proposed': bool,
            'maximum_tenants': int,
            'minimum_tenants': int,
            'oid': str,
            'rent_advertised': float,
            'rent_recurrence': int,
            'rent_schedule': str,
            'tenancy_property': str,
            'tenant_system_types': List[str],
            'term_maximum': int,
            'term_minimum': int,
            'term_start': datetime,
            'utility_council_tax': str,
            'utility_electricity': str,
            'utility_gas': str,
            'utility_telephone': str,
            'utility_water': str
        }

        self.attribute_map = {
            'advertise_from': 'AdvertiseFrom',
            'area': 'Area',
            'bond_required': 'BondRequired',
            'branch': 'Branch',
            'e_tag': 'ETag',
            'furnished': 'Furnished',
            'global_reference': 'GlobalReference',
            'is_share_property': 'IsShareProperty',
            'is_student_property': 'IsStudentProperty',
            'is_tenancy_advertised': 'IsTenancyAdvertised',
            'is_tenancy_proposed': 'IsTenancyProposed',
            'maximum_tenants': 'MaximumTenants',
            'minimum_tenants': 'MinimumTenants',
            'oid': 'OID',
            'rent_advertised': 'RentAdvertised',
            'rent_recurrence': 'RentRecurrence',
            'rent_schedule': 'RentSchedule',
            'tenancy_property': 'TenancyProperty',
            'tenant_system_types': 'TenantSystemTypes',
            'term_maximum': 'TermMaximum',
            'term_minimum': 'TermMinimum',
            'term_start': 'TermStart',
            'utility_council_tax': 'UtilityCouncilTax',
            'utility_electricity': 'UtilityElectricity',
            'utility_gas': 'UtilityGas',
            'utility_telephone': 'UtilityTelephone',
            'utility_water': 'UtilityWater'
        }

        self._advertise_from = advertise_from
        self._area = area
        self._bond_required = bond_required
        self._branch = branch
        self._e_tag = e_tag
        self._furnished = furnished
        self._global_reference = global_reference
        self._is_share_property = is_share_property
        self._is_student_property = is_student_property
        self._is_tenancy_advertised = is_tenancy_advertised
        self._is_tenancy_proposed = is_tenancy_proposed
        self._maximum_tenants = maximum_tenants
        self._minimum_tenants = minimum_tenants
        self._oid = oid
        self._rent_advertised = rent_advertised
        self._rent_recurrence = rent_recurrence
        self._rent_schedule = rent_schedule
        self._tenancy_property = tenancy_property
        self._tenant_system_types = tenant_system_types
        self._term_maximum = term_maximum
        self._term_minimum = term_minimum
        self._term_start = term_start
        self._utility_council_tax = utility_council_tax
        self._utility_electricity = utility_electricity
        self._utility_gas = utility_gas
        self._utility_telephone = utility_telephone
        self._utility_water = utility_water

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TenancyModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TenancyModel of this TenancyModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertise_from(self):
        """Gets the advertise_from of this TenancyModel.

        The date to advertise this tenancy from.

        :return: The advertise_from of this TenancyModel.
        :rtype: datetime
        """
        return self._advertise_from

    @advertise_from.setter
    def advertise_from(self, advertise_from):
        """Sets the advertise_from of this TenancyModel.

        The date to advertise this tenancy from.

        :param advertise_from: The advertise_from of this TenancyModel.
        :type advertise_from: datetime
        """

        self._advertise_from = advertise_from

    @property
    def area(self):
        """Gets the area of this TenancyModel.

        The area containing the instruction.

        :return: The area of this TenancyModel.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this TenancyModel.

        The area containing the instruction.

        :param area: The area of this TenancyModel.
        :type area: str
        """

        self._area = area

    @property
    def bond_required(self):
        """Gets the bond_required of this TenancyModel.

        The total bond required.

        :return: The bond_required of this TenancyModel.
        :rtype: float
        """
        return self._bond_required

    @bond_required.setter
    def bond_required(self, bond_required):
        """Sets the bond_required of this TenancyModel.

        The total bond required.

        :param bond_required: The bond_required of this TenancyModel.
        :type bond_required: float
        """

        self._bond_required = bond_required

    @property
    def branch(self):
        """Gets the branch of this TenancyModel.

        The branch the tenancy is assigned to..

        :return: The branch of this TenancyModel.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this TenancyModel.

        The branch the tenancy is assigned to..

        :param branch: The branch of this TenancyModel.
        :type branch: str
        """

        self._branch = branch

    @property
    def e_tag(self):
        """Gets the e_tag of this TenancyModel.

        A unique identifier defining the object and change revision.

        :return: The e_tag of this TenancyModel.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this TenancyModel.

        A unique identifier defining the object and change revision.

        :param e_tag: The e_tag of this TenancyModel.
        :type e_tag: str
        """

        self._e_tag = e_tag

    @property
    def furnished(self):
        """Gets the furnished of this TenancyModel.

        The property furnished type.

        :return: The furnished of this TenancyModel.
        :rtype: str
        """
        return self._furnished

    @furnished.setter
    def furnished(self, furnished):
        """Sets the furnished of this TenancyModel.

        The property furnished type.

        :param furnished: The furnished of this TenancyModel.
        :type furnished: str
        """
        allowed_values = ["Unfurnished", "PartFurnished", "Furnished"]  # noqa: E501
        if furnished not in allowed_values:
            raise ValueError(
                "Invalid value for `furnished` ({0}), must be one of {1}"
                .format(furnished, allowed_values)
            )

        self._furnished = furnished

    @property
    def global_reference(self):
        """Gets the global_reference of this TenancyModel.

        The global reference for a tenancy.

        :return: The global_reference of this TenancyModel.
        :rtype: str
        """
        return self._global_reference

    @global_reference.setter
    def global_reference(self, global_reference):
        """Sets the global_reference of this TenancyModel.

        The global reference for a tenancy.

        :param global_reference: The global_reference of this TenancyModel.
        :type global_reference: str
        """

        self._global_reference = global_reference

    @property
    def is_share_property(self):
        """Gets the is_share_property of this TenancyModel.

        Is this property a shared property.

        :return: The is_share_property of this TenancyModel.
        :rtype: bool
        """
        return self._is_share_property

    @is_share_property.setter
    def is_share_property(self, is_share_property):
        """Sets the is_share_property of this TenancyModel.

        Is this property a shared property.

        :param is_share_property: The is_share_property of this TenancyModel.
        :type is_share_property: bool
        """

        self._is_share_property = is_share_property

    @property
    def is_student_property(self):
        """Gets the is_student_property of this TenancyModel.

        Is this property a student property.

        :return: The is_student_property of this TenancyModel.
        :rtype: bool
        """
        return self._is_student_property

    @is_student_property.setter
    def is_student_property(self, is_student_property):
        """Sets the is_student_property of this TenancyModel.

        Is this property a student property.

        :param is_student_property: The is_student_property of this TenancyModel.
        :type is_student_property: bool
        """

        self._is_student_property = is_student_property

    @property
    def is_tenancy_advertised(self):
        """Gets the is_tenancy_advertised of this TenancyModel.

        Gets a value indicating whether this tenancy is being advertised. Note              that this will only return true while the tenancy has a valid advertise              date. It will not return true in the proposed phase.

        :return: The is_tenancy_advertised of this TenancyModel.
        :rtype: bool
        """
        return self._is_tenancy_advertised

    @is_tenancy_advertised.setter
    def is_tenancy_advertised(self, is_tenancy_advertised):
        """Sets the is_tenancy_advertised of this TenancyModel.

        Gets a value indicating whether this tenancy is being advertised. Note              that this will only return true while the tenancy has a valid advertise              date. It will not return true in the proposed phase.

        :param is_tenancy_advertised: The is_tenancy_advertised of this TenancyModel.
        :type is_tenancy_advertised: bool
        """

        self._is_tenancy_advertised = is_tenancy_advertised

    @property
    def is_tenancy_proposed(self):
        """Gets the is_tenancy_proposed of this TenancyModel.

        Is the tenancy a proposed tenancy?

        :return: The is_tenancy_proposed of this TenancyModel.
        :rtype: bool
        """
        return self._is_tenancy_proposed

    @is_tenancy_proposed.setter
    def is_tenancy_proposed(self, is_tenancy_proposed):
        """Sets the is_tenancy_proposed of this TenancyModel.

        Is the tenancy a proposed tenancy?

        :param is_tenancy_proposed: The is_tenancy_proposed of this TenancyModel.
        :type is_tenancy_proposed: bool
        """

        self._is_tenancy_proposed = is_tenancy_proposed

    @property
    def maximum_tenants(self):
        """Gets the maximum_tenants of this TenancyModel.

        The maximum number of tenants to advertise for.

        :return: The maximum_tenants of this TenancyModel.
        :rtype: int
        """
        return self._maximum_tenants

    @maximum_tenants.setter
    def maximum_tenants(self, maximum_tenants):
        """Sets the maximum_tenants of this TenancyModel.

        The maximum number of tenants to advertise for.

        :param maximum_tenants: The maximum_tenants of this TenancyModel.
        :type maximum_tenants: int
        """

        self._maximum_tenants = maximum_tenants

    @property
    def minimum_tenants(self):
        """Gets the minimum_tenants of this TenancyModel.

        The minimum number of tenants to advertise for.

        :return: The minimum_tenants of this TenancyModel.
        :rtype: int
        """
        return self._minimum_tenants

    @minimum_tenants.setter
    def minimum_tenants(self, minimum_tenants):
        """Sets the minimum_tenants of this TenancyModel.

        The minimum number of tenants to advertise for.

        :param minimum_tenants: The minimum_tenants of this TenancyModel.
        :type minimum_tenants: int
        """

        self._minimum_tenants = minimum_tenants

    @property
    def oid(self):
        """Gets the oid of this TenancyModel.

        The unique Object ID (OID).

        :return: The oid of this TenancyModel.
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this TenancyModel.

        The unique Object ID (OID).

        :param oid: The oid of this TenancyModel.
        :type oid: str
        """

        self._oid = oid

    @property
    def rent_advertised(self):
        """Gets the rent_advertised of this TenancyModel.

        The advertised amount of rent for the property.

        :return: The rent_advertised of this TenancyModel.
        :rtype: float
        """
        return self._rent_advertised

    @rent_advertised.setter
    def rent_advertised(self, rent_advertised):
        """Sets the rent_advertised of this TenancyModel.

        The advertised amount of rent for the property.

        :param rent_advertised: The rent_advertised of this TenancyModel.
        :type rent_advertised: float
        """

        self._rent_advertised = rent_advertised

    @property
    def rent_recurrence(self):
        """Gets the rent_recurrence of this TenancyModel.

        The rent schedule recurrence

        :return: The rent_recurrence of this TenancyModel.
        :rtype: int
        """
        return self._rent_recurrence

    @rent_recurrence.setter
    def rent_recurrence(self, rent_recurrence):
        """Sets the rent_recurrence of this TenancyModel.

        The rent schedule recurrence

        :param rent_recurrence: The rent_recurrence of this TenancyModel.
        :type rent_recurrence: int
        """

        self._rent_recurrence = rent_recurrence

    @property
    def rent_schedule(self):
        """Gets the rent_schedule of this TenancyModel.

        The tenancy rent schedule

        :return: The rent_schedule of this TenancyModel.
        :rtype: str
        """
        return self._rent_schedule

    @rent_schedule.setter
    def rent_schedule(self, rent_schedule):
        """Sets the rent_schedule of this TenancyModel.

        The tenancy rent schedule

        :param rent_schedule: The rent_schedule of this TenancyModel.
        :type rent_schedule: str
        """
        allowed_values = ["Once", "Daily", "Weekly", "Monthly", "Yearly"]  # noqa: E501
        if rent_schedule not in allowed_values:
            raise ValueError(
                "Invalid value for `rent_schedule` ({0}), must be one of {1}"
                .format(rent_schedule, allowed_values)
            )

        self._rent_schedule = rent_schedule

    @property
    def tenancy_property(self):
        """Gets the tenancy_property of this TenancyModel.

        The property linked to this tenancy.

        :return: The tenancy_property of this TenancyModel.
        :rtype: str
        """
        return self._tenancy_property

    @tenancy_property.setter
    def tenancy_property(self, tenancy_property):
        """Sets the tenancy_property of this TenancyModel.

        The property linked to this tenancy.

        :param tenancy_property: The tenancy_property of this TenancyModel.
        :type tenancy_property: str
        """

        self._tenancy_property = tenancy_property

    @property
    def tenant_system_types(self):
        """Gets the tenant_system_types of this TenancyModel.

        The specific tenant type list, or empty if for all types.

        :return: The tenant_system_types of this TenancyModel.
        :rtype: List[str]
        """
        return self._tenant_system_types

    @tenant_system_types.setter
    def tenant_system_types(self, tenant_system_types):
        """Sets the tenant_system_types of this TenancyModel.

        The specific tenant type list, or empty if for all types.

        :param tenant_system_types: The tenant_system_types of this TenancyModel.
        :type tenant_system_types: List[str]
        """
        allowed_values = ["Employed", "SelfEmployed", "Unemployed", "Student", "OwnMeans", "Retired", "Company", "Council"]  # noqa: E501
        if not set(tenant_system_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `tenant_system_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(tenant_system_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._tenant_system_types = tenant_system_types

    @property
    def term_maximum(self):
        """Gets the term_maximum of this TenancyModel.

        The instruction maximum term.

        :return: The term_maximum of this TenancyModel.
        :rtype: int
        """
        return self._term_maximum

    @term_maximum.setter
    def term_maximum(self, term_maximum):
        """Sets the term_maximum of this TenancyModel.

        The instruction maximum term.

        :param term_maximum: The term_maximum of this TenancyModel.
        :type term_maximum: int
        """

        self._term_maximum = term_maximum

    @property
    def term_minimum(self):
        """Gets the term_minimum of this TenancyModel.

        The minimum term.

        :return: The term_minimum of this TenancyModel.
        :rtype: int
        """
        return self._term_minimum

    @term_minimum.setter
    def term_minimum(self, term_minimum):
        """Sets the term_minimum of this TenancyModel.

        The minimum term.

        :param term_minimum: The term_minimum of this TenancyModel.
        :type term_minimum: int
        """

        self._term_minimum = term_minimum

    @property
    def term_start(self):
        """Gets the term_start of this TenancyModel.

        The instruction start date.

        :return: The term_start of this TenancyModel.
        :rtype: datetime
        """
        return self._term_start

    @term_start.setter
    def term_start(self, term_start):
        """Sets the term_start of this TenancyModel.

        The instruction start date.

        :param term_start: The term_start of this TenancyModel.
        :type term_start: datetime
        """

        self._term_start = term_start

    @property
    def utility_council_tax(self):
        """Gets the utility_council_tax of this TenancyModel.

        Who's responsible for council tax bills.

        :return: The utility_council_tax of this TenancyModel.
        :rtype: str
        """
        return self._utility_council_tax

    @utility_council_tax.setter
    def utility_council_tax(self, utility_council_tax):
        """Sets the utility_council_tax of this TenancyModel.

        Who's responsible for council tax bills.

        :param utility_council_tax: The utility_council_tax of this TenancyModel.
        :type utility_council_tax: str
        """
        allowed_values = ["Tenant", "Landlord"]  # noqa: E501
        if utility_council_tax not in allowed_values:
            raise ValueError(
                "Invalid value for `utility_council_tax` ({0}), must be one of {1}"
                .format(utility_council_tax, allowed_values)
            )

        self._utility_council_tax = utility_council_tax

    @property
    def utility_electricity(self):
        """Gets the utility_electricity of this TenancyModel.

        Who's responsible for electricity bills.

        :return: The utility_electricity of this TenancyModel.
        :rtype: str
        """
        return self._utility_electricity

    @utility_electricity.setter
    def utility_electricity(self, utility_electricity):
        """Sets the utility_electricity of this TenancyModel.

        Who's responsible for electricity bills.

        :param utility_electricity: The utility_electricity of this TenancyModel.
        :type utility_electricity: str
        """
        allowed_values = ["Tenant", "Landlord"]  # noqa: E501
        if utility_electricity not in allowed_values:
            raise ValueError(
                "Invalid value for `utility_electricity` ({0}), must be one of {1}"
                .format(utility_electricity, allowed_values)
            )

        self._utility_electricity = utility_electricity

    @property
    def utility_gas(self):
        """Gets the utility_gas of this TenancyModel.

        Who's responsible for Gas bills.

        :return: The utility_gas of this TenancyModel.
        :rtype: str
        """
        return self._utility_gas

    @utility_gas.setter
    def utility_gas(self, utility_gas):
        """Sets the utility_gas of this TenancyModel.

        Who's responsible for Gas bills.

        :param utility_gas: The utility_gas of this TenancyModel.
        :type utility_gas: str
        """
        allowed_values = ["Tenant", "Landlord"]  # noqa: E501
        if utility_gas not in allowed_values:
            raise ValueError(
                "Invalid value for `utility_gas` ({0}), must be one of {1}"
                .format(utility_gas, allowed_values)
            )

        self._utility_gas = utility_gas

    @property
    def utility_telephone(self):
        """Gets the utility_telephone of this TenancyModel.

        Who's responsible for telephone bills.

        :return: The utility_telephone of this TenancyModel.
        :rtype: str
        """
        return self._utility_telephone

    @utility_telephone.setter
    def utility_telephone(self, utility_telephone):
        """Sets the utility_telephone of this TenancyModel.

        Who's responsible for telephone bills.

        :param utility_telephone: The utility_telephone of this TenancyModel.
        :type utility_telephone: str
        """
        allowed_values = ["Tenant", "Landlord"]  # noqa: E501
        if utility_telephone not in allowed_values:
            raise ValueError(
                "Invalid value for `utility_telephone` ({0}), must be one of {1}"
                .format(utility_telephone, allowed_values)
            )

        self._utility_telephone = utility_telephone

    @property
    def utility_water(self):
        """Gets the utility_water of this TenancyModel.

        Who's responsible for water bills.

        :return: The utility_water of this TenancyModel.
        :rtype: str
        """
        return self._utility_water

    @utility_water.setter
    def utility_water(self, utility_water):
        """Sets the utility_water of this TenancyModel.

        Who's responsible for water bills.

        :param utility_water: The utility_water of this TenancyModel.
        :type utility_water: str
        """
        allowed_values = ["Tenant", "Landlord"]  # noqa: E501
        if utility_water not in allowed_values:
            raise ValueError(
                "Invalid value for `utility_water` ({0}), must be one of {1}"
                .format(utility_water, allowed_values)
            )

        self._utility_water = utility_water
