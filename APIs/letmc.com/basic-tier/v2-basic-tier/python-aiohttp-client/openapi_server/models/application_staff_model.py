# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationStaffModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_e_mail: str=None, contact_mobile: str=None, date_of_birth: datetime=None, e_tag: str=None, forename: str=None, global_reference: str=None, is_enabled: bool=None, managed_by: str=None, middlename: str=None, oid: str=None, surname: str=None, title: str=None):
        """ApplicationStaffModel - a model defined in OpenAPI

        :param contact_e_mail: The contact_e_mail of this ApplicationStaffModel.
        :param contact_mobile: The contact_mobile of this ApplicationStaffModel.
        :param date_of_birth: The date_of_birth of this ApplicationStaffModel.
        :param e_tag: The e_tag of this ApplicationStaffModel.
        :param forename: The forename of this ApplicationStaffModel.
        :param global_reference: The global_reference of this ApplicationStaffModel.
        :param is_enabled: The is_enabled of this ApplicationStaffModel.
        :param managed_by: The managed_by of this ApplicationStaffModel.
        :param middlename: The middlename of this ApplicationStaffModel.
        :param oid: The oid of this ApplicationStaffModel.
        :param surname: The surname of this ApplicationStaffModel.
        :param title: The title of this ApplicationStaffModel.
        """
        self.openapi_types = {
            'contact_e_mail': str,
            'contact_mobile': str,
            'date_of_birth': datetime,
            'e_tag': str,
            'forename': str,
            'global_reference': str,
            'is_enabled': bool,
            'managed_by': str,
            'middlename': str,
            'oid': str,
            'surname': str,
            'title': str
        }

        self.attribute_map = {
            'contact_e_mail': 'ContactEMail',
            'contact_mobile': 'ContactMobile',
            'date_of_birth': 'DateOfBirth',
            'e_tag': 'ETag',
            'forename': 'Forename',
            'global_reference': 'GlobalReference',
            'is_enabled': 'IsEnabled',
            'managed_by': 'ManagedBy',
            'middlename': 'Middlename',
            'oid': 'OID',
            'surname': 'Surname',
            'title': 'Title'
        }

        self._contact_e_mail = contact_e_mail
        self._contact_mobile = contact_mobile
        self._date_of_birth = date_of_birth
        self._e_tag = e_tag
        self._forename = forename
        self._global_reference = global_reference
        self._is_enabled = is_enabled
        self._managed_by = managed_by
        self._middlename = middlename
        self._oid = oid
        self._surname = surname
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationStaffModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationStaffModel of this ApplicationStaffModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_e_mail(self):
        """Gets the contact_e_mail of this ApplicationStaffModel.

        The user's email contact.

        :return: The contact_e_mail of this ApplicationStaffModel.
        :rtype: str
        """
        return self._contact_e_mail

    @contact_e_mail.setter
    def contact_e_mail(self, contact_e_mail):
        """Sets the contact_e_mail of this ApplicationStaffModel.

        The user's email contact.

        :param contact_e_mail: The contact_e_mail of this ApplicationStaffModel.
        :type contact_e_mail: str
        """

        self._contact_e_mail = contact_e_mail

    @property
    def contact_mobile(self):
        """Gets the contact_mobile of this ApplicationStaffModel.

        The user's mobile contact.

        :return: The contact_mobile of this ApplicationStaffModel.
        :rtype: str
        """
        return self._contact_mobile

    @contact_mobile.setter
    def contact_mobile(self, contact_mobile):
        """Sets the contact_mobile of this ApplicationStaffModel.

        The user's mobile contact.

        :param contact_mobile: The contact_mobile of this ApplicationStaffModel.
        :type contact_mobile: str
        """

        self._contact_mobile = contact_mobile

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this ApplicationStaffModel.

        The user's date of birth.

        :return: The date_of_birth of this ApplicationStaffModel.
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this ApplicationStaffModel.

        The user's date of birth.

        :param date_of_birth: The date_of_birth of this ApplicationStaffModel.
        :type date_of_birth: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def e_tag(self):
        """Gets the e_tag of this ApplicationStaffModel.

        A unique identifier defining the object and change revision.

        :return: The e_tag of this ApplicationStaffModel.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this ApplicationStaffModel.

        A unique identifier defining the object and change revision.

        :param e_tag: The e_tag of this ApplicationStaffModel.
        :type e_tag: str
        """

        self._e_tag = e_tag

    @property
    def forename(self):
        """Gets the forename of this ApplicationStaffModel.

        The user's forename.

        :return: The forename of this ApplicationStaffModel.
        :rtype: str
        """
        return self._forename

    @forename.setter
    def forename(self, forename):
        """Sets the forename of this ApplicationStaffModel.

        The user's forename.

        :param forename: The forename of this ApplicationStaffModel.
        :type forename: str
        """

        self._forename = forename

    @property
    def global_reference(self):
        """Gets the global_reference of this ApplicationStaffModel.

        The global reference to this user.

        :return: The global_reference of this ApplicationStaffModel.
        :rtype: str
        """
        return self._global_reference

    @global_reference.setter
    def global_reference(self, global_reference):
        """Sets the global_reference of this ApplicationStaffModel.

        The global reference to this user.

        :param global_reference: The global_reference of this ApplicationStaffModel.
        :type global_reference: str
        """

        self._global_reference = global_reference

    @property
    def is_enabled(self):
        """Gets the is_enabled of this ApplicationStaffModel.

        Is this staff member enabled?

        :return: The is_enabled of this ApplicationStaffModel.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this ApplicationStaffModel.

        Is this staff member enabled?

        :param is_enabled: The is_enabled of this ApplicationStaffModel.
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def managed_by(self):
        """Gets the managed_by of this ApplicationStaffModel.

        The branch linked to this user

        :return: The managed_by of this ApplicationStaffModel.
        :rtype: str
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this ApplicationStaffModel.

        The branch linked to this user

        :param managed_by: The managed_by of this ApplicationStaffModel.
        :type managed_by: str
        """

        self._managed_by = managed_by

    @property
    def middlename(self):
        """Gets the middlename of this ApplicationStaffModel.

        The user's middlename.

        :return: The middlename of this ApplicationStaffModel.
        :rtype: str
        """
        return self._middlename

    @middlename.setter
    def middlename(self, middlename):
        """Sets the middlename of this ApplicationStaffModel.

        The user's middlename.

        :param middlename: The middlename of this ApplicationStaffModel.
        :type middlename: str
        """

        self._middlename = middlename

    @property
    def oid(self):
        """Gets the oid of this ApplicationStaffModel.

        The unique Object ID (OID).

        :return: The oid of this ApplicationStaffModel.
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this ApplicationStaffModel.

        The unique Object ID (OID).

        :param oid: The oid of this ApplicationStaffModel.
        :type oid: str
        """

        self._oid = oid

    @property
    def surname(self):
        """Gets the surname of this ApplicationStaffModel.

        The user's surname.

        :return: The surname of this ApplicationStaffModel.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this ApplicationStaffModel.

        The user's surname.

        :param surname: The surname of this ApplicationStaffModel.
        :type surname: str
        """

        self._surname = surname

    @property
    def title(self):
        """Gets the title of this ApplicationStaffModel.

        The user's title.

        :return: The title of this ApplicationStaffModel.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ApplicationStaffModel.

        The user's title.

        :param title: The title of this ApplicationStaffModel.
        :type title: str
        """

        self._title = title
