# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PhotoModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, e_tag: str=None, file_name: str=None, inspection_item: str=None, interim_inspection: str=None, inventory_item: str=None, name: str=None, oid: str=None, photo_number: int=None, photo_type: str=None, _property: str=None, room: str=None):
        """PhotoModel - a model defined in OpenAPI

        :param e_tag: The e_tag of this PhotoModel.
        :param file_name: The file_name of this PhotoModel.
        :param inspection_item: The inspection_item of this PhotoModel.
        :param interim_inspection: The interim_inspection of this PhotoModel.
        :param inventory_item: The inventory_item of this PhotoModel.
        :param name: The name of this PhotoModel.
        :param oid: The oid of this PhotoModel.
        :param photo_number: The photo_number of this PhotoModel.
        :param photo_type: The photo_type of this PhotoModel.
        :param _property: The _property of this PhotoModel.
        :param room: The room of this PhotoModel.
        """
        self.openapi_types = {
            'e_tag': str,
            'file_name': str,
            'inspection_item': str,
            'interim_inspection': str,
            'inventory_item': str,
            'name': str,
            'oid': str,
            'photo_number': int,
            'photo_type': str,
            '_property': str,
            'room': str
        }

        self.attribute_map = {
            'e_tag': 'ETag',
            'file_name': 'FileName',
            'inspection_item': 'InspectionItem',
            'interim_inspection': 'InterimInspection',
            'inventory_item': 'InventoryItem',
            'name': 'Name',
            'oid': 'OID',
            'photo_number': 'PhotoNumber',
            'photo_type': 'PhotoType',
            '_property': 'Property',
            'room': 'Room'
        }

        self._e_tag = e_tag
        self._file_name = file_name
        self._inspection_item = inspection_item
        self._interim_inspection = interim_inspection
        self._inventory_item = inventory_item
        self._name = name
        self._oid = oid
        self._photo_number = photo_number
        self._photo_type = photo_type
        self.__property = _property
        self._room = room

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhotoModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PhotoModel of this PhotoModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def e_tag(self):
        """Gets the e_tag of this PhotoModel.

        A unique identifier defining the object and change revision.

        :return: The e_tag of this PhotoModel.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this PhotoModel.

        A unique identifier defining the object and change revision.

        :param e_tag: The e_tag of this PhotoModel.
        :type e_tag: str
        """

        self._e_tag = e_tag

    @property
    def file_name(self):
        """Gets the file_name of this PhotoModel.

        The file name.

        :return: The file_name of this PhotoModel.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this PhotoModel.

        The file name.

        :param file_name: The file_name of this PhotoModel.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def inspection_item(self):
        """Gets the inspection_item of this PhotoModel.

        The inspection item the photo is assigned to (if applicable).

        :return: The inspection_item of this PhotoModel.
        :rtype: str
        """
        return self._inspection_item

    @inspection_item.setter
    def inspection_item(self, inspection_item):
        """Sets the inspection_item of this PhotoModel.

        The inspection item the photo is assigned to (if applicable).

        :param inspection_item: The inspection_item of this PhotoModel.
        :type inspection_item: str
        """

        self._inspection_item = inspection_item

    @property
    def interim_inspection(self):
        """Gets the interim_inspection of this PhotoModel.

        The inspection the photo is assigned to (if applicable).

        :return: The interim_inspection of this PhotoModel.
        :rtype: str
        """
        return self._interim_inspection

    @interim_inspection.setter
    def interim_inspection(self, interim_inspection):
        """Sets the interim_inspection of this PhotoModel.

        The inspection the photo is assigned to (if applicable).

        :param interim_inspection: The interim_inspection of this PhotoModel.
        :type interim_inspection: str
        """

        self._interim_inspection = interim_inspection

    @property
    def inventory_item(self):
        """Gets the inventory_item of this PhotoModel.

        The inventory item the photo is assigned to (if applicable).

        :return: The inventory_item of this PhotoModel.
        :rtype: str
        """
        return self._inventory_item

    @inventory_item.setter
    def inventory_item(self, inventory_item):
        """Sets the inventory_item of this PhotoModel.

        The inventory item the photo is assigned to (if applicable).

        :param inventory_item: The inventory_item of this PhotoModel.
        :type inventory_item: str
        """

        self._inventory_item = inventory_item

    @property
    def name(self):
        """Gets the name of this PhotoModel.

        The photo name.

        :return: The name of this PhotoModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PhotoModel.

        The photo name.

        :param name: The name of this PhotoModel.
        :type name: str
        """

        self._name = name

    @property
    def oid(self):
        """Gets the oid of this PhotoModel.

        The unique Object ID (OID).

        :return: The oid of this PhotoModel.
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this PhotoModel.

        The unique Object ID (OID).

        :param oid: The oid of this PhotoModel.
        :type oid: str
        """

        self._oid = oid

    @property
    def photo_number(self):
        """Gets the photo_number of this PhotoModel.

        The photo ordering number

        :return: The photo_number of this PhotoModel.
        :rtype: int
        """
        return self._photo_number

    @photo_number.setter
    def photo_number(self, photo_number):
        """Sets the photo_number of this PhotoModel.

        The photo ordering number

        :param photo_number: The photo_number of this PhotoModel.
        :type photo_number: int
        """

        self._photo_number = photo_number

    @property
    def photo_type(self):
        """Gets the photo_type of this PhotoModel.

        The photo type.

        :return: The photo_type of this PhotoModel.
        :rtype: str
        """
        return self._photo_type

    @photo_type.setter
    def photo_type(self, photo_type):
        """Sets the photo_type of this PhotoModel.

        The photo type.

        :param photo_type: The photo_type of this PhotoModel.
        :type photo_type: str
        """
        allowed_values = ["Photo", "Map", "FloorPlan", "SiteMap", "AerialPhoto"]  # noqa: E501
        if photo_type not in allowed_values:
            raise ValueError(
                "Invalid value for `photo_type` ({0}), must be one of {1}"
                .format(photo_type, allowed_values)
            )

        self._photo_type = photo_type

    @property
    def _property(self):
        """Gets the _property of this PhotoModel.

        The property the photo is assigned to.

        :return: The _property of this PhotoModel.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this PhotoModel.

        The property the photo is assigned to.

        :param _property: The _property of this PhotoModel.
        :type _property: str
        """

        self.__property = _property

    @property
    def room(self):
        """Gets the room of this PhotoModel.

        The room the photo is assigned to. (If applicable)

        :return: The room of this PhotoModel.
        :rtype: str
        """
        return self._room

    @room.setter
    def room(self, room):
        """Sets the room of this PhotoModel.

        The room the photo is assigned to. (If applicable)

        :param room: The room of this PhotoModel.
        :type room: str
        """

        self._room = room
