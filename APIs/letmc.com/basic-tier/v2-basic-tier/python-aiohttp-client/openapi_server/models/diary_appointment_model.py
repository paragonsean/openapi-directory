# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiaryAppointmentModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appointment_type: str=None, cancelled: bool=None, comment: str=None, created_at: datetime=None, created_by: str=None, e_tag: str=None, end: datetime=None, oid: str=None, remind_at: datetime=None, remind_before: str=None, staff: str=None, start: datetime=None, subject: str=None):
        """DiaryAppointmentModel - a model defined in OpenAPI

        :param appointment_type: The appointment_type of this DiaryAppointmentModel.
        :param cancelled: The cancelled of this DiaryAppointmentModel.
        :param comment: The comment of this DiaryAppointmentModel.
        :param created_at: The created_at of this DiaryAppointmentModel.
        :param created_by: The created_by of this DiaryAppointmentModel.
        :param e_tag: The e_tag of this DiaryAppointmentModel.
        :param end: The end of this DiaryAppointmentModel.
        :param oid: The oid of this DiaryAppointmentModel.
        :param remind_at: The remind_at of this DiaryAppointmentModel.
        :param remind_before: The remind_before of this DiaryAppointmentModel.
        :param staff: The staff of this DiaryAppointmentModel.
        :param start: The start of this DiaryAppointmentModel.
        :param subject: The subject of this DiaryAppointmentModel.
        """
        self.openapi_types = {
            'appointment_type': str,
            'cancelled': bool,
            'comment': str,
            'created_at': datetime,
            'created_by': str,
            'e_tag': str,
            'end': datetime,
            'oid': str,
            'remind_at': datetime,
            'remind_before': str,
            'staff': str,
            'start': datetime,
            'subject': str
        }

        self.attribute_map = {
            'appointment_type': 'AppointmentType',
            'cancelled': 'Cancelled',
            'comment': 'Comment',
            'created_at': 'CreatedAt',
            'created_by': 'CreatedBy',
            'e_tag': 'ETag',
            'end': 'End',
            'oid': 'OID',
            'remind_at': 'RemindAt',
            'remind_before': 'RemindBefore',
            'staff': 'Staff',
            'start': 'Start',
            'subject': 'Subject'
        }

        self._appointment_type = appointment_type
        self._cancelled = cancelled
        self._comment = comment
        self._created_at = created_at
        self._created_by = created_by
        self._e_tag = e_tag
        self._end = end
        self._oid = oid
        self._remind_at = remind_at
        self._remind_before = remind_before
        self._staff = staff
        self._start = start
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiaryAppointmentModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiaryAppointmentModel of this DiaryAppointmentModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appointment_type(self):
        """Gets the appointment_type of this DiaryAppointmentModel.

        The diary appointment type.

        :return: The appointment_type of this DiaryAppointmentModel.
        :rtype: str
        """
        return self._appointment_type

    @appointment_type.setter
    def appointment_type(self, appointment_type):
        """Sets the appointment_type of this DiaryAppointmentModel.

        The diary appointment type.

        :param appointment_type: The appointment_type of this DiaryAppointmentModel.
        :type appointment_type: str
        """

        self._appointment_type = appointment_type

    @property
    def cancelled(self):
        """Gets the cancelled of this DiaryAppointmentModel.

        Whether the appointment has been cancelled.

        :return: The cancelled of this DiaryAppointmentModel.
        :rtype: bool
        """
        return self._cancelled

    @cancelled.setter
    def cancelled(self, cancelled):
        """Sets the cancelled of this DiaryAppointmentModel.

        Whether the appointment has been cancelled.

        :param cancelled: The cancelled of this DiaryAppointmentModel.
        :type cancelled: bool
        """

        self._cancelled = cancelled

    @property
    def comment(self):
        """Gets the comment of this DiaryAppointmentModel.

        The appointment comments text.

        :return: The comment of this DiaryAppointmentModel.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this DiaryAppointmentModel.

        The appointment comments text.

        :param comment: The comment of this DiaryAppointmentModel.
        :type comment: str
        """

        self._comment = comment

    @property
    def created_at(self):
        """Gets the created_at of this DiaryAppointmentModel.

        The date/time this appointment was created.

        :return: The created_at of this DiaryAppointmentModel.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DiaryAppointmentModel.

        The date/time this appointment was created.

        :param created_at: The created_at of this DiaryAppointmentModel.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this DiaryAppointmentModel.

        The staff member that created this appointment.

        :return: The created_by of this DiaryAppointmentModel.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DiaryAppointmentModel.

        The staff member that created this appointment.

        :param created_by: The created_by of this DiaryAppointmentModel.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def e_tag(self):
        """Gets the e_tag of this DiaryAppointmentModel.

        A unique identifier defining the object and change revision.

        :return: The e_tag of this DiaryAppointmentModel.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this DiaryAppointmentModel.

        A unique identifier defining the object and change revision.

        :param e_tag: The e_tag of this DiaryAppointmentModel.
        :type e_tag: str
        """

        self._e_tag = e_tag

    @property
    def end(self):
        """Gets the end of this DiaryAppointmentModel.

        The end date/time of this appointment.

        :return: The end of this DiaryAppointmentModel.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this DiaryAppointmentModel.

        The end date/time of this appointment.

        :param end: The end of this DiaryAppointmentModel.
        :type end: datetime
        """

        self._end = end

    @property
    def oid(self):
        """Gets the oid of this DiaryAppointmentModel.

        The unique Object ID (OID).

        :return: The oid of this DiaryAppointmentModel.
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this DiaryAppointmentModel.

        The unique Object ID (OID).

        :param oid: The oid of this DiaryAppointmentModel.
        :type oid: str
        """

        self._oid = oid

    @property
    def remind_at(self):
        """Gets the remind_at of this DiaryAppointmentModel.

        The date/time to remind the staff member of this appointment.

        :return: The remind_at of this DiaryAppointmentModel.
        :rtype: datetime
        """
        return self._remind_at

    @remind_at.setter
    def remind_at(self, remind_at):
        """Sets the remind_at of this DiaryAppointmentModel.

        The date/time to remind the staff member of this appointment.

        :param remind_at: The remind_at of this DiaryAppointmentModel.
        :type remind_at: datetime
        """

        self._remind_at = remind_at

    @property
    def remind_before(self):
        """Gets the remind_before of this DiaryAppointmentModel.

        The number of minutes before the appointment start date/time to remind the staff member. -1 means don't remind.

        :return: The remind_before of this DiaryAppointmentModel.
        :rtype: str
        """
        return self._remind_before

    @remind_before.setter
    def remind_before(self, remind_before):
        """Sets the remind_before of this DiaryAppointmentModel.

        The number of minutes before the appointment start date/time to remind the staff member. -1 means don't remind.

        :param remind_before: The remind_before of this DiaryAppointmentModel.
        :type remind_before: str
        """
        allowed_values = ["Min", "Min2", "Min5", "Min10", "Min15", "Min30", "Min45", "Hour", "Hour2", "Hour3", "Hour6", "Hour12", "Day", "Day2", "Day3", "Week", "NoReminder"]  # noqa: E501
        if remind_before not in allowed_values:
            raise ValueError(
                "Invalid value for `remind_before` ({0}), must be one of {1}"
                .format(remind_before, allowed_values)
            )

        self._remind_before = remind_before

    @property
    def staff(self):
        """Gets the staff of this DiaryAppointmentModel.

        The staff member holding this appointment.

        :return: The staff of this DiaryAppointmentModel.
        :rtype: str
        """
        return self._staff

    @staff.setter
    def staff(self, staff):
        """Sets the staff of this DiaryAppointmentModel.

        The staff member holding this appointment.

        :param staff: The staff of this DiaryAppointmentModel.
        :type staff: str
        """

        self._staff = staff

    @property
    def start(self):
        """Gets the start of this DiaryAppointmentModel.

        The start date/time of this appointment.

        :return: The start of this DiaryAppointmentModel.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this DiaryAppointmentModel.

        The start date/time of this appointment.

        :param start: The start of this DiaryAppointmentModel.
        :type start: datetime
        """

        self._start = start

    @property
    def subject(self):
        """Gets the subject of this DiaryAppointmentModel.

        The appointment subject text.

        :return: The subject of this DiaryAppointmentModel.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this DiaryAppointmentModel.

        The appointment subject text.

        :param subject: The subject of this DiaryAppointmentModel.
        :type subject: str
        """

        self._subject = subject
