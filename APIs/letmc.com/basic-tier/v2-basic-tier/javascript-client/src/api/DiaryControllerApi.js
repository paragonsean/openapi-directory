/**
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DiaryAllocationModel from '../model/DiaryAllocationModel';
import DiaryAllocationModelResults from '../model/DiaryAllocationModelResults';
import DiaryAppointmentModel from '../model/DiaryAppointmentModel';
import DiaryAppointmentModelResults from '../model/DiaryAppointmentModelResults';
import DiaryAppointmentTypeModel from '../model/DiaryAppointmentTypeModel';
import DiaryAppointmentTypeModelResults from '../model/DiaryAppointmentTypeModelResults';

/**
* DiaryController service.
* @module api/DiaryControllerApi
* @version v2-basic-tier
*/
export default class DiaryControllerApi {

    /**
    * Constructs a new DiaryControllerApi. 
    * @alias module:api/DiaryControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGet operation.
     * @callback module:api/DiaryControllerApi~v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiaryAllocationModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific diary allocation given its unique Object ID (OID)
     * @param {String} shortName The unique client short-name
     * @param {String} diaryAllocationID The unique ID of the DiaryAllocation
     * @param {module:api/DiaryControllerApi~v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiaryAllocationModel}
     */
    v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGet(shortName, diaryAllocationID, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGet");
      }
      // verify the required parameter 'diaryAllocationID' is set
      if (diaryAllocationID === undefined || diaryAllocationID === null) {
        throw new Error("Missing the required parameter 'diaryAllocationID' when calling v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGet");
      }

      let pathParams = {
        'shortName': shortName,
        'diaryAllocationID': diaryAllocationID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = DiaryAllocationModel;
      return this.apiClient.callApi(
        '/v2/tier2/{shortName}/diary/allocations/{diaryAllocationID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Tier2ShortNameDiaryAllocationsGet operation.
     * @callback module:api/DiaryControllerApi~v2Tier2ShortNameDiaryAllocationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiaryAllocationModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A collection of all diary allocations
     * @param {String} shortName The unique client short-name
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {module:api/DiaryControllerApi~v2Tier2ShortNameDiaryAllocationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiaryAllocationModelResults}
     */
    v2Tier2ShortNameDiaryAllocationsGet(shortName, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling v2Tier2ShortNameDiaryAllocationsGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling v2Tier2ShortNameDiaryAllocationsGet");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling v2Tier2ShortNameDiaryAllocationsGet");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = DiaryAllocationModelResults;
      return this.apiClient.callApi(
        '/v2/tier2/{shortName}/diary/allocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGet operation.
     * @callback module:api/DiaryControllerApi~v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiaryAppointmentModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific diary appointment given its unique Object ID (OID)
     * @param {String} shortName The unique client short-name
     * @param {String} diaryAppointmentID The unique ID of the DiaryAppointment
     * @param {module:api/DiaryControllerApi~v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiaryAppointmentModel}
     */
    v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGet(shortName, diaryAppointmentID, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGet");
      }
      // verify the required parameter 'diaryAppointmentID' is set
      if (diaryAppointmentID === undefined || diaryAppointmentID === null) {
        throw new Error("Missing the required parameter 'diaryAppointmentID' when calling v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGet");
      }

      let pathParams = {
        'shortName': shortName,
        'diaryAppointmentID': diaryAppointmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = DiaryAppointmentModel;
      return this.apiClient.callApi(
        '/v2/tier2/{shortName}/diary/appointments/{diaryAppointmentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Tier2ShortNameDiaryAppointmentsGet operation.
     * @callback module:api/DiaryControllerApi~v2Tier2ShortNameDiaryAppointmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiaryAppointmentModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A collection of all diary appointments
     * @param {String} shortName The unique client short-name
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {module:api/DiaryControllerApi~v2Tier2ShortNameDiaryAppointmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiaryAppointmentModelResults}
     */
    v2Tier2ShortNameDiaryAppointmentsGet(shortName, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling v2Tier2ShortNameDiaryAppointmentsGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling v2Tier2ShortNameDiaryAppointmentsGet");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling v2Tier2ShortNameDiaryAppointmentsGet");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = DiaryAppointmentModelResults;
      return this.apiClient.callApi(
        '/v2/tier2/{shortName}/diary/appointments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGet operation.
     * @callback module:api/DiaryControllerApi~v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiaryAppointmentTypeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific diary appointment type given its unique Object ID (OID)
     * @param {String} shortName The unique client short-name
     * @param {String} diaryAppointmentTypeID The unique ID of the DiaryAppointmentType
     * @param {module:api/DiaryControllerApi~v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiaryAppointmentTypeModel}
     */
    v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGet(shortName, diaryAppointmentTypeID, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGet");
      }
      // verify the required parameter 'diaryAppointmentTypeID' is set
      if (diaryAppointmentTypeID === undefined || diaryAppointmentTypeID === null) {
        throw new Error("Missing the required parameter 'diaryAppointmentTypeID' when calling v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGet");
      }

      let pathParams = {
        'shortName': shortName,
        'diaryAppointmentTypeID': diaryAppointmentTypeID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = DiaryAppointmentTypeModel;
      return this.apiClient.callApi(
        '/v2/tier2/{shortName}/diary/appointmenttypes/{diaryAppointmentTypeID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Tier2ShortNameDiaryAppointmenttypesGet operation.
     * @callback module:api/DiaryControllerApi~v2Tier2ShortNameDiaryAppointmenttypesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiaryAppointmentTypeModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A collection of all diary appointment types
     * @param {String} shortName The unique client short-name
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {module:api/DiaryControllerApi~v2Tier2ShortNameDiaryAppointmenttypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiaryAppointmentTypeModelResults}
     */
    v2Tier2ShortNameDiaryAppointmenttypesGet(shortName, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling v2Tier2ShortNameDiaryAppointmenttypesGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling v2Tier2ShortNameDiaryAppointmenttypesGet");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling v2Tier2ShortNameDiaryAppointmenttypesGet");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = DiaryAppointmentTypeModelResults;
      return this.apiClient.callApi(
        '/v2/tier2/{shortName}/diary/appointmenttypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
