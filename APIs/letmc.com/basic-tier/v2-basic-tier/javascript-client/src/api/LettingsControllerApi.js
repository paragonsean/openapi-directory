/**
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TenancyModel from '../model/TenancyModel';
import TenancyModelResults from '../model/TenancyModelResults';

/**
* LettingsController service.
* @module api/LettingsControllerApi
* @version v2-basic-tier
*/
export default class LettingsControllerApi {

    /**
    * Constructs a new LettingsControllerApi. 
    * @alias module:api/LettingsControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the lettingsControllerGetAdvertised operation.
     * @callback module:api/LettingsControllerApi~lettingsControllerGetAdvertisedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenancyModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search all properties available for rent given a range of search criteria.
     * @param {String} shortName The unique client short-name
     * @param {String} branchID The unique ID of the Branch
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {Object} opts Optional parameters
     * @param {String} [areaID] The unique ID of the Area
     * @param {Number} [rentMinimum] The minimum advertised rent to search for
     * @param {Number} [rentMaximum] The maximum advertised rent to search for
     * @param {Number} [maximumTenants] The maximum number of tenants a property can accommodate
     * @param {Boolean} [wantSharedProperties] Search for shared properties?
     * @param {Boolean} [wantStudentProperties] Search for student properties?
     * @param {module:api/LettingsControllerApi~lettingsControllerGetAdvertisedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenancyModelResults}
     */
    lettingsControllerGetAdvertised(shortName, branchID, offset, count, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling lettingsControllerGetAdvertised");
      }
      // verify the required parameter 'branchID' is set
      if (branchID === undefined || branchID === null) {
        throw new Error("Missing the required parameter 'branchID' when calling lettingsControllerGetAdvertised");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling lettingsControllerGetAdvertised");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling lettingsControllerGetAdvertised");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'branchID': branchID,
        'offset': offset,
        'count': count,
        'areaID': opts['areaID'],
        'rentMinimum': opts['rentMinimum'],
        'rentMaximum': opts['rentMaximum'],
        'maximumTenants': opts['maximumTenants'],
        'wantSharedProperties': opts['wantSharedProperties'],
        'wantStudentProperties': opts['wantStudentProperties']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = TenancyModelResults;
      return this.apiClient.callApi(
        '/v2/tier2/{shortName}/lettings/advertised', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lettingsControllerGetAdvertisedBetweenDates operation.
     * @callback module:api/LettingsControllerApi~lettingsControllerGetAdvertisedBetweenDatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenancyModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search all properties available for rent given a range of search criteria and dates.
     * @param {String} shortName The unique client short-name
     * @param {String} branchID The unique ID of the Branch
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {Date} rangeStartDate The date to search from
     * @param {Date} rangeEndDate The date to search to
     * @param {Object} opts Optional parameters
     * @param {String} [areaID] The unique ID of the Area
     * @param {Number} [rentMinimum] The minimum advertised rent to search for
     * @param {Number} [rentMaximum] The maximum advertised rent to search for
     * @param {Number} [maximumTenants] The maximum number of tenants a property can accommodate
     * @param {Boolean} [wantSharedProperties] Search for shared properties?
     * @param {Boolean} [wantStudentProperties] Search for student properties?
     * @param {module:api/LettingsControllerApi~lettingsControllerGetAdvertisedBetweenDatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenancyModelResults}
     */
    lettingsControllerGetAdvertisedBetweenDates(shortName, branchID, offset, count, rangeStartDate, rangeEndDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling lettingsControllerGetAdvertisedBetweenDates");
      }
      // verify the required parameter 'branchID' is set
      if (branchID === undefined || branchID === null) {
        throw new Error("Missing the required parameter 'branchID' when calling lettingsControllerGetAdvertisedBetweenDates");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling lettingsControllerGetAdvertisedBetweenDates");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling lettingsControllerGetAdvertisedBetweenDates");
      }
      // verify the required parameter 'rangeStartDate' is set
      if (rangeStartDate === undefined || rangeStartDate === null) {
        throw new Error("Missing the required parameter 'rangeStartDate' when calling lettingsControllerGetAdvertisedBetweenDates");
      }
      // verify the required parameter 'rangeEndDate' is set
      if (rangeEndDate === undefined || rangeEndDate === null) {
        throw new Error("Missing the required parameter 'rangeEndDate' when calling lettingsControllerGetAdvertisedBetweenDates");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'branchID': branchID,
        'offset': offset,
        'count': count,
        'rangeStartDate': rangeStartDate,
        'rangeEndDate': rangeEndDate,
        'areaID': opts['areaID'],
        'rentMinimum': opts['rentMinimum'],
        'rentMaximum': opts['rentMaximum'],
        'maximumTenants': opts['maximumTenants'],
        'wantSharedProperties': opts['wantSharedProperties'],
        'wantStudentProperties': opts['wantStudentProperties']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = TenancyModelResults;
      return this.apiClient.callApi(
        '/v2/tier2/{shortName}/lettings/advertisedbetweendates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lettingsControllerGetTenancyBrochure operation.
     * @callback module:api/LettingsControllerApi~lettingsControllerGetTenancyBrochureCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads the brochure relating to the latest advertised rental of a property
     * @param {String} shortName The unique client short-name
     * @param {String} tenancyID The unique ID of the tenancy
     * @param {module:api/LettingsControllerApi~lettingsControllerGetTenancyBrochureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    lettingsControllerGetTenancyBrochure(shortName, tenancyID, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling lettingsControllerGetTenancyBrochure");
      }
      // verify the required parameter 'tenancyID' is set
      if (tenancyID === undefined || tenancyID === null) {
        throw new Error("Missing the required parameter 'tenancyID' when calling lettingsControllerGetTenancyBrochure");
      }

      let pathParams = {
        'shortName': shortName,
        'tenancyID': tenancyID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/tier2/{shortName}/lettings/tenancies/{tenancyID}/brochure', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Tier2ShortNameLettingsTenanciesGet operation.
     * @callback module:api/LettingsControllerApi~v2Tier2ShortNameLettingsTenanciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenancyModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A collection of all the company's tenancies
     * @param {String} shortName The unique client short-name
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {module:api/LettingsControllerApi~v2Tier2ShortNameLettingsTenanciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenancyModelResults}
     */
    v2Tier2ShortNameLettingsTenanciesGet(shortName, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling v2Tier2ShortNameLettingsTenanciesGet");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling v2Tier2ShortNameLettingsTenanciesGet");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling v2Tier2ShortNameLettingsTenanciesGet");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = TenancyModelResults;
      return this.apiClient.callApi(
        '/v2/tier2/{shortName}/lettings/tenancies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2Tier2ShortNameLettingsTenanciesTenancyIDGet operation.
     * @callback module:api/LettingsControllerApi~v2Tier2ShortNameLettingsTenanciesTenancyIDGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenancyModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific tenancy given its unique Object ID (OID)
     * @param {String} shortName The unique client short-name
     * @param {String} tenancyID The unique ID of the Tenancy
     * @param {module:api/LettingsControllerApi~v2Tier2ShortNameLettingsTenanciesTenancyIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenancyModel}
     */
    v2Tier2ShortNameLettingsTenanciesTenancyIDGet(shortName, tenancyID, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling v2Tier2ShortNameLettingsTenanciesTenancyIDGet");
      }
      // verify the required parameter 'tenancyID' is set
      if (tenancyID === undefined || tenancyID === null) {
        throw new Error("Missing the required parameter 'tenancyID' when calling v2Tier2ShortNameLettingsTenanciesTenancyIDGet");
      }

      let pathParams = {
        'shortName': shortName,
        'tenancyID': tenancyID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = TenancyModel;
      return this.apiClient.callApi(
        '/v2/tier2/{shortName}/lettings/tenancies/{tenancyID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
