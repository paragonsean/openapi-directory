/**
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DiaryAppointmentTypeModel model module.
 * @module model/DiaryAppointmentTypeModel
 * @version v2-basic-tier
 */
class DiaryAppointmentTypeModel {
    /**
     * Constructs a new <code>DiaryAppointmentTypeModel</code>.
     * Represents a diary appointment type.
     * @alias module:model/DiaryAppointmentTypeModel
     */
    constructor() { 
        
        DiaryAppointmentTypeModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiaryAppointmentTypeModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiaryAppointmentTypeModel} obj Optional instance to populate.
     * @return {module:model/DiaryAppointmentTypeModel} The populated <code>DiaryAppointmentTypeModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiaryAppointmentTypeModel();

            if (data.hasOwnProperty('ETag')) {
                obj['ETag'] = ApiClient.convertToType(data['ETag'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('OID')) {
                obj['OID'] = ApiClient.convertToType(data['OID'], 'String');
            }
            if (data.hasOwnProperty('SystemType')) {
                obj['SystemType'] = ApiClient.convertToType(data['SystemType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiaryAppointmentTypeModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiaryAppointmentTypeModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ETag'] && !(typeof data['ETag'] === 'string' || data['ETag'] instanceof String)) {
            throw new Error("Expected the field `ETag` to be a primitive type in the JSON string but got " + data['ETag']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['OID'] && !(typeof data['OID'] === 'string' || data['OID'] instanceof String)) {
            throw new Error("Expected the field `OID` to be a primitive type in the JSON string but got " + data['OID']);
        }
        // ensure the json data is a string
        if (data['SystemType'] && !(typeof data['SystemType'] === 'string' || data['SystemType'] instanceof String)) {
            throw new Error("Expected the field `SystemType` to be a primitive type in the JSON string but got " + data['SystemType']);
        }

        return true;
    }


}



/**
 * A unique identifier defining the object and change revision.
 * @member {String} ETag
 */
DiaryAppointmentTypeModel.prototype['ETag'] = undefined;

/**
 * The appointment type name.
 * @member {String} Name
 */
DiaryAppointmentTypeModel.prototype['Name'] = undefined;

/**
 * The unique Object ID (OID).
 * @member {String} OID
 */
DiaryAppointmentTypeModel.prototype['OID'] = undefined;

/**
 * The appointment system type.
 * @member {module:model/DiaryAppointmentTypeModel.SystemTypeEnum} SystemType
 */
DiaryAppointmentTypeModel.prototype['SystemType'] = undefined;





/**
 * Allowed values for the <code>SystemType</code> property.
 * @enum {String}
 * @readonly
 */
DiaryAppointmentTypeModel['SystemTypeEnum'] = {

    /**
     * value: "Viewing"
     * @const
     */
    "Viewing": "Viewing",

    /**
     * value: "ViewAndValue"
     * @const
     */
    "ViewAndValue": "ViewAndValue",

    /**
     * value: "OpeningInspection"
     * @const
     */
    "OpeningInspection": "OpeningInspection",

    /**
     * value: "InterimInspection"
     * @const
     */
    "InterimInspection": "InterimInspection",

    /**
     * value: "ClosingInspection"
     * @const
     */
    "ClosingInspection": "ClosingInspection",

    /**
     * value: "SalesAppraisal"
     * @const
     */
    "SalesAppraisal": "SalesAppraisal",

    /**
     * value: "Custom"
     * @const
     */
    "Custom": "Custom"
};



export default DiaryAppointmentTypeModel;

