/*
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.ViewingBookingModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ViewingControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ViewingControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ViewingControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for viewingControllerGetBookings
     * @param shortName The unique client short-name (required)
     * @param preferredDate The preferred date for a viewing (required)
     * @param propertyIDsToView An array of unique IDs of properties to view (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewingControllerGetBookingsCall(String shortName, OffsetDateTime preferredDate, List<String> propertyIDsToView, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/viewing/bookings"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (preferredDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preferredDate", preferredDate));
        }

        if (propertyIDsToView != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyIDsToView", propertyIDsToView));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewingControllerGetBookingsValidateBeforeCall(String shortName, OffsetDateTime preferredDate, List<String> propertyIDsToView, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling viewingControllerGetBookings(Async)");
        }

        // verify the required parameter 'preferredDate' is set
        if (preferredDate == null) {
            throw new ApiException("Missing the required parameter 'preferredDate' when calling viewingControllerGetBookings(Async)");
        }

        // verify the required parameter 'propertyIDsToView' is set
        if (propertyIDsToView == null) {
            throw new ApiException("Missing the required parameter 'propertyIDsToView' when calling viewingControllerGetBookings(Async)");
        }

        return viewingControllerGetBookingsCall(shortName, preferredDate, propertyIDsToView, _callback);

    }

    /**
     * Gets a list of available viewing slots for one or more properties
     * 
     * @param shortName The unique client short-name (required)
     * @param preferredDate The preferred date for a viewing (required)
     * @param propertyIDsToView An array of unique IDs of properties to view (required)
     * @return List&lt;ViewingBookingModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ViewingBookingModel> viewingControllerGetBookings(String shortName, OffsetDateTime preferredDate, List<String> propertyIDsToView) throws ApiException {
        ApiResponse<List<ViewingBookingModel>> localVarResp = viewingControllerGetBookingsWithHttpInfo(shortName, preferredDate, propertyIDsToView);
        return localVarResp.getData();
    }

    /**
     * Gets a list of available viewing slots for one or more properties
     * 
     * @param shortName The unique client short-name (required)
     * @param preferredDate The preferred date for a viewing (required)
     * @param propertyIDsToView An array of unique IDs of properties to view (required)
     * @return ApiResponse&lt;List&lt;ViewingBookingModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ViewingBookingModel>> viewingControllerGetBookingsWithHttpInfo(String shortName, OffsetDateTime preferredDate, List<String> propertyIDsToView) throws ApiException {
        okhttp3.Call localVarCall = viewingControllerGetBookingsValidateBeforeCall(shortName, preferredDate, propertyIDsToView, null);
        Type localVarReturnType = new TypeToken<List<ViewingBookingModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of available viewing slots for one or more properties (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param preferredDate The preferred date for a viewing (required)
     * @param propertyIDsToView An array of unique IDs of properties to view (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewingControllerGetBookingsAsync(String shortName, OffsetDateTime preferredDate, List<String> propertyIDsToView, final ApiCallback<List<ViewingBookingModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewingControllerGetBookingsValidateBeforeCall(shortName, preferredDate, propertyIDsToView, _callback);
        Type localVarReturnType = new TypeToken<List<ViewingBookingModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewingControllerMakeBooking
     * @param shortName The unique client short-name (required)
     * @param forename The forename of the prospect (required)
     * @param surname The surname of the prospect (required)
     * @param mobilePhone The mobile phone number of the prospect (required)
     * @param emailAddress The email address of the prospect (required)
     * @param propertyIDsToView An array of unique IDs of properties to view (required)
     * @param selectedViewingSlot The prospect&#39;s selected viewing slot (required)
     * @param wantRoomInSharedProperty Whether the prospect wants a shared property (optional)
     * @param alertMinRent The minimum rent amount the prospect is looking for (optional)
     * @param alertMaxRent The maximum rent amount the prospect is looking for (optional)
     * @param alertNumberOfBeds The minimum number of beds the prospect is looking for (optional)
     * @param alertAreaID The unique ID of the area the prospect is looking for (optional)
     * @param alertTenantType The tenanct type the prospect is looking for (optional)
     * @param subscribeToEmailAlerts Whether to subscribe the prospect to email alerts (optional)
     * @param subscribeToSMSAlerts Whether to subscribe the prospect to SMS alerts (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewingControllerMakeBookingCall(String shortName, String forename, String surname, String mobilePhone, String emailAddress, List<String> propertyIDsToView, ViewingBookingModel selectedViewingSlot, Boolean wantRoomInSharedProperty, Double alertMinRent, Double alertMaxRent, Integer alertNumberOfBeds, String alertAreaID, String alertTenantType, Boolean subscribeToEmailAlerts, Boolean subscribeToSMSAlerts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = selectedViewingSlot;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/viewing/bookings"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forename", forename));
        }

        if (surname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("surname", surname));
        }

        if (mobilePhone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mobilePhone", mobilePhone));
        }

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailAddress", emailAddress));
        }

        if (propertyIDsToView != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyIDsToView", propertyIDsToView));
        }

        if (wantRoomInSharedProperty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wantRoomInSharedProperty", wantRoomInSharedProperty));
        }

        if (alertMinRent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertMinRent", alertMinRent));
        }

        if (alertMaxRent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertMaxRent", alertMaxRent));
        }

        if (alertNumberOfBeds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertNumberOfBeds", alertNumberOfBeds));
        }

        if (alertAreaID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertAreaID", alertAreaID));
        }

        if (alertTenantType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertTenantType", alertTenantType));
        }

        if (subscribeToEmailAlerts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscribeToEmailAlerts", subscribeToEmailAlerts));
        }

        if (subscribeToSMSAlerts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscribeToSMSAlerts", subscribeToSMSAlerts));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewingControllerMakeBookingValidateBeforeCall(String shortName, String forename, String surname, String mobilePhone, String emailAddress, List<String> propertyIDsToView, ViewingBookingModel selectedViewingSlot, Boolean wantRoomInSharedProperty, Double alertMinRent, Double alertMaxRent, Integer alertNumberOfBeds, String alertAreaID, String alertTenantType, Boolean subscribeToEmailAlerts, Boolean subscribeToSMSAlerts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling viewingControllerMakeBooking(Async)");
        }

        // verify the required parameter 'forename' is set
        if (forename == null) {
            throw new ApiException("Missing the required parameter 'forename' when calling viewingControllerMakeBooking(Async)");
        }

        // verify the required parameter 'surname' is set
        if (surname == null) {
            throw new ApiException("Missing the required parameter 'surname' when calling viewingControllerMakeBooking(Async)");
        }

        // verify the required parameter 'mobilePhone' is set
        if (mobilePhone == null) {
            throw new ApiException("Missing the required parameter 'mobilePhone' when calling viewingControllerMakeBooking(Async)");
        }

        // verify the required parameter 'emailAddress' is set
        if (emailAddress == null) {
            throw new ApiException("Missing the required parameter 'emailAddress' when calling viewingControllerMakeBooking(Async)");
        }

        // verify the required parameter 'propertyIDsToView' is set
        if (propertyIDsToView == null) {
            throw new ApiException("Missing the required parameter 'propertyIDsToView' when calling viewingControllerMakeBooking(Async)");
        }

        // verify the required parameter 'selectedViewingSlot' is set
        if (selectedViewingSlot == null) {
            throw new ApiException("Missing the required parameter 'selectedViewingSlot' when calling viewingControllerMakeBooking(Async)");
        }

        return viewingControllerMakeBookingCall(shortName, forename, surname, mobilePhone, emailAddress, propertyIDsToView, selectedViewingSlot, wantRoomInSharedProperty, alertMinRent, alertMaxRent, alertNumberOfBeds, alertAreaID, alertTenantType, subscribeToEmailAlerts, subscribeToSMSAlerts, _callback);

    }

    /**
     * Book an appointment for a viewing slot returned from the GET verb
     * 
     * @param shortName The unique client short-name (required)
     * @param forename The forename of the prospect (required)
     * @param surname The surname of the prospect (required)
     * @param mobilePhone The mobile phone number of the prospect (required)
     * @param emailAddress The email address of the prospect (required)
     * @param propertyIDsToView An array of unique IDs of properties to view (required)
     * @param selectedViewingSlot The prospect&#39;s selected viewing slot (required)
     * @param wantRoomInSharedProperty Whether the prospect wants a shared property (optional)
     * @param alertMinRent The minimum rent amount the prospect is looking for (optional)
     * @param alertMaxRent The maximum rent amount the prospect is looking for (optional)
     * @param alertNumberOfBeds The minimum number of beds the prospect is looking for (optional)
     * @param alertAreaID The unique ID of the area the prospect is looking for (optional)
     * @param alertTenantType The tenanct type the prospect is looking for (optional)
     * @param subscribeToEmailAlerts Whether to subscribe the prospect to email alerts (optional)
     * @param subscribeToSMSAlerts Whether to subscribe the prospect to SMS alerts (optional)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Boolean viewingControllerMakeBooking(String shortName, String forename, String surname, String mobilePhone, String emailAddress, List<String> propertyIDsToView, ViewingBookingModel selectedViewingSlot, Boolean wantRoomInSharedProperty, Double alertMinRent, Double alertMaxRent, Integer alertNumberOfBeds, String alertAreaID, String alertTenantType, Boolean subscribeToEmailAlerts, Boolean subscribeToSMSAlerts) throws ApiException {
        ApiResponse<Boolean> localVarResp = viewingControllerMakeBookingWithHttpInfo(shortName, forename, surname, mobilePhone, emailAddress, propertyIDsToView, selectedViewingSlot, wantRoomInSharedProperty, alertMinRent, alertMaxRent, alertNumberOfBeds, alertAreaID, alertTenantType, subscribeToEmailAlerts, subscribeToSMSAlerts);
        return localVarResp.getData();
    }

    /**
     * Book an appointment for a viewing slot returned from the GET verb
     * 
     * @param shortName The unique client short-name (required)
     * @param forename The forename of the prospect (required)
     * @param surname The surname of the prospect (required)
     * @param mobilePhone The mobile phone number of the prospect (required)
     * @param emailAddress The email address of the prospect (required)
     * @param propertyIDsToView An array of unique IDs of properties to view (required)
     * @param selectedViewingSlot The prospect&#39;s selected viewing slot (required)
     * @param wantRoomInSharedProperty Whether the prospect wants a shared property (optional)
     * @param alertMinRent The minimum rent amount the prospect is looking for (optional)
     * @param alertMaxRent The maximum rent amount the prospect is looking for (optional)
     * @param alertNumberOfBeds The minimum number of beds the prospect is looking for (optional)
     * @param alertAreaID The unique ID of the area the prospect is looking for (optional)
     * @param alertTenantType The tenanct type the prospect is looking for (optional)
     * @param subscribeToEmailAlerts Whether to subscribe the prospect to email alerts (optional)
     * @param subscribeToSMSAlerts Whether to subscribe the prospect to SMS alerts (optional)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> viewingControllerMakeBookingWithHttpInfo(String shortName, String forename, String surname, String mobilePhone, String emailAddress, List<String> propertyIDsToView, ViewingBookingModel selectedViewingSlot, Boolean wantRoomInSharedProperty, Double alertMinRent, Double alertMaxRent, Integer alertNumberOfBeds, String alertAreaID, String alertTenantType, Boolean subscribeToEmailAlerts, Boolean subscribeToSMSAlerts) throws ApiException {
        okhttp3.Call localVarCall = viewingControllerMakeBookingValidateBeforeCall(shortName, forename, surname, mobilePhone, emailAddress, propertyIDsToView, selectedViewingSlot, wantRoomInSharedProperty, alertMinRent, alertMaxRent, alertNumberOfBeds, alertAreaID, alertTenantType, subscribeToEmailAlerts, subscribeToSMSAlerts, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Book an appointment for a viewing slot returned from the GET verb (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param forename The forename of the prospect (required)
     * @param surname The surname of the prospect (required)
     * @param mobilePhone The mobile phone number of the prospect (required)
     * @param emailAddress The email address of the prospect (required)
     * @param propertyIDsToView An array of unique IDs of properties to view (required)
     * @param selectedViewingSlot The prospect&#39;s selected viewing slot (required)
     * @param wantRoomInSharedProperty Whether the prospect wants a shared property (optional)
     * @param alertMinRent The minimum rent amount the prospect is looking for (optional)
     * @param alertMaxRent The maximum rent amount the prospect is looking for (optional)
     * @param alertNumberOfBeds The minimum number of beds the prospect is looking for (optional)
     * @param alertAreaID The unique ID of the area the prospect is looking for (optional)
     * @param alertTenantType The tenanct type the prospect is looking for (optional)
     * @param subscribeToEmailAlerts Whether to subscribe the prospect to email alerts (optional)
     * @param subscribeToSMSAlerts Whether to subscribe the prospect to SMS alerts (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewingControllerMakeBookingAsync(String shortName, String forename, String surname, String mobilePhone, String emailAddress, List<String> propertyIDsToView, ViewingBookingModel selectedViewingSlot, Boolean wantRoomInSharedProperty, Double alertMinRent, Double alertMaxRent, Integer alertNumberOfBeds, String alertAreaID, String alertTenantType, Boolean subscribeToEmailAlerts, Boolean subscribeToSMSAlerts, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewingControllerMakeBookingValidateBeforeCall(shortName, forename, surname, mobilePhone, emailAddress, propertyIDsToView, selectedViewingSlot, wantRoomInSharedProperty, alertMinRent, alertMaxRent, alertNumberOfBeds, alertAreaID, alertTenantType, subscribeToEmailAlerts, subscribeToSMSAlerts, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
