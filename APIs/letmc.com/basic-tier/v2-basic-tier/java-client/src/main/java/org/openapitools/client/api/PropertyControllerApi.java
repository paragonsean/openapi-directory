/*
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PhotoModelResults;
import org.openapitools.client.model.PropertyFacilityModelResults;
import org.openapitools.client.model.PropertyModel;
import org.openapitools.client.model.PropertyModelResults;
import org.openapitools.client.model.PropertyRoomModelResults;
import org.openapitools.client.model.TenancyModelResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PropertyControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PropertyControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PropertyControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for propertyControllerGetPropertiesFacilities
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyControllerGetPropertiesFacilitiesCall(String shortName, String propertyID, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/property/properties/{propertyID}/facilities"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "propertyID" + "}", localVarApiClient.escapeString(propertyID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertyControllerGetPropertiesFacilitiesValidateBeforeCall(String shortName, String propertyID, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling propertyControllerGetPropertiesFacilities(Async)");
        }

        // verify the required parameter 'propertyID' is set
        if (propertyID == null) {
            throw new ApiException("Missing the required parameter 'propertyID' when calling propertyControllerGetPropertiesFacilities(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling propertyControllerGetPropertiesFacilities(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling propertyControllerGetPropertiesFacilities(Async)");
        }

        return propertyControllerGetPropertiesFacilitiesCall(shortName, propertyID, offset, count, _callback);

    }

    /**
     * A collection of facilities linked to a block, property or room
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return PropertyFacilityModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PropertyFacilityModelResults propertyControllerGetPropertiesFacilities(String shortName, String propertyID, Integer offset, Integer count) throws ApiException {
        ApiResponse<PropertyFacilityModelResults> localVarResp = propertyControllerGetPropertiesFacilitiesWithHttpInfo(shortName, propertyID, offset, count);
        return localVarResp.getData();
    }

    /**
     * A collection of facilities linked to a block, property or room
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;PropertyFacilityModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyFacilityModelResults> propertyControllerGetPropertiesFacilitiesWithHttpInfo(String shortName, String propertyID, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = propertyControllerGetPropertiesFacilitiesValidateBeforeCall(shortName, propertyID, offset, count, null);
        Type localVarReturnType = new TypeToken<PropertyFacilityModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A collection of facilities linked to a block, property or room (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyControllerGetPropertiesFacilitiesAsync(String shortName, String propertyID, Integer offset, Integer count, final ApiCallback<PropertyFacilityModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertyControllerGetPropertiesFacilitiesValidateBeforeCall(shortName, propertyID, offset, count, _callback);
        Type localVarReturnType = new TypeToken<PropertyFacilityModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertyControllerGetPropertiesPhotos
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyControllerGetPropertiesPhotosCall(String shortName, String propertyID, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/property/properties/{propertyID}/photos"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "propertyID" + "}", localVarApiClient.escapeString(propertyID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertyControllerGetPropertiesPhotosValidateBeforeCall(String shortName, String propertyID, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling propertyControllerGetPropertiesPhotos(Async)");
        }

        // verify the required parameter 'propertyID' is set
        if (propertyID == null) {
            throw new ApiException("Missing the required parameter 'propertyID' when calling propertyControllerGetPropertiesPhotos(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling propertyControllerGetPropertiesPhotos(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling propertyControllerGetPropertiesPhotos(Async)");
        }

        return propertyControllerGetPropertiesPhotosCall(shortName, propertyID, offset, count, _callback);

    }

    /**
     * A collection showing all the photos linked to a specific block, property or room
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return PhotoModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PhotoModelResults propertyControllerGetPropertiesPhotos(String shortName, String propertyID, Integer offset, Integer count) throws ApiException {
        ApiResponse<PhotoModelResults> localVarResp = propertyControllerGetPropertiesPhotosWithHttpInfo(shortName, propertyID, offset, count);
        return localVarResp.getData();
    }

    /**
     * A collection showing all the photos linked to a specific block, property or room
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;PhotoModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PhotoModelResults> propertyControllerGetPropertiesPhotosWithHttpInfo(String shortName, String propertyID, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = propertyControllerGetPropertiesPhotosValidateBeforeCall(shortName, propertyID, offset, count, null);
        Type localVarReturnType = new TypeToken<PhotoModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A collection showing all the photos linked to a specific block, property or room (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyControllerGetPropertiesPhotosAsync(String shortName, String propertyID, Integer offset, Integer count, final ApiCallback<PhotoModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertyControllerGetPropertiesPhotosValidateBeforeCall(shortName, propertyID, offset, count, _callback);
        Type localVarReturnType = new TypeToken<PhotoModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertyControllerGetPropertiesRooms
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyControllerGetPropertiesRoomsCall(String shortName, String propertyID, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/property/properties/{propertyID}/rooms"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "propertyID" + "}", localVarApiClient.escapeString(propertyID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertyControllerGetPropertiesRoomsValidateBeforeCall(String shortName, String propertyID, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling propertyControllerGetPropertiesRooms(Async)");
        }

        // verify the required parameter 'propertyID' is set
        if (propertyID == null) {
            throw new ApiException("Missing the required parameter 'propertyID' when calling propertyControllerGetPropertiesRooms(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling propertyControllerGetPropertiesRooms(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling propertyControllerGetPropertiesRooms(Async)");
        }

        return propertyControllerGetPropertiesRoomsCall(shortName, propertyID, offset, count, _callback);

    }

    /**
     * A collection of the rooms that belong to this property or block
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return PropertyRoomModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PropertyRoomModelResults propertyControllerGetPropertiesRooms(String shortName, String propertyID, Integer offset, Integer count) throws ApiException {
        ApiResponse<PropertyRoomModelResults> localVarResp = propertyControllerGetPropertiesRoomsWithHttpInfo(shortName, propertyID, offset, count);
        return localVarResp.getData();
    }

    /**
     * A collection of the rooms that belong to this property or block
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;PropertyRoomModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyRoomModelResults> propertyControllerGetPropertiesRoomsWithHttpInfo(String shortName, String propertyID, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = propertyControllerGetPropertiesRoomsValidateBeforeCall(shortName, propertyID, offset, count, null);
        Type localVarReturnType = new TypeToken<PropertyRoomModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A collection of the rooms that belong to this property or block (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyControllerGetPropertiesRoomsAsync(String shortName, String propertyID, Integer offset, Integer count, final ApiCallback<PropertyRoomModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertyControllerGetPropertiesRoomsValidateBeforeCall(shortName, propertyID, offset, count, _callback);
        Type localVarReturnType = new TypeToken<PropertyRoomModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertyControllerGetPropertiesTenancies
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyControllerGetPropertiesTenanciesCall(String shortName, String propertyID, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/property/properties/{propertyID}/tenancies"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "propertyID" + "}", localVarApiClient.escapeString(propertyID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertyControllerGetPropertiesTenanciesValidateBeforeCall(String shortName, String propertyID, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling propertyControllerGetPropertiesTenancies(Async)");
        }

        // verify the required parameter 'propertyID' is set
        if (propertyID == null) {
            throw new ApiException("Missing the required parameter 'propertyID' when calling propertyControllerGetPropertiesTenancies(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling propertyControllerGetPropertiesTenancies(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling propertyControllerGetPropertiesTenancies(Async)");
        }

        return propertyControllerGetPropertiesTenanciesCall(shortName, propertyID, offset, count, _callback);

    }

    /**
     * A collection of all tenancies associated with this block, property or room
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return TenancyModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TenancyModelResults propertyControllerGetPropertiesTenancies(String shortName, String propertyID, Integer offset, Integer count) throws ApiException {
        ApiResponse<TenancyModelResults> localVarResp = propertyControllerGetPropertiesTenanciesWithHttpInfo(shortName, propertyID, offset, count);
        return localVarResp.getData();
    }

    /**
     * A collection of all tenancies associated with this block, property or room
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;TenancyModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TenancyModelResults> propertyControllerGetPropertiesTenanciesWithHttpInfo(String shortName, String propertyID, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = propertyControllerGetPropertiesTenanciesValidateBeforeCall(shortName, propertyID, offset, count, null);
        Type localVarReturnType = new TypeToken<TenancyModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A collection of all tenancies associated with this block, property or room (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyControllerGetPropertiesTenanciesAsync(String shortName, String propertyID, Integer offset, Integer count, final ApiCallback<TenancyModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertyControllerGetPropertiesTenanciesValidateBeforeCall(shortName, propertyID, offset, count, _callback);
        Type localVarReturnType = new TypeToken<TenancyModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertyControllerGetPropertyEERDownload
     * @param shortName The unique client short-name (required)
     * @param propertyStructureID The unique ID of the property structure (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyControllerGetPropertyEERDownloadCall(String shortName, String propertyStructureID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/property/structures/{propertyStructureID}/reports/eer"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "propertyStructureID" + "}", localVarApiClient.escapeString(propertyStructureID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertyControllerGetPropertyEERDownloadValidateBeforeCall(String shortName, String propertyStructureID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling propertyControllerGetPropertyEERDownload(Async)");
        }

        // verify the required parameter 'propertyStructureID' is set
        if (propertyStructureID == null) {
            throw new ApiException("Missing the required parameter 'propertyStructureID' when calling propertyControllerGetPropertyEERDownload(Async)");
        }

        return propertyControllerGetPropertyEERDownloadCall(shortName, propertyStructureID, _callback);

    }

    /**
     * Downloads the energy efficiency report (EER) graph for a property
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyStructureID The unique ID of the property structure (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object propertyControllerGetPropertyEERDownload(String shortName, String propertyStructureID) throws ApiException {
        ApiResponse<Object> localVarResp = propertyControllerGetPropertyEERDownloadWithHttpInfo(shortName, propertyStructureID);
        return localVarResp.getData();
    }

    /**
     * Downloads the energy efficiency report (EER) graph for a property
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyStructureID The unique ID of the property structure (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> propertyControllerGetPropertyEERDownloadWithHttpInfo(String shortName, String propertyStructureID) throws ApiException {
        okhttp3.Call localVarCall = propertyControllerGetPropertyEERDownloadValidateBeforeCall(shortName, propertyStructureID, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Downloads the energy efficiency report (EER) graph for a property (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyStructureID The unique ID of the property structure (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyControllerGetPropertyEERDownloadAsync(String shortName, String propertyStructureID, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertyControllerGetPropertyEERDownloadValidateBeforeCall(shortName, propertyStructureID, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertyControllerGetPropertyEIRDownload
     * @param shortName The unique client short-name (required)
     * @param propertyStructureID The unique ID of the property structure (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyControllerGetPropertyEIRDownloadCall(String shortName, String propertyStructureID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/property/structures/{propertyStructureID}/reports/eir"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "propertyStructureID" + "}", localVarApiClient.escapeString(propertyStructureID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertyControllerGetPropertyEIRDownloadValidateBeforeCall(String shortName, String propertyStructureID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling propertyControllerGetPropertyEIRDownload(Async)");
        }

        // verify the required parameter 'propertyStructureID' is set
        if (propertyStructureID == null) {
            throw new ApiException("Missing the required parameter 'propertyStructureID' when calling propertyControllerGetPropertyEIRDownload(Async)");
        }

        return propertyControllerGetPropertyEIRDownloadCall(shortName, propertyStructureID, _callback);

    }

    /**
     * Downloads the environmental impact report (EIR) graph for a property
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyStructureID The unique ID of the property structure (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object propertyControllerGetPropertyEIRDownload(String shortName, String propertyStructureID) throws ApiException {
        ApiResponse<Object> localVarResp = propertyControllerGetPropertyEIRDownloadWithHttpInfo(shortName, propertyStructureID);
        return localVarResp.getData();
    }

    /**
     * Downloads the environmental impact report (EIR) graph for a property
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyStructureID The unique ID of the property structure (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> propertyControllerGetPropertyEIRDownloadWithHttpInfo(String shortName, String propertyStructureID) throws ApiException {
        okhttp3.Call localVarCall = propertyControllerGetPropertyEIRDownloadValidateBeforeCall(shortName, propertyStructureID, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Downloads the environmental impact report (EIR) graph for a property (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyStructureID The unique ID of the property structure (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertyControllerGetPropertyEIRDownloadAsync(String shortName, String propertyStructureID, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertyControllerGetPropertyEIRDownloadValidateBeforeCall(shortName, propertyStructureID, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2Tier2ShortNamePropertyPropertiesGet
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNamePropertyPropertiesGetCall(String shortName, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/property/properties"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2Tier2ShortNamePropertyPropertiesGetValidateBeforeCall(String shortName, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling v2Tier2ShortNamePropertyPropertiesGet(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling v2Tier2ShortNamePropertyPropertiesGet(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling v2Tier2ShortNamePropertyPropertiesGet(Async)");
        }

        return v2Tier2ShortNamePropertyPropertiesGetCall(shortName, offset, count, _callback);

    }

    /**
     * A collection of all properties within a company
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return PropertyModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PropertyModelResults v2Tier2ShortNamePropertyPropertiesGet(String shortName, Integer offset, Integer count) throws ApiException {
        ApiResponse<PropertyModelResults> localVarResp = v2Tier2ShortNamePropertyPropertiesGetWithHttpInfo(shortName, offset, count);
        return localVarResp.getData();
    }

    /**
     * A collection of all properties within a company
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;PropertyModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyModelResults> v2Tier2ShortNamePropertyPropertiesGetWithHttpInfo(String shortName, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = v2Tier2ShortNamePropertyPropertiesGetValidateBeforeCall(shortName, offset, count, null);
        Type localVarReturnType = new TypeToken<PropertyModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A collection of all properties within a company (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNamePropertyPropertiesGetAsync(String shortName, Integer offset, Integer count, final ApiCallback<PropertyModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2Tier2ShortNamePropertyPropertiesGetValidateBeforeCall(shortName, offset, count, _callback);
        Type localVarReturnType = new TypeToken<PropertyModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2Tier2ShortNamePropertyPropertiesPropertyIDGet
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNamePropertyPropertiesPropertyIDGetCall(String shortName, String propertyID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/property/properties/{propertyID}"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "propertyID" + "}", localVarApiClient.escapeString(propertyID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2Tier2ShortNamePropertyPropertiesPropertyIDGetValidateBeforeCall(String shortName, String propertyID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling v2Tier2ShortNamePropertyPropertiesPropertyIDGet(Async)");
        }

        // verify the required parameter 'propertyID' is set
        if (propertyID == null) {
            throw new ApiException("Missing the required parameter 'propertyID' when calling v2Tier2ShortNamePropertyPropertiesPropertyIDGet(Async)");
        }

        return v2Tier2ShortNamePropertyPropertiesPropertyIDGetCall(shortName, propertyID, _callback);

    }

    /**
     * Get a specific property given its unique Object ID (OID)
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @return PropertyModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PropertyModel v2Tier2ShortNamePropertyPropertiesPropertyIDGet(String shortName, String propertyID) throws ApiException {
        ApiResponse<PropertyModel> localVarResp = v2Tier2ShortNamePropertyPropertiesPropertyIDGetWithHttpInfo(shortName, propertyID);
        return localVarResp.getData();
    }

    /**
     * Get a specific property given its unique Object ID (OID)
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @return ApiResponse&lt;PropertyModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyModel> v2Tier2ShortNamePropertyPropertiesPropertyIDGetWithHttpInfo(String shortName, String propertyID) throws ApiException {
        okhttp3.Call localVarCall = v2Tier2ShortNamePropertyPropertiesPropertyIDGetValidateBeforeCall(shortName, propertyID, null);
        Type localVarReturnType = new TypeToken<PropertyModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific property given its unique Object ID (OID) (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyID The unique ID of the Property (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNamePropertyPropertiesPropertyIDGetAsync(String shortName, String propertyID, final ApiCallback<PropertyModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2Tier2ShortNamePropertyPropertiesPropertyIDGetValidateBeforeCall(shortName, propertyID, _callback);
        Type localVarReturnType = new TypeToken<PropertyModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
