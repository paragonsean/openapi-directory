/*
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a single tenancy on a property structure. This class may              be considered to be the context of the tenancy strategy pattern. The              strategy is the tenancy service, that dictates the algorithm applied              to the tenancy. This class therefore holds the raw data of a tenancy,              and ignores any tenancy service (fully managed, let only) parameters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:08.730189-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TenancyModel {
  public static final String SERIALIZED_NAME_ADVERTISE_FROM = "AdvertiseFrom";
  @SerializedName(SERIALIZED_NAME_ADVERTISE_FROM)
  private OffsetDateTime advertiseFrom;

  public static final String SERIALIZED_NAME_AREA = "Area";
  @SerializedName(SERIALIZED_NAME_AREA)
  private String area;

  public static final String SERIALIZED_NAME_BOND_REQUIRED = "BondRequired";
  @SerializedName(SERIALIZED_NAME_BOND_REQUIRED)
  private Double bondRequired;

  public static final String SERIALIZED_NAME_BRANCH = "Branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_ETAG = "ETag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  /**
   * The property furnished type.
   */
  @JsonAdapter(FurnishedEnum.Adapter.class)
  public enum FurnishedEnum {
    UNFURNISHED("Unfurnished"),
    
    PART_FURNISHED("PartFurnished"),
    
    FURNISHED("Furnished");

    private String value;

    FurnishedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FurnishedEnum fromValue(String value) {
      for (FurnishedEnum b : FurnishedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FurnishedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FurnishedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FurnishedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FurnishedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FurnishedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FURNISHED = "Furnished";
  @SerializedName(SERIALIZED_NAME_FURNISHED)
  private FurnishedEnum furnished;

  public static final String SERIALIZED_NAME_GLOBAL_REFERENCE = "GlobalReference";
  @SerializedName(SERIALIZED_NAME_GLOBAL_REFERENCE)
  private String globalReference;

  public static final String SERIALIZED_NAME_IS_SHARE_PROPERTY = "IsShareProperty";
  @SerializedName(SERIALIZED_NAME_IS_SHARE_PROPERTY)
  private Boolean isShareProperty;

  public static final String SERIALIZED_NAME_IS_STUDENT_PROPERTY = "IsStudentProperty";
  @SerializedName(SERIALIZED_NAME_IS_STUDENT_PROPERTY)
  private Boolean isStudentProperty;

  public static final String SERIALIZED_NAME_IS_TENANCY_ADVERTISED = "IsTenancyAdvertised";
  @SerializedName(SERIALIZED_NAME_IS_TENANCY_ADVERTISED)
  private Boolean isTenancyAdvertised;

  public static final String SERIALIZED_NAME_IS_TENANCY_PROPOSED = "IsTenancyProposed";
  @SerializedName(SERIALIZED_NAME_IS_TENANCY_PROPOSED)
  private Boolean isTenancyProposed;

  public static final String SERIALIZED_NAME_MAXIMUM_TENANTS = "MaximumTenants";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_TENANTS)
  private Integer maximumTenants;

  public static final String SERIALIZED_NAME_MINIMUM_TENANTS = "MinimumTenants";
  @SerializedName(SERIALIZED_NAME_MINIMUM_TENANTS)
  private Integer minimumTenants;

  public static final String SERIALIZED_NAME_O_I_D = "OID";
  @SerializedName(SERIALIZED_NAME_O_I_D)
  private String OID;

  public static final String SERIALIZED_NAME_RENT_ADVERTISED = "RentAdvertised";
  @SerializedName(SERIALIZED_NAME_RENT_ADVERTISED)
  private Double rentAdvertised;

  public static final String SERIALIZED_NAME_RENT_RECURRENCE = "RentRecurrence";
  @SerializedName(SERIALIZED_NAME_RENT_RECURRENCE)
  private Integer rentRecurrence;

  /**
   * The tenancy rent schedule
   */
  @JsonAdapter(RentScheduleEnum.Adapter.class)
  public enum RentScheduleEnum {
    ONCE("Once"),
    
    DAILY("Daily"),
    
    WEEKLY("Weekly"),
    
    MONTHLY("Monthly"),
    
    YEARLY("Yearly");

    private String value;

    RentScheduleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RentScheduleEnum fromValue(String value) {
      for (RentScheduleEnum b : RentScheduleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RentScheduleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RentScheduleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RentScheduleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RentScheduleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RentScheduleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RENT_SCHEDULE = "RentSchedule";
  @SerializedName(SERIALIZED_NAME_RENT_SCHEDULE)
  private RentScheduleEnum rentSchedule;

  public static final String SERIALIZED_NAME_TENANCY_PROPERTY = "TenancyProperty";
  @SerializedName(SERIALIZED_NAME_TENANCY_PROPERTY)
  private String tenancyProperty;

  /**
   * Gets or Sets tenantSystemTypes
   */
  @JsonAdapter(TenantSystemTypesEnum.Adapter.class)
  public enum TenantSystemTypesEnum {
    EMPLOYED("Employed"),
    
    SELF_EMPLOYED("SelfEmployed"),
    
    UNEMPLOYED("Unemployed"),
    
    STUDENT("Student"),
    
    OWN_MEANS("OwnMeans"),
    
    RETIRED("Retired"),
    
    COMPANY("Company"),
    
    COUNCIL("Council");

    private String value;

    TenantSystemTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TenantSystemTypesEnum fromValue(String value) {
      for (TenantSystemTypesEnum b : TenantSystemTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TenantSystemTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TenantSystemTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TenantSystemTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TenantSystemTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TenantSystemTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TENANT_SYSTEM_TYPES = "TenantSystemTypes";
  @SerializedName(SERIALIZED_NAME_TENANT_SYSTEM_TYPES)
  private List<TenantSystemTypesEnum> tenantSystemTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERM_MAXIMUM = "TermMaximum";
  @SerializedName(SERIALIZED_NAME_TERM_MAXIMUM)
  private Integer termMaximum;

  public static final String SERIALIZED_NAME_TERM_MINIMUM = "TermMinimum";
  @SerializedName(SERIALIZED_NAME_TERM_MINIMUM)
  private Integer termMinimum;

  public static final String SERIALIZED_NAME_TERM_START = "TermStart";
  @SerializedName(SERIALIZED_NAME_TERM_START)
  private OffsetDateTime termStart;

  /**
   * Who&#39;s responsible for council tax bills.
   */
  @JsonAdapter(UtilityCouncilTaxEnum.Adapter.class)
  public enum UtilityCouncilTaxEnum {
    TENANT("Tenant"),
    
    LANDLORD("Landlord");

    private String value;

    UtilityCouncilTaxEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UtilityCouncilTaxEnum fromValue(String value) {
      for (UtilityCouncilTaxEnum b : UtilityCouncilTaxEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UtilityCouncilTaxEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UtilityCouncilTaxEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UtilityCouncilTaxEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UtilityCouncilTaxEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UtilityCouncilTaxEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UTILITY_COUNCIL_TAX = "UtilityCouncilTax";
  @SerializedName(SERIALIZED_NAME_UTILITY_COUNCIL_TAX)
  private UtilityCouncilTaxEnum utilityCouncilTax;

  /**
   * Who&#39;s responsible for electricity bills.
   */
  @JsonAdapter(UtilityElectricityEnum.Adapter.class)
  public enum UtilityElectricityEnum {
    TENANT("Tenant"),
    
    LANDLORD("Landlord");

    private String value;

    UtilityElectricityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UtilityElectricityEnum fromValue(String value) {
      for (UtilityElectricityEnum b : UtilityElectricityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UtilityElectricityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UtilityElectricityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UtilityElectricityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UtilityElectricityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UtilityElectricityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UTILITY_ELECTRICITY = "UtilityElectricity";
  @SerializedName(SERIALIZED_NAME_UTILITY_ELECTRICITY)
  private UtilityElectricityEnum utilityElectricity;

  /**
   * Who&#39;s responsible for Gas bills.
   */
  @JsonAdapter(UtilityGasEnum.Adapter.class)
  public enum UtilityGasEnum {
    TENANT("Tenant"),
    
    LANDLORD("Landlord");

    private String value;

    UtilityGasEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UtilityGasEnum fromValue(String value) {
      for (UtilityGasEnum b : UtilityGasEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UtilityGasEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UtilityGasEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UtilityGasEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UtilityGasEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UtilityGasEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UTILITY_GAS = "UtilityGas";
  @SerializedName(SERIALIZED_NAME_UTILITY_GAS)
  private UtilityGasEnum utilityGas;

  /**
   * Who&#39;s responsible for telephone bills.
   */
  @JsonAdapter(UtilityTelephoneEnum.Adapter.class)
  public enum UtilityTelephoneEnum {
    TENANT("Tenant"),
    
    LANDLORD("Landlord");

    private String value;

    UtilityTelephoneEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UtilityTelephoneEnum fromValue(String value) {
      for (UtilityTelephoneEnum b : UtilityTelephoneEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UtilityTelephoneEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UtilityTelephoneEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UtilityTelephoneEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UtilityTelephoneEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UtilityTelephoneEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UTILITY_TELEPHONE = "UtilityTelephone";
  @SerializedName(SERIALIZED_NAME_UTILITY_TELEPHONE)
  private UtilityTelephoneEnum utilityTelephone;

  /**
   * Who&#39;s responsible for water bills.
   */
  @JsonAdapter(UtilityWaterEnum.Adapter.class)
  public enum UtilityWaterEnum {
    TENANT("Tenant"),
    
    LANDLORD("Landlord");

    private String value;

    UtilityWaterEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UtilityWaterEnum fromValue(String value) {
      for (UtilityWaterEnum b : UtilityWaterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UtilityWaterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UtilityWaterEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UtilityWaterEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UtilityWaterEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UtilityWaterEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UTILITY_WATER = "UtilityWater";
  @SerializedName(SERIALIZED_NAME_UTILITY_WATER)
  private UtilityWaterEnum utilityWater;

  public TenancyModel() {
  }

  public TenancyModel advertiseFrom(OffsetDateTime advertiseFrom) {
    this.advertiseFrom = advertiseFrom;
    return this;
  }

  /**
   * The date to advertise this tenancy from.
   * @return advertiseFrom
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAdvertiseFrom() {
    return advertiseFrom;
  }

  public void setAdvertiseFrom(OffsetDateTime advertiseFrom) {
    this.advertiseFrom = advertiseFrom;
  }


  public TenancyModel area(String area) {
    this.area = area;
    return this;
  }

  /**
   * The area containing the instruction.
   * @return area
   */
  @javax.annotation.Nullable
  public String getArea() {
    return area;
  }

  public void setArea(String area) {
    this.area = area;
  }


  public TenancyModel bondRequired(Double bondRequired) {
    this.bondRequired = bondRequired;
    return this;
  }

  /**
   * The total bond required.
   * @return bondRequired
   */
  @javax.annotation.Nullable
  public Double getBondRequired() {
    return bondRequired;
  }

  public void setBondRequired(Double bondRequired) {
    this.bondRequired = bondRequired;
  }


  public TenancyModel branch(String branch) {
    this.branch = branch;
    return this;
  }

  /**
   * The branch the tenancy is assigned to..
   * @return branch
   */
  @javax.annotation.Nullable
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }


  public TenancyModel etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * A unique identifier defining the object and change revision.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public TenancyModel furnished(FurnishedEnum furnished) {
    this.furnished = furnished;
    return this;
  }

  /**
   * The property furnished type.
   * @return furnished
   */
  @javax.annotation.Nullable
  public FurnishedEnum getFurnished() {
    return furnished;
  }

  public void setFurnished(FurnishedEnum furnished) {
    this.furnished = furnished;
  }


  public TenancyModel globalReference(String globalReference) {
    this.globalReference = globalReference;
    return this;
  }

  /**
   * The global reference for a tenancy.
   * @return globalReference
   */
  @javax.annotation.Nullable
  public String getGlobalReference() {
    return globalReference;
  }

  public void setGlobalReference(String globalReference) {
    this.globalReference = globalReference;
  }


  public TenancyModel isShareProperty(Boolean isShareProperty) {
    this.isShareProperty = isShareProperty;
    return this;
  }

  /**
   * Is this property a shared property.
   * @return isShareProperty
   */
  @javax.annotation.Nullable
  public Boolean getIsShareProperty() {
    return isShareProperty;
  }

  public void setIsShareProperty(Boolean isShareProperty) {
    this.isShareProperty = isShareProperty;
  }


  public TenancyModel isStudentProperty(Boolean isStudentProperty) {
    this.isStudentProperty = isStudentProperty;
    return this;
  }

  /**
   * Is this property a student property.
   * @return isStudentProperty
   */
  @javax.annotation.Nullable
  public Boolean getIsStudentProperty() {
    return isStudentProperty;
  }

  public void setIsStudentProperty(Boolean isStudentProperty) {
    this.isStudentProperty = isStudentProperty;
  }


  public TenancyModel isTenancyAdvertised(Boolean isTenancyAdvertised) {
    this.isTenancyAdvertised = isTenancyAdvertised;
    return this;
  }

  /**
   * Gets a value indicating whether this tenancy is being advertised. Note              that this will only return true while the tenancy has a valid advertise              date. It will not return true in the proposed phase.
   * @return isTenancyAdvertised
   */
  @javax.annotation.Nullable
  public Boolean getIsTenancyAdvertised() {
    return isTenancyAdvertised;
  }

  public void setIsTenancyAdvertised(Boolean isTenancyAdvertised) {
    this.isTenancyAdvertised = isTenancyAdvertised;
  }


  public TenancyModel isTenancyProposed(Boolean isTenancyProposed) {
    this.isTenancyProposed = isTenancyProposed;
    return this;
  }

  /**
   * Is the tenancy a proposed tenancy?
   * @return isTenancyProposed
   */
  @javax.annotation.Nullable
  public Boolean getIsTenancyProposed() {
    return isTenancyProposed;
  }

  public void setIsTenancyProposed(Boolean isTenancyProposed) {
    this.isTenancyProposed = isTenancyProposed;
  }


  public TenancyModel maximumTenants(Integer maximumTenants) {
    this.maximumTenants = maximumTenants;
    return this;
  }

  /**
   * The maximum number of tenants to advertise for.
   * @return maximumTenants
   */
  @javax.annotation.Nullable
  public Integer getMaximumTenants() {
    return maximumTenants;
  }

  public void setMaximumTenants(Integer maximumTenants) {
    this.maximumTenants = maximumTenants;
  }


  public TenancyModel minimumTenants(Integer minimumTenants) {
    this.minimumTenants = minimumTenants;
    return this;
  }

  /**
   * The minimum number of tenants to advertise for.
   * @return minimumTenants
   */
  @javax.annotation.Nullable
  public Integer getMinimumTenants() {
    return minimumTenants;
  }

  public void setMinimumTenants(Integer minimumTenants) {
    this.minimumTenants = minimumTenants;
  }


  public TenancyModel OID(String OID) {
    this.OID = OID;
    return this;
  }

  /**
   * The unique Object ID (OID).
   * @return OID
   */
  @javax.annotation.Nullable
  public String getOID() {
    return OID;
  }

  public void setOID(String OID) {
    this.OID = OID;
  }


  public TenancyModel rentAdvertised(Double rentAdvertised) {
    this.rentAdvertised = rentAdvertised;
    return this;
  }

  /**
   * The advertised amount of rent for the property.
   * @return rentAdvertised
   */
  @javax.annotation.Nullable
  public Double getRentAdvertised() {
    return rentAdvertised;
  }

  public void setRentAdvertised(Double rentAdvertised) {
    this.rentAdvertised = rentAdvertised;
  }


  public TenancyModel rentRecurrence(Integer rentRecurrence) {
    this.rentRecurrence = rentRecurrence;
    return this;
  }

  /**
   * The rent schedule recurrence
   * @return rentRecurrence
   */
  @javax.annotation.Nullable
  public Integer getRentRecurrence() {
    return rentRecurrence;
  }

  public void setRentRecurrence(Integer rentRecurrence) {
    this.rentRecurrence = rentRecurrence;
  }


  public TenancyModel rentSchedule(RentScheduleEnum rentSchedule) {
    this.rentSchedule = rentSchedule;
    return this;
  }

  /**
   * The tenancy rent schedule
   * @return rentSchedule
   */
  @javax.annotation.Nullable
  public RentScheduleEnum getRentSchedule() {
    return rentSchedule;
  }

  public void setRentSchedule(RentScheduleEnum rentSchedule) {
    this.rentSchedule = rentSchedule;
  }


  public TenancyModel tenancyProperty(String tenancyProperty) {
    this.tenancyProperty = tenancyProperty;
    return this;
  }

  /**
   * The property linked to this tenancy.
   * @return tenancyProperty
   */
  @javax.annotation.Nullable
  public String getTenancyProperty() {
    return tenancyProperty;
  }

  public void setTenancyProperty(String tenancyProperty) {
    this.tenancyProperty = tenancyProperty;
  }


  public TenancyModel tenantSystemTypes(List<TenantSystemTypesEnum> tenantSystemTypes) {
    this.tenantSystemTypes = tenantSystemTypes;
    return this;
  }

  public TenancyModel addTenantSystemTypesItem(TenantSystemTypesEnum tenantSystemTypesItem) {
    if (this.tenantSystemTypes == null) {
      this.tenantSystemTypes = new ArrayList<>();
    }
    this.tenantSystemTypes.add(tenantSystemTypesItem);
    return this;
  }

  /**
   * The specific tenant type list, or empty if for all types.
   * @return tenantSystemTypes
   */
  @javax.annotation.Nullable
  public List<TenantSystemTypesEnum> getTenantSystemTypes() {
    return tenantSystemTypes;
  }

  public void setTenantSystemTypes(List<TenantSystemTypesEnum> tenantSystemTypes) {
    this.tenantSystemTypes = tenantSystemTypes;
  }


  public TenancyModel termMaximum(Integer termMaximum) {
    this.termMaximum = termMaximum;
    return this;
  }

  /**
   * The instruction maximum term.
   * @return termMaximum
   */
  @javax.annotation.Nullable
  public Integer getTermMaximum() {
    return termMaximum;
  }

  public void setTermMaximum(Integer termMaximum) {
    this.termMaximum = termMaximum;
  }


  public TenancyModel termMinimum(Integer termMinimum) {
    this.termMinimum = termMinimum;
    return this;
  }

  /**
   * The minimum term.
   * @return termMinimum
   */
  @javax.annotation.Nullable
  public Integer getTermMinimum() {
    return termMinimum;
  }

  public void setTermMinimum(Integer termMinimum) {
    this.termMinimum = termMinimum;
  }


  public TenancyModel termStart(OffsetDateTime termStart) {
    this.termStart = termStart;
    return this;
  }

  /**
   * The instruction start date.
   * @return termStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTermStart() {
    return termStart;
  }

  public void setTermStart(OffsetDateTime termStart) {
    this.termStart = termStart;
  }


  public TenancyModel utilityCouncilTax(UtilityCouncilTaxEnum utilityCouncilTax) {
    this.utilityCouncilTax = utilityCouncilTax;
    return this;
  }

  /**
   * Who&#39;s responsible for council tax bills.
   * @return utilityCouncilTax
   */
  @javax.annotation.Nullable
  public UtilityCouncilTaxEnum getUtilityCouncilTax() {
    return utilityCouncilTax;
  }

  public void setUtilityCouncilTax(UtilityCouncilTaxEnum utilityCouncilTax) {
    this.utilityCouncilTax = utilityCouncilTax;
  }


  public TenancyModel utilityElectricity(UtilityElectricityEnum utilityElectricity) {
    this.utilityElectricity = utilityElectricity;
    return this;
  }

  /**
   * Who&#39;s responsible for electricity bills.
   * @return utilityElectricity
   */
  @javax.annotation.Nullable
  public UtilityElectricityEnum getUtilityElectricity() {
    return utilityElectricity;
  }

  public void setUtilityElectricity(UtilityElectricityEnum utilityElectricity) {
    this.utilityElectricity = utilityElectricity;
  }


  public TenancyModel utilityGas(UtilityGasEnum utilityGas) {
    this.utilityGas = utilityGas;
    return this;
  }

  /**
   * Who&#39;s responsible for Gas bills.
   * @return utilityGas
   */
  @javax.annotation.Nullable
  public UtilityGasEnum getUtilityGas() {
    return utilityGas;
  }

  public void setUtilityGas(UtilityGasEnum utilityGas) {
    this.utilityGas = utilityGas;
  }


  public TenancyModel utilityTelephone(UtilityTelephoneEnum utilityTelephone) {
    this.utilityTelephone = utilityTelephone;
    return this;
  }

  /**
   * Who&#39;s responsible for telephone bills.
   * @return utilityTelephone
   */
  @javax.annotation.Nullable
  public UtilityTelephoneEnum getUtilityTelephone() {
    return utilityTelephone;
  }

  public void setUtilityTelephone(UtilityTelephoneEnum utilityTelephone) {
    this.utilityTelephone = utilityTelephone;
  }


  public TenancyModel utilityWater(UtilityWaterEnum utilityWater) {
    this.utilityWater = utilityWater;
    return this;
  }

  /**
   * Who&#39;s responsible for water bills.
   * @return utilityWater
   */
  @javax.annotation.Nullable
  public UtilityWaterEnum getUtilityWater() {
    return utilityWater;
  }

  public void setUtilityWater(UtilityWaterEnum utilityWater) {
    this.utilityWater = utilityWater;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TenancyModel tenancyModel = (TenancyModel) o;
    return Objects.equals(this.advertiseFrom, tenancyModel.advertiseFrom) &&
        Objects.equals(this.area, tenancyModel.area) &&
        Objects.equals(this.bondRequired, tenancyModel.bondRequired) &&
        Objects.equals(this.branch, tenancyModel.branch) &&
        Objects.equals(this.etag, tenancyModel.etag) &&
        Objects.equals(this.furnished, tenancyModel.furnished) &&
        Objects.equals(this.globalReference, tenancyModel.globalReference) &&
        Objects.equals(this.isShareProperty, tenancyModel.isShareProperty) &&
        Objects.equals(this.isStudentProperty, tenancyModel.isStudentProperty) &&
        Objects.equals(this.isTenancyAdvertised, tenancyModel.isTenancyAdvertised) &&
        Objects.equals(this.isTenancyProposed, tenancyModel.isTenancyProposed) &&
        Objects.equals(this.maximumTenants, tenancyModel.maximumTenants) &&
        Objects.equals(this.minimumTenants, tenancyModel.minimumTenants) &&
        Objects.equals(this.OID, tenancyModel.OID) &&
        Objects.equals(this.rentAdvertised, tenancyModel.rentAdvertised) &&
        Objects.equals(this.rentRecurrence, tenancyModel.rentRecurrence) &&
        Objects.equals(this.rentSchedule, tenancyModel.rentSchedule) &&
        Objects.equals(this.tenancyProperty, tenancyModel.tenancyProperty) &&
        Objects.equals(this.tenantSystemTypes, tenancyModel.tenantSystemTypes) &&
        Objects.equals(this.termMaximum, tenancyModel.termMaximum) &&
        Objects.equals(this.termMinimum, tenancyModel.termMinimum) &&
        Objects.equals(this.termStart, tenancyModel.termStart) &&
        Objects.equals(this.utilityCouncilTax, tenancyModel.utilityCouncilTax) &&
        Objects.equals(this.utilityElectricity, tenancyModel.utilityElectricity) &&
        Objects.equals(this.utilityGas, tenancyModel.utilityGas) &&
        Objects.equals(this.utilityTelephone, tenancyModel.utilityTelephone) &&
        Objects.equals(this.utilityWater, tenancyModel.utilityWater);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertiseFrom, area, bondRequired, branch, etag, furnished, globalReference, isShareProperty, isStudentProperty, isTenancyAdvertised, isTenancyProposed, maximumTenants, minimumTenants, OID, rentAdvertised, rentRecurrence, rentSchedule, tenancyProperty, tenantSystemTypes, termMaximum, termMinimum, termStart, utilityCouncilTax, utilityElectricity, utilityGas, utilityTelephone, utilityWater);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TenancyModel {\n");
    sb.append("    advertiseFrom: ").append(toIndentedString(advertiseFrom)).append("\n");
    sb.append("    area: ").append(toIndentedString(area)).append("\n");
    sb.append("    bondRequired: ").append(toIndentedString(bondRequired)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    furnished: ").append(toIndentedString(furnished)).append("\n");
    sb.append("    globalReference: ").append(toIndentedString(globalReference)).append("\n");
    sb.append("    isShareProperty: ").append(toIndentedString(isShareProperty)).append("\n");
    sb.append("    isStudentProperty: ").append(toIndentedString(isStudentProperty)).append("\n");
    sb.append("    isTenancyAdvertised: ").append(toIndentedString(isTenancyAdvertised)).append("\n");
    sb.append("    isTenancyProposed: ").append(toIndentedString(isTenancyProposed)).append("\n");
    sb.append("    maximumTenants: ").append(toIndentedString(maximumTenants)).append("\n");
    sb.append("    minimumTenants: ").append(toIndentedString(minimumTenants)).append("\n");
    sb.append("    OID: ").append(toIndentedString(OID)).append("\n");
    sb.append("    rentAdvertised: ").append(toIndentedString(rentAdvertised)).append("\n");
    sb.append("    rentRecurrence: ").append(toIndentedString(rentRecurrence)).append("\n");
    sb.append("    rentSchedule: ").append(toIndentedString(rentSchedule)).append("\n");
    sb.append("    tenancyProperty: ").append(toIndentedString(tenancyProperty)).append("\n");
    sb.append("    tenantSystemTypes: ").append(toIndentedString(tenantSystemTypes)).append("\n");
    sb.append("    termMaximum: ").append(toIndentedString(termMaximum)).append("\n");
    sb.append("    termMinimum: ").append(toIndentedString(termMinimum)).append("\n");
    sb.append("    termStart: ").append(toIndentedString(termStart)).append("\n");
    sb.append("    utilityCouncilTax: ").append(toIndentedString(utilityCouncilTax)).append("\n");
    sb.append("    utilityElectricity: ").append(toIndentedString(utilityElectricity)).append("\n");
    sb.append("    utilityGas: ").append(toIndentedString(utilityGas)).append("\n");
    sb.append("    utilityTelephone: ").append(toIndentedString(utilityTelephone)).append("\n");
    sb.append("    utilityWater: ").append(toIndentedString(utilityWater)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdvertiseFrom");
    openapiFields.add("Area");
    openapiFields.add("BondRequired");
    openapiFields.add("Branch");
    openapiFields.add("ETag");
    openapiFields.add("Furnished");
    openapiFields.add("GlobalReference");
    openapiFields.add("IsShareProperty");
    openapiFields.add("IsStudentProperty");
    openapiFields.add("IsTenancyAdvertised");
    openapiFields.add("IsTenancyProposed");
    openapiFields.add("MaximumTenants");
    openapiFields.add("MinimumTenants");
    openapiFields.add("OID");
    openapiFields.add("RentAdvertised");
    openapiFields.add("RentRecurrence");
    openapiFields.add("RentSchedule");
    openapiFields.add("TenancyProperty");
    openapiFields.add("TenantSystemTypes");
    openapiFields.add("TermMaximum");
    openapiFields.add("TermMinimum");
    openapiFields.add("TermStart");
    openapiFields.add("UtilityCouncilTax");
    openapiFields.add("UtilityElectricity");
    openapiFields.add("UtilityGas");
    openapiFields.add("UtilityTelephone");
    openapiFields.add("UtilityWater");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TenancyModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TenancyModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TenancyModel is not found in the empty JSON string", TenancyModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TenancyModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TenancyModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Area") != null && !jsonObj.get("Area").isJsonNull()) && !jsonObj.get("Area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Area").toString()));
      }
      if ((jsonObj.get("Branch") != null && !jsonObj.get("Branch").isJsonNull()) && !jsonObj.get("Branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Branch").toString()));
      }
      if ((jsonObj.get("ETag") != null && !jsonObj.get("ETag").isJsonNull()) && !jsonObj.get("ETag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ETag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ETag").toString()));
      }
      if ((jsonObj.get("Furnished") != null && !jsonObj.get("Furnished").isJsonNull()) && !jsonObj.get("Furnished").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Furnished` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Furnished").toString()));
      }
      // validate the optional field `Furnished`
      if (jsonObj.get("Furnished") != null && !jsonObj.get("Furnished").isJsonNull()) {
        FurnishedEnum.validateJsonElement(jsonObj.get("Furnished"));
      }
      if ((jsonObj.get("GlobalReference") != null && !jsonObj.get("GlobalReference").isJsonNull()) && !jsonObj.get("GlobalReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GlobalReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GlobalReference").toString()));
      }
      if ((jsonObj.get("OID") != null && !jsonObj.get("OID").isJsonNull()) && !jsonObj.get("OID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OID").toString()));
      }
      if ((jsonObj.get("RentSchedule") != null && !jsonObj.get("RentSchedule").isJsonNull()) && !jsonObj.get("RentSchedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RentSchedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RentSchedule").toString()));
      }
      // validate the optional field `RentSchedule`
      if (jsonObj.get("RentSchedule") != null && !jsonObj.get("RentSchedule").isJsonNull()) {
        RentScheduleEnum.validateJsonElement(jsonObj.get("RentSchedule"));
      }
      if ((jsonObj.get("TenancyProperty") != null && !jsonObj.get("TenancyProperty").isJsonNull()) && !jsonObj.get("TenancyProperty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TenancyProperty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TenancyProperty").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("TenantSystemTypes") != null && !jsonObj.get("TenantSystemTypes").isJsonNull() && !jsonObj.get("TenantSystemTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `TenantSystemTypes` to be an array in the JSON string but got `%s`", jsonObj.get("TenantSystemTypes").toString()));
      }
      if ((jsonObj.get("UtilityCouncilTax") != null && !jsonObj.get("UtilityCouncilTax").isJsonNull()) && !jsonObj.get("UtilityCouncilTax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UtilityCouncilTax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UtilityCouncilTax").toString()));
      }
      // validate the optional field `UtilityCouncilTax`
      if (jsonObj.get("UtilityCouncilTax") != null && !jsonObj.get("UtilityCouncilTax").isJsonNull()) {
        UtilityCouncilTaxEnum.validateJsonElement(jsonObj.get("UtilityCouncilTax"));
      }
      if ((jsonObj.get("UtilityElectricity") != null && !jsonObj.get("UtilityElectricity").isJsonNull()) && !jsonObj.get("UtilityElectricity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UtilityElectricity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UtilityElectricity").toString()));
      }
      // validate the optional field `UtilityElectricity`
      if (jsonObj.get("UtilityElectricity") != null && !jsonObj.get("UtilityElectricity").isJsonNull()) {
        UtilityElectricityEnum.validateJsonElement(jsonObj.get("UtilityElectricity"));
      }
      if ((jsonObj.get("UtilityGas") != null && !jsonObj.get("UtilityGas").isJsonNull()) && !jsonObj.get("UtilityGas").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UtilityGas` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UtilityGas").toString()));
      }
      // validate the optional field `UtilityGas`
      if (jsonObj.get("UtilityGas") != null && !jsonObj.get("UtilityGas").isJsonNull()) {
        UtilityGasEnum.validateJsonElement(jsonObj.get("UtilityGas"));
      }
      if ((jsonObj.get("UtilityTelephone") != null && !jsonObj.get("UtilityTelephone").isJsonNull()) && !jsonObj.get("UtilityTelephone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UtilityTelephone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UtilityTelephone").toString()));
      }
      // validate the optional field `UtilityTelephone`
      if (jsonObj.get("UtilityTelephone") != null && !jsonObj.get("UtilityTelephone").isJsonNull()) {
        UtilityTelephoneEnum.validateJsonElement(jsonObj.get("UtilityTelephone"));
      }
      if ((jsonObj.get("UtilityWater") != null && !jsonObj.get("UtilityWater").isJsonNull()) && !jsonObj.get("UtilityWater").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UtilityWater` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UtilityWater").toString()));
      }
      // validate the optional field `UtilityWater`
      if (jsonObj.get("UtilityWater") != null && !jsonObj.get("UtilityWater").isJsonNull()) {
        UtilityWaterEnum.validateJsonElement(jsonObj.get("UtilityWater"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TenancyModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TenancyModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TenancyModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TenancyModel.class));

       return (TypeAdapter<T>) new TypeAdapter<TenancyModel>() {
           @Override
           public void write(JsonWriter out, TenancyModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TenancyModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TenancyModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TenancyModel
   * @throws IOException if the JSON string is invalid with respect to TenancyModel
   */
  public static TenancyModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TenancyModel.class);
  }

  /**
   * Convert an instance of TenancyModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

