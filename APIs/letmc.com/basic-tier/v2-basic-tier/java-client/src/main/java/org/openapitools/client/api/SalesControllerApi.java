/*
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PhotoModelResults;
import org.openapitools.client.model.PropertyRoomModelResults;
import org.openapitools.client.model.SalesFeatureModelResults;
import org.openapitools.client.model.SalesFeatureTypeModel;
import org.openapitools.client.model.SalesFeatureTypeModelResults;
import org.openapitools.client.model.SalesInstructionModel;
import org.openapitools.client.model.SalesInstructionModelResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SalesControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SalesControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SalesControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for salesControllerGetAdvertisedSales
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param onlyDevelopement Show only development properties? (required)
     * @param onlyInvestements Show only investment properties? (required)
     * @param minimumPrice The minimum price to search for (optional)
     * @param maximumPrice The maximum price to search for (optional)
     * @param minimumBeds The minimum beds to search for (optional)
     * @param minimumBathrooms The minimum bathrooms to search for (optional)
     * @param minimumEnsuites The minimum ensuite bathrooms to search for (optional)
     * @param minimumToilets The minimum toilets to search for (optional)
     * @param minimumReception The minimum reception rooms to search for (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesControllerGetAdvertisedSalesCall(String shortName, String branchID, Integer offset, Integer count, Boolean onlyDevelopement, Boolean onlyInvestements, Double minimumPrice, Double maximumPrice, Integer minimumBeds, Integer minimumBathrooms, Integer minimumEnsuites, Integer minimumToilets, Integer minimumReception, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/sales/advertisedsales"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branchID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branchID", branchID));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (onlyDevelopement != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyDevelopement", onlyDevelopement));
        }

        if (onlyInvestements != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyInvestements", onlyInvestements));
        }

        if (minimumPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimumPrice", minimumPrice));
        }

        if (maximumPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximumPrice", maximumPrice));
        }

        if (minimumBeds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimumBeds", minimumBeds));
        }

        if (minimumBathrooms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimumBathrooms", minimumBathrooms));
        }

        if (minimumEnsuites != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimumEnsuites", minimumEnsuites));
        }

        if (minimumToilets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimumToilets", minimumToilets));
        }

        if (minimumReception != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimumReception", minimumReception));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesControllerGetAdvertisedSalesValidateBeforeCall(String shortName, String branchID, Integer offset, Integer count, Boolean onlyDevelopement, Boolean onlyInvestements, Double minimumPrice, Double maximumPrice, Integer minimumBeds, Integer minimumBathrooms, Integer minimumEnsuites, Integer minimumToilets, Integer minimumReception, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling salesControllerGetAdvertisedSales(Async)");
        }

        // verify the required parameter 'branchID' is set
        if (branchID == null) {
            throw new ApiException("Missing the required parameter 'branchID' when calling salesControllerGetAdvertisedSales(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling salesControllerGetAdvertisedSales(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling salesControllerGetAdvertisedSales(Async)");
        }

        // verify the required parameter 'onlyDevelopement' is set
        if (onlyDevelopement == null) {
            throw new ApiException("Missing the required parameter 'onlyDevelopement' when calling salesControllerGetAdvertisedSales(Async)");
        }

        // verify the required parameter 'onlyInvestements' is set
        if (onlyInvestements == null) {
            throw new ApiException("Missing the required parameter 'onlyInvestements' when calling salesControllerGetAdvertisedSales(Async)");
        }

        return salesControllerGetAdvertisedSalesCall(shortName, branchID, offset, count, onlyDevelopement, onlyInvestements, minimumPrice, maximumPrice, minimumBeds, minimumBathrooms, minimumEnsuites, minimumToilets, minimumReception, _callback);

    }

    /**
     * Search all sales properties available given a range of search criteria
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param onlyDevelopement Show only development properties? (required)
     * @param onlyInvestements Show only investment properties? (required)
     * @param minimumPrice The minimum price to search for (optional)
     * @param maximumPrice The maximum price to search for (optional)
     * @param minimumBeds The minimum beds to search for (optional)
     * @param minimumBathrooms The minimum bathrooms to search for (optional)
     * @param minimumEnsuites The minimum ensuite bathrooms to search for (optional)
     * @param minimumToilets The minimum toilets to search for (optional)
     * @param minimumReception The minimum reception rooms to search for (optional)
     * @return SalesInstructionModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SalesInstructionModelResults salesControllerGetAdvertisedSales(String shortName, String branchID, Integer offset, Integer count, Boolean onlyDevelopement, Boolean onlyInvestements, Double minimumPrice, Double maximumPrice, Integer minimumBeds, Integer minimumBathrooms, Integer minimumEnsuites, Integer minimumToilets, Integer minimumReception) throws ApiException {
        ApiResponse<SalesInstructionModelResults> localVarResp = salesControllerGetAdvertisedSalesWithHttpInfo(shortName, branchID, offset, count, onlyDevelopement, onlyInvestements, minimumPrice, maximumPrice, minimumBeds, minimumBathrooms, minimumEnsuites, minimumToilets, minimumReception);
        return localVarResp.getData();
    }

    /**
     * Search all sales properties available given a range of search criteria
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param onlyDevelopement Show only development properties? (required)
     * @param onlyInvestements Show only investment properties? (required)
     * @param minimumPrice The minimum price to search for (optional)
     * @param maximumPrice The maximum price to search for (optional)
     * @param minimumBeds The minimum beds to search for (optional)
     * @param minimumBathrooms The minimum bathrooms to search for (optional)
     * @param minimumEnsuites The minimum ensuite bathrooms to search for (optional)
     * @param minimumToilets The minimum toilets to search for (optional)
     * @param minimumReception The minimum reception rooms to search for (optional)
     * @return ApiResponse&lt;SalesInstructionModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesInstructionModelResults> salesControllerGetAdvertisedSalesWithHttpInfo(String shortName, String branchID, Integer offset, Integer count, Boolean onlyDevelopement, Boolean onlyInvestements, Double minimumPrice, Double maximumPrice, Integer minimumBeds, Integer minimumBathrooms, Integer minimumEnsuites, Integer minimumToilets, Integer minimumReception) throws ApiException {
        okhttp3.Call localVarCall = salesControllerGetAdvertisedSalesValidateBeforeCall(shortName, branchID, offset, count, onlyDevelopement, onlyInvestements, minimumPrice, maximumPrice, minimumBeds, minimumBathrooms, minimumEnsuites, minimumToilets, minimumReception, null);
        Type localVarReturnType = new TypeToken<SalesInstructionModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search all sales properties available given a range of search criteria (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param onlyDevelopement Show only development properties? (required)
     * @param onlyInvestements Show only investment properties? (required)
     * @param minimumPrice The minimum price to search for (optional)
     * @param maximumPrice The maximum price to search for (optional)
     * @param minimumBeds The minimum beds to search for (optional)
     * @param minimumBathrooms The minimum bathrooms to search for (optional)
     * @param minimumEnsuites The minimum ensuite bathrooms to search for (optional)
     * @param minimumToilets The minimum toilets to search for (optional)
     * @param minimumReception The minimum reception rooms to search for (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesControllerGetAdvertisedSalesAsync(String shortName, String branchID, Integer offset, Integer count, Boolean onlyDevelopement, Boolean onlyInvestements, Double minimumPrice, Double maximumPrice, Integer minimumBeds, Integer minimumBathrooms, Integer minimumEnsuites, Integer minimumToilets, Integer minimumReception, final ApiCallback<SalesInstructionModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesControllerGetAdvertisedSalesValidateBeforeCall(shortName, branchID, offset, count, onlyDevelopement, onlyInvestements, minimumPrice, maximumPrice, minimumBeds, minimumBathrooms, minimumEnsuites, minimumToilets, minimumReception, _callback);
        Type localVarReturnType = new TypeToken<SalesInstructionModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesControllerGetEER
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesControllerGetEERCall(String shortName, String salesInstructionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/sales/reports/eer/{salesInstructionID}"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "salesInstructionID" + "}", localVarApiClient.escapeString(salesInstructionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesControllerGetEERValidateBeforeCall(String shortName, String salesInstructionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling salesControllerGetEER(Async)");
        }

        // verify the required parameter 'salesInstructionID' is set
        if (salesInstructionID == null) {
            throw new ApiException("Missing the required parameter 'salesInstructionID' when calling salesControllerGetEER(Async)");
        }

        return salesControllerGetEERCall(shortName, salesInstructionID, _callback);

    }

    /**
     * Downloads the energy efficiency report (EER) graph for a sales instruction
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object salesControllerGetEER(String shortName, String salesInstructionID) throws ApiException {
        ApiResponse<Object> localVarResp = salesControllerGetEERWithHttpInfo(shortName, salesInstructionID);
        return localVarResp.getData();
    }

    /**
     * Downloads the energy efficiency report (EER) graph for a sales instruction
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> salesControllerGetEERWithHttpInfo(String shortName, String salesInstructionID) throws ApiException {
        okhttp3.Call localVarCall = salesControllerGetEERValidateBeforeCall(shortName, salesInstructionID, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Downloads the energy efficiency report (EER) graph for a sales instruction (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesControllerGetEERAsync(String shortName, String salesInstructionID, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesControllerGetEERValidateBeforeCall(shortName, salesInstructionID, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesControllerGetEIR
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesControllerGetEIRCall(String shortName, String salesInstructionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/sales/reports/eir/{salesInstructionID}"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "salesInstructionID" + "}", localVarApiClient.escapeString(salesInstructionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesControllerGetEIRValidateBeforeCall(String shortName, String salesInstructionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling salesControllerGetEIR(Async)");
        }

        // verify the required parameter 'salesInstructionID' is set
        if (salesInstructionID == null) {
            throw new ApiException("Missing the required parameter 'salesInstructionID' when calling salesControllerGetEIR(Async)");
        }

        return salesControllerGetEIRCall(shortName, salesInstructionID, _callback);

    }

    /**
     * Downloads the energy efficiency report (EIR) graph for a sales instruction
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object salesControllerGetEIR(String shortName, String salesInstructionID) throws ApiException {
        ApiResponse<Object> localVarResp = salesControllerGetEIRWithHttpInfo(shortName, salesInstructionID);
        return localVarResp.getData();
    }

    /**
     * Downloads the energy efficiency report (EIR) graph for a sales instruction
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> salesControllerGetEIRWithHttpInfo(String shortName, String salesInstructionID) throws ApiException {
        okhttp3.Call localVarCall = salesControllerGetEIRValidateBeforeCall(shortName, salesInstructionID, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Downloads the energy efficiency report (EIR) graph for a sales instruction (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesControllerGetEIRAsync(String shortName, String salesInstructionID, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesControllerGetEIRValidateBeforeCall(shortName, salesInstructionID, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesControllerGetSalesInstructionsFeatures
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesControllerGetSalesInstructionsFeaturesCall(String shortName, String salesInstructionID, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/sales/salesinstructions/{salesInstructionID}/features"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "salesInstructionID" + "}", localVarApiClient.escapeString(salesInstructionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesControllerGetSalesInstructionsFeaturesValidateBeforeCall(String shortName, String salesInstructionID, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling salesControllerGetSalesInstructionsFeatures(Async)");
        }

        // verify the required parameter 'salesInstructionID' is set
        if (salesInstructionID == null) {
            throw new ApiException("Missing the required parameter 'salesInstructionID' when calling salesControllerGetSalesInstructionsFeatures(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling salesControllerGetSalesInstructionsFeatures(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling salesControllerGetSalesInstructionsFeatures(Async)");
        }

        return salesControllerGetSalesInstructionsFeaturesCall(shortName, salesInstructionID, offset, count, _callback);

    }

    /**
     * A collection of all features linked to a sales instruction
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return SalesFeatureModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SalesFeatureModelResults salesControllerGetSalesInstructionsFeatures(String shortName, String salesInstructionID, Integer offset, Integer count) throws ApiException {
        ApiResponse<SalesFeatureModelResults> localVarResp = salesControllerGetSalesInstructionsFeaturesWithHttpInfo(shortName, salesInstructionID, offset, count);
        return localVarResp.getData();
    }

    /**
     * A collection of all features linked to a sales instruction
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;SalesFeatureModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesFeatureModelResults> salesControllerGetSalesInstructionsFeaturesWithHttpInfo(String shortName, String salesInstructionID, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = salesControllerGetSalesInstructionsFeaturesValidateBeforeCall(shortName, salesInstructionID, offset, count, null);
        Type localVarReturnType = new TypeToken<SalesFeatureModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A collection of all features linked to a sales instruction (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesControllerGetSalesInstructionsFeaturesAsync(String shortName, String salesInstructionID, Integer offset, Integer count, final ApiCallback<SalesFeatureModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesControllerGetSalesInstructionsFeaturesValidateBeforeCall(shortName, salesInstructionID, offset, count, _callback);
        Type localVarReturnType = new TypeToken<SalesFeatureModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesControllerGetSalesInstructionsFloorPlans
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesControllerGetSalesInstructionsFloorPlansCall(String shortName, String salesInstructionID, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/sales/salesinstructions/{salesInstructionID}/floorplans"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "salesInstructionID" + "}", localVarApiClient.escapeString(salesInstructionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesControllerGetSalesInstructionsFloorPlansValidateBeforeCall(String shortName, String salesInstructionID, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling salesControllerGetSalesInstructionsFloorPlans(Async)");
        }

        // verify the required parameter 'salesInstructionID' is set
        if (salesInstructionID == null) {
            throw new ApiException("Missing the required parameter 'salesInstructionID' when calling salesControllerGetSalesInstructionsFloorPlans(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling salesControllerGetSalesInstructionsFloorPlans(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling salesControllerGetSalesInstructionsFloorPlans(Async)");
        }

        return salesControllerGetSalesInstructionsFloorPlansCall(shortName, salesInstructionID, offset, count, _callback);

    }

    /**
     * A collection of floor plans linked to an instruction
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return PhotoModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PhotoModelResults salesControllerGetSalesInstructionsFloorPlans(String shortName, String salesInstructionID, Integer offset, Integer count) throws ApiException {
        ApiResponse<PhotoModelResults> localVarResp = salesControllerGetSalesInstructionsFloorPlansWithHttpInfo(shortName, salesInstructionID, offset, count);
        return localVarResp.getData();
    }

    /**
     * A collection of floor plans linked to an instruction
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;PhotoModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PhotoModelResults> salesControllerGetSalesInstructionsFloorPlansWithHttpInfo(String shortName, String salesInstructionID, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = salesControllerGetSalesInstructionsFloorPlansValidateBeforeCall(shortName, salesInstructionID, offset, count, null);
        Type localVarReturnType = new TypeToken<PhotoModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A collection of floor plans linked to an instruction (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesControllerGetSalesInstructionsFloorPlansAsync(String shortName, String salesInstructionID, Integer offset, Integer count, final ApiCallback<PhotoModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesControllerGetSalesInstructionsFloorPlansValidateBeforeCall(shortName, salesInstructionID, offset, count, _callback);
        Type localVarReturnType = new TypeToken<PhotoModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesControllerGetSalesInstructionsPhotos
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesControllerGetSalesInstructionsPhotosCall(String shortName, String salesInstructionID, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/sales/salesinstructions/{salesInstructionID}/photos"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "salesInstructionID" + "}", localVarApiClient.escapeString(salesInstructionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesControllerGetSalesInstructionsPhotosValidateBeforeCall(String shortName, String salesInstructionID, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling salesControllerGetSalesInstructionsPhotos(Async)");
        }

        // verify the required parameter 'salesInstructionID' is set
        if (salesInstructionID == null) {
            throw new ApiException("Missing the required parameter 'salesInstructionID' when calling salesControllerGetSalesInstructionsPhotos(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling salesControllerGetSalesInstructionsPhotos(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling salesControllerGetSalesInstructionsPhotos(Async)");
        }

        return salesControllerGetSalesInstructionsPhotosCall(shortName, salesInstructionID, offset, count, _callback);

    }

    /**
     * A collection of photos linked to an instruction
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return PhotoModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PhotoModelResults salesControllerGetSalesInstructionsPhotos(String shortName, String salesInstructionID, Integer offset, Integer count) throws ApiException {
        ApiResponse<PhotoModelResults> localVarResp = salesControllerGetSalesInstructionsPhotosWithHttpInfo(shortName, salesInstructionID, offset, count);
        return localVarResp.getData();
    }

    /**
     * A collection of photos linked to an instruction
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;PhotoModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PhotoModelResults> salesControllerGetSalesInstructionsPhotosWithHttpInfo(String shortName, String salesInstructionID, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = salesControllerGetSalesInstructionsPhotosValidateBeforeCall(shortName, salesInstructionID, offset, count, null);
        Type localVarReturnType = new TypeToken<PhotoModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A collection of photos linked to an instruction (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesControllerGetSalesInstructionsPhotosAsync(String shortName, String salesInstructionID, Integer offset, Integer count, final ApiCallback<PhotoModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesControllerGetSalesInstructionsPhotosValidateBeforeCall(shortName, salesInstructionID, offset, count, _callback);
        Type localVarReturnType = new TypeToken<PhotoModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for salesControllerGetSalesInstructionsRooms
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesControllerGetSalesInstructionsRoomsCall(String shortName, String salesInstructionID, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/sales/salesinstructions/{salesInstructionID}/rooms"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "salesInstructionID" + "}", localVarApiClient.escapeString(salesInstructionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call salesControllerGetSalesInstructionsRoomsValidateBeforeCall(String shortName, String salesInstructionID, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling salesControllerGetSalesInstructionsRooms(Async)");
        }

        // verify the required parameter 'salesInstructionID' is set
        if (salesInstructionID == null) {
            throw new ApiException("Missing the required parameter 'salesInstructionID' when calling salesControllerGetSalesInstructionsRooms(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling salesControllerGetSalesInstructionsRooms(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling salesControllerGetSalesInstructionsRooms(Async)");
        }

        return salesControllerGetSalesInstructionsRoomsCall(shortName, salesInstructionID, offset, count, _callback);

    }

    /**
     * A collection of rooms linked to an instruction
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return PropertyRoomModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PropertyRoomModelResults salesControllerGetSalesInstructionsRooms(String shortName, String salesInstructionID, Integer offset, Integer count) throws ApiException {
        ApiResponse<PropertyRoomModelResults> localVarResp = salesControllerGetSalesInstructionsRoomsWithHttpInfo(shortName, salesInstructionID, offset, count);
        return localVarResp.getData();
    }

    /**
     * A collection of rooms linked to an instruction
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;PropertyRoomModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyRoomModelResults> salesControllerGetSalesInstructionsRoomsWithHttpInfo(String shortName, String salesInstructionID, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = salesControllerGetSalesInstructionsRoomsValidateBeforeCall(shortName, salesInstructionID, offset, count, null);
        Type localVarReturnType = new TypeToken<PropertyRoomModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A collection of rooms linked to an instruction (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call salesControllerGetSalesInstructionsRoomsAsync(String shortName, String salesInstructionID, Integer offset, Integer count, final ApiCallback<PropertyRoomModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = salesControllerGetSalesInstructionsRoomsValidateBeforeCall(shortName, salesInstructionID, offset, count, _callback);
        Type localVarReturnType = new TypeToken<PropertyRoomModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2Tier2ShortNameSalesSalesfeaturetypesGet
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameSalesSalesfeaturetypesGetCall(String shortName, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/sales/salesfeaturetypes"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2Tier2ShortNameSalesSalesfeaturetypesGetValidateBeforeCall(String shortName, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling v2Tier2ShortNameSalesSalesfeaturetypesGet(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling v2Tier2ShortNameSalesSalesfeaturetypesGet(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling v2Tier2ShortNameSalesSalesfeaturetypesGet(Async)");
        }

        return v2Tier2ShortNameSalesSalesfeaturetypesGetCall(shortName, offset, count, _callback);

    }

    /**
     * A collection of all sales feature types linked to a company
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return SalesFeatureTypeModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SalesFeatureTypeModelResults v2Tier2ShortNameSalesSalesfeaturetypesGet(String shortName, Integer offset, Integer count) throws ApiException {
        ApiResponse<SalesFeatureTypeModelResults> localVarResp = v2Tier2ShortNameSalesSalesfeaturetypesGetWithHttpInfo(shortName, offset, count);
        return localVarResp.getData();
    }

    /**
     * A collection of all sales feature types linked to a company
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;SalesFeatureTypeModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesFeatureTypeModelResults> v2Tier2ShortNameSalesSalesfeaturetypesGetWithHttpInfo(String shortName, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = v2Tier2ShortNameSalesSalesfeaturetypesGetValidateBeforeCall(shortName, offset, count, null);
        Type localVarReturnType = new TypeToken<SalesFeatureTypeModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A collection of all sales feature types linked to a company (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameSalesSalesfeaturetypesGetAsync(String shortName, Integer offset, Integer count, final ApiCallback<SalesFeatureTypeModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2Tier2ShortNameSalesSalesfeaturetypesGetValidateBeforeCall(shortName, offset, count, _callback);
        Type localVarReturnType = new TypeToken<SalesFeatureTypeModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2Tier2ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGet
     * @param shortName The unique client short-name (required)
     * @param salesFeatureTypeID The unique ID of the SalesFeatureType (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetCall(String shortName, String salesFeatureTypeID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/sales/salesfeaturetypes/{salesFeatureTypeID}"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "salesFeatureTypeID" + "}", localVarApiClient.escapeString(salesFeatureTypeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2Tier2ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetValidateBeforeCall(String shortName, String salesFeatureTypeID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling v2Tier2ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGet(Async)");
        }

        // verify the required parameter 'salesFeatureTypeID' is set
        if (salesFeatureTypeID == null) {
            throw new ApiException("Missing the required parameter 'salesFeatureTypeID' when calling v2Tier2ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGet(Async)");
        }

        return v2Tier2ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetCall(shortName, salesFeatureTypeID, _callback);

    }

    /**
     * Get a specific sales feature type given its unique Object ID (OID)
     * 
     * @param shortName The unique client short-name (required)
     * @param salesFeatureTypeID The unique ID of the SalesFeatureType (required)
     * @return SalesFeatureTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SalesFeatureTypeModel v2Tier2ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGet(String shortName, String salesFeatureTypeID) throws ApiException {
        ApiResponse<SalesFeatureTypeModel> localVarResp = v2Tier2ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetWithHttpInfo(shortName, salesFeatureTypeID);
        return localVarResp.getData();
    }

    /**
     * Get a specific sales feature type given its unique Object ID (OID)
     * 
     * @param shortName The unique client short-name (required)
     * @param salesFeatureTypeID The unique ID of the SalesFeatureType (required)
     * @return ApiResponse&lt;SalesFeatureTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesFeatureTypeModel> v2Tier2ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetWithHttpInfo(String shortName, String salesFeatureTypeID) throws ApiException {
        okhttp3.Call localVarCall = v2Tier2ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetValidateBeforeCall(shortName, salesFeatureTypeID, null);
        Type localVarReturnType = new TypeToken<SalesFeatureTypeModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific sales feature type given its unique Object ID (OID) (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param salesFeatureTypeID The unique ID of the SalesFeatureType (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetAsync(String shortName, String salesFeatureTypeID, final ApiCallback<SalesFeatureTypeModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2Tier2ShortNameSalesSalesfeaturetypesSalesFeatureTypeIDGetValidateBeforeCall(shortName, salesFeatureTypeID, _callback);
        Type localVarReturnType = new TypeToken<SalesFeatureTypeModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2Tier2ShortNameSalesSalesinstructionsGet
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameSalesSalesinstructionsGetCall(String shortName, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/sales/salesinstructions"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2Tier2ShortNameSalesSalesinstructionsGetValidateBeforeCall(String shortName, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling v2Tier2ShortNameSalesSalesinstructionsGet(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling v2Tier2ShortNameSalesSalesinstructionsGet(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling v2Tier2ShortNameSalesSalesinstructionsGet(Async)");
        }

        return v2Tier2ShortNameSalesSalesinstructionsGetCall(shortName, offset, count, _callback);

    }

    /**
     * A collection of all sales instructions linked to a company
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return SalesInstructionModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SalesInstructionModelResults v2Tier2ShortNameSalesSalesinstructionsGet(String shortName, Integer offset, Integer count) throws ApiException {
        ApiResponse<SalesInstructionModelResults> localVarResp = v2Tier2ShortNameSalesSalesinstructionsGetWithHttpInfo(shortName, offset, count);
        return localVarResp.getData();
    }

    /**
     * A collection of all sales instructions linked to a company
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;SalesInstructionModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesInstructionModelResults> v2Tier2ShortNameSalesSalesinstructionsGetWithHttpInfo(String shortName, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = v2Tier2ShortNameSalesSalesinstructionsGetValidateBeforeCall(shortName, offset, count, null);
        Type localVarReturnType = new TypeToken<SalesInstructionModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A collection of all sales instructions linked to a company (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameSalesSalesinstructionsGetAsync(String shortName, Integer offset, Integer count, final ApiCallback<SalesInstructionModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2Tier2ShortNameSalesSalesinstructionsGetValidateBeforeCall(shortName, offset, count, _callback);
        Type localVarReturnType = new TypeToken<SalesInstructionModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2Tier2ShortNameSalesSalesinstructionsSalesInstructionIDGet
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameSalesSalesinstructionsSalesInstructionIDGetCall(String shortName, String salesInstructionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/sales/salesinstructions/{salesInstructionID}"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "salesInstructionID" + "}", localVarApiClient.escapeString(salesInstructionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2Tier2ShortNameSalesSalesinstructionsSalesInstructionIDGetValidateBeforeCall(String shortName, String salesInstructionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling v2Tier2ShortNameSalesSalesinstructionsSalesInstructionIDGet(Async)");
        }

        // verify the required parameter 'salesInstructionID' is set
        if (salesInstructionID == null) {
            throw new ApiException("Missing the required parameter 'salesInstructionID' when calling v2Tier2ShortNameSalesSalesinstructionsSalesInstructionIDGet(Async)");
        }

        return v2Tier2ShortNameSalesSalesinstructionsSalesInstructionIDGetCall(shortName, salesInstructionID, _callback);

    }

    /**
     * Get a specific sales instruction given its unique Object ID (OID)
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @return SalesInstructionModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SalesInstructionModel v2Tier2ShortNameSalesSalesinstructionsSalesInstructionIDGet(String shortName, String salesInstructionID) throws ApiException {
        ApiResponse<SalesInstructionModel> localVarResp = v2Tier2ShortNameSalesSalesinstructionsSalesInstructionIDGetWithHttpInfo(shortName, salesInstructionID);
        return localVarResp.getData();
    }

    /**
     * Get a specific sales instruction given its unique Object ID (OID)
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @return ApiResponse&lt;SalesInstructionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesInstructionModel> v2Tier2ShortNameSalesSalesinstructionsSalesInstructionIDGetWithHttpInfo(String shortName, String salesInstructionID) throws ApiException {
        okhttp3.Call localVarCall = v2Tier2ShortNameSalesSalesinstructionsSalesInstructionIDGetValidateBeforeCall(shortName, salesInstructionID, null);
        Type localVarReturnType = new TypeToken<SalesInstructionModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific sales instruction given its unique Object ID (OID) (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param salesInstructionID The unique ID of the SalesInstruction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameSalesSalesinstructionsSalesInstructionIDGetAsync(String shortName, String salesInstructionID, final ApiCallback<SalesInstructionModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2Tier2ShortNameSalesSalesinstructionsSalesInstructionIDGetValidateBeforeCall(shortName, salesInstructionID, _callback);
        Type localVarReturnType = new TypeToken<SalesInstructionModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
