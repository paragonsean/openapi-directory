/*
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DiaryAllocationModel;
import org.openapitools.client.model.DiaryAllocationModelResults;
import org.openapitools.client.model.DiaryAppointmentModel;
import org.openapitools.client.model.DiaryAppointmentModelResults;
import org.openapitools.client.model.DiaryAppointmentTypeModel;
import org.openapitools.client.model.DiaryAppointmentTypeModelResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DiaryControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DiaryControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DiaryControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGet
     * @param shortName The unique client short-name (required)
     * @param diaryAllocationID The unique ID of the DiaryAllocation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetCall(String shortName, String diaryAllocationID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/diary/allocations/{diaryAllocationID}"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "diaryAllocationID" + "}", localVarApiClient.escapeString(diaryAllocationID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetValidateBeforeCall(String shortName, String diaryAllocationID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGet(Async)");
        }

        // verify the required parameter 'diaryAllocationID' is set
        if (diaryAllocationID == null) {
            throw new ApiException("Missing the required parameter 'diaryAllocationID' when calling v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGet(Async)");
        }

        return v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetCall(shortName, diaryAllocationID, _callback);

    }

    /**
     * Get a specific diary allocation given its unique Object ID (OID)
     * 
     * @param shortName The unique client short-name (required)
     * @param diaryAllocationID The unique ID of the DiaryAllocation (required)
     * @return DiaryAllocationModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiaryAllocationModel v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGet(String shortName, String diaryAllocationID) throws ApiException {
        ApiResponse<DiaryAllocationModel> localVarResp = v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetWithHttpInfo(shortName, diaryAllocationID);
        return localVarResp.getData();
    }

    /**
     * Get a specific diary allocation given its unique Object ID (OID)
     * 
     * @param shortName The unique client short-name (required)
     * @param diaryAllocationID The unique ID of the DiaryAllocation (required)
     * @return ApiResponse&lt;DiaryAllocationModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiaryAllocationModel> v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetWithHttpInfo(String shortName, String diaryAllocationID) throws ApiException {
        okhttp3.Call localVarCall = v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetValidateBeforeCall(shortName, diaryAllocationID, null);
        Type localVarReturnType = new TypeToken<DiaryAllocationModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific diary allocation given its unique Object ID (OID) (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param diaryAllocationID The unique ID of the DiaryAllocation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetAsync(String shortName, String diaryAllocationID, final ApiCallback<DiaryAllocationModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2Tier2ShortNameDiaryAllocationsDiaryAllocationIDGetValidateBeforeCall(shortName, diaryAllocationID, _callback);
        Type localVarReturnType = new TypeToken<DiaryAllocationModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2Tier2ShortNameDiaryAllocationsGet
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameDiaryAllocationsGetCall(String shortName, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/diary/allocations"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2Tier2ShortNameDiaryAllocationsGetValidateBeforeCall(String shortName, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling v2Tier2ShortNameDiaryAllocationsGet(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling v2Tier2ShortNameDiaryAllocationsGet(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling v2Tier2ShortNameDiaryAllocationsGet(Async)");
        }

        return v2Tier2ShortNameDiaryAllocationsGetCall(shortName, offset, count, _callback);

    }

    /**
     * A collection of all diary allocations
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return DiaryAllocationModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiaryAllocationModelResults v2Tier2ShortNameDiaryAllocationsGet(String shortName, Integer offset, Integer count) throws ApiException {
        ApiResponse<DiaryAllocationModelResults> localVarResp = v2Tier2ShortNameDiaryAllocationsGetWithHttpInfo(shortName, offset, count);
        return localVarResp.getData();
    }

    /**
     * A collection of all diary allocations
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;DiaryAllocationModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiaryAllocationModelResults> v2Tier2ShortNameDiaryAllocationsGetWithHttpInfo(String shortName, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = v2Tier2ShortNameDiaryAllocationsGetValidateBeforeCall(shortName, offset, count, null);
        Type localVarReturnType = new TypeToken<DiaryAllocationModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A collection of all diary allocations (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameDiaryAllocationsGetAsync(String shortName, Integer offset, Integer count, final ApiCallback<DiaryAllocationModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2Tier2ShortNameDiaryAllocationsGetValidateBeforeCall(shortName, offset, count, _callback);
        Type localVarReturnType = new TypeToken<DiaryAllocationModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGet
     * @param shortName The unique client short-name (required)
     * @param diaryAppointmentID The unique ID of the DiaryAppointment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetCall(String shortName, String diaryAppointmentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/diary/appointments/{diaryAppointmentID}"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "diaryAppointmentID" + "}", localVarApiClient.escapeString(diaryAppointmentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetValidateBeforeCall(String shortName, String diaryAppointmentID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGet(Async)");
        }

        // verify the required parameter 'diaryAppointmentID' is set
        if (diaryAppointmentID == null) {
            throw new ApiException("Missing the required parameter 'diaryAppointmentID' when calling v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGet(Async)");
        }

        return v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetCall(shortName, diaryAppointmentID, _callback);

    }

    /**
     * Get a specific diary appointment given its unique Object ID (OID)
     * 
     * @param shortName The unique client short-name (required)
     * @param diaryAppointmentID The unique ID of the DiaryAppointment (required)
     * @return DiaryAppointmentModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiaryAppointmentModel v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGet(String shortName, String diaryAppointmentID) throws ApiException {
        ApiResponse<DiaryAppointmentModel> localVarResp = v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetWithHttpInfo(shortName, diaryAppointmentID);
        return localVarResp.getData();
    }

    /**
     * Get a specific diary appointment given its unique Object ID (OID)
     * 
     * @param shortName The unique client short-name (required)
     * @param diaryAppointmentID The unique ID of the DiaryAppointment (required)
     * @return ApiResponse&lt;DiaryAppointmentModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiaryAppointmentModel> v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetWithHttpInfo(String shortName, String diaryAppointmentID) throws ApiException {
        okhttp3.Call localVarCall = v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetValidateBeforeCall(shortName, diaryAppointmentID, null);
        Type localVarReturnType = new TypeToken<DiaryAppointmentModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific diary appointment given its unique Object ID (OID) (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param diaryAppointmentID The unique ID of the DiaryAppointment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetAsync(String shortName, String diaryAppointmentID, final ApiCallback<DiaryAppointmentModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2Tier2ShortNameDiaryAppointmentsDiaryAppointmentIDGetValidateBeforeCall(shortName, diaryAppointmentID, _callback);
        Type localVarReturnType = new TypeToken<DiaryAppointmentModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2Tier2ShortNameDiaryAppointmentsGet
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameDiaryAppointmentsGetCall(String shortName, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/diary/appointments"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2Tier2ShortNameDiaryAppointmentsGetValidateBeforeCall(String shortName, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling v2Tier2ShortNameDiaryAppointmentsGet(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling v2Tier2ShortNameDiaryAppointmentsGet(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling v2Tier2ShortNameDiaryAppointmentsGet(Async)");
        }

        return v2Tier2ShortNameDiaryAppointmentsGetCall(shortName, offset, count, _callback);

    }

    /**
     * A collection of all diary appointments
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return DiaryAppointmentModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiaryAppointmentModelResults v2Tier2ShortNameDiaryAppointmentsGet(String shortName, Integer offset, Integer count) throws ApiException {
        ApiResponse<DiaryAppointmentModelResults> localVarResp = v2Tier2ShortNameDiaryAppointmentsGetWithHttpInfo(shortName, offset, count);
        return localVarResp.getData();
    }

    /**
     * A collection of all diary appointments
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;DiaryAppointmentModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiaryAppointmentModelResults> v2Tier2ShortNameDiaryAppointmentsGetWithHttpInfo(String shortName, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = v2Tier2ShortNameDiaryAppointmentsGetValidateBeforeCall(shortName, offset, count, null);
        Type localVarReturnType = new TypeToken<DiaryAppointmentModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A collection of all diary appointments (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameDiaryAppointmentsGetAsync(String shortName, Integer offset, Integer count, final ApiCallback<DiaryAppointmentModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2Tier2ShortNameDiaryAppointmentsGetValidateBeforeCall(shortName, offset, count, _callback);
        Type localVarReturnType = new TypeToken<DiaryAppointmentModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGet
     * @param shortName The unique client short-name (required)
     * @param diaryAppointmentTypeID The unique ID of the DiaryAppointmentType (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetCall(String shortName, String diaryAppointmentTypeID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/diary/appointmenttypes/{diaryAppointmentTypeID}"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "diaryAppointmentTypeID" + "}", localVarApiClient.escapeString(diaryAppointmentTypeID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetValidateBeforeCall(String shortName, String diaryAppointmentTypeID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGet(Async)");
        }

        // verify the required parameter 'diaryAppointmentTypeID' is set
        if (diaryAppointmentTypeID == null) {
            throw new ApiException("Missing the required parameter 'diaryAppointmentTypeID' when calling v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGet(Async)");
        }

        return v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetCall(shortName, diaryAppointmentTypeID, _callback);

    }

    /**
     * Get a specific diary appointment type given its unique Object ID (OID)
     * 
     * @param shortName The unique client short-name (required)
     * @param diaryAppointmentTypeID The unique ID of the DiaryAppointmentType (required)
     * @return DiaryAppointmentTypeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiaryAppointmentTypeModel v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGet(String shortName, String diaryAppointmentTypeID) throws ApiException {
        ApiResponse<DiaryAppointmentTypeModel> localVarResp = v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetWithHttpInfo(shortName, diaryAppointmentTypeID);
        return localVarResp.getData();
    }

    /**
     * Get a specific diary appointment type given its unique Object ID (OID)
     * 
     * @param shortName The unique client short-name (required)
     * @param diaryAppointmentTypeID The unique ID of the DiaryAppointmentType (required)
     * @return ApiResponse&lt;DiaryAppointmentTypeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiaryAppointmentTypeModel> v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetWithHttpInfo(String shortName, String diaryAppointmentTypeID) throws ApiException {
        okhttp3.Call localVarCall = v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetValidateBeforeCall(shortName, diaryAppointmentTypeID, null);
        Type localVarReturnType = new TypeToken<DiaryAppointmentTypeModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific diary appointment type given its unique Object ID (OID) (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param diaryAppointmentTypeID The unique ID of the DiaryAppointmentType (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetAsync(String shortName, String diaryAppointmentTypeID, final ApiCallback<DiaryAppointmentTypeModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2Tier2ShortNameDiaryAppointmenttypesDiaryAppointmentTypeIDGetValidateBeforeCall(shortName, diaryAppointmentTypeID, _callback);
        Type localVarReturnType = new TypeToken<DiaryAppointmentTypeModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2Tier2ShortNameDiaryAppointmenttypesGet
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameDiaryAppointmenttypesGetCall(String shortName, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/diary/appointmenttypes"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2Tier2ShortNameDiaryAppointmenttypesGetValidateBeforeCall(String shortName, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling v2Tier2ShortNameDiaryAppointmenttypesGet(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling v2Tier2ShortNameDiaryAppointmenttypesGet(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling v2Tier2ShortNameDiaryAppointmenttypesGet(Async)");
        }

        return v2Tier2ShortNameDiaryAppointmenttypesGetCall(shortName, offset, count, _callback);

    }

    /**
     * A collection of all diary appointment types
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return DiaryAppointmentTypeModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiaryAppointmentTypeModelResults v2Tier2ShortNameDiaryAppointmenttypesGet(String shortName, Integer offset, Integer count) throws ApiException {
        ApiResponse<DiaryAppointmentTypeModelResults> localVarResp = v2Tier2ShortNameDiaryAppointmenttypesGetWithHttpInfo(shortName, offset, count);
        return localVarResp.getData();
    }

    /**
     * A collection of all diary appointment types
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;DiaryAppointmentTypeModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiaryAppointmentTypeModelResults> v2Tier2ShortNameDiaryAppointmenttypesGetWithHttpInfo(String shortName, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = v2Tier2ShortNameDiaryAppointmenttypesGetValidateBeforeCall(shortName, offset, count, null);
        Type localVarReturnType = new TypeToken<DiaryAppointmentTypeModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A collection of all diary appointment types (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameDiaryAppointmenttypesGetAsync(String shortName, Integer offset, Integer count, final ApiCallback<DiaryAppointmentTypeModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2Tier2ShortNameDiaryAppointmenttypesGetValidateBeforeCall(shortName, offset, count, _callback);
        Type localVarReturnType = new TypeToken<DiaryAppointmentTypeModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
