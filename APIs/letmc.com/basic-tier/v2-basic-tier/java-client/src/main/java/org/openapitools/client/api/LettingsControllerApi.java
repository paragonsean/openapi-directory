/*
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.TenancyModel;
import org.openapitools.client.model.TenancyModelResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LettingsControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LettingsControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LettingsControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for lettingsControllerGetAdvertised
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param areaID The unique ID of the Area (optional)
     * @param rentMinimum The minimum advertised rent to search for (optional)
     * @param rentMaximum The maximum advertised rent to search for (optional)
     * @param maximumTenants The maximum number of tenants a property can accommodate (optional)
     * @param wantSharedProperties Search for shared properties? (optional)
     * @param wantStudentProperties Search for student properties? (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lettingsControllerGetAdvertisedCall(String shortName, String branchID, Integer offset, Integer count, String areaID, Double rentMinimum, Double rentMaximum, Integer maximumTenants, Boolean wantSharedProperties, Boolean wantStudentProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/lettings/advertised"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branchID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branchID", branchID));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (areaID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("areaID", areaID));
        }

        if (rentMinimum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rentMinimum", rentMinimum));
        }

        if (rentMaximum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rentMaximum", rentMaximum));
        }

        if (maximumTenants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximumTenants", maximumTenants));
        }

        if (wantSharedProperties != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wantSharedProperties", wantSharedProperties));
        }

        if (wantStudentProperties != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wantStudentProperties", wantStudentProperties));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lettingsControllerGetAdvertisedValidateBeforeCall(String shortName, String branchID, Integer offset, Integer count, String areaID, Double rentMinimum, Double rentMaximum, Integer maximumTenants, Boolean wantSharedProperties, Boolean wantStudentProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling lettingsControllerGetAdvertised(Async)");
        }

        // verify the required parameter 'branchID' is set
        if (branchID == null) {
            throw new ApiException("Missing the required parameter 'branchID' when calling lettingsControllerGetAdvertised(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling lettingsControllerGetAdvertised(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling lettingsControllerGetAdvertised(Async)");
        }

        return lettingsControllerGetAdvertisedCall(shortName, branchID, offset, count, areaID, rentMinimum, rentMaximum, maximumTenants, wantSharedProperties, wantStudentProperties, _callback);

    }

    /**
     * Search all properties available for rent given a range of search criteria.
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param areaID The unique ID of the Area (optional)
     * @param rentMinimum The minimum advertised rent to search for (optional)
     * @param rentMaximum The maximum advertised rent to search for (optional)
     * @param maximumTenants The maximum number of tenants a property can accommodate (optional)
     * @param wantSharedProperties Search for shared properties? (optional)
     * @param wantStudentProperties Search for student properties? (optional)
     * @return TenancyModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TenancyModelResults lettingsControllerGetAdvertised(String shortName, String branchID, Integer offset, Integer count, String areaID, Double rentMinimum, Double rentMaximum, Integer maximumTenants, Boolean wantSharedProperties, Boolean wantStudentProperties) throws ApiException {
        ApiResponse<TenancyModelResults> localVarResp = lettingsControllerGetAdvertisedWithHttpInfo(shortName, branchID, offset, count, areaID, rentMinimum, rentMaximum, maximumTenants, wantSharedProperties, wantStudentProperties);
        return localVarResp.getData();
    }

    /**
     * Search all properties available for rent given a range of search criteria.
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param areaID The unique ID of the Area (optional)
     * @param rentMinimum The minimum advertised rent to search for (optional)
     * @param rentMaximum The maximum advertised rent to search for (optional)
     * @param maximumTenants The maximum number of tenants a property can accommodate (optional)
     * @param wantSharedProperties Search for shared properties? (optional)
     * @param wantStudentProperties Search for student properties? (optional)
     * @return ApiResponse&lt;TenancyModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TenancyModelResults> lettingsControllerGetAdvertisedWithHttpInfo(String shortName, String branchID, Integer offset, Integer count, String areaID, Double rentMinimum, Double rentMaximum, Integer maximumTenants, Boolean wantSharedProperties, Boolean wantStudentProperties) throws ApiException {
        okhttp3.Call localVarCall = lettingsControllerGetAdvertisedValidateBeforeCall(shortName, branchID, offset, count, areaID, rentMinimum, rentMaximum, maximumTenants, wantSharedProperties, wantStudentProperties, null);
        Type localVarReturnType = new TypeToken<TenancyModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search all properties available for rent given a range of search criteria. (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param areaID The unique ID of the Area (optional)
     * @param rentMinimum The minimum advertised rent to search for (optional)
     * @param rentMaximum The maximum advertised rent to search for (optional)
     * @param maximumTenants The maximum number of tenants a property can accommodate (optional)
     * @param wantSharedProperties Search for shared properties? (optional)
     * @param wantStudentProperties Search for student properties? (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lettingsControllerGetAdvertisedAsync(String shortName, String branchID, Integer offset, Integer count, String areaID, Double rentMinimum, Double rentMaximum, Integer maximumTenants, Boolean wantSharedProperties, Boolean wantStudentProperties, final ApiCallback<TenancyModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = lettingsControllerGetAdvertisedValidateBeforeCall(shortName, branchID, offset, count, areaID, rentMinimum, rentMaximum, maximumTenants, wantSharedProperties, wantStudentProperties, _callback);
        Type localVarReturnType = new TypeToken<TenancyModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lettingsControllerGetAdvertisedBetweenDates
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param rangeStartDate The date to search from (required)
     * @param rangeEndDate The date to search to (required)
     * @param areaID The unique ID of the Area (optional)
     * @param rentMinimum The minimum advertised rent to search for (optional)
     * @param rentMaximum The maximum advertised rent to search for (optional)
     * @param maximumTenants The maximum number of tenants a property can accommodate (optional)
     * @param wantSharedProperties Search for shared properties? (optional)
     * @param wantStudentProperties Search for student properties? (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lettingsControllerGetAdvertisedBetweenDatesCall(String shortName, String branchID, Integer offset, Integer count, OffsetDateTime rangeStartDate, OffsetDateTime rangeEndDate, String areaID, Double rentMinimum, Double rentMaximum, Integer maximumTenants, Boolean wantSharedProperties, Boolean wantStudentProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/lettings/advertisedbetweendates"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branchID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branchID", branchID));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (rangeStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rangeStartDate", rangeStartDate));
        }

        if (rangeEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rangeEndDate", rangeEndDate));
        }

        if (areaID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("areaID", areaID));
        }

        if (rentMinimum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rentMinimum", rentMinimum));
        }

        if (rentMaximum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rentMaximum", rentMaximum));
        }

        if (maximumTenants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maximumTenants", maximumTenants));
        }

        if (wantSharedProperties != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wantSharedProperties", wantSharedProperties));
        }

        if (wantStudentProperties != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wantStudentProperties", wantStudentProperties));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lettingsControllerGetAdvertisedBetweenDatesValidateBeforeCall(String shortName, String branchID, Integer offset, Integer count, OffsetDateTime rangeStartDate, OffsetDateTime rangeEndDate, String areaID, Double rentMinimum, Double rentMaximum, Integer maximumTenants, Boolean wantSharedProperties, Boolean wantStudentProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling lettingsControllerGetAdvertisedBetweenDates(Async)");
        }

        // verify the required parameter 'branchID' is set
        if (branchID == null) {
            throw new ApiException("Missing the required parameter 'branchID' when calling lettingsControllerGetAdvertisedBetweenDates(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling lettingsControllerGetAdvertisedBetweenDates(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling lettingsControllerGetAdvertisedBetweenDates(Async)");
        }

        // verify the required parameter 'rangeStartDate' is set
        if (rangeStartDate == null) {
            throw new ApiException("Missing the required parameter 'rangeStartDate' when calling lettingsControllerGetAdvertisedBetweenDates(Async)");
        }

        // verify the required parameter 'rangeEndDate' is set
        if (rangeEndDate == null) {
            throw new ApiException("Missing the required parameter 'rangeEndDate' when calling lettingsControllerGetAdvertisedBetweenDates(Async)");
        }

        return lettingsControllerGetAdvertisedBetweenDatesCall(shortName, branchID, offset, count, rangeStartDate, rangeEndDate, areaID, rentMinimum, rentMaximum, maximumTenants, wantSharedProperties, wantStudentProperties, _callback);

    }

    /**
     * Search all properties available for rent given a range of search criteria and dates.
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param rangeStartDate The date to search from (required)
     * @param rangeEndDate The date to search to (required)
     * @param areaID The unique ID of the Area (optional)
     * @param rentMinimum The minimum advertised rent to search for (optional)
     * @param rentMaximum The maximum advertised rent to search for (optional)
     * @param maximumTenants The maximum number of tenants a property can accommodate (optional)
     * @param wantSharedProperties Search for shared properties? (optional)
     * @param wantStudentProperties Search for student properties? (optional)
     * @return TenancyModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TenancyModelResults lettingsControllerGetAdvertisedBetweenDates(String shortName, String branchID, Integer offset, Integer count, OffsetDateTime rangeStartDate, OffsetDateTime rangeEndDate, String areaID, Double rentMinimum, Double rentMaximum, Integer maximumTenants, Boolean wantSharedProperties, Boolean wantStudentProperties) throws ApiException {
        ApiResponse<TenancyModelResults> localVarResp = lettingsControllerGetAdvertisedBetweenDatesWithHttpInfo(shortName, branchID, offset, count, rangeStartDate, rangeEndDate, areaID, rentMinimum, rentMaximum, maximumTenants, wantSharedProperties, wantStudentProperties);
        return localVarResp.getData();
    }

    /**
     * Search all properties available for rent given a range of search criteria and dates.
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param rangeStartDate The date to search from (required)
     * @param rangeEndDate The date to search to (required)
     * @param areaID The unique ID of the Area (optional)
     * @param rentMinimum The minimum advertised rent to search for (optional)
     * @param rentMaximum The maximum advertised rent to search for (optional)
     * @param maximumTenants The maximum number of tenants a property can accommodate (optional)
     * @param wantSharedProperties Search for shared properties? (optional)
     * @param wantStudentProperties Search for student properties? (optional)
     * @return ApiResponse&lt;TenancyModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TenancyModelResults> lettingsControllerGetAdvertisedBetweenDatesWithHttpInfo(String shortName, String branchID, Integer offset, Integer count, OffsetDateTime rangeStartDate, OffsetDateTime rangeEndDate, String areaID, Double rentMinimum, Double rentMaximum, Integer maximumTenants, Boolean wantSharedProperties, Boolean wantStudentProperties) throws ApiException {
        okhttp3.Call localVarCall = lettingsControllerGetAdvertisedBetweenDatesValidateBeforeCall(shortName, branchID, offset, count, rangeStartDate, rangeEndDate, areaID, rentMinimum, rentMaximum, maximumTenants, wantSharedProperties, wantStudentProperties, null);
        Type localVarReturnType = new TypeToken<TenancyModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search all properties available for rent given a range of search criteria and dates. (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param rangeStartDate The date to search from (required)
     * @param rangeEndDate The date to search to (required)
     * @param areaID The unique ID of the Area (optional)
     * @param rentMinimum The minimum advertised rent to search for (optional)
     * @param rentMaximum The maximum advertised rent to search for (optional)
     * @param maximumTenants The maximum number of tenants a property can accommodate (optional)
     * @param wantSharedProperties Search for shared properties? (optional)
     * @param wantStudentProperties Search for student properties? (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lettingsControllerGetAdvertisedBetweenDatesAsync(String shortName, String branchID, Integer offset, Integer count, OffsetDateTime rangeStartDate, OffsetDateTime rangeEndDate, String areaID, Double rentMinimum, Double rentMaximum, Integer maximumTenants, Boolean wantSharedProperties, Boolean wantStudentProperties, final ApiCallback<TenancyModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = lettingsControllerGetAdvertisedBetweenDatesValidateBeforeCall(shortName, branchID, offset, count, rangeStartDate, rangeEndDate, areaID, rentMinimum, rentMaximum, maximumTenants, wantSharedProperties, wantStudentProperties, _callback);
        Type localVarReturnType = new TypeToken<TenancyModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lettingsControllerGetTenancyBrochure
     * @param shortName The unique client short-name (required)
     * @param tenancyID The unique ID of the tenancy (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lettingsControllerGetTenancyBrochureCall(String shortName, String tenancyID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/lettings/tenancies/{tenancyID}/brochure"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "tenancyID" + "}", localVarApiClient.escapeString(tenancyID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lettingsControllerGetTenancyBrochureValidateBeforeCall(String shortName, String tenancyID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling lettingsControllerGetTenancyBrochure(Async)");
        }

        // verify the required parameter 'tenancyID' is set
        if (tenancyID == null) {
            throw new ApiException("Missing the required parameter 'tenancyID' when calling lettingsControllerGetTenancyBrochure(Async)");
        }

        return lettingsControllerGetTenancyBrochureCall(shortName, tenancyID, _callback);

    }

    /**
     * Downloads the brochure relating to the latest advertised rental of a property
     * 
     * @param shortName The unique client short-name (required)
     * @param tenancyID The unique ID of the tenancy (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object lettingsControllerGetTenancyBrochure(String shortName, String tenancyID) throws ApiException {
        ApiResponse<Object> localVarResp = lettingsControllerGetTenancyBrochureWithHttpInfo(shortName, tenancyID);
        return localVarResp.getData();
    }

    /**
     * Downloads the brochure relating to the latest advertised rental of a property
     * 
     * @param shortName The unique client short-name (required)
     * @param tenancyID The unique ID of the tenancy (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> lettingsControllerGetTenancyBrochureWithHttpInfo(String shortName, String tenancyID) throws ApiException {
        okhttp3.Call localVarCall = lettingsControllerGetTenancyBrochureValidateBeforeCall(shortName, tenancyID, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Downloads the brochure relating to the latest advertised rental of a property (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param tenancyID The unique ID of the tenancy (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lettingsControllerGetTenancyBrochureAsync(String shortName, String tenancyID, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = lettingsControllerGetTenancyBrochureValidateBeforeCall(shortName, tenancyID, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2Tier2ShortNameLettingsTenanciesGet
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameLettingsTenanciesGetCall(String shortName, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/lettings/tenancies"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2Tier2ShortNameLettingsTenanciesGetValidateBeforeCall(String shortName, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling v2Tier2ShortNameLettingsTenanciesGet(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling v2Tier2ShortNameLettingsTenanciesGet(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling v2Tier2ShortNameLettingsTenanciesGet(Async)");
        }

        return v2Tier2ShortNameLettingsTenanciesGetCall(shortName, offset, count, _callback);

    }

    /**
     * A collection of all the company&#39;s tenancies
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return TenancyModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TenancyModelResults v2Tier2ShortNameLettingsTenanciesGet(String shortName, Integer offset, Integer count) throws ApiException {
        ApiResponse<TenancyModelResults> localVarResp = v2Tier2ShortNameLettingsTenanciesGetWithHttpInfo(shortName, offset, count);
        return localVarResp.getData();
    }

    /**
     * A collection of all the company&#39;s tenancies
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;TenancyModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TenancyModelResults> v2Tier2ShortNameLettingsTenanciesGetWithHttpInfo(String shortName, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = v2Tier2ShortNameLettingsTenanciesGetValidateBeforeCall(shortName, offset, count, null);
        Type localVarReturnType = new TypeToken<TenancyModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A collection of all the company&#39;s tenancies (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameLettingsTenanciesGetAsync(String shortName, Integer offset, Integer count, final ApiCallback<TenancyModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2Tier2ShortNameLettingsTenanciesGetValidateBeforeCall(shortName, offset, count, _callback);
        Type localVarReturnType = new TypeToken<TenancyModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2Tier2ShortNameLettingsTenanciesTenancyIDGet
     * @param shortName The unique client short-name (required)
     * @param tenancyID The unique ID of the Tenancy (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameLettingsTenanciesTenancyIDGetCall(String shortName, String tenancyID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/tier2/{shortName}/lettings/tenancies/{tenancyID}"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "tenancyID" + "}", localVarApiClient.escapeString(tenancyID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2Tier2ShortNameLettingsTenanciesTenancyIDGetValidateBeforeCall(String shortName, String tenancyID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling v2Tier2ShortNameLettingsTenanciesTenancyIDGet(Async)");
        }

        // verify the required parameter 'tenancyID' is set
        if (tenancyID == null) {
            throw new ApiException("Missing the required parameter 'tenancyID' when calling v2Tier2ShortNameLettingsTenanciesTenancyIDGet(Async)");
        }

        return v2Tier2ShortNameLettingsTenanciesTenancyIDGetCall(shortName, tenancyID, _callback);

    }

    /**
     * Get a specific tenancy given its unique Object ID (OID)
     * 
     * @param shortName The unique client short-name (required)
     * @param tenancyID The unique ID of the Tenancy (required)
     * @return TenancyModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TenancyModel v2Tier2ShortNameLettingsTenanciesTenancyIDGet(String shortName, String tenancyID) throws ApiException {
        ApiResponse<TenancyModel> localVarResp = v2Tier2ShortNameLettingsTenanciesTenancyIDGetWithHttpInfo(shortName, tenancyID);
        return localVarResp.getData();
    }

    /**
     * Get a specific tenancy given its unique Object ID (OID)
     * 
     * @param shortName The unique client short-name (required)
     * @param tenancyID The unique ID of the Tenancy (required)
     * @return ApiResponse&lt;TenancyModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TenancyModel> v2Tier2ShortNameLettingsTenanciesTenancyIDGetWithHttpInfo(String shortName, String tenancyID) throws ApiException {
        okhttp3.Call localVarCall = v2Tier2ShortNameLettingsTenanciesTenancyIDGetValidateBeforeCall(shortName, tenancyID, null);
        Type localVarReturnType = new TypeToken<TenancyModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific tenancy given its unique Object ID (OID) (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param tenancyID The unique ID of the Tenancy (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2Tier2ShortNameLettingsTenanciesTenancyIDGetAsync(String shortName, String tenancyID, final ApiCallback<TenancyModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2Tier2ShortNameLettingsTenanciesTenancyIDGetValidateBeforeCall(shortName, tenancyID, _callback);
        Type localVarReturnType = new TypeToken<TenancyModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
