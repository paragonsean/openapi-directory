/*
 * LetMC Api V2, Basic (Tier 2)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-basic-tier
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The search code for the ApplicationCompany storage object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:08.730189-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompanyModel {
  public static final String SERIALIZED_NAME_COMPANY_NAME = "CompanyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_COMPANY_REGISTRATION = "CompanyRegistration";
  @SerializedName(SERIALIZED_NAME_COMPANY_REGISTRATION)
  private String companyRegistration;

  public static final String SERIALIZED_NAME_ETAG = "ETag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_MARKETING_COMPANY_NAME = "MarketingCompanyName";
  @SerializedName(SERIALIZED_NAME_MARKETING_COMPANY_NAME)
  private String marketingCompanyName;

  public static final String SERIALIZED_NAME_O_I_D = "OID";
  @SerializedName(SERIALIZED_NAME_O_I_D)
  private String OID;

  public static final String SERIALIZED_NAME_SHORT_NAME = "ShortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public CompanyModel() {
  }

  public CompanyModel companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Company name
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public CompanyModel companyRegistration(String companyRegistration) {
    this.companyRegistration = companyRegistration;
    return this;
  }

  /**
   * Company registration number
   * @return companyRegistration
   */
  @javax.annotation.Nullable
  public String getCompanyRegistration() {
    return companyRegistration;
  }

  public void setCompanyRegistration(String companyRegistration) {
    this.companyRegistration = companyRegistration;
  }


  public CompanyModel etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * A unique identifier defining the object and change revision.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public CompanyModel marketingCompanyName(String marketingCompanyName) {
    this.marketingCompanyName = marketingCompanyName;
    return this;
  }

  /**
   * Company Marketing Name
   * @return marketingCompanyName
   */
  @javax.annotation.Nullable
  public String getMarketingCompanyName() {
    return marketingCompanyName;
  }

  public void setMarketingCompanyName(String marketingCompanyName) {
    this.marketingCompanyName = marketingCompanyName;
  }


  public CompanyModel OID(String OID) {
    this.OID = OID;
    return this;
  }

  /**
   * The unique Object ID (OID).
   * @return OID
   */
  @javax.annotation.Nullable
  public String getOID() {
    return OID;
  }

  public void setOID(String OID) {
    this.OID = OID;
  }


  public CompanyModel shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  /**
   * The unique identifier assigned to the client
   * @return shortName
   */
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyModel companyModel = (CompanyModel) o;
    return Objects.equals(this.companyName, companyModel.companyName) &&
        Objects.equals(this.companyRegistration, companyModel.companyRegistration) &&
        Objects.equals(this.etag, companyModel.etag) &&
        Objects.equals(this.marketingCompanyName, companyModel.marketingCompanyName) &&
        Objects.equals(this.OID, companyModel.OID) &&
        Objects.equals(this.shortName, companyModel.shortName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyName, companyRegistration, etag, marketingCompanyName, OID, shortName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyModel {\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    companyRegistration: ").append(toIndentedString(companyRegistration)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    marketingCompanyName: ").append(toIndentedString(marketingCompanyName)).append("\n");
    sb.append("    OID: ").append(toIndentedString(OID)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CompanyName");
    openapiFields.add("CompanyRegistration");
    openapiFields.add("ETag");
    openapiFields.add("MarketingCompanyName");
    openapiFields.add("OID");
    openapiFields.add("ShortName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompanyModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompanyModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyModel is not found in the empty JSON string", CompanyModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompanyModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompanyModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CompanyName") != null && !jsonObj.get("CompanyName").isJsonNull()) && !jsonObj.get("CompanyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompanyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompanyName").toString()));
      }
      if ((jsonObj.get("CompanyRegistration") != null && !jsonObj.get("CompanyRegistration").isJsonNull()) && !jsonObj.get("CompanyRegistration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompanyRegistration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompanyRegistration").toString()));
      }
      if ((jsonObj.get("ETag") != null && !jsonObj.get("ETag").isJsonNull()) && !jsonObj.get("ETag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ETag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ETag").toString()));
      }
      if ((jsonObj.get("MarketingCompanyName") != null && !jsonObj.get("MarketingCompanyName").isJsonNull()) && !jsonObj.get("MarketingCompanyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MarketingCompanyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MarketingCompanyName").toString()));
      }
      if ((jsonObj.get("OID") != null && !jsonObj.get("OID").isJsonNull()) && !jsonObj.get("OID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OID").toString()));
      }
      if ((jsonObj.get("ShortName") != null && !jsonObj.get("ShortName").isJsonNull()) && !jsonObj.get("ShortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyModel.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyModel>() {
           @Override
           public void write(JsonWriter out, CompanyModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompanyModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompanyModel
   * @throws IOException if the JSON string is invalid with respect to CompanyModel
   */
  public static CompanyModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyModel.class);
  }

  /**
   * Convert an instance of CompanyModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

