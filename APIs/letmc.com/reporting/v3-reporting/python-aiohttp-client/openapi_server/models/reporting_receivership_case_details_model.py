# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportingReceivershipCaseDetailsModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appointment_date: datetime=None, closed_date: datetime=None, closed_reason: str=None, created_at: datetime=None, display_first_receiver: str=None, display_freehold_block_manager: str=None, display_second_receiver: str=None, display_validating_solicitor: str=None, extra_notes: str=None, first_receiver_id: str=None, freehold_block_manager_id: str=None, passed_to_lender_date: datetime=None, property_ownable_id: str=None, second_receiver_id: str=None, status: str=None, tenure: str=None, validating_solicitor_id: str=None, valuation_date: datetime=None):
        """ReportingReceivershipCaseDetailsModel - a model defined in OpenAPI

        :param appointment_date: The appointment_date of this ReportingReceivershipCaseDetailsModel.
        :param closed_date: The closed_date of this ReportingReceivershipCaseDetailsModel.
        :param closed_reason: The closed_reason of this ReportingReceivershipCaseDetailsModel.
        :param created_at: The created_at of this ReportingReceivershipCaseDetailsModel.
        :param display_first_receiver: The display_first_receiver of this ReportingReceivershipCaseDetailsModel.
        :param display_freehold_block_manager: The display_freehold_block_manager of this ReportingReceivershipCaseDetailsModel.
        :param display_second_receiver: The display_second_receiver of this ReportingReceivershipCaseDetailsModel.
        :param display_validating_solicitor: The display_validating_solicitor of this ReportingReceivershipCaseDetailsModel.
        :param extra_notes: The extra_notes of this ReportingReceivershipCaseDetailsModel.
        :param first_receiver_id: The first_receiver_id of this ReportingReceivershipCaseDetailsModel.
        :param freehold_block_manager_id: The freehold_block_manager_id of this ReportingReceivershipCaseDetailsModel.
        :param passed_to_lender_date: The passed_to_lender_date of this ReportingReceivershipCaseDetailsModel.
        :param property_ownable_id: The property_ownable_id of this ReportingReceivershipCaseDetailsModel.
        :param second_receiver_id: The second_receiver_id of this ReportingReceivershipCaseDetailsModel.
        :param status: The status of this ReportingReceivershipCaseDetailsModel.
        :param tenure: The tenure of this ReportingReceivershipCaseDetailsModel.
        :param validating_solicitor_id: The validating_solicitor_id of this ReportingReceivershipCaseDetailsModel.
        :param valuation_date: The valuation_date of this ReportingReceivershipCaseDetailsModel.
        """
        self.openapi_types = {
            'appointment_date': datetime,
            'closed_date': datetime,
            'closed_reason': str,
            'created_at': datetime,
            'display_first_receiver': str,
            'display_freehold_block_manager': str,
            'display_second_receiver': str,
            'display_validating_solicitor': str,
            'extra_notes': str,
            'first_receiver_id': str,
            'freehold_block_manager_id': str,
            'passed_to_lender_date': datetime,
            'property_ownable_id': str,
            'second_receiver_id': str,
            'status': str,
            'tenure': str,
            'validating_solicitor_id': str,
            'valuation_date': datetime
        }

        self.attribute_map = {
            'appointment_date': 'AppointmentDate',
            'closed_date': 'ClosedDate',
            'closed_reason': 'ClosedReason',
            'created_at': 'CreatedAt',
            'display_first_receiver': 'DisplayFirstReceiver',
            'display_freehold_block_manager': 'DisplayFreeholdBlockManager',
            'display_second_receiver': 'DisplaySecondReceiver',
            'display_validating_solicitor': 'DisplayValidatingSolicitor',
            'extra_notes': 'ExtraNotes',
            'first_receiver_id': 'FirstReceiverID',
            'freehold_block_manager_id': 'FreeholdBlockManagerID',
            'passed_to_lender_date': 'PassedToLenderDate',
            'property_ownable_id': 'PropertyOwnableID',
            'second_receiver_id': 'SecondReceiverID',
            'status': 'Status',
            'tenure': 'Tenure',
            'validating_solicitor_id': 'ValidatingSolicitorID',
            'valuation_date': 'ValuationDate'
        }

        self._appointment_date = appointment_date
        self._closed_date = closed_date
        self._closed_reason = closed_reason
        self._created_at = created_at
        self._display_first_receiver = display_first_receiver
        self._display_freehold_block_manager = display_freehold_block_manager
        self._display_second_receiver = display_second_receiver
        self._display_validating_solicitor = display_validating_solicitor
        self._extra_notes = extra_notes
        self._first_receiver_id = first_receiver_id
        self._freehold_block_manager_id = freehold_block_manager_id
        self._passed_to_lender_date = passed_to_lender_date
        self._property_ownable_id = property_ownable_id
        self._second_receiver_id = second_receiver_id
        self._status = status
        self._tenure = tenure
        self._validating_solicitor_id = validating_solicitor_id
        self._valuation_date = valuation_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportingReceivershipCaseDetailsModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportingReceivershipCaseDetailsModel of this ReportingReceivershipCaseDetailsModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appointment_date(self):
        """Gets the appointment_date of this ReportingReceivershipCaseDetailsModel.

        Appointment Date

        :return: The appointment_date of this ReportingReceivershipCaseDetailsModel.
        :rtype: datetime
        """
        return self._appointment_date

    @appointment_date.setter
    def appointment_date(self, appointment_date):
        """Sets the appointment_date of this ReportingReceivershipCaseDetailsModel.

        Appointment Date

        :param appointment_date: The appointment_date of this ReportingReceivershipCaseDetailsModel.
        :type appointment_date: datetime
        """

        self._appointment_date = appointment_date

    @property
    def closed_date(self):
        """Gets the closed_date of this ReportingReceivershipCaseDetailsModel.

        Closed Date

        :return: The closed_date of this ReportingReceivershipCaseDetailsModel.
        :rtype: datetime
        """
        return self._closed_date

    @closed_date.setter
    def closed_date(self, closed_date):
        """Sets the closed_date of this ReportingReceivershipCaseDetailsModel.

        Closed Date

        :param closed_date: The closed_date of this ReportingReceivershipCaseDetailsModel.
        :type closed_date: datetime
        """

        self._closed_date = closed_date

    @property
    def closed_reason(self):
        """Gets the closed_reason of this ReportingReceivershipCaseDetailsModel.

        Closed Reason

        :return: The closed_reason of this ReportingReceivershipCaseDetailsModel.
        :rtype: str
        """
        return self._closed_reason

    @closed_reason.setter
    def closed_reason(self, closed_reason):
        """Sets the closed_reason of this ReportingReceivershipCaseDetailsModel.

        Closed Reason

        :param closed_reason: The closed_reason of this ReportingReceivershipCaseDetailsModel.
        :type closed_reason: str
        """
        allowed_values = ["PropertySold", "HandedBackToBorrower", "AppointmentIssues", "LenderSeekingPossession", "Other"]  # noqa: E501
        if closed_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `closed_reason` ({0}), must be one of {1}"
                .format(closed_reason, allowed_values)
            )

        self._closed_reason = closed_reason

    @property
    def created_at(self):
        """Gets the created_at of this ReportingReceivershipCaseDetailsModel.

        Created At

        :return: The created_at of this ReportingReceivershipCaseDetailsModel.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReportingReceivershipCaseDetailsModel.

        Created At

        :param created_at: The created_at of this ReportingReceivershipCaseDetailsModel.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def display_first_receiver(self):
        """Gets the display_first_receiver of this ReportingReceivershipCaseDetailsModel.

        Display First Receiver (ApplicationStaff)

        :return: The display_first_receiver of this ReportingReceivershipCaseDetailsModel.
        :rtype: str
        """
        return self._display_first_receiver

    @display_first_receiver.setter
    def display_first_receiver(self, display_first_receiver):
        """Sets the display_first_receiver of this ReportingReceivershipCaseDetailsModel.

        Display First Receiver (ApplicationStaff)

        :param display_first_receiver: The display_first_receiver of this ReportingReceivershipCaseDetailsModel.
        :type display_first_receiver: str
        """

        self._display_first_receiver = display_first_receiver

    @property
    def display_freehold_block_manager(self):
        """Gets the display_freehold_block_manager of this ReportingReceivershipCaseDetailsModel.

        Display Freehold Block Manager

        :return: The display_freehold_block_manager of this ReportingReceivershipCaseDetailsModel.
        :rtype: str
        """
        return self._display_freehold_block_manager

    @display_freehold_block_manager.setter
    def display_freehold_block_manager(self, display_freehold_block_manager):
        """Sets the display_freehold_block_manager of this ReportingReceivershipCaseDetailsModel.

        Display Freehold Block Manager

        :param display_freehold_block_manager: The display_freehold_block_manager of this ReportingReceivershipCaseDetailsModel.
        :type display_freehold_block_manager: str
        """

        self._display_freehold_block_manager = display_freehold_block_manager

    @property
    def display_second_receiver(self):
        """Gets the display_second_receiver of this ReportingReceivershipCaseDetailsModel.

        Display Second Receiver (ApplicationStaff)

        :return: The display_second_receiver of this ReportingReceivershipCaseDetailsModel.
        :rtype: str
        """
        return self._display_second_receiver

    @display_second_receiver.setter
    def display_second_receiver(self, display_second_receiver):
        """Sets the display_second_receiver of this ReportingReceivershipCaseDetailsModel.

        Display Second Receiver (ApplicationStaff)

        :param display_second_receiver: The display_second_receiver of this ReportingReceivershipCaseDetailsModel.
        :type display_second_receiver: str
        """

        self._display_second_receiver = display_second_receiver

    @property
    def display_validating_solicitor(self):
        """Gets the display_validating_solicitor of this ReportingReceivershipCaseDetailsModel.

        Display Validating Solicitor

        :return: The display_validating_solicitor of this ReportingReceivershipCaseDetailsModel.
        :rtype: str
        """
        return self._display_validating_solicitor

    @display_validating_solicitor.setter
    def display_validating_solicitor(self, display_validating_solicitor):
        """Sets the display_validating_solicitor of this ReportingReceivershipCaseDetailsModel.

        Display Validating Solicitor

        :param display_validating_solicitor: The display_validating_solicitor of this ReportingReceivershipCaseDetailsModel.
        :type display_validating_solicitor: str
        """

        self._display_validating_solicitor = display_validating_solicitor

    @property
    def extra_notes(self):
        """Gets the extra_notes of this ReportingReceivershipCaseDetailsModel.

        Extra Notes

        :return: The extra_notes of this ReportingReceivershipCaseDetailsModel.
        :rtype: str
        """
        return self._extra_notes

    @extra_notes.setter
    def extra_notes(self, extra_notes):
        """Sets the extra_notes of this ReportingReceivershipCaseDetailsModel.

        Extra Notes

        :param extra_notes: The extra_notes of this ReportingReceivershipCaseDetailsModel.
        :type extra_notes: str
        """

        self._extra_notes = extra_notes

    @property
    def first_receiver_id(self):
        """Gets the first_receiver_id of this ReportingReceivershipCaseDetailsModel.

        First Receiver ID (ApplicationStaff)

        :return: The first_receiver_id of this ReportingReceivershipCaseDetailsModel.
        :rtype: str
        """
        return self._first_receiver_id

    @first_receiver_id.setter
    def first_receiver_id(self, first_receiver_id):
        """Sets the first_receiver_id of this ReportingReceivershipCaseDetailsModel.

        First Receiver ID (ApplicationStaff)

        :param first_receiver_id: The first_receiver_id of this ReportingReceivershipCaseDetailsModel.
        :type first_receiver_id: str
        """

        self._first_receiver_id = first_receiver_id

    @property
    def freehold_block_manager_id(self):
        """Gets the freehold_block_manager_id of this ReportingReceivershipCaseDetailsModel.

        Freehold Block Manager ID

        :return: The freehold_block_manager_id of this ReportingReceivershipCaseDetailsModel.
        :rtype: str
        """
        return self._freehold_block_manager_id

    @freehold_block_manager_id.setter
    def freehold_block_manager_id(self, freehold_block_manager_id):
        """Sets the freehold_block_manager_id of this ReportingReceivershipCaseDetailsModel.

        Freehold Block Manager ID

        :param freehold_block_manager_id: The freehold_block_manager_id of this ReportingReceivershipCaseDetailsModel.
        :type freehold_block_manager_id: str
        """

        self._freehold_block_manager_id = freehold_block_manager_id

    @property
    def passed_to_lender_date(self):
        """Gets the passed_to_lender_date of this ReportingReceivershipCaseDetailsModel.

        Passed to Lender Date

        :return: The passed_to_lender_date of this ReportingReceivershipCaseDetailsModel.
        :rtype: datetime
        """
        return self._passed_to_lender_date

    @passed_to_lender_date.setter
    def passed_to_lender_date(self, passed_to_lender_date):
        """Sets the passed_to_lender_date of this ReportingReceivershipCaseDetailsModel.

        Passed to Lender Date

        :param passed_to_lender_date: The passed_to_lender_date of this ReportingReceivershipCaseDetailsModel.
        :type passed_to_lender_date: datetime
        """

        self._passed_to_lender_date = passed_to_lender_date

    @property
    def property_ownable_id(self):
        """Gets the property_ownable_id of this ReportingReceivershipCaseDetailsModel.

        The unique Property Ownable identifier

        :return: The property_ownable_id of this ReportingReceivershipCaseDetailsModel.
        :rtype: str
        """
        return self._property_ownable_id

    @property_ownable_id.setter
    def property_ownable_id(self, property_ownable_id):
        """Sets the property_ownable_id of this ReportingReceivershipCaseDetailsModel.

        The unique Property Ownable identifier

        :param property_ownable_id: The property_ownable_id of this ReportingReceivershipCaseDetailsModel.
        :type property_ownable_id: str
        """

        self._property_ownable_id = property_ownable_id

    @property
    def second_receiver_id(self):
        """Gets the second_receiver_id of this ReportingReceivershipCaseDetailsModel.

        Second Receiver ID (ApplicationStaff)

        :return: The second_receiver_id of this ReportingReceivershipCaseDetailsModel.
        :rtype: str
        """
        return self._second_receiver_id

    @second_receiver_id.setter
    def second_receiver_id(self, second_receiver_id):
        """Sets the second_receiver_id of this ReportingReceivershipCaseDetailsModel.

        Second Receiver ID (ApplicationStaff)

        :param second_receiver_id: The second_receiver_id of this ReportingReceivershipCaseDetailsModel.
        :type second_receiver_id: str
        """

        self._second_receiver_id = second_receiver_id

    @property
    def status(self):
        """Gets the status of this ReportingReceivershipCaseDetailsModel.

        Status

        :return: The status of this ReportingReceivershipCaseDetailsModel.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReportingReceivershipCaseDetailsModel.

        Status

        :param status: The status of this ReportingReceivershipCaseDetailsModel.
        :type status: str
        """
        allowed_values = ["Opened", "Litigation", "Closed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tenure(self):
        """Gets the tenure of this ReportingReceivershipCaseDetailsModel.

        Tenure

        :return: The tenure of this ReportingReceivershipCaseDetailsModel.
        :rtype: str
        """
        return self._tenure

    @tenure.setter
    def tenure(self, tenure):
        """Sets the tenure of this ReportingReceivershipCaseDetailsModel.

        Tenure

        :param tenure: The tenure of this ReportingReceivershipCaseDetailsModel.
        :type tenure: str
        """
        allowed_values = ["Freehold", "Leasehold", "Commonhold", "ShareOfFreehold", "FlyingFreehold", "ShareTransfer", "Unknown"]  # noqa: E501
        if tenure not in allowed_values:
            raise ValueError(
                "Invalid value for `tenure` ({0}), must be one of {1}"
                .format(tenure, allowed_values)
            )

        self._tenure = tenure

    @property
    def validating_solicitor_id(self):
        """Gets the validating_solicitor_id of this ReportingReceivershipCaseDetailsModel.

        The unique Validating Solicitor identifier

        :return: The validating_solicitor_id of this ReportingReceivershipCaseDetailsModel.
        :rtype: str
        """
        return self._validating_solicitor_id

    @validating_solicitor_id.setter
    def validating_solicitor_id(self, validating_solicitor_id):
        """Sets the validating_solicitor_id of this ReportingReceivershipCaseDetailsModel.

        The unique Validating Solicitor identifier

        :param validating_solicitor_id: The validating_solicitor_id of this ReportingReceivershipCaseDetailsModel.
        :type validating_solicitor_id: str
        """

        self._validating_solicitor_id = validating_solicitor_id

    @property
    def valuation_date(self):
        """Gets the valuation_date of this ReportingReceivershipCaseDetailsModel.

        Valuation Date

        :return: The valuation_date of this ReportingReceivershipCaseDetailsModel.
        :rtype: datetime
        """
        return self._valuation_date

    @valuation_date.setter
    def valuation_date(self, valuation_date):
        """Sets the valuation_date of this ReportingReceivershipCaseDetailsModel.

        Valuation Date

        :param valuation_date: The valuation_date of this ReportingReceivershipCaseDetailsModel.
        :type valuation_date: datetime
        """

        self._valuation_date = valuation_date
