/**
 * LetMC Api V3, reporting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-reporting
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportingPropertyMortgageModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportingPropertyMortgageModel::OAIReportingPropertyMortgageModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportingPropertyMortgageModel::OAIReportingPropertyMortgageModel() {
    this->initializeModel();
}

OAIReportingPropertyMortgageModel::~OAIReportingPropertyMortgageModel() {}

void OAIReportingPropertyMortgageModel::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_borrowers_account_name_isSet = false;
    m_borrowers_account_name_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_display_type_isSet = false;
    m_display_type_isValid = false;

    m_extra_notes_isSet = false;
    m_extra_notes_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_intrest_rate_isSet = false;
    m_intrest_rate_isValid = false;

    m_market_value_isSet = false;
    m_market_value_isValid = false;

    m_monthly_payment_isSet = false;
    m_monthly_payment_isValid = false;

    m_mortgage_account_number_isSet = false;
    m_mortgage_account_number_isValid = false;

    m_mortgage_provider_isSet = false;
    m_mortgage_provider_isValid = false;

    m_property_ownable_id_isSet = false;
    m_property_ownable_id_isValid = false;

    m_sales_instruction_id_isSet = false;
    m_sales_instruction_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_valuation_date_isSet = false;
    m_valuation_date_isValid = false;
}

void OAIReportingPropertyMortgageModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportingPropertyMortgageModel::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("Amount")]);
    m_amount_isSet = !json[QString("Amount")].isNull() && m_amount_isValid;

    m_borrowers_account_name_isValid = ::OpenAPI::fromJsonValue(m_borrowers_account_name, json[QString("BorrowersAccountName")]);
    m_borrowers_account_name_isSet = !json[QString("BorrowersAccountName")].isNull() && m_borrowers_account_name_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_display_type_isValid = ::OpenAPI::fromJsonValue(m_display_type, json[QString("DisplayType")]);
    m_display_type_isSet = !json[QString("DisplayType")].isNull() && m_display_type_isValid;

    m_extra_notes_isValid = ::OpenAPI::fromJsonValue(m_extra_notes, json[QString("ExtraNotes")]);
    m_extra_notes_isSet = !json[QString("ExtraNotes")].isNull() && m_extra_notes_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("From")]);
    m_from_isSet = !json[QString("From")].isNull() && m_from_isValid;

    m_intrest_rate_isValid = ::OpenAPI::fromJsonValue(m_intrest_rate, json[QString("IntrestRate")]);
    m_intrest_rate_isSet = !json[QString("IntrestRate")].isNull() && m_intrest_rate_isValid;

    m_market_value_isValid = ::OpenAPI::fromJsonValue(m_market_value, json[QString("MarketValue")]);
    m_market_value_isSet = !json[QString("MarketValue")].isNull() && m_market_value_isValid;

    m_monthly_payment_isValid = ::OpenAPI::fromJsonValue(m_monthly_payment, json[QString("MonthlyPayment")]);
    m_monthly_payment_isSet = !json[QString("MonthlyPayment")].isNull() && m_monthly_payment_isValid;

    m_mortgage_account_number_isValid = ::OpenAPI::fromJsonValue(m_mortgage_account_number, json[QString("MortgageAccountNumber")]);
    m_mortgage_account_number_isSet = !json[QString("MortgageAccountNumber")].isNull() && m_mortgage_account_number_isValid;

    m_mortgage_provider_isValid = ::OpenAPI::fromJsonValue(m_mortgage_provider, json[QString("MortgageProvider")]);
    m_mortgage_provider_isSet = !json[QString("MortgageProvider")].isNull() && m_mortgage_provider_isValid;

    m_property_ownable_id_isValid = ::OpenAPI::fromJsonValue(m_property_ownable_id, json[QString("PropertyOwnableID")]);
    m_property_ownable_id_isSet = !json[QString("PropertyOwnableID")].isNull() && m_property_ownable_id_isValid;

    m_sales_instruction_id_isValid = ::OpenAPI::fromJsonValue(m_sales_instruction_id, json[QString("SalesInstructionID")]);
    m_sales_instruction_id_isSet = !json[QString("SalesInstructionID")].isNull() && m_sales_instruction_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_valuation_date_isValid = ::OpenAPI::fromJsonValue(m_valuation_date, json[QString("ValuationDate")]);
    m_valuation_date_isSet = !json[QString("ValuationDate")].isNull() && m_valuation_date_isValid;
}

QString OAIReportingPropertyMortgageModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportingPropertyMortgageModel::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("Amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_borrowers_account_name_isSet) {
        obj.insert(QString("BorrowersAccountName"), ::OpenAPI::toJsonValue(m_borrowers_account_name));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_display_type_isSet) {
        obj.insert(QString("DisplayType"), ::OpenAPI::toJsonValue(m_display_type));
    }
    if (m_extra_notes_isSet) {
        obj.insert(QString("ExtraNotes"), ::OpenAPI::toJsonValue(m_extra_notes));
    }
    if (m_from_isSet) {
        obj.insert(QString("From"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_intrest_rate_isSet) {
        obj.insert(QString("IntrestRate"), ::OpenAPI::toJsonValue(m_intrest_rate));
    }
    if (m_market_value_isSet) {
        obj.insert(QString("MarketValue"), ::OpenAPI::toJsonValue(m_market_value));
    }
    if (m_monthly_payment_isSet) {
        obj.insert(QString("MonthlyPayment"), ::OpenAPI::toJsonValue(m_monthly_payment));
    }
    if (m_mortgage_account_number_isSet) {
        obj.insert(QString("MortgageAccountNumber"), ::OpenAPI::toJsonValue(m_mortgage_account_number));
    }
    if (m_mortgage_provider_isSet) {
        obj.insert(QString("MortgageProvider"), ::OpenAPI::toJsonValue(m_mortgage_provider));
    }
    if (m_property_ownable_id_isSet) {
        obj.insert(QString("PropertyOwnableID"), ::OpenAPI::toJsonValue(m_property_ownable_id));
    }
    if (m_sales_instruction_id_isSet) {
        obj.insert(QString("SalesInstructionID"), ::OpenAPI::toJsonValue(m_sales_instruction_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_valuation_date_isSet) {
        obj.insert(QString("ValuationDate"), ::OpenAPI::toJsonValue(m_valuation_date));
    }
    return obj;
}

double OAIReportingPropertyMortgageModel::getAmount() const {
    return m_amount;
}
void OAIReportingPropertyMortgageModel::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIReportingPropertyMortgageModel::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIReportingPropertyMortgageModel::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIReportingPropertyMortgageModel::getBorrowersAccountName() const {
    return m_borrowers_account_name;
}
void OAIReportingPropertyMortgageModel::setBorrowersAccountName(const QString &borrowers_account_name) {
    m_borrowers_account_name = borrowers_account_name;
    m_borrowers_account_name_isSet = true;
}

bool OAIReportingPropertyMortgageModel::is_borrowers_account_name_Set() const{
    return m_borrowers_account_name_isSet;
}

bool OAIReportingPropertyMortgageModel::is_borrowers_account_name_Valid() const{
    return m_borrowers_account_name_isValid;
}

QDateTime OAIReportingPropertyMortgageModel::getCreatedAt() const {
    return m_created_at;
}
void OAIReportingPropertyMortgageModel::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIReportingPropertyMortgageModel::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIReportingPropertyMortgageModel::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIReportingPropertyMortgageModel::getDisplayType() const {
    return m_display_type;
}
void OAIReportingPropertyMortgageModel::setDisplayType(const QString &display_type) {
    m_display_type = display_type;
    m_display_type_isSet = true;
}

bool OAIReportingPropertyMortgageModel::is_display_type_Set() const{
    return m_display_type_isSet;
}

bool OAIReportingPropertyMortgageModel::is_display_type_Valid() const{
    return m_display_type_isValid;
}

QString OAIReportingPropertyMortgageModel::getExtraNotes() const {
    return m_extra_notes;
}
void OAIReportingPropertyMortgageModel::setExtraNotes(const QString &extra_notes) {
    m_extra_notes = extra_notes;
    m_extra_notes_isSet = true;
}

bool OAIReportingPropertyMortgageModel::is_extra_notes_Set() const{
    return m_extra_notes_isSet;
}

bool OAIReportingPropertyMortgageModel::is_extra_notes_Valid() const{
    return m_extra_notes_isValid;
}

QDateTime OAIReportingPropertyMortgageModel::getFrom() const {
    return m_from;
}
void OAIReportingPropertyMortgageModel::setFrom(const QDateTime &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIReportingPropertyMortgageModel::is_from_Set() const{
    return m_from_isSet;
}

bool OAIReportingPropertyMortgageModel::is_from_Valid() const{
    return m_from_isValid;
}

double OAIReportingPropertyMortgageModel::getIntrestRate() const {
    return m_intrest_rate;
}
void OAIReportingPropertyMortgageModel::setIntrestRate(const double &intrest_rate) {
    m_intrest_rate = intrest_rate;
    m_intrest_rate_isSet = true;
}

bool OAIReportingPropertyMortgageModel::is_intrest_rate_Set() const{
    return m_intrest_rate_isSet;
}

bool OAIReportingPropertyMortgageModel::is_intrest_rate_Valid() const{
    return m_intrest_rate_isValid;
}

double OAIReportingPropertyMortgageModel::getMarketValue() const {
    return m_market_value;
}
void OAIReportingPropertyMortgageModel::setMarketValue(const double &market_value) {
    m_market_value = market_value;
    m_market_value_isSet = true;
}

bool OAIReportingPropertyMortgageModel::is_market_value_Set() const{
    return m_market_value_isSet;
}

bool OAIReportingPropertyMortgageModel::is_market_value_Valid() const{
    return m_market_value_isValid;
}

double OAIReportingPropertyMortgageModel::getMonthlyPayment() const {
    return m_monthly_payment;
}
void OAIReportingPropertyMortgageModel::setMonthlyPayment(const double &monthly_payment) {
    m_monthly_payment = monthly_payment;
    m_monthly_payment_isSet = true;
}

bool OAIReportingPropertyMortgageModel::is_monthly_payment_Set() const{
    return m_monthly_payment_isSet;
}

bool OAIReportingPropertyMortgageModel::is_monthly_payment_Valid() const{
    return m_monthly_payment_isValid;
}

QString OAIReportingPropertyMortgageModel::getMortgageAccountNumber() const {
    return m_mortgage_account_number;
}
void OAIReportingPropertyMortgageModel::setMortgageAccountNumber(const QString &mortgage_account_number) {
    m_mortgage_account_number = mortgage_account_number;
    m_mortgage_account_number_isSet = true;
}

bool OAIReportingPropertyMortgageModel::is_mortgage_account_number_Set() const{
    return m_mortgage_account_number_isSet;
}

bool OAIReportingPropertyMortgageModel::is_mortgage_account_number_Valid() const{
    return m_mortgage_account_number_isValid;
}

QString OAIReportingPropertyMortgageModel::getMortgageProvider() const {
    return m_mortgage_provider;
}
void OAIReportingPropertyMortgageModel::setMortgageProvider(const QString &mortgage_provider) {
    m_mortgage_provider = mortgage_provider;
    m_mortgage_provider_isSet = true;
}

bool OAIReportingPropertyMortgageModel::is_mortgage_provider_Set() const{
    return m_mortgage_provider_isSet;
}

bool OAIReportingPropertyMortgageModel::is_mortgage_provider_Valid() const{
    return m_mortgage_provider_isValid;
}

QString OAIReportingPropertyMortgageModel::getPropertyOwnableId() const {
    return m_property_ownable_id;
}
void OAIReportingPropertyMortgageModel::setPropertyOwnableId(const QString &property_ownable_id) {
    m_property_ownable_id = property_ownable_id;
    m_property_ownable_id_isSet = true;
}

bool OAIReportingPropertyMortgageModel::is_property_ownable_id_Set() const{
    return m_property_ownable_id_isSet;
}

bool OAIReportingPropertyMortgageModel::is_property_ownable_id_Valid() const{
    return m_property_ownable_id_isValid;
}

QString OAIReportingPropertyMortgageModel::getSalesInstructionId() const {
    return m_sales_instruction_id;
}
void OAIReportingPropertyMortgageModel::setSalesInstructionId(const QString &sales_instruction_id) {
    m_sales_instruction_id = sales_instruction_id;
    m_sales_instruction_id_isSet = true;
}

bool OAIReportingPropertyMortgageModel::is_sales_instruction_id_Set() const{
    return m_sales_instruction_id_isSet;
}

bool OAIReportingPropertyMortgageModel::is_sales_instruction_id_Valid() const{
    return m_sales_instruction_id_isValid;
}

QString OAIReportingPropertyMortgageModel::getType() const {
    return m_type;
}
void OAIReportingPropertyMortgageModel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReportingPropertyMortgageModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReportingPropertyMortgageModel::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIReportingPropertyMortgageModel::getValuationDate() const {
    return m_valuation_date;
}
void OAIReportingPropertyMortgageModel::setValuationDate(const QDateTime &valuation_date) {
    m_valuation_date = valuation_date;
    m_valuation_date_isSet = true;
}

bool OAIReportingPropertyMortgageModel::is_valuation_date_Set() const{
    return m_valuation_date_isSet;
}

bool OAIReportingPropertyMortgageModel::is_valuation_date_Valid() const{
    return m_valuation_date_isValid;
}

bool OAIReportingPropertyMortgageModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_borrowers_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intrest_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_payment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mortgage_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mortgage_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_ownable_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_instruction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valuation_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportingPropertyMortgageModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
