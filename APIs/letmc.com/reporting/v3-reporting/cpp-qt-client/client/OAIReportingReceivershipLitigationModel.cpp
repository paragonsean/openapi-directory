/**
 * LetMC Api V3, reporting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-reporting
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportingReceivershipLitigationModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportingReceivershipLitigationModel::OAIReportingReceivershipLitigationModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportingReceivershipLitigationModel::OAIReportingReceivershipLitigationModel() {
    this->initializeModel();
}

OAIReportingReceivershipLitigationModel::~OAIReportingReceivershipLitigationModel() {}

void OAIReportingReceivershipLitigationModel::initializeModel() {

    m_closed_litigation_date_isSet = false;
    m_closed_litigation_date_isValid = false;

    m_closed_litigation_reason_isSet = false;
    m_closed_litigation_reason_isValid = false;

    m_compiled_by_solicitor_id_isSet = false;
    m_compiled_by_solicitor_id_isValid = false;

    m_display_compiled_by_solicitor_isSet = false;
    m_display_compiled_by_solicitor_isValid = false;

    m_eviction_date_isSet = false;
    m_eviction_date_isValid = false;

    m_eviction_outcome_isSet = false;
    m_eviction_outcome_isValid = false;

    m_extra_notes_isSet = false;
    m_extra_notes_isValid = false;

    m_hearing_date_isSet = false;
    m_hearing_date_isValid = false;

    m_hearing_outcome_isSet = false;
    m_hearing_outcome_isValid = false;

    m_litigation_type_isSet = false;
    m_litigation_type_isValid = false;

    m_notice_expiry_date_isSet = false;
    m_notice_expiry_date_isValid = false;

    m_notice_served_date_isSet = false;
    m_notice_served_date_isValid = false;

    m_proceedings_issued_date_isSet = false;
    m_proceedings_issued_date_isValid = false;
}

void OAIReportingReceivershipLitigationModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportingReceivershipLitigationModel::fromJsonObject(QJsonObject json) {

    m_closed_litigation_date_isValid = ::OpenAPI::fromJsonValue(m_closed_litigation_date, json[QString("ClosedLitigationDate")]);
    m_closed_litigation_date_isSet = !json[QString("ClosedLitigationDate")].isNull() && m_closed_litigation_date_isValid;

    m_closed_litigation_reason_isValid = ::OpenAPI::fromJsonValue(m_closed_litigation_reason, json[QString("ClosedLitigationReason")]);
    m_closed_litigation_reason_isSet = !json[QString("ClosedLitigationReason")].isNull() && m_closed_litigation_reason_isValid;

    m_compiled_by_solicitor_id_isValid = ::OpenAPI::fromJsonValue(m_compiled_by_solicitor_id, json[QString("CompiledBySolicitorID")]);
    m_compiled_by_solicitor_id_isSet = !json[QString("CompiledBySolicitorID")].isNull() && m_compiled_by_solicitor_id_isValid;

    m_display_compiled_by_solicitor_isValid = ::OpenAPI::fromJsonValue(m_display_compiled_by_solicitor, json[QString("DisplayCompiledBySolicitor")]);
    m_display_compiled_by_solicitor_isSet = !json[QString("DisplayCompiledBySolicitor")].isNull() && m_display_compiled_by_solicitor_isValid;

    m_eviction_date_isValid = ::OpenAPI::fromJsonValue(m_eviction_date, json[QString("EvictionDate")]);
    m_eviction_date_isSet = !json[QString("EvictionDate")].isNull() && m_eviction_date_isValid;

    m_eviction_outcome_isValid = ::OpenAPI::fromJsonValue(m_eviction_outcome, json[QString("EvictionOutcome")]);
    m_eviction_outcome_isSet = !json[QString("EvictionOutcome")].isNull() && m_eviction_outcome_isValid;

    m_extra_notes_isValid = ::OpenAPI::fromJsonValue(m_extra_notes, json[QString("ExtraNotes")]);
    m_extra_notes_isSet = !json[QString("ExtraNotes")].isNull() && m_extra_notes_isValid;

    m_hearing_date_isValid = ::OpenAPI::fromJsonValue(m_hearing_date, json[QString("HearingDate")]);
    m_hearing_date_isSet = !json[QString("HearingDate")].isNull() && m_hearing_date_isValid;

    m_hearing_outcome_isValid = ::OpenAPI::fromJsonValue(m_hearing_outcome, json[QString("HearingOutcome")]);
    m_hearing_outcome_isSet = !json[QString("HearingOutcome")].isNull() && m_hearing_outcome_isValid;

    m_litigation_type_isValid = ::OpenAPI::fromJsonValue(m_litigation_type, json[QString("LitigationType")]);
    m_litigation_type_isSet = !json[QString("LitigationType")].isNull() && m_litigation_type_isValid;

    m_notice_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_notice_expiry_date, json[QString("NoticeExpiryDate")]);
    m_notice_expiry_date_isSet = !json[QString("NoticeExpiryDate")].isNull() && m_notice_expiry_date_isValid;

    m_notice_served_date_isValid = ::OpenAPI::fromJsonValue(m_notice_served_date, json[QString("NoticeServedDate")]);
    m_notice_served_date_isSet = !json[QString("NoticeServedDate")].isNull() && m_notice_served_date_isValid;

    m_proceedings_issued_date_isValid = ::OpenAPI::fromJsonValue(m_proceedings_issued_date, json[QString("ProceedingsIssuedDate")]);
    m_proceedings_issued_date_isSet = !json[QString("ProceedingsIssuedDate")].isNull() && m_proceedings_issued_date_isValid;
}

QString OAIReportingReceivershipLitigationModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportingReceivershipLitigationModel::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_litigation_date_isSet) {
        obj.insert(QString("ClosedLitigationDate"), ::OpenAPI::toJsonValue(m_closed_litigation_date));
    }
    if (m_closed_litigation_reason_isSet) {
        obj.insert(QString("ClosedLitigationReason"), ::OpenAPI::toJsonValue(m_closed_litigation_reason));
    }
    if (m_compiled_by_solicitor_id_isSet) {
        obj.insert(QString("CompiledBySolicitorID"), ::OpenAPI::toJsonValue(m_compiled_by_solicitor_id));
    }
    if (m_display_compiled_by_solicitor_isSet) {
        obj.insert(QString("DisplayCompiledBySolicitor"), ::OpenAPI::toJsonValue(m_display_compiled_by_solicitor));
    }
    if (m_eviction_date_isSet) {
        obj.insert(QString("EvictionDate"), ::OpenAPI::toJsonValue(m_eviction_date));
    }
    if (m_eviction_outcome_isSet) {
        obj.insert(QString("EvictionOutcome"), ::OpenAPI::toJsonValue(m_eviction_outcome));
    }
    if (m_extra_notes_isSet) {
        obj.insert(QString("ExtraNotes"), ::OpenAPI::toJsonValue(m_extra_notes));
    }
    if (m_hearing_date_isSet) {
        obj.insert(QString("HearingDate"), ::OpenAPI::toJsonValue(m_hearing_date));
    }
    if (m_hearing_outcome_isSet) {
        obj.insert(QString("HearingOutcome"), ::OpenAPI::toJsonValue(m_hearing_outcome));
    }
    if (m_litigation_type_isSet) {
        obj.insert(QString("LitigationType"), ::OpenAPI::toJsonValue(m_litigation_type));
    }
    if (m_notice_expiry_date_isSet) {
        obj.insert(QString("NoticeExpiryDate"), ::OpenAPI::toJsonValue(m_notice_expiry_date));
    }
    if (m_notice_served_date_isSet) {
        obj.insert(QString("NoticeServedDate"), ::OpenAPI::toJsonValue(m_notice_served_date));
    }
    if (m_proceedings_issued_date_isSet) {
        obj.insert(QString("ProceedingsIssuedDate"), ::OpenAPI::toJsonValue(m_proceedings_issued_date));
    }
    return obj;
}

QDateTime OAIReportingReceivershipLitigationModel::getClosedLitigationDate() const {
    return m_closed_litigation_date;
}
void OAIReportingReceivershipLitigationModel::setClosedLitigationDate(const QDateTime &closed_litigation_date) {
    m_closed_litigation_date = closed_litigation_date;
    m_closed_litigation_date_isSet = true;
}

bool OAIReportingReceivershipLitigationModel::is_closed_litigation_date_Set() const{
    return m_closed_litigation_date_isSet;
}

bool OAIReportingReceivershipLitigationModel::is_closed_litigation_date_Valid() const{
    return m_closed_litigation_date_isValid;
}

QString OAIReportingReceivershipLitigationModel::getClosedLitigationReason() const {
    return m_closed_litigation_reason;
}
void OAIReportingReceivershipLitigationModel::setClosedLitigationReason(const QString &closed_litigation_reason) {
    m_closed_litigation_reason = closed_litigation_reason;
    m_closed_litigation_reason_isSet = true;
}

bool OAIReportingReceivershipLitigationModel::is_closed_litigation_reason_Set() const{
    return m_closed_litigation_reason_isSet;
}

bool OAIReportingReceivershipLitigationModel::is_closed_litigation_reason_Valid() const{
    return m_closed_litigation_reason_isValid;
}

QString OAIReportingReceivershipLitigationModel::getCompiledBySolicitorId() const {
    return m_compiled_by_solicitor_id;
}
void OAIReportingReceivershipLitigationModel::setCompiledBySolicitorId(const QString &compiled_by_solicitor_id) {
    m_compiled_by_solicitor_id = compiled_by_solicitor_id;
    m_compiled_by_solicitor_id_isSet = true;
}

bool OAIReportingReceivershipLitigationModel::is_compiled_by_solicitor_id_Set() const{
    return m_compiled_by_solicitor_id_isSet;
}

bool OAIReportingReceivershipLitigationModel::is_compiled_by_solicitor_id_Valid() const{
    return m_compiled_by_solicitor_id_isValid;
}

QString OAIReportingReceivershipLitigationModel::getDisplayCompiledBySolicitor() const {
    return m_display_compiled_by_solicitor;
}
void OAIReportingReceivershipLitigationModel::setDisplayCompiledBySolicitor(const QString &display_compiled_by_solicitor) {
    m_display_compiled_by_solicitor = display_compiled_by_solicitor;
    m_display_compiled_by_solicitor_isSet = true;
}

bool OAIReportingReceivershipLitigationModel::is_display_compiled_by_solicitor_Set() const{
    return m_display_compiled_by_solicitor_isSet;
}

bool OAIReportingReceivershipLitigationModel::is_display_compiled_by_solicitor_Valid() const{
    return m_display_compiled_by_solicitor_isValid;
}

QDateTime OAIReportingReceivershipLitigationModel::getEvictionDate() const {
    return m_eviction_date;
}
void OAIReportingReceivershipLitigationModel::setEvictionDate(const QDateTime &eviction_date) {
    m_eviction_date = eviction_date;
    m_eviction_date_isSet = true;
}

bool OAIReportingReceivershipLitigationModel::is_eviction_date_Set() const{
    return m_eviction_date_isSet;
}

bool OAIReportingReceivershipLitigationModel::is_eviction_date_Valid() const{
    return m_eviction_date_isValid;
}

QString OAIReportingReceivershipLitigationModel::getEvictionOutcome() const {
    return m_eviction_outcome;
}
void OAIReportingReceivershipLitigationModel::setEvictionOutcome(const QString &eviction_outcome) {
    m_eviction_outcome = eviction_outcome;
    m_eviction_outcome_isSet = true;
}

bool OAIReportingReceivershipLitigationModel::is_eviction_outcome_Set() const{
    return m_eviction_outcome_isSet;
}

bool OAIReportingReceivershipLitigationModel::is_eviction_outcome_Valid() const{
    return m_eviction_outcome_isValid;
}

QString OAIReportingReceivershipLitigationModel::getExtraNotes() const {
    return m_extra_notes;
}
void OAIReportingReceivershipLitigationModel::setExtraNotes(const QString &extra_notes) {
    m_extra_notes = extra_notes;
    m_extra_notes_isSet = true;
}

bool OAIReportingReceivershipLitigationModel::is_extra_notes_Set() const{
    return m_extra_notes_isSet;
}

bool OAIReportingReceivershipLitigationModel::is_extra_notes_Valid() const{
    return m_extra_notes_isValid;
}

QDateTime OAIReportingReceivershipLitigationModel::getHearingDate() const {
    return m_hearing_date;
}
void OAIReportingReceivershipLitigationModel::setHearingDate(const QDateTime &hearing_date) {
    m_hearing_date = hearing_date;
    m_hearing_date_isSet = true;
}

bool OAIReportingReceivershipLitigationModel::is_hearing_date_Set() const{
    return m_hearing_date_isSet;
}

bool OAIReportingReceivershipLitigationModel::is_hearing_date_Valid() const{
    return m_hearing_date_isValid;
}

QString OAIReportingReceivershipLitigationModel::getHearingOutcome() const {
    return m_hearing_outcome;
}
void OAIReportingReceivershipLitigationModel::setHearingOutcome(const QString &hearing_outcome) {
    m_hearing_outcome = hearing_outcome;
    m_hearing_outcome_isSet = true;
}

bool OAIReportingReceivershipLitigationModel::is_hearing_outcome_Set() const{
    return m_hearing_outcome_isSet;
}

bool OAIReportingReceivershipLitigationModel::is_hearing_outcome_Valid() const{
    return m_hearing_outcome_isValid;
}

QString OAIReportingReceivershipLitigationModel::getLitigationType() const {
    return m_litigation_type;
}
void OAIReportingReceivershipLitigationModel::setLitigationType(const QString &litigation_type) {
    m_litigation_type = litigation_type;
    m_litigation_type_isSet = true;
}

bool OAIReportingReceivershipLitigationModel::is_litigation_type_Set() const{
    return m_litigation_type_isSet;
}

bool OAIReportingReceivershipLitigationModel::is_litigation_type_Valid() const{
    return m_litigation_type_isValid;
}

QDateTime OAIReportingReceivershipLitigationModel::getNoticeExpiryDate() const {
    return m_notice_expiry_date;
}
void OAIReportingReceivershipLitigationModel::setNoticeExpiryDate(const QDateTime &notice_expiry_date) {
    m_notice_expiry_date = notice_expiry_date;
    m_notice_expiry_date_isSet = true;
}

bool OAIReportingReceivershipLitigationModel::is_notice_expiry_date_Set() const{
    return m_notice_expiry_date_isSet;
}

bool OAIReportingReceivershipLitigationModel::is_notice_expiry_date_Valid() const{
    return m_notice_expiry_date_isValid;
}

QDateTime OAIReportingReceivershipLitigationModel::getNoticeServedDate() const {
    return m_notice_served_date;
}
void OAIReportingReceivershipLitigationModel::setNoticeServedDate(const QDateTime &notice_served_date) {
    m_notice_served_date = notice_served_date;
    m_notice_served_date_isSet = true;
}

bool OAIReportingReceivershipLitigationModel::is_notice_served_date_Set() const{
    return m_notice_served_date_isSet;
}

bool OAIReportingReceivershipLitigationModel::is_notice_served_date_Valid() const{
    return m_notice_served_date_isValid;
}

QDateTime OAIReportingReceivershipLitigationModel::getProceedingsIssuedDate() const {
    return m_proceedings_issued_date;
}
void OAIReportingReceivershipLitigationModel::setProceedingsIssuedDate(const QDateTime &proceedings_issued_date) {
    m_proceedings_issued_date = proceedings_issued_date;
    m_proceedings_issued_date_isSet = true;
}

bool OAIReportingReceivershipLitigationModel::is_proceedings_issued_date_Set() const{
    return m_proceedings_issued_date_isSet;
}

bool OAIReportingReceivershipLitigationModel::is_proceedings_issued_date_Valid() const{
    return m_proceedings_issued_date_isValid;
}

bool OAIReportingReceivershipLitigationModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_litigation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_litigation_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compiled_by_solicitor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_compiled_by_solicitor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eviction_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eviction_outcome_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hearing_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hearing_outcome_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_litigation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notice_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notice_served_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proceedings_issued_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportingReceivershipLitigationModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
