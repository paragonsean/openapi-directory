/**
 * LetMC Api V3, reporting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-reporting
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportingReceivershipCaseDetailsModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportingReceivershipCaseDetailsModel::OAIReportingReceivershipCaseDetailsModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportingReceivershipCaseDetailsModel::OAIReportingReceivershipCaseDetailsModel() {
    this->initializeModel();
}

OAIReportingReceivershipCaseDetailsModel::~OAIReportingReceivershipCaseDetailsModel() {}

void OAIReportingReceivershipCaseDetailsModel::initializeModel() {

    m_appointment_date_isSet = false;
    m_appointment_date_isValid = false;

    m_closed_date_isSet = false;
    m_closed_date_isValid = false;

    m_closed_reason_isSet = false;
    m_closed_reason_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_display_first_receiver_isSet = false;
    m_display_first_receiver_isValid = false;

    m_display_freehold_block_manager_isSet = false;
    m_display_freehold_block_manager_isValid = false;

    m_display_second_receiver_isSet = false;
    m_display_second_receiver_isValid = false;

    m_display_validating_solicitor_isSet = false;
    m_display_validating_solicitor_isValid = false;

    m_extra_notes_isSet = false;
    m_extra_notes_isValid = false;

    m_first_receiver_id_isSet = false;
    m_first_receiver_id_isValid = false;

    m_freehold_block_manager_id_isSet = false;
    m_freehold_block_manager_id_isValid = false;

    m_passed_to_lender_date_isSet = false;
    m_passed_to_lender_date_isValid = false;

    m_property_ownable_id_isSet = false;
    m_property_ownable_id_isValid = false;

    m_second_receiver_id_isSet = false;
    m_second_receiver_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tenure_isSet = false;
    m_tenure_isValid = false;

    m_validating_solicitor_id_isSet = false;
    m_validating_solicitor_id_isValid = false;

    m_valuation_date_isSet = false;
    m_valuation_date_isValid = false;
}

void OAIReportingReceivershipCaseDetailsModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportingReceivershipCaseDetailsModel::fromJsonObject(QJsonObject json) {

    m_appointment_date_isValid = ::OpenAPI::fromJsonValue(m_appointment_date, json[QString("AppointmentDate")]);
    m_appointment_date_isSet = !json[QString("AppointmentDate")].isNull() && m_appointment_date_isValid;

    m_closed_date_isValid = ::OpenAPI::fromJsonValue(m_closed_date, json[QString("ClosedDate")]);
    m_closed_date_isSet = !json[QString("ClosedDate")].isNull() && m_closed_date_isValid;

    m_closed_reason_isValid = ::OpenAPI::fromJsonValue(m_closed_reason, json[QString("ClosedReason")]);
    m_closed_reason_isSet = !json[QString("ClosedReason")].isNull() && m_closed_reason_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_display_first_receiver_isValid = ::OpenAPI::fromJsonValue(m_display_first_receiver, json[QString("DisplayFirstReceiver")]);
    m_display_first_receiver_isSet = !json[QString("DisplayFirstReceiver")].isNull() && m_display_first_receiver_isValid;

    m_display_freehold_block_manager_isValid = ::OpenAPI::fromJsonValue(m_display_freehold_block_manager, json[QString("DisplayFreeholdBlockManager")]);
    m_display_freehold_block_manager_isSet = !json[QString("DisplayFreeholdBlockManager")].isNull() && m_display_freehold_block_manager_isValid;

    m_display_second_receiver_isValid = ::OpenAPI::fromJsonValue(m_display_second_receiver, json[QString("DisplaySecondReceiver")]);
    m_display_second_receiver_isSet = !json[QString("DisplaySecondReceiver")].isNull() && m_display_second_receiver_isValid;

    m_display_validating_solicitor_isValid = ::OpenAPI::fromJsonValue(m_display_validating_solicitor, json[QString("DisplayValidatingSolicitor")]);
    m_display_validating_solicitor_isSet = !json[QString("DisplayValidatingSolicitor")].isNull() && m_display_validating_solicitor_isValid;

    m_extra_notes_isValid = ::OpenAPI::fromJsonValue(m_extra_notes, json[QString("ExtraNotes")]);
    m_extra_notes_isSet = !json[QString("ExtraNotes")].isNull() && m_extra_notes_isValid;

    m_first_receiver_id_isValid = ::OpenAPI::fromJsonValue(m_first_receiver_id, json[QString("FirstReceiverID")]);
    m_first_receiver_id_isSet = !json[QString("FirstReceiverID")].isNull() && m_first_receiver_id_isValid;

    m_freehold_block_manager_id_isValid = ::OpenAPI::fromJsonValue(m_freehold_block_manager_id, json[QString("FreeholdBlockManagerID")]);
    m_freehold_block_manager_id_isSet = !json[QString("FreeholdBlockManagerID")].isNull() && m_freehold_block_manager_id_isValid;

    m_passed_to_lender_date_isValid = ::OpenAPI::fromJsonValue(m_passed_to_lender_date, json[QString("PassedToLenderDate")]);
    m_passed_to_lender_date_isSet = !json[QString("PassedToLenderDate")].isNull() && m_passed_to_lender_date_isValid;

    m_property_ownable_id_isValid = ::OpenAPI::fromJsonValue(m_property_ownable_id, json[QString("PropertyOwnableID")]);
    m_property_ownable_id_isSet = !json[QString("PropertyOwnableID")].isNull() && m_property_ownable_id_isValid;

    m_second_receiver_id_isValid = ::OpenAPI::fromJsonValue(m_second_receiver_id, json[QString("SecondReceiverID")]);
    m_second_receiver_id_isSet = !json[QString("SecondReceiverID")].isNull() && m_second_receiver_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_tenure_isValid = ::OpenAPI::fromJsonValue(m_tenure, json[QString("Tenure")]);
    m_tenure_isSet = !json[QString("Tenure")].isNull() && m_tenure_isValid;

    m_validating_solicitor_id_isValid = ::OpenAPI::fromJsonValue(m_validating_solicitor_id, json[QString("ValidatingSolicitorID")]);
    m_validating_solicitor_id_isSet = !json[QString("ValidatingSolicitorID")].isNull() && m_validating_solicitor_id_isValid;

    m_valuation_date_isValid = ::OpenAPI::fromJsonValue(m_valuation_date, json[QString("ValuationDate")]);
    m_valuation_date_isSet = !json[QString("ValuationDate")].isNull() && m_valuation_date_isValid;
}

QString OAIReportingReceivershipCaseDetailsModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportingReceivershipCaseDetailsModel::asJsonObject() const {
    QJsonObject obj;
    if (m_appointment_date_isSet) {
        obj.insert(QString("AppointmentDate"), ::OpenAPI::toJsonValue(m_appointment_date));
    }
    if (m_closed_date_isSet) {
        obj.insert(QString("ClosedDate"), ::OpenAPI::toJsonValue(m_closed_date));
    }
    if (m_closed_reason_isSet) {
        obj.insert(QString("ClosedReason"), ::OpenAPI::toJsonValue(m_closed_reason));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_display_first_receiver_isSet) {
        obj.insert(QString("DisplayFirstReceiver"), ::OpenAPI::toJsonValue(m_display_first_receiver));
    }
    if (m_display_freehold_block_manager_isSet) {
        obj.insert(QString("DisplayFreeholdBlockManager"), ::OpenAPI::toJsonValue(m_display_freehold_block_manager));
    }
    if (m_display_second_receiver_isSet) {
        obj.insert(QString("DisplaySecondReceiver"), ::OpenAPI::toJsonValue(m_display_second_receiver));
    }
    if (m_display_validating_solicitor_isSet) {
        obj.insert(QString("DisplayValidatingSolicitor"), ::OpenAPI::toJsonValue(m_display_validating_solicitor));
    }
    if (m_extra_notes_isSet) {
        obj.insert(QString("ExtraNotes"), ::OpenAPI::toJsonValue(m_extra_notes));
    }
    if (m_first_receiver_id_isSet) {
        obj.insert(QString("FirstReceiverID"), ::OpenAPI::toJsonValue(m_first_receiver_id));
    }
    if (m_freehold_block_manager_id_isSet) {
        obj.insert(QString("FreeholdBlockManagerID"), ::OpenAPI::toJsonValue(m_freehold_block_manager_id));
    }
    if (m_passed_to_lender_date_isSet) {
        obj.insert(QString("PassedToLenderDate"), ::OpenAPI::toJsonValue(m_passed_to_lender_date));
    }
    if (m_property_ownable_id_isSet) {
        obj.insert(QString("PropertyOwnableID"), ::OpenAPI::toJsonValue(m_property_ownable_id));
    }
    if (m_second_receiver_id_isSet) {
        obj.insert(QString("SecondReceiverID"), ::OpenAPI::toJsonValue(m_second_receiver_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tenure_isSet) {
        obj.insert(QString("Tenure"), ::OpenAPI::toJsonValue(m_tenure));
    }
    if (m_validating_solicitor_id_isSet) {
        obj.insert(QString("ValidatingSolicitorID"), ::OpenAPI::toJsonValue(m_validating_solicitor_id));
    }
    if (m_valuation_date_isSet) {
        obj.insert(QString("ValuationDate"), ::OpenAPI::toJsonValue(m_valuation_date));
    }
    return obj;
}

QDateTime OAIReportingReceivershipCaseDetailsModel::getAppointmentDate() const {
    return m_appointment_date;
}
void OAIReportingReceivershipCaseDetailsModel::setAppointmentDate(const QDateTime &appointment_date) {
    m_appointment_date = appointment_date;
    m_appointment_date_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_appointment_date_Set() const{
    return m_appointment_date_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_appointment_date_Valid() const{
    return m_appointment_date_isValid;
}

QDateTime OAIReportingReceivershipCaseDetailsModel::getClosedDate() const {
    return m_closed_date;
}
void OAIReportingReceivershipCaseDetailsModel::setClosedDate(const QDateTime &closed_date) {
    m_closed_date = closed_date;
    m_closed_date_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_closed_date_Set() const{
    return m_closed_date_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_closed_date_Valid() const{
    return m_closed_date_isValid;
}

QString OAIReportingReceivershipCaseDetailsModel::getClosedReason() const {
    return m_closed_reason;
}
void OAIReportingReceivershipCaseDetailsModel::setClosedReason(const QString &closed_reason) {
    m_closed_reason = closed_reason;
    m_closed_reason_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_closed_reason_Set() const{
    return m_closed_reason_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_closed_reason_Valid() const{
    return m_closed_reason_isValid;
}

QDateTime OAIReportingReceivershipCaseDetailsModel::getCreatedAt() const {
    return m_created_at;
}
void OAIReportingReceivershipCaseDetailsModel::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIReportingReceivershipCaseDetailsModel::getDisplayFirstReceiver() const {
    return m_display_first_receiver;
}
void OAIReportingReceivershipCaseDetailsModel::setDisplayFirstReceiver(const QString &display_first_receiver) {
    m_display_first_receiver = display_first_receiver;
    m_display_first_receiver_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_display_first_receiver_Set() const{
    return m_display_first_receiver_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_display_first_receiver_Valid() const{
    return m_display_first_receiver_isValid;
}

QString OAIReportingReceivershipCaseDetailsModel::getDisplayFreeholdBlockManager() const {
    return m_display_freehold_block_manager;
}
void OAIReportingReceivershipCaseDetailsModel::setDisplayFreeholdBlockManager(const QString &display_freehold_block_manager) {
    m_display_freehold_block_manager = display_freehold_block_manager;
    m_display_freehold_block_manager_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_display_freehold_block_manager_Set() const{
    return m_display_freehold_block_manager_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_display_freehold_block_manager_Valid() const{
    return m_display_freehold_block_manager_isValid;
}

QString OAIReportingReceivershipCaseDetailsModel::getDisplaySecondReceiver() const {
    return m_display_second_receiver;
}
void OAIReportingReceivershipCaseDetailsModel::setDisplaySecondReceiver(const QString &display_second_receiver) {
    m_display_second_receiver = display_second_receiver;
    m_display_second_receiver_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_display_second_receiver_Set() const{
    return m_display_second_receiver_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_display_second_receiver_Valid() const{
    return m_display_second_receiver_isValid;
}

QString OAIReportingReceivershipCaseDetailsModel::getDisplayValidatingSolicitor() const {
    return m_display_validating_solicitor;
}
void OAIReportingReceivershipCaseDetailsModel::setDisplayValidatingSolicitor(const QString &display_validating_solicitor) {
    m_display_validating_solicitor = display_validating_solicitor;
    m_display_validating_solicitor_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_display_validating_solicitor_Set() const{
    return m_display_validating_solicitor_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_display_validating_solicitor_Valid() const{
    return m_display_validating_solicitor_isValid;
}

QString OAIReportingReceivershipCaseDetailsModel::getExtraNotes() const {
    return m_extra_notes;
}
void OAIReportingReceivershipCaseDetailsModel::setExtraNotes(const QString &extra_notes) {
    m_extra_notes = extra_notes;
    m_extra_notes_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_extra_notes_Set() const{
    return m_extra_notes_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_extra_notes_Valid() const{
    return m_extra_notes_isValid;
}

QString OAIReportingReceivershipCaseDetailsModel::getFirstReceiverId() const {
    return m_first_receiver_id;
}
void OAIReportingReceivershipCaseDetailsModel::setFirstReceiverId(const QString &first_receiver_id) {
    m_first_receiver_id = first_receiver_id;
    m_first_receiver_id_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_first_receiver_id_Set() const{
    return m_first_receiver_id_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_first_receiver_id_Valid() const{
    return m_first_receiver_id_isValid;
}

QString OAIReportingReceivershipCaseDetailsModel::getFreeholdBlockManagerId() const {
    return m_freehold_block_manager_id;
}
void OAIReportingReceivershipCaseDetailsModel::setFreeholdBlockManagerId(const QString &freehold_block_manager_id) {
    m_freehold_block_manager_id = freehold_block_manager_id;
    m_freehold_block_manager_id_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_freehold_block_manager_id_Set() const{
    return m_freehold_block_manager_id_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_freehold_block_manager_id_Valid() const{
    return m_freehold_block_manager_id_isValid;
}

QDateTime OAIReportingReceivershipCaseDetailsModel::getPassedToLenderDate() const {
    return m_passed_to_lender_date;
}
void OAIReportingReceivershipCaseDetailsModel::setPassedToLenderDate(const QDateTime &passed_to_lender_date) {
    m_passed_to_lender_date = passed_to_lender_date;
    m_passed_to_lender_date_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_passed_to_lender_date_Set() const{
    return m_passed_to_lender_date_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_passed_to_lender_date_Valid() const{
    return m_passed_to_lender_date_isValid;
}

QString OAIReportingReceivershipCaseDetailsModel::getPropertyOwnableId() const {
    return m_property_ownable_id;
}
void OAIReportingReceivershipCaseDetailsModel::setPropertyOwnableId(const QString &property_ownable_id) {
    m_property_ownable_id = property_ownable_id;
    m_property_ownable_id_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_property_ownable_id_Set() const{
    return m_property_ownable_id_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_property_ownable_id_Valid() const{
    return m_property_ownable_id_isValid;
}

QString OAIReportingReceivershipCaseDetailsModel::getSecondReceiverId() const {
    return m_second_receiver_id;
}
void OAIReportingReceivershipCaseDetailsModel::setSecondReceiverId(const QString &second_receiver_id) {
    m_second_receiver_id = second_receiver_id;
    m_second_receiver_id_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_second_receiver_id_Set() const{
    return m_second_receiver_id_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_second_receiver_id_Valid() const{
    return m_second_receiver_id_isValid;
}

QString OAIReportingReceivershipCaseDetailsModel::getStatus() const {
    return m_status;
}
void OAIReportingReceivershipCaseDetailsModel::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIReportingReceivershipCaseDetailsModel::getTenure() const {
    return m_tenure;
}
void OAIReportingReceivershipCaseDetailsModel::setTenure(const QString &tenure) {
    m_tenure = tenure;
    m_tenure_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_tenure_Set() const{
    return m_tenure_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_tenure_Valid() const{
    return m_tenure_isValid;
}

QString OAIReportingReceivershipCaseDetailsModel::getValidatingSolicitorId() const {
    return m_validating_solicitor_id;
}
void OAIReportingReceivershipCaseDetailsModel::setValidatingSolicitorId(const QString &validating_solicitor_id) {
    m_validating_solicitor_id = validating_solicitor_id;
    m_validating_solicitor_id_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_validating_solicitor_id_Set() const{
    return m_validating_solicitor_id_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_validating_solicitor_id_Valid() const{
    return m_validating_solicitor_id_isValid;
}

QDateTime OAIReportingReceivershipCaseDetailsModel::getValuationDate() const {
    return m_valuation_date;
}
void OAIReportingReceivershipCaseDetailsModel::setValuationDate(const QDateTime &valuation_date) {
    m_valuation_date = valuation_date;
    m_valuation_date_isSet = true;
}

bool OAIReportingReceivershipCaseDetailsModel::is_valuation_date_Set() const{
    return m_valuation_date_isSet;
}

bool OAIReportingReceivershipCaseDetailsModel::is_valuation_date_Valid() const{
    return m_valuation_date_isValid;
}

bool OAIReportingReceivershipCaseDetailsModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appointment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_first_receiver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_freehold_block_manager_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_second_receiver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_validating_solicitor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_receiver_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freehold_block_manager_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passed_to_lender_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_ownable_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_receiver_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validating_solicitor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valuation_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportingReceivershipCaseDetailsModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
