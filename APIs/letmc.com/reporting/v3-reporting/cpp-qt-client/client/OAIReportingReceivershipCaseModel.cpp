/**
 * LetMC Api V3, reporting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-reporting
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportingReceivershipCaseModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportingReceivershipCaseModel::OAIReportingReceivershipCaseModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportingReceivershipCaseModel::OAIReportingReceivershipCaseModel() {
    this->initializeModel();
}

OAIReportingReceivershipCaseModel::~OAIReportingReceivershipCaseModel() {}

void OAIReportingReceivershipCaseModel::initializeModel() {

    m_case_details_isSet = false;
    m_case_details_isValid = false;

    m_exit_strategy_isSet = false;
    m_exit_strategy_isValid = false;

    m_litigation_isSet = false;
    m_litigation_isValid = false;
}

void OAIReportingReceivershipCaseModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportingReceivershipCaseModel::fromJsonObject(QJsonObject json) {

    m_case_details_isValid = ::OpenAPI::fromJsonValue(m_case_details, json[QString("CaseDetails")]);
    m_case_details_isSet = !json[QString("CaseDetails")].isNull() && m_case_details_isValid;

    m_exit_strategy_isValid = ::OpenAPI::fromJsonValue(m_exit_strategy, json[QString("ExitStrategy")]);
    m_exit_strategy_isSet = !json[QString("ExitStrategy")].isNull() && m_exit_strategy_isValid;

    m_litigation_isValid = ::OpenAPI::fromJsonValue(m_litigation, json[QString("Litigation")]);
    m_litigation_isSet = !json[QString("Litigation")].isNull() && m_litigation_isValid;
}

QString OAIReportingReceivershipCaseModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportingReceivershipCaseModel::asJsonObject() const {
    QJsonObject obj;
    if (m_case_details.isSet()) {
        obj.insert(QString("CaseDetails"), ::OpenAPI::toJsonValue(m_case_details));
    }
    if (m_exit_strategy.size() > 0) {
        obj.insert(QString("ExitStrategy"), ::OpenAPI::toJsonValue(m_exit_strategy));
    }
    if (m_litigation.size() > 0) {
        obj.insert(QString("Litigation"), ::OpenAPI::toJsonValue(m_litigation));
    }
    return obj;
}

OAIReportingReceivershipCaseDetailsModel OAIReportingReceivershipCaseModel::getCaseDetails() const {
    return m_case_details;
}
void OAIReportingReceivershipCaseModel::setCaseDetails(const OAIReportingReceivershipCaseDetailsModel &case_details) {
    m_case_details = case_details;
    m_case_details_isSet = true;
}

bool OAIReportingReceivershipCaseModel::is_case_details_Set() const{
    return m_case_details_isSet;
}

bool OAIReportingReceivershipCaseModel::is_case_details_Valid() const{
    return m_case_details_isValid;
}

QList<OAIReportingReceivershipExitStrategyModel> OAIReportingReceivershipCaseModel::getExitStrategy() const {
    return m_exit_strategy;
}
void OAIReportingReceivershipCaseModel::setExitStrategy(const QList<OAIReportingReceivershipExitStrategyModel> &exit_strategy) {
    m_exit_strategy = exit_strategy;
    m_exit_strategy_isSet = true;
}

bool OAIReportingReceivershipCaseModel::is_exit_strategy_Set() const{
    return m_exit_strategy_isSet;
}

bool OAIReportingReceivershipCaseModel::is_exit_strategy_Valid() const{
    return m_exit_strategy_isValid;
}

QList<OAIReportingReceivershipLitigationModel> OAIReportingReceivershipCaseModel::getLitigation() const {
    return m_litigation;
}
void OAIReportingReceivershipCaseModel::setLitigation(const QList<OAIReportingReceivershipLitigationModel> &litigation) {
    m_litigation = litigation;
    m_litigation_isSet = true;
}

bool OAIReportingReceivershipCaseModel::is_litigation_Set() const{
    return m_litigation_isSet;
}

bool OAIReportingReceivershipCaseModel::is_litigation_Valid() const{
    return m_litigation_isValid;
}

bool OAIReportingReceivershipCaseModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_case_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_strategy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_litigation.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportingReceivershipCaseModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
