/**
 * LetMC Api V3, reporting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-reporting
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReportingReceivershipCaseDetailsModel model module.
 * @module model/ReportingReceivershipCaseDetailsModel
 * @version v3-reporting
 */
class ReportingReceivershipCaseDetailsModel {
    /**
     * Constructs a new <code>ReportingReceivershipCaseDetailsModel</code>.
     * Helper Model - Case Details
     * @alias module:model/ReportingReceivershipCaseDetailsModel
     */
    constructor() { 
        
        ReportingReceivershipCaseDetailsModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportingReceivershipCaseDetailsModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportingReceivershipCaseDetailsModel} obj Optional instance to populate.
     * @return {module:model/ReportingReceivershipCaseDetailsModel} The populated <code>ReportingReceivershipCaseDetailsModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportingReceivershipCaseDetailsModel();

            if (data.hasOwnProperty('AppointmentDate')) {
                obj['AppointmentDate'] = ApiClient.convertToType(data['AppointmentDate'], 'Date');
            }
            if (data.hasOwnProperty('ClosedDate')) {
                obj['ClosedDate'] = ApiClient.convertToType(data['ClosedDate'], 'Date');
            }
            if (data.hasOwnProperty('ClosedReason')) {
                obj['ClosedReason'] = ApiClient.convertToType(data['ClosedReason'], 'String');
            }
            if (data.hasOwnProperty('CreatedAt')) {
                obj['CreatedAt'] = ApiClient.convertToType(data['CreatedAt'], 'Date');
            }
            if (data.hasOwnProperty('DisplayFirstReceiver')) {
                obj['DisplayFirstReceiver'] = ApiClient.convertToType(data['DisplayFirstReceiver'], 'String');
            }
            if (data.hasOwnProperty('DisplayFreeholdBlockManager')) {
                obj['DisplayFreeholdBlockManager'] = ApiClient.convertToType(data['DisplayFreeholdBlockManager'], 'String');
            }
            if (data.hasOwnProperty('DisplaySecondReceiver')) {
                obj['DisplaySecondReceiver'] = ApiClient.convertToType(data['DisplaySecondReceiver'], 'String');
            }
            if (data.hasOwnProperty('DisplayValidatingSolicitor')) {
                obj['DisplayValidatingSolicitor'] = ApiClient.convertToType(data['DisplayValidatingSolicitor'], 'String');
            }
            if (data.hasOwnProperty('ExtraNotes')) {
                obj['ExtraNotes'] = ApiClient.convertToType(data['ExtraNotes'], 'String');
            }
            if (data.hasOwnProperty('FirstReceiverID')) {
                obj['FirstReceiverID'] = ApiClient.convertToType(data['FirstReceiverID'], 'String');
            }
            if (data.hasOwnProperty('FreeholdBlockManagerID')) {
                obj['FreeholdBlockManagerID'] = ApiClient.convertToType(data['FreeholdBlockManagerID'], 'String');
            }
            if (data.hasOwnProperty('PassedToLenderDate')) {
                obj['PassedToLenderDate'] = ApiClient.convertToType(data['PassedToLenderDate'], 'Date');
            }
            if (data.hasOwnProperty('PropertyOwnableID')) {
                obj['PropertyOwnableID'] = ApiClient.convertToType(data['PropertyOwnableID'], 'String');
            }
            if (data.hasOwnProperty('SecondReceiverID')) {
                obj['SecondReceiverID'] = ApiClient.convertToType(data['SecondReceiverID'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('Tenure')) {
                obj['Tenure'] = ApiClient.convertToType(data['Tenure'], 'String');
            }
            if (data.hasOwnProperty('ValidatingSolicitorID')) {
                obj['ValidatingSolicitorID'] = ApiClient.convertToType(data['ValidatingSolicitorID'], 'String');
            }
            if (data.hasOwnProperty('ValuationDate')) {
                obj['ValuationDate'] = ApiClient.convertToType(data['ValuationDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportingReceivershipCaseDetailsModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportingReceivershipCaseDetailsModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ClosedReason'] && !(typeof data['ClosedReason'] === 'string' || data['ClosedReason'] instanceof String)) {
            throw new Error("Expected the field `ClosedReason` to be a primitive type in the JSON string but got " + data['ClosedReason']);
        }
        // ensure the json data is a string
        if (data['DisplayFirstReceiver'] && !(typeof data['DisplayFirstReceiver'] === 'string' || data['DisplayFirstReceiver'] instanceof String)) {
            throw new Error("Expected the field `DisplayFirstReceiver` to be a primitive type in the JSON string but got " + data['DisplayFirstReceiver']);
        }
        // ensure the json data is a string
        if (data['DisplayFreeholdBlockManager'] && !(typeof data['DisplayFreeholdBlockManager'] === 'string' || data['DisplayFreeholdBlockManager'] instanceof String)) {
            throw new Error("Expected the field `DisplayFreeholdBlockManager` to be a primitive type in the JSON string but got " + data['DisplayFreeholdBlockManager']);
        }
        // ensure the json data is a string
        if (data['DisplaySecondReceiver'] && !(typeof data['DisplaySecondReceiver'] === 'string' || data['DisplaySecondReceiver'] instanceof String)) {
            throw new Error("Expected the field `DisplaySecondReceiver` to be a primitive type in the JSON string but got " + data['DisplaySecondReceiver']);
        }
        // ensure the json data is a string
        if (data['DisplayValidatingSolicitor'] && !(typeof data['DisplayValidatingSolicitor'] === 'string' || data['DisplayValidatingSolicitor'] instanceof String)) {
            throw new Error("Expected the field `DisplayValidatingSolicitor` to be a primitive type in the JSON string but got " + data['DisplayValidatingSolicitor']);
        }
        // ensure the json data is a string
        if (data['ExtraNotes'] && !(typeof data['ExtraNotes'] === 'string' || data['ExtraNotes'] instanceof String)) {
            throw new Error("Expected the field `ExtraNotes` to be a primitive type in the JSON string but got " + data['ExtraNotes']);
        }
        // ensure the json data is a string
        if (data['FirstReceiverID'] && !(typeof data['FirstReceiverID'] === 'string' || data['FirstReceiverID'] instanceof String)) {
            throw new Error("Expected the field `FirstReceiverID` to be a primitive type in the JSON string but got " + data['FirstReceiverID']);
        }
        // ensure the json data is a string
        if (data['FreeholdBlockManagerID'] && !(typeof data['FreeholdBlockManagerID'] === 'string' || data['FreeholdBlockManagerID'] instanceof String)) {
            throw new Error("Expected the field `FreeholdBlockManagerID` to be a primitive type in the JSON string but got " + data['FreeholdBlockManagerID']);
        }
        // ensure the json data is a string
        if (data['PropertyOwnableID'] && !(typeof data['PropertyOwnableID'] === 'string' || data['PropertyOwnableID'] instanceof String)) {
            throw new Error("Expected the field `PropertyOwnableID` to be a primitive type in the JSON string but got " + data['PropertyOwnableID']);
        }
        // ensure the json data is a string
        if (data['SecondReceiverID'] && !(typeof data['SecondReceiverID'] === 'string' || data['SecondReceiverID'] instanceof String)) {
            throw new Error("Expected the field `SecondReceiverID` to be a primitive type in the JSON string but got " + data['SecondReceiverID']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['Tenure'] && !(typeof data['Tenure'] === 'string' || data['Tenure'] instanceof String)) {
            throw new Error("Expected the field `Tenure` to be a primitive type in the JSON string but got " + data['Tenure']);
        }
        // ensure the json data is a string
        if (data['ValidatingSolicitorID'] && !(typeof data['ValidatingSolicitorID'] === 'string' || data['ValidatingSolicitorID'] instanceof String)) {
            throw new Error("Expected the field `ValidatingSolicitorID` to be a primitive type in the JSON string but got " + data['ValidatingSolicitorID']);
        }

        return true;
    }


}



/**
 * Appointment Date
 * @member {Date} AppointmentDate
 */
ReportingReceivershipCaseDetailsModel.prototype['AppointmentDate'] = undefined;

/**
 * Closed Date
 * @member {Date} ClosedDate
 */
ReportingReceivershipCaseDetailsModel.prototype['ClosedDate'] = undefined;

/**
 * Closed Reason
 * @member {module:model/ReportingReceivershipCaseDetailsModel.ClosedReasonEnum} ClosedReason
 */
ReportingReceivershipCaseDetailsModel.prototype['ClosedReason'] = undefined;

/**
 * Created At
 * @member {Date} CreatedAt
 */
ReportingReceivershipCaseDetailsModel.prototype['CreatedAt'] = undefined;

/**
 * Display First Receiver (ApplicationStaff)
 * @member {String} DisplayFirstReceiver
 */
ReportingReceivershipCaseDetailsModel.prototype['DisplayFirstReceiver'] = undefined;

/**
 * Display Freehold Block Manager
 * @member {String} DisplayFreeholdBlockManager
 */
ReportingReceivershipCaseDetailsModel.prototype['DisplayFreeholdBlockManager'] = undefined;

/**
 * Display Second Receiver (ApplicationStaff)
 * @member {String} DisplaySecondReceiver
 */
ReportingReceivershipCaseDetailsModel.prototype['DisplaySecondReceiver'] = undefined;

/**
 * Display Validating Solicitor
 * @member {String} DisplayValidatingSolicitor
 */
ReportingReceivershipCaseDetailsModel.prototype['DisplayValidatingSolicitor'] = undefined;

/**
 * Extra Notes
 * @member {String} ExtraNotes
 */
ReportingReceivershipCaseDetailsModel.prototype['ExtraNotes'] = undefined;

/**
 * First Receiver ID (ApplicationStaff)
 * @member {String} FirstReceiverID
 */
ReportingReceivershipCaseDetailsModel.prototype['FirstReceiverID'] = undefined;

/**
 * Freehold Block Manager ID
 * @member {String} FreeholdBlockManagerID
 */
ReportingReceivershipCaseDetailsModel.prototype['FreeholdBlockManagerID'] = undefined;

/**
 * Passed to Lender Date
 * @member {Date} PassedToLenderDate
 */
ReportingReceivershipCaseDetailsModel.prototype['PassedToLenderDate'] = undefined;

/**
 * The unique Property Ownable identifier
 * @member {String} PropertyOwnableID
 */
ReportingReceivershipCaseDetailsModel.prototype['PropertyOwnableID'] = undefined;

/**
 * Second Receiver ID (ApplicationStaff)
 * @member {String} SecondReceiverID
 */
ReportingReceivershipCaseDetailsModel.prototype['SecondReceiverID'] = undefined;

/**
 * Status
 * @member {module:model/ReportingReceivershipCaseDetailsModel.StatusEnum} Status
 */
ReportingReceivershipCaseDetailsModel.prototype['Status'] = undefined;

/**
 * Tenure
 * @member {module:model/ReportingReceivershipCaseDetailsModel.TenureEnum} Tenure
 */
ReportingReceivershipCaseDetailsModel.prototype['Tenure'] = undefined;

/**
 * The unique Validating Solicitor identifier
 * @member {String} ValidatingSolicitorID
 */
ReportingReceivershipCaseDetailsModel.prototype['ValidatingSolicitorID'] = undefined;

/**
 * Valuation Date
 * @member {Date} ValuationDate
 */
ReportingReceivershipCaseDetailsModel.prototype['ValuationDate'] = undefined;





/**
 * Allowed values for the <code>ClosedReason</code> property.
 * @enum {String}
 * @readonly
 */
ReportingReceivershipCaseDetailsModel['ClosedReasonEnum'] = {

    /**
     * value: "PropertySold"
     * @const
     */
    "PropertySold": "PropertySold",

    /**
     * value: "HandedBackToBorrower"
     * @const
     */
    "HandedBackToBorrower": "HandedBackToBorrower",

    /**
     * value: "AppointmentIssues"
     * @const
     */
    "AppointmentIssues": "AppointmentIssues",

    /**
     * value: "LenderSeekingPossession"
     * @const
     */
    "LenderSeekingPossession": "LenderSeekingPossession",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};


/**
 * Allowed values for the <code>Status</code> property.
 * @enum {String}
 * @readonly
 */
ReportingReceivershipCaseDetailsModel['StatusEnum'] = {

    /**
     * value: "Opened"
     * @const
     */
    "Opened": "Opened",

    /**
     * value: "Litigation"
     * @const
     */
    "Litigation": "Litigation",

    /**
     * value: "Closed"
     * @const
     */
    "Closed": "Closed"
};


/**
 * Allowed values for the <code>Tenure</code> property.
 * @enum {String}
 * @readonly
 */
ReportingReceivershipCaseDetailsModel['TenureEnum'] = {

    /**
     * value: "Freehold"
     * @const
     */
    "Freehold": "Freehold",

    /**
     * value: "Leasehold"
     * @const
     */
    "Leasehold": "Leasehold",

    /**
     * value: "Commonhold"
     * @const
     */
    "Commonhold": "Commonhold",

    /**
     * value: "ShareOfFreehold"
     * @const
     */
    "ShareOfFreehold": "ShareOfFreehold",

    /**
     * value: "FlyingFreehold"
     * @const
     */
    "FlyingFreehold": "FlyingFreehold",

    /**
     * value: "ShareTransfer"
     * @const
     */
    "ShareTransfer": "ShareTransfer",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown"
};



export default ReportingReceivershipCaseDetailsModel;

