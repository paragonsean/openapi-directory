/**
 * LetMC Api V3, reporting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-reporting
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReportingPropertyMortgageModel model module.
 * @module model/ReportingPropertyMortgageModel
 * @version v3-reporting
 */
class ReportingPropertyMortgageModel {
    /**
     * Constructs a new <code>ReportingPropertyMortgageModel</code>.
     * Represents an receivership case.
     * @alias module:model/ReportingPropertyMortgageModel
     */
    constructor() { 
        
        ReportingPropertyMortgageModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportingPropertyMortgageModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportingPropertyMortgageModel} obj Optional instance to populate.
     * @return {module:model/ReportingPropertyMortgageModel} The populated <code>ReportingPropertyMortgageModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportingPropertyMortgageModel();

            if (data.hasOwnProperty('Amount')) {
                obj['Amount'] = ApiClient.convertToType(data['Amount'], 'Number');
            }
            if (data.hasOwnProperty('BorrowersAccountName')) {
                obj['BorrowersAccountName'] = ApiClient.convertToType(data['BorrowersAccountName'], 'String');
            }
            if (data.hasOwnProperty('CreatedAt')) {
                obj['CreatedAt'] = ApiClient.convertToType(data['CreatedAt'], 'Date');
            }
            if (data.hasOwnProperty('DisplayType')) {
                obj['DisplayType'] = ApiClient.convertToType(data['DisplayType'], 'String');
            }
            if (data.hasOwnProperty('ExtraNotes')) {
                obj['ExtraNotes'] = ApiClient.convertToType(data['ExtraNotes'], 'String');
            }
            if (data.hasOwnProperty('From')) {
                obj['From'] = ApiClient.convertToType(data['From'], 'Date');
            }
            if (data.hasOwnProperty('IntrestRate')) {
                obj['IntrestRate'] = ApiClient.convertToType(data['IntrestRate'], 'Number');
            }
            if (data.hasOwnProperty('MarketValue')) {
                obj['MarketValue'] = ApiClient.convertToType(data['MarketValue'], 'Number');
            }
            if (data.hasOwnProperty('MonthlyPayment')) {
                obj['MonthlyPayment'] = ApiClient.convertToType(data['MonthlyPayment'], 'Number');
            }
            if (data.hasOwnProperty('MortgageAccountNumber')) {
                obj['MortgageAccountNumber'] = ApiClient.convertToType(data['MortgageAccountNumber'], 'String');
            }
            if (data.hasOwnProperty('MortgageProvider')) {
                obj['MortgageProvider'] = ApiClient.convertToType(data['MortgageProvider'], 'String');
            }
            if (data.hasOwnProperty('PropertyOwnableID')) {
                obj['PropertyOwnableID'] = ApiClient.convertToType(data['PropertyOwnableID'], 'String');
            }
            if (data.hasOwnProperty('SalesInstructionID')) {
                obj['SalesInstructionID'] = ApiClient.convertToType(data['SalesInstructionID'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('ValuationDate')) {
                obj['ValuationDate'] = ApiClient.convertToType(data['ValuationDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportingPropertyMortgageModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportingPropertyMortgageModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BorrowersAccountName'] && !(typeof data['BorrowersAccountName'] === 'string' || data['BorrowersAccountName'] instanceof String)) {
            throw new Error("Expected the field `BorrowersAccountName` to be a primitive type in the JSON string but got " + data['BorrowersAccountName']);
        }
        // ensure the json data is a string
        if (data['DisplayType'] && !(typeof data['DisplayType'] === 'string' || data['DisplayType'] instanceof String)) {
            throw new Error("Expected the field `DisplayType` to be a primitive type in the JSON string but got " + data['DisplayType']);
        }
        // ensure the json data is a string
        if (data['ExtraNotes'] && !(typeof data['ExtraNotes'] === 'string' || data['ExtraNotes'] instanceof String)) {
            throw new Error("Expected the field `ExtraNotes` to be a primitive type in the JSON string but got " + data['ExtraNotes']);
        }
        // ensure the json data is a string
        if (data['MortgageAccountNumber'] && !(typeof data['MortgageAccountNumber'] === 'string' || data['MortgageAccountNumber'] instanceof String)) {
            throw new Error("Expected the field `MortgageAccountNumber` to be a primitive type in the JSON string but got " + data['MortgageAccountNumber']);
        }
        // ensure the json data is a string
        if (data['MortgageProvider'] && !(typeof data['MortgageProvider'] === 'string' || data['MortgageProvider'] instanceof String)) {
            throw new Error("Expected the field `MortgageProvider` to be a primitive type in the JSON string but got " + data['MortgageProvider']);
        }
        // ensure the json data is a string
        if (data['PropertyOwnableID'] && !(typeof data['PropertyOwnableID'] === 'string' || data['PropertyOwnableID'] instanceof String)) {
            throw new Error("Expected the field `PropertyOwnableID` to be a primitive type in the JSON string but got " + data['PropertyOwnableID']);
        }
        // ensure the json data is a string
        if (data['SalesInstructionID'] && !(typeof data['SalesInstructionID'] === 'string' || data['SalesInstructionID'] instanceof String)) {
            throw new Error("Expected the field `SalesInstructionID` to be a primitive type in the JSON string but got " + data['SalesInstructionID']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}



/**
 * Amount.
 * @member {Number} Amount
 */
ReportingPropertyMortgageModel.prototype['Amount'] = undefined;

/**
 * Borrowers Account Name
 * @member {String} BorrowersAccountName
 */
ReportingPropertyMortgageModel.prototype['BorrowersAccountName'] = undefined;

/**
 * The created at date.
 * @member {Date} CreatedAt
 */
ReportingPropertyMortgageModel.prototype['CreatedAt'] = undefined;

/**
 * Friendly type name.
 * @member {String} DisplayType
 */
ReportingPropertyMortgageModel.prototype['DisplayType'] = undefined;

/**
 * Extra notes.
 * @member {String} ExtraNotes
 */
ReportingPropertyMortgageModel.prototype['ExtraNotes'] = undefined;

/**
 * The from date.
 * @member {Date} From
 */
ReportingPropertyMortgageModel.prototype['From'] = undefined;

/**
 * The mortgages intrest rate.
 * @member {Number} IntrestRate
 */
ReportingPropertyMortgageModel.prototype['IntrestRate'] = undefined;

/**
 * The property market value.
 * @member {Number} MarketValue
 */
ReportingPropertyMortgageModel.prototype['MarketValue'] = undefined;

/**
 * The mortgages monthly payment.
 * @member {Number} MonthlyPayment
 */
ReportingPropertyMortgageModel.prototype['MonthlyPayment'] = undefined;

/**
 * Mortgage account number.
 * @member {String} MortgageAccountNumber
 */
ReportingPropertyMortgageModel.prototype['MortgageAccountNumber'] = undefined;

/**
 * Mortgages provider.
 * @member {String} MortgageProvider
 */
ReportingPropertyMortgageModel.prototype['MortgageProvider'] = undefined;

/**
 * The unique Property Ownable identifier.
 * @member {String} PropertyOwnableID
 */
ReportingPropertyMortgageModel.prototype['PropertyOwnableID'] = undefined;

/**
 * The unique Sales Instruction identifier.
 * @member {String} SalesInstructionID
 */
ReportingPropertyMortgageModel.prototype['SalesInstructionID'] = undefined;

/**
 * The mortgages type.
 * @member {module:model/ReportingPropertyMortgageModel.TypeEnum} Type
 */
ReportingPropertyMortgageModel.prototype['Type'] = undefined;

/**
 * The mortgages valuation date.
 * @member {Date} ValuationDate
 */
ReportingPropertyMortgageModel.prototype['ValuationDate'] = undefined;





/**
 * Allowed values for the <code>Type</code> property.
 * @enum {String}
 * @readonly
 */
ReportingPropertyMortgageModel['TypeEnum'] = {

    /**
     * value: "InterestOnlyFixedRate"
     * @const
     */
    "InterestOnlyFixedRate": "InterestOnlyFixedRate",

    /**
     * value: "InterestOnlySVR"
     * @const
     */
    "InterestOnlySVR": "InterestOnlySVR",

    /**
     * value: "InterestOnlyDiscountMortgage"
     * @const
     */
    "InterestOnlyDiscountMortgage": "InterestOnlyDiscountMortgage",

    /**
     * value: "InterestOnlyTracker"
     * @const
     */
    "InterestOnlyTracker": "InterestOnlyTracker",

    /**
     * value: "InterestOnlyCapped"
     * @const
     */
    "InterestOnlyCapped": "InterestOnlyCapped",

    /**
     * value: "InterestOnlyOffset"
     * @const
     */
    "InterestOnlyOffset": "InterestOnlyOffset",

    /**
     * value: "CapitalRepaymentFixedRate"
     * @const
     */
    "CapitalRepaymentFixedRate": "CapitalRepaymentFixedRate",

    /**
     * value: "CapitalRepaymentSVR"
     * @const
     */
    "CapitalRepaymentSVR": "CapitalRepaymentSVR",

    /**
     * value: "CapitalRepaymentDiscountMortgage"
     * @const
     */
    "CapitalRepaymentDiscountMortgage": "CapitalRepaymentDiscountMortgage",

    /**
     * value: "CapitalRepaymentTracker"
     * @const
     */
    "CapitalRepaymentTracker": "CapitalRepaymentTracker",

    /**
     * value: "CapitalRepaymentCapped"
     * @const
     */
    "CapitalRepaymentCapped": "CapitalRepaymentCapped",

    /**
     * value: "CapitalRepaymentOffset"
     * @const
     */
    "CapitalRepaymentOffset": "CapitalRepaymentOffset"
};



export default ReportingPropertyMortgageModel;

