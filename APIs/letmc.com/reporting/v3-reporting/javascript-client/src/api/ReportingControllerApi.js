/**
 * LetMC Api V3, reporting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-reporting
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ReportingPropertyMortgageModelResults from '../model/ReportingPropertyMortgageModelResults';
import ReportingReceivershipCaseModelResults from '../model/ReportingReceivershipCaseModelResults';

/**
* ReportingController service.
* @module api/ReportingControllerApi
* @version v3-reporting
*/
export default class ReportingControllerApi {

    /**
    * Constructs a new ReportingControllerApi. 
    * @alias module:api/ReportingControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reportingControllerMortgagesByCreatedDate operation.
     * @callback module:api/ReportingControllerApi~reportingControllerMortgagesByCreatedDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportingPropertyMortgageModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a collection of mortgages by created date from a specific date
     * @param {String} shortName The unique client short-name
     * @param {String} branchID The unique ID of the Branch
     * @param {Date} startDate The date to search from.
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {module:api/ReportingControllerApi~reportingControllerMortgagesByCreatedDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportingPropertyMortgageModelResults}
     */
    reportingControllerMortgagesByCreatedDate(shortName, branchID, startDate, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling reportingControllerMortgagesByCreatedDate");
      }
      // verify the required parameter 'branchID' is set
      if (branchID === undefined || branchID === null) {
        throw new Error("Missing the required parameter 'branchID' when calling reportingControllerMortgagesByCreatedDate");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling reportingControllerMortgagesByCreatedDate");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling reportingControllerMortgagesByCreatedDate");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling reportingControllerMortgagesByCreatedDate");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'branchID': branchID,
        'startDate': startDate,
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ReportingPropertyMortgageModelResults;
      return this.apiClient.callApi(
        '/v3/reporting/{shortName}/mortgagesbycreateddate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportingControllerMortgagesByUpdatedDate operation.
     * @callback module:api/ReportingControllerApi~reportingControllerMortgagesByUpdatedDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportingPropertyMortgageModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a collection of all mortgages updated from a specific date
     * @param {String} shortName The unique client short-name
     * @param {String} branchID The unique ID of the Branch
     * @param {Date} startDate The date to search from.
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {module:api/ReportingControllerApi~reportingControllerMortgagesByUpdatedDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportingPropertyMortgageModelResults}
     */
    reportingControllerMortgagesByUpdatedDate(shortName, branchID, startDate, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling reportingControllerMortgagesByUpdatedDate");
      }
      // verify the required parameter 'branchID' is set
      if (branchID === undefined || branchID === null) {
        throw new Error("Missing the required parameter 'branchID' when calling reportingControllerMortgagesByUpdatedDate");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling reportingControllerMortgagesByUpdatedDate");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling reportingControllerMortgagesByUpdatedDate");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling reportingControllerMortgagesByUpdatedDate");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'branchID': branchID,
        'startDate': startDate,
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ReportingPropertyMortgageModelResults;
      return this.apiClient.callApi(
        '/v3/reporting/{shortName}/mortgagesbyupdateddate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportingControllerRepossessionsByCreatedDate operation.
     * @callback module:api/ReportingControllerApi~reportingControllerRepossessionsByCreatedDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportingReceivershipCaseModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a collection of repossessions by created date from a specific date
     * @param {String} shortName The unique client short-name
     * @param {String} branchID The unique ID of the Branch
     * @param {Date} startDate The date to search from.
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {module:api/ReportingControllerApi~reportingControllerRepossessionsByCreatedDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportingReceivershipCaseModelResults}
     */
    reportingControllerRepossessionsByCreatedDate(shortName, branchID, startDate, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling reportingControllerRepossessionsByCreatedDate");
      }
      // verify the required parameter 'branchID' is set
      if (branchID === undefined || branchID === null) {
        throw new Error("Missing the required parameter 'branchID' when calling reportingControllerRepossessionsByCreatedDate");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling reportingControllerRepossessionsByCreatedDate");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling reportingControllerRepossessionsByCreatedDate");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling reportingControllerRepossessionsByCreatedDate");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'branchID': branchID,
        'startDate': startDate,
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ReportingReceivershipCaseModelResults;
      return this.apiClient.callApi(
        '/v3/reporting/{shortName}/repossesionsbycreateddate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportingControllerRepossessionsByUpdatedDate operation.
     * @callback module:api/ReportingControllerApi~reportingControllerRepossessionsByUpdatedDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportingReceivershipCaseModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a collection of all reposessions updated from a specific date
     * @param {String} shortName The unique client short-name
     * @param {String} branchID The unique ID of the Branch
     * @param {Date} startDate The date to search from.
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {module:api/ReportingControllerApi~reportingControllerRepossessionsByUpdatedDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportingReceivershipCaseModelResults}
     */
    reportingControllerRepossessionsByUpdatedDate(shortName, branchID, startDate, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling reportingControllerRepossessionsByUpdatedDate");
      }
      // verify the required parameter 'branchID' is set
      if (branchID === undefined || branchID === null) {
        throw new Error("Missing the required parameter 'branchID' when calling reportingControllerRepossessionsByUpdatedDate");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling reportingControllerRepossessionsByUpdatedDate");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling reportingControllerRepossessionsByUpdatedDate");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling reportingControllerRepossessionsByUpdatedDate");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'branchID': branchID,
        'startDate': startDate,
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ReportingReceivershipCaseModelResults;
      return this.apiClient.callApi(
        '/v3/reporting/{shortName}/repossesionsbyupdateddate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
