/*
 * LetMC Api V3, reporting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-reporting
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.ReportingPropertyMortgageModelResults;
import org.openapitools.client.model.ReportingReceivershipCaseModelResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportingControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportingControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportingControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reportingControllerMortgagesByCreatedDate
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The date to search from. (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingControllerMortgagesByCreatedDateCall(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/reporting/{shortName}/mortgagesbycreateddate"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branchID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branchID", branchID));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportingControllerMortgagesByCreatedDateValidateBeforeCall(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling reportingControllerMortgagesByCreatedDate(Async)");
        }

        // verify the required parameter 'branchID' is set
        if (branchID == null) {
            throw new ApiException("Missing the required parameter 'branchID' when calling reportingControllerMortgagesByCreatedDate(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportingControllerMortgagesByCreatedDate(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling reportingControllerMortgagesByCreatedDate(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling reportingControllerMortgagesByCreatedDate(Async)");
        }

        return reportingControllerMortgagesByCreatedDateCall(shortName, branchID, startDate, offset, count, _callback);

    }

    /**
     * Return a collection of mortgages by created date from a specific date
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The date to search from. (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ReportingPropertyMortgageModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ReportingPropertyMortgageModelResults reportingControllerMortgagesByCreatedDate(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count) throws ApiException {
        ApiResponse<ReportingPropertyMortgageModelResults> localVarResp = reportingControllerMortgagesByCreatedDateWithHttpInfo(shortName, branchID, startDate, offset, count);
        return localVarResp.getData();
    }

    /**
     * Return a collection of mortgages by created date from a specific date
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The date to search from. (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;ReportingPropertyMortgageModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportingPropertyMortgageModelResults> reportingControllerMortgagesByCreatedDateWithHttpInfo(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = reportingControllerMortgagesByCreatedDateValidateBeforeCall(shortName, branchID, startDate, offset, count, null);
        Type localVarReturnType = new TypeToken<ReportingPropertyMortgageModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a collection of mortgages by created date from a specific date (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The date to search from. (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingControllerMortgagesByCreatedDateAsync(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count, final ApiCallback<ReportingPropertyMortgageModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportingControllerMortgagesByCreatedDateValidateBeforeCall(shortName, branchID, startDate, offset, count, _callback);
        Type localVarReturnType = new TypeToken<ReportingPropertyMortgageModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportingControllerMortgagesByUpdatedDate
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The date to search from. (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingControllerMortgagesByUpdatedDateCall(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/reporting/{shortName}/mortgagesbyupdateddate"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branchID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branchID", branchID));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportingControllerMortgagesByUpdatedDateValidateBeforeCall(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling reportingControllerMortgagesByUpdatedDate(Async)");
        }

        // verify the required parameter 'branchID' is set
        if (branchID == null) {
            throw new ApiException("Missing the required parameter 'branchID' when calling reportingControllerMortgagesByUpdatedDate(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportingControllerMortgagesByUpdatedDate(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling reportingControllerMortgagesByUpdatedDate(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling reportingControllerMortgagesByUpdatedDate(Async)");
        }

        return reportingControllerMortgagesByUpdatedDateCall(shortName, branchID, startDate, offset, count, _callback);

    }

    /**
     * Return a collection of all mortgages updated from a specific date
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The date to search from. (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ReportingPropertyMortgageModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ReportingPropertyMortgageModelResults reportingControllerMortgagesByUpdatedDate(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count) throws ApiException {
        ApiResponse<ReportingPropertyMortgageModelResults> localVarResp = reportingControllerMortgagesByUpdatedDateWithHttpInfo(shortName, branchID, startDate, offset, count);
        return localVarResp.getData();
    }

    /**
     * Return a collection of all mortgages updated from a specific date
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The date to search from. (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;ReportingPropertyMortgageModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportingPropertyMortgageModelResults> reportingControllerMortgagesByUpdatedDateWithHttpInfo(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = reportingControllerMortgagesByUpdatedDateValidateBeforeCall(shortName, branchID, startDate, offset, count, null);
        Type localVarReturnType = new TypeToken<ReportingPropertyMortgageModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a collection of all mortgages updated from a specific date (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The date to search from. (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingControllerMortgagesByUpdatedDateAsync(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count, final ApiCallback<ReportingPropertyMortgageModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportingControllerMortgagesByUpdatedDateValidateBeforeCall(shortName, branchID, startDate, offset, count, _callback);
        Type localVarReturnType = new TypeToken<ReportingPropertyMortgageModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportingControllerRepossessionsByCreatedDate
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The date to search from. (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingControllerRepossessionsByCreatedDateCall(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/reporting/{shortName}/repossesionsbycreateddate"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branchID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branchID", branchID));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportingControllerRepossessionsByCreatedDateValidateBeforeCall(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling reportingControllerRepossessionsByCreatedDate(Async)");
        }

        // verify the required parameter 'branchID' is set
        if (branchID == null) {
            throw new ApiException("Missing the required parameter 'branchID' when calling reportingControllerRepossessionsByCreatedDate(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportingControllerRepossessionsByCreatedDate(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling reportingControllerRepossessionsByCreatedDate(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling reportingControllerRepossessionsByCreatedDate(Async)");
        }

        return reportingControllerRepossessionsByCreatedDateCall(shortName, branchID, startDate, offset, count, _callback);

    }

    /**
     * Return a collection of repossessions by created date from a specific date
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The date to search from. (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ReportingReceivershipCaseModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ReportingReceivershipCaseModelResults reportingControllerRepossessionsByCreatedDate(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count) throws ApiException {
        ApiResponse<ReportingReceivershipCaseModelResults> localVarResp = reportingControllerRepossessionsByCreatedDateWithHttpInfo(shortName, branchID, startDate, offset, count);
        return localVarResp.getData();
    }

    /**
     * Return a collection of repossessions by created date from a specific date
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The date to search from. (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;ReportingReceivershipCaseModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportingReceivershipCaseModelResults> reportingControllerRepossessionsByCreatedDateWithHttpInfo(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = reportingControllerRepossessionsByCreatedDateValidateBeforeCall(shortName, branchID, startDate, offset, count, null);
        Type localVarReturnType = new TypeToken<ReportingReceivershipCaseModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a collection of repossessions by created date from a specific date (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The date to search from. (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingControllerRepossessionsByCreatedDateAsync(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count, final ApiCallback<ReportingReceivershipCaseModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportingControllerRepossessionsByCreatedDateValidateBeforeCall(shortName, branchID, startDate, offset, count, _callback);
        Type localVarReturnType = new TypeToken<ReportingReceivershipCaseModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportingControllerRepossessionsByUpdatedDate
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The date to search from. (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingControllerRepossessionsByUpdatedDateCall(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/reporting/{shortName}/repossesionsbyupdateddate"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branchID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branchID", branchID));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportingControllerRepossessionsByUpdatedDateValidateBeforeCall(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling reportingControllerRepossessionsByUpdatedDate(Async)");
        }

        // verify the required parameter 'branchID' is set
        if (branchID == null) {
            throw new ApiException("Missing the required parameter 'branchID' when calling reportingControllerRepossessionsByUpdatedDate(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling reportingControllerRepossessionsByUpdatedDate(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling reportingControllerRepossessionsByUpdatedDate(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling reportingControllerRepossessionsByUpdatedDate(Async)");
        }

        return reportingControllerRepossessionsByUpdatedDateCall(shortName, branchID, startDate, offset, count, _callback);

    }

    /**
     * Return a collection of all reposessions updated from a specific date
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The date to search from. (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ReportingReceivershipCaseModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ReportingReceivershipCaseModelResults reportingControllerRepossessionsByUpdatedDate(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count) throws ApiException {
        ApiResponse<ReportingReceivershipCaseModelResults> localVarResp = reportingControllerRepossessionsByUpdatedDateWithHttpInfo(shortName, branchID, startDate, offset, count);
        return localVarResp.getData();
    }

    /**
     * Return a collection of all reposessions updated from a specific date
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The date to search from. (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;ReportingReceivershipCaseModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportingReceivershipCaseModelResults> reportingControllerRepossessionsByUpdatedDateWithHttpInfo(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = reportingControllerRepossessionsByUpdatedDateValidateBeforeCall(shortName, branchID, startDate, offset, count, null);
        Type localVarReturnType = new TypeToken<ReportingReceivershipCaseModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a collection of all reposessions updated from a specific date (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The date to search from. (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportingControllerRepossessionsByUpdatedDateAsync(String shortName, String branchID, OffsetDateTime startDate, Integer offset, Integer count, final ApiCallback<ReportingReceivershipCaseModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportingControllerRepossessionsByUpdatedDateValidateBeforeCall(shortName, branchID, startDate, offset, count, _callback);
        Type localVarReturnType = new TypeToken<ReportingReceivershipCaseModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
