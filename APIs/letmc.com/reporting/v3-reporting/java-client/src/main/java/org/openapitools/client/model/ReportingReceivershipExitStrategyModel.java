/*
 * LetMC Api V3, reporting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-reporting
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Helper Model - Exit Strategy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:11.827585-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportingReceivershipExitStrategyModel {
  public static final String SERIALIZED_NAME_COMPILED = "Compiled";
  @SerializedName(SERIALIZED_NAME_COMPILED)
  private OffsetDateTime compiled;

  public static final String SERIALIZED_NAME_COMPILED_BY_I_D = "CompiledByID";
  @SerializedName(SERIALIZED_NAME_COMPILED_BY_I_D)
  private String compiledByID;

  public static final String SERIALIZED_NAME_DISPLAY_COMPILED_BY_I_D = "DisplayCompiledByID";
  @SerializedName(SERIALIZED_NAME_DISPLAY_COMPILED_BY_I_D)
  private String displayCompiledByID;

  public static final String SERIALIZED_NAME_EXTRA_NOTES = "ExtraNotes";
  @SerializedName(SERIALIZED_NAME_EXTRA_NOTES)
  private String extraNotes;

  /**
   * Lender Response
   */
  @JsonAdapter(LenderResponseEnum.Adapter.class)
  public enum LenderResponseEnum {
    AGREE_LET("AgreeLet"),
    
    AGREE_SELL("AgreeSell"),
    
    AGREE_DISPOSAL_REC("AgreeDisposalRec"),
    
    AGREE_OTHER("AgreeOther"),
    
    DISAGREE_LET("DisagreeLet"),
    
    DISAGREE_SELL("DisagreeSell"),
    
    DISAGREE_DISPOSAL_REC("DisagreeDisposalRec"),
    
    DISAGREE_OTHER("DisagreeOther");

    private String value;

    LenderResponseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LenderResponseEnum fromValue(String value) {
      for (LenderResponseEnum b : LenderResponseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LenderResponseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LenderResponseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LenderResponseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LenderResponseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LenderResponseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LENDER_RESPONSE = "LenderResponse";
  @SerializedName(SERIALIZED_NAME_LENDER_RESPONSE)
  private LenderResponseEnum lenderResponse;

  public static final String SERIALIZED_NAME_LENDER_RESPONSE_DATE = "LenderResponseDate";
  @SerializedName(SERIALIZED_NAME_LENDER_RESPONSE_DATE)
  private OffsetDateTime lenderResponseDate;

  public static final String SERIALIZED_NAME_LOCK_CHANGED = "LockChanged";
  @SerializedName(SERIALIZED_NAME_LOCK_CHANGED)
  private OffsetDateTime lockChanged;

  public static final String SERIALIZED_NAME_MORTGAGE_ARREARS = "MortgageArrears";
  @SerializedName(SERIALIZED_NAME_MORTGAGE_ARREARS)
  private Double mortgageArrears;

  public static final String SERIALIZED_NAME_MORTGAGE_BALANCE = "MortgageBalance";
  @SerializedName(SERIALIZED_NAME_MORTGAGE_BALANCE)
  private Double mortgageBalance;

  public static final String SERIALIZED_NAME_MORTGAGE_C_M_I = "MortgageCMI";
  @SerializedName(SERIALIZED_NAME_MORTGAGE_C_M_I)
  private Double mortgageCMI;

  /**
   * Recommendation
   */
  @JsonAdapter(RecommendationEnum.Adapter.class)
  public enum RecommendationEnum {
    LET("Let"),
    
    SELL("Sell"),
    
    DISPOSAL_REC("DisposalRec"),
    
    PENDING_EXIT("PendingExit"),
    
    OTHER("Other");

    private String value;

    RecommendationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecommendationEnum fromValue(String value) {
      for (RecommendationEnum b : RecommendationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecommendationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecommendationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecommendationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecommendationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecommendationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECOMMENDATION = "Recommendation";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION)
  private RecommendationEnum recommendation;

  public static final String SERIALIZED_NAME_REVIEW_DATE = "ReviewDate";
  @SerializedName(SERIALIZED_NAME_REVIEW_DATE)
  private OffsetDateTime reviewDate;

  public static final String SERIALIZED_NAME_SENT_TO_LENDER = "SentToLender";
  @SerializedName(SERIALIZED_NAME_SENT_TO_LENDER)
  private OffsetDateTime sentToLender;

  public ReportingReceivershipExitStrategyModel() {
  }

  public ReportingReceivershipExitStrategyModel compiled(OffsetDateTime compiled) {
    this.compiled = compiled;
    return this;
  }

  /**
   * The date Compiled
   * @return compiled
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompiled() {
    return compiled;
  }

  public void setCompiled(OffsetDateTime compiled) {
    this.compiled = compiled;
  }


  public ReportingReceivershipExitStrategyModel compiledByID(String compiledByID) {
    this.compiledByID = compiledByID;
    return this;
  }

  /**
   * Compiled By ID (ApplicationStaff)
   * @return compiledByID
   */
  @javax.annotation.Nullable
  public String getCompiledByID() {
    return compiledByID;
  }

  public void setCompiledByID(String compiledByID) {
    this.compiledByID = compiledByID;
  }


  public ReportingReceivershipExitStrategyModel displayCompiledByID(String displayCompiledByID) {
    this.displayCompiledByID = displayCompiledByID;
    return this;
  }

  /**
   * Compiled By ID
   * @return displayCompiledByID
   */
  @javax.annotation.Nullable
  public String getDisplayCompiledByID() {
    return displayCompiledByID;
  }

  public void setDisplayCompiledByID(String displayCompiledByID) {
    this.displayCompiledByID = displayCompiledByID;
  }


  public ReportingReceivershipExitStrategyModel extraNotes(String extraNotes) {
    this.extraNotes = extraNotes;
    return this;
  }

  /**
   * Extra Notes
   * @return extraNotes
   */
  @javax.annotation.Nullable
  public String getExtraNotes() {
    return extraNotes;
  }

  public void setExtraNotes(String extraNotes) {
    this.extraNotes = extraNotes;
  }


  public ReportingReceivershipExitStrategyModel lenderResponse(LenderResponseEnum lenderResponse) {
    this.lenderResponse = lenderResponse;
    return this;
  }

  /**
   * Lender Response
   * @return lenderResponse
   */
  @javax.annotation.Nullable
  public LenderResponseEnum getLenderResponse() {
    return lenderResponse;
  }

  public void setLenderResponse(LenderResponseEnum lenderResponse) {
    this.lenderResponse = lenderResponse;
  }


  public ReportingReceivershipExitStrategyModel lenderResponseDate(OffsetDateTime lenderResponseDate) {
    this.lenderResponseDate = lenderResponseDate;
    return this;
  }

  /**
   * Lender Response Date
   * @return lenderResponseDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLenderResponseDate() {
    return lenderResponseDate;
  }

  public void setLenderResponseDate(OffsetDateTime lenderResponseDate) {
    this.lenderResponseDate = lenderResponseDate;
  }


  public ReportingReceivershipExitStrategyModel lockChanged(OffsetDateTime lockChanged) {
    this.lockChanged = lockChanged;
    return this;
  }

  /**
   * Lock Changed
   * @return lockChanged
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLockChanged() {
    return lockChanged;
  }

  public void setLockChanged(OffsetDateTime lockChanged) {
    this.lockChanged = lockChanged;
  }


  public ReportingReceivershipExitStrategyModel mortgageArrears(Double mortgageArrears) {
    this.mortgageArrears = mortgageArrears;
    return this;
  }

  /**
   * Mortgage Arrears
   * @return mortgageArrears
   */
  @javax.annotation.Nullable
  public Double getMortgageArrears() {
    return mortgageArrears;
  }

  public void setMortgageArrears(Double mortgageArrears) {
    this.mortgageArrears = mortgageArrears;
  }


  public ReportingReceivershipExitStrategyModel mortgageBalance(Double mortgageBalance) {
    this.mortgageBalance = mortgageBalance;
    return this;
  }

  /**
   * Mortgage Balance
   * @return mortgageBalance
   */
  @javax.annotation.Nullable
  public Double getMortgageBalance() {
    return mortgageBalance;
  }

  public void setMortgageBalance(Double mortgageBalance) {
    this.mortgageBalance = mortgageBalance;
  }


  public ReportingReceivershipExitStrategyModel mortgageCMI(Double mortgageCMI) {
    this.mortgageCMI = mortgageCMI;
    return this;
  }

  /**
   * Mortgage CMI
   * @return mortgageCMI
   */
  @javax.annotation.Nullable
  public Double getMortgageCMI() {
    return mortgageCMI;
  }

  public void setMortgageCMI(Double mortgageCMI) {
    this.mortgageCMI = mortgageCMI;
  }


  public ReportingReceivershipExitStrategyModel recommendation(RecommendationEnum recommendation) {
    this.recommendation = recommendation;
    return this;
  }

  /**
   * Recommendation
   * @return recommendation
   */
  @javax.annotation.Nullable
  public RecommendationEnum getRecommendation() {
    return recommendation;
  }

  public void setRecommendation(RecommendationEnum recommendation) {
    this.recommendation = recommendation;
  }


  public ReportingReceivershipExitStrategyModel reviewDate(OffsetDateTime reviewDate) {
    this.reviewDate = reviewDate;
    return this;
  }

  /**
   * The Review Date
   * @return reviewDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReviewDate() {
    return reviewDate;
  }

  public void setReviewDate(OffsetDateTime reviewDate) {
    this.reviewDate = reviewDate;
  }


  public ReportingReceivershipExitStrategyModel sentToLender(OffsetDateTime sentToLender) {
    this.sentToLender = sentToLender;
    return this;
  }

  /**
   * Sent To Lender
   * @return sentToLender
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSentToLender() {
    return sentToLender;
  }

  public void setSentToLender(OffsetDateTime sentToLender) {
    this.sentToLender = sentToLender;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportingReceivershipExitStrategyModel reportingReceivershipExitStrategyModel = (ReportingReceivershipExitStrategyModel) o;
    return Objects.equals(this.compiled, reportingReceivershipExitStrategyModel.compiled) &&
        Objects.equals(this.compiledByID, reportingReceivershipExitStrategyModel.compiledByID) &&
        Objects.equals(this.displayCompiledByID, reportingReceivershipExitStrategyModel.displayCompiledByID) &&
        Objects.equals(this.extraNotes, reportingReceivershipExitStrategyModel.extraNotes) &&
        Objects.equals(this.lenderResponse, reportingReceivershipExitStrategyModel.lenderResponse) &&
        Objects.equals(this.lenderResponseDate, reportingReceivershipExitStrategyModel.lenderResponseDate) &&
        Objects.equals(this.lockChanged, reportingReceivershipExitStrategyModel.lockChanged) &&
        Objects.equals(this.mortgageArrears, reportingReceivershipExitStrategyModel.mortgageArrears) &&
        Objects.equals(this.mortgageBalance, reportingReceivershipExitStrategyModel.mortgageBalance) &&
        Objects.equals(this.mortgageCMI, reportingReceivershipExitStrategyModel.mortgageCMI) &&
        Objects.equals(this.recommendation, reportingReceivershipExitStrategyModel.recommendation) &&
        Objects.equals(this.reviewDate, reportingReceivershipExitStrategyModel.reviewDate) &&
        Objects.equals(this.sentToLender, reportingReceivershipExitStrategyModel.sentToLender);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compiled, compiledByID, displayCompiledByID, extraNotes, lenderResponse, lenderResponseDate, lockChanged, mortgageArrears, mortgageBalance, mortgageCMI, recommendation, reviewDate, sentToLender);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportingReceivershipExitStrategyModel {\n");
    sb.append("    compiled: ").append(toIndentedString(compiled)).append("\n");
    sb.append("    compiledByID: ").append(toIndentedString(compiledByID)).append("\n");
    sb.append("    displayCompiledByID: ").append(toIndentedString(displayCompiledByID)).append("\n");
    sb.append("    extraNotes: ").append(toIndentedString(extraNotes)).append("\n");
    sb.append("    lenderResponse: ").append(toIndentedString(lenderResponse)).append("\n");
    sb.append("    lenderResponseDate: ").append(toIndentedString(lenderResponseDate)).append("\n");
    sb.append("    lockChanged: ").append(toIndentedString(lockChanged)).append("\n");
    sb.append("    mortgageArrears: ").append(toIndentedString(mortgageArrears)).append("\n");
    sb.append("    mortgageBalance: ").append(toIndentedString(mortgageBalance)).append("\n");
    sb.append("    mortgageCMI: ").append(toIndentedString(mortgageCMI)).append("\n");
    sb.append("    recommendation: ").append(toIndentedString(recommendation)).append("\n");
    sb.append("    reviewDate: ").append(toIndentedString(reviewDate)).append("\n");
    sb.append("    sentToLender: ").append(toIndentedString(sentToLender)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Compiled");
    openapiFields.add("CompiledByID");
    openapiFields.add("DisplayCompiledByID");
    openapiFields.add("ExtraNotes");
    openapiFields.add("LenderResponse");
    openapiFields.add("LenderResponseDate");
    openapiFields.add("LockChanged");
    openapiFields.add("MortgageArrears");
    openapiFields.add("MortgageBalance");
    openapiFields.add("MortgageCMI");
    openapiFields.add("Recommendation");
    openapiFields.add("ReviewDate");
    openapiFields.add("SentToLender");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportingReceivershipExitStrategyModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportingReceivershipExitStrategyModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportingReceivershipExitStrategyModel is not found in the empty JSON string", ReportingReceivershipExitStrategyModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportingReceivershipExitStrategyModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportingReceivershipExitStrategyModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CompiledByID") != null && !jsonObj.get("CompiledByID").isJsonNull()) && !jsonObj.get("CompiledByID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompiledByID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompiledByID").toString()));
      }
      if ((jsonObj.get("DisplayCompiledByID") != null && !jsonObj.get("DisplayCompiledByID").isJsonNull()) && !jsonObj.get("DisplayCompiledByID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayCompiledByID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayCompiledByID").toString()));
      }
      if ((jsonObj.get("ExtraNotes") != null && !jsonObj.get("ExtraNotes").isJsonNull()) && !jsonObj.get("ExtraNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtraNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtraNotes").toString()));
      }
      if ((jsonObj.get("LenderResponse") != null && !jsonObj.get("LenderResponse").isJsonNull()) && !jsonObj.get("LenderResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LenderResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LenderResponse").toString()));
      }
      // validate the optional field `LenderResponse`
      if (jsonObj.get("LenderResponse") != null && !jsonObj.get("LenderResponse").isJsonNull()) {
        LenderResponseEnum.validateJsonElement(jsonObj.get("LenderResponse"));
      }
      if ((jsonObj.get("Recommendation") != null && !jsonObj.get("Recommendation").isJsonNull()) && !jsonObj.get("Recommendation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Recommendation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Recommendation").toString()));
      }
      // validate the optional field `Recommendation`
      if (jsonObj.get("Recommendation") != null && !jsonObj.get("Recommendation").isJsonNull()) {
        RecommendationEnum.validateJsonElement(jsonObj.get("Recommendation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportingReceivershipExitStrategyModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportingReceivershipExitStrategyModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportingReceivershipExitStrategyModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportingReceivershipExitStrategyModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportingReceivershipExitStrategyModel>() {
           @Override
           public void write(JsonWriter out, ReportingReceivershipExitStrategyModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportingReceivershipExitStrategyModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportingReceivershipExitStrategyModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportingReceivershipExitStrategyModel
   * @throws IOException if the JSON string is invalid with respect to ReportingReceivershipExitStrategyModel
   */
  public static ReportingReceivershipExitStrategyModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportingReceivershipExitStrategyModel.class);
  }

  /**
   * Convert an instance of ReportingReceivershipExitStrategyModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

