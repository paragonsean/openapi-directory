/*
 * LetMC Api V3, reporting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-reporting
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Helper Model - Case Details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:11.827585-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportingReceivershipCaseDetailsModel {
  public static final String SERIALIZED_NAME_APPOINTMENT_DATE = "AppointmentDate";
  @SerializedName(SERIALIZED_NAME_APPOINTMENT_DATE)
  private OffsetDateTime appointmentDate;

  public static final String SERIALIZED_NAME_CLOSED_DATE = "ClosedDate";
  @SerializedName(SERIALIZED_NAME_CLOSED_DATE)
  private OffsetDateTime closedDate;

  /**
   * Closed Reason
   */
  @JsonAdapter(ClosedReasonEnum.Adapter.class)
  public enum ClosedReasonEnum {
    PROPERTY_SOLD("PropertySold"),
    
    HANDED_BACK_TO_BORROWER("HandedBackToBorrower"),
    
    APPOINTMENT_ISSUES("AppointmentIssues"),
    
    LENDER_SEEKING_POSSESSION("LenderSeekingPossession"),
    
    OTHER("Other");

    private String value;

    ClosedReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClosedReasonEnum fromValue(String value) {
      for (ClosedReasonEnum b : ClosedReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClosedReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClosedReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClosedReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClosedReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClosedReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLOSED_REASON = "ClosedReason";
  @SerializedName(SERIALIZED_NAME_CLOSED_REASON)
  private ClosedReasonEnum closedReason;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DISPLAY_FIRST_RECEIVER = "DisplayFirstReceiver";
  @SerializedName(SERIALIZED_NAME_DISPLAY_FIRST_RECEIVER)
  private String displayFirstReceiver;

  public static final String SERIALIZED_NAME_DISPLAY_FREEHOLD_BLOCK_MANAGER = "DisplayFreeholdBlockManager";
  @SerializedName(SERIALIZED_NAME_DISPLAY_FREEHOLD_BLOCK_MANAGER)
  private String displayFreeholdBlockManager;

  public static final String SERIALIZED_NAME_DISPLAY_SECOND_RECEIVER = "DisplaySecondReceiver";
  @SerializedName(SERIALIZED_NAME_DISPLAY_SECOND_RECEIVER)
  private String displaySecondReceiver;

  public static final String SERIALIZED_NAME_DISPLAY_VALIDATING_SOLICITOR = "DisplayValidatingSolicitor";
  @SerializedName(SERIALIZED_NAME_DISPLAY_VALIDATING_SOLICITOR)
  private String displayValidatingSolicitor;

  public static final String SERIALIZED_NAME_EXTRA_NOTES = "ExtraNotes";
  @SerializedName(SERIALIZED_NAME_EXTRA_NOTES)
  private String extraNotes;

  public static final String SERIALIZED_NAME_FIRST_RECEIVER_I_D = "FirstReceiverID";
  @SerializedName(SERIALIZED_NAME_FIRST_RECEIVER_I_D)
  private String firstReceiverID;

  public static final String SERIALIZED_NAME_FREEHOLD_BLOCK_MANAGER_I_D = "FreeholdBlockManagerID";
  @SerializedName(SERIALIZED_NAME_FREEHOLD_BLOCK_MANAGER_I_D)
  private String freeholdBlockManagerID;

  public static final String SERIALIZED_NAME_PASSED_TO_LENDER_DATE = "PassedToLenderDate";
  @SerializedName(SERIALIZED_NAME_PASSED_TO_LENDER_DATE)
  private OffsetDateTime passedToLenderDate;

  public static final String SERIALIZED_NAME_PROPERTY_OWNABLE_I_D = "PropertyOwnableID";
  @SerializedName(SERIALIZED_NAME_PROPERTY_OWNABLE_I_D)
  private String propertyOwnableID;

  public static final String SERIALIZED_NAME_SECOND_RECEIVER_I_D = "SecondReceiverID";
  @SerializedName(SERIALIZED_NAME_SECOND_RECEIVER_I_D)
  private String secondReceiverID;

  /**
   * Status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OPENED("Opened"),
    
    LITIGATION("Litigation"),
    
    CLOSED("Closed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Tenure
   */
  @JsonAdapter(TenureEnum.Adapter.class)
  public enum TenureEnum {
    FREEHOLD("Freehold"),
    
    LEASEHOLD("Leasehold"),
    
    COMMONHOLD("Commonhold"),
    
    SHARE_OF_FREEHOLD("ShareOfFreehold"),
    
    FLYING_FREEHOLD("FlyingFreehold"),
    
    SHARE_TRANSFER("ShareTransfer"),
    
    UNKNOWN("Unknown");

    private String value;

    TenureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TenureEnum fromValue(String value) {
      for (TenureEnum b : TenureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TenureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TenureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TenureEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TenureEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TenureEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TENURE = "Tenure";
  @SerializedName(SERIALIZED_NAME_TENURE)
  private TenureEnum tenure;

  public static final String SERIALIZED_NAME_VALIDATING_SOLICITOR_I_D = "ValidatingSolicitorID";
  @SerializedName(SERIALIZED_NAME_VALIDATING_SOLICITOR_I_D)
  private String validatingSolicitorID;

  public static final String SERIALIZED_NAME_VALUATION_DATE = "ValuationDate";
  @SerializedName(SERIALIZED_NAME_VALUATION_DATE)
  private OffsetDateTime valuationDate;

  public ReportingReceivershipCaseDetailsModel() {
  }

  public ReportingReceivershipCaseDetailsModel appointmentDate(OffsetDateTime appointmentDate) {
    this.appointmentDate = appointmentDate;
    return this;
  }

  /**
   * Appointment Date
   * @return appointmentDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAppointmentDate() {
    return appointmentDate;
  }

  public void setAppointmentDate(OffsetDateTime appointmentDate) {
    this.appointmentDate = appointmentDate;
  }


  public ReportingReceivershipCaseDetailsModel closedDate(OffsetDateTime closedDate) {
    this.closedDate = closedDate;
    return this;
  }

  /**
   * Closed Date
   * @return closedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getClosedDate() {
    return closedDate;
  }

  public void setClosedDate(OffsetDateTime closedDate) {
    this.closedDate = closedDate;
  }


  public ReportingReceivershipCaseDetailsModel closedReason(ClosedReasonEnum closedReason) {
    this.closedReason = closedReason;
    return this;
  }

  /**
   * Closed Reason
   * @return closedReason
   */
  @javax.annotation.Nullable
  public ClosedReasonEnum getClosedReason() {
    return closedReason;
  }

  public void setClosedReason(ClosedReasonEnum closedReason) {
    this.closedReason = closedReason;
  }


  public ReportingReceivershipCaseDetailsModel createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created At
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ReportingReceivershipCaseDetailsModel displayFirstReceiver(String displayFirstReceiver) {
    this.displayFirstReceiver = displayFirstReceiver;
    return this;
  }

  /**
   * Display First Receiver (ApplicationStaff)
   * @return displayFirstReceiver
   */
  @javax.annotation.Nullable
  public String getDisplayFirstReceiver() {
    return displayFirstReceiver;
  }

  public void setDisplayFirstReceiver(String displayFirstReceiver) {
    this.displayFirstReceiver = displayFirstReceiver;
  }


  public ReportingReceivershipCaseDetailsModel displayFreeholdBlockManager(String displayFreeholdBlockManager) {
    this.displayFreeholdBlockManager = displayFreeholdBlockManager;
    return this;
  }

  /**
   * Display Freehold Block Manager
   * @return displayFreeholdBlockManager
   */
  @javax.annotation.Nullable
  public String getDisplayFreeholdBlockManager() {
    return displayFreeholdBlockManager;
  }

  public void setDisplayFreeholdBlockManager(String displayFreeholdBlockManager) {
    this.displayFreeholdBlockManager = displayFreeholdBlockManager;
  }


  public ReportingReceivershipCaseDetailsModel displaySecondReceiver(String displaySecondReceiver) {
    this.displaySecondReceiver = displaySecondReceiver;
    return this;
  }

  /**
   * Display Second Receiver (ApplicationStaff)
   * @return displaySecondReceiver
   */
  @javax.annotation.Nullable
  public String getDisplaySecondReceiver() {
    return displaySecondReceiver;
  }

  public void setDisplaySecondReceiver(String displaySecondReceiver) {
    this.displaySecondReceiver = displaySecondReceiver;
  }


  public ReportingReceivershipCaseDetailsModel displayValidatingSolicitor(String displayValidatingSolicitor) {
    this.displayValidatingSolicitor = displayValidatingSolicitor;
    return this;
  }

  /**
   * Display Validating Solicitor
   * @return displayValidatingSolicitor
   */
  @javax.annotation.Nullable
  public String getDisplayValidatingSolicitor() {
    return displayValidatingSolicitor;
  }

  public void setDisplayValidatingSolicitor(String displayValidatingSolicitor) {
    this.displayValidatingSolicitor = displayValidatingSolicitor;
  }


  public ReportingReceivershipCaseDetailsModel extraNotes(String extraNotes) {
    this.extraNotes = extraNotes;
    return this;
  }

  /**
   * Extra Notes
   * @return extraNotes
   */
  @javax.annotation.Nullable
  public String getExtraNotes() {
    return extraNotes;
  }

  public void setExtraNotes(String extraNotes) {
    this.extraNotes = extraNotes;
  }


  public ReportingReceivershipCaseDetailsModel firstReceiverID(String firstReceiverID) {
    this.firstReceiverID = firstReceiverID;
    return this;
  }

  /**
   * First Receiver ID (ApplicationStaff)
   * @return firstReceiverID
   */
  @javax.annotation.Nullable
  public String getFirstReceiverID() {
    return firstReceiverID;
  }

  public void setFirstReceiverID(String firstReceiverID) {
    this.firstReceiverID = firstReceiverID;
  }


  public ReportingReceivershipCaseDetailsModel freeholdBlockManagerID(String freeholdBlockManagerID) {
    this.freeholdBlockManagerID = freeholdBlockManagerID;
    return this;
  }

  /**
   * Freehold Block Manager ID
   * @return freeholdBlockManagerID
   */
  @javax.annotation.Nullable
  public String getFreeholdBlockManagerID() {
    return freeholdBlockManagerID;
  }

  public void setFreeholdBlockManagerID(String freeholdBlockManagerID) {
    this.freeholdBlockManagerID = freeholdBlockManagerID;
  }


  public ReportingReceivershipCaseDetailsModel passedToLenderDate(OffsetDateTime passedToLenderDate) {
    this.passedToLenderDate = passedToLenderDate;
    return this;
  }

  /**
   * Passed to Lender Date
   * @return passedToLenderDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPassedToLenderDate() {
    return passedToLenderDate;
  }

  public void setPassedToLenderDate(OffsetDateTime passedToLenderDate) {
    this.passedToLenderDate = passedToLenderDate;
  }


  public ReportingReceivershipCaseDetailsModel propertyOwnableID(String propertyOwnableID) {
    this.propertyOwnableID = propertyOwnableID;
    return this;
  }

  /**
   * The unique Property Ownable identifier
   * @return propertyOwnableID
   */
  @javax.annotation.Nullable
  public String getPropertyOwnableID() {
    return propertyOwnableID;
  }

  public void setPropertyOwnableID(String propertyOwnableID) {
    this.propertyOwnableID = propertyOwnableID;
  }


  public ReportingReceivershipCaseDetailsModel secondReceiverID(String secondReceiverID) {
    this.secondReceiverID = secondReceiverID;
    return this;
  }

  /**
   * Second Receiver ID (ApplicationStaff)
   * @return secondReceiverID
   */
  @javax.annotation.Nullable
  public String getSecondReceiverID() {
    return secondReceiverID;
  }

  public void setSecondReceiverID(String secondReceiverID) {
    this.secondReceiverID = secondReceiverID;
  }


  public ReportingReceivershipCaseDetailsModel status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ReportingReceivershipCaseDetailsModel tenure(TenureEnum tenure) {
    this.tenure = tenure;
    return this;
  }

  /**
   * Tenure
   * @return tenure
   */
  @javax.annotation.Nullable
  public TenureEnum getTenure() {
    return tenure;
  }

  public void setTenure(TenureEnum tenure) {
    this.tenure = tenure;
  }


  public ReportingReceivershipCaseDetailsModel validatingSolicitorID(String validatingSolicitorID) {
    this.validatingSolicitorID = validatingSolicitorID;
    return this;
  }

  /**
   * The unique Validating Solicitor identifier
   * @return validatingSolicitorID
   */
  @javax.annotation.Nullable
  public String getValidatingSolicitorID() {
    return validatingSolicitorID;
  }

  public void setValidatingSolicitorID(String validatingSolicitorID) {
    this.validatingSolicitorID = validatingSolicitorID;
  }


  public ReportingReceivershipCaseDetailsModel valuationDate(OffsetDateTime valuationDate) {
    this.valuationDate = valuationDate;
    return this;
  }

  /**
   * Valuation Date
   * @return valuationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValuationDate() {
    return valuationDate;
  }

  public void setValuationDate(OffsetDateTime valuationDate) {
    this.valuationDate = valuationDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportingReceivershipCaseDetailsModel reportingReceivershipCaseDetailsModel = (ReportingReceivershipCaseDetailsModel) o;
    return Objects.equals(this.appointmentDate, reportingReceivershipCaseDetailsModel.appointmentDate) &&
        Objects.equals(this.closedDate, reportingReceivershipCaseDetailsModel.closedDate) &&
        Objects.equals(this.closedReason, reportingReceivershipCaseDetailsModel.closedReason) &&
        Objects.equals(this.createdAt, reportingReceivershipCaseDetailsModel.createdAt) &&
        Objects.equals(this.displayFirstReceiver, reportingReceivershipCaseDetailsModel.displayFirstReceiver) &&
        Objects.equals(this.displayFreeholdBlockManager, reportingReceivershipCaseDetailsModel.displayFreeholdBlockManager) &&
        Objects.equals(this.displaySecondReceiver, reportingReceivershipCaseDetailsModel.displaySecondReceiver) &&
        Objects.equals(this.displayValidatingSolicitor, reportingReceivershipCaseDetailsModel.displayValidatingSolicitor) &&
        Objects.equals(this.extraNotes, reportingReceivershipCaseDetailsModel.extraNotes) &&
        Objects.equals(this.firstReceiverID, reportingReceivershipCaseDetailsModel.firstReceiverID) &&
        Objects.equals(this.freeholdBlockManagerID, reportingReceivershipCaseDetailsModel.freeholdBlockManagerID) &&
        Objects.equals(this.passedToLenderDate, reportingReceivershipCaseDetailsModel.passedToLenderDate) &&
        Objects.equals(this.propertyOwnableID, reportingReceivershipCaseDetailsModel.propertyOwnableID) &&
        Objects.equals(this.secondReceiverID, reportingReceivershipCaseDetailsModel.secondReceiverID) &&
        Objects.equals(this.status, reportingReceivershipCaseDetailsModel.status) &&
        Objects.equals(this.tenure, reportingReceivershipCaseDetailsModel.tenure) &&
        Objects.equals(this.validatingSolicitorID, reportingReceivershipCaseDetailsModel.validatingSolicitorID) &&
        Objects.equals(this.valuationDate, reportingReceivershipCaseDetailsModel.valuationDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appointmentDate, closedDate, closedReason, createdAt, displayFirstReceiver, displayFreeholdBlockManager, displaySecondReceiver, displayValidatingSolicitor, extraNotes, firstReceiverID, freeholdBlockManagerID, passedToLenderDate, propertyOwnableID, secondReceiverID, status, tenure, validatingSolicitorID, valuationDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportingReceivershipCaseDetailsModel {\n");
    sb.append("    appointmentDate: ").append(toIndentedString(appointmentDate)).append("\n");
    sb.append("    closedDate: ").append(toIndentedString(closedDate)).append("\n");
    sb.append("    closedReason: ").append(toIndentedString(closedReason)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    displayFirstReceiver: ").append(toIndentedString(displayFirstReceiver)).append("\n");
    sb.append("    displayFreeholdBlockManager: ").append(toIndentedString(displayFreeholdBlockManager)).append("\n");
    sb.append("    displaySecondReceiver: ").append(toIndentedString(displaySecondReceiver)).append("\n");
    sb.append("    displayValidatingSolicitor: ").append(toIndentedString(displayValidatingSolicitor)).append("\n");
    sb.append("    extraNotes: ").append(toIndentedString(extraNotes)).append("\n");
    sb.append("    firstReceiverID: ").append(toIndentedString(firstReceiverID)).append("\n");
    sb.append("    freeholdBlockManagerID: ").append(toIndentedString(freeholdBlockManagerID)).append("\n");
    sb.append("    passedToLenderDate: ").append(toIndentedString(passedToLenderDate)).append("\n");
    sb.append("    propertyOwnableID: ").append(toIndentedString(propertyOwnableID)).append("\n");
    sb.append("    secondReceiverID: ").append(toIndentedString(secondReceiverID)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tenure: ").append(toIndentedString(tenure)).append("\n");
    sb.append("    validatingSolicitorID: ").append(toIndentedString(validatingSolicitorID)).append("\n");
    sb.append("    valuationDate: ").append(toIndentedString(valuationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AppointmentDate");
    openapiFields.add("ClosedDate");
    openapiFields.add("ClosedReason");
    openapiFields.add("CreatedAt");
    openapiFields.add("DisplayFirstReceiver");
    openapiFields.add("DisplayFreeholdBlockManager");
    openapiFields.add("DisplaySecondReceiver");
    openapiFields.add("DisplayValidatingSolicitor");
    openapiFields.add("ExtraNotes");
    openapiFields.add("FirstReceiverID");
    openapiFields.add("FreeholdBlockManagerID");
    openapiFields.add("PassedToLenderDate");
    openapiFields.add("PropertyOwnableID");
    openapiFields.add("SecondReceiverID");
    openapiFields.add("Status");
    openapiFields.add("Tenure");
    openapiFields.add("ValidatingSolicitorID");
    openapiFields.add("ValuationDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportingReceivershipCaseDetailsModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportingReceivershipCaseDetailsModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportingReceivershipCaseDetailsModel is not found in the empty JSON string", ReportingReceivershipCaseDetailsModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportingReceivershipCaseDetailsModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportingReceivershipCaseDetailsModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ClosedReason") != null && !jsonObj.get("ClosedReason").isJsonNull()) && !jsonObj.get("ClosedReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClosedReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClosedReason").toString()));
      }
      // validate the optional field `ClosedReason`
      if (jsonObj.get("ClosedReason") != null && !jsonObj.get("ClosedReason").isJsonNull()) {
        ClosedReasonEnum.validateJsonElement(jsonObj.get("ClosedReason"));
      }
      if ((jsonObj.get("DisplayFirstReceiver") != null && !jsonObj.get("DisplayFirstReceiver").isJsonNull()) && !jsonObj.get("DisplayFirstReceiver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayFirstReceiver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayFirstReceiver").toString()));
      }
      if ((jsonObj.get("DisplayFreeholdBlockManager") != null && !jsonObj.get("DisplayFreeholdBlockManager").isJsonNull()) && !jsonObj.get("DisplayFreeholdBlockManager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayFreeholdBlockManager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayFreeholdBlockManager").toString()));
      }
      if ((jsonObj.get("DisplaySecondReceiver") != null && !jsonObj.get("DisplaySecondReceiver").isJsonNull()) && !jsonObj.get("DisplaySecondReceiver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplaySecondReceiver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplaySecondReceiver").toString()));
      }
      if ((jsonObj.get("DisplayValidatingSolicitor") != null && !jsonObj.get("DisplayValidatingSolicitor").isJsonNull()) && !jsonObj.get("DisplayValidatingSolicitor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayValidatingSolicitor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayValidatingSolicitor").toString()));
      }
      if ((jsonObj.get("ExtraNotes") != null && !jsonObj.get("ExtraNotes").isJsonNull()) && !jsonObj.get("ExtraNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtraNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtraNotes").toString()));
      }
      if ((jsonObj.get("FirstReceiverID") != null && !jsonObj.get("FirstReceiverID").isJsonNull()) && !jsonObj.get("FirstReceiverID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstReceiverID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstReceiverID").toString()));
      }
      if ((jsonObj.get("FreeholdBlockManagerID") != null && !jsonObj.get("FreeholdBlockManagerID").isJsonNull()) && !jsonObj.get("FreeholdBlockManagerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FreeholdBlockManagerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FreeholdBlockManagerID").toString()));
      }
      if ((jsonObj.get("PropertyOwnableID") != null && !jsonObj.get("PropertyOwnableID").isJsonNull()) && !jsonObj.get("PropertyOwnableID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PropertyOwnableID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PropertyOwnableID").toString()));
      }
      if ((jsonObj.get("SecondReceiverID") != null && !jsonObj.get("SecondReceiverID").isJsonNull()) && !jsonObj.get("SecondReceiverID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecondReceiverID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SecondReceiverID").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("Tenure") != null && !jsonObj.get("Tenure").isJsonNull()) && !jsonObj.get("Tenure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tenure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Tenure").toString()));
      }
      // validate the optional field `Tenure`
      if (jsonObj.get("Tenure") != null && !jsonObj.get("Tenure").isJsonNull()) {
        TenureEnum.validateJsonElement(jsonObj.get("Tenure"));
      }
      if ((jsonObj.get("ValidatingSolicitorID") != null && !jsonObj.get("ValidatingSolicitorID").isJsonNull()) && !jsonObj.get("ValidatingSolicitorID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ValidatingSolicitorID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ValidatingSolicitorID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportingReceivershipCaseDetailsModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportingReceivershipCaseDetailsModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportingReceivershipCaseDetailsModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportingReceivershipCaseDetailsModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportingReceivershipCaseDetailsModel>() {
           @Override
           public void write(JsonWriter out, ReportingReceivershipCaseDetailsModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportingReceivershipCaseDetailsModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportingReceivershipCaseDetailsModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportingReceivershipCaseDetailsModel
   * @throws IOException if the JSON string is invalid with respect to ReportingReceivershipCaseDetailsModel
   */
  public static ReportingReceivershipCaseDetailsModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportingReceivershipCaseDetailsModel.class);
  }

  /**
   * Convert an instance of ReportingReceivershipCaseDetailsModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

