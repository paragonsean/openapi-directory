/*
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.KeyValuePairStringString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class for a group of entries.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:04.921745-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LandlordProfitLossRowModel {
  public static final String SERIALIZED_NAME_MONTH_TOTALS = "MonthTotals";
  @SerializedName(SERIALIZED_NAME_MONTH_TOTALS)
  private List<KeyValuePairStringString> monthTotals = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOMINAL_CODE = "NominalCode";
  @SerializedName(SERIALIZED_NAME_NOMINAL_CODE)
  private String nominalCode;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private String total;

  public LandlordProfitLossRowModel() {
  }

  public LandlordProfitLossRowModel monthTotals(List<KeyValuePairStringString> monthTotals) {
    this.monthTotals = monthTotals;
    return this;
  }

  public LandlordProfitLossRowModel addMonthTotalsItem(KeyValuePairStringString monthTotalsItem) {
    if (this.monthTotals == null) {
      this.monthTotals = new ArrayList<>();
    }
    this.monthTotals.add(monthTotalsItem);
    return this;
  }

  /**
   * Month Totals
   * @return monthTotals
   */
  @javax.annotation.Nullable
  public List<KeyValuePairStringString> getMonthTotals() {
    return monthTotals;
  }

  public void setMonthTotals(List<KeyValuePairStringString> monthTotals) {
    this.monthTotals = monthTotals;
  }


  public LandlordProfitLossRowModel nominalCode(String nominalCode) {
    this.nominalCode = nominalCode;
    return this;
  }

  /**
   * Nominal Code
   * @return nominalCode
   */
  @javax.annotation.Nullable
  public String getNominalCode() {
    return nominalCode;
  }

  public void setNominalCode(String nominalCode) {
    this.nominalCode = nominalCode;
  }


  public LandlordProfitLossRowModel title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the values.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public LandlordProfitLossRowModel total(String total) {
    this.total = total;
    return this;
  }

  /**
   * Total for all months.
   * @return total
   */
  @javax.annotation.Nullable
  public String getTotal() {
    return total;
  }

  public void setTotal(String total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LandlordProfitLossRowModel landlordProfitLossRowModel = (LandlordProfitLossRowModel) o;
    return Objects.equals(this.monthTotals, landlordProfitLossRowModel.monthTotals) &&
        Objects.equals(this.nominalCode, landlordProfitLossRowModel.nominalCode) &&
        Objects.equals(this.title, landlordProfitLossRowModel.title) &&
        Objects.equals(this.total, landlordProfitLossRowModel.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(monthTotals, nominalCode, title, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LandlordProfitLossRowModel {\n");
    sb.append("    monthTotals: ").append(toIndentedString(monthTotals)).append("\n");
    sb.append("    nominalCode: ").append(toIndentedString(nominalCode)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MonthTotals");
    openapiFields.add("NominalCode");
    openapiFields.add("Title");
    openapiFields.add("Total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LandlordProfitLossRowModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LandlordProfitLossRowModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LandlordProfitLossRowModel is not found in the empty JSON string", LandlordProfitLossRowModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LandlordProfitLossRowModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LandlordProfitLossRowModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("MonthTotals") != null && !jsonObj.get("MonthTotals").isJsonNull()) {
        JsonArray jsonArraymonthTotals = jsonObj.getAsJsonArray("MonthTotals");
        if (jsonArraymonthTotals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MonthTotals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MonthTotals` to be an array in the JSON string but got `%s`", jsonObj.get("MonthTotals").toString()));
          }

          // validate the optional field `MonthTotals` (array)
          for (int i = 0; i < jsonArraymonthTotals.size(); i++) {
            KeyValuePairStringString.validateJsonElement(jsonArraymonthTotals.get(i));
          };
        }
      }
      if ((jsonObj.get("NominalCode") != null && !jsonObj.get("NominalCode").isJsonNull()) && !jsonObj.get("NominalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NominalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NominalCode").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("Total") != null && !jsonObj.get("Total").isJsonNull()) && !jsonObj.get("Total").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Total").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LandlordProfitLossRowModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LandlordProfitLossRowModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LandlordProfitLossRowModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LandlordProfitLossRowModel.class));

       return (TypeAdapter<T>) new TypeAdapter<LandlordProfitLossRowModel>() {
           @Override
           public void write(JsonWriter out, LandlordProfitLossRowModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LandlordProfitLossRowModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LandlordProfitLossRowModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LandlordProfitLossRowModel
   * @throws IOException if the JSON string is invalid with respect to LandlordProfitLossRowModel
   */
  public static LandlordProfitLossRowModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LandlordProfitLossRowModel.class);
  }

  /**
   * Convert an instance of LandlordProfitLossRowModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

