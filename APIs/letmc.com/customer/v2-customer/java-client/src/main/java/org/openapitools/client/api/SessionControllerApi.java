/*
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SessionControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SessionControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SessionControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for sessionControllerChangePassword
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param oldPassword The customer&#39;s existing password. (required)
     * @param newPassword The customer&#39;s new password. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionControllerChangePasswordCall(String shortName, String token, String oldPassword, String newPassword, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/session/password"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (oldPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oldPassword", oldPassword));
        }

        if (newPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newPassword", newPassword));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionControllerChangePasswordValidateBeforeCall(String shortName, String token, String oldPassword, String newPassword, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling sessionControllerChangePassword(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionControllerChangePassword(Async)");
        }

        // verify the required parameter 'oldPassword' is set
        if (oldPassword == null) {
            throw new ApiException("Missing the required parameter 'oldPassword' when calling sessionControllerChangePassword(Async)");
        }

        // verify the required parameter 'newPassword' is set
        if (newPassword == null) {
            throw new ApiException("Missing the required parameter 'newPassword' when calling sessionControllerChangePassword(Async)");
        }

        return sessionControllerChangePasswordCall(shortName, token, oldPassword, newPassword, _callback);

    }

    /**
     * Change the password of a customer given their existing and new password.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param oldPassword The customer&#39;s existing password. (required)
     * @param newPassword The customer&#39;s new password. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void sessionControllerChangePassword(String shortName, String token, String oldPassword, String newPassword) throws ApiException {
        sessionControllerChangePasswordWithHttpInfo(shortName, token, oldPassword, newPassword);
    }

    /**
     * Change the password of a customer given their existing and new password.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param oldPassword The customer&#39;s existing password. (required)
     * @param newPassword The customer&#39;s new password. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionControllerChangePasswordWithHttpInfo(String shortName, String token, String oldPassword, String newPassword) throws ApiException {
        okhttp3.Call localVarCall = sessionControllerChangePasswordValidateBeforeCall(shortName, token, oldPassword, newPassword, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change the password of a customer given their existing and new password. (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param oldPassword The customer&#39;s existing password. (required)
     * @param newPassword The customer&#39;s new password. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionControllerChangePasswordAsync(String shortName, String token, String oldPassword, String newPassword, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionControllerChangePasswordValidateBeforeCall(shortName, token, oldPassword, newPassword, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionControllerCreateLandlordLogin
     * @param shortName The unique client short-name (required)
     * @param email The email address of the landlord (required)
     * @param title The title of the landlord (required)
     * @param forename The forename of the landlord (required)
     * @param surname The surname of the landlord (required)
     * @param propertyAddress Address of the property linked to the landlord (required)
     * @param contactDetails Contact details of the landlord (required)
     * @param branchID (Optional) The branch ID linked to the login. This will determine which in tray the request display in (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionControllerCreateLandlordLoginCall(String shortName, String email, String title, String forename, String surname, String propertyAddress, String contactDetails, String branchID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/session/createlandlordlogin"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (forename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forename", forename));
        }

        if (surname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("surname", surname));
        }

        if (propertyAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("propertyAddress", propertyAddress));
        }

        if (contactDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contactDetails", contactDetails));
        }

        if (branchID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branchID", branchID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionControllerCreateLandlordLoginValidateBeforeCall(String shortName, String email, String title, String forename, String surname, String propertyAddress, String contactDetails, String branchID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling sessionControllerCreateLandlordLogin(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling sessionControllerCreateLandlordLogin(Async)");
        }

        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling sessionControllerCreateLandlordLogin(Async)");
        }

        // verify the required parameter 'forename' is set
        if (forename == null) {
            throw new ApiException("Missing the required parameter 'forename' when calling sessionControllerCreateLandlordLogin(Async)");
        }

        // verify the required parameter 'surname' is set
        if (surname == null) {
            throw new ApiException("Missing the required parameter 'surname' when calling sessionControllerCreateLandlordLogin(Async)");
        }

        // verify the required parameter 'propertyAddress' is set
        if (propertyAddress == null) {
            throw new ApiException("Missing the required parameter 'propertyAddress' when calling sessionControllerCreateLandlordLogin(Async)");
        }

        // verify the required parameter 'contactDetails' is set
        if (contactDetails == null) {
            throw new ApiException("Missing the required parameter 'contactDetails' when calling sessionControllerCreateLandlordLogin(Async)");
        }

        return sessionControllerCreateLandlordLoginCall(shortName, email, title, forename, surname, propertyAddress, contactDetails, branchID, _callback);

    }

    /**
     * Send a request to the in-tray to create a landlord login.
     * 
     * @param shortName The unique client short-name (required)
     * @param email The email address of the landlord (required)
     * @param title The title of the landlord (required)
     * @param forename The forename of the landlord (required)
     * @param surname The surname of the landlord (required)
     * @param propertyAddress Address of the property linked to the landlord (required)
     * @param contactDetails Contact details of the landlord (required)
     * @param branchID (Optional) The branch ID linked to the login. This will determine which in tray the request display in (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void sessionControllerCreateLandlordLogin(String shortName, String email, String title, String forename, String surname, String propertyAddress, String contactDetails, String branchID) throws ApiException {
        sessionControllerCreateLandlordLoginWithHttpInfo(shortName, email, title, forename, surname, propertyAddress, contactDetails, branchID);
    }

    /**
     * Send a request to the in-tray to create a landlord login.
     * 
     * @param shortName The unique client short-name (required)
     * @param email The email address of the landlord (required)
     * @param title The title of the landlord (required)
     * @param forename The forename of the landlord (required)
     * @param surname The surname of the landlord (required)
     * @param propertyAddress Address of the property linked to the landlord (required)
     * @param contactDetails Contact details of the landlord (required)
     * @param branchID (Optional) The branch ID linked to the login. This will determine which in tray the request display in (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionControllerCreateLandlordLoginWithHttpInfo(String shortName, String email, String title, String forename, String surname, String propertyAddress, String contactDetails, String branchID) throws ApiException {
        okhttp3.Call localVarCall = sessionControllerCreateLandlordLoginValidateBeforeCall(shortName, email, title, forename, surname, propertyAddress, contactDetails, branchID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send a request to the in-tray to create a landlord login. (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param email The email address of the landlord (required)
     * @param title The title of the landlord (required)
     * @param forename The forename of the landlord (required)
     * @param surname The surname of the landlord (required)
     * @param propertyAddress Address of the property linked to the landlord (required)
     * @param contactDetails Contact details of the landlord (required)
     * @param branchID (Optional) The branch ID linked to the login. This will determine which in tray the request display in (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionControllerCreateLandlordLoginAsync(String shortName, String email, String title, String forename, String surname, String propertyAddress, String contactDetails, String branchID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionControllerCreateLandlordLoginValidateBeforeCall(shortName, email, title, forename, surname, propertyAddress, contactDetails, branchID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionControllerGetSessionInfo
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionControllerGetSessionInfoCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/session"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionControllerGetSessionInfoValidateBeforeCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling sessionControllerGetSessionInfo(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionControllerGetSessionInfo(Async)");
        }

        return sessionControllerGetSessionInfoCall(shortName, token, _callback);

    }

    /**
     * Gets information about the currently logged on customer.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String sessionControllerGetSessionInfo(String shortName, String token) throws ApiException {
        ApiResponse<String> localVarResp = sessionControllerGetSessionInfoWithHttpInfo(shortName, token);
        return localVarResp.getData();
    }

    /**
     * Gets information about the currently logged on customer.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> sessionControllerGetSessionInfoWithHttpInfo(String shortName, String token) throws ApiException {
        okhttp3.Call localVarCall = sessionControllerGetSessionInfoValidateBeforeCall(shortName, token, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets information about the currently logged on customer. (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionControllerGetSessionInfoAsync(String shortName, String token, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionControllerGetSessionInfoValidateBeforeCall(shortName, token, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionControllerLogin
     * @param shortName The unique client short-name (required)
     * @param username The user&#39;s username. (required)
     * @param password The user&#39;s password. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionControllerLoginCall(String shortName, String username, String password, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/session"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionControllerLoginValidateBeforeCall(String shortName, String username, String password, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling sessionControllerLogin(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling sessionControllerLogin(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling sessionControllerLogin(Async)");
        }

        return sessionControllerLoginCall(shortName, username, password, _callback);

    }

    /**
     * Login as a customer given their username and password.
     * 
     * @param shortName The unique client short-name (required)
     * @param username The user&#39;s username. (required)
     * @param password The user&#39;s password. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String sessionControllerLogin(String shortName, String username, String password) throws ApiException {
        ApiResponse<String> localVarResp = sessionControllerLoginWithHttpInfo(shortName, username, password);
        return localVarResp.getData();
    }

    /**
     * Login as a customer given their username and password.
     * 
     * @param shortName The unique client short-name (required)
     * @param username The user&#39;s username. (required)
     * @param password The user&#39;s password. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> sessionControllerLoginWithHttpInfo(String shortName, String username, String password) throws ApiException {
        okhttp3.Call localVarCall = sessionControllerLoginValidateBeforeCall(shortName, username, password, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Login as a customer given their username and password. (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param username The user&#39;s username. (required)
     * @param password The user&#39;s password. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionControllerLoginAsync(String shortName, String username, String password, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionControllerLoginValidateBeforeCall(shortName, username, password, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionControllerLogout
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionControllerLogoutCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/session"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionControllerLogoutValidateBeforeCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling sessionControllerLogout(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling sessionControllerLogout(Async)");
        }

        return sessionControllerLogoutCall(shortName, token, _callback);

    }

    /**
     * Logout a customer previously logged in via the Login endpoint.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void sessionControllerLogout(String shortName, String token) throws ApiException {
        sessionControllerLogoutWithHttpInfo(shortName, token);
    }

    /**
     * Logout a customer previously logged in via the Login endpoint.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionControllerLogoutWithHttpInfo(String shortName, String token) throws ApiException {
        okhttp3.Call localVarCall = sessionControllerLogoutValidateBeforeCall(shortName, token, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Logout a customer previously logged in via the Login endpoint. (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionControllerLogoutAsync(String shortName, String token, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionControllerLogoutValidateBeforeCall(shortName, token, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sessionControllerResetPassword
     * @param shortName The unique client short-name (required)
     * @param email The login Email Address. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionControllerResetPasswordCall(String shortName, String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/session/resetpassword"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sessionControllerResetPasswordValidateBeforeCall(String shortName, String email, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling sessionControllerResetPassword(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling sessionControllerResetPassword(Async)");
        }

        return sessionControllerResetPasswordCall(shortName, email, _callback);

    }

    /**
     * Reset the customer&#39;s password. An email will be sent out to reset.
     * 
     * @param shortName The unique client short-name (required)
     * @param email The login Email Address. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void sessionControllerResetPassword(String shortName, String email) throws ApiException {
        sessionControllerResetPasswordWithHttpInfo(shortName, email);
    }

    /**
     * Reset the customer&#39;s password. An email will be sent out to reset.
     * 
     * @param shortName The unique client short-name (required)
     * @param email The login Email Address. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sessionControllerResetPasswordWithHttpInfo(String shortName, String email) throws ApiException {
        okhttp3.Call localVarCall = sessionControllerResetPasswordValidateBeforeCall(shortName, email, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset the customer&#39;s password. An email will be sent out to reset. (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param email The login Email Address. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sessionControllerResetPasswordAsync(String shortName, String email, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sessionControllerResetPasswordValidateBeforeCall(shortName, email, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
