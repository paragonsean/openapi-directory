/*
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LandlordAccountingEntryModel;
import org.openapitools.client.model.LandlordAccountingInvoiceModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Landlord Accounting
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:04.921745-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LandlordAccountingModel {
  public static final String SERIALIZED_NAME_ACCOUNT_BALANCE = "AccountBalance";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_BALANCE)
  private Double accountBalance;

  public static final String SERIALIZED_NAME_LAST_PAYMENT = "LastPayment";
  @SerializedName(SERIALIZED_NAME_LAST_PAYMENT)
  private OffsetDateTime lastPayment;

  public static final String SERIALIZED_NAME_PAYMENT_HISTORY = "PaymentHistory";
  @SerializedName(SERIALIZED_NAME_PAYMENT_HISTORY)
  private List<LandlordAccountingEntryModel> paymentHistory = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATEMENTS = "Statements";
  @SerializedName(SERIALIZED_NAME_STATEMENTS)
  private List<LandlordAccountingInvoiceModel> statements = new ArrayList<>();

  public LandlordAccountingModel() {
  }

  public LandlordAccountingModel accountBalance(Double accountBalance) {
    this.accountBalance = accountBalance;
    return this;
  }

  /**
   * Account Balance
   * @return accountBalance
   */
  @javax.annotation.Nullable
  public Double getAccountBalance() {
    return accountBalance;
  }

  public void setAccountBalance(Double accountBalance) {
    this.accountBalance = accountBalance;
  }


  public LandlordAccountingModel lastPayment(OffsetDateTime lastPayment) {
    this.lastPayment = lastPayment;
    return this;
  }

  /**
   * Last Payment Made
   * @return lastPayment
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastPayment() {
    return lastPayment;
  }

  public void setLastPayment(OffsetDateTime lastPayment) {
    this.lastPayment = lastPayment;
  }


  public LandlordAccountingModel paymentHistory(List<LandlordAccountingEntryModel> paymentHistory) {
    this.paymentHistory = paymentHistory;
    return this;
  }

  public LandlordAccountingModel addPaymentHistoryItem(LandlordAccountingEntryModel paymentHistoryItem) {
    if (this.paymentHistory == null) {
      this.paymentHistory = new ArrayList<>();
    }
    this.paymentHistory.add(paymentHistoryItem);
    return this;
  }

  /**
   * Payment History
   * @return paymentHistory
   */
  @javax.annotation.Nullable
  public List<LandlordAccountingEntryModel> getPaymentHistory() {
    return paymentHistory;
  }

  public void setPaymentHistory(List<LandlordAccountingEntryModel> paymentHistory) {
    this.paymentHistory = paymentHistory;
  }


  public LandlordAccountingModel statements(List<LandlordAccountingInvoiceModel> statements) {
    this.statements = statements;
    return this;
  }

  public LandlordAccountingModel addStatementsItem(LandlordAccountingInvoiceModel statementsItem) {
    if (this.statements == null) {
      this.statements = new ArrayList<>();
    }
    this.statements.add(statementsItem);
    return this;
  }

  /**
   * Statements
   * @return statements
   */
  @javax.annotation.Nullable
  public List<LandlordAccountingInvoiceModel> getStatements() {
    return statements;
  }

  public void setStatements(List<LandlordAccountingInvoiceModel> statements) {
    this.statements = statements;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LandlordAccountingModel landlordAccountingModel = (LandlordAccountingModel) o;
    return Objects.equals(this.accountBalance, landlordAccountingModel.accountBalance) &&
        Objects.equals(this.lastPayment, landlordAccountingModel.lastPayment) &&
        Objects.equals(this.paymentHistory, landlordAccountingModel.paymentHistory) &&
        Objects.equals(this.statements, landlordAccountingModel.statements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountBalance, lastPayment, paymentHistory, statements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LandlordAccountingModel {\n");
    sb.append("    accountBalance: ").append(toIndentedString(accountBalance)).append("\n");
    sb.append("    lastPayment: ").append(toIndentedString(lastPayment)).append("\n");
    sb.append("    paymentHistory: ").append(toIndentedString(paymentHistory)).append("\n");
    sb.append("    statements: ").append(toIndentedString(statements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountBalance");
    openapiFields.add("LastPayment");
    openapiFields.add("PaymentHistory");
    openapiFields.add("Statements");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LandlordAccountingModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LandlordAccountingModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LandlordAccountingModel is not found in the empty JSON string", LandlordAccountingModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LandlordAccountingModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LandlordAccountingModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("PaymentHistory") != null && !jsonObj.get("PaymentHistory").isJsonNull()) {
        JsonArray jsonArraypaymentHistory = jsonObj.getAsJsonArray("PaymentHistory");
        if (jsonArraypaymentHistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PaymentHistory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PaymentHistory` to be an array in the JSON string but got `%s`", jsonObj.get("PaymentHistory").toString()));
          }

          // validate the optional field `PaymentHistory` (array)
          for (int i = 0; i < jsonArraypaymentHistory.size(); i++) {
            LandlordAccountingEntryModel.validateJsonElement(jsonArraypaymentHistory.get(i));
          };
        }
      }
      if (jsonObj.get("Statements") != null && !jsonObj.get("Statements").isJsonNull()) {
        JsonArray jsonArraystatements = jsonObj.getAsJsonArray("Statements");
        if (jsonArraystatements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Statements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Statements` to be an array in the JSON string but got `%s`", jsonObj.get("Statements").toString()));
          }

          // validate the optional field `Statements` (array)
          for (int i = 0; i < jsonArraystatements.size(); i++) {
            LandlordAccountingInvoiceModel.validateJsonElement(jsonArraystatements.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LandlordAccountingModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LandlordAccountingModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LandlordAccountingModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LandlordAccountingModel.class));

       return (TypeAdapter<T>) new TypeAdapter<LandlordAccountingModel>() {
           @Override
           public void write(JsonWriter out, LandlordAccountingModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LandlordAccountingModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LandlordAccountingModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LandlordAccountingModel
   * @throws IOException if the JSON string is invalid with respect to LandlordAccountingModel
   */
  public static LandlordAccountingModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LandlordAccountingModel.class);
  }

  /**
   * Convert an instance of LandlordAccountingModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

