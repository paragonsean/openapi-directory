/*
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LandlordChaseNoteModel;
import org.openapitools.client.model.LandlordRentOustandingItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Landlord Rent Arrears.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:04.921745-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LandlordRentArrearsModel {
  public static final String SERIALIZED_NAME_CHASE_NOTES = "ChaseNotes";
  @SerializedName(SERIALIZED_NAME_CHASE_NOTES)
  private List<LandlordChaseNoteModel> chaseNotes = new ArrayList<>();

  public static final String SERIALIZED_NAME_RENT_COLLECTED = "RentCollected";
  @SerializedName(SERIALIZED_NAME_RENT_COLLECTED)
  private Double rentCollected;

  public static final String SERIALIZED_NAME_RENT_OUTSTANDING = "RentOutstanding";
  @SerializedName(SERIALIZED_NAME_RENT_OUTSTANDING)
  private List<LandlordRentOustandingItem> rentOutstanding = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_RENT_ARREARS = "TotalRentArrears";
  @SerializedName(SERIALIZED_NAME_TOTAL_RENT_ARREARS)
  private Double totalRentArrears;

  public LandlordRentArrearsModel() {
  }

  public LandlordRentArrearsModel chaseNotes(List<LandlordChaseNoteModel> chaseNotes) {
    this.chaseNotes = chaseNotes;
    return this;
  }

  public LandlordRentArrearsModel addChaseNotesItem(LandlordChaseNoteModel chaseNotesItem) {
    if (this.chaseNotes == null) {
      this.chaseNotes = new ArrayList<>();
    }
    this.chaseNotes.add(chaseNotesItem);
    return this;
  }

  /**
   * Chase Notes
   * @return chaseNotes
   */
  @javax.annotation.Nullable
  public List<LandlordChaseNoteModel> getChaseNotes() {
    return chaseNotes;
  }

  public void setChaseNotes(List<LandlordChaseNoteModel> chaseNotes) {
    this.chaseNotes = chaseNotes;
  }


  public LandlordRentArrearsModel rentCollected(Double rentCollected) {
    this.rentCollected = rentCollected;
    return this;
  }

  /**
   * Rent Collected
   * @return rentCollected
   */
  @javax.annotation.Nullable
  public Double getRentCollected() {
    return rentCollected;
  }

  public void setRentCollected(Double rentCollected) {
    this.rentCollected = rentCollected;
  }


  public LandlordRentArrearsModel rentOutstanding(List<LandlordRentOustandingItem> rentOutstanding) {
    this.rentOutstanding = rentOutstanding;
    return this;
  }

  public LandlordRentArrearsModel addRentOutstandingItem(LandlordRentOustandingItem rentOutstandingItem) {
    if (this.rentOutstanding == null) {
      this.rentOutstanding = new ArrayList<>();
    }
    this.rentOutstanding.add(rentOutstandingItem);
    return this;
  }

  /**
   * Outstanding Rent
   * @return rentOutstanding
   */
  @javax.annotation.Nullable
  public List<LandlordRentOustandingItem> getRentOutstanding() {
    return rentOutstanding;
  }

  public void setRentOutstanding(List<LandlordRentOustandingItem> rentOutstanding) {
    this.rentOutstanding = rentOutstanding;
  }


  public LandlordRentArrearsModel totalRentArrears(Double totalRentArrears) {
    this.totalRentArrears = totalRentArrears;
    return this;
  }

  /**
   * Rent Arrears
   * @return totalRentArrears
   */
  @javax.annotation.Nullable
  public Double getTotalRentArrears() {
    return totalRentArrears;
  }

  public void setTotalRentArrears(Double totalRentArrears) {
    this.totalRentArrears = totalRentArrears;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LandlordRentArrearsModel landlordRentArrearsModel = (LandlordRentArrearsModel) o;
    return Objects.equals(this.chaseNotes, landlordRentArrearsModel.chaseNotes) &&
        Objects.equals(this.rentCollected, landlordRentArrearsModel.rentCollected) &&
        Objects.equals(this.rentOutstanding, landlordRentArrearsModel.rentOutstanding) &&
        Objects.equals(this.totalRentArrears, landlordRentArrearsModel.totalRentArrears);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chaseNotes, rentCollected, rentOutstanding, totalRentArrears);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LandlordRentArrearsModel {\n");
    sb.append("    chaseNotes: ").append(toIndentedString(chaseNotes)).append("\n");
    sb.append("    rentCollected: ").append(toIndentedString(rentCollected)).append("\n");
    sb.append("    rentOutstanding: ").append(toIndentedString(rentOutstanding)).append("\n");
    sb.append("    totalRentArrears: ").append(toIndentedString(totalRentArrears)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChaseNotes");
    openapiFields.add("RentCollected");
    openapiFields.add("RentOutstanding");
    openapiFields.add("TotalRentArrears");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LandlordRentArrearsModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LandlordRentArrearsModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LandlordRentArrearsModel is not found in the empty JSON string", LandlordRentArrearsModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LandlordRentArrearsModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LandlordRentArrearsModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ChaseNotes") != null && !jsonObj.get("ChaseNotes").isJsonNull()) {
        JsonArray jsonArraychaseNotes = jsonObj.getAsJsonArray("ChaseNotes");
        if (jsonArraychaseNotes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ChaseNotes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ChaseNotes` to be an array in the JSON string but got `%s`", jsonObj.get("ChaseNotes").toString()));
          }

          // validate the optional field `ChaseNotes` (array)
          for (int i = 0; i < jsonArraychaseNotes.size(); i++) {
            LandlordChaseNoteModel.validateJsonElement(jsonArraychaseNotes.get(i));
          };
        }
      }
      if (jsonObj.get("RentOutstanding") != null && !jsonObj.get("RentOutstanding").isJsonNull()) {
        JsonArray jsonArrayrentOutstanding = jsonObj.getAsJsonArray("RentOutstanding");
        if (jsonArrayrentOutstanding != null) {
          // ensure the json data is an array
          if (!jsonObj.get("RentOutstanding").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `RentOutstanding` to be an array in the JSON string but got `%s`", jsonObj.get("RentOutstanding").toString()));
          }

          // validate the optional field `RentOutstanding` (array)
          for (int i = 0; i < jsonArrayrentOutstanding.size(); i++) {
            LandlordRentOustandingItem.validateJsonElement(jsonArrayrentOutstanding.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LandlordRentArrearsModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LandlordRentArrearsModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LandlordRentArrearsModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LandlordRentArrearsModel.class));

       return (TypeAdapter<T>) new TypeAdapter<LandlordRentArrearsModel>() {
           @Override
           public void write(JsonWriter out, LandlordRentArrearsModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LandlordRentArrearsModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LandlordRentArrearsModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LandlordRentArrearsModel
   * @throws IOException if the JSON string is invalid with respect to LandlordRentArrearsModel
   */
  public static LandlordRentArrearsModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LandlordRentArrearsModel.class);
  }

  /**
   * Convert an instance of LandlordRentArrearsModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

