/*
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Landlord Summary - Landing Page.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:04.921745-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LandlordSummaryTenancyModel {
  public static final String SERIALIZED_NAME_BOND = "Bond";
  @SerializedName(SERIALIZED_NAME_BOND)
  private Double bond;

  public static final String SERIALIZED_NAME_BRANCH_I_D = "BranchID";
  @SerializedName(SERIALIZED_NAME_BRANCH_I_D)
  private String branchID;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GLOBAL_REFERENCE = "GlobalReference";
  @SerializedName(SERIALIZED_NAME_GLOBAL_REFERENCE)
  private String globalReference;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_MAINTENANCE_JOBS = "MaintenanceJobs";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE_JOBS)
  private Integer maintenanceJobs;

  public static final String SERIALIZED_NAME_MANAGED_RENT = "ManagedRent";
  @SerializedName(SERIALIZED_NAME_MANAGED_RENT)
  private Boolean managedRent;

  public static final String SERIALIZED_NAME_PROPERTY_ADDRESS = "PropertyAddress";
  @SerializedName(SERIALIZED_NAME_PROPERTY_ADDRESS)
  private String propertyAddress;

  public static final String SERIALIZED_NAME_RENT = "Rent";
  @SerializedName(SERIALIZED_NAME_RENT)
  private String rent;

  public static final String SERIALIZED_NAME_RENT_ARREARS = "RentArrears";
  @SerializedName(SERIALIZED_NAME_RENT_ARREARS)
  private Double rentArrears;

  public static final String SERIALIZED_NAME_RENT_COLLECTED = "RentCollected";
  @SerializedName(SERIALIZED_NAME_RENT_COLLECTED)
  private Double rentCollected;

  public static final String SERIALIZED_NAME_TENANCY_PROPERTY = "TenancyProperty";
  @SerializedName(SERIALIZED_NAME_TENANCY_PROPERTY)
  private String tenancyProperty;

  public static final String SERIALIZED_NAME_TENANCY_STATE = "TenancyState";
  @SerializedName(SERIALIZED_NAME_TENANCY_STATE)
  private String tenancyState;

  public LandlordSummaryTenancyModel() {
  }

  public LandlordSummaryTenancyModel bond(Double bond) {
    this.bond = bond;
    return this;
  }

  /**
   * Bomd
   * @return bond
   */
  @javax.annotation.Nullable
  public Double getBond() {
    return bond;
  }

  public void setBond(Double bond) {
    this.bond = bond;
  }


  public LandlordSummaryTenancyModel branchID(String branchID) {
    this.branchID = branchID;
    return this;
  }

  /**
   * The Tenancy Branch ID
   * @return branchID
   */
  @javax.annotation.Nullable
  public String getBranchID() {
    return branchID;
  }

  public void setBranchID(String branchID) {
    this.branchID = branchID;
  }


  public LandlordSummaryTenancyModel description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LandlordSummaryTenancyModel globalReference(String globalReference) {
    this.globalReference = globalReference;
    return this;
  }

  /**
   * User Friendly ID
   * @return globalReference
   */
  @javax.annotation.Nullable
  public String getGlobalReference() {
    return globalReference;
  }

  public void setGlobalReference(String globalReference) {
    this.globalReference = globalReference;
  }


  public LandlordSummaryTenancyModel ID(String ID) {
    this.ID = ID;
    return this;
  }

  /**
   * ID
   * @return ID
   */
  @javax.annotation.Nullable
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }


  public LandlordSummaryTenancyModel maintenanceJobs(Integer maintenanceJobs) {
    this.maintenanceJobs = maintenanceJobs;
    return this;
  }

  /**
   * Maintenance Jobs.
   * @return maintenanceJobs
   */
  @javax.annotation.Nullable
  public Integer getMaintenanceJobs() {
    return maintenanceJobs;
  }

  public void setMaintenanceJobs(Integer maintenanceJobs) {
    this.maintenanceJobs = maintenanceJobs;
  }


  public LandlordSummaryTenancyModel managedRent(Boolean managedRent) {
    this.managedRent = managedRent;
    return this;
  }

  /**
   * State of the tenancy
   * @return managedRent
   */
  @javax.annotation.Nullable
  public Boolean getManagedRent() {
    return managedRent;
  }

  public void setManagedRent(Boolean managedRent) {
    this.managedRent = managedRent;
  }


  public LandlordSummaryTenancyModel propertyAddress(String propertyAddress) {
    this.propertyAddress = propertyAddress;
    return this;
  }

  /**
   * Display Property Address
   * @return propertyAddress
   */
  @javax.annotation.Nullable
  public String getPropertyAddress() {
    return propertyAddress;
  }

  public void setPropertyAddress(String propertyAddress) {
    this.propertyAddress = propertyAddress;
  }


  public LandlordSummaryTenancyModel rent(String rent) {
    this.rent = rent;
    return this;
  }

  /**
   * Rent
   * @return rent
   */
  @javax.annotation.Nullable
  public String getRent() {
    return rent;
  }

  public void setRent(String rent) {
    this.rent = rent;
  }


  public LandlordSummaryTenancyModel rentArrears(Double rentArrears) {
    this.rentArrears = rentArrears;
    return this;
  }

  /**
   * Rent Arrears
   * @return rentArrears
   */
  @javax.annotation.Nullable
  public Double getRentArrears() {
    return rentArrears;
  }

  public void setRentArrears(Double rentArrears) {
    this.rentArrears = rentArrears;
  }


  public LandlordSummaryTenancyModel rentCollected(Double rentCollected) {
    this.rentCollected = rentCollected;
    return this;
  }

  /**
   * Rent Arrears
   * @return rentCollected
   */
  @javax.annotation.Nullable
  public Double getRentCollected() {
    return rentCollected;
  }

  public void setRentCollected(Double rentCollected) {
    this.rentCollected = rentCollected;
  }


  public LandlordSummaryTenancyModel tenancyProperty(String tenancyProperty) {
    this.tenancyProperty = tenancyProperty;
    return this;
  }

  /**
   * Tenancy Property
   * @return tenancyProperty
   */
  @javax.annotation.Nullable
  public String getTenancyProperty() {
    return tenancyProperty;
  }

  public void setTenancyProperty(String tenancyProperty) {
    this.tenancyProperty = tenancyProperty;
  }


  public LandlordSummaryTenancyModel tenancyState(String tenancyState) {
    this.tenancyState = tenancyState;
    return this;
  }

  /**
   * State of the tenancy
   * @return tenancyState
   */
  @javax.annotation.Nullable
  public String getTenancyState() {
    return tenancyState;
  }

  public void setTenancyState(String tenancyState) {
    this.tenancyState = tenancyState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LandlordSummaryTenancyModel landlordSummaryTenancyModel = (LandlordSummaryTenancyModel) o;
    return Objects.equals(this.bond, landlordSummaryTenancyModel.bond) &&
        Objects.equals(this.branchID, landlordSummaryTenancyModel.branchID) &&
        Objects.equals(this.description, landlordSummaryTenancyModel.description) &&
        Objects.equals(this.globalReference, landlordSummaryTenancyModel.globalReference) &&
        Objects.equals(this.ID, landlordSummaryTenancyModel.ID) &&
        Objects.equals(this.maintenanceJobs, landlordSummaryTenancyModel.maintenanceJobs) &&
        Objects.equals(this.managedRent, landlordSummaryTenancyModel.managedRent) &&
        Objects.equals(this.propertyAddress, landlordSummaryTenancyModel.propertyAddress) &&
        Objects.equals(this.rent, landlordSummaryTenancyModel.rent) &&
        Objects.equals(this.rentArrears, landlordSummaryTenancyModel.rentArrears) &&
        Objects.equals(this.rentCollected, landlordSummaryTenancyModel.rentCollected) &&
        Objects.equals(this.tenancyProperty, landlordSummaryTenancyModel.tenancyProperty) &&
        Objects.equals(this.tenancyState, landlordSummaryTenancyModel.tenancyState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bond, branchID, description, globalReference, ID, maintenanceJobs, managedRent, propertyAddress, rent, rentArrears, rentCollected, tenancyProperty, tenancyState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LandlordSummaryTenancyModel {\n");
    sb.append("    bond: ").append(toIndentedString(bond)).append("\n");
    sb.append("    branchID: ").append(toIndentedString(branchID)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    globalReference: ").append(toIndentedString(globalReference)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    maintenanceJobs: ").append(toIndentedString(maintenanceJobs)).append("\n");
    sb.append("    managedRent: ").append(toIndentedString(managedRent)).append("\n");
    sb.append("    propertyAddress: ").append(toIndentedString(propertyAddress)).append("\n");
    sb.append("    rent: ").append(toIndentedString(rent)).append("\n");
    sb.append("    rentArrears: ").append(toIndentedString(rentArrears)).append("\n");
    sb.append("    rentCollected: ").append(toIndentedString(rentCollected)).append("\n");
    sb.append("    tenancyProperty: ").append(toIndentedString(tenancyProperty)).append("\n");
    sb.append("    tenancyState: ").append(toIndentedString(tenancyState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Bond");
    openapiFields.add("BranchID");
    openapiFields.add("Description");
    openapiFields.add("GlobalReference");
    openapiFields.add("ID");
    openapiFields.add("MaintenanceJobs");
    openapiFields.add("ManagedRent");
    openapiFields.add("PropertyAddress");
    openapiFields.add("Rent");
    openapiFields.add("RentArrears");
    openapiFields.add("RentCollected");
    openapiFields.add("TenancyProperty");
    openapiFields.add("TenancyState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LandlordSummaryTenancyModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LandlordSummaryTenancyModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LandlordSummaryTenancyModel is not found in the empty JSON string", LandlordSummaryTenancyModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LandlordSummaryTenancyModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LandlordSummaryTenancyModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BranchID") != null && !jsonObj.get("BranchID").isJsonNull()) && !jsonObj.get("BranchID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BranchID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BranchID").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("GlobalReference") != null && !jsonObj.get("GlobalReference").isJsonNull()) && !jsonObj.get("GlobalReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GlobalReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GlobalReference").toString()));
      }
      if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if ((jsonObj.get("PropertyAddress") != null && !jsonObj.get("PropertyAddress").isJsonNull()) && !jsonObj.get("PropertyAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PropertyAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PropertyAddress").toString()));
      }
      if ((jsonObj.get("Rent") != null && !jsonObj.get("Rent").isJsonNull()) && !jsonObj.get("Rent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Rent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Rent").toString()));
      }
      if ((jsonObj.get("TenancyProperty") != null && !jsonObj.get("TenancyProperty").isJsonNull()) && !jsonObj.get("TenancyProperty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TenancyProperty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TenancyProperty").toString()));
      }
      if ((jsonObj.get("TenancyState") != null && !jsonObj.get("TenancyState").isJsonNull()) && !jsonObj.get("TenancyState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TenancyState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TenancyState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LandlordSummaryTenancyModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LandlordSummaryTenancyModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LandlordSummaryTenancyModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LandlordSummaryTenancyModel.class));

       return (TypeAdapter<T>) new TypeAdapter<LandlordSummaryTenancyModel>() {
           @Override
           public void write(JsonWriter out, LandlordSummaryTenancyModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LandlordSummaryTenancyModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LandlordSummaryTenancyModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LandlordSummaryTenancyModel
   * @throws IOException if the JSON string is invalid with respect to LandlordSummaryTenancyModel
   */
  public static LandlordSummaryTenancyModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LandlordSummaryTenancyModel.class);
  }

  /**
   * Convert an instance of LandlordSummaryTenancyModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

