/*
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Outstanding Rent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:04.921745-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LandlordRentOustandingItem {
  public static final String SERIALIZED_NAME_DEBT_DAYS = "DebtDays";
  @SerializedName(SERIALIZED_NAME_DEBT_DAYS)
  private Integer debtDays;

  public static final String SERIALIZED_NAME_OUTSTANDING_RENT = "OutstandingRent";
  @SerializedName(SERIALIZED_NAME_OUTSTANDING_RENT)
  private Double outstandingRent;

  public static final String SERIALIZED_NAME_PROPERTY = "Property";
  @SerializedName(SERIALIZED_NAME_PROPERTY)
  private String property;

  public static final String SERIALIZED_NAME_TENANT = "Tenant";
  @SerializedName(SERIALIZED_NAME_TENANT)
  private String tenant;

  public static final String SERIALIZED_NAME_TENANT_I_D = "TenantID";
  @SerializedName(SERIALIZED_NAME_TENANT_I_D)
  private String tenantID;

  public LandlordRentOustandingItem() {
  }

  public LandlordRentOustandingItem debtDays(Integer debtDays) {
    this.debtDays = debtDays;
    return this;
  }

  /**
   * Days since the tenant went into arrears
   * @return debtDays
   */
  @javax.annotation.Nullable
  public Integer getDebtDays() {
    return debtDays;
  }

  public void setDebtDays(Integer debtDays) {
    this.debtDays = debtDays;
  }


  public LandlordRentOustandingItem outstandingRent(Double outstandingRent) {
    this.outstandingRent = outstandingRent;
    return this;
  }

  /**
   * Outstanding Rent
   * @return outstandingRent
   */
  @javax.annotation.Nullable
  public Double getOutstandingRent() {
    return outstandingRent;
  }

  public void setOutstandingRent(Double outstandingRent) {
    this.outstandingRent = outstandingRent;
  }


  public LandlordRentOustandingItem property(String property) {
    this.property = property;
    return this;
  }

  /**
   * Property
   * @return property
   */
  @javax.annotation.Nullable
  public String getProperty() {
    return property;
  }

  public void setProperty(String property) {
    this.property = property;
  }


  public LandlordRentOustandingItem tenant(String tenant) {
    this.tenant = tenant;
    return this;
  }

  /**
   * Tenant
   * @return tenant
   */
  @javax.annotation.Nullable
  public String getTenant() {
    return tenant;
  }

  public void setTenant(String tenant) {
    this.tenant = tenant;
  }


  public LandlordRentOustandingItem tenantID(String tenantID) {
    this.tenantID = tenantID;
    return this;
  }

  /**
   * TenantID
   * @return tenantID
   */
  @javax.annotation.Nullable
  public String getTenantID() {
    return tenantID;
  }

  public void setTenantID(String tenantID) {
    this.tenantID = tenantID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LandlordRentOustandingItem landlordRentOustandingItem = (LandlordRentOustandingItem) o;
    return Objects.equals(this.debtDays, landlordRentOustandingItem.debtDays) &&
        Objects.equals(this.outstandingRent, landlordRentOustandingItem.outstandingRent) &&
        Objects.equals(this.property, landlordRentOustandingItem.property) &&
        Objects.equals(this.tenant, landlordRentOustandingItem.tenant) &&
        Objects.equals(this.tenantID, landlordRentOustandingItem.tenantID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(debtDays, outstandingRent, property, tenant, tenantID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LandlordRentOustandingItem {\n");
    sb.append("    debtDays: ").append(toIndentedString(debtDays)).append("\n");
    sb.append("    outstandingRent: ").append(toIndentedString(outstandingRent)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    tenant: ").append(toIndentedString(tenant)).append("\n");
    sb.append("    tenantID: ").append(toIndentedString(tenantID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DebtDays");
    openapiFields.add("OutstandingRent");
    openapiFields.add("Property");
    openapiFields.add("Tenant");
    openapiFields.add("TenantID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LandlordRentOustandingItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LandlordRentOustandingItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LandlordRentOustandingItem is not found in the empty JSON string", LandlordRentOustandingItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LandlordRentOustandingItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LandlordRentOustandingItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Property") != null && !jsonObj.get("Property").isJsonNull()) && !jsonObj.get("Property").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Property` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Property").toString()));
      }
      if ((jsonObj.get("Tenant") != null && !jsonObj.get("Tenant").isJsonNull()) && !jsonObj.get("Tenant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tenant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Tenant").toString()));
      }
      if ((jsonObj.get("TenantID") != null && !jsonObj.get("TenantID").isJsonNull()) && !jsonObj.get("TenantID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TenantID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TenantID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LandlordRentOustandingItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LandlordRentOustandingItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LandlordRentOustandingItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LandlordRentOustandingItem.class));

       return (TypeAdapter<T>) new TypeAdapter<LandlordRentOustandingItem>() {
           @Override
           public void write(JsonWriter out, LandlordRentOustandingItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LandlordRentOustandingItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LandlordRentOustandingItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LandlordRentOustandingItem
   * @throws IOException if the JSON string is invalid with respect to LandlordRentOustandingItem
   */
  public static LandlordRentOustandingItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LandlordRentOustandingItem.class);
  }

  /**
   * Convert an instance of LandlordRentOustandingItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

