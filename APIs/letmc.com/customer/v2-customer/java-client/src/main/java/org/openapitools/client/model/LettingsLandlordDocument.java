/*
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Document details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:04.921745-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LettingsLandlordDocument {
  public static final String SERIALIZED_NAME_FILE_NAME = "FileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_FILE_SIZE = "FileSize";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private Integer fileSize;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_MI_M_E_TYPE = "MIMEType";
  @SerializedName(SERIALIZED_NAME_MI_M_E_TYPE)
  private String miMEType;

  public static final String SERIALIZED_NAME_NOTE = "Note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public LettingsLandlordDocument() {
  }

  public LettingsLandlordDocument fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * File Name
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public LettingsLandlordDocument fileSize(Integer fileSize) {
    this.fileSize = fileSize;
    return this;
  }

  /**
   * File Size Bytes
   * @return fileSize
   */
  @javax.annotation.Nullable
  public Integer getFileSize() {
    return fileSize;
  }

  public void setFileSize(Integer fileSize) {
    this.fileSize = fileSize;
  }


  public LettingsLandlordDocument ID(String ID) {
    this.ID = ID;
    return this;
  }

  /**
   * ID
   * @return ID
   */
  @javax.annotation.Nullable
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }


  public LettingsLandlordDocument miMEType(String miMEType) {
    this.miMEType = miMEType;
    return this;
  }

  /**
   * MIME Type
   * @return miMEType
   */
  @javax.annotation.Nullable
  public String getMiMEType() {
    return miMEType;
  }

  public void setMiMEType(String miMEType) {
    this.miMEType = miMEType;
  }


  public LettingsLandlordDocument note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Document Note
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LettingsLandlordDocument lettingsLandlordDocument = (LettingsLandlordDocument) o;
    return Objects.equals(this.fileName, lettingsLandlordDocument.fileName) &&
        Objects.equals(this.fileSize, lettingsLandlordDocument.fileSize) &&
        Objects.equals(this.ID, lettingsLandlordDocument.ID) &&
        Objects.equals(this.miMEType, lettingsLandlordDocument.miMEType) &&
        Objects.equals(this.note, lettingsLandlordDocument.note);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileName, fileSize, ID, miMEType, note);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LettingsLandlordDocument {\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    miMEType: ").append(toIndentedString(miMEType)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FileName");
    openapiFields.add("FileSize");
    openapiFields.add("ID");
    openapiFields.add("MIMEType");
    openapiFields.add("Note");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LettingsLandlordDocument
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LettingsLandlordDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LettingsLandlordDocument is not found in the empty JSON string", LettingsLandlordDocument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LettingsLandlordDocument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LettingsLandlordDocument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("FileName") != null && !jsonObj.get("FileName").isJsonNull()) && !jsonObj.get("FileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FileName").toString()));
      }
      if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if ((jsonObj.get("MIMEType") != null && !jsonObj.get("MIMEType").isJsonNull()) && !jsonObj.get("MIMEType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MIMEType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MIMEType").toString()));
      }
      if ((jsonObj.get("Note") != null && !jsonObj.get("Note").isJsonNull()) && !jsonObj.get("Note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Note").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LettingsLandlordDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LettingsLandlordDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LettingsLandlordDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LettingsLandlordDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<LettingsLandlordDocument>() {
           @Override
           public void write(JsonWriter out, LettingsLandlordDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LettingsLandlordDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LettingsLandlordDocument given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LettingsLandlordDocument
   * @throws IOException if the JSON string is invalid with respect to LettingsLandlordDocument
   */
  public static LettingsLandlordDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LettingsLandlordDocument.class);
  }

  /**
   * Convert an instance of LettingsLandlordDocument to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

