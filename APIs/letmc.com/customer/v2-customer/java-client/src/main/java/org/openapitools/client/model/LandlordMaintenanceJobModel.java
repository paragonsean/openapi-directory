/*
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LandlordMaintenanceJobNoteModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Maintenance Job
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:04.921745-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LandlordMaintenanceJobModel {
  public static final String SERIALIZED_NAME_ASSIGNED_TO = "AssignedTo";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_TO)
  private String assignedTo;

  public static final String SERIALIZED_NAME_CLOSED_DATE = "ClosedDate";
  @SerializedName(SERIALIZED_NAME_CLOSED_DATE)
  private OffsetDateTime closedDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MAINTENANCE_NOTES = "MaintenanceNotes";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE_NOTES)
  private List<LandlordMaintenanceJobNoteModel> maintenanceNotes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTY = "Property";
  @SerializedName(SERIALIZED_NAME_PROPERTY)
  private String property;

  public static final String SERIALIZED_NAME_REPORTED = "Reported";
  @SerializedName(SERIALIZED_NAME_REPORTED)
  private OffsetDateTime reported;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public LandlordMaintenanceJobModel() {
  }

  public LandlordMaintenanceJobModel(
     OffsetDateTime closedDate
  ) {
    this();
    this.closedDate = closedDate;
  }

  public LandlordMaintenanceJobModel assignedTo(String assignedTo) {
    this.assignedTo = assignedTo;
    return this;
  }

  /**
   * AssignedTo
   * @return assignedTo
   */
  @javax.annotation.Nullable
  public String getAssignedTo() {
    return assignedTo;
  }

  public void setAssignedTo(String assignedTo) {
    this.assignedTo = assignedTo;
  }


  /**
   * Job Closed Date:-
   * @return closedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getClosedDate() {
    return closedDate;
  }



  public LandlordMaintenanceJobModel description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LandlordMaintenanceJobModel maintenanceNotes(List<LandlordMaintenanceJobNoteModel> maintenanceNotes) {
    this.maintenanceNotes = maintenanceNotes;
    return this;
  }

  public LandlordMaintenanceJobModel addMaintenanceNotesItem(LandlordMaintenanceJobNoteModel maintenanceNotesItem) {
    if (this.maintenanceNotes == null) {
      this.maintenanceNotes = new ArrayList<>();
    }
    this.maintenanceNotes.add(maintenanceNotesItem);
    return this;
  }

  /**
   * Get maintenanceNotes
   * @return maintenanceNotes
   */
  @javax.annotation.Nullable
  public List<LandlordMaintenanceJobNoteModel> getMaintenanceNotes() {
    return maintenanceNotes;
  }

  public void setMaintenanceNotes(List<LandlordMaintenanceJobNoteModel> maintenanceNotes) {
    this.maintenanceNotes = maintenanceNotes;
  }


  public LandlordMaintenanceJobModel property(String property) {
    this.property = property;
    return this;
  }

  /**
   * Property
   * @return property
   */
  @javax.annotation.Nullable
  public String getProperty() {
    return property;
  }

  public void setProperty(String property) {
    this.property = property;
  }


  public LandlordMaintenanceJobModel reported(OffsetDateTime reported) {
    this.reported = reported;
    return this;
  }

  /**
   * Reported
   * @return reported
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReported() {
    return reported;
  }

  public void setReported(OffsetDateTime reported) {
    this.reported = reported;
  }


  public LandlordMaintenanceJobModel status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LandlordMaintenanceJobModel landlordMaintenanceJobModel = (LandlordMaintenanceJobModel) o;
    return Objects.equals(this.assignedTo, landlordMaintenanceJobModel.assignedTo) &&
        Objects.equals(this.closedDate, landlordMaintenanceJobModel.closedDate) &&
        Objects.equals(this.description, landlordMaintenanceJobModel.description) &&
        Objects.equals(this.maintenanceNotes, landlordMaintenanceJobModel.maintenanceNotes) &&
        Objects.equals(this.property, landlordMaintenanceJobModel.property) &&
        Objects.equals(this.reported, landlordMaintenanceJobModel.reported) &&
        Objects.equals(this.status, landlordMaintenanceJobModel.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignedTo, closedDate, description, maintenanceNotes, property, reported, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LandlordMaintenanceJobModel {\n");
    sb.append("    assignedTo: ").append(toIndentedString(assignedTo)).append("\n");
    sb.append("    closedDate: ").append(toIndentedString(closedDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    maintenanceNotes: ").append(toIndentedString(maintenanceNotes)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    reported: ").append(toIndentedString(reported)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssignedTo");
    openapiFields.add("ClosedDate");
    openapiFields.add("Description");
    openapiFields.add("MaintenanceNotes");
    openapiFields.add("Property");
    openapiFields.add("Reported");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LandlordMaintenanceJobModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LandlordMaintenanceJobModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LandlordMaintenanceJobModel is not found in the empty JSON string", LandlordMaintenanceJobModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LandlordMaintenanceJobModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LandlordMaintenanceJobModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AssignedTo") != null && !jsonObj.get("AssignedTo").isJsonNull()) && !jsonObj.get("AssignedTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssignedTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssignedTo").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (jsonObj.get("MaintenanceNotes") != null && !jsonObj.get("MaintenanceNotes").isJsonNull()) {
        JsonArray jsonArraymaintenanceNotes = jsonObj.getAsJsonArray("MaintenanceNotes");
        if (jsonArraymaintenanceNotes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MaintenanceNotes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MaintenanceNotes` to be an array in the JSON string but got `%s`", jsonObj.get("MaintenanceNotes").toString()));
          }

          // validate the optional field `MaintenanceNotes` (array)
          for (int i = 0; i < jsonArraymaintenanceNotes.size(); i++) {
            LandlordMaintenanceJobNoteModel.validateJsonElement(jsonArraymaintenanceNotes.get(i));
          };
        }
      }
      if ((jsonObj.get("Property") != null && !jsonObj.get("Property").isJsonNull()) && !jsonObj.get("Property").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Property` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Property").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LandlordMaintenanceJobModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LandlordMaintenanceJobModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LandlordMaintenanceJobModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LandlordMaintenanceJobModel.class));

       return (TypeAdapter<T>) new TypeAdapter<LandlordMaintenanceJobModel>() {
           @Override
           public void write(JsonWriter out, LandlordMaintenanceJobModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LandlordMaintenanceJobModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LandlordMaintenanceJobModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LandlordMaintenanceJobModel
   * @throws IOException if the JSON string is invalid with respect to LandlordMaintenanceJobModel
   */
  public static LandlordMaintenanceJobModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LandlordMaintenanceJobModel.class);
  }

  /**
   * Convert an instance of LandlordMaintenanceJobModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

