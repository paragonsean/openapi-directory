/*
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LandlordAccountingModel;
import org.openapitools.client.model.LandlordCrmEntry;
import org.openapitools.client.model.LandlordMaintenanceModel;
import org.openapitools.client.model.LandlordProfitLossModel;
import org.openapitools.client.model.LandlordRentArrearsModel;
import org.openapitools.client.model.LandlordSettingsModel;
import org.openapitools.client.model.LandlordSummaryModel;
import org.openapitools.client.model.LandlordTenancyModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LandlordControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LandlordControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LandlordControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for landlordControllerCreateMaintenancePreference
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param tenancyID The Tenancy ID (required)
     * @param name Name of the maintenance preference to add (required)
     * @param notes Notes of the maintenance preference to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerCreateMaintenancePreferenceCall(String shortName, String token, String tenancyID, String name, String notes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/landlord/tenancy/maintenance/preference"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (tenancyID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenancyID", tenancyID));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (notes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notes", notes));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call landlordControllerCreateMaintenancePreferenceValidateBeforeCall(String shortName, String token, String tenancyID, String name, String notes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling landlordControllerCreateMaintenancePreference(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling landlordControllerCreateMaintenancePreference(Async)");
        }

        // verify the required parameter 'tenancyID' is set
        if (tenancyID == null) {
            throw new ApiException("Missing the required parameter 'tenancyID' when calling landlordControllerCreateMaintenancePreference(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling landlordControllerCreateMaintenancePreference(Async)");
        }

        // verify the required parameter 'notes' is set
        if (notes == null) {
            throw new ApiException("Missing the required parameter 'notes' when calling landlordControllerCreateMaintenancePreference(Async)");
        }

        return landlordControllerCreateMaintenancePreferenceCall(shortName, token, tenancyID, name, notes, _callback);

    }

    /**
     * Post tenancy maintenance preferences:-
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param tenancyID The Tenancy ID (required)
     * @param name Name of the maintenance preference to add (required)
     * @param notes Notes of the maintenance preference to add (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String landlordControllerCreateMaintenancePreference(String shortName, String token, String tenancyID, String name, String notes) throws ApiException {
        ApiResponse<String> localVarResp = landlordControllerCreateMaintenancePreferenceWithHttpInfo(shortName, token, tenancyID, name, notes);
        return localVarResp.getData();
    }

    /**
     * Post tenancy maintenance preferences:-
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param tenancyID The Tenancy ID (required)
     * @param name Name of the maintenance preference to add (required)
     * @param notes Notes of the maintenance preference to add (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> landlordControllerCreateMaintenancePreferenceWithHttpInfo(String shortName, String token, String tenancyID, String name, String notes) throws ApiException {
        okhttp3.Call localVarCall = landlordControllerCreateMaintenancePreferenceValidateBeforeCall(shortName, token, tenancyID, name, notes, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Post tenancy maintenance preferences:- (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param tenancyID The Tenancy ID (required)
     * @param name Name of the maintenance preference to add (required)
     * @param notes Notes of the maintenance preference to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerCreateMaintenancePreferenceAsync(String shortName, String token, String tenancyID, String name, String notes, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = landlordControllerCreateMaintenancePreferenceValidateBeforeCall(shortName, token, tenancyID, name, notes, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for landlordControllerGetAccounts
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetAccountsCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/landlord/accounting"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call landlordControllerGetAccountsValidateBeforeCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling landlordControllerGetAccounts(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling landlordControllerGetAccounts(Async)");
        }

        return landlordControllerGetAccountsCall(shortName, token, _callback);

    }

    /**
     * Get the accounting details for the landlord.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @return LandlordAccountingModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public LandlordAccountingModel landlordControllerGetAccounts(String shortName, String token) throws ApiException {
        ApiResponse<LandlordAccountingModel> localVarResp = landlordControllerGetAccountsWithHttpInfo(shortName, token);
        return localVarResp.getData();
    }

    /**
     * Get the accounting details for the landlord.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @return ApiResponse&lt;LandlordAccountingModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LandlordAccountingModel> landlordControllerGetAccountsWithHttpInfo(String shortName, String token) throws ApiException {
        okhttp3.Call localVarCall = landlordControllerGetAccountsValidateBeforeCall(shortName, token, null);
        Type localVarReturnType = new TypeToken<LandlordAccountingModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the accounting details for the landlord. (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetAccountsAsync(String shortName, String token, final ApiCallback<LandlordAccountingModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = landlordControllerGetAccountsValidateBeforeCall(shortName, token, _callback);
        Type localVarReturnType = new TypeToken<LandlordAccountingModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for landlordControllerGetDocument
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param ID The Document ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetDocumentCall(String shortName, String token, String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/landlord/document"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (ID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ID", ID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call landlordControllerGetDocumentValidateBeforeCall(String shortName, String token, String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling landlordControllerGetDocument(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling landlordControllerGetDocument(Async)");
        }

        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling landlordControllerGetDocument(Async)");
        }

        return landlordControllerGetDocumentCall(shortName, token, ID, _callback);

    }

    /**
     * Download a Document
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param ID The Document ID (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object landlordControllerGetDocument(String shortName, String token, String ID) throws ApiException {
        ApiResponse<Object> localVarResp = landlordControllerGetDocumentWithHttpInfo(shortName, token, ID);
        return localVarResp.getData();
    }

    /**
     * Download a Document
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param ID The Document ID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> landlordControllerGetDocumentWithHttpInfo(String shortName, String token, String ID) throws ApiException {
        okhttp3.Call localVarCall = landlordControllerGetDocumentValidateBeforeCall(shortName, token, ID, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download a Document (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param ID The Document ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetDocumentAsync(String shortName, String token, String ID, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = landlordControllerGetDocumentValidateBeforeCall(shortName, token, ID, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for landlordControllerGetInvetoryReport
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param tenancyID The Tenancy ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetInvetoryReportCall(String shortName, String token, String tenancyID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/landlord/inventory"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (tenancyID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenancyID", tenancyID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call landlordControllerGetInvetoryReportValidateBeforeCall(String shortName, String token, String tenancyID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling landlordControllerGetInvetoryReport(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling landlordControllerGetInvetoryReport(Async)");
        }

        // verify the required parameter 'tenancyID' is set
        if (tenancyID == null) {
            throw new ApiException("Missing the required parameter 'tenancyID' when calling landlordControllerGetInvetoryReport(Async)");
        }

        return landlordControllerGetInvetoryReportCall(shortName, token, tenancyID, _callback);

    }

    /**
     * Generate a Inventory PDF for a tenancy
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param tenancyID The Tenancy ID (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object landlordControllerGetInvetoryReport(String shortName, String token, String tenancyID) throws ApiException {
        ApiResponse<Object> localVarResp = landlordControllerGetInvetoryReportWithHttpInfo(shortName, token, tenancyID);
        return localVarResp.getData();
    }

    /**
     * Generate a Inventory PDF for a tenancy
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param tenancyID The Tenancy ID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> landlordControllerGetInvetoryReportWithHttpInfo(String shortName, String token, String tenancyID) throws ApiException {
        okhttp3.Call localVarCall = landlordControllerGetInvetoryReportValidateBeforeCall(shortName, token, tenancyID, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a Inventory PDF for a tenancy (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param tenancyID The Tenancy ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetInvetoryReportAsync(String shortName, String token, String tenancyID, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = landlordControllerGetInvetoryReportValidateBeforeCall(shortName, token, tenancyID, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for landlordControllerGetInvoice
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param invoiceID The invoice ID to load. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetInvoiceCall(String shortName, String token, String invoiceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/landlord/invoice"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (invoiceID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceID", invoiceID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call landlordControllerGetInvoiceValidateBeforeCall(String shortName, String token, String invoiceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling landlordControllerGetInvoice(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling landlordControllerGetInvoice(Async)");
        }

        // verify the required parameter 'invoiceID' is set
        if (invoiceID == null) {
            throw new ApiException("Missing the required parameter 'invoiceID' when calling landlordControllerGetInvoice(Async)");
        }

        return landlordControllerGetInvoiceCall(shortName, token, invoiceID, _callback);

    }

    /**
     * Get an invoice pdf belonging to the landlord.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param invoiceID The invoice ID to load. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object landlordControllerGetInvoice(String shortName, String token, String invoiceID) throws ApiException {
        ApiResponse<Object> localVarResp = landlordControllerGetInvoiceWithHttpInfo(shortName, token, invoiceID);
        return localVarResp.getData();
    }

    /**
     * Get an invoice pdf belonging to the landlord.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param invoiceID The invoice ID to load. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> landlordControllerGetInvoiceWithHttpInfo(String shortName, String token, String invoiceID) throws ApiException {
        okhttp3.Call localVarCall = landlordControllerGetInvoiceValidateBeforeCall(shortName, token, invoiceID, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an invoice pdf belonging to the landlord. (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param invoiceID The invoice ID to load. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetInvoiceAsync(String shortName, String token, String invoiceID, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = landlordControllerGetInvoiceValidateBeforeCall(shortName, token, invoiceID, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for landlordControllerGetLandlordCrmEntries
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetLandlordCrmEntriesCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/landlord/landlordcrmentries"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call landlordControllerGetLandlordCrmEntriesValidateBeforeCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling landlordControllerGetLandlordCrmEntries(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling landlordControllerGetLandlordCrmEntries(Async)");
        }

        return landlordControllerGetLandlordCrmEntriesCall(shortName, token, _callback);

    }

    /**
     * Retrieve landlord&#39;s CRM ID
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @return List&lt;LandlordCrmEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<LandlordCrmEntry> landlordControllerGetLandlordCrmEntries(String shortName, String token) throws ApiException {
        ApiResponse<List<LandlordCrmEntry>> localVarResp = landlordControllerGetLandlordCrmEntriesWithHttpInfo(shortName, token);
        return localVarResp.getData();
    }

    /**
     * Retrieve landlord&#39;s CRM ID
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @return ApiResponse&lt;List&lt;LandlordCrmEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LandlordCrmEntry>> landlordControllerGetLandlordCrmEntriesWithHttpInfo(String shortName, String token) throws ApiException {
        okhttp3.Call localVarCall = landlordControllerGetLandlordCrmEntriesValidateBeforeCall(shortName, token, null);
        Type localVarReturnType = new TypeToken<List<LandlordCrmEntry>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve landlord&#39;s CRM ID (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetLandlordCrmEntriesAsync(String shortName, String token, final ApiCallback<List<LandlordCrmEntry>> _callback) throws ApiException {

        okhttp3.Call localVarCall = landlordControllerGetLandlordCrmEntriesValidateBeforeCall(shortName, token, _callback);
        Type localVarReturnType = new TypeToken<List<LandlordCrmEntry>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for landlordControllerGetMaintenanceJobs
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetMaintenanceJobsCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/landlord/maintenance"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call landlordControllerGetMaintenanceJobsValidateBeforeCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling landlordControllerGetMaintenanceJobs(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling landlordControllerGetMaintenanceJobs(Async)");
        }

        return landlordControllerGetMaintenanceJobsCall(shortName, token, _callback);

    }

    /**
     * Get Active maintenance jobs.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @return LandlordMaintenanceModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public LandlordMaintenanceModel landlordControllerGetMaintenanceJobs(String shortName, String token) throws ApiException {
        ApiResponse<LandlordMaintenanceModel> localVarResp = landlordControllerGetMaintenanceJobsWithHttpInfo(shortName, token);
        return localVarResp.getData();
    }

    /**
     * Get Active maintenance jobs.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @return ApiResponse&lt;LandlordMaintenanceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LandlordMaintenanceModel> landlordControllerGetMaintenanceJobsWithHttpInfo(String shortName, String token) throws ApiException {
        okhttp3.Call localVarCall = landlordControllerGetMaintenanceJobsValidateBeforeCall(shortName, token, null);
        Type localVarReturnType = new TypeToken<LandlordMaintenanceModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Active maintenance jobs. (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetMaintenanceJobsAsync(String shortName, String token, final ApiCallback<LandlordMaintenanceModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = landlordControllerGetMaintenanceJobsValidateBeforeCall(shortName, token, _callback);
        Type localVarReturnType = new TypeToken<LandlordMaintenanceModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for landlordControllerGetProfitLossReport
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetProfitLossReportCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/landlord/profitloss"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call landlordControllerGetProfitLossReportValidateBeforeCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling landlordControllerGetProfitLossReport(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling landlordControllerGetProfitLossReport(Async)");
        }

        return landlordControllerGetProfitLossReportCall(shortName, token, _callback);

    }

    /**
     * Generate a Profit and Loss Report
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @return LandlordProfitLossModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public LandlordProfitLossModel landlordControllerGetProfitLossReport(String shortName, String token) throws ApiException {
        ApiResponse<LandlordProfitLossModel> localVarResp = landlordControllerGetProfitLossReportWithHttpInfo(shortName, token);
        return localVarResp.getData();
    }

    /**
     * Generate a Profit and Loss Report
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @return ApiResponse&lt;LandlordProfitLossModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LandlordProfitLossModel> landlordControllerGetProfitLossReportWithHttpInfo(String shortName, String token) throws ApiException {
        okhttp3.Call localVarCall = landlordControllerGetProfitLossReportValidateBeforeCall(shortName, token, null);
        Type localVarReturnType = new TypeToken<LandlordProfitLossModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a Profit and Loss Report (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetProfitLossReportAsync(String shortName, String token, final ApiCallback<LandlordProfitLossModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = landlordControllerGetProfitLossReportValidateBeforeCall(shortName, token, _callback);
        Type localVarReturnType = new TypeToken<LandlordProfitLossModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for landlordControllerGetRentArrears
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetRentArrearsCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/landlord/rentarrears"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call landlordControllerGetRentArrearsValidateBeforeCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling landlordControllerGetRentArrears(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling landlordControllerGetRentArrears(Async)");
        }

        return landlordControllerGetRentArrearsCall(shortName, token, _callback);

    }

    /**
     * Rent Arrears
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @return LandlordRentArrearsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public LandlordRentArrearsModel landlordControllerGetRentArrears(String shortName, String token) throws ApiException {
        ApiResponse<LandlordRentArrearsModel> localVarResp = landlordControllerGetRentArrearsWithHttpInfo(shortName, token);
        return localVarResp.getData();
    }

    /**
     * Rent Arrears
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @return ApiResponse&lt;LandlordRentArrearsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LandlordRentArrearsModel> landlordControllerGetRentArrearsWithHttpInfo(String shortName, String token) throws ApiException {
        okhttp3.Call localVarCall = landlordControllerGetRentArrearsValidateBeforeCall(shortName, token, null);
        Type localVarReturnType = new TypeToken<LandlordRentArrearsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rent Arrears (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetRentArrearsAsync(String shortName, String token, final ApiCallback<LandlordRentArrearsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = landlordControllerGetRentArrearsValidateBeforeCall(shortName, token, _callback);
        Type localVarReturnType = new TypeToken<LandlordRentArrearsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for landlordControllerGetSASReport
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param yearEnd The Tax Year End. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetSASReportCall(String shortName, String token, Integer yearEnd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/landlord/sas"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (yearEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("yearEnd", yearEnd));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call landlordControllerGetSASReportValidateBeforeCall(String shortName, String token, Integer yearEnd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling landlordControllerGetSASReport(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling landlordControllerGetSASReport(Async)");
        }

        // verify the required parameter 'yearEnd' is set
        if (yearEnd == null) {
            throw new ApiException("Missing the required parameter 'yearEnd' when calling landlordControllerGetSASReport(Async)");
        }

        return landlordControllerGetSASReportCall(shortName, token, yearEnd, _callback);

    }

    /**
     * Generate a Self Assessment Tax Report
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param yearEnd The Tax Year End. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object landlordControllerGetSASReport(String shortName, String token, Integer yearEnd) throws ApiException {
        ApiResponse<Object> localVarResp = landlordControllerGetSASReportWithHttpInfo(shortName, token, yearEnd);
        return localVarResp.getData();
    }

    /**
     * Generate a Self Assessment Tax Report
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param yearEnd The Tax Year End. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> landlordControllerGetSASReportWithHttpInfo(String shortName, String token, Integer yearEnd) throws ApiException {
        okhttp3.Call localVarCall = landlordControllerGetSASReportValidateBeforeCall(shortName, token, yearEnd, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a Self Assessment Tax Report (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param yearEnd The Tax Year End. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetSASReportAsync(String shortName, String token, Integer yearEnd, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = landlordControllerGetSASReportValidateBeforeCall(shortName, token, yearEnd, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for landlordControllerGetSettings
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetSettingsCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/landlord/settings"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call landlordControllerGetSettingsValidateBeforeCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling landlordControllerGetSettings(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling landlordControllerGetSettings(Async)");
        }

        return landlordControllerGetSettingsCall(shortName, token, _callback);

    }

    /**
     * Get contact details of all linked landlords.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @return LandlordSettingsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public LandlordSettingsModel landlordControllerGetSettings(String shortName, String token) throws ApiException {
        ApiResponse<LandlordSettingsModel> localVarResp = landlordControllerGetSettingsWithHttpInfo(shortName, token);
        return localVarResp.getData();
    }

    /**
     * Get contact details of all linked landlords.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @return ApiResponse&lt;LandlordSettingsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LandlordSettingsModel> landlordControllerGetSettingsWithHttpInfo(String shortName, String token) throws ApiException {
        okhttp3.Call localVarCall = landlordControllerGetSettingsValidateBeforeCall(shortName, token, null);
        Type localVarReturnType = new TypeToken<LandlordSettingsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get contact details of all linked landlords. (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetSettingsAsync(String shortName, String token, final ApiCallback<LandlordSettingsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = landlordControllerGetSettingsValidateBeforeCall(shortName, token, _callback);
        Type localVarReturnType = new TypeToken<LandlordSettingsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for landlordControllerGetSummaryDetails
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetSummaryDetailsCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/landlord/summary"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call landlordControllerGetSummaryDetailsValidateBeforeCall(String shortName, String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling landlordControllerGetSummaryDetails(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling landlordControllerGetSummaryDetails(Async)");
        }

        return landlordControllerGetSummaryDetailsCall(shortName, token, _callback);

    }

    /**
     * Get the summary details for the landlord.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @return LandlordSummaryModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public LandlordSummaryModel landlordControllerGetSummaryDetails(String shortName, String token) throws ApiException {
        ApiResponse<LandlordSummaryModel> localVarResp = landlordControllerGetSummaryDetailsWithHttpInfo(shortName, token);
        return localVarResp.getData();
    }

    /**
     * Get the summary details for the landlord.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @return ApiResponse&lt;LandlordSummaryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LandlordSummaryModel> landlordControllerGetSummaryDetailsWithHttpInfo(String shortName, String token) throws ApiException {
        okhttp3.Call localVarCall = landlordControllerGetSummaryDetailsValidateBeforeCall(shortName, token, null);
        Type localVarReturnType = new TypeToken<LandlordSummaryModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the summary details for the landlord. (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetSummaryDetailsAsync(String shortName, String token, final ApiCallback<LandlordSummaryModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = landlordControllerGetSummaryDetailsValidateBeforeCall(shortName, token, _callback);
        Type localVarReturnType = new TypeToken<LandlordSummaryModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for landlordControllerGetTenancy
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param tenancyID The Tenancy ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetTenancyCall(String shortName, String token, String tenancyID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/landlord/tenancy"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (tenancyID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenancyID", tenancyID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call landlordControllerGetTenancyValidateBeforeCall(String shortName, String token, String tenancyID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling landlordControllerGetTenancy(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling landlordControllerGetTenancy(Async)");
        }

        // verify the required parameter 'tenancyID' is set
        if (tenancyID == null) {
            throw new ApiException("Missing the required parameter 'tenancyID' when calling landlordControllerGetTenancy(Async)");
        }

        return landlordControllerGetTenancyCall(shortName, token, tenancyID, _callback);

    }

    /**
     * Get tenancy details.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param tenancyID The Tenancy ID (required)
     * @return LandlordTenancyModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public LandlordTenancyModel landlordControllerGetTenancy(String shortName, String token, String tenancyID) throws ApiException {
        ApiResponse<LandlordTenancyModel> localVarResp = landlordControllerGetTenancyWithHttpInfo(shortName, token, tenancyID);
        return localVarResp.getData();
    }

    /**
     * Get tenancy details.
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param tenancyID The Tenancy ID (required)
     * @return ApiResponse&lt;LandlordTenancyModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LandlordTenancyModel> landlordControllerGetTenancyWithHttpInfo(String shortName, String token, String tenancyID) throws ApiException {
        okhttp3.Call localVarCall = landlordControllerGetTenancyValidateBeforeCall(shortName, token, tenancyID, null);
        Type localVarReturnType = new TypeToken<LandlordTenancyModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tenancy details. (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param tenancyID The Tenancy ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetTenancyAsync(String shortName, String token, String tenancyID, final ApiCallback<LandlordTenancyModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = landlordControllerGetTenancyValidateBeforeCall(shortName, token, tenancyID, _callback);
        Type localVarReturnType = new TypeToken<LandlordTenancyModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for landlordControllerGetTenancyAgreementReport
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param tenancyID The Tenancy ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetTenancyAgreementReportCall(String shortName, String token, String tenancyID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/customer/{shortName}/landlord/tenancyagreement"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (tenancyID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenancyID", tenancyID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call landlordControllerGetTenancyAgreementReportValidateBeforeCall(String shortName, String token, String tenancyID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling landlordControllerGetTenancyAgreementReport(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling landlordControllerGetTenancyAgreementReport(Async)");
        }

        // verify the required parameter 'tenancyID' is set
        if (tenancyID == null) {
            throw new ApiException("Missing the required parameter 'tenancyID' when calling landlordControllerGetTenancyAgreementReport(Async)");
        }

        return landlordControllerGetTenancyAgreementReportCall(shortName, token, tenancyID, _callback);

    }

    /**
     * Generate a Tenancy Agreement Copy (PDF)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param tenancyID The Tenancy ID (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object landlordControllerGetTenancyAgreementReport(String shortName, String token, String tenancyID) throws ApiException {
        ApiResponse<Object> localVarResp = landlordControllerGetTenancyAgreementReportWithHttpInfo(shortName, token, tenancyID);
        return localVarResp.getData();
    }

    /**
     * Generate a Tenancy Agreement Copy (PDF)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param tenancyID The Tenancy ID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> landlordControllerGetTenancyAgreementReportWithHttpInfo(String shortName, String token, String tenancyID) throws ApiException {
        okhttp3.Call localVarCall = landlordControllerGetTenancyAgreementReportValidateBeforeCall(shortName, token, tenancyID, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a Tenancy Agreement Copy (PDF) (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param token The login token returned from the /session POST call (required)
     * @param tenancyID The Tenancy ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call landlordControllerGetTenancyAgreementReportAsync(String shortName, String token, String tenancyID, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = landlordControllerGetTenancyAgreementReportValidateBeforeCall(shortName, token, tenancyID, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
