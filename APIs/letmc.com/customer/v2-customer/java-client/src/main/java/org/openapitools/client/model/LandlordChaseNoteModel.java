/*
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Landlord Arrears Chase Note.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:04.921745-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LandlordChaseNoteModel {
  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_NOTE = "Note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_NOTE_TYPE = "NoteType";
  @SerializedName(SERIALIZED_NAME_NOTE_TYPE)
  private String noteType;

  public static final String SERIALIZED_NAME_TENANT_I_D = "TenantID";
  @SerializedName(SERIALIZED_NAME_TENANT_I_D)
  private String tenantID;

  public LandlordChaseNoteModel() {
  }

  public LandlordChaseNoteModel date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Created Date
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public LandlordChaseNoteModel note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Note.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public LandlordChaseNoteModel noteType(String noteType) {
    this.noteType = noteType;
    return this;
  }

  /**
   * Note Type
   * @return noteType
   */
  @javax.annotation.Nullable
  public String getNoteType() {
    return noteType;
  }

  public void setNoteType(String noteType) {
    this.noteType = noteType;
  }


  public LandlordChaseNoteModel tenantID(String tenantID) {
    this.tenantID = tenantID;
    return this;
  }

  /**
   * Tenant
   * @return tenantID
   */
  @javax.annotation.Nullable
  public String getTenantID() {
    return tenantID;
  }

  public void setTenantID(String tenantID) {
    this.tenantID = tenantID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LandlordChaseNoteModel landlordChaseNoteModel = (LandlordChaseNoteModel) o;
    return Objects.equals(this.date, landlordChaseNoteModel.date) &&
        Objects.equals(this.note, landlordChaseNoteModel.note) &&
        Objects.equals(this.noteType, landlordChaseNoteModel.noteType) &&
        Objects.equals(this.tenantID, landlordChaseNoteModel.tenantID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, note, noteType, tenantID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LandlordChaseNoteModel {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    noteType: ").append(toIndentedString(noteType)).append("\n");
    sb.append("    tenantID: ").append(toIndentedString(tenantID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Date");
    openapiFields.add("Note");
    openapiFields.add("NoteType");
    openapiFields.add("TenantID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LandlordChaseNoteModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LandlordChaseNoteModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LandlordChaseNoteModel is not found in the empty JSON string", LandlordChaseNoteModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LandlordChaseNoteModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LandlordChaseNoteModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Note") != null && !jsonObj.get("Note").isJsonNull()) && !jsonObj.get("Note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Note").toString()));
      }
      if ((jsonObj.get("NoteType") != null && !jsonObj.get("NoteType").isJsonNull()) && !jsonObj.get("NoteType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NoteType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NoteType").toString()));
      }
      if ((jsonObj.get("TenantID") != null && !jsonObj.get("TenantID").isJsonNull()) && !jsonObj.get("TenantID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TenantID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TenantID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LandlordChaseNoteModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LandlordChaseNoteModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LandlordChaseNoteModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LandlordChaseNoteModel.class));

       return (TypeAdapter<T>) new TypeAdapter<LandlordChaseNoteModel>() {
           @Override
           public void write(JsonWriter out, LandlordChaseNoteModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LandlordChaseNoteModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LandlordChaseNoteModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LandlordChaseNoteModel
   * @throws IOException if the JSON string is invalid with respect to LandlordChaseNoteModel
   */
  public static LandlordChaseNoteModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LandlordChaseNoteModel.class);
  }

  /**
   * Convert an instance of LandlordChaseNoteModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

