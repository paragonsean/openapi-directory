# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LandlordPhotoModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, e_tag: str=None, file_name: str=None, oid: str=None, photo_type: str=None):
        """LandlordPhotoModel - a model defined in OpenAPI

        :param e_tag: The e_tag of this LandlordPhotoModel.
        :param file_name: The file_name of this LandlordPhotoModel.
        :param oid: The oid of this LandlordPhotoModel.
        :param photo_type: The photo_type of this LandlordPhotoModel.
        """
        self.openapi_types = {
            'e_tag': str,
            'file_name': str,
            'oid': str,
            'photo_type': str
        }

        self.attribute_map = {
            'e_tag': 'ETag',
            'file_name': 'FileName',
            'oid': 'OID',
            'photo_type': 'PhotoType'
        }

        self._e_tag = e_tag
        self._file_name = file_name
        self._oid = oid
        self._photo_type = photo_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LandlordPhotoModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LandlordPhotoModel of this LandlordPhotoModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def e_tag(self):
        """Gets the e_tag of this LandlordPhotoModel.

        A unique identifier defining the object and change revision.

        :return: The e_tag of this LandlordPhotoModel.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this LandlordPhotoModel.

        A unique identifier defining the object and change revision.

        :param e_tag: The e_tag of this LandlordPhotoModel.
        :type e_tag: str
        """

        self._e_tag = e_tag

    @property
    def file_name(self):
        """Gets the file_name of this LandlordPhotoModel.

        The file name.

        :return: The file_name of this LandlordPhotoModel.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this LandlordPhotoModel.

        The file name.

        :param file_name: The file_name of this LandlordPhotoModel.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def oid(self):
        """Gets the oid of this LandlordPhotoModel.

        The unique Object ID (OID).

        :return: The oid of this LandlordPhotoModel.
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this LandlordPhotoModel.

        The unique Object ID (OID).

        :param oid: The oid of this LandlordPhotoModel.
        :type oid: str
        """

        self._oid = oid

    @property
    def photo_type(self):
        """Gets the photo_type of this LandlordPhotoModel.

        The photo type.

        :return: The photo_type of this LandlordPhotoModel.
        :rtype: str
        """
        return self._photo_type

    @photo_type.setter
    def photo_type(self, photo_type):
        """Sets the photo_type of this LandlordPhotoModel.

        The photo type.

        :param photo_type: The photo_type of this LandlordPhotoModel.
        :type photo_type: str
        """
        allowed_values = ["Photo", "Map", "FloorPlan", "SiteMap", "AerialPhoto"]  # noqa: E501
        if photo_type not in allowed_values:
            raise ValueError(
                "Invalid value for `photo_type` ({0}), must be one of {1}"
                .format(photo_type, allowed_values)
            )

        self._photo_type = photo_type
