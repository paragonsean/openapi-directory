# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_value_pair_string_string import KeyValuePairStringString
from openapi_server import util


class LandlordProfitLossRowModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, month_totals: List[KeyValuePairStringString]=None, nominal_code: str=None, title: str=None, total: str=None):
        """LandlordProfitLossRowModel - a model defined in OpenAPI

        :param month_totals: The month_totals of this LandlordProfitLossRowModel.
        :param nominal_code: The nominal_code of this LandlordProfitLossRowModel.
        :param title: The title of this LandlordProfitLossRowModel.
        :param total: The total of this LandlordProfitLossRowModel.
        """
        self.openapi_types = {
            'month_totals': List[KeyValuePairStringString],
            'nominal_code': str,
            'title': str,
            'total': str
        }

        self.attribute_map = {
            'month_totals': 'MonthTotals',
            'nominal_code': 'NominalCode',
            'title': 'Title',
            'total': 'Total'
        }

        self._month_totals = month_totals
        self._nominal_code = nominal_code
        self._title = title
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LandlordProfitLossRowModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LandlordProfitLossRowModel of this LandlordProfitLossRowModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def month_totals(self):
        """Gets the month_totals of this LandlordProfitLossRowModel.

        Month Totals

        :return: The month_totals of this LandlordProfitLossRowModel.
        :rtype: List[KeyValuePairStringString]
        """
        return self._month_totals

    @month_totals.setter
    def month_totals(self, month_totals):
        """Sets the month_totals of this LandlordProfitLossRowModel.

        Month Totals

        :param month_totals: The month_totals of this LandlordProfitLossRowModel.
        :type month_totals: List[KeyValuePairStringString]
        """

        self._month_totals = month_totals

    @property
    def nominal_code(self):
        """Gets the nominal_code of this LandlordProfitLossRowModel.

        Nominal Code

        :return: The nominal_code of this LandlordProfitLossRowModel.
        :rtype: str
        """
        return self._nominal_code

    @nominal_code.setter
    def nominal_code(self, nominal_code):
        """Sets the nominal_code of this LandlordProfitLossRowModel.

        Nominal Code

        :param nominal_code: The nominal_code of this LandlordProfitLossRowModel.
        :type nominal_code: str
        """

        self._nominal_code = nominal_code

    @property
    def title(self):
        """Gets the title of this LandlordProfitLossRowModel.

        Title of the values.

        :return: The title of this LandlordProfitLossRowModel.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LandlordProfitLossRowModel.

        Title of the values.

        :param title: The title of this LandlordProfitLossRowModel.
        :type title: str
        """

        self._title = title

    @property
    def total(self):
        """Gets the total of this LandlordProfitLossRowModel.

        Total for all months.

        :return: The total of this LandlordProfitLossRowModel.
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this LandlordProfitLossRowModel.

        Total for all months.

        :param total: The total of this LandlordProfitLossRowModel.
        :type total: str
        """

        self._total = total
