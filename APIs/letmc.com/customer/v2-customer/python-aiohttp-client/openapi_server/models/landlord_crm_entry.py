# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LandlordCrmEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch_id: str=None, global_reference: str=None, name: str=None, oid: str=None):
        """LandlordCrmEntry - a model defined in OpenAPI

        :param branch_id: The branch_id of this LandlordCrmEntry.
        :param global_reference: The global_reference of this LandlordCrmEntry.
        :param name: The name of this LandlordCrmEntry.
        :param oid: The oid of this LandlordCrmEntry.
        """
        self.openapi_types = {
            'branch_id': str,
            'global_reference': str,
            'name': str,
            'oid': str
        }

        self.attribute_map = {
            'branch_id': 'BranchID',
            'global_reference': 'GlobalReference',
            'name': 'Name',
            'oid': 'OID'
        }

        self._branch_id = branch_id
        self._global_reference = global_reference
        self._name = name
        self._oid = oid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LandlordCrmEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LandlordCrmEntry of this LandlordCrmEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch_id(self):
        """Gets the branch_id of this LandlordCrmEntry.


        :return: The branch_id of this LandlordCrmEntry.
        :rtype: str
        """
        return self._branch_id

    @branch_id.setter
    def branch_id(self, branch_id):
        """Sets the branch_id of this LandlordCrmEntry.


        :param branch_id: The branch_id of this LandlordCrmEntry.
        :type branch_id: str
        """

        self._branch_id = branch_id

    @property
    def global_reference(self):
        """Gets the global_reference of this LandlordCrmEntry.


        :return: The global_reference of this LandlordCrmEntry.
        :rtype: str
        """
        return self._global_reference

    @global_reference.setter
    def global_reference(self, global_reference):
        """Sets the global_reference of this LandlordCrmEntry.


        :param global_reference: The global_reference of this LandlordCrmEntry.
        :type global_reference: str
        """

        self._global_reference = global_reference

    @property
    def name(self):
        """Gets the name of this LandlordCrmEntry.


        :return: The name of this LandlordCrmEntry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LandlordCrmEntry.


        :param name: The name of this LandlordCrmEntry.
        :type name: str
        """

        self._name = name

    @property
    def oid(self):
        """Gets the oid of this LandlordCrmEntry.


        :return: The oid of this LandlordCrmEntry.
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this LandlordCrmEntry.


        :param oid: The oid of this LandlordCrmEntry.
        :type oid: str
        """

        self._oid = oid
