# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.landlord_maintenance_job_note_model import LandlordMaintenanceJobNoteModel
from openapi_server import util


class LandlordMaintenanceJobModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assigned_to: str=None, closed_date: datetime=None, description: str=None, maintenance_notes: List[LandlordMaintenanceJobNoteModel]=None, _property: str=None, reported: datetime=None, status: str=None):
        """LandlordMaintenanceJobModel - a model defined in OpenAPI

        :param assigned_to: The assigned_to of this LandlordMaintenanceJobModel.
        :param closed_date: The closed_date of this LandlordMaintenanceJobModel.
        :param description: The description of this LandlordMaintenanceJobModel.
        :param maintenance_notes: The maintenance_notes of this LandlordMaintenanceJobModel.
        :param _property: The _property of this LandlordMaintenanceJobModel.
        :param reported: The reported of this LandlordMaintenanceJobModel.
        :param status: The status of this LandlordMaintenanceJobModel.
        """
        self.openapi_types = {
            'assigned_to': str,
            'closed_date': datetime,
            'description': str,
            'maintenance_notes': List[LandlordMaintenanceJobNoteModel],
            '_property': str,
            'reported': datetime,
            'status': str
        }

        self.attribute_map = {
            'assigned_to': 'AssignedTo',
            'closed_date': 'ClosedDate',
            'description': 'Description',
            'maintenance_notes': 'MaintenanceNotes',
            '_property': 'Property',
            'reported': 'Reported',
            'status': 'Status'
        }

        self._assigned_to = assigned_to
        self._closed_date = closed_date
        self._description = description
        self._maintenance_notes = maintenance_notes
        self.__property = _property
        self._reported = reported
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LandlordMaintenanceJobModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LandlordMaintenanceJobModel of this LandlordMaintenanceJobModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assigned_to(self):
        """Gets the assigned_to of this LandlordMaintenanceJobModel.

        AssignedTo

        :return: The assigned_to of this LandlordMaintenanceJobModel.
        :rtype: str
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this LandlordMaintenanceJobModel.

        AssignedTo

        :param assigned_to: The assigned_to of this LandlordMaintenanceJobModel.
        :type assigned_to: str
        """

        self._assigned_to = assigned_to

    @property
    def closed_date(self):
        """Gets the closed_date of this LandlordMaintenanceJobModel.

        Job Closed Date:-

        :return: The closed_date of this LandlordMaintenanceJobModel.
        :rtype: datetime
        """
        return self._closed_date

    @closed_date.setter
    def closed_date(self, closed_date):
        """Sets the closed_date of this LandlordMaintenanceJobModel.

        Job Closed Date:-

        :param closed_date: The closed_date of this LandlordMaintenanceJobModel.
        :type closed_date: datetime
        """

        self._closed_date = closed_date

    @property
    def description(self):
        """Gets the description of this LandlordMaintenanceJobModel.

        Description

        :return: The description of this LandlordMaintenanceJobModel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LandlordMaintenanceJobModel.

        Description

        :param description: The description of this LandlordMaintenanceJobModel.
        :type description: str
        """

        self._description = description

    @property
    def maintenance_notes(self):
        """Gets the maintenance_notes of this LandlordMaintenanceJobModel.


        :return: The maintenance_notes of this LandlordMaintenanceJobModel.
        :rtype: List[LandlordMaintenanceJobNoteModel]
        """
        return self._maintenance_notes

    @maintenance_notes.setter
    def maintenance_notes(self, maintenance_notes):
        """Sets the maintenance_notes of this LandlordMaintenanceJobModel.


        :param maintenance_notes: The maintenance_notes of this LandlordMaintenanceJobModel.
        :type maintenance_notes: List[LandlordMaintenanceJobNoteModel]
        """

        self._maintenance_notes = maintenance_notes

    @property
    def _property(self):
        """Gets the _property of this LandlordMaintenanceJobModel.

        Property

        :return: The _property of this LandlordMaintenanceJobModel.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this LandlordMaintenanceJobModel.

        Property

        :param _property: The _property of this LandlordMaintenanceJobModel.
        :type _property: str
        """

        self.__property = _property

    @property
    def reported(self):
        """Gets the reported of this LandlordMaintenanceJobModel.

        Reported

        :return: The reported of this LandlordMaintenanceJobModel.
        :rtype: datetime
        """
        return self._reported

    @reported.setter
    def reported(self, reported):
        """Sets the reported of this LandlordMaintenanceJobModel.

        Reported

        :param reported: The reported of this LandlordMaintenanceJobModel.
        :type reported: datetime
        """

        self._reported = reported

    @property
    def status(self):
        """Gets the status of this LandlordMaintenanceJobModel.

        Status

        :return: The status of this LandlordMaintenanceJobModel.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LandlordMaintenanceJobModel.

        Status

        :param status: The status of this LandlordMaintenanceJobModel.
        :type status: str
        """

        self._status = status
