/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LandlordLettingsInspectionModel from './LandlordLettingsInspectionModel';
import LandlordMaintenanceCertificateModel from './LandlordMaintenanceCertificateModel';
import LandlordMaintenancePreferenceModel from './LandlordMaintenancePreferenceModel';
import LettingsLandlordDocument from './LettingsLandlordDocument';

/**
 * The LandlordTenancyModel model module.
 * @module model/LandlordTenancyModel
 * @version v2-customer
 */
class LandlordTenancyModel {
    /**
     * Constructs a new <code>LandlordTenancyModel</code>.
     * Landlord Tenancy Model.
     * @alias module:model/LandlordTenancyModel
     */
    constructor() { 
        
        LandlordTenancyModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LandlordTenancyModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LandlordTenancyModel} obj Optional instance to populate.
     * @return {module:model/LandlordTenancyModel} The populated <code>LandlordTenancyModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LandlordTenancyModel();

            if (data.hasOwnProperty('ActualEndDate')) {
                obj['ActualEndDate'] = ApiClient.convertToType(data['ActualEndDate'], 'Date');
            }
            if (data.hasOwnProperty('Beds')) {
                obj['Beds'] = ApiClient.convertToType(data['Beds'], 'Number');
            }
            if (data.hasOwnProperty('Bond')) {
                obj['Bond'] = ApiClient.convertToType(data['Bond'], 'Number');
            }
            if (data.hasOwnProperty('BranchID')) {
                obj['BranchID'] = ApiClient.convertToType(data['BranchID'], 'String');
            }
            if (data.hasOwnProperty('Certificates')) {
                obj['Certificates'] = ApiClient.convertToType(data['Certificates'], [LandlordMaintenanceCertificateModel]);
            }
            if (data.hasOwnProperty('Documents')) {
                obj['Documents'] = ApiClient.convertToType(data['Documents'], [LettingsLandlordDocument]);
            }
            if (data.hasOwnProperty('FixedDate')) {
                obj['FixedDate'] = ApiClient.convertToType(data['FixedDate'], 'Date');
            }
            if (data.hasOwnProperty('GlobalReference')) {
                obj['GlobalReference'] = ApiClient.convertToType(data['GlobalReference'], 'String');
            }
            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'String');
            }
            if (data.hasOwnProperty('Inspections')) {
                obj['Inspections'] = ApiClient.convertToType(data['Inspections'], [LandlordLettingsInspectionModel]);
            }
            if (data.hasOwnProperty('ManagedRent')) {
                obj['ManagedRent'] = ApiClient.convertToType(data['ManagedRent'], 'Boolean');
            }
            if (data.hasOwnProperty('Preferences')) {
                obj['Preferences'] = ApiClient.convertToType(data['Preferences'], [LandlordMaintenancePreferenceModel]);
            }
            if (data.hasOwnProperty('PreviousRentAmount')) {
                obj['PreviousRentAmount'] = ApiClient.convertToType(data['PreviousRentAmount'], 'Number');
            }
            if (data.hasOwnProperty('PropertyAddress')) {
                obj['PropertyAddress'] = ApiClient.convertToType(data['PropertyAddress'], 'String');
            }
            if (data.hasOwnProperty('Rent')) {
                obj['Rent'] = ApiClient.convertToType(data['Rent'], 'String');
            }
            if (data.hasOwnProperty('RentAmount')) {
                obj['RentAmount'] = ApiClient.convertToType(data['RentAmount'], 'Number');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'Date');
            }
            if (data.hasOwnProperty('TenancyProperty')) {
                obj['TenancyProperty'] = ApiClient.convertToType(data['TenancyProperty'], 'String');
            }
            if (data.hasOwnProperty('TenancyState')) {
                obj['TenancyState'] = ApiClient.convertToType(data['TenancyState'], 'String');
            }
            if (data.hasOwnProperty('Tenants')) {
                obj['Tenants'] = ApiClient.convertToType(data['Tenants'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LandlordTenancyModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LandlordTenancyModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BranchID'] && !(typeof data['BranchID'] === 'string' || data['BranchID'] instanceof String)) {
            throw new Error("Expected the field `BranchID` to be a primitive type in the JSON string but got " + data['BranchID']);
        }
        if (data['Certificates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Certificates'])) {
                throw new Error("Expected the field `Certificates` to be an array in the JSON data but got " + data['Certificates']);
            }
            // validate the optional field `Certificates` (array)
            for (const item of data['Certificates']) {
                LandlordMaintenanceCertificateModel.validateJSON(item);
            };
        }
        if (data['Documents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Documents'])) {
                throw new Error("Expected the field `Documents` to be an array in the JSON data but got " + data['Documents']);
            }
            // validate the optional field `Documents` (array)
            for (const item of data['Documents']) {
                LettingsLandlordDocument.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['GlobalReference'] && !(typeof data['GlobalReference'] === 'string' || data['GlobalReference'] instanceof String)) {
            throw new Error("Expected the field `GlobalReference` to be a primitive type in the JSON string but got " + data['GlobalReference']);
        }
        // ensure the json data is a string
        if (data['ID'] && !(typeof data['ID'] === 'string' || data['ID'] instanceof String)) {
            throw new Error("Expected the field `ID` to be a primitive type in the JSON string but got " + data['ID']);
        }
        if (data['Inspections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Inspections'])) {
                throw new Error("Expected the field `Inspections` to be an array in the JSON data but got " + data['Inspections']);
            }
            // validate the optional field `Inspections` (array)
            for (const item of data['Inspections']) {
                LandlordLettingsInspectionModel.validateJSON(item);
            };
        }
        if (data['Preferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Preferences'])) {
                throw new Error("Expected the field `Preferences` to be an array in the JSON data but got " + data['Preferences']);
            }
            // validate the optional field `Preferences` (array)
            for (const item of data['Preferences']) {
                LandlordMaintenancePreferenceModel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['PropertyAddress'] && !(typeof data['PropertyAddress'] === 'string' || data['PropertyAddress'] instanceof String)) {
            throw new Error("Expected the field `PropertyAddress` to be a primitive type in the JSON string but got " + data['PropertyAddress']);
        }
        // ensure the json data is a string
        if (data['Rent'] && !(typeof data['Rent'] === 'string' || data['Rent'] instanceof String)) {
            throw new Error("Expected the field `Rent` to be a primitive type in the JSON string but got " + data['Rent']);
        }
        // ensure the json data is a string
        if (data['TenancyProperty'] && !(typeof data['TenancyProperty'] === 'string' || data['TenancyProperty'] instanceof String)) {
            throw new Error("Expected the field `TenancyProperty` to be a primitive type in the JSON string but got " + data['TenancyProperty']);
        }
        // ensure the json data is a string
        if (data['TenancyState'] && !(typeof data['TenancyState'] === 'string' || data['TenancyState'] instanceof String)) {
            throw new Error("Expected the field `TenancyState` to be a primitive type in the JSON string but got " + data['TenancyState']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Tenants'])) {
            throw new Error("Expected the field `Tenants` to be an array in the JSON data but got " + data['Tenants']);
        }

        return true;
    }


}



/**
 * Actual End Date
 * @member {Date} ActualEndDate
 */
LandlordTenancyModel.prototype['ActualEndDate'] = undefined;

/**
 * Beds
 * @member {Number} Beds
 */
LandlordTenancyModel.prototype['Beds'] = undefined;

/**
 * Bond
 * @member {Number} Bond
 */
LandlordTenancyModel.prototype['Bond'] = undefined;

/**
 * The tenancy branch ID:-
 * @member {String} BranchID
 */
LandlordTenancyModel.prototype['BranchID'] = undefined;

/**
 * Maintenance Certificates.
 * @member {Array.<module:model/LandlordMaintenanceCertificateModel>} Certificates
 */
LandlordTenancyModel.prototype['Certificates'] = undefined;

/**
 * Tenancy documents:-
 * @member {Array.<module:model/LettingsLandlordDocument>} Documents
 */
LandlordTenancyModel.prototype['Documents'] = undefined;

/**
 * Fixed Date
 * @member {Date} FixedDate
 */
LandlordTenancyModel.prototype['FixedDate'] = undefined;

/**
 * User Friendly ID
 * @member {String} GlobalReference
 */
LandlordTenancyModel.prototype['GlobalReference'] = undefined;

/**
 * ID
 * @member {String} ID
 */
LandlordTenancyModel.prototype['ID'] = undefined;

/**
 * Inspections
 * @member {Array.<module:model/LandlordLettingsInspectionModel>} Inspections
 */
LandlordTenancyModel.prototype['Inspections'] = undefined;

/**
 * State of the tenancy
 * @member {Boolean} ManagedRent
 */
LandlordTenancyModel.prototype['ManagedRent'] = undefined;

/**
 * Maintenance Preferences.
 * @member {Array.<module:model/LandlordMaintenancePreferenceModel>} Preferences
 */
LandlordTenancyModel.prototype['Preferences'] = undefined;

/**
 * Previous Rent Amount
 * @member {Number} PreviousRentAmount
 */
LandlordTenancyModel.prototype['PreviousRentAmount'] = undefined;

/**
 * Display Property Address
 * @member {String} PropertyAddress
 */
LandlordTenancyModel.prototype['PropertyAddress'] = undefined;

/**
 * Rent
 * @member {String} Rent
 */
LandlordTenancyModel.prototype['Rent'] = undefined;

/**
 * Rent Amount
 * @member {Number} RentAmount
 */
LandlordTenancyModel.prototype['RentAmount'] = undefined;

/**
 * Start Date
 * @member {Date} StartDate
 */
LandlordTenancyModel.prototype['StartDate'] = undefined;

/**
 * Tenancy Property
 * @member {String} TenancyProperty
 */
LandlordTenancyModel.prototype['TenancyProperty'] = undefined;

/**
 * State of the tenancy
 * @member {String} TenancyState
 */
LandlordTenancyModel.prototype['TenancyState'] = undefined;

/**
 * Tenants
 * @member {Array.<String>} Tenants
 */
LandlordTenancyModel.prototype['Tenants'] = undefined;






export default LandlordTenancyModel;

