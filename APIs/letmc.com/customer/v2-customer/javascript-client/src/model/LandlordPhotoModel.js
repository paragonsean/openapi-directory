/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LandlordPhotoModel model module.
 * @module model/LandlordPhotoModel
 * @version v2-customer
 */
class LandlordPhotoModel {
    /**
     * Constructs a new <code>LandlordPhotoModel</code>.
     * Stores a photo related to a property structure.
     * @alias module:model/LandlordPhotoModel
     */
    constructor() { 
        
        LandlordPhotoModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LandlordPhotoModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LandlordPhotoModel} obj Optional instance to populate.
     * @return {module:model/LandlordPhotoModel} The populated <code>LandlordPhotoModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LandlordPhotoModel();

            if (data.hasOwnProperty('ETag')) {
                obj['ETag'] = ApiClient.convertToType(data['ETag'], 'String');
            }
            if (data.hasOwnProperty('FileName')) {
                obj['FileName'] = ApiClient.convertToType(data['FileName'], 'String');
            }
            if (data.hasOwnProperty('OID')) {
                obj['OID'] = ApiClient.convertToType(data['OID'], 'String');
            }
            if (data.hasOwnProperty('PhotoType')) {
                obj['PhotoType'] = ApiClient.convertToType(data['PhotoType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LandlordPhotoModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LandlordPhotoModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ETag'] && !(typeof data['ETag'] === 'string' || data['ETag'] instanceof String)) {
            throw new Error("Expected the field `ETag` to be a primitive type in the JSON string but got " + data['ETag']);
        }
        // ensure the json data is a string
        if (data['FileName'] && !(typeof data['FileName'] === 'string' || data['FileName'] instanceof String)) {
            throw new Error("Expected the field `FileName` to be a primitive type in the JSON string but got " + data['FileName']);
        }
        // ensure the json data is a string
        if (data['OID'] && !(typeof data['OID'] === 'string' || data['OID'] instanceof String)) {
            throw new Error("Expected the field `OID` to be a primitive type in the JSON string but got " + data['OID']);
        }
        // ensure the json data is a string
        if (data['PhotoType'] && !(typeof data['PhotoType'] === 'string' || data['PhotoType'] instanceof String)) {
            throw new Error("Expected the field `PhotoType` to be a primitive type in the JSON string but got " + data['PhotoType']);
        }

        return true;
    }


}



/**
 * A unique identifier defining the object and change revision.
 * @member {String} ETag
 */
LandlordPhotoModel.prototype['ETag'] = undefined;

/**
 * The file name.
 * @member {String} FileName
 */
LandlordPhotoModel.prototype['FileName'] = undefined;

/**
 * The unique Object ID (OID).
 * @member {String} OID
 */
LandlordPhotoModel.prototype['OID'] = undefined;

/**
 * The photo type.
 * @member {module:model/LandlordPhotoModel.PhotoTypeEnum} PhotoType
 */
LandlordPhotoModel.prototype['PhotoType'] = undefined;





/**
 * Allowed values for the <code>PhotoType</code> property.
 * @enum {String}
 * @readonly
 */
LandlordPhotoModel['PhotoTypeEnum'] = {

    /**
     * value: "Photo"
     * @const
     */
    "Photo": "Photo",

    /**
     * value: "Map"
     * @const
     */
    "Map": "Map",

    /**
     * value: "FloorPlan"
     * @const
     */
    "FloorPlan": "FloorPlan",

    /**
     * value: "SiteMap"
     * @const
     */
    "SiteMap": "SiteMap",

    /**
     * value: "AerialPhoto"
     * @const
     */
    "AerialPhoto": "AerialPhoto"
};



export default LandlordPhotoModel;

