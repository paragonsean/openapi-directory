/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LandlordDetailsModel model module.
 * @module model/LandlordDetailsModel
 * @version v2-customer
 */
class LandlordDetailsModel {
    /**
     * Constructs a new <code>LandlordDetailsModel</code>.
     * Landlord Details
     * @alias module:model/LandlordDetailsModel
     */
    constructor() { 
        
        LandlordDetailsModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LandlordDetailsModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LandlordDetailsModel} obj Optional instance to populate.
     * @return {module:model/LandlordDetailsModel} The populated <code>LandlordDetailsModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LandlordDetailsModel();

            if (data.hasOwnProperty('Address')) {
                obj['Address'] = ApiClient.convertToType(data['Address'], 'String');
            }
            if (data.hasOwnProperty('Email')) {
                obj['Email'] = ApiClient.convertToType(data['Email'], 'String');
            }
            if (data.hasOwnProperty('GlobalReference')) {
                obj['GlobalReference'] = ApiClient.convertToType(data['GlobalReference'], 'String');
            }
            if (data.hasOwnProperty('ID')) {
                obj['ID'] = ApiClient.convertToType(data['ID'], 'String');
            }
            if (data.hasOwnProperty('Mobile')) {
                obj['Mobile'] = ApiClient.convertToType(data['Mobile'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Phone')) {
                obj['Phone'] = ApiClient.convertToType(data['Phone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LandlordDetailsModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LandlordDetailsModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Address'] && !(typeof data['Address'] === 'string' || data['Address'] instanceof String)) {
            throw new Error("Expected the field `Address` to be a primitive type in the JSON string but got " + data['Address']);
        }
        // ensure the json data is a string
        if (data['Email'] && !(typeof data['Email'] === 'string' || data['Email'] instanceof String)) {
            throw new Error("Expected the field `Email` to be a primitive type in the JSON string but got " + data['Email']);
        }
        // ensure the json data is a string
        if (data['GlobalReference'] && !(typeof data['GlobalReference'] === 'string' || data['GlobalReference'] instanceof String)) {
            throw new Error("Expected the field `GlobalReference` to be a primitive type in the JSON string but got " + data['GlobalReference']);
        }
        // ensure the json data is a string
        if (data['ID'] && !(typeof data['ID'] === 'string' || data['ID'] instanceof String)) {
            throw new Error("Expected the field `ID` to be a primitive type in the JSON string but got " + data['ID']);
        }
        // ensure the json data is a string
        if (data['Mobile'] && !(typeof data['Mobile'] === 'string' || data['Mobile'] instanceof String)) {
            throw new Error("Expected the field `Mobile` to be a primitive type in the JSON string but got " + data['Mobile']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Phone'] && !(typeof data['Phone'] === 'string' || data['Phone'] instanceof String)) {
            throw new Error("Expected the field `Phone` to be a primitive type in the JSON string but got " + data['Phone']);
        }

        return true;
    }


}



/**
 * Address
 * @member {String} Address
 */
LandlordDetailsModel.prototype['Address'] = undefined;

/**
 * Email
 * @member {String} Email
 */
LandlordDetailsModel.prototype['Email'] = undefined;

/**
 * User Friendly ID
 * @member {String} GlobalReference
 */
LandlordDetailsModel.prototype['GlobalReference'] = undefined;

/**
 * ID
 * @member {String} ID
 */
LandlordDetailsModel.prototype['ID'] = undefined;

/**
 * Mobile
 * @member {String} Mobile
 */
LandlordDetailsModel.prototype['Mobile'] = undefined;

/**
 * Name
 * @member {String} Name
 */
LandlordDetailsModel.prototype['Name'] = undefined;

/**
 * Phone
 * @member {String} Phone
 */
LandlordDetailsModel.prototype['Phone'] = undefined;






export default LandlordDetailsModel;

