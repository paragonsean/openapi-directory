/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* PhotoController service.
* @module api/PhotoControllerApi
* @version v2-customer
*/
export default class PhotoControllerApi {

    /**
    * Constructs a new PhotoControllerApi. 
    * @alias module:api/PhotoControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the photoControllerGetPhotoDownload operation.
     * @callback module:api/PhotoControllerApi~photoControllerGetPhotoDownloadCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads the photo of a property given the photo ID.
     * @param {String} shortName The unique client short-name
     * @param {String} token The login token returned from the /session POST call
     * @param {String} photoID The unique ID of the photo on the property
     * @param {Object} opts Optional parameters
     * @param {Number} [width] An optional parameter specifying the image width
     * @param {Number} [height] An optional parameter specifying the image height
     * @param {module:api/PhotoControllerApi~photoControllerGetPhotoDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    photoControllerGetPhotoDownload(shortName, token, photoID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling photoControllerGetPhotoDownload");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling photoControllerGetPhotoDownload");
      }
      // verify the required parameter 'photoID' is set
      if (photoID === undefined || photoID === null) {
        throw new Error("Missing the required parameter 'photoID' when calling photoControllerGetPhotoDownload");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'token': token,
        'photoID': photoID,
        'width': opts['width'],
        'height': opts['height']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/customer/{shortName}/photo/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
