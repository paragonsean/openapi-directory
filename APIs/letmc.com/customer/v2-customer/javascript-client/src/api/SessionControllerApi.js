/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* SessionController service.
* @module api/SessionControllerApi
* @version v2-customer
*/
export default class SessionControllerApi {

    /**
    * Constructs a new SessionControllerApi. 
    * @alias module:api/SessionControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sessionControllerChangePassword operation.
     * @callback module:api/SessionControllerApi~sessionControllerChangePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the password of a customer given their existing and new password.
     * @param {String} shortName The unique client short-name
     * @param {String} token The login token returned from the /session POST call
     * @param {String} oldPassword The customer's existing password.
     * @param {String} newPassword The customer's new password.
     * @param {module:api/SessionControllerApi~sessionControllerChangePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionControllerChangePassword(shortName, token, oldPassword, newPassword, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling sessionControllerChangePassword");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionControllerChangePassword");
      }
      // verify the required parameter 'oldPassword' is set
      if (oldPassword === undefined || oldPassword === null) {
        throw new Error("Missing the required parameter 'oldPassword' when calling sessionControllerChangePassword");
      }
      // verify the required parameter 'newPassword' is set
      if (newPassword === undefined || newPassword === null) {
        throw new Error("Missing the required parameter 'newPassword' when calling sessionControllerChangePassword");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'token': token,
        'oldPassword': oldPassword,
        'newPassword': newPassword
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/customer/{shortName}/session/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionControllerCreateLandlordLogin operation.
     * @callback module:api/SessionControllerApi~sessionControllerCreateLandlordLoginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a request to the in-tray to create a landlord login.
     * @param {String} shortName The unique client short-name
     * @param {String} email The email address of the landlord
     * @param {String} title The title of the landlord
     * @param {String} forename The forename of the landlord
     * @param {String} surname The surname of the landlord
     * @param {String} propertyAddress Address of the property linked to the landlord
     * @param {String} contactDetails Contact details of the landlord
     * @param {Object} opts Optional parameters
     * @param {String} [branchID] (Optional) The branch ID linked to the login. This will determine which in tray the request display in
     * @param {module:api/SessionControllerApi~sessionControllerCreateLandlordLoginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionControllerCreateLandlordLogin(shortName, email, title, forename, surname, propertyAddress, contactDetails, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling sessionControllerCreateLandlordLogin");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling sessionControllerCreateLandlordLogin");
      }
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling sessionControllerCreateLandlordLogin");
      }
      // verify the required parameter 'forename' is set
      if (forename === undefined || forename === null) {
        throw new Error("Missing the required parameter 'forename' when calling sessionControllerCreateLandlordLogin");
      }
      // verify the required parameter 'surname' is set
      if (surname === undefined || surname === null) {
        throw new Error("Missing the required parameter 'surname' when calling sessionControllerCreateLandlordLogin");
      }
      // verify the required parameter 'propertyAddress' is set
      if (propertyAddress === undefined || propertyAddress === null) {
        throw new Error("Missing the required parameter 'propertyAddress' when calling sessionControllerCreateLandlordLogin");
      }
      // verify the required parameter 'contactDetails' is set
      if (contactDetails === undefined || contactDetails === null) {
        throw new Error("Missing the required parameter 'contactDetails' when calling sessionControllerCreateLandlordLogin");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'email': email,
        'title': title,
        'forename': forename,
        'surname': surname,
        'propertyAddress': propertyAddress,
        'contactDetails': contactDetails,
        'branchID': opts['branchID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/customer/{shortName}/session/createlandlordlogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionControllerGetSessionInfo operation.
     * @callback module:api/SessionControllerApi~sessionControllerGetSessionInfoCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the currently logged on customer.
     * @param {String} shortName The unique client short-name
     * @param {String} token The login token returned from the /session POST call
     * @param {module:api/SessionControllerApi~sessionControllerGetSessionInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    sessionControllerGetSessionInfo(shortName, token, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling sessionControllerGetSessionInfo");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionControllerGetSessionInfo");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v2/customer/{shortName}/session', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionControllerLogin operation.
     * @callback module:api/SessionControllerApi~sessionControllerLoginCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login as a customer given their username and password.
     * @param {String} shortName The unique client short-name
     * @param {String} username The user's username.
     * @param {String} password The user's password.
     * @param {module:api/SessionControllerApi~sessionControllerLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    sessionControllerLogin(shortName, username, password, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling sessionControllerLogin");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling sessionControllerLogin");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling sessionControllerLogin");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'username': username,
        'password': password
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v2/customer/{shortName}/session', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionControllerLogout operation.
     * @callback module:api/SessionControllerApi~sessionControllerLogoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout a customer previously logged in via the Login endpoint.
     * @param {String} shortName The unique client short-name
     * @param {String} token The login token returned from the /session POST call
     * @param {module:api/SessionControllerApi~sessionControllerLogoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionControllerLogout(shortName, token, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling sessionControllerLogout");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sessionControllerLogout");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/customer/{shortName}/session', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sessionControllerResetPassword operation.
     * @callback module:api/SessionControllerApi~sessionControllerResetPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset the customer's password. An email will be sent out to reset.
     * @param {String} shortName The unique client short-name
     * @param {String} email The login Email Address.
     * @param {module:api/SessionControllerApi~sessionControllerResetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sessionControllerResetPassword(shortName, email, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling sessionControllerResetPassword");
      }
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling sessionControllerResetPassword");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/customer/{shortName}/session/resetpassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
