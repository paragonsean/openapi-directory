/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandlordLettingsInspectionModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandlordLettingsInspectionModel::OAILandlordLettingsInspectionModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandlordLettingsInspectionModel::OAILandlordLettingsInspectionModel() {
    this->initializeModel();
}

OAILandlordLettingsInspectionModel::~OAILandlordLettingsInspectionModel() {}

void OAILandlordLettingsInspectionModel::initializeModel() {

    m_inspection_date_isSet = false;
    m_inspection_date_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;
}

void OAILandlordLettingsInspectionModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandlordLettingsInspectionModel::fromJsonObject(QJsonObject json) {

    m_inspection_date_isValid = ::OpenAPI::fromJsonValue(m_inspection_date, json[QString("InspectionDate")]);
    m_inspection_date_isSet = !json[QString("InspectionDate")].isNull() && m_inspection_date_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;
}

QString OAILandlordLettingsInspectionModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandlordLettingsInspectionModel::asJsonObject() const {
    QJsonObject obj;
    if (m_inspection_date_isSet) {
        obj.insert(QString("InspectionDate"), ::OpenAPI::toJsonValue(m_inspection_date));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    return obj;
}

QDateTime OAILandlordLettingsInspectionModel::getInspectionDate() const {
    return m_inspection_date;
}
void OAILandlordLettingsInspectionModel::setInspectionDate(const QDateTime &inspection_date) {
    m_inspection_date = inspection_date;
    m_inspection_date_isSet = true;
}

bool OAILandlordLettingsInspectionModel::is_inspection_date_Set() const{
    return m_inspection_date_isSet;
}

bool OAILandlordLettingsInspectionModel::is_inspection_date_Valid() const{
    return m_inspection_date_isValid;
}

QString OAILandlordLettingsInspectionModel::getNotes() const {
    return m_notes;
}
void OAILandlordLettingsInspectionModel::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAILandlordLettingsInspectionModel::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAILandlordLettingsInspectionModel::is_notes_Valid() const{
    return m_notes_isValid;
}

bool OAILandlordLettingsInspectionModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inspection_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandlordLettingsInspectionModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
