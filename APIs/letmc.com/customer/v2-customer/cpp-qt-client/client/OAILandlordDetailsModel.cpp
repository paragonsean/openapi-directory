/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandlordDetailsModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandlordDetailsModel::OAILandlordDetailsModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandlordDetailsModel::OAILandlordDetailsModel() {
    this->initializeModel();
}

OAILandlordDetailsModel::~OAILandlordDetailsModel() {}

void OAILandlordDetailsModel::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_global_reference_isSet = false;
    m_global_reference_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mobile_isSet = false;
    m_mobile_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;
}

void OAILandlordDetailsModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandlordDetailsModel::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_global_reference_isValid = ::OpenAPI::fromJsonValue(m_global_reference, json[QString("GlobalReference")]);
    m_global_reference_isSet = !json[QString("GlobalReference")].isNull() && m_global_reference_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_mobile_isValid = ::OpenAPI::fromJsonValue(m_mobile, json[QString("Mobile")]);
    m_mobile_isSet = !json[QString("Mobile")].isNull() && m_mobile_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("Phone")]);
    m_phone_isSet = !json[QString("Phone")].isNull() && m_phone_isValid;
}

QString OAILandlordDetailsModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandlordDetailsModel::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_global_reference_isSet) {
        obj.insert(QString("GlobalReference"), ::OpenAPI::toJsonValue(m_global_reference));
    }
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mobile_isSet) {
        obj.insert(QString("Mobile"), ::OpenAPI::toJsonValue(m_mobile));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_isSet) {
        obj.insert(QString("Phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    return obj;
}

QString OAILandlordDetailsModel::getAddress() const {
    return m_address;
}
void OAILandlordDetailsModel::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAILandlordDetailsModel::is_address_Set() const{
    return m_address_isSet;
}

bool OAILandlordDetailsModel::is_address_Valid() const{
    return m_address_isValid;
}

QString OAILandlordDetailsModel::getEmail() const {
    return m_email;
}
void OAILandlordDetailsModel::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAILandlordDetailsModel::is_email_Set() const{
    return m_email_isSet;
}

bool OAILandlordDetailsModel::is_email_Valid() const{
    return m_email_isValid;
}

QString OAILandlordDetailsModel::getGlobalReference() const {
    return m_global_reference;
}
void OAILandlordDetailsModel::setGlobalReference(const QString &global_reference) {
    m_global_reference = global_reference;
    m_global_reference_isSet = true;
}

bool OAILandlordDetailsModel::is_global_reference_Set() const{
    return m_global_reference_isSet;
}

bool OAILandlordDetailsModel::is_global_reference_Valid() const{
    return m_global_reference_isValid;
}

QString OAILandlordDetailsModel::getId() const {
    return m_id;
}
void OAILandlordDetailsModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILandlordDetailsModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAILandlordDetailsModel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILandlordDetailsModel::getMobile() const {
    return m_mobile;
}
void OAILandlordDetailsModel::setMobile(const QString &mobile) {
    m_mobile = mobile;
    m_mobile_isSet = true;
}

bool OAILandlordDetailsModel::is_mobile_Set() const{
    return m_mobile_isSet;
}

bool OAILandlordDetailsModel::is_mobile_Valid() const{
    return m_mobile_isValid;
}

QString OAILandlordDetailsModel::getName() const {
    return m_name;
}
void OAILandlordDetailsModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILandlordDetailsModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAILandlordDetailsModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILandlordDetailsModel::getPhone() const {
    return m_phone;
}
void OAILandlordDetailsModel::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAILandlordDetailsModel::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAILandlordDetailsModel::is_phone_Valid() const{
    return m_phone_isValid;
}

bool OAILandlordDetailsModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandlordDetailsModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
