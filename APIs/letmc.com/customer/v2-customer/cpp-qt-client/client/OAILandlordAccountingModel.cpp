/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandlordAccountingModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandlordAccountingModel::OAILandlordAccountingModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandlordAccountingModel::OAILandlordAccountingModel() {
    this->initializeModel();
}

OAILandlordAccountingModel::~OAILandlordAccountingModel() {}

void OAILandlordAccountingModel::initializeModel() {

    m_account_balance_isSet = false;
    m_account_balance_isValid = false;

    m_last_payment_isSet = false;
    m_last_payment_isValid = false;

    m_payment_history_isSet = false;
    m_payment_history_isValid = false;

    m_statements_isSet = false;
    m_statements_isValid = false;
}

void OAILandlordAccountingModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandlordAccountingModel::fromJsonObject(QJsonObject json) {

    m_account_balance_isValid = ::OpenAPI::fromJsonValue(m_account_balance, json[QString("AccountBalance")]);
    m_account_balance_isSet = !json[QString("AccountBalance")].isNull() && m_account_balance_isValid;

    m_last_payment_isValid = ::OpenAPI::fromJsonValue(m_last_payment, json[QString("LastPayment")]);
    m_last_payment_isSet = !json[QString("LastPayment")].isNull() && m_last_payment_isValid;

    m_payment_history_isValid = ::OpenAPI::fromJsonValue(m_payment_history, json[QString("PaymentHistory")]);
    m_payment_history_isSet = !json[QString("PaymentHistory")].isNull() && m_payment_history_isValid;

    m_statements_isValid = ::OpenAPI::fromJsonValue(m_statements, json[QString("Statements")]);
    m_statements_isSet = !json[QString("Statements")].isNull() && m_statements_isValid;
}

QString OAILandlordAccountingModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandlordAccountingModel::asJsonObject() const {
    QJsonObject obj;
    if (m_account_balance_isSet) {
        obj.insert(QString("AccountBalance"), ::OpenAPI::toJsonValue(m_account_balance));
    }
    if (m_last_payment_isSet) {
        obj.insert(QString("LastPayment"), ::OpenAPI::toJsonValue(m_last_payment));
    }
    if (m_payment_history.size() > 0) {
        obj.insert(QString("PaymentHistory"), ::OpenAPI::toJsonValue(m_payment_history));
    }
    if (m_statements.size() > 0) {
        obj.insert(QString("Statements"), ::OpenAPI::toJsonValue(m_statements));
    }
    return obj;
}

double OAILandlordAccountingModel::getAccountBalance() const {
    return m_account_balance;
}
void OAILandlordAccountingModel::setAccountBalance(const double &account_balance) {
    m_account_balance = account_balance;
    m_account_balance_isSet = true;
}

bool OAILandlordAccountingModel::is_account_balance_Set() const{
    return m_account_balance_isSet;
}

bool OAILandlordAccountingModel::is_account_balance_Valid() const{
    return m_account_balance_isValid;
}

QDateTime OAILandlordAccountingModel::getLastPayment() const {
    return m_last_payment;
}
void OAILandlordAccountingModel::setLastPayment(const QDateTime &last_payment) {
    m_last_payment = last_payment;
    m_last_payment_isSet = true;
}

bool OAILandlordAccountingModel::is_last_payment_Set() const{
    return m_last_payment_isSet;
}

bool OAILandlordAccountingModel::is_last_payment_Valid() const{
    return m_last_payment_isValid;
}

QList<OAILandlordAccountingEntryModel> OAILandlordAccountingModel::getPaymentHistory() const {
    return m_payment_history;
}
void OAILandlordAccountingModel::setPaymentHistory(const QList<OAILandlordAccountingEntryModel> &payment_history) {
    m_payment_history = payment_history;
    m_payment_history_isSet = true;
}

bool OAILandlordAccountingModel::is_payment_history_Set() const{
    return m_payment_history_isSet;
}

bool OAILandlordAccountingModel::is_payment_history_Valid() const{
    return m_payment_history_isValid;
}

QList<OAILandlordAccountingInvoiceModel> OAILandlordAccountingModel::getStatements() const {
    return m_statements;
}
void OAILandlordAccountingModel::setStatements(const QList<OAILandlordAccountingInvoiceModel> &statements) {
    m_statements = statements;
    m_statements_isSet = true;
}

bool OAILandlordAccountingModel::is_statements_Set() const{
    return m_statements_isSet;
}

bool OAILandlordAccountingModel::is_statements_Valid() const{
    return m_statements_isValid;
}

bool OAILandlordAccountingModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_payment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_statements.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandlordAccountingModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
