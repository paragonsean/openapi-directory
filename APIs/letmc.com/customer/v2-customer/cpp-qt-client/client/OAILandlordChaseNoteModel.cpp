/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandlordChaseNoteModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandlordChaseNoteModel::OAILandlordChaseNoteModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandlordChaseNoteModel::OAILandlordChaseNoteModel() {
    this->initializeModel();
}

OAILandlordChaseNoteModel::~OAILandlordChaseNoteModel() {}

void OAILandlordChaseNoteModel::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_note_type_isSet = false;
    m_note_type_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAILandlordChaseNoteModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandlordChaseNoteModel::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("Note")]);
    m_note_isSet = !json[QString("Note")].isNull() && m_note_isValid;

    m_note_type_isValid = ::OpenAPI::fromJsonValue(m_note_type, json[QString("NoteType")]);
    m_note_type_isSet = !json[QString("NoteType")].isNull() && m_note_type_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("TenantID")]);
    m_tenant_id_isSet = !json[QString("TenantID")].isNull() && m_tenant_id_isValid;
}

QString OAILandlordChaseNoteModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandlordChaseNoteModel::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_note_isSet) {
        obj.insert(QString("Note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_note_type_isSet) {
        obj.insert(QString("NoteType"), ::OpenAPI::toJsonValue(m_note_type));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("TenantID"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QDateTime OAILandlordChaseNoteModel::getDate() const {
    return m_date;
}
void OAILandlordChaseNoteModel::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAILandlordChaseNoteModel::is_date_Set() const{
    return m_date_isSet;
}

bool OAILandlordChaseNoteModel::is_date_Valid() const{
    return m_date_isValid;
}

QString OAILandlordChaseNoteModel::getNote() const {
    return m_note;
}
void OAILandlordChaseNoteModel::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAILandlordChaseNoteModel::is_note_Set() const{
    return m_note_isSet;
}

bool OAILandlordChaseNoteModel::is_note_Valid() const{
    return m_note_isValid;
}

QString OAILandlordChaseNoteModel::getNoteType() const {
    return m_note_type;
}
void OAILandlordChaseNoteModel::setNoteType(const QString &note_type) {
    m_note_type = note_type;
    m_note_type_isSet = true;
}

bool OAILandlordChaseNoteModel::is_note_type_Set() const{
    return m_note_type_isSet;
}

bool OAILandlordChaseNoteModel::is_note_type_Valid() const{
    return m_note_type_isValid;
}

QString OAILandlordChaseNoteModel::getTenantId() const {
    return m_tenant_id;
}
void OAILandlordChaseNoteModel::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAILandlordChaseNoteModel::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAILandlordChaseNoteModel::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAILandlordChaseNoteModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandlordChaseNoteModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
