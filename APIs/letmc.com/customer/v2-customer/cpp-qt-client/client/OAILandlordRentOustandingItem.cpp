/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandlordRentOustandingItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandlordRentOustandingItem::OAILandlordRentOustandingItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandlordRentOustandingItem::OAILandlordRentOustandingItem() {
    this->initializeModel();
}

OAILandlordRentOustandingItem::~OAILandlordRentOustandingItem() {}

void OAILandlordRentOustandingItem::initializeModel() {

    m_debt_days_isSet = false;
    m_debt_days_isValid = false;

    m_outstanding_rent_isSet = false;
    m_outstanding_rent_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAILandlordRentOustandingItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandlordRentOustandingItem::fromJsonObject(QJsonObject json) {

    m_debt_days_isValid = ::OpenAPI::fromJsonValue(m_debt_days, json[QString("DebtDays")]);
    m_debt_days_isSet = !json[QString("DebtDays")].isNull() && m_debt_days_isValid;

    m_outstanding_rent_isValid = ::OpenAPI::fromJsonValue(m_outstanding_rent, json[QString("OutstandingRent")]);
    m_outstanding_rent_isSet = !json[QString("OutstandingRent")].isNull() && m_outstanding_rent_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("Property")]);
    m_property_isSet = !json[QString("Property")].isNull() && m_property_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("Tenant")]);
    m_tenant_isSet = !json[QString("Tenant")].isNull() && m_tenant_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("TenantID")]);
    m_tenant_id_isSet = !json[QString("TenantID")].isNull() && m_tenant_id_isValid;
}

QString OAILandlordRentOustandingItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandlordRentOustandingItem::asJsonObject() const {
    QJsonObject obj;
    if (m_debt_days_isSet) {
        obj.insert(QString("DebtDays"), ::OpenAPI::toJsonValue(m_debt_days));
    }
    if (m_outstanding_rent_isSet) {
        obj.insert(QString("OutstandingRent"), ::OpenAPI::toJsonValue(m_outstanding_rent));
    }
    if (m_property_isSet) {
        obj.insert(QString("Property"), ::OpenAPI::toJsonValue(m_property));
    }
    if (m_tenant_isSet) {
        obj.insert(QString("Tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("TenantID"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

qint32 OAILandlordRentOustandingItem::getDebtDays() const {
    return m_debt_days;
}
void OAILandlordRentOustandingItem::setDebtDays(const qint32 &debt_days) {
    m_debt_days = debt_days;
    m_debt_days_isSet = true;
}

bool OAILandlordRentOustandingItem::is_debt_days_Set() const{
    return m_debt_days_isSet;
}

bool OAILandlordRentOustandingItem::is_debt_days_Valid() const{
    return m_debt_days_isValid;
}

double OAILandlordRentOustandingItem::getOutstandingRent() const {
    return m_outstanding_rent;
}
void OAILandlordRentOustandingItem::setOutstandingRent(const double &outstanding_rent) {
    m_outstanding_rent = outstanding_rent;
    m_outstanding_rent_isSet = true;
}

bool OAILandlordRentOustandingItem::is_outstanding_rent_Set() const{
    return m_outstanding_rent_isSet;
}

bool OAILandlordRentOustandingItem::is_outstanding_rent_Valid() const{
    return m_outstanding_rent_isValid;
}

QString OAILandlordRentOustandingItem::getProperty() const {
    return m_property;
}
void OAILandlordRentOustandingItem::setProperty(const QString &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAILandlordRentOustandingItem::is_property_Set() const{
    return m_property_isSet;
}

bool OAILandlordRentOustandingItem::is_property_Valid() const{
    return m_property_isValid;
}

QString OAILandlordRentOustandingItem::getTenant() const {
    return m_tenant;
}
void OAILandlordRentOustandingItem::setTenant(const QString &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAILandlordRentOustandingItem::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAILandlordRentOustandingItem::is_tenant_Valid() const{
    return m_tenant_isValid;
}

QString OAILandlordRentOustandingItem::getTenantId() const {
    return m_tenant_id;
}
void OAILandlordRentOustandingItem::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAILandlordRentOustandingItem::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAILandlordRentOustandingItem::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAILandlordRentOustandingItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_debt_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outstanding_rent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandlordRentOustandingItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
