/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandlordAccountingEntryModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandlordAccountingEntryModel::OAILandlordAccountingEntryModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandlordAccountingEntryModel::OAILandlordAccountingEntryModel() {
    this->initializeModel();
}

OAILandlordAccountingEntryModel::~OAILandlordAccountingEntryModel() {}

void OAILandlordAccountingEntryModel::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_transaction_number_isSet = false;
    m_transaction_number_isValid = false;
}

void OAILandlordAccountingEntryModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandlordAccountingEntryModel::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("Amount")]);
    m_amount_isSet = !json[QString("Amount")].isNull() && m_amount_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_transaction_number_isValid = ::OpenAPI::fromJsonValue(m_transaction_number, json[QString("TransactionNumber")]);
    m_transaction_number_isSet = !json[QString("TransactionNumber")].isNull() && m_transaction_number_isValid;
}

QString OAILandlordAccountingEntryModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandlordAccountingEntryModel::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("Amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_transaction_number_isSet) {
        obj.insert(QString("TransactionNumber"), ::OpenAPI::toJsonValue(m_transaction_number));
    }
    return obj;
}

double OAILandlordAccountingEntryModel::getAmount() const {
    return m_amount;
}
void OAILandlordAccountingEntryModel::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAILandlordAccountingEntryModel::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAILandlordAccountingEntryModel::is_amount_Valid() const{
    return m_amount_isValid;
}

QDateTime OAILandlordAccountingEntryModel::getDate() const {
    return m_date;
}
void OAILandlordAccountingEntryModel::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAILandlordAccountingEntryModel::is_date_Set() const{
    return m_date_isSet;
}

bool OAILandlordAccountingEntryModel::is_date_Valid() const{
    return m_date_isValid;
}

QString OAILandlordAccountingEntryModel::getDescription() const {
    return m_description;
}
void OAILandlordAccountingEntryModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILandlordAccountingEntryModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAILandlordAccountingEntryModel::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAILandlordAccountingEntryModel::getTransactionNumber() const {
    return m_transaction_number;
}
void OAILandlordAccountingEntryModel::setTransactionNumber(const qint32 &transaction_number) {
    m_transaction_number = transaction_number;
    m_transaction_number_isSet = true;
}

bool OAILandlordAccountingEntryModel::is_transaction_number_Set() const{
    return m_transaction_number_isSet;
}

bool OAILandlordAccountingEntryModel::is_transaction_number_Valid() const{
    return m_transaction_number_isValid;
}

bool OAILandlordAccountingEntryModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandlordAccountingEntryModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
