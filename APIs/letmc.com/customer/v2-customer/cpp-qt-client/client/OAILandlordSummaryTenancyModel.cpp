/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandlordSummaryTenancyModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandlordSummaryTenancyModel::OAILandlordSummaryTenancyModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandlordSummaryTenancyModel::OAILandlordSummaryTenancyModel() {
    this->initializeModel();
}

OAILandlordSummaryTenancyModel::~OAILandlordSummaryTenancyModel() {}

void OAILandlordSummaryTenancyModel::initializeModel() {

    m_bond_isSet = false;
    m_bond_isValid = false;

    m_branch_id_isSet = false;
    m_branch_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_global_reference_isSet = false;
    m_global_reference_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_maintenance_jobs_isSet = false;
    m_maintenance_jobs_isValid = false;

    m_managed_rent_isSet = false;
    m_managed_rent_isValid = false;

    m_property_address_isSet = false;
    m_property_address_isValid = false;

    m_rent_isSet = false;
    m_rent_isValid = false;

    m_rent_arrears_isSet = false;
    m_rent_arrears_isValid = false;

    m_rent_collected_isSet = false;
    m_rent_collected_isValid = false;

    m_tenancy_property_isSet = false;
    m_tenancy_property_isValid = false;

    m_tenancy_state_isSet = false;
    m_tenancy_state_isValid = false;
}

void OAILandlordSummaryTenancyModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandlordSummaryTenancyModel::fromJsonObject(QJsonObject json) {

    m_bond_isValid = ::OpenAPI::fromJsonValue(m_bond, json[QString("Bond")]);
    m_bond_isSet = !json[QString("Bond")].isNull() && m_bond_isValid;

    m_branch_id_isValid = ::OpenAPI::fromJsonValue(m_branch_id, json[QString("BranchID")]);
    m_branch_id_isSet = !json[QString("BranchID")].isNull() && m_branch_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_global_reference_isValid = ::OpenAPI::fromJsonValue(m_global_reference, json[QString("GlobalReference")]);
    m_global_reference_isSet = !json[QString("GlobalReference")].isNull() && m_global_reference_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_maintenance_jobs_isValid = ::OpenAPI::fromJsonValue(m_maintenance_jobs, json[QString("MaintenanceJobs")]);
    m_maintenance_jobs_isSet = !json[QString("MaintenanceJobs")].isNull() && m_maintenance_jobs_isValid;

    m_managed_rent_isValid = ::OpenAPI::fromJsonValue(m_managed_rent, json[QString("ManagedRent")]);
    m_managed_rent_isSet = !json[QString("ManagedRent")].isNull() && m_managed_rent_isValid;

    m_property_address_isValid = ::OpenAPI::fromJsonValue(m_property_address, json[QString("PropertyAddress")]);
    m_property_address_isSet = !json[QString("PropertyAddress")].isNull() && m_property_address_isValid;

    m_rent_isValid = ::OpenAPI::fromJsonValue(m_rent, json[QString("Rent")]);
    m_rent_isSet = !json[QString("Rent")].isNull() && m_rent_isValid;

    m_rent_arrears_isValid = ::OpenAPI::fromJsonValue(m_rent_arrears, json[QString("RentArrears")]);
    m_rent_arrears_isSet = !json[QString("RentArrears")].isNull() && m_rent_arrears_isValid;

    m_rent_collected_isValid = ::OpenAPI::fromJsonValue(m_rent_collected, json[QString("RentCollected")]);
    m_rent_collected_isSet = !json[QString("RentCollected")].isNull() && m_rent_collected_isValid;

    m_tenancy_property_isValid = ::OpenAPI::fromJsonValue(m_tenancy_property, json[QString("TenancyProperty")]);
    m_tenancy_property_isSet = !json[QString("TenancyProperty")].isNull() && m_tenancy_property_isValid;

    m_tenancy_state_isValid = ::OpenAPI::fromJsonValue(m_tenancy_state, json[QString("TenancyState")]);
    m_tenancy_state_isSet = !json[QString("TenancyState")].isNull() && m_tenancy_state_isValid;
}

QString OAILandlordSummaryTenancyModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandlordSummaryTenancyModel::asJsonObject() const {
    QJsonObject obj;
    if (m_bond_isSet) {
        obj.insert(QString("Bond"), ::OpenAPI::toJsonValue(m_bond));
    }
    if (m_branch_id_isSet) {
        obj.insert(QString("BranchID"), ::OpenAPI::toJsonValue(m_branch_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_global_reference_isSet) {
        obj.insert(QString("GlobalReference"), ::OpenAPI::toJsonValue(m_global_reference));
    }
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_maintenance_jobs_isSet) {
        obj.insert(QString("MaintenanceJobs"), ::OpenAPI::toJsonValue(m_maintenance_jobs));
    }
    if (m_managed_rent_isSet) {
        obj.insert(QString("ManagedRent"), ::OpenAPI::toJsonValue(m_managed_rent));
    }
    if (m_property_address_isSet) {
        obj.insert(QString("PropertyAddress"), ::OpenAPI::toJsonValue(m_property_address));
    }
    if (m_rent_isSet) {
        obj.insert(QString("Rent"), ::OpenAPI::toJsonValue(m_rent));
    }
    if (m_rent_arrears_isSet) {
        obj.insert(QString("RentArrears"), ::OpenAPI::toJsonValue(m_rent_arrears));
    }
    if (m_rent_collected_isSet) {
        obj.insert(QString("RentCollected"), ::OpenAPI::toJsonValue(m_rent_collected));
    }
    if (m_tenancy_property_isSet) {
        obj.insert(QString("TenancyProperty"), ::OpenAPI::toJsonValue(m_tenancy_property));
    }
    if (m_tenancy_state_isSet) {
        obj.insert(QString("TenancyState"), ::OpenAPI::toJsonValue(m_tenancy_state));
    }
    return obj;
}

double OAILandlordSummaryTenancyModel::getBond() const {
    return m_bond;
}
void OAILandlordSummaryTenancyModel::setBond(const double &bond) {
    m_bond = bond;
    m_bond_isSet = true;
}

bool OAILandlordSummaryTenancyModel::is_bond_Set() const{
    return m_bond_isSet;
}

bool OAILandlordSummaryTenancyModel::is_bond_Valid() const{
    return m_bond_isValid;
}

QString OAILandlordSummaryTenancyModel::getBranchId() const {
    return m_branch_id;
}
void OAILandlordSummaryTenancyModel::setBranchId(const QString &branch_id) {
    m_branch_id = branch_id;
    m_branch_id_isSet = true;
}

bool OAILandlordSummaryTenancyModel::is_branch_id_Set() const{
    return m_branch_id_isSet;
}

bool OAILandlordSummaryTenancyModel::is_branch_id_Valid() const{
    return m_branch_id_isValid;
}

QString OAILandlordSummaryTenancyModel::getDescription() const {
    return m_description;
}
void OAILandlordSummaryTenancyModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILandlordSummaryTenancyModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAILandlordSummaryTenancyModel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILandlordSummaryTenancyModel::getGlobalReference() const {
    return m_global_reference;
}
void OAILandlordSummaryTenancyModel::setGlobalReference(const QString &global_reference) {
    m_global_reference = global_reference;
    m_global_reference_isSet = true;
}

bool OAILandlordSummaryTenancyModel::is_global_reference_Set() const{
    return m_global_reference_isSet;
}

bool OAILandlordSummaryTenancyModel::is_global_reference_Valid() const{
    return m_global_reference_isValid;
}

QString OAILandlordSummaryTenancyModel::getId() const {
    return m_id;
}
void OAILandlordSummaryTenancyModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILandlordSummaryTenancyModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAILandlordSummaryTenancyModel::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAILandlordSummaryTenancyModel::getMaintenanceJobs() const {
    return m_maintenance_jobs;
}
void OAILandlordSummaryTenancyModel::setMaintenanceJobs(const qint32 &maintenance_jobs) {
    m_maintenance_jobs = maintenance_jobs;
    m_maintenance_jobs_isSet = true;
}

bool OAILandlordSummaryTenancyModel::is_maintenance_jobs_Set() const{
    return m_maintenance_jobs_isSet;
}

bool OAILandlordSummaryTenancyModel::is_maintenance_jobs_Valid() const{
    return m_maintenance_jobs_isValid;
}

bool OAILandlordSummaryTenancyModel::isManagedRent() const {
    return m_managed_rent;
}
void OAILandlordSummaryTenancyModel::setManagedRent(const bool &managed_rent) {
    m_managed_rent = managed_rent;
    m_managed_rent_isSet = true;
}

bool OAILandlordSummaryTenancyModel::is_managed_rent_Set() const{
    return m_managed_rent_isSet;
}

bool OAILandlordSummaryTenancyModel::is_managed_rent_Valid() const{
    return m_managed_rent_isValid;
}

QString OAILandlordSummaryTenancyModel::getPropertyAddress() const {
    return m_property_address;
}
void OAILandlordSummaryTenancyModel::setPropertyAddress(const QString &property_address) {
    m_property_address = property_address;
    m_property_address_isSet = true;
}

bool OAILandlordSummaryTenancyModel::is_property_address_Set() const{
    return m_property_address_isSet;
}

bool OAILandlordSummaryTenancyModel::is_property_address_Valid() const{
    return m_property_address_isValid;
}

QString OAILandlordSummaryTenancyModel::getRent() const {
    return m_rent;
}
void OAILandlordSummaryTenancyModel::setRent(const QString &rent) {
    m_rent = rent;
    m_rent_isSet = true;
}

bool OAILandlordSummaryTenancyModel::is_rent_Set() const{
    return m_rent_isSet;
}

bool OAILandlordSummaryTenancyModel::is_rent_Valid() const{
    return m_rent_isValid;
}

double OAILandlordSummaryTenancyModel::getRentArrears() const {
    return m_rent_arrears;
}
void OAILandlordSummaryTenancyModel::setRentArrears(const double &rent_arrears) {
    m_rent_arrears = rent_arrears;
    m_rent_arrears_isSet = true;
}

bool OAILandlordSummaryTenancyModel::is_rent_arrears_Set() const{
    return m_rent_arrears_isSet;
}

bool OAILandlordSummaryTenancyModel::is_rent_arrears_Valid() const{
    return m_rent_arrears_isValid;
}

double OAILandlordSummaryTenancyModel::getRentCollected() const {
    return m_rent_collected;
}
void OAILandlordSummaryTenancyModel::setRentCollected(const double &rent_collected) {
    m_rent_collected = rent_collected;
    m_rent_collected_isSet = true;
}

bool OAILandlordSummaryTenancyModel::is_rent_collected_Set() const{
    return m_rent_collected_isSet;
}

bool OAILandlordSummaryTenancyModel::is_rent_collected_Valid() const{
    return m_rent_collected_isValid;
}

QString OAILandlordSummaryTenancyModel::getTenancyProperty() const {
    return m_tenancy_property;
}
void OAILandlordSummaryTenancyModel::setTenancyProperty(const QString &tenancy_property) {
    m_tenancy_property = tenancy_property;
    m_tenancy_property_isSet = true;
}

bool OAILandlordSummaryTenancyModel::is_tenancy_property_Set() const{
    return m_tenancy_property_isSet;
}

bool OAILandlordSummaryTenancyModel::is_tenancy_property_Valid() const{
    return m_tenancy_property_isValid;
}

QString OAILandlordSummaryTenancyModel::getTenancyState() const {
    return m_tenancy_state;
}
void OAILandlordSummaryTenancyModel::setTenancyState(const QString &tenancy_state) {
    m_tenancy_state = tenancy_state;
    m_tenancy_state_isSet = true;
}

bool OAILandlordSummaryTenancyModel::is_tenancy_state_Set() const{
    return m_tenancy_state_isSet;
}

bool OAILandlordSummaryTenancyModel::is_tenancy_state_Valid() const{
    return m_tenancy_state_isValid;
}

bool OAILandlordSummaryTenancyModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bond_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_jobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_rent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent_arrears_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent_collected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenancy_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenancy_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandlordSummaryTenancyModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
