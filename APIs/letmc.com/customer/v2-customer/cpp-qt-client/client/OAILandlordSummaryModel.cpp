/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandlordSummaryModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandlordSummaryModel::OAILandlordSummaryModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandlordSummaryModel::OAILandlordSummaryModel() {
    this->initializeModel();
}

OAILandlordSummaryModel::~OAILandlordSummaryModel() {}

void OAILandlordSummaryModel::initializeModel() {

    m_account_balance_isSet = false;
    m_account_balance_isValid = false;

    m_last_payment_isSet = false;
    m_last_payment_isValid = false;

    m_tenancies_isSet = false;
    m_tenancies_isValid = false;

    m_total_rent_arrears_isSet = false;
    m_total_rent_arrears_isValid = false;
}

void OAILandlordSummaryModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandlordSummaryModel::fromJsonObject(QJsonObject json) {

    m_account_balance_isValid = ::OpenAPI::fromJsonValue(m_account_balance, json[QString("AccountBalance")]);
    m_account_balance_isSet = !json[QString("AccountBalance")].isNull() && m_account_balance_isValid;

    m_last_payment_isValid = ::OpenAPI::fromJsonValue(m_last_payment, json[QString("LastPayment")]);
    m_last_payment_isSet = !json[QString("LastPayment")].isNull() && m_last_payment_isValid;

    m_tenancies_isValid = ::OpenAPI::fromJsonValue(m_tenancies, json[QString("Tenancies")]);
    m_tenancies_isSet = !json[QString("Tenancies")].isNull() && m_tenancies_isValid;

    m_total_rent_arrears_isValid = ::OpenAPI::fromJsonValue(m_total_rent_arrears, json[QString("TotalRentArrears")]);
    m_total_rent_arrears_isSet = !json[QString("TotalRentArrears")].isNull() && m_total_rent_arrears_isValid;
}

QString OAILandlordSummaryModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandlordSummaryModel::asJsonObject() const {
    QJsonObject obj;
    if (m_account_balance_isSet) {
        obj.insert(QString("AccountBalance"), ::OpenAPI::toJsonValue(m_account_balance));
    }
    if (m_last_payment_isSet) {
        obj.insert(QString("LastPayment"), ::OpenAPI::toJsonValue(m_last_payment));
    }
    if (m_tenancies.size() > 0) {
        obj.insert(QString("Tenancies"), ::OpenAPI::toJsonValue(m_tenancies));
    }
    if (m_total_rent_arrears_isSet) {
        obj.insert(QString("TotalRentArrears"), ::OpenAPI::toJsonValue(m_total_rent_arrears));
    }
    return obj;
}

double OAILandlordSummaryModel::getAccountBalance() const {
    return m_account_balance;
}
void OAILandlordSummaryModel::setAccountBalance(const double &account_balance) {
    m_account_balance = account_balance;
    m_account_balance_isSet = true;
}

bool OAILandlordSummaryModel::is_account_balance_Set() const{
    return m_account_balance_isSet;
}

bool OAILandlordSummaryModel::is_account_balance_Valid() const{
    return m_account_balance_isValid;
}

QDateTime OAILandlordSummaryModel::getLastPayment() const {
    return m_last_payment;
}
void OAILandlordSummaryModel::setLastPayment(const QDateTime &last_payment) {
    m_last_payment = last_payment;
    m_last_payment_isSet = true;
}

bool OAILandlordSummaryModel::is_last_payment_Set() const{
    return m_last_payment_isSet;
}

bool OAILandlordSummaryModel::is_last_payment_Valid() const{
    return m_last_payment_isValid;
}

QList<OAILandlordSummaryTenancyModel> OAILandlordSummaryModel::getTenancies() const {
    return m_tenancies;
}
void OAILandlordSummaryModel::setTenancies(const QList<OAILandlordSummaryTenancyModel> &tenancies) {
    m_tenancies = tenancies;
    m_tenancies_isSet = true;
}

bool OAILandlordSummaryModel::is_tenancies_Set() const{
    return m_tenancies_isSet;
}

bool OAILandlordSummaryModel::is_tenancies_Valid() const{
    return m_tenancies_isValid;
}

double OAILandlordSummaryModel::getTotalRentArrears() const {
    return m_total_rent_arrears;
}
void OAILandlordSummaryModel::setTotalRentArrears(const double &total_rent_arrears) {
    m_total_rent_arrears = total_rent_arrears;
    m_total_rent_arrears_isSet = true;
}

bool OAILandlordSummaryModel::is_total_rent_arrears_Set() const{
    return m_total_rent_arrears_isSet;
}

bool OAILandlordSummaryModel::is_total_rent_arrears_Valid() const{
    return m_total_rent_arrears_isValid;
}

bool OAILandlordSummaryModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_payment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenancies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_rent_arrears_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandlordSummaryModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
