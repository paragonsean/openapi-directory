/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILandlordControllerApi_H
#define OAI_OAILandlordControllerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILandlordAccountingModel.h"
#include "OAILandlordCrmEntry.h"
#include "OAILandlordMaintenanceModel.h"
#include "OAILandlordProfitLossModel.h"
#include "OAILandlordRentArrearsModel.h"
#include "OAILandlordSettingsModel.h"
#include "OAILandlordSummaryModel.h"
#include "OAILandlordTenancyModel.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILandlordControllerApi : public QObject {
    Q_OBJECT

public:
    OAILandlordControllerApi(const int timeOut = 0);
    ~OAILandlordControllerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  token QString [required]
    * @param[in]  tenancy_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  notes QString [required]
    */
    virtual void landlordControllerCreateMaintenancePreference(const QString &short_name, const QString &token, const QString &tenancy_id, const QString &name, const QString &notes);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  token QString [required]
    */
    virtual void landlordControllerGetAccounts(const QString &short_name, const QString &token);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  token QString [required]
    * @param[in]  id QString [required]
    */
    virtual void landlordControllerGetDocument(const QString &short_name, const QString &token, const QString &id);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  token QString [required]
    * @param[in]  tenancy_id QString [required]
    */
    virtual void landlordControllerGetInvetoryReport(const QString &short_name, const QString &token, const QString &tenancy_id);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  token QString [required]
    * @param[in]  invoice_id QString [required]
    */
    virtual void landlordControllerGetInvoice(const QString &short_name, const QString &token, const QString &invoice_id);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  token QString [required]
    */
    virtual void landlordControllerGetLandlordCrmEntries(const QString &short_name, const QString &token);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  token QString [required]
    */
    virtual void landlordControllerGetMaintenanceJobs(const QString &short_name, const QString &token);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  token QString [required]
    */
    virtual void landlordControllerGetProfitLossReport(const QString &short_name, const QString &token);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  token QString [required]
    */
    virtual void landlordControllerGetRentArrears(const QString &short_name, const QString &token);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  token QString [required]
    * @param[in]  year_end qint32 [required]
    */
    virtual void landlordControllerGetSASReport(const QString &short_name, const QString &token, const qint32 &year_end);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  token QString [required]
    */
    virtual void landlordControllerGetSettings(const QString &short_name, const QString &token);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  token QString [required]
    */
    virtual void landlordControllerGetSummaryDetails(const QString &short_name, const QString &token);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  token QString [required]
    * @param[in]  tenancy_id QString [required]
    */
    virtual void landlordControllerGetTenancy(const QString &short_name, const QString &token, const QString &tenancy_id);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  token QString [required]
    * @param[in]  tenancy_id QString [required]
    */
    virtual void landlordControllerGetTenancyAgreementReport(const QString &short_name, const QString &token, const QString &tenancy_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void landlordControllerCreateMaintenancePreferenceCallback(OAIHttpRequestWorker *worker);
    void landlordControllerGetAccountsCallback(OAIHttpRequestWorker *worker);
    void landlordControllerGetDocumentCallback(OAIHttpRequestWorker *worker);
    void landlordControllerGetInvetoryReportCallback(OAIHttpRequestWorker *worker);
    void landlordControllerGetInvoiceCallback(OAIHttpRequestWorker *worker);
    void landlordControllerGetLandlordCrmEntriesCallback(OAIHttpRequestWorker *worker);
    void landlordControllerGetMaintenanceJobsCallback(OAIHttpRequestWorker *worker);
    void landlordControllerGetProfitLossReportCallback(OAIHttpRequestWorker *worker);
    void landlordControllerGetRentArrearsCallback(OAIHttpRequestWorker *worker);
    void landlordControllerGetSASReportCallback(OAIHttpRequestWorker *worker);
    void landlordControllerGetSettingsCallback(OAIHttpRequestWorker *worker);
    void landlordControllerGetSummaryDetailsCallback(OAIHttpRequestWorker *worker);
    void landlordControllerGetTenancyCallback(OAIHttpRequestWorker *worker);
    void landlordControllerGetTenancyAgreementReportCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void landlordControllerCreateMaintenancePreferenceSignal(QString summary);
    void landlordControllerGetAccountsSignal(OAILandlordAccountingModel summary);
    void landlordControllerGetDocumentSignal(OAIObject summary);
    void landlordControllerGetInvetoryReportSignal(OAIObject summary);
    void landlordControllerGetInvoiceSignal(OAIObject summary);
    void landlordControllerGetLandlordCrmEntriesSignal(QList<OAILandlordCrmEntry> summary);
    void landlordControllerGetMaintenanceJobsSignal(OAILandlordMaintenanceModel summary);
    void landlordControllerGetProfitLossReportSignal(OAILandlordProfitLossModel summary);
    void landlordControllerGetRentArrearsSignal(OAILandlordRentArrearsModel summary);
    void landlordControllerGetSASReportSignal(OAIObject summary);
    void landlordControllerGetSettingsSignal(OAILandlordSettingsModel summary);
    void landlordControllerGetSummaryDetailsSignal(OAILandlordSummaryModel summary);
    void landlordControllerGetTenancySignal(OAILandlordTenancyModel summary);
    void landlordControllerGetTenancyAgreementReportSignal(OAIObject summary);


    void landlordControllerCreateMaintenancePreferenceSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void landlordControllerGetAccountsSignalFull(OAIHttpRequestWorker *worker, OAILandlordAccountingModel summary);
    void landlordControllerGetDocumentSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void landlordControllerGetInvetoryReportSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void landlordControllerGetInvoiceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void landlordControllerGetLandlordCrmEntriesSignalFull(OAIHttpRequestWorker *worker, QList<OAILandlordCrmEntry> summary);
    void landlordControllerGetMaintenanceJobsSignalFull(OAIHttpRequestWorker *worker, OAILandlordMaintenanceModel summary);
    void landlordControllerGetProfitLossReportSignalFull(OAIHttpRequestWorker *worker, OAILandlordProfitLossModel summary);
    void landlordControllerGetRentArrearsSignalFull(OAIHttpRequestWorker *worker, OAILandlordRentArrearsModel summary);
    void landlordControllerGetSASReportSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void landlordControllerGetSettingsSignalFull(OAIHttpRequestWorker *worker, OAILandlordSettingsModel summary);
    void landlordControllerGetSummaryDetailsSignalFull(OAIHttpRequestWorker *worker, OAILandlordSummaryModel summary);
    void landlordControllerGetTenancySignalFull(OAIHttpRequestWorker *worker, OAILandlordTenancyModel summary);
    void landlordControllerGetTenancyAgreementReportSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use landlordControllerCreateMaintenancePreferenceSignalError() instead")
    void landlordControllerCreateMaintenancePreferenceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerCreateMaintenancePreferenceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetAccountsSignalError() instead")
    void landlordControllerGetAccountsSignalE(OAILandlordAccountingModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetAccountsSignalError(OAILandlordAccountingModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetDocumentSignalError() instead")
    void landlordControllerGetDocumentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetDocumentSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetInvetoryReportSignalError() instead")
    void landlordControllerGetInvetoryReportSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetInvetoryReportSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetInvoiceSignalError() instead")
    void landlordControllerGetInvoiceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetInvoiceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetLandlordCrmEntriesSignalError() instead")
    void landlordControllerGetLandlordCrmEntriesSignalE(QList<OAILandlordCrmEntry> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetLandlordCrmEntriesSignalError(QList<OAILandlordCrmEntry> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetMaintenanceJobsSignalError() instead")
    void landlordControllerGetMaintenanceJobsSignalE(OAILandlordMaintenanceModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetMaintenanceJobsSignalError(OAILandlordMaintenanceModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetProfitLossReportSignalError() instead")
    void landlordControllerGetProfitLossReportSignalE(OAILandlordProfitLossModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetProfitLossReportSignalError(OAILandlordProfitLossModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetRentArrearsSignalError() instead")
    void landlordControllerGetRentArrearsSignalE(OAILandlordRentArrearsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetRentArrearsSignalError(OAILandlordRentArrearsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetSASReportSignalError() instead")
    void landlordControllerGetSASReportSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetSASReportSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetSettingsSignalError() instead")
    void landlordControllerGetSettingsSignalE(OAILandlordSettingsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetSettingsSignalError(OAILandlordSettingsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetSummaryDetailsSignalError() instead")
    void landlordControllerGetSummaryDetailsSignalE(OAILandlordSummaryModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetSummaryDetailsSignalError(OAILandlordSummaryModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetTenancySignalError() instead")
    void landlordControllerGetTenancySignalE(OAILandlordTenancyModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetTenancySignalError(OAILandlordTenancyModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetTenancyAgreementReportSignalError() instead")
    void landlordControllerGetTenancyAgreementReportSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetTenancyAgreementReportSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use landlordControllerCreateMaintenancePreferenceSignalErrorFull() instead")
    void landlordControllerCreateMaintenancePreferenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerCreateMaintenancePreferenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetAccountsSignalErrorFull() instead")
    void landlordControllerGetAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetDocumentSignalErrorFull() instead")
    void landlordControllerGetDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetInvetoryReportSignalErrorFull() instead")
    void landlordControllerGetInvetoryReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetInvetoryReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetInvoiceSignalErrorFull() instead")
    void landlordControllerGetInvoiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetInvoiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetLandlordCrmEntriesSignalErrorFull() instead")
    void landlordControllerGetLandlordCrmEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetLandlordCrmEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetMaintenanceJobsSignalErrorFull() instead")
    void landlordControllerGetMaintenanceJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetMaintenanceJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetProfitLossReportSignalErrorFull() instead")
    void landlordControllerGetProfitLossReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetProfitLossReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetRentArrearsSignalErrorFull() instead")
    void landlordControllerGetRentArrearsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetRentArrearsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetSASReportSignalErrorFull() instead")
    void landlordControllerGetSASReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetSASReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetSettingsSignalErrorFull() instead")
    void landlordControllerGetSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetSummaryDetailsSignalErrorFull() instead")
    void landlordControllerGetSummaryDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetSummaryDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetTenancySignalErrorFull() instead")
    void landlordControllerGetTenancySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetTenancySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use landlordControllerGetTenancyAgreementReportSignalErrorFull() instead")
    void landlordControllerGetTenancyAgreementReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void landlordControllerGetTenancyAgreementReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
