/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandlordCrmEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandlordCrmEntry::OAILandlordCrmEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandlordCrmEntry::OAILandlordCrmEntry() {
    this->initializeModel();
}

OAILandlordCrmEntry::~OAILandlordCrmEntry() {}

void OAILandlordCrmEntry::initializeModel() {

    m_branch_id_isSet = false;
    m_branch_id_isValid = false;

    m_global_reference_isSet = false;
    m_global_reference_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_oid_isSet = false;
    m_oid_isValid = false;
}

void OAILandlordCrmEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandlordCrmEntry::fromJsonObject(QJsonObject json) {

    m_branch_id_isValid = ::OpenAPI::fromJsonValue(m_branch_id, json[QString("BranchID")]);
    m_branch_id_isSet = !json[QString("BranchID")].isNull() && m_branch_id_isValid;

    m_global_reference_isValid = ::OpenAPI::fromJsonValue(m_global_reference, json[QString("GlobalReference")]);
    m_global_reference_isSet = !json[QString("GlobalReference")].isNull() && m_global_reference_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_oid_isValid = ::OpenAPI::fromJsonValue(m_oid, json[QString("OID")]);
    m_oid_isSet = !json[QString("OID")].isNull() && m_oid_isValid;
}

QString OAILandlordCrmEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandlordCrmEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_id_isSet) {
        obj.insert(QString("BranchID"), ::OpenAPI::toJsonValue(m_branch_id));
    }
    if (m_global_reference_isSet) {
        obj.insert(QString("GlobalReference"), ::OpenAPI::toJsonValue(m_global_reference));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_oid_isSet) {
        obj.insert(QString("OID"), ::OpenAPI::toJsonValue(m_oid));
    }
    return obj;
}

QString OAILandlordCrmEntry::getBranchId() const {
    return m_branch_id;
}
void OAILandlordCrmEntry::setBranchId(const QString &branch_id) {
    m_branch_id = branch_id;
    m_branch_id_isSet = true;
}

bool OAILandlordCrmEntry::is_branch_id_Set() const{
    return m_branch_id_isSet;
}

bool OAILandlordCrmEntry::is_branch_id_Valid() const{
    return m_branch_id_isValid;
}

QString OAILandlordCrmEntry::getGlobalReference() const {
    return m_global_reference;
}
void OAILandlordCrmEntry::setGlobalReference(const QString &global_reference) {
    m_global_reference = global_reference;
    m_global_reference_isSet = true;
}

bool OAILandlordCrmEntry::is_global_reference_Set() const{
    return m_global_reference_isSet;
}

bool OAILandlordCrmEntry::is_global_reference_Valid() const{
    return m_global_reference_isValid;
}

QString OAILandlordCrmEntry::getName() const {
    return m_name;
}
void OAILandlordCrmEntry::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILandlordCrmEntry::is_name_Set() const{
    return m_name_isSet;
}

bool OAILandlordCrmEntry::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILandlordCrmEntry::getOid() const {
    return m_oid;
}
void OAILandlordCrmEntry::setOid(const QString &oid) {
    m_oid = oid;
    m_oid_isSet = true;
}

bool OAILandlordCrmEntry::is_oid_Set() const{
    return m_oid_isSet;
}

bool OAILandlordCrmEntry::is_oid_Valid() const{
    return m_oid_isValid;
}

bool OAILandlordCrmEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandlordCrmEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
