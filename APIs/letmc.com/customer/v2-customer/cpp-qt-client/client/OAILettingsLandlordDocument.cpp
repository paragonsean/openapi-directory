/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILettingsLandlordDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILettingsLandlordDocument::OAILettingsLandlordDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILettingsLandlordDocument::OAILettingsLandlordDocument() {
    this->initializeModel();
}

OAILettingsLandlordDocument::~OAILettingsLandlordDocument() {}

void OAILettingsLandlordDocument::initializeModel() {

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;
}

void OAILettingsLandlordDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILettingsLandlordDocument::fromJsonObject(QJsonObject json) {

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("FileName")]);
    m_file_name_isSet = !json[QString("FileName")].isNull() && m_file_name_isValid;

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("FileSize")]);
    m_file_size_isSet = !json[QString("FileSize")].isNull() && m_file_size_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("MIMEType")]);
    m_mime_type_isSet = !json[QString("MIMEType")].isNull() && m_mime_type_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("Note")]);
    m_note_isSet = !json[QString("Note")].isNull() && m_note_isValid;
}

QString OAILettingsLandlordDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILettingsLandlordDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_file_name_isSet) {
        obj.insert(QString("FileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_file_size_isSet) {
        obj.insert(QString("FileSize"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("MIMEType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_note_isSet) {
        obj.insert(QString("Note"), ::OpenAPI::toJsonValue(m_note));
    }
    return obj;
}

QString OAILettingsLandlordDocument::getFileName() const {
    return m_file_name;
}
void OAILettingsLandlordDocument::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAILettingsLandlordDocument::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAILettingsLandlordDocument::is_file_name_Valid() const{
    return m_file_name_isValid;
}

qint32 OAILettingsLandlordDocument::getFileSize() const {
    return m_file_size;
}
void OAILettingsLandlordDocument::setFileSize(const qint32 &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAILettingsLandlordDocument::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAILettingsLandlordDocument::is_file_size_Valid() const{
    return m_file_size_isValid;
}

QString OAILettingsLandlordDocument::getId() const {
    return m_id;
}
void OAILettingsLandlordDocument::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILettingsLandlordDocument::is_id_Set() const{
    return m_id_isSet;
}

bool OAILettingsLandlordDocument::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILettingsLandlordDocument::getMimeType() const {
    return m_mime_type;
}
void OAILettingsLandlordDocument::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAILettingsLandlordDocument::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAILettingsLandlordDocument::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString OAILettingsLandlordDocument::getNote() const {
    return m_note;
}
void OAILettingsLandlordDocument::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAILettingsLandlordDocument::is_note_Set() const{
    return m_note_isSet;
}

bool OAILettingsLandlordDocument::is_note_Valid() const{
    return m_note_isValid;
}

bool OAILettingsLandlordDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILettingsLandlordDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
