/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandlordRentArrearsModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandlordRentArrearsModel::OAILandlordRentArrearsModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandlordRentArrearsModel::OAILandlordRentArrearsModel() {
    this->initializeModel();
}

OAILandlordRentArrearsModel::~OAILandlordRentArrearsModel() {}

void OAILandlordRentArrearsModel::initializeModel() {

    m_chase_notes_isSet = false;
    m_chase_notes_isValid = false;

    m_rent_collected_isSet = false;
    m_rent_collected_isValid = false;

    m_rent_outstanding_isSet = false;
    m_rent_outstanding_isValid = false;

    m_total_rent_arrears_isSet = false;
    m_total_rent_arrears_isValid = false;
}

void OAILandlordRentArrearsModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandlordRentArrearsModel::fromJsonObject(QJsonObject json) {

    m_chase_notes_isValid = ::OpenAPI::fromJsonValue(m_chase_notes, json[QString("ChaseNotes")]);
    m_chase_notes_isSet = !json[QString("ChaseNotes")].isNull() && m_chase_notes_isValid;

    m_rent_collected_isValid = ::OpenAPI::fromJsonValue(m_rent_collected, json[QString("RentCollected")]);
    m_rent_collected_isSet = !json[QString("RentCollected")].isNull() && m_rent_collected_isValid;

    m_rent_outstanding_isValid = ::OpenAPI::fromJsonValue(m_rent_outstanding, json[QString("RentOutstanding")]);
    m_rent_outstanding_isSet = !json[QString("RentOutstanding")].isNull() && m_rent_outstanding_isValid;

    m_total_rent_arrears_isValid = ::OpenAPI::fromJsonValue(m_total_rent_arrears, json[QString("TotalRentArrears")]);
    m_total_rent_arrears_isSet = !json[QString("TotalRentArrears")].isNull() && m_total_rent_arrears_isValid;
}

QString OAILandlordRentArrearsModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandlordRentArrearsModel::asJsonObject() const {
    QJsonObject obj;
    if (m_chase_notes.size() > 0) {
        obj.insert(QString("ChaseNotes"), ::OpenAPI::toJsonValue(m_chase_notes));
    }
    if (m_rent_collected_isSet) {
        obj.insert(QString("RentCollected"), ::OpenAPI::toJsonValue(m_rent_collected));
    }
    if (m_rent_outstanding.size() > 0) {
        obj.insert(QString("RentOutstanding"), ::OpenAPI::toJsonValue(m_rent_outstanding));
    }
    if (m_total_rent_arrears_isSet) {
        obj.insert(QString("TotalRentArrears"), ::OpenAPI::toJsonValue(m_total_rent_arrears));
    }
    return obj;
}

QList<OAILandlordChaseNoteModel> OAILandlordRentArrearsModel::getChaseNotes() const {
    return m_chase_notes;
}
void OAILandlordRentArrearsModel::setChaseNotes(const QList<OAILandlordChaseNoteModel> &chase_notes) {
    m_chase_notes = chase_notes;
    m_chase_notes_isSet = true;
}

bool OAILandlordRentArrearsModel::is_chase_notes_Set() const{
    return m_chase_notes_isSet;
}

bool OAILandlordRentArrearsModel::is_chase_notes_Valid() const{
    return m_chase_notes_isValid;
}

double OAILandlordRentArrearsModel::getRentCollected() const {
    return m_rent_collected;
}
void OAILandlordRentArrearsModel::setRentCollected(const double &rent_collected) {
    m_rent_collected = rent_collected;
    m_rent_collected_isSet = true;
}

bool OAILandlordRentArrearsModel::is_rent_collected_Set() const{
    return m_rent_collected_isSet;
}

bool OAILandlordRentArrearsModel::is_rent_collected_Valid() const{
    return m_rent_collected_isValid;
}

QList<OAILandlordRentOustandingItem> OAILandlordRentArrearsModel::getRentOutstanding() const {
    return m_rent_outstanding;
}
void OAILandlordRentArrearsModel::setRentOutstanding(const QList<OAILandlordRentOustandingItem> &rent_outstanding) {
    m_rent_outstanding = rent_outstanding;
    m_rent_outstanding_isSet = true;
}

bool OAILandlordRentArrearsModel::is_rent_outstanding_Set() const{
    return m_rent_outstanding_isSet;
}

bool OAILandlordRentArrearsModel::is_rent_outstanding_Valid() const{
    return m_rent_outstanding_isValid;
}

double OAILandlordRentArrearsModel::getTotalRentArrears() const {
    return m_total_rent_arrears;
}
void OAILandlordRentArrearsModel::setTotalRentArrears(const double &total_rent_arrears) {
    m_total_rent_arrears = total_rent_arrears;
    m_total_rent_arrears_isSet = true;
}

bool OAILandlordRentArrearsModel::is_total_rent_arrears_Set() const{
    return m_total_rent_arrears_isSet;
}

bool OAILandlordRentArrearsModel::is_total_rent_arrears_Valid() const{
    return m_total_rent_arrears_isValid;
}

bool OAILandlordRentArrearsModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chase_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent_collected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent_outstanding.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_rent_arrears_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandlordRentArrearsModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
