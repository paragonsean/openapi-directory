/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISessionControllerApi_H
#define OAI_OAISessionControllerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISessionControllerApi : public QObject {
    Q_OBJECT

public:
    OAISessionControllerApi(const int timeOut = 0);
    ~OAISessionControllerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  token QString [required]
    * @param[in]  old_password QString [required]
    * @param[in]  new_password QString [required]
    */
    virtual void sessionControllerChangePassword(const QString &short_name, const QString &token, const QString &old_password, const QString &new_password);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  email QString [required]
    * @param[in]  title QString [required]
    * @param[in]  forename QString [required]
    * @param[in]  surname QString [required]
    * @param[in]  property_address QString [required]
    * @param[in]  contact_details QString [required]
    * @param[in]  branch_id QString [optional]
    */
    virtual void sessionControllerCreateLandlordLogin(const QString &short_name, const QString &email, const QString &title, const QString &forename, const QString &surname, const QString &property_address, const QString &contact_details, const ::OpenAPI::OptionalParam<QString> &branch_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  token QString [required]
    */
    virtual void sessionControllerGetSessionInfo(const QString &short_name, const QString &token);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  username QString [required]
    * @param[in]  password QString [required]
    */
    virtual void sessionControllerLogin(const QString &short_name, const QString &username, const QString &password);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  token QString [required]
    */
    virtual void sessionControllerLogout(const QString &short_name, const QString &token);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  email QString [required]
    */
    virtual void sessionControllerResetPassword(const QString &short_name, const QString &email);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void sessionControllerChangePasswordCallback(OAIHttpRequestWorker *worker);
    void sessionControllerCreateLandlordLoginCallback(OAIHttpRequestWorker *worker);
    void sessionControllerGetSessionInfoCallback(OAIHttpRequestWorker *worker);
    void sessionControllerLoginCallback(OAIHttpRequestWorker *worker);
    void sessionControllerLogoutCallback(OAIHttpRequestWorker *worker);
    void sessionControllerResetPasswordCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void sessionControllerChangePasswordSignal();
    void sessionControllerCreateLandlordLoginSignal();
    void sessionControllerGetSessionInfoSignal(QString summary);
    void sessionControllerLoginSignal(QString summary);
    void sessionControllerLogoutSignal();
    void sessionControllerResetPasswordSignal();


    void sessionControllerChangePasswordSignalFull(OAIHttpRequestWorker *worker);
    void sessionControllerCreateLandlordLoginSignalFull(OAIHttpRequestWorker *worker);
    void sessionControllerGetSessionInfoSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void sessionControllerLoginSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void sessionControllerLogoutSignalFull(OAIHttpRequestWorker *worker);
    void sessionControllerResetPasswordSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use sessionControllerChangePasswordSignalError() instead")
    void sessionControllerChangePasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sessionControllerChangePasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sessionControllerCreateLandlordLoginSignalError() instead")
    void sessionControllerCreateLandlordLoginSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sessionControllerCreateLandlordLoginSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sessionControllerGetSessionInfoSignalError() instead")
    void sessionControllerGetSessionInfoSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sessionControllerGetSessionInfoSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sessionControllerLoginSignalError() instead")
    void sessionControllerLoginSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sessionControllerLoginSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sessionControllerLogoutSignalError() instead")
    void sessionControllerLogoutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sessionControllerLogoutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sessionControllerResetPasswordSignalError() instead")
    void sessionControllerResetPasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sessionControllerResetPasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use sessionControllerChangePasswordSignalErrorFull() instead")
    void sessionControllerChangePasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sessionControllerChangePasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sessionControllerCreateLandlordLoginSignalErrorFull() instead")
    void sessionControllerCreateLandlordLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sessionControllerCreateLandlordLoginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sessionControllerGetSessionInfoSignalErrorFull() instead")
    void sessionControllerGetSessionInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sessionControllerGetSessionInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sessionControllerLoginSignalErrorFull() instead")
    void sessionControllerLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sessionControllerLoginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sessionControllerLogoutSignalErrorFull() instead")
    void sessionControllerLogoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sessionControllerLogoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sessionControllerResetPasswordSignalErrorFull() instead")
    void sessionControllerResetPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sessionControllerResetPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
