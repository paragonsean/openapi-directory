/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandlordTenancyModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandlordTenancyModel::OAILandlordTenancyModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandlordTenancyModel::OAILandlordTenancyModel() {
    this->initializeModel();
}

OAILandlordTenancyModel::~OAILandlordTenancyModel() {}

void OAILandlordTenancyModel::initializeModel() {

    m_actual_end_date_isSet = false;
    m_actual_end_date_isValid = false;

    m_beds_isSet = false;
    m_beds_isValid = false;

    m_bond_isSet = false;
    m_bond_isValid = false;

    m_branch_id_isSet = false;
    m_branch_id_isValid = false;

    m_certificates_isSet = false;
    m_certificates_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_fixed_date_isSet = false;
    m_fixed_date_isValid = false;

    m_global_reference_isSet = false;
    m_global_reference_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inspections_isSet = false;
    m_inspections_isValid = false;

    m_managed_rent_isSet = false;
    m_managed_rent_isValid = false;

    m_preferences_isSet = false;
    m_preferences_isValid = false;

    m_previous_rent_amount_isSet = false;
    m_previous_rent_amount_isValid = false;

    m_property_address_isSet = false;
    m_property_address_isValid = false;

    m_rent_isSet = false;
    m_rent_isValid = false;

    m_rent_amount_isSet = false;
    m_rent_amount_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_tenancy_property_isSet = false;
    m_tenancy_property_isValid = false;

    m_tenancy_state_isSet = false;
    m_tenancy_state_isValid = false;

    m_tenants_isSet = false;
    m_tenants_isValid = false;
}

void OAILandlordTenancyModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandlordTenancyModel::fromJsonObject(QJsonObject json) {

    m_actual_end_date_isValid = ::OpenAPI::fromJsonValue(m_actual_end_date, json[QString("ActualEndDate")]);
    m_actual_end_date_isSet = !json[QString("ActualEndDate")].isNull() && m_actual_end_date_isValid;

    m_beds_isValid = ::OpenAPI::fromJsonValue(m_beds, json[QString("Beds")]);
    m_beds_isSet = !json[QString("Beds")].isNull() && m_beds_isValid;

    m_bond_isValid = ::OpenAPI::fromJsonValue(m_bond, json[QString("Bond")]);
    m_bond_isSet = !json[QString("Bond")].isNull() && m_bond_isValid;

    m_branch_id_isValid = ::OpenAPI::fromJsonValue(m_branch_id, json[QString("BranchID")]);
    m_branch_id_isSet = !json[QString("BranchID")].isNull() && m_branch_id_isValid;

    m_certificates_isValid = ::OpenAPI::fromJsonValue(m_certificates, json[QString("Certificates")]);
    m_certificates_isSet = !json[QString("Certificates")].isNull() && m_certificates_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("Documents")]);
    m_documents_isSet = !json[QString("Documents")].isNull() && m_documents_isValid;

    m_fixed_date_isValid = ::OpenAPI::fromJsonValue(m_fixed_date, json[QString("FixedDate")]);
    m_fixed_date_isSet = !json[QString("FixedDate")].isNull() && m_fixed_date_isValid;

    m_global_reference_isValid = ::OpenAPI::fromJsonValue(m_global_reference, json[QString("GlobalReference")]);
    m_global_reference_isSet = !json[QString("GlobalReference")].isNull() && m_global_reference_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_inspections_isValid = ::OpenAPI::fromJsonValue(m_inspections, json[QString("Inspections")]);
    m_inspections_isSet = !json[QString("Inspections")].isNull() && m_inspections_isValid;

    m_managed_rent_isValid = ::OpenAPI::fromJsonValue(m_managed_rent, json[QString("ManagedRent")]);
    m_managed_rent_isSet = !json[QString("ManagedRent")].isNull() && m_managed_rent_isValid;

    m_preferences_isValid = ::OpenAPI::fromJsonValue(m_preferences, json[QString("Preferences")]);
    m_preferences_isSet = !json[QString("Preferences")].isNull() && m_preferences_isValid;

    m_previous_rent_amount_isValid = ::OpenAPI::fromJsonValue(m_previous_rent_amount, json[QString("PreviousRentAmount")]);
    m_previous_rent_amount_isSet = !json[QString("PreviousRentAmount")].isNull() && m_previous_rent_amount_isValid;

    m_property_address_isValid = ::OpenAPI::fromJsonValue(m_property_address, json[QString("PropertyAddress")]);
    m_property_address_isSet = !json[QString("PropertyAddress")].isNull() && m_property_address_isValid;

    m_rent_isValid = ::OpenAPI::fromJsonValue(m_rent, json[QString("Rent")]);
    m_rent_isSet = !json[QString("Rent")].isNull() && m_rent_isValid;

    m_rent_amount_isValid = ::OpenAPI::fromJsonValue(m_rent_amount, json[QString("RentAmount")]);
    m_rent_amount_isSet = !json[QString("RentAmount")].isNull() && m_rent_amount_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_tenancy_property_isValid = ::OpenAPI::fromJsonValue(m_tenancy_property, json[QString("TenancyProperty")]);
    m_tenancy_property_isSet = !json[QString("TenancyProperty")].isNull() && m_tenancy_property_isValid;

    m_tenancy_state_isValid = ::OpenAPI::fromJsonValue(m_tenancy_state, json[QString("TenancyState")]);
    m_tenancy_state_isSet = !json[QString("TenancyState")].isNull() && m_tenancy_state_isValid;

    m_tenants_isValid = ::OpenAPI::fromJsonValue(m_tenants, json[QString("Tenants")]);
    m_tenants_isSet = !json[QString("Tenants")].isNull() && m_tenants_isValid;
}

QString OAILandlordTenancyModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandlordTenancyModel::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_end_date_isSet) {
        obj.insert(QString("ActualEndDate"), ::OpenAPI::toJsonValue(m_actual_end_date));
    }
    if (m_beds_isSet) {
        obj.insert(QString("Beds"), ::OpenAPI::toJsonValue(m_beds));
    }
    if (m_bond_isSet) {
        obj.insert(QString("Bond"), ::OpenAPI::toJsonValue(m_bond));
    }
    if (m_branch_id_isSet) {
        obj.insert(QString("BranchID"), ::OpenAPI::toJsonValue(m_branch_id));
    }
    if (m_certificates.size() > 0) {
        obj.insert(QString("Certificates"), ::OpenAPI::toJsonValue(m_certificates));
    }
    if (m_documents.size() > 0) {
        obj.insert(QString("Documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_fixed_date_isSet) {
        obj.insert(QString("FixedDate"), ::OpenAPI::toJsonValue(m_fixed_date));
    }
    if (m_global_reference_isSet) {
        obj.insert(QString("GlobalReference"), ::OpenAPI::toJsonValue(m_global_reference));
    }
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inspections.size() > 0) {
        obj.insert(QString("Inspections"), ::OpenAPI::toJsonValue(m_inspections));
    }
    if (m_managed_rent_isSet) {
        obj.insert(QString("ManagedRent"), ::OpenAPI::toJsonValue(m_managed_rent));
    }
    if (m_preferences.size() > 0) {
        obj.insert(QString("Preferences"), ::OpenAPI::toJsonValue(m_preferences));
    }
    if (m_previous_rent_amount_isSet) {
        obj.insert(QString("PreviousRentAmount"), ::OpenAPI::toJsonValue(m_previous_rent_amount));
    }
    if (m_property_address_isSet) {
        obj.insert(QString("PropertyAddress"), ::OpenAPI::toJsonValue(m_property_address));
    }
    if (m_rent_isSet) {
        obj.insert(QString("Rent"), ::OpenAPI::toJsonValue(m_rent));
    }
    if (m_rent_amount_isSet) {
        obj.insert(QString("RentAmount"), ::OpenAPI::toJsonValue(m_rent_amount));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_tenancy_property_isSet) {
        obj.insert(QString("TenancyProperty"), ::OpenAPI::toJsonValue(m_tenancy_property));
    }
    if (m_tenancy_state_isSet) {
        obj.insert(QString("TenancyState"), ::OpenAPI::toJsonValue(m_tenancy_state));
    }
    if (m_tenants.size() > 0) {
        obj.insert(QString("Tenants"), ::OpenAPI::toJsonValue(m_tenants));
    }
    return obj;
}

QDateTime OAILandlordTenancyModel::getActualEndDate() const {
    return m_actual_end_date;
}
void OAILandlordTenancyModel::setActualEndDate(const QDateTime &actual_end_date) {
    m_actual_end_date = actual_end_date;
    m_actual_end_date_isSet = true;
}

bool OAILandlordTenancyModel::is_actual_end_date_Set() const{
    return m_actual_end_date_isSet;
}

bool OAILandlordTenancyModel::is_actual_end_date_Valid() const{
    return m_actual_end_date_isValid;
}

qint32 OAILandlordTenancyModel::getBeds() const {
    return m_beds;
}
void OAILandlordTenancyModel::setBeds(const qint32 &beds) {
    m_beds = beds;
    m_beds_isSet = true;
}

bool OAILandlordTenancyModel::is_beds_Set() const{
    return m_beds_isSet;
}

bool OAILandlordTenancyModel::is_beds_Valid() const{
    return m_beds_isValid;
}

double OAILandlordTenancyModel::getBond() const {
    return m_bond;
}
void OAILandlordTenancyModel::setBond(const double &bond) {
    m_bond = bond;
    m_bond_isSet = true;
}

bool OAILandlordTenancyModel::is_bond_Set() const{
    return m_bond_isSet;
}

bool OAILandlordTenancyModel::is_bond_Valid() const{
    return m_bond_isValid;
}

QString OAILandlordTenancyModel::getBranchId() const {
    return m_branch_id;
}
void OAILandlordTenancyModel::setBranchId(const QString &branch_id) {
    m_branch_id = branch_id;
    m_branch_id_isSet = true;
}

bool OAILandlordTenancyModel::is_branch_id_Set() const{
    return m_branch_id_isSet;
}

bool OAILandlordTenancyModel::is_branch_id_Valid() const{
    return m_branch_id_isValid;
}

QList<OAILandlordMaintenanceCertificateModel> OAILandlordTenancyModel::getCertificates() const {
    return m_certificates;
}
void OAILandlordTenancyModel::setCertificates(const QList<OAILandlordMaintenanceCertificateModel> &certificates) {
    m_certificates = certificates;
    m_certificates_isSet = true;
}

bool OAILandlordTenancyModel::is_certificates_Set() const{
    return m_certificates_isSet;
}

bool OAILandlordTenancyModel::is_certificates_Valid() const{
    return m_certificates_isValid;
}

QList<OAILettingsLandlordDocument> OAILandlordTenancyModel::getDocuments() const {
    return m_documents;
}
void OAILandlordTenancyModel::setDocuments(const QList<OAILettingsLandlordDocument> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAILandlordTenancyModel::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAILandlordTenancyModel::is_documents_Valid() const{
    return m_documents_isValid;
}

QDateTime OAILandlordTenancyModel::getFixedDate() const {
    return m_fixed_date;
}
void OAILandlordTenancyModel::setFixedDate(const QDateTime &fixed_date) {
    m_fixed_date = fixed_date;
    m_fixed_date_isSet = true;
}

bool OAILandlordTenancyModel::is_fixed_date_Set() const{
    return m_fixed_date_isSet;
}

bool OAILandlordTenancyModel::is_fixed_date_Valid() const{
    return m_fixed_date_isValid;
}

QString OAILandlordTenancyModel::getGlobalReference() const {
    return m_global_reference;
}
void OAILandlordTenancyModel::setGlobalReference(const QString &global_reference) {
    m_global_reference = global_reference;
    m_global_reference_isSet = true;
}

bool OAILandlordTenancyModel::is_global_reference_Set() const{
    return m_global_reference_isSet;
}

bool OAILandlordTenancyModel::is_global_reference_Valid() const{
    return m_global_reference_isValid;
}

QString OAILandlordTenancyModel::getId() const {
    return m_id;
}
void OAILandlordTenancyModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILandlordTenancyModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAILandlordTenancyModel::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAILandlordLettingsInspectionModel> OAILandlordTenancyModel::getInspections() const {
    return m_inspections;
}
void OAILandlordTenancyModel::setInspections(const QList<OAILandlordLettingsInspectionModel> &inspections) {
    m_inspections = inspections;
    m_inspections_isSet = true;
}

bool OAILandlordTenancyModel::is_inspections_Set() const{
    return m_inspections_isSet;
}

bool OAILandlordTenancyModel::is_inspections_Valid() const{
    return m_inspections_isValid;
}

bool OAILandlordTenancyModel::isManagedRent() const {
    return m_managed_rent;
}
void OAILandlordTenancyModel::setManagedRent(const bool &managed_rent) {
    m_managed_rent = managed_rent;
    m_managed_rent_isSet = true;
}

bool OAILandlordTenancyModel::is_managed_rent_Set() const{
    return m_managed_rent_isSet;
}

bool OAILandlordTenancyModel::is_managed_rent_Valid() const{
    return m_managed_rent_isValid;
}

QList<OAILandlordMaintenancePreferenceModel> OAILandlordTenancyModel::getPreferences() const {
    return m_preferences;
}
void OAILandlordTenancyModel::setPreferences(const QList<OAILandlordMaintenancePreferenceModel> &preferences) {
    m_preferences = preferences;
    m_preferences_isSet = true;
}

bool OAILandlordTenancyModel::is_preferences_Set() const{
    return m_preferences_isSet;
}

bool OAILandlordTenancyModel::is_preferences_Valid() const{
    return m_preferences_isValid;
}

double OAILandlordTenancyModel::getPreviousRentAmount() const {
    return m_previous_rent_amount;
}
void OAILandlordTenancyModel::setPreviousRentAmount(const double &previous_rent_amount) {
    m_previous_rent_amount = previous_rent_amount;
    m_previous_rent_amount_isSet = true;
}

bool OAILandlordTenancyModel::is_previous_rent_amount_Set() const{
    return m_previous_rent_amount_isSet;
}

bool OAILandlordTenancyModel::is_previous_rent_amount_Valid() const{
    return m_previous_rent_amount_isValid;
}

QString OAILandlordTenancyModel::getPropertyAddress() const {
    return m_property_address;
}
void OAILandlordTenancyModel::setPropertyAddress(const QString &property_address) {
    m_property_address = property_address;
    m_property_address_isSet = true;
}

bool OAILandlordTenancyModel::is_property_address_Set() const{
    return m_property_address_isSet;
}

bool OAILandlordTenancyModel::is_property_address_Valid() const{
    return m_property_address_isValid;
}

QString OAILandlordTenancyModel::getRent() const {
    return m_rent;
}
void OAILandlordTenancyModel::setRent(const QString &rent) {
    m_rent = rent;
    m_rent_isSet = true;
}

bool OAILandlordTenancyModel::is_rent_Set() const{
    return m_rent_isSet;
}

bool OAILandlordTenancyModel::is_rent_Valid() const{
    return m_rent_isValid;
}

double OAILandlordTenancyModel::getRentAmount() const {
    return m_rent_amount;
}
void OAILandlordTenancyModel::setRentAmount(const double &rent_amount) {
    m_rent_amount = rent_amount;
    m_rent_amount_isSet = true;
}

bool OAILandlordTenancyModel::is_rent_amount_Set() const{
    return m_rent_amount_isSet;
}

bool OAILandlordTenancyModel::is_rent_amount_Valid() const{
    return m_rent_amount_isValid;
}

QDateTime OAILandlordTenancyModel::getStartDate() const {
    return m_start_date;
}
void OAILandlordTenancyModel::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAILandlordTenancyModel::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAILandlordTenancyModel::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAILandlordTenancyModel::getTenancyProperty() const {
    return m_tenancy_property;
}
void OAILandlordTenancyModel::setTenancyProperty(const QString &tenancy_property) {
    m_tenancy_property = tenancy_property;
    m_tenancy_property_isSet = true;
}

bool OAILandlordTenancyModel::is_tenancy_property_Set() const{
    return m_tenancy_property_isSet;
}

bool OAILandlordTenancyModel::is_tenancy_property_Valid() const{
    return m_tenancy_property_isValid;
}

QString OAILandlordTenancyModel::getTenancyState() const {
    return m_tenancy_state;
}
void OAILandlordTenancyModel::setTenancyState(const QString &tenancy_state) {
    m_tenancy_state = tenancy_state;
    m_tenancy_state_isSet = true;
}

bool OAILandlordTenancyModel::is_tenancy_state_Set() const{
    return m_tenancy_state_isSet;
}

bool OAILandlordTenancyModel::is_tenancy_state_Valid() const{
    return m_tenancy_state_isValid;
}

QList<QString> OAILandlordTenancyModel::getTenants() const {
    return m_tenants;
}
void OAILandlordTenancyModel::setTenants(const QList<QString> &tenants) {
    m_tenants = tenants;
    m_tenants_isSet = true;
}

bool OAILandlordTenancyModel::is_tenants_Set() const{
    return m_tenants_isSet;
}

bool OAILandlordTenancyModel::is_tenants_Valid() const{
    return m_tenants_isValid;
}

bool OAILandlordTenancyModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bond_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inspections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_rent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_rent_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rent_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenancy_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenancy_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenants.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandlordTenancyModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
