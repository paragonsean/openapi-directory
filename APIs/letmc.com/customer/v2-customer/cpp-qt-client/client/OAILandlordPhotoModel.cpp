/**
 * agentOS Api V2, Customer Login Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2-customer
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILandlordPhotoModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILandlordPhotoModel::OAILandlordPhotoModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILandlordPhotoModel::OAILandlordPhotoModel() {
    this->initializeModel();
}

OAILandlordPhotoModel::~OAILandlordPhotoModel() {}

void OAILandlordPhotoModel::initializeModel() {

    m_e_tag_isSet = false;
    m_e_tag_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_oid_isSet = false;
    m_oid_isValid = false;

    m_photo_type_isSet = false;
    m_photo_type_isValid = false;
}

void OAILandlordPhotoModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILandlordPhotoModel::fromJsonObject(QJsonObject json) {

    m_e_tag_isValid = ::OpenAPI::fromJsonValue(m_e_tag, json[QString("ETag")]);
    m_e_tag_isSet = !json[QString("ETag")].isNull() && m_e_tag_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("FileName")]);
    m_file_name_isSet = !json[QString("FileName")].isNull() && m_file_name_isValid;

    m_oid_isValid = ::OpenAPI::fromJsonValue(m_oid, json[QString("OID")]);
    m_oid_isSet = !json[QString("OID")].isNull() && m_oid_isValid;

    m_photo_type_isValid = ::OpenAPI::fromJsonValue(m_photo_type, json[QString("PhotoType")]);
    m_photo_type_isSet = !json[QString("PhotoType")].isNull() && m_photo_type_isValid;
}

QString OAILandlordPhotoModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILandlordPhotoModel::asJsonObject() const {
    QJsonObject obj;
    if (m_e_tag_isSet) {
        obj.insert(QString("ETag"), ::OpenAPI::toJsonValue(m_e_tag));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("FileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_oid_isSet) {
        obj.insert(QString("OID"), ::OpenAPI::toJsonValue(m_oid));
    }
    if (m_photo_type_isSet) {
        obj.insert(QString("PhotoType"), ::OpenAPI::toJsonValue(m_photo_type));
    }
    return obj;
}

QString OAILandlordPhotoModel::getETag() const {
    return m_e_tag;
}
void OAILandlordPhotoModel::setETag(const QString &e_tag) {
    m_e_tag = e_tag;
    m_e_tag_isSet = true;
}

bool OAILandlordPhotoModel::is_e_tag_Set() const{
    return m_e_tag_isSet;
}

bool OAILandlordPhotoModel::is_e_tag_Valid() const{
    return m_e_tag_isValid;
}

QString OAILandlordPhotoModel::getFileName() const {
    return m_file_name;
}
void OAILandlordPhotoModel::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAILandlordPhotoModel::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAILandlordPhotoModel::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAILandlordPhotoModel::getOid() const {
    return m_oid;
}
void OAILandlordPhotoModel::setOid(const QString &oid) {
    m_oid = oid;
    m_oid_isSet = true;
}

bool OAILandlordPhotoModel::is_oid_Set() const{
    return m_oid_isSet;
}

bool OAILandlordPhotoModel::is_oid_Valid() const{
    return m_oid_isValid;
}

QString OAILandlordPhotoModel::getPhotoType() const {
    return m_photo_type;
}
void OAILandlordPhotoModel::setPhotoType(const QString &photo_type) {
    m_photo_type = photo_type;
    m_photo_type_isSet = true;
}

bool OAILandlordPhotoModel::is_photo_type_Set() const{
    return m_photo_type_isSet;
}

bool OAILandlordPhotoModel::is_photo_type_Valid() const{
    return m_photo_type_isValid;
}

bool OAILandlordPhotoModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILandlordPhotoModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
