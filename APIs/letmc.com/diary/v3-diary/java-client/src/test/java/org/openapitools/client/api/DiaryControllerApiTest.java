/*
 * agentOS API V3, Diary Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-diary
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DiaryAppointmentDetails;
import org.openapitools.client.model.DiaryAppointmentModel;
import org.openapitools.client.model.DiaryAppointmentModelResults;
import org.openapitools.client.model.DiaryAppointmentTypeModelResults;
import org.openapitools.client.model.DiaryBookingModel;
import org.openapitools.client.model.FeedbackSubmissionModel;
import org.openapitools.client.model.GuestDiaryParametersResultsModel;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DiaryControllerApi
 */
@Disabled
public class DiaryControllerApiTest {

    private final DiaryControllerApi api = new DiaryControllerApi();

    /**
     * Submit appointment feedback
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diaryControllerAddFeedbackTest() throws ApiException {
        String shortName = null;
        FeedbackSubmissionModel feedbackSubmissionModel = null;
        String response = api.diaryControllerAddFeedback(shortName, feedbackSubmissionModel);
        // TODO: test validations
    }

    /**
     * Cancel an existing appointment using its unique identifier
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diaryControllerCancelAppointmentTest() throws ApiException {
        String shortName = null;
        String appointmentID = null;
        String response = api.diaryControllerCancelAppointment(shortName, appointmentID);
        // TODO: test validations
    }

    /**
     * Delete an existing appointment using its unique identifier
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diaryControllerDeleteAppointmentTest() throws ApiException {
        String shortName = null;
        String appointmentID = null;
        String response = api.diaryControllerDeleteAppointment(shortName, appointmentID);
        // TODO: test validations
    }

    /**
     * Get a list of all available allocations for a date + 7 days for a specified appointment type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diaryControllerGetAllocationsTest() throws ApiException {
        String shortName = null;
        OffsetDateTime preferredDate = null;
        String appointmentType = null;
        Boolean lettings = null;
        String propertyIdentifier = null;
        String branchID = null;
        List<DiaryBookingModel> response = api.diaryControllerGetAllocations(shortName, preferredDate, appointmentType, lettings, propertyIdentifier, branchID);
        // TODO: test validations
    }

    /**
     * Get an appointment by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diaryControllerGetAppointmentTest() throws ApiException {
        String shortName = null;
        String appointmentID = null;
        DiaryAppointmentModel response = api.diaryControllerGetAppointment(shortName, appointmentID);
        // TODO: test validations
    }

    /**
     * A collection of all diary appointment types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diaryControllerGetAppointmentTypesTest() throws ApiException {
        String shortName = null;
        Integer offset = null;
        Integer count = null;
        DiaryAppointmentTypeModelResults response = api.diaryControllerGetAppointmentTypes(shortName, offset, count);
        // TODO: test validations
    }

    /**
     * A collection of diary appointments linked to a company filtered between specific dates and by appointment type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diaryControllerGetAppointmentsBetweenDatesTest() throws ApiException {
        String shortName = null;
        String branchID = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<String> appointmentTypesToSearch = null;
        Integer offset = null;
        Integer count = null;
        DiaryAppointmentModelResults response = api.diaryControllerGetAppointmentsBetweenDates(shortName, branchID, startDate, endDate, appointmentTypesToSearch, offset, count);
        // TODO: test validations
    }

    /**
     * Retrieves all recurring appointments:-
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diaryControllerGetRecurringAppointmentsTest() throws ApiException {
        String shortName = null;
        String branchID = null;
        List<String> appointmentTypesToSearch = null;
        Integer offset = null;
        Integer count = null;
        DiaryAppointmentModelResults response = api.diaryControllerGetRecurringAppointments(shortName, branchID, appointmentTypesToSearch, offset, count);
        // TODO: test validations
    }

    /**
     * Post an appointment into a valid diary allocation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diaryControllerPostAppointmentTest() throws ApiException {
        String shortName = null;
        List<String> propertyIdentifier = null;
        DiaryAppointmentDetails diaryAppointmentDetails = null;
        Boolean lettings = null;
        String response = api.diaryControllerPostAppointment(shortName, propertyIdentifier, diaryAppointmentDetails, lettings);
        // TODO: test validations
    }

    /**
     * Update an existing appointment using its unique identifier
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diaryControllerPutAppointmentTest() throws ApiException {
        String shortName = null;
        String appointmentID = null;
        DiaryAppointmentDetails diaryAppointmentDetails = null;
        Boolean lettings = null;
        Boolean allowMarketingCorrespondence = null;
        String response = api.diaryControllerPutAppointment(shortName, appointmentID, diaryAppointmentDetails, lettings, allowMarketingCorrespondence);
        // TODO: test validations
    }

    /**
     * Match Guest Parameters with existing applicants
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diaryControllerSearchGuestTest() throws ApiException {
        String shortname = null;
        String branchID = null;
        String forename = null;
        String emailaddress = null;
        String surname = null;
        Integer offset = null;
        Integer count = null;
        GuestDiaryParametersResultsModel response = api.diaryControllerSearchGuest(shortname, branchID, forename, emailaddress, surname, offset, count);
        // TODO: test validations
    }

}
