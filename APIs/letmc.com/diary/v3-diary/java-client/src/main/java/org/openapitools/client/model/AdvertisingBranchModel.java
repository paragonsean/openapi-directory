/*
 * agentOS API V3, Diary Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-diary
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a single branch of a client.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:15.032289-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdvertisingBranchModel {
  public static final String SERIALIZED_NAME_ADDRESS1 = "Address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "Address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_ADDRESS3 = "Address3";
  @SerializedName(SERIALIZED_NAME_ADDRESS3)
  private String address3;

  public static final String SERIALIZED_NAME_ADDRESS4 = "Address4";
  @SerializedName(SERIALIZED_NAME_ADDRESS4)
  private String address4;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "CompanyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_COUNTY = "County";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "EMailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_ETAG = "ETag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_FAX_PHONE = "FaxPhone";
  @SerializedName(SERIALIZED_NAME_FAX_PHONE)
  private String faxPhone;

  public static final String SERIALIZED_NAME_LAND_PHONE = "LandPhone";
  @SerializedName(SERIALIZED_NAME_LAND_PHONE)
  private String landPhone;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_O_I_D = "OID";
  @SerializedName(SERIALIZED_NAME_O_I_D)
  private String OID;

  public static final String SERIALIZED_NAME_POSTCODE = "Postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  private String postcode;

  public static final String SERIALIZED_NAME_WEB_ADDRESS = "WebAddress";
  @SerializedName(SERIALIZED_NAME_WEB_ADDRESS)
  private String webAddress;

  public AdvertisingBranchModel() {
  }

  public AdvertisingBranchModel address1(String address1) {
    this.address1 = address1;
    return this;
  }

  /**
   * Branch address line 1.
   * @return address1
   */
  @javax.annotation.Nullable
  public String getAddress1() {
    return address1;
  }

  public void setAddress1(String address1) {
    this.address1 = address1;
  }


  public AdvertisingBranchModel address2(String address2) {
    this.address2 = address2;
    return this;
  }

  /**
   * Branch address line 2.
   * @return address2
   */
  @javax.annotation.Nullable
  public String getAddress2() {
    return address2;
  }

  public void setAddress2(String address2) {
    this.address2 = address2;
  }


  public AdvertisingBranchModel address3(String address3) {
    this.address3 = address3;
    return this;
  }

  /**
   * Branch address line 3.
   * @return address3
   */
  @javax.annotation.Nullable
  public String getAddress3() {
    return address3;
  }

  public void setAddress3(String address3) {
    this.address3 = address3;
  }


  public AdvertisingBranchModel address4(String address4) {
    this.address4 = address4;
    return this;
  }

  /**
   * Branch address line 4.
   * @return address4
   */
  @javax.annotation.Nullable
  public String getAddress4() {
    return address4;
  }

  public void setAddress4(String address4) {
    this.address4 = address4;
  }


  public AdvertisingBranchModel companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * The relevant company name, if not the one specified on the branch then the one on company.
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public AdvertisingBranchModel county(String county) {
    this.county = county;
    return this;
  }

  /**
   * County
   * @return county
   */
  @javax.annotation.Nullable
  public String getCounty() {
    return county;
  }

  public void setCounty(String county) {
    this.county = county;
  }


  public AdvertisingBranchModel emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * Branch email address.
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public AdvertisingBranchModel etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * A unique identifier defining the object and change revision.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public AdvertisingBranchModel faxPhone(String faxPhone) {
    this.faxPhone = faxPhone;
    return this;
  }

  /**
   * Branch fax phone number.
   * @return faxPhone
   */
  @javax.annotation.Nullable
  public String getFaxPhone() {
    return faxPhone;
  }

  public void setFaxPhone(String faxPhone) {
    this.faxPhone = faxPhone;
  }


  public AdvertisingBranchModel landPhone(String landPhone) {
    this.landPhone = landPhone;
    return this;
  }

  /**
   * Branch land phone number.
   * @return landPhone
   */
  @javax.annotation.Nullable
  public String getLandPhone() {
    return landPhone;
  }

  public void setLandPhone(String landPhone) {
    this.landPhone = landPhone;
  }


  public AdvertisingBranchModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The branch name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AdvertisingBranchModel OID(String OID) {
    this.OID = OID;
    return this;
  }

  /**
   * The unique Object ID (OID).
   * @return OID
   */
  @javax.annotation.Nullable
  public String getOID() {
    return OID;
  }

  public void setOID(String OID) {
    this.OID = OID;
  }


  public AdvertisingBranchModel postcode(String postcode) {
    this.postcode = postcode;
    return this;
  }

  /**
   * Branch address postcode.
   * @return postcode
   */
  @javax.annotation.Nullable
  public String getPostcode() {
    return postcode;
  }

  public void setPostcode(String postcode) {
    this.postcode = postcode;
  }


  public AdvertisingBranchModel webAddress(String webAddress) {
    this.webAddress = webAddress;
    return this;
  }

  /**
   * Branch web address.
   * @return webAddress
   */
  @javax.annotation.Nullable
  public String getWebAddress() {
    return webAddress;
  }

  public void setWebAddress(String webAddress) {
    this.webAddress = webAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvertisingBranchModel advertisingBranchModel = (AdvertisingBranchModel) o;
    return Objects.equals(this.address1, advertisingBranchModel.address1) &&
        Objects.equals(this.address2, advertisingBranchModel.address2) &&
        Objects.equals(this.address3, advertisingBranchModel.address3) &&
        Objects.equals(this.address4, advertisingBranchModel.address4) &&
        Objects.equals(this.companyName, advertisingBranchModel.companyName) &&
        Objects.equals(this.county, advertisingBranchModel.county) &&
        Objects.equals(this.emailAddress, advertisingBranchModel.emailAddress) &&
        Objects.equals(this.etag, advertisingBranchModel.etag) &&
        Objects.equals(this.faxPhone, advertisingBranchModel.faxPhone) &&
        Objects.equals(this.landPhone, advertisingBranchModel.landPhone) &&
        Objects.equals(this.name, advertisingBranchModel.name) &&
        Objects.equals(this.OID, advertisingBranchModel.OID) &&
        Objects.equals(this.postcode, advertisingBranchModel.postcode) &&
        Objects.equals(this.webAddress, advertisingBranchModel.webAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address1, address2, address3, address4, companyName, county, emailAddress, etag, faxPhone, landPhone, name, OID, postcode, webAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvertisingBranchModel {\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    address3: ").append(toIndentedString(address3)).append("\n");
    sb.append("    address4: ").append(toIndentedString(address4)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    faxPhone: ").append(toIndentedString(faxPhone)).append("\n");
    sb.append("    landPhone: ").append(toIndentedString(landPhone)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    OID: ").append(toIndentedString(OID)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    webAddress: ").append(toIndentedString(webAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address1");
    openapiFields.add("Address2");
    openapiFields.add("Address3");
    openapiFields.add("Address4");
    openapiFields.add("CompanyName");
    openapiFields.add("County");
    openapiFields.add("EMailAddress");
    openapiFields.add("ETag");
    openapiFields.add("FaxPhone");
    openapiFields.add("LandPhone");
    openapiFields.add("Name");
    openapiFields.add("OID");
    openapiFields.add("Postcode");
    openapiFields.add("WebAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdvertisingBranchModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdvertisingBranchModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdvertisingBranchModel is not found in the empty JSON string", AdvertisingBranchModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdvertisingBranchModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdvertisingBranchModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Address1") != null && !jsonObj.get("Address1").isJsonNull()) && !jsonObj.get("Address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address1").toString()));
      }
      if ((jsonObj.get("Address2") != null && !jsonObj.get("Address2").isJsonNull()) && !jsonObj.get("Address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address2").toString()));
      }
      if ((jsonObj.get("Address3") != null && !jsonObj.get("Address3").isJsonNull()) && !jsonObj.get("Address3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address3").toString()));
      }
      if ((jsonObj.get("Address4") != null && !jsonObj.get("Address4").isJsonNull()) && !jsonObj.get("Address4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address4").toString()));
      }
      if ((jsonObj.get("CompanyName") != null && !jsonObj.get("CompanyName").isJsonNull()) && !jsonObj.get("CompanyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompanyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompanyName").toString()));
      }
      if ((jsonObj.get("County") != null && !jsonObj.get("County").isJsonNull()) && !jsonObj.get("County").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `County` to be a primitive type in the JSON string but got `%s`", jsonObj.get("County").toString()));
      }
      if ((jsonObj.get("EMailAddress") != null && !jsonObj.get("EMailAddress").isJsonNull()) && !jsonObj.get("EMailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EMailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EMailAddress").toString()));
      }
      if ((jsonObj.get("ETag") != null && !jsonObj.get("ETag").isJsonNull()) && !jsonObj.get("ETag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ETag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ETag").toString()));
      }
      if ((jsonObj.get("FaxPhone") != null && !jsonObj.get("FaxPhone").isJsonNull()) && !jsonObj.get("FaxPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FaxPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FaxPhone").toString()));
      }
      if ((jsonObj.get("LandPhone") != null && !jsonObj.get("LandPhone").isJsonNull()) && !jsonObj.get("LandPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LandPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LandPhone").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("OID") != null && !jsonObj.get("OID").isJsonNull()) && !jsonObj.get("OID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OID").toString()));
      }
      if ((jsonObj.get("Postcode") != null && !jsonObj.get("Postcode").isJsonNull()) && !jsonObj.get("Postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Postcode").toString()));
      }
      if ((jsonObj.get("WebAddress") != null && !jsonObj.get("WebAddress").isJsonNull()) && !jsonObj.get("WebAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdvertisingBranchModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdvertisingBranchModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdvertisingBranchModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdvertisingBranchModel.class));

       return (TypeAdapter<T>) new TypeAdapter<AdvertisingBranchModel>() {
           @Override
           public void write(JsonWriter out, AdvertisingBranchModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdvertisingBranchModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdvertisingBranchModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdvertisingBranchModel
   * @throws IOException if the JSON string is invalid with respect to AdvertisingBranchModel
   */
  public static AdvertisingBranchModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdvertisingBranchModel.class);
  }

  /**
   * Convert an instance of AdvertisingBranchModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

