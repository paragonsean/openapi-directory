/*
 * agentOS API V3, Diary Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-diary
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DiaryBookingModel;
import org.openapitools.client.model.DiaryGuestDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Submission Model - Structure to submit the appointment details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:15.032289-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiaryAppointmentDetails {
  public static final String SERIALIZED_NAME_ALLOCATION_DETAILS = "AllocationDetails";
  @SerializedName(SERIALIZED_NAME_ALLOCATION_DETAILS)
  private DiaryBookingModel allocationDetails;

  public static final String SERIALIZED_NAME_APPOINTMENT_TYPE = "AppointmentType";
  @SerializedName(SERIALIZED_NAME_APPOINTMENT_TYPE)
  private String appointmentType;

  public static final String SERIALIZED_NAME_EXTRA_COMMENTS = "ExtraComments";
  @SerializedName(SERIALIZED_NAME_EXTRA_COMMENTS)
  private String extraComments;

  public static final String SERIALIZED_NAME_GUESTS = "Guests";
  @SerializedName(SERIALIZED_NAME_GUESTS)
  private List<DiaryGuestDetails> guests = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public DiaryAppointmentDetails() {
  }

  public DiaryAppointmentDetails allocationDetails(DiaryBookingModel allocationDetails) {
    this.allocationDetails = allocationDetails;
    return this;
  }

  /**
   * Get allocationDetails
   * @return allocationDetails
   */
  @javax.annotation.Nullable
  public DiaryBookingModel getAllocationDetails() {
    return allocationDetails;
  }

  public void setAllocationDetails(DiaryBookingModel allocationDetails) {
    this.allocationDetails = allocationDetails;
  }


  public DiaryAppointmentDetails appointmentType(String appointmentType) {
    this.appointmentType = appointmentType;
    return this;
  }

  /**
   * The Appointment Type ID
   * @return appointmentType
   */
  @javax.annotation.Nullable
  public String getAppointmentType() {
    return appointmentType;
  }

  public void setAppointmentType(String appointmentType) {
    this.appointmentType = appointmentType;
  }


  public DiaryAppointmentDetails extraComments(String extraComments) {
    this.extraComments = extraComments;
    return this;
  }

  /**
   * Additional appointment comments
   * @return extraComments
   */
  @javax.annotation.Nullable
  public String getExtraComments() {
    return extraComments;
  }

  public void setExtraComments(String extraComments) {
    this.extraComments = extraComments;
  }


  public DiaryAppointmentDetails guests(List<DiaryGuestDetails> guests) {
    this.guests = guests;
    return this;
  }

  public DiaryAppointmentDetails addGuestsItem(DiaryGuestDetails guestsItem) {
    if (this.guests == null) {
      this.guests = new ArrayList<>();
    }
    this.guests.add(guestsItem);
    return this;
  }

  /**
   * A collection of guests linked to the appointment. If none leave empty
   * @return guests
   */
  @javax.annotation.Nullable
  public List<DiaryGuestDetails> getGuests() {
    return guests;
  }

  public void setGuests(List<DiaryGuestDetails> guests) {
    this.guests = guests;
  }


  public DiaryAppointmentDetails subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * The subject of the appointment
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiaryAppointmentDetails diaryAppointmentDetails = (DiaryAppointmentDetails) o;
    return Objects.equals(this.allocationDetails, diaryAppointmentDetails.allocationDetails) &&
        Objects.equals(this.appointmentType, diaryAppointmentDetails.appointmentType) &&
        Objects.equals(this.extraComments, diaryAppointmentDetails.extraComments) &&
        Objects.equals(this.guests, diaryAppointmentDetails.guests) &&
        Objects.equals(this.subject, diaryAppointmentDetails.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocationDetails, appointmentType, extraComments, guests, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiaryAppointmentDetails {\n");
    sb.append("    allocationDetails: ").append(toIndentedString(allocationDetails)).append("\n");
    sb.append("    appointmentType: ").append(toIndentedString(appointmentType)).append("\n");
    sb.append("    extraComments: ").append(toIndentedString(extraComments)).append("\n");
    sb.append("    guests: ").append(toIndentedString(guests)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AllocationDetails");
    openapiFields.add("AppointmentType");
    openapiFields.add("ExtraComments");
    openapiFields.add("Guests");
    openapiFields.add("Subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiaryAppointmentDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiaryAppointmentDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiaryAppointmentDetails is not found in the empty JSON string", DiaryAppointmentDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiaryAppointmentDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiaryAppointmentDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AllocationDetails`
      if (jsonObj.get("AllocationDetails") != null && !jsonObj.get("AllocationDetails").isJsonNull()) {
        DiaryBookingModel.validateJsonElement(jsonObj.get("AllocationDetails"));
      }
      if ((jsonObj.get("AppointmentType") != null && !jsonObj.get("AppointmentType").isJsonNull()) && !jsonObj.get("AppointmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AppointmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AppointmentType").toString()));
      }
      if ((jsonObj.get("ExtraComments") != null && !jsonObj.get("ExtraComments").isJsonNull()) && !jsonObj.get("ExtraComments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtraComments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtraComments").toString()));
      }
      if (jsonObj.get("Guests") != null && !jsonObj.get("Guests").isJsonNull()) {
        JsonArray jsonArrayguests = jsonObj.getAsJsonArray("Guests");
        if (jsonArrayguests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Guests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Guests` to be an array in the JSON string but got `%s`", jsonObj.get("Guests").toString()));
          }

          // validate the optional field `Guests` (array)
          for (int i = 0; i < jsonArrayguests.size(); i++) {
            DiaryGuestDetails.validateJsonElement(jsonArrayguests.get(i));
          };
        }
      }
      if ((jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) && !jsonObj.get("Subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiaryAppointmentDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiaryAppointmentDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiaryAppointmentDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiaryAppointmentDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<DiaryAppointmentDetails>() {
           @Override
           public void write(JsonWriter out, DiaryAppointmentDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiaryAppointmentDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiaryAppointmentDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiaryAppointmentDetails
   * @throws IOException if the JSON string is invalid with respect to DiaryAppointmentDetails
   */
  public static DiaryAppointmentDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiaryAppointmentDetails.class);
  }

  /**
   * Convert an instance of DiaryAppointmentDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

