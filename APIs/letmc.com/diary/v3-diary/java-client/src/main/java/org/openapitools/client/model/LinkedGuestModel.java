/*
 * agentOS API V3, Diary Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-diary
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Holds information on guests
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:15.032289-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LinkedGuestModel {
  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_GLOBAL_REFERENCE = "GlobalReference";
  @SerializedName(SERIALIZED_NAME_GLOBAL_REFERENCE)
  private String globalReference;

  public static final String SERIALIZED_NAME_MOBILE = "Mobile";
  @SerializedName(SERIALIZED_NAME_MOBILE)
  private String mobile;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_O_I_D = "OID";
  @SerializedName(SERIALIZED_NAME_O_I_D)
  private String OID;

  public LinkedGuestModel() {
  }

  public LinkedGuestModel(
     OffsetDateTime createdAt, 
     String email, 
     String globalReference, 
     String mobile, 
     String name, 
     String OID
  ) {
    this();
    this.createdAt = createdAt;
    this.email = email;
    this.globalReference = globalReference;
    this.mobile = mobile;
    this.name = name;
    this.OID = OID;
  }

  /**
   * Guest Created At:-
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * Guest Email:-
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }



  /**
   * Guest Global Reference:-
   * @return globalReference
   */
  @javax.annotation.Nullable
  public String getGlobalReference() {
    return globalReference;
  }



  /**
   * Guest Mobile:-
   * @return mobile
   */
  @javax.annotation.Nullable
  public String getMobile() {
    return mobile;
  }



  /**
   * Guest Name:-
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Guest OID:-
   * @return OID
   */
  @javax.annotation.Nullable
  public String getOID() {
    return OID;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkedGuestModel linkedGuestModel = (LinkedGuestModel) o;
    return Objects.equals(this.createdAt, linkedGuestModel.createdAt) &&
        Objects.equals(this.email, linkedGuestModel.email) &&
        Objects.equals(this.globalReference, linkedGuestModel.globalReference) &&
        Objects.equals(this.mobile, linkedGuestModel.mobile) &&
        Objects.equals(this.name, linkedGuestModel.name) &&
        Objects.equals(this.OID, linkedGuestModel.OID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, email, globalReference, mobile, name, OID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkedGuestModel {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    globalReference: ").append(toIndentedString(globalReference)).append("\n");
    sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    OID: ").append(toIndentedString(OID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CreatedAt");
    openapiFields.add("Email");
    openapiFields.add("GlobalReference");
    openapiFields.add("Mobile");
    openapiFields.add("Name");
    openapiFields.add("OID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LinkedGuestModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinkedGuestModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinkedGuestModel is not found in the empty JSON string", LinkedGuestModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LinkedGuestModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinkedGuestModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) && !jsonObj.get("Email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Email").toString()));
      }
      if ((jsonObj.get("GlobalReference") != null && !jsonObj.get("GlobalReference").isJsonNull()) && !jsonObj.get("GlobalReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GlobalReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GlobalReference").toString()));
      }
      if ((jsonObj.get("Mobile") != null && !jsonObj.get("Mobile").isJsonNull()) && !jsonObj.get("Mobile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Mobile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Mobile").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("OID") != null && !jsonObj.get("OID").isJsonNull()) && !jsonObj.get("OID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinkedGuestModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinkedGuestModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinkedGuestModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinkedGuestModel.class));

       return (TypeAdapter<T>) new TypeAdapter<LinkedGuestModel>() {
           @Override
           public void write(JsonWriter out, LinkedGuestModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinkedGuestModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LinkedGuestModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LinkedGuestModel
   * @throws IOException if the JSON string is invalid with respect to LinkedGuestModel
   */
  public static LinkedGuestModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinkedGuestModel.class);
  }

  /**
   * Convert an instance of LinkedGuestModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

