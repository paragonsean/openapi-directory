/*
 * agentOS API V3, Diary Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-diary
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DiaryAppointmentDetails;
import org.openapitools.client.model.DiaryAppointmentModel;
import org.openapitools.client.model.DiaryAppointmentModelResults;
import org.openapitools.client.model.DiaryAppointmentTypeModelResults;
import org.openapitools.client.model.DiaryBookingModel;
import org.openapitools.client.model.FeedbackSubmissionModel;
import org.openapitools.client.model.GuestDiaryParametersResultsModel;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DiaryControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DiaryControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DiaryControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for diaryControllerAddFeedback
     * @param shortName The unique client short-name (required)
     * @param feedbackSubmissionModel Feedback submission model (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerAddFeedbackCall(String shortName, FeedbackSubmissionModel feedbackSubmissionModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = feedbackSubmissionModel;

        // create path and map variables
        String localVarPath = "/v3/diary/{shortName}/appointment/feedback"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diaryControllerAddFeedbackValidateBeforeCall(String shortName, FeedbackSubmissionModel feedbackSubmissionModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling diaryControllerAddFeedback(Async)");
        }

        // verify the required parameter 'feedbackSubmissionModel' is set
        if (feedbackSubmissionModel == null) {
            throw new ApiException("Missing the required parameter 'feedbackSubmissionModel' when calling diaryControllerAddFeedback(Async)");
        }

        return diaryControllerAddFeedbackCall(shortName, feedbackSubmissionModel, _callback);

    }

    /**
     * Submit appointment feedback
     * 
     * @param shortName The unique client short-name (required)
     * @param feedbackSubmissionModel Feedback submission model (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String diaryControllerAddFeedback(String shortName, FeedbackSubmissionModel feedbackSubmissionModel) throws ApiException {
        ApiResponse<String> localVarResp = diaryControllerAddFeedbackWithHttpInfo(shortName, feedbackSubmissionModel);
        return localVarResp.getData();
    }

    /**
     * Submit appointment feedback
     * 
     * @param shortName The unique client short-name (required)
     * @param feedbackSubmissionModel Feedback submission model (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> diaryControllerAddFeedbackWithHttpInfo(String shortName, FeedbackSubmissionModel feedbackSubmissionModel) throws ApiException {
        okhttp3.Call localVarCall = diaryControllerAddFeedbackValidateBeforeCall(shortName, feedbackSubmissionModel, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit appointment feedback (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param feedbackSubmissionModel Feedback submission model (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerAddFeedbackAsync(String shortName, FeedbackSubmissionModel feedbackSubmissionModel, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = diaryControllerAddFeedbackValidateBeforeCall(shortName, feedbackSubmissionModel, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diaryControllerCancelAppointment
     * @param shortName The unique client short-name (required)
     * @param appointmentID The unique appointment id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerCancelAppointmentCall(String shortName, String appointmentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/diary/{shortName}/appointment/{appointmentID}/cancel"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()))
            .replace("{" + "appointmentID" + "}", localVarApiClient.escapeString(appointmentID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diaryControllerCancelAppointmentValidateBeforeCall(String shortName, String appointmentID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling diaryControllerCancelAppointment(Async)");
        }

        // verify the required parameter 'appointmentID' is set
        if (appointmentID == null) {
            throw new ApiException("Missing the required parameter 'appointmentID' when calling diaryControllerCancelAppointment(Async)");
        }

        return diaryControllerCancelAppointmentCall(shortName, appointmentID, _callback);

    }

    /**
     * Cancel an existing appointment using its unique identifier
     * 
     * @param shortName The unique client short-name (required)
     * @param appointmentID The unique appointment id (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String diaryControllerCancelAppointment(String shortName, String appointmentID) throws ApiException {
        ApiResponse<String> localVarResp = diaryControllerCancelAppointmentWithHttpInfo(shortName, appointmentID);
        return localVarResp.getData();
    }

    /**
     * Cancel an existing appointment using its unique identifier
     * 
     * @param shortName The unique client short-name (required)
     * @param appointmentID The unique appointment id (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> diaryControllerCancelAppointmentWithHttpInfo(String shortName, String appointmentID) throws ApiException {
        okhttp3.Call localVarCall = diaryControllerCancelAppointmentValidateBeforeCall(shortName, appointmentID, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel an existing appointment using its unique identifier (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param appointmentID The unique appointment id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerCancelAppointmentAsync(String shortName, String appointmentID, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = diaryControllerCancelAppointmentValidateBeforeCall(shortName, appointmentID, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diaryControllerDeleteAppointment
     * @param shortName The unique client short-name (required)
     * @param appointmentID The unique appointment id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerDeleteAppointmentCall(String shortName, String appointmentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/diary/{shortName}/appointment"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appointmentID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appointmentID", appointmentID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diaryControllerDeleteAppointmentValidateBeforeCall(String shortName, String appointmentID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling diaryControllerDeleteAppointment(Async)");
        }

        // verify the required parameter 'appointmentID' is set
        if (appointmentID == null) {
            throw new ApiException("Missing the required parameter 'appointmentID' when calling diaryControllerDeleteAppointment(Async)");
        }

        return diaryControllerDeleteAppointmentCall(shortName, appointmentID, _callback);

    }

    /**
     * Delete an existing appointment using its unique identifier
     * 
     * @param shortName The unique client short-name (required)
     * @param appointmentID The unique appointment id (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String diaryControllerDeleteAppointment(String shortName, String appointmentID) throws ApiException {
        ApiResponse<String> localVarResp = diaryControllerDeleteAppointmentWithHttpInfo(shortName, appointmentID);
        return localVarResp.getData();
    }

    /**
     * Delete an existing appointment using its unique identifier
     * 
     * @param shortName The unique client short-name (required)
     * @param appointmentID The unique appointment id (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> diaryControllerDeleteAppointmentWithHttpInfo(String shortName, String appointmentID) throws ApiException {
        okhttp3.Call localVarCall = diaryControllerDeleteAppointmentValidateBeforeCall(shortName, appointmentID, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing appointment using its unique identifier (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param appointmentID The unique appointment id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerDeleteAppointmentAsync(String shortName, String appointmentID, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = diaryControllerDeleteAppointmentValidateBeforeCall(shortName, appointmentID, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diaryControllerGetAllocations
     * @param shortName The unique client short-name (required)
     * @param preferredDate The date to search from (required)
     * @param appointmentType The unique appointment type identifier (required)
     * @param lettings Sales or Lettings property? (optional)
     * @param propertyIdentifier The unique property identifier (Sales or Lettings) determines branch and property type (optional)
     * @param branchID Branch ID to check appointments (required if no property submitted) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerGetAllocationsCall(String shortName, OffsetDateTime preferredDate, String appointmentType, Boolean lettings, String propertyIdentifier, String branchID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/diary/{shortName}/allocations"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (preferredDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preferredDate", preferredDate));
        }

        if (appointmentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appointmentType", appointmentType));
        }

        if (lettings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lettings", lettings));
        }

        if (propertyIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("propertyIdentifier", propertyIdentifier));
        }

        if (branchID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branchID", branchID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diaryControllerGetAllocationsValidateBeforeCall(String shortName, OffsetDateTime preferredDate, String appointmentType, Boolean lettings, String propertyIdentifier, String branchID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling diaryControllerGetAllocations(Async)");
        }

        // verify the required parameter 'preferredDate' is set
        if (preferredDate == null) {
            throw new ApiException("Missing the required parameter 'preferredDate' when calling diaryControllerGetAllocations(Async)");
        }

        // verify the required parameter 'appointmentType' is set
        if (appointmentType == null) {
            throw new ApiException("Missing the required parameter 'appointmentType' when calling diaryControllerGetAllocations(Async)");
        }

        return diaryControllerGetAllocationsCall(shortName, preferredDate, appointmentType, lettings, propertyIdentifier, branchID, _callback);

    }

    /**
     * Get a list of all available allocations for a date + 7 days for a specified appointment type
     * 
     * @param shortName The unique client short-name (required)
     * @param preferredDate The date to search from (required)
     * @param appointmentType The unique appointment type identifier (required)
     * @param lettings Sales or Lettings property? (optional)
     * @param propertyIdentifier The unique property identifier (Sales or Lettings) determines branch and property type (optional)
     * @param branchID Branch ID to check appointments (required if no property submitted) (optional)
     * @return List&lt;DiaryBookingModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<DiaryBookingModel> diaryControllerGetAllocations(String shortName, OffsetDateTime preferredDate, String appointmentType, Boolean lettings, String propertyIdentifier, String branchID) throws ApiException {
        ApiResponse<List<DiaryBookingModel>> localVarResp = diaryControllerGetAllocationsWithHttpInfo(shortName, preferredDate, appointmentType, lettings, propertyIdentifier, branchID);
        return localVarResp.getData();
    }

    /**
     * Get a list of all available allocations for a date + 7 days for a specified appointment type
     * 
     * @param shortName The unique client short-name (required)
     * @param preferredDate The date to search from (required)
     * @param appointmentType The unique appointment type identifier (required)
     * @param lettings Sales or Lettings property? (optional)
     * @param propertyIdentifier The unique property identifier (Sales or Lettings) determines branch and property type (optional)
     * @param branchID Branch ID to check appointments (required if no property submitted) (optional)
     * @return ApiResponse&lt;List&lt;DiaryBookingModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DiaryBookingModel>> diaryControllerGetAllocationsWithHttpInfo(String shortName, OffsetDateTime preferredDate, String appointmentType, Boolean lettings, String propertyIdentifier, String branchID) throws ApiException {
        okhttp3.Call localVarCall = diaryControllerGetAllocationsValidateBeforeCall(shortName, preferredDate, appointmentType, lettings, propertyIdentifier, branchID, null);
        Type localVarReturnType = new TypeToken<List<DiaryBookingModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all available allocations for a date + 7 days for a specified appointment type (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param preferredDate The date to search from (required)
     * @param appointmentType The unique appointment type identifier (required)
     * @param lettings Sales or Lettings property? (optional)
     * @param propertyIdentifier The unique property identifier (Sales or Lettings) determines branch and property type (optional)
     * @param branchID Branch ID to check appointments (required if no property submitted) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerGetAllocationsAsync(String shortName, OffsetDateTime preferredDate, String appointmentType, Boolean lettings, String propertyIdentifier, String branchID, final ApiCallback<List<DiaryBookingModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = diaryControllerGetAllocationsValidateBeforeCall(shortName, preferredDate, appointmentType, lettings, propertyIdentifier, branchID, _callback);
        Type localVarReturnType = new TypeToken<List<DiaryBookingModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diaryControllerGetAppointment
     * @param shortName Company short name (required)
     * @param appointmentID Appointment ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerGetAppointmentCall(String shortName, String appointmentID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/diary/{shortName}/appointment"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appointmentID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appointmentID", appointmentID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diaryControllerGetAppointmentValidateBeforeCall(String shortName, String appointmentID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling diaryControllerGetAppointment(Async)");
        }

        // verify the required parameter 'appointmentID' is set
        if (appointmentID == null) {
            throw new ApiException("Missing the required parameter 'appointmentID' when calling diaryControllerGetAppointment(Async)");
        }

        return diaryControllerGetAppointmentCall(shortName, appointmentID, _callback);

    }

    /**
     * Get an appointment by ID
     * 
     * @param shortName Company short name (required)
     * @param appointmentID Appointment ID (required)
     * @return DiaryAppointmentModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiaryAppointmentModel diaryControllerGetAppointment(String shortName, String appointmentID) throws ApiException {
        ApiResponse<DiaryAppointmentModel> localVarResp = diaryControllerGetAppointmentWithHttpInfo(shortName, appointmentID);
        return localVarResp.getData();
    }

    /**
     * Get an appointment by ID
     * 
     * @param shortName Company short name (required)
     * @param appointmentID Appointment ID (required)
     * @return ApiResponse&lt;DiaryAppointmentModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiaryAppointmentModel> diaryControllerGetAppointmentWithHttpInfo(String shortName, String appointmentID) throws ApiException {
        okhttp3.Call localVarCall = diaryControllerGetAppointmentValidateBeforeCall(shortName, appointmentID, null);
        Type localVarReturnType = new TypeToken<DiaryAppointmentModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an appointment by ID (asynchronously)
     * 
     * @param shortName Company short name (required)
     * @param appointmentID Appointment ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerGetAppointmentAsync(String shortName, String appointmentID, final ApiCallback<DiaryAppointmentModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = diaryControllerGetAppointmentValidateBeforeCall(shortName, appointmentID, _callback);
        Type localVarReturnType = new TypeToken<DiaryAppointmentModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diaryControllerGetAppointmentTypes
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerGetAppointmentTypesCall(String shortName, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/diary/{shortName}/appointmenttypes"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diaryControllerGetAppointmentTypesValidateBeforeCall(String shortName, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling diaryControllerGetAppointmentTypes(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling diaryControllerGetAppointmentTypes(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling diaryControllerGetAppointmentTypes(Async)");
        }

        return diaryControllerGetAppointmentTypesCall(shortName, offset, count, _callback);

    }

    /**
     * A collection of all diary appointment types
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return DiaryAppointmentTypeModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiaryAppointmentTypeModelResults diaryControllerGetAppointmentTypes(String shortName, Integer offset, Integer count) throws ApiException {
        ApiResponse<DiaryAppointmentTypeModelResults> localVarResp = diaryControllerGetAppointmentTypesWithHttpInfo(shortName, offset, count);
        return localVarResp.getData();
    }

    /**
     * A collection of all diary appointment types
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;DiaryAppointmentTypeModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiaryAppointmentTypeModelResults> diaryControllerGetAppointmentTypesWithHttpInfo(String shortName, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = diaryControllerGetAppointmentTypesValidateBeforeCall(shortName, offset, count, null);
        Type localVarReturnType = new TypeToken<DiaryAppointmentTypeModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A collection of all diary appointment types (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerGetAppointmentTypesAsync(String shortName, Integer offset, Integer count, final ApiCallback<DiaryAppointmentTypeModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = diaryControllerGetAppointmentTypesValidateBeforeCall(shortName, offset, count, _callback);
        Type localVarReturnType = new TypeToken<DiaryAppointmentTypeModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diaryControllerGetAppointmentsBetweenDates
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The search from date (required)
     * @param endDate The search to date (required)
     * @param appointmentTypesToSearch The appointment IDs to search for (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerGetAppointmentsBetweenDatesCall(String shortName, String branchID, OffsetDateTime startDate, OffsetDateTime endDate, List<String> appointmentTypesToSearch, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/diary/{shortName}/appointmentsbetweendates"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branchID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branchID", branchID));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (appointmentTypesToSearch != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "appointmentTypesToSearch", appointmentTypesToSearch));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diaryControllerGetAppointmentsBetweenDatesValidateBeforeCall(String shortName, String branchID, OffsetDateTime startDate, OffsetDateTime endDate, List<String> appointmentTypesToSearch, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling diaryControllerGetAppointmentsBetweenDates(Async)");
        }

        // verify the required parameter 'branchID' is set
        if (branchID == null) {
            throw new ApiException("Missing the required parameter 'branchID' when calling diaryControllerGetAppointmentsBetweenDates(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling diaryControllerGetAppointmentsBetweenDates(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling diaryControllerGetAppointmentsBetweenDates(Async)");
        }

        // verify the required parameter 'appointmentTypesToSearch' is set
        if (appointmentTypesToSearch == null) {
            throw new ApiException("Missing the required parameter 'appointmentTypesToSearch' when calling diaryControllerGetAppointmentsBetweenDates(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling diaryControllerGetAppointmentsBetweenDates(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling diaryControllerGetAppointmentsBetweenDates(Async)");
        }

        return diaryControllerGetAppointmentsBetweenDatesCall(shortName, branchID, startDate, endDate, appointmentTypesToSearch, offset, count, _callback);

    }

    /**
     * A collection of diary appointments linked to a company filtered between specific dates and by appointment type
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The search from date (required)
     * @param endDate The search to date (required)
     * @param appointmentTypesToSearch The appointment IDs to search for (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return DiaryAppointmentModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiaryAppointmentModelResults diaryControllerGetAppointmentsBetweenDates(String shortName, String branchID, OffsetDateTime startDate, OffsetDateTime endDate, List<String> appointmentTypesToSearch, Integer offset, Integer count) throws ApiException {
        ApiResponse<DiaryAppointmentModelResults> localVarResp = diaryControllerGetAppointmentsBetweenDatesWithHttpInfo(shortName, branchID, startDate, endDate, appointmentTypesToSearch, offset, count);
        return localVarResp.getData();
    }

    /**
     * A collection of diary appointments linked to a company filtered between specific dates and by appointment type
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The search from date (required)
     * @param endDate The search to date (required)
     * @param appointmentTypesToSearch The appointment IDs to search for (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;DiaryAppointmentModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiaryAppointmentModelResults> diaryControllerGetAppointmentsBetweenDatesWithHttpInfo(String shortName, String branchID, OffsetDateTime startDate, OffsetDateTime endDate, List<String> appointmentTypesToSearch, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = diaryControllerGetAppointmentsBetweenDatesValidateBeforeCall(shortName, branchID, startDate, endDate, appointmentTypesToSearch, offset, count, null);
        Type localVarReturnType = new TypeToken<DiaryAppointmentModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A collection of diary appointments linked to a company filtered between specific dates and by appointment type (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param startDate The search from date (required)
     * @param endDate The search to date (required)
     * @param appointmentTypesToSearch The appointment IDs to search for (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerGetAppointmentsBetweenDatesAsync(String shortName, String branchID, OffsetDateTime startDate, OffsetDateTime endDate, List<String> appointmentTypesToSearch, Integer offset, Integer count, final ApiCallback<DiaryAppointmentModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = diaryControllerGetAppointmentsBetweenDatesValidateBeforeCall(shortName, branchID, startDate, endDate, appointmentTypesToSearch, offset, count, _callback);
        Type localVarReturnType = new TypeToken<DiaryAppointmentModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diaryControllerGetRecurringAppointments
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param appointmentTypesToSearch The appointment IDs to search for (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerGetRecurringAppointmentsCall(String shortName, String branchID, List<String> appointmentTypesToSearch, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/diary/{shortName}/recurringappointment"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branchID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branchID", branchID));
        }

        if (appointmentTypesToSearch != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "appointmentTypesToSearch", appointmentTypesToSearch));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diaryControllerGetRecurringAppointmentsValidateBeforeCall(String shortName, String branchID, List<String> appointmentTypesToSearch, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling diaryControllerGetRecurringAppointments(Async)");
        }

        // verify the required parameter 'branchID' is set
        if (branchID == null) {
            throw new ApiException("Missing the required parameter 'branchID' when calling diaryControllerGetRecurringAppointments(Async)");
        }

        // verify the required parameter 'appointmentTypesToSearch' is set
        if (appointmentTypesToSearch == null) {
            throw new ApiException("Missing the required parameter 'appointmentTypesToSearch' when calling diaryControllerGetRecurringAppointments(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling diaryControllerGetRecurringAppointments(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling diaryControllerGetRecurringAppointments(Async)");
        }

        return diaryControllerGetRecurringAppointmentsCall(shortName, branchID, appointmentTypesToSearch, offset, count, _callback);

    }

    /**
     * Retrieves all recurring appointments:-
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param appointmentTypesToSearch The appointment IDs to search for (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return DiaryAppointmentModelResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiaryAppointmentModelResults diaryControllerGetRecurringAppointments(String shortName, String branchID, List<String> appointmentTypesToSearch, Integer offset, Integer count) throws ApiException {
        ApiResponse<DiaryAppointmentModelResults> localVarResp = diaryControllerGetRecurringAppointmentsWithHttpInfo(shortName, branchID, appointmentTypesToSearch, offset, count);
        return localVarResp.getData();
    }

    /**
     * Retrieves all recurring appointments:-
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param appointmentTypesToSearch The appointment IDs to search for (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @return ApiResponse&lt;DiaryAppointmentModelResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiaryAppointmentModelResults> diaryControllerGetRecurringAppointmentsWithHttpInfo(String shortName, String branchID, List<String> appointmentTypesToSearch, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = diaryControllerGetRecurringAppointmentsValidateBeforeCall(shortName, branchID, appointmentTypesToSearch, offset, count, null);
        Type localVarReturnType = new TypeToken<DiaryAppointmentModelResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves all recurring appointments:- (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param branchID The unique ID of the Branch (required)
     * @param appointmentTypesToSearch The appointment IDs to search for (required)
     * @param offset The index of the first item to return (required)
     * @param count The maximum number of items to return (up to 1000 per request) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerGetRecurringAppointmentsAsync(String shortName, String branchID, List<String> appointmentTypesToSearch, Integer offset, Integer count, final ApiCallback<DiaryAppointmentModelResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = diaryControllerGetRecurringAppointmentsValidateBeforeCall(shortName, branchID, appointmentTypesToSearch, offset, count, _callback);
        Type localVarReturnType = new TypeToken<DiaryAppointmentModelResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diaryControllerPostAppointment
     * @param shortName The unique client short-name (required)
     * @param propertyIdentifier The unique property identifier (Sales or Lettings) (required)
     * @param diaryAppointmentDetails The appointment details model (required)
     * @param lettings Sales or Lettings property? (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerPostAppointmentCall(String shortName, List<String> propertyIdentifier, DiaryAppointmentDetails diaryAppointmentDetails, Boolean lettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = diaryAppointmentDetails;

        // create path and map variables
        String localVarPath = "/v3/diary/{shortName}/appointment"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (propertyIdentifier != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyIdentifier", propertyIdentifier));
        }

        if (lettings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lettings", lettings));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diaryControllerPostAppointmentValidateBeforeCall(String shortName, List<String> propertyIdentifier, DiaryAppointmentDetails diaryAppointmentDetails, Boolean lettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling diaryControllerPostAppointment(Async)");
        }

        // verify the required parameter 'propertyIdentifier' is set
        if (propertyIdentifier == null) {
            throw new ApiException("Missing the required parameter 'propertyIdentifier' when calling diaryControllerPostAppointment(Async)");
        }

        // verify the required parameter 'diaryAppointmentDetails' is set
        if (diaryAppointmentDetails == null) {
            throw new ApiException("Missing the required parameter 'diaryAppointmentDetails' when calling diaryControllerPostAppointment(Async)");
        }

        return diaryControllerPostAppointmentCall(shortName, propertyIdentifier, diaryAppointmentDetails, lettings, _callback);

    }

    /**
     * Post an appointment into a valid diary allocation
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyIdentifier The unique property identifier (Sales or Lettings) (required)
     * @param diaryAppointmentDetails The appointment details model (required)
     * @param lettings Sales or Lettings property? (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String diaryControllerPostAppointment(String shortName, List<String> propertyIdentifier, DiaryAppointmentDetails diaryAppointmentDetails, Boolean lettings) throws ApiException {
        ApiResponse<String> localVarResp = diaryControllerPostAppointmentWithHttpInfo(shortName, propertyIdentifier, diaryAppointmentDetails, lettings);
        return localVarResp.getData();
    }

    /**
     * Post an appointment into a valid diary allocation
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyIdentifier The unique property identifier (Sales or Lettings) (required)
     * @param diaryAppointmentDetails The appointment details model (required)
     * @param lettings Sales or Lettings property? (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> diaryControllerPostAppointmentWithHttpInfo(String shortName, List<String> propertyIdentifier, DiaryAppointmentDetails diaryAppointmentDetails, Boolean lettings) throws ApiException {
        okhttp3.Call localVarCall = diaryControllerPostAppointmentValidateBeforeCall(shortName, propertyIdentifier, diaryAppointmentDetails, lettings, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Post an appointment into a valid diary allocation (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param propertyIdentifier The unique property identifier (Sales or Lettings) (required)
     * @param diaryAppointmentDetails The appointment details model (required)
     * @param lettings Sales or Lettings property? (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerPostAppointmentAsync(String shortName, List<String> propertyIdentifier, DiaryAppointmentDetails diaryAppointmentDetails, Boolean lettings, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = diaryControllerPostAppointmentValidateBeforeCall(shortName, propertyIdentifier, diaryAppointmentDetails, lettings, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diaryControllerPutAppointment
     * @param shortName The unique client short-name (required)
     * @param appointmentID The unique appointment id (required)
     * @param diaryAppointmentDetails The appointment details model (required)
     * @param lettings Sales or Lettings property? (optional)
     * @param allowMarketingCorrespondence Sales or Lettings property? (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerPutAppointmentCall(String shortName, String appointmentID, DiaryAppointmentDetails diaryAppointmentDetails, Boolean lettings, Boolean allowMarketingCorrespondence, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = diaryAppointmentDetails;

        // create path and map variables
        String localVarPath = "/v3/diary/{shortName}/appointment"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appointmentID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appointmentID", appointmentID));
        }

        if (lettings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lettings", lettings));
        }

        if (allowMarketingCorrespondence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AllowMarketingCorrespondence", allowMarketingCorrespondence));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "application/xml",
            "text/json",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diaryControllerPutAppointmentValidateBeforeCall(String shortName, String appointmentID, DiaryAppointmentDetails diaryAppointmentDetails, Boolean lettings, Boolean allowMarketingCorrespondence, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling diaryControllerPutAppointment(Async)");
        }

        // verify the required parameter 'appointmentID' is set
        if (appointmentID == null) {
            throw new ApiException("Missing the required parameter 'appointmentID' when calling diaryControllerPutAppointment(Async)");
        }

        // verify the required parameter 'diaryAppointmentDetails' is set
        if (diaryAppointmentDetails == null) {
            throw new ApiException("Missing the required parameter 'diaryAppointmentDetails' when calling diaryControllerPutAppointment(Async)");
        }

        return diaryControllerPutAppointmentCall(shortName, appointmentID, diaryAppointmentDetails, lettings, allowMarketingCorrespondence, _callback);

    }

    /**
     * Update an existing appointment using its unique identifier
     * 
     * @param shortName The unique client short-name (required)
     * @param appointmentID The unique appointment id (required)
     * @param diaryAppointmentDetails The appointment details model (required)
     * @param lettings Sales or Lettings property? (optional)
     * @param allowMarketingCorrespondence Sales or Lettings property? (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String diaryControllerPutAppointment(String shortName, String appointmentID, DiaryAppointmentDetails diaryAppointmentDetails, Boolean lettings, Boolean allowMarketingCorrespondence) throws ApiException {
        ApiResponse<String> localVarResp = diaryControllerPutAppointmentWithHttpInfo(shortName, appointmentID, diaryAppointmentDetails, lettings, allowMarketingCorrespondence);
        return localVarResp.getData();
    }

    /**
     * Update an existing appointment using its unique identifier
     * 
     * @param shortName The unique client short-name (required)
     * @param appointmentID The unique appointment id (required)
     * @param diaryAppointmentDetails The appointment details model (required)
     * @param lettings Sales or Lettings property? (optional)
     * @param allowMarketingCorrespondence Sales or Lettings property? (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> diaryControllerPutAppointmentWithHttpInfo(String shortName, String appointmentID, DiaryAppointmentDetails diaryAppointmentDetails, Boolean lettings, Boolean allowMarketingCorrespondence) throws ApiException {
        okhttp3.Call localVarCall = diaryControllerPutAppointmentValidateBeforeCall(shortName, appointmentID, diaryAppointmentDetails, lettings, allowMarketingCorrespondence, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing appointment using its unique identifier (asynchronously)
     * 
     * @param shortName The unique client short-name (required)
     * @param appointmentID The unique appointment id (required)
     * @param diaryAppointmentDetails The appointment details model (required)
     * @param lettings Sales or Lettings property? (optional)
     * @param allowMarketingCorrespondence Sales or Lettings property? (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerPutAppointmentAsync(String shortName, String appointmentID, DiaryAppointmentDetails diaryAppointmentDetails, Boolean lettings, Boolean allowMarketingCorrespondence, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = diaryControllerPutAppointmentValidateBeforeCall(shortName, appointmentID, diaryAppointmentDetails, lettings, allowMarketingCorrespondence, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diaryControllerSearchGuest
     * @param shortname  (required)
     * @param branchID  (required)
     * @param forename  (required)
     * @param emailaddress  (required)
     * @param surname  (required)
     * @param offset  (required)
     * @param count  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerSearchGuestCall(String shortname, String branchID, String forename, String emailaddress, String surname, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/diary/{shortname}/{branchID}/guest/search"
            .replace("{" + "shortname" + "}", localVarApiClient.escapeString(shortname.toString()))
            .replace("{" + "branchID" + "}", localVarApiClient.escapeString(branchID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forename", forename));
        }

        if (emailaddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailaddress", emailaddress));
        }

        if (surname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("surname", surname));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diaryControllerSearchGuestValidateBeforeCall(String shortname, String branchID, String forename, String emailaddress, String surname, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortname' is set
        if (shortname == null) {
            throw new ApiException("Missing the required parameter 'shortname' when calling diaryControllerSearchGuest(Async)");
        }

        // verify the required parameter 'branchID' is set
        if (branchID == null) {
            throw new ApiException("Missing the required parameter 'branchID' when calling diaryControllerSearchGuest(Async)");
        }

        // verify the required parameter 'forename' is set
        if (forename == null) {
            throw new ApiException("Missing the required parameter 'forename' when calling diaryControllerSearchGuest(Async)");
        }

        // verify the required parameter 'emailaddress' is set
        if (emailaddress == null) {
            throw new ApiException("Missing the required parameter 'emailaddress' when calling diaryControllerSearchGuest(Async)");
        }

        // verify the required parameter 'surname' is set
        if (surname == null) {
            throw new ApiException("Missing the required parameter 'surname' when calling diaryControllerSearchGuest(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling diaryControllerSearchGuest(Async)");
        }

        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling diaryControllerSearchGuest(Async)");
        }

        return diaryControllerSearchGuestCall(shortname, branchID, forename, emailaddress, surname, offset, count, _callback);

    }

    /**
     * Match Guest Parameters with existing applicants
     * 
     * @param shortname  (required)
     * @param branchID  (required)
     * @param forename  (required)
     * @param emailaddress  (required)
     * @param surname  (required)
     * @param offset  (required)
     * @param count  (required)
     * @return GuestDiaryParametersResultsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GuestDiaryParametersResultsModel diaryControllerSearchGuest(String shortname, String branchID, String forename, String emailaddress, String surname, Integer offset, Integer count) throws ApiException {
        ApiResponse<GuestDiaryParametersResultsModel> localVarResp = diaryControllerSearchGuestWithHttpInfo(shortname, branchID, forename, emailaddress, surname, offset, count);
        return localVarResp.getData();
    }

    /**
     * Match Guest Parameters with existing applicants
     * 
     * @param shortname  (required)
     * @param branchID  (required)
     * @param forename  (required)
     * @param emailaddress  (required)
     * @param surname  (required)
     * @param offset  (required)
     * @param count  (required)
     * @return ApiResponse&lt;GuestDiaryParametersResultsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GuestDiaryParametersResultsModel> diaryControllerSearchGuestWithHttpInfo(String shortname, String branchID, String forename, String emailaddress, String surname, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = diaryControllerSearchGuestValidateBeforeCall(shortname, branchID, forename, emailaddress, surname, offset, count, null);
        Type localVarReturnType = new TypeToken<GuestDiaryParametersResultsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Match Guest Parameters with existing applicants (asynchronously)
     * 
     * @param shortname  (required)
     * @param branchID  (required)
     * @param forename  (required)
     * @param emailaddress  (required)
     * @param surname  (required)
     * @param offset  (required)
     * @param count  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diaryControllerSearchGuestAsync(String shortname, String branchID, String forename, String emailaddress, String surname, Integer offset, Integer count, final ApiCallback<GuestDiaryParametersResultsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = diaryControllerSearchGuestValidateBeforeCall(shortname, branchID, forename, emailaddress, surname, offset, count, _callback);
        Type localVarReturnType = new TypeToken<GuestDiaryParametersResultsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
