/*
 * agentOS API V3, Diary Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-diary
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LinkedTenantModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Holds information on the most recent tenancy linked to the property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:15.032289-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LatestTenancyModel {
  public static final String SERIALIZED_NAME_ACCESS_ARRANGEMENTS = "AccessArrangements";
  @SerializedName(SERIALIZED_NAME_ACCESS_ARRANGEMENTS)
  private String accessArrangements;

  public static final String SERIALIZED_NAME_ACCESS_MOBILE1 = "AccessMobile1";
  @SerializedName(SERIALIZED_NAME_ACCESS_MOBILE1)
  private String accessMobile1;

  public static final String SERIALIZED_NAME_ACCESS_MOBILE2 = "AccessMobile2";
  @SerializedName(SERIALIZED_NAME_ACCESS_MOBILE2)
  private String accessMobile2;

  public static final String SERIALIZED_NAME_ACCESS_MOBILE3 = "AccessMobile3";
  @SerializedName(SERIALIZED_NAME_ACCESS_MOBILE3)
  private String accessMobile3;

  public static final String SERIALIZED_NAME_ACCESS_NAME1 = "AccessName1";
  @SerializedName(SERIALIZED_NAME_ACCESS_NAME1)
  private String accessName1;

  public static final String SERIALIZED_NAME_ACCESS_NAME2 = "AccessName2";
  @SerializedName(SERIALIZED_NAME_ACCESS_NAME2)
  private String accessName2;

  public static final String SERIALIZED_NAME_ACCESS_NAME3 = "AccessName3";
  @SerializedName(SERIALIZED_NAME_ACCESS_NAME3)
  private String accessName3;

  public static final String SERIALIZED_NAME_ETAG = "ETag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_FIXED_DATE = "FixedDate";
  @SerializedName(SERIALIZED_NAME_FIXED_DATE)
  private OffsetDateTime fixedDate;

  public static final String SERIALIZED_NAME_GLOBAL_REFERENCE = "GlobalReference";
  @SerializedName(SERIALIZED_NAME_GLOBAL_REFERENCE)
  private String globalReference;

  public static final String SERIALIZED_NAME_IS_TENANCY_ENDED = "IsTenancyEnded";
  @SerializedName(SERIALIZED_NAME_IS_TENANCY_ENDED)
  private Boolean isTenancyEnded;

  public static final String SERIALIZED_NAME_IS_TENANCY_PROPOSED = "IsTenancyProposed";
  @SerializedName(SERIALIZED_NAME_IS_TENANCY_PROPOSED)
  private Boolean isTenancyProposed;

  public static final String SERIALIZED_NAME_IS_TENANCY_SIGNED = "IsTenancySigned";
  @SerializedName(SERIALIZED_NAME_IS_TENANCY_SIGNED)
  private Boolean isTenancySigned;

  public static final String SERIALIZED_NAME_LINKED_TENANTS = "LinkedTenants";
  @SerializedName(SERIALIZED_NAME_LINKED_TENANTS)
  private List<LinkedTenantModel> linkedTenants = new ArrayList<>();

  public static final String SERIALIZED_NAME_O_I_D = "OID";
  @SerializedName(SERIALIZED_NAME_O_I_D)
  private String OID;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public LatestTenancyModel() {
  }

  public LatestTenancyModel(
     String accessArrangements, 
     String accessMobile1, 
     String accessMobile2, 
     String accessMobile3, 
     String accessName1, 
     String accessName2, 
     String accessName3
  ) {
    this();
    this.accessArrangements = accessArrangements;
    this.accessMobile1 = accessMobile1;
    this.accessMobile2 = accessMobile2;
    this.accessMobile3 = accessMobile3;
    this.accessName1 = accessName1;
    this.accessName2 = accessName2;
    this.accessName3 = accessName3;
  }

  /**
   * Access Arrangements
   * @return accessArrangements
   */
  @javax.annotation.Nullable
  public String getAccessArrangements() {
    return accessArrangements;
  }



  /**
   * Arrange access Mobile 1
   * @return accessMobile1
   */
  @javax.annotation.Nullable
  public String getAccessMobile1() {
    return accessMobile1;
  }



  /**
   * Arrange access Mobile 2
   * @return accessMobile2
   */
  @javax.annotation.Nullable
  public String getAccessMobile2() {
    return accessMobile2;
  }



  /**
   * Arrange access Mobile 3
   * @return accessMobile3
   */
  @javax.annotation.Nullable
  public String getAccessMobile3() {
    return accessMobile3;
  }



  /**
   * Arrange access contact name 1
   * @return accessName1
   */
  @javax.annotation.Nullable
  public String getAccessName1() {
    return accessName1;
  }



  /**
   * Arrange access contact name 2
   * @return accessName2
   */
  @javax.annotation.Nullable
  public String getAccessName2() {
    return accessName2;
  }



  /**
   * Arrange access contact name 3
   * @return accessName3
   */
  @javax.annotation.Nullable
  public String getAccessName3() {
    return accessName3;
  }



  public LatestTenancyModel etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * ETag
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public LatestTenancyModel endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The end date of the Tenancy
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public LatestTenancyModel fixedDate(OffsetDateTime fixedDate) {
    this.fixedDate = fixedDate;
    return this;
  }

  /**
   * The fixed date of the Tenancy
   * @return fixedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFixedDate() {
    return fixedDate;
  }

  public void setFixedDate(OffsetDateTime fixedDate) {
    this.fixedDate = fixedDate;
  }


  public LatestTenancyModel globalReference(String globalReference) {
    this.globalReference = globalReference;
    return this;
  }

  /**
   * The unique global reference of the Tenancy
   * @return globalReference
   */
  @javax.annotation.Nullable
  public String getGlobalReference() {
    return globalReference;
  }

  public void setGlobalReference(String globalReference) {
    this.globalReference = globalReference;
  }


  public LatestTenancyModel isTenancyEnded(Boolean isTenancyEnded) {
    this.isTenancyEnded = isTenancyEnded;
    return this;
  }

  /**
   * Has the Tenancy ended?
   * @return isTenancyEnded
   */
  @javax.annotation.Nullable
  public Boolean getIsTenancyEnded() {
    return isTenancyEnded;
  }

  public void setIsTenancyEnded(Boolean isTenancyEnded) {
    this.isTenancyEnded = isTenancyEnded;
  }


  public LatestTenancyModel isTenancyProposed(Boolean isTenancyProposed) {
    this.isTenancyProposed = isTenancyProposed;
    return this;
  }

  /**
   * Is the tenancy Proposed?
   * @return isTenancyProposed
   */
  @javax.annotation.Nullable
  public Boolean getIsTenancyProposed() {
    return isTenancyProposed;
  }

  public void setIsTenancyProposed(Boolean isTenancyProposed) {
    this.isTenancyProposed = isTenancyProposed;
  }


  public LatestTenancyModel isTenancySigned(Boolean isTenancySigned) {
    this.isTenancySigned = isTenancySigned;
    return this;
  }

  /**
   * Is the tenancy signed?
   * @return isTenancySigned
   */
  @javax.annotation.Nullable
  public Boolean getIsTenancySigned() {
    return isTenancySigned;
  }

  public void setIsTenancySigned(Boolean isTenancySigned) {
    this.isTenancySigned = isTenancySigned;
  }


  public LatestTenancyModel linkedTenants(List<LinkedTenantModel> linkedTenants) {
    this.linkedTenants = linkedTenants;
    return this;
  }

  public LatestTenancyModel addLinkedTenantsItem(LinkedTenantModel linkedTenantsItem) {
    if (this.linkedTenants == null) {
      this.linkedTenants = new ArrayList<>();
    }
    this.linkedTenants.add(linkedTenantsItem);
    return this;
  }

  /**
   * A collection of tenants linked to the tenancy:-
   * @return linkedTenants
   */
  @javax.annotation.Nullable
  public List<LinkedTenantModel> getLinkedTenants() {
    return linkedTenants;
  }

  public void setLinkedTenants(List<LinkedTenantModel> linkedTenants) {
    this.linkedTenants = linkedTenants;
  }


  public LatestTenancyModel OID(String OID) {
    this.OID = OID;
    return this;
  }

  /**
   * OID
   * @return OID
   */
  @javax.annotation.Nullable
  public String getOID() {
    return OID;
  }

  public void setOID(String OID) {
    this.OID = OID;
  }


  public LatestTenancyModel startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The start date of the Tenancy
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LatestTenancyModel latestTenancyModel = (LatestTenancyModel) o;
    return Objects.equals(this.accessArrangements, latestTenancyModel.accessArrangements) &&
        Objects.equals(this.accessMobile1, latestTenancyModel.accessMobile1) &&
        Objects.equals(this.accessMobile2, latestTenancyModel.accessMobile2) &&
        Objects.equals(this.accessMobile3, latestTenancyModel.accessMobile3) &&
        Objects.equals(this.accessName1, latestTenancyModel.accessName1) &&
        Objects.equals(this.accessName2, latestTenancyModel.accessName2) &&
        Objects.equals(this.accessName3, latestTenancyModel.accessName3) &&
        Objects.equals(this.etag, latestTenancyModel.etag) &&
        Objects.equals(this.endDate, latestTenancyModel.endDate) &&
        Objects.equals(this.fixedDate, latestTenancyModel.fixedDate) &&
        Objects.equals(this.globalReference, latestTenancyModel.globalReference) &&
        Objects.equals(this.isTenancyEnded, latestTenancyModel.isTenancyEnded) &&
        Objects.equals(this.isTenancyProposed, latestTenancyModel.isTenancyProposed) &&
        Objects.equals(this.isTenancySigned, latestTenancyModel.isTenancySigned) &&
        Objects.equals(this.linkedTenants, latestTenancyModel.linkedTenants) &&
        Objects.equals(this.OID, latestTenancyModel.OID) &&
        Objects.equals(this.startDate, latestTenancyModel.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessArrangements, accessMobile1, accessMobile2, accessMobile3, accessName1, accessName2, accessName3, etag, endDate, fixedDate, globalReference, isTenancyEnded, isTenancyProposed, isTenancySigned, linkedTenants, OID, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LatestTenancyModel {\n");
    sb.append("    accessArrangements: ").append(toIndentedString(accessArrangements)).append("\n");
    sb.append("    accessMobile1: ").append(toIndentedString(accessMobile1)).append("\n");
    sb.append("    accessMobile2: ").append(toIndentedString(accessMobile2)).append("\n");
    sb.append("    accessMobile3: ").append(toIndentedString(accessMobile3)).append("\n");
    sb.append("    accessName1: ").append(toIndentedString(accessName1)).append("\n");
    sb.append("    accessName2: ").append(toIndentedString(accessName2)).append("\n");
    sb.append("    accessName3: ").append(toIndentedString(accessName3)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    fixedDate: ").append(toIndentedString(fixedDate)).append("\n");
    sb.append("    globalReference: ").append(toIndentedString(globalReference)).append("\n");
    sb.append("    isTenancyEnded: ").append(toIndentedString(isTenancyEnded)).append("\n");
    sb.append("    isTenancyProposed: ").append(toIndentedString(isTenancyProposed)).append("\n");
    sb.append("    isTenancySigned: ").append(toIndentedString(isTenancySigned)).append("\n");
    sb.append("    linkedTenants: ").append(toIndentedString(linkedTenants)).append("\n");
    sb.append("    OID: ").append(toIndentedString(OID)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccessArrangements");
    openapiFields.add("AccessMobile1");
    openapiFields.add("AccessMobile2");
    openapiFields.add("AccessMobile3");
    openapiFields.add("AccessName1");
    openapiFields.add("AccessName2");
    openapiFields.add("AccessName3");
    openapiFields.add("ETag");
    openapiFields.add("EndDate");
    openapiFields.add("FixedDate");
    openapiFields.add("GlobalReference");
    openapiFields.add("IsTenancyEnded");
    openapiFields.add("IsTenancyProposed");
    openapiFields.add("IsTenancySigned");
    openapiFields.add("LinkedTenants");
    openapiFields.add("OID");
    openapiFields.add("StartDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LatestTenancyModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LatestTenancyModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LatestTenancyModel is not found in the empty JSON string", LatestTenancyModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LatestTenancyModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LatestTenancyModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccessArrangements") != null && !jsonObj.get("AccessArrangements").isJsonNull()) && !jsonObj.get("AccessArrangements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccessArrangements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccessArrangements").toString()));
      }
      if ((jsonObj.get("AccessMobile1") != null && !jsonObj.get("AccessMobile1").isJsonNull()) && !jsonObj.get("AccessMobile1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccessMobile1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccessMobile1").toString()));
      }
      if ((jsonObj.get("AccessMobile2") != null && !jsonObj.get("AccessMobile2").isJsonNull()) && !jsonObj.get("AccessMobile2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccessMobile2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccessMobile2").toString()));
      }
      if ((jsonObj.get("AccessMobile3") != null && !jsonObj.get("AccessMobile3").isJsonNull()) && !jsonObj.get("AccessMobile3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccessMobile3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccessMobile3").toString()));
      }
      if ((jsonObj.get("AccessName1") != null && !jsonObj.get("AccessName1").isJsonNull()) && !jsonObj.get("AccessName1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccessName1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccessName1").toString()));
      }
      if ((jsonObj.get("AccessName2") != null && !jsonObj.get("AccessName2").isJsonNull()) && !jsonObj.get("AccessName2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccessName2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccessName2").toString()));
      }
      if ((jsonObj.get("AccessName3") != null && !jsonObj.get("AccessName3").isJsonNull()) && !jsonObj.get("AccessName3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccessName3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccessName3").toString()));
      }
      if ((jsonObj.get("ETag") != null && !jsonObj.get("ETag").isJsonNull()) && !jsonObj.get("ETag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ETag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ETag").toString()));
      }
      if ((jsonObj.get("GlobalReference") != null && !jsonObj.get("GlobalReference").isJsonNull()) && !jsonObj.get("GlobalReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GlobalReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GlobalReference").toString()));
      }
      if (jsonObj.get("LinkedTenants") != null && !jsonObj.get("LinkedTenants").isJsonNull()) {
        JsonArray jsonArraylinkedTenants = jsonObj.getAsJsonArray("LinkedTenants");
        if (jsonArraylinkedTenants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LinkedTenants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LinkedTenants` to be an array in the JSON string but got `%s`", jsonObj.get("LinkedTenants").toString()));
          }

          // validate the optional field `LinkedTenants` (array)
          for (int i = 0; i < jsonArraylinkedTenants.size(); i++) {
            LinkedTenantModel.validateJsonElement(jsonArraylinkedTenants.get(i));
          };
        }
      }
      if ((jsonObj.get("OID") != null && !jsonObj.get("OID").isJsonNull()) && !jsonObj.get("OID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LatestTenancyModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LatestTenancyModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LatestTenancyModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LatestTenancyModel.class));

       return (TypeAdapter<T>) new TypeAdapter<LatestTenancyModel>() {
           @Override
           public void write(JsonWriter out, LatestTenancyModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LatestTenancyModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LatestTenancyModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LatestTenancyModel
   * @throws IOException if the JSON string is invalid with respect to LatestTenancyModel
   */
  public static LatestTenancyModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LatestTenancyModel.class);
  }

  /**
   * Convert an instance of LatestTenancyModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

