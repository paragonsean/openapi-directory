/**
 * agentOS API V3, Diary Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-diary
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiaryBookingModel from './DiaryBookingModel';
import DiaryGuestDetails from './DiaryGuestDetails';

/**
 * The DiaryAppointmentDetails model module.
 * @module model/DiaryAppointmentDetails
 * @version v3-diary
 */
class DiaryAppointmentDetails {
    /**
     * Constructs a new <code>DiaryAppointmentDetails</code>.
     * Submission Model - Structure to submit the appointment details
     * @alias module:model/DiaryAppointmentDetails
     */
    constructor() { 
        
        DiaryAppointmentDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiaryAppointmentDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiaryAppointmentDetails} obj Optional instance to populate.
     * @return {module:model/DiaryAppointmentDetails} The populated <code>DiaryAppointmentDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiaryAppointmentDetails();

            if (data.hasOwnProperty('AllocationDetails')) {
                obj['AllocationDetails'] = DiaryBookingModel.constructFromObject(data['AllocationDetails']);
            }
            if (data.hasOwnProperty('AppointmentType')) {
                obj['AppointmentType'] = ApiClient.convertToType(data['AppointmentType'], 'String');
            }
            if (data.hasOwnProperty('ExtraComments')) {
                obj['ExtraComments'] = ApiClient.convertToType(data['ExtraComments'], 'String');
            }
            if (data.hasOwnProperty('Guests')) {
                obj['Guests'] = ApiClient.convertToType(data['Guests'], [DiaryGuestDetails]);
            }
            if (data.hasOwnProperty('Subject')) {
                obj['Subject'] = ApiClient.convertToType(data['Subject'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiaryAppointmentDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiaryAppointmentDetails</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AllocationDetails`
        if (data['AllocationDetails']) { // data not null
          DiaryBookingModel.validateJSON(data['AllocationDetails']);
        }
        // ensure the json data is a string
        if (data['AppointmentType'] && !(typeof data['AppointmentType'] === 'string' || data['AppointmentType'] instanceof String)) {
            throw new Error("Expected the field `AppointmentType` to be a primitive type in the JSON string but got " + data['AppointmentType']);
        }
        // ensure the json data is a string
        if (data['ExtraComments'] && !(typeof data['ExtraComments'] === 'string' || data['ExtraComments'] instanceof String)) {
            throw new Error("Expected the field `ExtraComments` to be a primitive type in the JSON string but got " + data['ExtraComments']);
        }
        if (data['Guests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Guests'])) {
                throw new Error("Expected the field `Guests` to be an array in the JSON data but got " + data['Guests']);
            }
            // validate the optional field `Guests` (array)
            for (const item of data['Guests']) {
                DiaryGuestDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Subject'] && !(typeof data['Subject'] === 'string' || data['Subject'] instanceof String)) {
            throw new Error("Expected the field `Subject` to be a primitive type in the JSON string but got " + data['Subject']);
        }

        return true;
    }


}



/**
 * @member {module:model/DiaryBookingModel} AllocationDetails
 */
DiaryAppointmentDetails.prototype['AllocationDetails'] = undefined;

/**
 * The Appointment Type ID
 * @member {String} AppointmentType
 */
DiaryAppointmentDetails.prototype['AppointmentType'] = undefined;

/**
 * Additional appointment comments
 * @member {String} ExtraComments
 */
DiaryAppointmentDetails.prototype['ExtraComments'] = undefined;

/**
 * A collection of guests linked to the appointment. If none leave empty
 * @member {Array.<module:model/DiaryGuestDetails>} Guests
 */
DiaryAppointmentDetails.prototype['Guests'] = undefined;

/**
 * The subject of the appointment
 * @member {String} Subject
 */
DiaryAppointmentDetails.prototype['Subject'] = undefined;






export default DiaryAppointmentDetails;

