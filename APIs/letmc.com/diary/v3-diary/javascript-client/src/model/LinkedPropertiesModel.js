/**
 * agentOS API V3, Diary Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-diary
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LatestTenancyModel from './LatestTenancyModel';
import LinkedLandlordModel from './LinkedLandlordModel';

/**
 * The LinkedPropertiesModel model module.
 * @module model/LinkedPropertiesModel
 * @version v3-diary
 */
class LinkedPropertiesModel {
    /**
     * Constructs a new <code>LinkedPropertiesModel</code>.
     * Holds information on linked properties
     * @alias module:model/LinkedPropertiesModel
     */
    constructor() { 
        
        LinkedPropertiesModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LinkedPropertiesModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinkedPropertiesModel} obj Optional instance to populate.
     * @return {module:model/LinkedPropertiesModel} The populated <code>LinkedPropertiesModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinkedPropertiesModel();

            if (data.hasOwnProperty('Address1')) {
                obj['Address1'] = ApiClient.convertToType(data['Address1'], 'String');
            }
            if (data.hasOwnProperty('Address2')) {
                obj['Address2'] = ApiClient.convertToType(data['Address2'], 'String');
            }
            if (data.hasOwnProperty('Address3')) {
                obj['Address3'] = ApiClient.convertToType(data['Address3'], 'String');
            }
            if (data.hasOwnProperty('Address4')) {
                obj['Address4'] = ApiClient.convertToType(data['Address4'], 'String');
            }
            if (data.hasOwnProperty('AddressFlatRoomNumber')) {
                obj['AddressFlatRoomNumber'] = ApiClient.convertToType(data['AddressFlatRoomNumber'], 'String');
            }
            if (data.hasOwnProperty('AddressNumber')) {
                obj['AddressNumber'] = ApiClient.convertToType(data['AddressNumber'], 'String');
            }
            if (data.hasOwnProperty('ETag')) {
                obj['ETag'] = ApiClient.convertToType(data['ETag'], 'String');
            }
            if (data.hasOwnProperty('LatestTenancy')) {
                obj['LatestTenancy'] = LatestTenancyModel.constructFromObject(data['LatestTenancy']);
            }
            if (data.hasOwnProperty('MainLandlord')) {
                obj['MainLandlord'] = LinkedLandlordModel.constructFromObject(data['MainLandlord']);
            }
            if (data.hasOwnProperty('OID')) {
                obj['OID'] = ApiClient.convertToType(data['OID'], 'String');
            }
            if (data.hasOwnProperty('Postcode')) {
                obj['Postcode'] = ApiClient.convertToType(data['Postcode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinkedPropertiesModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinkedPropertiesModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Address1'] && !(typeof data['Address1'] === 'string' || data['Address1'] instanceof String)) {
            throw new Error("Expected the field `Address1` to be a primitive type in the JSON string but got " + data['Address1']);
        }
        // ensure the json data is a string
        if (data['Address2'] && !(typeof data['Address2'] === 'string' || data['Address2'] instanceof String)) {
            throw new Error("Expected the field `Address2` to be a primitive type in the JSON string but got " + data['Address2']);
        }
        // ensure the json data is a string
        if (data['Address3'] && !(typeof data['Address3'] === 'string' || data['Address3'] instanceof String)) {
            throw new Error("Expected the field `Address3` to be a primitive type in the JSON string but got " + data['Address3']);
        }
        // ensure the json data is a string
        if (data['Address4'] && !(typeof data['Address4'] === 'string' || data['Address4'] instanceof String)) {
            throw new Error("Expected the field `Address4` to be a primitive type in the JSON string but got " + data['Address4']);
        }
        // ensure the json data is a string
        if (data['AddressFlatRoomNumber'] && !(typeof data['AddressFlatRoomNumber'] === 'string' || data['AddressFlatRoomNumber'] instanceof String)) {
            throw new Error("Expected the field `AddressFlatRoomNumber` to be a primitive type in the JSON string but got " + data['AddressFlatRoomNumber']);
        }
        // ensure the json data is a string
        if (data['AddressNumber'] && !(typeof data['AddressNumber'] === 'string' || data['AddressNumber'] instanceof String)) {
            throw new Error("Expected the field `AddressNumber` to be a primitive type in the JSON string but got " + data['AddressNumber']);
        }
        // ensure the json data is a string
        if (data['ETag'] && !(typeof data['ETag'] === 'string' || data['ETag'] instanceof String)) {
            throw new Error("Expected the field `ETag` to be a primitive type in the JSON string but got " + data['ETag']);
        }
        // validate the optional field `LatestTenancy`
        if (data['LatestTenancy']) { // data not null
          LatestTenancyModel.validateJSON(data['LatestTenancy']);
        }
        // validate the optional field `MainLandlord`
        if (data['MainLandlord']) { // data not null
          LinkedLandlordModel.validateJSON(data['MainLandlord']);
        }
        // ensure the json data is a string
        if (data['OID'] && !(typeof data['OID'] === 'string' || data['OID'] instanceof String)) {
            throw new Error("Expected the field `OID` to be a primitive type in the JSON string but got " + data['OID']);
        }
        // ensure the json data is a string
        if (data['Postcode'] && !(typeof data['Postcode'] === 'string' || data['Postcode'] instanceof String)) {
            throw new Error("Expected the field `Postcode` to be a primitive type in the JSON string but got " + data['Postcode']);
        }

        return true;
    }


}



/**
 * Address 1
 * @member {String} Address1
 */
LinkedPropertiesModel.prototype['Address1'] = undefined;

/**
 * Address2
 * @member {String} Address2
 */
LinkedPropertiesModel.prototype['Address2'] = undefined;

/**
 * Address 3
 * @member {String} Address3
 */
LinkedPropertiesModel.prototype['Address3'] = undefined;

/**
 * Address 4
 * @member {String} Address4
 */
LinkedPropertiesModel.prototype['Address4'] = undefined;

/**
 * Address Flat Room Number
 * @member {String} AddressFlatRoomNumber
 */
LinkedPropertiesModel.prototype['AddressFlatRoomNumber'] = undefined;

/**
 * Address Number
 * @member {String} AddressNumber
 */
LinkedPropertiesModel.prototype['AddressNumber'] = undefined;

/**
 * ETag
 * @member {String} ETag
 */
LinkedPropertiesModel.prototype['ETag'] = undefined;

/**
 * @member {module:model/LatestTenancyModel} LatestTenancy
 */
LinkedPropertiesModel.prototype['LatestTenancy'] = undefined;

/**
 * @member {module:model/LinkedLandlordModel} MainLandlord
 */
LinkedPropertiesModel.prototype['MainLandlord'] = undefined;

/**
 * OID
 * @member {String} OID
 */
LinkedPropertiesModel.prototype['OID'] = undefined;

/**
 * Postcode
 * @member {String} Postcode
 */
LinkedPropertiesModel.prototype['Postcode'] = undefined;






export default LinkedPropertiesModel;

