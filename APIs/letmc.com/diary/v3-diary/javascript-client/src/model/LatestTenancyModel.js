/**
 * agentOS API V3, Diary Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-diary
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LinkedTenantModel from './LinkedTenantModel';

/**
 * The LatestTenancyModel model module.
 * @module model/LatestTenancyModel
 * @version v3-diary
 */
class LatestTenancyModel {
    /**
     * Constructs a new <code>LatestTenancyModel</code>.
     * Holds information on the most recent tenancy linked to the property.
     * @alias module:model/LatestTenancyModel
     */
    constructor() { 
        
        LatestTenancyModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LatestTenancyModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LatestTenancyModel} obj Optional instance to populate.
     * @return {module:model/LatestTenancyModel} The populated <code>LatestTenancyModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LatestTenancyModel();

            if (data.hasOwnProperty('AccessArrangements')) {
                obj['AccessArrangements'] = ApiClient.convertToType(data['AccessArrangements'], 'String');
            }
            if (data.hasOwnProperty('AccessMobile1')) {
                obj['AccessMobile1'] = ApiClient.convertToType(data['AccessMobile1'], 'String');
            }
            if (data.hasOwnProperty('AccessMobile2')) {
                obj['AccessMobile2'] = ApiClient.convertToType(data['AccessMobile2'], 'String');
            }
            if (data.hasOwnProperty('AccessMobile3')) {
                obj['AccessMobile3'] = ApiClient.convertToType(data['AccessMobile3'], 'String');
            }
            if (data.hasOwnProperty('AccessName1')) {
                obj['AccessName1'] = ApiClient.convertToType(data['AccessName1'], 'String');
            }
            if (data.hasOwnProperty('AccessName2')) {
                obj['AccessName2'] = ApiClient.convertToType(data['AccessName2'], 'String');
            }
            if (data.hasOwnProperty('AccessName3')) {
                obj['AccessName3'] = ApiClient.convertToType(data['AccessName3'], 'String');
            }
            if (data.hasOwnProperty('ETag')) {
                obj['ETag'] = ApiClient.convertToType(data['ETag'], 'String');
            }
            if (data.hasOwnProperty('EndDate')) {
                obj['EndDate'] = ApiClient.convertToType(data['EndDate'], 'Date');
            }
            if (data.hasOwnProperty('FixedDate')) {
                obj['FixedDate'] = ApiClient.convertToType(data['FixedDate'], 'Date');
            }
            if (data.hasOwnProperty('GlobalReference')) {
                obj['GlobalReference'] = ApiClient.convertToType(data['GlobalReference'], 'String');
            }
            if (data.hasOwnProperty('IsTenancyEnded')) {
                obj['IsTenancyEnded'] = ApiClient.convertToType(data['IsTenancyEnded'], 'Boolean');
            }
            if (data.hasOwnProperty('IsTenancyProposed')) {
                obj['IsTenancyProposed'] = ApiClient.convertToType(data['IsTenancyProposed'], 'Boolean');
            }
            if (data.hasOwnProperty('IsTenancySigned')) {
                obj['IsTenancySigned'] = ApiClient.convertToType(data['IsTenancySigned'], 'Boolean');
            }
            if (data.hasOwnProperty('LinkedTenants')) {
                obj['LinkedTenants'] = ApiClient.convertToType(data['LinkedTenants'], [LinkedTenantModel]);
            }
            if (data.hasOwnProperty('OID')) {
                obj['OID'] = ApiClient.convertToType(data['OID'], 'String');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LatestTenancyModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LatestTenancyModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AccessArrangements'] && !(typeof data['AccessArrangements'] === 'string' || data['AccessArrangements'] instanceof String)) {
            throw new Error("Expected the field `AccessArrangements` to be a primitive type in the JSON string but got " + data['AccessArrangements']);
        }
        // ensure the json data is a string
        if (data['AccessMobile1'] && !(typeof data['AccessMobile1'] === 'string' || data['AccessMobile1'] instanceof String)) {
            throw new Error("Expected the field `AccessMobile1` to be a primitive type in the JSON string but got " + data['AccessMobile1']);
        }
        // ensure the json data is a string
        if (data['AccessMobile2'] && !(typeof data['AccessMobile2'] === 'string' || data['AccessMobile2'] instanceof String)) {
            throw new Error("Expected the field `AccessMobile2` to be a primitive type in the JSON string but got " + data['AccessMobile2']);
        }
        // ensure the json data is a string
        if (data['AccessMobile3'] && !(typeof data['AccessMobile3'] === 'string' || data['AccessMobile3'] instanceof String)) {
            throw new Error("Expected the field `AccessMobile3` to be a primitive type in the JSON string but got " + data['AccessMobile3']);
        }
        // ensure the json data is a string
        if (data['AccessName1'] && !(typeof data['AccessName1'] === 'string' || data['AccessName1'] instanceof String)) {
            throw new Error("Expected the field `AccessName1` to be a primitive type in the JSON string but got " + data['AccessName1']);
        }
        // ensure the json data is a string
        if (data['AccessName2'] && !(typeof data['AccessName2'] === 'string' || data['AccessName2'] instanceof String)) {
            throw new Error("Expected the field `AccessName2` to be a primitive type in the JSON string but got " + data['AccessName2']);
        }
        // ensure the json data is a string
        if (data['AccessName3'] && !(typeof data['AccessName3'] === 'string' || data['AccessName3'] instanceof String)) {
            throw new Error("Expected the field `AccessName3` to be a primitive type in the JSON string but got " + data['AccessName3']);
        }
        // ensure the json data is a string
        if (data['ETag'] && !(typeof data['ETag'] === 'string' || data['ETag'] instanceof String)) {
            throw new Error("Expected the field `ETag` to be a primitive type in the JSON string but got " + data['ETag']);
        }
        // ensure the json data is a string
        if (data['GlobalReference'] && !(typeof data['GlobalReference'] === 'string' || data['GlobalReference'] instanceof String)) {
            throw new Error("Expected the field `GlobalReference` to be a primitive type in the JSON string but got " + data['GlobalReference']);
        }
        if (data['LinkedTenants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LinkedTenants'])) {
                throw new Error("Expected the field `LinkedTenants` to be an array in the JSON data but got " + data['LinkedTenants']);
            }
            // validate the optional field `LinkedTenants` (array)
            for (const item of data['LinkedTenants']) {
                LinkedTenantModel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['OID'] && !(typeof data['OID'] === 'string' || data['OID'] instanceof String)) {
            throw new Error("Expected the field `OID` to be a primitive type in the JSON string but got " + data['OID']);
        }

        return true;
    }


}



/**
 * Access Arrangements
 * @member {String} AccessArrangements
 */
LatestTenancyModel.prototype['AccessArrangements'] = undefined;

/**
 * Arrange access Mobile 1
 * @member {String} AccessMobile1
 */
LatestTenancyModel.prototype['AccessMobile1'] = undefined;

/**
 * Arrange access Mobile 2
 * @member {String} AccessMobile2
 */
LatestTenancyModel.prototype['AccessMobile2'] = undefined;

/**
 * Arrange access Mobile 3
 * @member {String} AccessMobile3
 */
LatestTenancyModel.prototype['AccessMobile3'] = undefined;

/**
 * Arrange access contact name 1
 * @member {String} AccessName1
 */
LatestTenancyModel.prototype['AccessName1'] = undefined;

/**
 * Arrange access contact name 2
 * @member {String} AccessName2
 */
LatestTenancyModel.prototype['AccessName2'] = undefined;

/**
 * Arrange access contact name 3
 * @member {String} AccessName3
 */
LatestTenancyModel.prototype['AccessName3'] = undefined;

/**
 * ETag
 * @member {String} ETag
 */
LatestTenancyModel.prototype['ETag'] = undefined;

/**
 * The end date of the Tenancy
 * @member {Date} EndDate
 */
LatestTenancyModel.prototype['EndDate'] = undefined;

/**
 * The fixed date of the Tenancy
 * @member {Date} FixedDate
 */
LatestTenancyModel.prototype['FixedDate'] = undefined;

/**
 * The unique global reference of the Tenancy
 * @member {String} GlobalReference
 */
LatestTenancyModel.prototype['GlobalReference'] = undefined;

/**
 * Has the Tenancy ended?
 * @member {Boolean} IsTenancyEnded
 */
LatestTenancyModel.prototype['IsTenancyEnded'] = undefined;

/**
 * Is the tenancy Proposed?
 * @member {Boolean} IsTenancyProposed
 */
LatestTenancyModel.prototype['IsTenancyProposed'] = undefined;

/**
 * Is the tenancy signed?
 * @member {Boolean} IsTenancySigned
 */
LatestTenancyModel.prototype['IsTenancySigned'] = undefined;

/**
 * A collection of tenants linked to the tenancy:-
 * @member {Array.<module:model/LinkedTenantModel>} LinkedTenants
 */
LatestTenancyModel.prototype['LinkedTenants'] = undefined;

/**
 * OID
 * @member {String} OID
 */
LatestTenancyModel.prototype['OID'] = undefined;

/**
 * The start date of the Tenancy
 * @member {Date} StartDate
 */
LatestTenancyModel.prototype['StartDate'] = undefined;






export default LatestTenancyModel;

