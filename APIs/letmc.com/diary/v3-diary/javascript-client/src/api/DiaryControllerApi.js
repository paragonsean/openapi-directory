/**
 * agentOS API V3, Diary Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-diary
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DiaryAppointmentDetails from '../model/DiaryAppointmentDetails';
import DiaryAppointmentModel from '../model/DiaryAppointmentModel';
import DiaryAppointmentModelResults from '../model/DiaryAppointmentModelResults';
import DiaryAppointmentTypeModelResults from '../model/DiaryAppointmentTypeModelResults';
import DiaryBookingModel from '../model/DiaryBookingModel';
import FeedbackSubmissionModel from '../model/FeedbackSubmissionModel';
import GuestDiaryParametersResultsModel from '../model/GuestDiaryParametersResultsModel';

/**
* DiaryController service.
* @module api/DiaryControllerApi
* @version v3-diary
*/
export default class DiaryControllerApi {

    /**
    * Constructs a new DiaryControllerApi. 
    * @alias module:api/DiaryControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the diaryControllerAddFeedback operation.
     * @callback module:api/DiaryControllerApi~diaryControllerAddFeedbackCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit appointment feedback
     * @param {String} shortName The unique client short-name
     * @param {module:model/FeedbackSubmissionModel} feedbackSubmissionModel Feedback submission model
     * @param {module:api/DiaryControllerApi~diaryControllerAddFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    diaryControllerAddFeedback(shortName, feedbackSubmissionModel, callback) {
      let postBody = feedbackSubmissionModel;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling diaryControllerAddFeedback");
      }
      // verify the required parameter 'feedbackSubmissionModel' is set
      if (feedbackSubmissionModel === undefined || feedbackSubmissionModel === null) {
        throw new Error("Missing the required parameter 'feedbackSubmissionModel' when calling diaryControllerAddFeedback");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v3/diary/{shortName}/appointment/feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diaryControllerCancelAppointment operation.
     * @callback module:api/DiaryControllerApi~diaryControllerCancelAppointmentCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an existing appointment using its unique identifier
     * @param {String} shortName The unique client short-name
     * @param {String} appointmentID The unique appointment id
     * @param {module:api/DiaryControllerApi~diaryControllerCancelAppointmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    diaryControllerCancelAppointment(shortName, appointmentID, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling diaryControllerCancelAppointment");
      }
      // verify the required parameter 'appointmentID' is set
      if (appointmentID === undefined || appointmentID === null) {
        throw new Error("Missing the required parameter 'appointmentID' when calling diaryControllerCancelAppointment");
      }

      let pathParams = {
        'shortName': shortName,
        'appointmentID': appointmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v3/diary/{shortName}/appointment/{appointmentID}/cancel', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diaryControllerDeleteAppointment operation.
     * @callback module:api/DiaryControllerApi~diaryControllerDeleteAppointmentCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing appointment using its unique identifier
     * @param {String} shortName The unique client short-name
     * @param {String} appointmentID The unique appointment id
     * @param {module:api/DiaryControllerApi~diaryControllerDeleteAppointmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    diaryControllerDeleteAppointment(shortName, appointmentID, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling diaryControllerDeleteAppointment");
      }
      // verify the required parameter 'appointmentID' is set
      if (appointmentID === undefined || appointmentID === null) {
        throw new Error("Missing the required parameter 'appointmentID' when calling diaryControllerDeleteAppointment");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'appointmentID': appointmentID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v3/diary/{shortName}/appointment', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diaryControllerGetAllocations operation.
     * @callback module:api/DiaryControllerApi~diaryControllerGetAllocationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DiaryBookingModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all available allocations for a date + 7 days for a specified appointment type
     * @param {String} shortName The unique client short-name
     * @param {Date} preferredDate The date to search from
     * @param {String} appointmentType The unique appointment type identifier
     * @param {Object} opts Optional parameters
     * @param {Boolean} [lettings] Sales or Lettings property?
     * @param {String} [propertyIdentifier] The unique property identifier (Sales or Lettings) determines branch and property type
     * @param {String} [branchID] Branch ID to check appointments (required if no property submitted)
     * @param {module:api/DiaryControllerApi~diaryControllerGetAllocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DiaryBookingModel>}
     */
    diaryControllerGetAllocations(shortName, preferredDate, appointmentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling diaryControllerGetAllocations");
      }
      // verify the required parameter 'preferredDate' is set
      if (preferredDate === undefined || preferredDate === null) {
        throw new Error("Missing the required parameter 'preferredDate' when calling diaryControllerGetAllocations");
      }
      // verify the required parameter 'appointmentType' is set
      if (appointmentType === undefined || appointmentType === null) {
        throw new Error("Missing the required parameter 'appointmentType' when calling diaryControllerGetAllocations");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'preferredDate': preferredDate,
        'appointmentType': appointmentType,
        'lettings': opts['lettings'],
        'propertyIdentifier': opts['propertyIdentifier'],
        'branchID': opts['branchID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = [DiaryBookingModel];
      return this.apiClient.callApi(
        '/v3/diary/{shortName}/allocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diaryControllerGetAppointment operation.
     * @callback module:api/DiaryControllerApi~diaryControllerGetAppointmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiaryAppointmentModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an appointment by ID
     * @param {String} shortName Company short name
     * @param {String} appointmentID Appointment ID
     * @param {module:api/DiaryControllerApi~diaryControllerGetAppointmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiaryAppointmentModel}
     */
    diaryControllerGetAppointment(shortName, appointmentID, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling diaryControllerGetAppointment");
      }
      // verify the required parameter 'appointmentID' is set
      if (appointmentID === undefined || appointmentID === null) {
        throw new Error("Missing the required parameter 'appointmentID' when calling diaryControllerGetAppointment");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'appointmentID': appointmentID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = DiaryAppointmentModel;
      return this.apiClient.callApi(
        '/v3/diary/{shortName}/appointment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diaryControllerGetAppointmentTypes operation.
     * @callback module:api/DiaryControllerApi~diaryControllerGetAppointmentTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiaryAppointmentTypeModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A collection of all diary appointment types
     * @param {String} shortName The unique client short-name
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {module:api/DiaryControllerApi~diaryControllerGetAppointmentTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiaryAppointmentTypeModelResults}
     */
    diaryControllerGetAppointmentTypes(shortName, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling diaryControllerGetAppointmentTypes");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling diaryControllerGetAppointmentTypes");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling diaryControllerGetAppointmentTypes");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = DiaryAppointmentTypeModelResults;
      return this.apiClient.callApi(
        '/v3/diary/{shortName}/appointmenttypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diaryControllerGetAppointmentsBetweenDates operation.
     * @callback module:api/DiaryControllerApi~diaryControllerGetAppointmentsBetweenDatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiaryAppointmentModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A collection of diary appointments linked to a company filtered between specific dates and by appointment type
     * @param {String} shortName The unique client short-name
     * @param {String} branchID The unique ID of the Branch
     * @param {Date} startDate The search from date
     * @param {Date} endDate The search to date
     * @param {Array.<String>} appointmentTypesToSearch The appointment IDs to search for
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {module:api/DiaryControllerApi~diaryControllerGetAppointmentsBetweenDatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiaryAppointmentModelResults}
     */
    diaryControllerGetAppointmentsBetweenDates(shortName, branchID, startDate, endDate, appointmentTypesToSearch, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling diaryControllerGetAppointmentsBetweenDates");
      }
      // verify the required parameter 'branchID' is set
      if (branchID === undefined || branchID === null) {
        throw new Error("Missing the required parameter 'branchID' when calling diaryControllerGetAppointmentsBetweenDates");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling diaryControllerGetAppointmentsBetweenDates");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling diaryControllerGetAppointmentsBetweenDates");
      }
      // verify the required parameter 'appointmentTypesToSearch' is set
      if (appointmentTypesToSearch === undefined || appointmentTypesToSearch === null) {
        throw new Error("Missing the required parameter 'appointmentTypesToSearch' when calling diaryControllerGetAppointmentsBetweenDates");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling diaryControllerGetAppointmentsBetweenDates");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling diaryControllerGetAppointmentsBetweenDates");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'branchID': branchID,
        'startDate': startDate,
        'endDate': endDate,
        'appointmentTypesToSearch': this.apiClient.buildCollectionParam(appointmentTypesToSearch, 'multi'),
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = DiaryAppointmentModelResults;
      return this.apiClient.callApi(
        '/v3/diary/{shortName}/appointmentsbetweendates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diaryControllerGetRecurringAppointments operation.
     * @callback module:api/DiaryControllerApi~diaryControllerGetRecurringAppointmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiaryAppointmentModelResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all recurring appointments:-
     * @param {String} shortName The unique client short-name
     * @param {String} branchID The unique ID of the Branch
     * @param {Array.<String>} appointmentTypesToSearch The appointment IDs to search for
     * @param {Number} offset The index of the first item to return
     * @param {Number} count The maximum number of items to return (up to 1000 per request)
     * @param {module:api/DiaryControllerApi~diaryControllerGetRecurringAppointmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiaryAppointmentModelResults}
     */
    diaryControllerGetRecurringAppointments(shortName, branchID, appointmentTypesToSearch, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling diaryControllerGetRecurringAppointments");
      }
      // verify the required parameter 'branchID' is set
      if (branchID === undefined || branchID === null) {
        throw new Error("Missing the required parameter 'branchID' when calling diaryControllerGetRecurringAppointments");
      }
      // verify the required parameter 'appointmentTypesToSearch' is set
      if (appointmentTypesToSearch === undefined || appointmentTypesToSearch === null) {
        throw new Error("Missing the required parameter 'appointmentTypesToSearch' when calling diaryControllerGetRecurringAppointments");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling diaryControllerGetRecurringAppointments");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling diaryControllerGetRecurringAppointments");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'branchID': branchID,
        'appointmentTypesToSearch': this.apiClient.buildCollectionParam(appointmentTypesToSearch, 'multi'),
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = DiaryAppointmentModelResults;
      return this.apiClient.callApi(
        '/v3/diary/{shortName}/recurringappointment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diaryControllerPostAppointment operation.
     * @callback module:api/DiaryControllerApi~diaryControllerPostAppointmentCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post an appointment into a valid diary allocation
     * @param {String} shortName The unique client short-name
     * @param {Array.<String>} propertyIdentifier The unique property identifier (Sales or Lettings)
     * @param {module:model/DiaryAppointmentDetails} diaryAppointmentDetails The appointment details model
     * @param {Object} opts Optional parameters
     * @param {Boolean} [lettings] Sales or Lettings property?
     * @param {module:api/DiaryControllerApi~diaryControllerPostAppointmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    diaryControllerPostAppointment(shortName, propertyIdentifier, diaryAppointmentDetails, opts, callback) {
      opts = opts || {};
      let postBody = diaryAppointmentDetails;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling diaryControllerPostAppointment");
      }
      // verify the required parameter 'propertyIdentifier' is set
      if (propertyIdentifier === undefined || propertyIdentifier === null) {
        throw new Error("Missing the required parameter 'propertyIdentifier' when calling diaryControllerPostAppointment");
      }
      // verify the required parameter 'diaryAppointmentDetails' is set
      if (diaryAppointmentDetails === undefined || diaryAppointmentDetails === null) {
        throw new Error("Missing the required parameter 'diaryAppointmentDetails' when calling diaryControllerPostAppointment");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'propertyIdentifier': this.apiClient.buildCollectionParam(propertyIdentifier, 'multi'),
        'lettings': opts['lettings']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v3/diary/{shortName}/appointment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diaryControllerPutAppointment operation.
     * @callback module:api/DiaryControllerApi~diaryControllerPutAppointmentCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing appointment using its unique identifier
     * @param {String} shortName The unique client short-name
     * @param {String} appointmentID The unique appointment id
     * @param {module:model/DiaryAppointmentDetails} diaryAppointmentDetails The appointment details model
     * @param {Object} opts Optional parameters
     * @param {Boolean} [lettings] Sales or Lettings property?
     * @param {Boolean} [allowMarketingCorrespondence] Sales or Lettings property?
     * @param {module:api/DiaryControllerApi~diaryControllerPutAppointmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    diaryControllerPutAppointment(shortName, appointmentID, diaryAppointmentDetails, opts, callback) {
      opts = opts || {};
      let postBody = diaryAppointmentDetails;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling diaryControllerPutAppointment");
      }
      // verify the required parameter 'appointmentID' is set
      if (appointmentID === undefined || appointmentID === null) {
        throw new Error("Missing the required parameter 'appointmentID' when calling diaryControllerPutAppointment");
      }
      // verify the required parameter 'diaryAppointmentDetails' is set
      if (diaryAppointmentDetails === undefined || diaryAppointmentDetails === null) {
        throw new Error("Missing the required parameter 'diaryAppointmentDetails' when calling diaryControllerPutAppointment");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'appointmentID': appointmentID,
        'lettings': opts['lettings'],
        'AllowMarketingCorrespondence': opts['allowMarketingCorrespondence']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/json', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/json', 'text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v3/diary/{shortName}/appointment', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diaryControllerSearchGuest operation.
     * @callback module:api/DiaryControllerApi~diaryControllerSearchGuestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GuestDiaryParametersResultsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Match Guest Parameters with existing applicants
     * @param {String} shortname 
     * @param {String} branchID 
     * @param {String} forename 
     * @param {String} emailaddress 
     * @param {String} surname 
     * @param {Number} offset 
     * @param {Number} count 
     * @param {module:api/DiaryControllerApi~diaryControllerSearchGuestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GuestDiaryParametersResultsModel}
     */
    diaryControllerSearchGuest(shortname, branchID, forename, emailaddress, surname, offset, count, callback) {
      let postBody = null;
      // verify the required parameter 'shortname' is set
      if (shortname === undefined || shortname === null) {
        throw new Error("Missing the required parameter 'shortname' when calling diaryControllerSearchGuest");
      }
      // verify the required parameter 'branchID' is set
      if (branchID === undefined || branchID === null) {
        throw new Error("Missing the required parameter 'branchID' when calling diaryControllerSearchGuest");
      }
      // verify the required parameter 'forename' is set
      if (forename === undefined || forename === null) {
        throw new Error("Missing the required parameter 'forename' when calling diaryControllerSearchGuest");
      }
      // verify the required parameter 'emailaddress' is set
      if (emailaddress === undefined || emailaddress === null) {
        throw new Error("Missing the required parameter 'emailaddress' when calling diaryControllerSearchGuest");
      }
      // verify the required parameter 'surname' is set
      if (surname === undefined || surname === null) {
        throw new Error("Missing the required parameter 'surname' when calling diaryControllerSearchGuest");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling diaryControllerSearchGuest");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling diaryControllerSearchGuest");
      }

      let pathParams = {
        'shortname': shortname,
        'branchID': branchID
      };
      let queryParams = {
        'forename': forename,
        'emailaddress': emailaddress,
        'surname': surname,
        'offset': offset,
        'count': count
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = GuestDiaryParametersResultsModel;
      return this.apiClient.callApi(
        '/v3/diary/{shortname}/{branchID}/guest/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
