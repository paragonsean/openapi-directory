/**
 * agentOS API V3, Diary Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-diary
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkedPropertiesModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkedPropertiesModel::OAILinkedPropertiesModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkedPropertiesModel::OAILinkedPropertiesModel() {
    this->initializeModel();
}

OAILinkedPropertiesModel::~OAILinkedPropertiesModel() {}

void OAILinkedPropertiesModel::initializeModel() {

    m_address1_isSet = false;
    m_address1_isValid = false;

    m_address2_isSet = false;
    m_address2_isValid = false;

    m_address3_isSet = false;
    m_address3_isValid = false;

    m_address4_isSet = false;
    m_address4_isValid = false;

    m_address_flat_room_number_isSet = false;
    m_address_flat_room_number_isValid = false;

    m_address_number_isSet = false;
    m_address_number_isValid = false;

    m_e_tag_isSet = false;
    m_e_tag_isValid = false;

    m_latest_tenancy_isSet = false;
    m_latest_tenancy_isValid = false;

    m_main_landlord_isSet = false;
    m_main_landlord_isValid = false;

    m_oid_isSet = false;
    m_oid_isValid = false;

    m_postcode_isSet = false;
    m_postcode_isValid = false;
}

void OAILinkedPropertiesModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinkedPropertiesModel::fromJsonObject(QJsonObject json) {

    m_address1_isValid = ::OpenAPI::fromJsonValue(m_address1, json[QString("Address1")]);
    m_address1_isSet = !json[QString("Address1")].isNull() && m_address1_isValid;

    m_address2_isValid = ::OpenAPI::fromJsonValue(m_address2, json[QString("Address2")]);
    m_address2_isSet = !json[QString("Address2")].isNull() && m_address2_isValid;

    m_address3_isValid = ::OpenAPI::fromJsonValue(m_address3, json[QString("Address3")]);
    m_address3_isSet = !json[QString("Address3")].isNull() && m_address3_isValid;

    m_address4_isValid = ::OpenAPI::fromJsonValue(m_address4, json[QString("Address4")]);
    m_address4_isSet = !json[QString("Address4")].isNull() && m_address4_isValid;

    m_address_flat_room_number_isValid = ::OpenAPI::fromJsonValue(m_address_flat_room_number, json[QString("AddressFlatRoomNumber")]);
    m_address_flat_room_number_isSet = !json[QString("AddressFlatRoomNumber")].isNull() && m_address_flat_room_number_isValid;

    m_address_number_isValid = ::OpenAPI::fromJsonValue(m_address_number, json[QString("AddressNumber")]);
    m_address_number_isSet = !json[QString("AddressNumber")].isNull() && m_address_number_isValid;

    m_e_tag_isValid = ::OpenAPI::fromJsonValue(m_e_tag, json[QString("ETag")]);
    m_e_tag_isSet = !json[QString("ETag")].isNull() && m_e_tag_isValid;

    m_latest_tenancy_isValid = ::OpenAPI::fromJsonValue(m_latest_tenancy, json[QString("LatestTenancy")]);
    m_latest_tenancy_isSet = !json[QString("LatestTenancy")].isNull() && m_latest_tenancy_isValid;

    m_main_landlord_isValid = ::OpenAPI::fromJsonValue(m_main_landlord, json[QString("MainLandlord")]);
    m_main_landlord_isSet = !json[QString("MainLandlord")].isNull() && m_main_landlord_isValid;

    m_oid_isValid = ::OpenAPI::fromJsonValue(m_oid, json[QString("OID")]);
    m_oid_isSet = !json[QString("OID")].isNull() && m_oid_isValid;

    m_postcode_isValid = ::OpenAPI::fromJsonValue(m_postcode, json[QString("Postcode")]);
    m_postcode_isSet = !json[QString("Postcode")].isNull() && m_postcode_isValid;
}

QString OAILinkedPropertiesModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinkedPropertiesModel::asJsonObject() const {
    QJsonObject obj;
    if (m_address1_isSet) {
        obj.insert(QString("Address1"), ::OpenAPI::toJsonValue(m_address1));
    }
    if (m_address2_isSet) {
        obj.insert(QString("Address2"), ::OpenAPI::toJsonValue(m_address2));
    }
    if (m_address3_isSet) {
        obj.insert(QString("Address3"), ::OpenAPI::toJsonValue(m_address3));
    }
    if (m_address4_isSet) {
        obj.insert(QString("Address4"), ::OpenAPI::toJsonValue(m_address4));
    }
    if (m_address_flat_room_number_isSet) {
        obj.insert(QString("AddressFlatRoomNumber"), ::OpenAPI::toJsonValue(m_address_flat_room_number));
    }
    if (m_address_number_isSet) {
        obj.insert(QString("AddressNumber"), ::OpenAPI::toJsonValue(m_address_number));
    }
    if (m_e_tag_isSet) {
        obj.insert(QString("ETag"), ::OpenAPI::toJsonValue(m_e_tag));
    }
    if (m_latest_tenancy.isSet()) {
        obj.insert(QString("LatestTenancy"), ::OpenAPI::toJsonValue(m_latest_tenancy));
    }
    if (m_main_landlord.isSet()) {
        obj.insert(QString("MainLandlord"), ::OpenAPI::toJsonValue(m_main_landlord));
    }
    if (m_oid_isSet) {
        obj.insert(QString("OID"), ::OpenAPI::toJsonValue(m_oid));
    }
    if (m_postcode_isSet) {
        obj.insert(QString("Postcode"), ::OpenAPI::toJsonValue(m_postcode));
    }
    return obj;
}

QString OAILinkedPropertiesModel::getAddress1() const {
    return m_address1;
}
void OAILinkedPropertiesModel::setAddress1(const QString &address1) {
    m_address1 = address1;
    m_address1_isSet = true;
}

bool OAILinkedPropertiesModel::is_address1_Set() const{
    return m_address1_isSet;
}

bool OAILinkedPropertiesModel::is_address1_Valid() const{
    return m_address1_isValid;
}

QString OAILinkedPropertiesModel::getAddress2() const {
    return m_address2;
}
void OAILinkedPropertiesModel::setAddress2(const QString &address2) {
    m_address2 = address2;
    m_address2_isSet = true;
}

bool OAILinkedPropertiesModel::is_address2_Set() const{
    return m_address2_isSet;
}

bool OAILinkedPropertiesModel::is_address2_Valid() const{
    return m_address2_isValid;
}

QString OAILinkedPropertiesModel::getAddress3() const {
    return m_address3;
}
void OAILinkedPropertiesModel::setAddress3(const QString &address3) {
    m_address3 = address3;
    m_address3_isSet = true;
}

bool OAILinkedPropertiesModel::is_address3_Set() const{
    return m_address3_isSet;
}

bool OAILinkedPropertiesModel::is_address3_Valid() const{
    return m_address3_isValid;
}

QString OAILinkedPropertiesModel::getAddress4() const {
    return m_address4;
}
void OAILinkedPropertiesModel::setAddress4(const QString &address4) {
    m_address4 = address4;
    m_address4_isSet = true;
}

bool OAILinkedPropertiesModel::is_address4_Set() const{
    return m_address4_isSet;
}

bool OAILinkedPropertiesModel::is_address4_Valid() const{
    return m_address4_isValid;
}

QString OAILinkedPropertiesModel::getAddressFlatRoomNumber() const {
    return m_address_flat_room_number;
}
void OAILinkedPropertiesModel::setAddressFlatRoomNumber(const QString &address_flat_room_number) {
    m_address_flat_room_number = address_flat_room_number;
    m_address_flat_room_number_isSet = true;
}

bool OAILinkedPropertiesModel::is_address_flat_room_number_Set() const{
    return m_address_flat_room_number_isSet;
}

bool OAILinkedPropertiesModel::is_address_flat_room_number_Valid() const{
    return m_address_flat_room_number_isValid;
}

QString OAILinkedPropertiesModel::getAddressNumber() const {
    return m_address_number;
}
void OAILinkedPropertiesModel::setAddressNumber(const QString &address_number) {
    m_address_number = address_number;
    m_address_number_isSet = true;
}

bool OAILinkedPropertiesModel::is_address_number_Set() const{
    return m_address_number_isSet;
}

bool OAILinkedPropertiesModel::is_address_number_Valid() const{
    return m_address_number_isValid;
}

QString OAILinkedPropertiesModel::getETag() const {
    return m_e_tag;
}
void OAILinkedPropertiesModel::setETag(const QString &e_tag) {
    m_e_tag = e_tag;
    m_e_tag_isSet = true;
}

bool OAILinkedPropertiesModel::is_e_tag_Set() const{
    return m_e_tag_isSet;
}

bool OAILinkedPropertiesModel::is_e_tag_Valid() const{
    return m_e_tag_isValid;
}

OAILatestTenancyModel OAILinkedPropertiesModel::getLatestTenancy() const {
    return m_latest_tenancy;
}
void OAILinkedPropertiesModel::setLatestTenancy(const OAILatestTenancyModel &latest_tenancy) {
    m_latest_tenancy = latest_tenancy;
    m_latest_tenancy_isSet = true;
}

bool OAILinkedPropertiesModel::is_latest_tenancy_Set() const{
    return m_latest_tenancy_isSet;
}

bool OAILinkedPropertiesModel::is_latest_tenancy_Valid() const{
    return m_latest_tenancy_isValid;
}

OAILinkedLandlordModel OAILinkedPropertiesModel::getMainLandlord() const {
    return m_main_landlord;
}
void OAILinkedPropertiesModel::setMainLandlord(const OAILinkedLandlordModel &main_landlord) {
    m_main_landlord = main_landlord;
    m_main_landlord_isSet = true;
}

bool OAILinkedPropertiesModel::is_main_landlord_Set() const{
    return m_main_landlord_isSet;
}

bool OAILinkedPropertiesModel::is_main_landlord_Valid() const{
    return m_main_landlord_isValid;
}

QString OAILinkedPropertiesModel::getOid() const {
    return m_oid;
}
void OAILinkedPropertiesModel::setOid(const QString &oid) {
    m_oid = oid;
    m_oid_isSet = true;
}

bool OAILinkedPropertiesModel::is_oid_Set() const{
    return m_oid_isSet;
}

bool OAILinkedPropertiesModel::is_oid_Valid() const{
    return m_oid_isValid;
}

QString OAILinkedPropertiesModel::getPostcode() const {
    return m_postcode;
}
void OAILinkedPropertiesModel::setPostcode(const QString &postcode) {
    m_postcode = postcode;
    m_postcode_isSet = true;
}

bool OAILinkedPropertiesModel::is_postcode_Set() const{
    return m_postcode_isSet;
}

bool OAILinkedPropertiesModel::is_postcode_Valid() const{
    return m_postcode_isValid;
}

bool OAILinkedPropertiesModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_flat_room_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_tenancy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_landlord.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinkedPropertiesModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
