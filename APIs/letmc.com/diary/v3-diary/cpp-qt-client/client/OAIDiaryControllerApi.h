/**
 * agentOS API V3, Diary Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-diary
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDiaryControllerApi_H
#define OAI_OAIDiaryControllerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDiaryAppointmentDetails.h"
#include "OAIDiaryAppointmentModel.h"
#include "OAIDiaryAppointmentModelResults.h"
#include "OAIDiaryAppointmentTypeModelResults.h"
#include "OAIDiaryBookingModel.h"
#include "OAIFeedbackSubmissionModel.h"
#include "OAIGuestDiaryParametersResultsModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDiaryControllerApi : public QObject {
    Q_OBJECT

public:
    OAIDiaryControllerApi(const int timeOut = 0);
    ~OAIDiaryControllerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  oai_feedback_submission_model OAIFeedbackSubmissionModel [required]
    */
    virtual void diaryControllerAddFeedback(const QString &short_name, const OAIFeedbackSubmissionModel &oai_feedback_submission_model);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  appointment_id QString [required]
    */
    virtual void diaryControllerCancelAppointment(const QString &short_name, const QString &appointment_id);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  appointment_id QString [required]
    */
    virtual void diaryControllerDeleteAppointment(const QString &short_name, const QString &appointment_id);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  preferred_date QDateTime [required]
    * @param[in]  appointment_type QString [required]
    * @param[in]  lettings bool [optional]
    * @param[in]  property_identifier QString [optional]
    * @param[in]  branch_id QString [optional]
    */
    virtual void diaryControllerGetAllocations(const QString &short_name, const QDateTime &preferred_date, const QString &appointment_type, const ::OpenAPI::OptionalParam<bool> &lettings = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &property_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &branch_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  appointment_id QString [required]
    */
    virtual void diaryControllerGetAppointment(const QString &short_name, const QString &appointment_id);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void diaryControllerGetAppointmentTypes(const QString &short_name, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  branch_id QString [required]
    * @param[in]  start_date QDateTime [required]
    * @param[in]  end_date QDateTime [required]
    * @param[in]  appointment_types_to_search QList<QString> [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void diaryControllerGetAppointmentsBetweenDates(const QString &short_name, const QString &branch_id, const QDateTime &start_date, const QDateTime &end_date, const QList<QString> &appointment_types_to_search, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  branch_id QString [required]
    * @param[in]  appointment_types_to_search QList<QString> [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void diaryControllerGetRecurringAppointments(const QString &short_name, const QString &branch_id, const QList<QString> &appointment_types_to_search, const qint32 &offset, const qint32 &count);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  property_identifier QList<QString> [required]
    * @param[in]  oai_diary_appointment_details OAIDiaryAppointmentDetails [required]
    * @param[in]  lettings bool [optional]
    */
    virtual void diaryControllerPostAppointment(const QString &short_name, const QList<QString> &property_identifier, const OAIDiaryAppointmentDetails &oai_diary_appointment_details, const ::OpenAPI::OptionalParam<bool> &lettings = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  appointment_id QString [required]
    * @param[in]  oai_diary_appointment_details OAIDiaryAppointmentDetails [required]
    * @param[in]  lettings bool [optional]
    * @param[in]  allow_marketing_correspondence bool [optional]
    */
    virtual void diaryControllerPutAppointment(const QString &short_name, const QString &appointment_id, const OAIDiaryAppointmentDetails &oai_diary_appointment_details, const ::OpenAPI::OptionalParam<bool> &lettings = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_marketing_correspondence = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  shortname QString [required]
    * @param[in]  branch_id QString [required]
    * @param[in]  forename QString [required]
    * @param[in]  emailaddress QString [required]
    * @param[in]  surname QString [required]
    * @param[in]  offset qint32 [required]
    * @param[in]  count qint32 [required]
    */
    virtual void diaryControllerSearchGuest(const QString &shortname, const QString &branch_id, const QString &forename, const QString &emailaddress, const QString &surname, const qint32 &offset, const qint32 &count);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void diaryControllerAddFeedbackCallback(OAIHttpRequestWorker *worker);
    void diaryControllerCancelAppointmentCallback(OAIHttpRequestWorker *worker);
    void diaryControllerDeleteAppointmentCallback(OAIHttpRequestWorker *worker);
    void diaryControllerGetAllocationsCallback(OAIHttpRequestWorker *worker);
    void diaryControllerGetAppointmentCallback(OAIHttpRequestWorker *worker);
    void diaryControllerGetAppointmentTypesCallback(OAIHttpRequestWorker *worker);
    void diaryControllerGetAppointmentsBetweenDatesCallback(OAIHttpRequestWorker *worker);
    void diaryControllerGetRecurringAppointmentsCallback(OAIHttpRequestWorker *worker);
    void diaryControllerPostAppointmentCallback(OAIHttpRequestWorker *worker);
    void diaryControllerPutAppointmentCallback(OAIHttpRequestWorker *worker);
    void diaryControllerSearchGuestCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void diaryControllerAddFeedbackSignal(QString summary);
    void diaryControllerCancelAppointmentSignal(QString summary);
    void diaryControllerDeleteAppointmentSignal(QString summary);
    void diaryControllerGetAllocationsSignal(QList<OAIDiaryBookingModel> summary);
    void diaryControllerGetAppointmentSignal(OAIDiaryAppointmentModel summary);
    void diaryControllerGetAppointmentTypesSignal(OAIDiaryAppointmentTypeModelResults summary);
    void diaryControllerGetAppointmentsBetweenDatesSignal(OAIDiaryAppointmentModelResults summary);
    void diaryControllerGetRecurringAppointmentsSignal(OAIDiaryAppointmentModelResults summary);
    void diaryControllerPostAppointmentSignal(QString summary);
    void diaryControllerPutAppointmentSignal(QString summary);
    void diaryControllerSearchGuestSignal(OAIGuestDiaryParametersResultsModel summary);


    void diaryControllerAddFeedbackSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void diaryControllerCancelAppointmentSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void diaryControllerDeleteAppointmentSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void diaryControllerGetAllocationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDiaryBookingModel> summary);
    void diaryControllerGetAppointmentSignalFull(OAIHttpRequestWorker *worker, OAIDiaryAppointmentModel summary);
    void diaryControllerGetAppointmentTypesSignalFull(OAIHttpRequestWorker *worker, OAIDiaryAppointmentTypeModelResults summary);
    void diaryControllerGetAppointmentsBetweenDatesSignalFull(OAIHttpRequestWorker *worker, OAIDiaryAppointmentModelResults summary);
    void diaryControllerGetRecurringAppointmentsSignalFull(OAIHttpRequestWorker *worker, OAIDiaryAppointmentModelResults summary);
    void diaryControllerPostAppointmentSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void diaryControllerPutAppointmentSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void diaryControllerSearchGuestSignalFull(OAIHttpRequestWorker *worker, OAIGuestDiaryParametersResultsModel summary);

    Q_DECL_DEPRECATED_X("Use diaryControllerAddFeedbackSignalError() instead")
    void diaryControllerAddFeedbackSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerAddFeedbackSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerCancelAppointmentSignalError() instead")
    void diaryControllerCancelAppointmentSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerCancelAppointmentSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerDeleteAppointmentSignalError() instead")
    void diaryControllerDeleteAppointmentSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerDeleteAppointmentSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerGetAllocationsSignalError() instead")
    void diaryControllerGetAllocationsSignalE(QList<OAIDiaryBookingModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerGetAllocationsSignalError(QList<OAIDiaryBookingModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerGetAppointmentSignalError() instead")
    void diaryControllerGetAppointmentSignalE(OAIDiaryAppointmentModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerGetAppointmentSignalError(OAIDiaryAppointmentModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerGetAppointmentTypesSignalError() instead")
    void diaryControllerGetAppointmentTypesSignalE(OAIDiaryAppointmentTypeModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerGetAppointmentTypesSignalError(OAIDiaryAppointmentTypeModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerGetAppointmentsBetweenDatesSignalError() instead")
    void diaryControllerGetAppointmentsBetweenDatesSignalE(OAIDiaryAppointmentModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerGetAppointmentsBetweenDatesSignalError(OAIDiaryAppointmentModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerGetRecurringAppointmentsSignalError() instead")
    void diaryControllerGetRecurringAppointmentsSignalE(OAIDiaryAppointmentModelResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerGetRecurringAppointmentsSignalError(OAIDiaryAppointmentModelResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerPostAppointmentSignalError() instead")
    void diaryControllerPostAppointmentSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerPostAppointmentSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerPutAppointmentSignalError() instead")
    void diaryControllerPutAppointmentSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerPutAppointmentSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerSearchGuestSignalError() instead")
    void diaryControllerSearchGuestSignalE(OAIGuestDiaryParametersResultsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerSearchGuestSignalError(OAIGuestDiaryParametersResultsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use diaryControllerAddFeedbackSignalErrorFull() instead")
    void diaryControllerAddFeedbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerAddFeedbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerCancelAppointmentSignalErrorFull() instead")
    void diaryControllerCancelAppointmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerCancelAppointmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerDeleteAppointmentSignalErrorFull() instead")
    void diaryControllerDeleteAppointmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerDeleteAppointmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerGetAllocationsSignalErrorFull() instead")
    void diaryControllerGetAllocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerGetAllocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerGetAppointmentSignalErrorFull() instead")
    void diaryControllerGetAppointmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerGetAppointmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerGetAppointmentTypesSignalErrorFull() instead")
    void diaryControllerGetAppointmentTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerGetAppointmentTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerGetAppointmentsBetweenDatesSignalErrorFull() instead")
    void diaryControllerGetAppointmentsBetweenDatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerGetAppointmentsBetweenDatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerGetRecurringAppointmentsSignalErrorFull() instead")
    void diaryControllerGetRecurringAppointmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerGetRecurringAppointmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerPostAppointmentSignalErrorFull() instead")
    void diaryControllerPostAppointmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerPostAppointmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerPutAppointmentSignalErrorFull() instead")
    void diaryControllerPutAppointmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerPutAppointmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diaryControllerSearchGuestSignalErrorFull() instead")
    void diaryControllerSearchGuestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diaryControllerSearchGuestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
