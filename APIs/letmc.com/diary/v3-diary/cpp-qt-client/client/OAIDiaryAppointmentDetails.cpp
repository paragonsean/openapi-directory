/**
 * agentOS API V3, Diary Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-diary
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiaryAppointmentDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiaryAppointmentDetails::OAIDiaryAppointmentDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiaryAppointmentDetails::OAIDiaryAppointmentDetails() {
    this->initializeModel();
}

OAIDiaryAppointmentDetails::~OAIDiaryAppointmentDetails() {}

void OAIDiaryAppointmentDetails::initializeModel() {

    m_allocation_details_isSet = false;
    m_allocation_details_isValid = false;

    m_appointment_type_isSet = false;
    m_appointment_type_isValid = false;

    m_extra_comments_isSet = false;
    m_extra_comments_isValid = false;

    m_guests_isSet = false;
    m_guests_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAIDiaryAppointmentDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiaryAppointmentDetails::fromJsonObject(QJsonObject json) {

    m_allocation_details_isValid = ::OpenAPI::fromJsonValue(m_allocation_details, json[QString("AllocationDetails")]);
    m_allocation_details_isSet = !json[QString("AllocationDetails")].isNull() && m_allocation_details_isValid;

    m_appointment_type_isValid = ::OpenAPI::fromJsonValue(m_appointment_type, json[QString("AppointmentType")]);
    m_appointment_type_isSet = !json[QString("AppointmentType")].isNull() && m_appointment_type_isValid;

    m_extra_comments_isValid = ::OpenAPI::fromJsonValue(m_extra_comments, json[QString("ExtraComments")]);
    m_extra_comments_isSet = !json[QString("ExtraComments")].isNull() && m_extra_comments_isValid;

    m_guests_isValid = ::OpenAPI::fromJsonValue(m_guests, json[QString("Guests")]);
    m_guests_isSet = !json[QString("Guests")].isNull() && m_guests_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("Subject")]);
    m_subject_isSet = !json[QString("Subject")].isNull() && m_subject_isValid;
}

QString OAIDiaryAppointmentDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiaryAppointmentDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_allocation_details.isSet()) {
        obj.insert(QString("AllocationDetails"), ::OpenAPI::toJsonValue(m_allocation_details));
    }
    if (m_appointment_type_isSet) {
        obj.insert(QString("AppointmentType"), ::OpenAPI::toJsonValue(m_appointment_type));
    }
    if (m_extra_comments_isSet) {
        obj.insert(QString("ExtraComments"), ::OpenAPI::toJsonValue(m_extra_comments));
    }
    if (m_guests.size() > 0) {
        obj.insert(QString("Guests"), ::OpenAPI::toJsonValue(m_guests));
    }
    if (m_subject_isSet) {
        obj.insert(QString("Subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

OAIDiaryBookingModel OAIDiaryAppointmentDetails::getAllocationDetails() const {
    return m_allocation_details;
}
void OAIDiaryAppointmentDetails::setAllocationDetails(const OAIDiaryBookingModel &allocation_details) {
    m_allocation_details = allocation_details;
    m_allocation_details_isSet = true;
}

bool OAIDiaryAppointmentDetails::is_allocation_details_Set() const{
    return m_allocation_details_isSet;
}

bool OAIDiaryAppointmentDetails::is_allocation_details_Valid() const{
    return m_allocation_details_isValid;
}

QString OAIDiaryAppointmentDetails::getAppointmentType() const {
    return m_appointment_type;
}
void OAIDiaryAppointmentDetails::setAppointmentType(const QString &appointment_type) {
    m_appointment_type = appointment_type;
    m_appointment_type_isSet = true;
}

bool OAIDiaryAppointmentDetails::is_appointment_type_Set() const{
    return m_appointment_type_isSet;
}

bool OAIDiaryAppointmentDetails::is_appointment_type_Valid() const{
    return m_appointment_type_isValid;
}

QString OAIDiaryAppointmentDetails::getExtraComments() const {
    return m_extra_comments;
}
void OAIDiaryAppointmentDetails::setExtraComments(const QString &extra_comments) {
    m_extra_comments = extra_comments;
    m_extra_comments_isSet = true;
}

bool OAIDiaryAppointmentDetails::is_extra_comments_Set() const{
    return m_extra_comments_isSet;
}

bool OAIDiaryAppointmentDetails::is_extra_comments_Valid() const{
    return m_extra_comments_isValid;
}

QList<OAIDiaryGuestDetails> OAIDiaryAppointmentDetails::getGuests() const {
    return m_guests;
}
void OAIDiaryAppointmentDetails::setGuests(const QList<OAIDiaryGuestDetails> &guests) {
    m_guests = guests;
    m_guests_isSet = true;
}

bool OAIDiaryAppointmentDetails::is_guests_Set() const{
    return m_guests_isSet;
}

bool OAIDiaryAppointmentDetails::is_guests_Valid() const{
    return m_guests_isValid;
}

QString OAIDiaryAppointmentDetails::getSubject() const {
    return m_subject;
}
void OAIDiaryAppointmentDetails::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIDiaryAppointmentDetails::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIDiaryAppointmentDetails::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAIDiaryAppointmentDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocation_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_appointment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiaryAppointmentDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
