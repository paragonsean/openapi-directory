/**
 * agentOS API V3, Diary Call Group
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3-diary
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILatestTenancyModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILatestTenancyModel::OAILatestTenancyModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILatestTenancyModel::OAILatestTenancyModel() {
    this->initializeModel();
}

OAILatestTenancyModel::~OAILatestTenancyModel() {}

void OAILatestTenancyModel::initializeModel() {

    m_access_arrangements_isSet = false;
    m_access_arrangements_isValid = false;

    m_access_mobile1_isSet = false;
    m_access_mobile1_isValid = false;

    m_access_mobile2_isSet = false;
    m_access_mobile2_isValid = false;

    m_access_mobile3_isSet = false;
    m_access_mobile3_isValid = false;

    m_access_name1_isSet = false;
    m_access_name1_isValid = false;

    m_access_name2_isSet = false;
    m_access_name2_isValid = false;

    m_access_name3_isSet = false;
    m_access_name3_isValid = false;

    m_e_tag_isSet = false;
    m_e_tag_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_fixed_date_isSet = false;
    m_fixed_date_isValid = false;

    m_global_reference_isSet = false;
    m_global_reference_isValid = false;

    m_is_tenancy_ended_isSet = false;
    m_is_tenancy_ended_isValid = false;

    m_is_tenancy_proposed_isSet = false;
    m_is_tenancy_proposed_isValid = false;

    m_is_tenancy_signed_isSet = false;
    m_is_tenancy_signed_isValid = false;

    m_linked_tenants_isSet = false;
    m_linked_tenants_isValid = false;

    m_oid_isSet = false;
    m_oid_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAILatestTenancyModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILatestTenancyModel::fromJsonObject(QJsonObject json) {

    m_access_arrangements_isValid = ::OpenAPI::fromJsonValue(m_access_arrangements, json[QString("AccessArrangements")]);
    m_access_arrangements_isSet = !json[QString("AccessArrangements")].isNull() && m_access_arrangements_isValid;

    m_access_mobile1_isValid = ::OpenAPI::fromJsonValue(m_access_mobile1, json[QString("AccessMobile1")]);
    m_access_mobile1_isSet = !json[QString("AccessMobile1")].isNull() && m_access_mobile1_isValid;

    m_access_mobile2_isValid = ::OpenAPI::fromJsonValue(m_access_mobile2, json[QString("AccessMobile2")]);
    m_access_mobile2_isSet = !json[QString("AccessMobile2")].isNull() && m_access_mobile2_isValid;

    m_access_mobile3_isValid = ::OpenAPI::fromJsonValue(m_access_mobile3, json[QString("AccessMobile3")]);
    m_access_mobile3_isSet = !json[QString("AccessMobile3")].isNull() && m_access_mobile3_isValid;

    m_access_name1_isValid = ::OpenAPI::fromJsonValue(m_access_name1, json[QString("AccessName1")]);
    m_access_name1_isSet = !json[QString("AccessName1")].isNull() && m_access_name1_isValid;

    m_access_name2_isValid = ::OpenAPI::fromJsonValue(m_access_name2, json[QString("AccessName2")]);
    m_access_name2_isSet = !json[QString("AccessName2")].isNull() && m_access_name2_isValid;

    m_access_name3_isValid = ::OpenAPI::fromJsonValue(m_access_name3, json[QString("AccessName3")]);
    m_access_name3_isSet = !json[QString("AccessName3")].isNull() && m_access_name3_isValid;

    m_e_tag_isValid = ::OpenAPI::fromJsonValue(m_e_tag, json[QString("ETag")]);
    m_e_tag_isSet = !json[QString("ETag")].isNull() && m_e_tag_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_fixed_date_isValid = ::OpenAPI::fromJsonValue(m_fixed_date, json[QString("FixedDate")]);
    m_fixed_date_isSet = !json[QString("FixedDate")].isNull() && m_fixed_date_isValid;

    m_global_reference_isValid = ::OpenAPI::fromJsonValue(m_global_reference, json[QString("GlobalReference")]);
    m_global_reference_isSet = !json[QString("GlobalReference")].isNull() && m_global_reference_isValid;

    m_is_tenancy_ended_isValid = ::OpenAPI::fromJsonValue(m_is_tenancy_ended, json[QString("IsTenancyEnded")]);
    m_is_tenancy_ended_isSet = !json[QString("IsTenancyEnded")].isNull() && m_is_tenancy_ended_isValid;

    m_is_tenancy_proposed_isValid = ::OpenAPI::fromJsonValue(m_is_tenancy_proposed, json[QString("IsTenancyProposed")]);
    m_is_tenancy_proposed_isSet = !json[QString("IsTenancyProposed")].isNull() && m_is_tenancy_proposed_isValid;

    m_is_tenancy_signed_isValid = ::OpenAPI::fromJsonValue(m_is_tenancy_signed, json[QString("IsTenancySigned")]);
    m_is_tenancy_signed_isSet = !json[QString("IsTenancySigned")].isNull() && m_is_tenancy_signed_isValid;

    m_linked_tenants_isValid = ::OpenAPI::fromJsonValue(m_linked_tenants, json[QString("LinkedTenants")]);
    m_linked_tenants_isSet = !json[QString("LinkedTenants")].isNull() && m_linked_tenants_isValid;

    m_oid_isValid = ::OpenAPI::fromJsonValue(m_oid, json[QString("OID")]);
    m_oid_isSet = !json[QString("OID")].isNull() && m_oid_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;
}

QString OAILatestTenancyModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILatestTenancyModel::asJsonObject() const {
    QJsonObject obj;
    if (m_access_arrangements_isSet) {
        obj.insert(QString("AccessArrangements"), ::OpenAPI::toJsonValue(m_access_arrangements));
    }
    if (m_access_mobile1_isSet) {
        obj.insert(QString("AccessMobile1"), ::OpenAPI::toJsonValue(m_access_mobile1));
    }
    if (m_access_mobile2_isSet) {
        obj.insert(QString("AccessMobile2"), ::OpenAPI::toJsonValue(m_access_mobile2));
    }
    if (m_access_mobile3_isSet) {
        obj.insert(QString("AccessMobile3"), ::OpenAPI::toJsonValue(m_access_mobile3));
    }
    if (m_access_name1_isSet) {
        obj.insert(QString("AccessName1"), ::OpenAPI::toJsonValue(m_access_name1));
    }
    if (m_access_name2_isSet) {
        obj.insert(QString("AccessName2"), ::OpenAPI::toJsonValue(m_access_name2));
    }
    if (m_access_name3_isSet) {
        obj.insert(QString("AccessName3"), ::OpenAPI::toJsonValue(m_access_name3));
    }
    if (m_e_tag_isSet) {
        obj.insert(QString("ETag"), ::OpenAPI::toJsonValue(m_e_tag));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_fixed_date_isSet) {
        obj.insert(QString("FixedDate"), ::OpenAPI::toJsonValue(m_fixed_date));
    }
    if (m_global_reference_isSet) {
        obj.insert(QString("GlobalReference"), ::OpenAPI::toJsonValue(m_global_reference));
    }
    if (m_is_tenancy_ended_isSet) {
        obj.insert(QString("IsTenancyEnded"), ::OpenAPI::toJsonValue(m_is_tenancy_ended));
    }
    if (m_is_tenancy_proposed_isSet) {
        obj.insert(QString("IsTenancyProposed"), ::OpenAPI::toJsonValue(m_is_tenancy_proposed));
    }
    if (m_is_tenancy_signed_isSet) {
        obj.insert(QString("IsTenancySigned"), ::OpenAPI::toJsonValue(m_is_tenancy_signed));
    }
    if (m_linked_tenants.size() > 0) {
        obj.insert(QString("LinkedTenants"), ::OpenAPI::toJsonValue(m_linked_tenants));
    }
    if (m_oid_isSet) {
        obj.insert(QString("OID"), ::OpenAPI::toJsonValue(m_oid));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QString OAILatestTenancyModel::getAccessArrangements() const {
    return m_access_arrangements;
}
void OAILatestTenancyModel::setAccessArrangements(const QString &access_arrangements) {
    m_access_arrangements = access_arrangements;
    m_access_arrangements_isSet = true;
}

bool OAILatestTenancyModel::is_access_arrangements_Set() const{
    return m_access_arrangements_isSet;
}

bool OAILatestTenancyModel::is_access_arrangements_Valid() const{
    return m_access_arrangements_isValid;
}

QString OAILatestTenancyModel::getAccessMobile1() const {
    return m_access_mobile1;
}
void OAILatestTenancyModel::setAccessMobile1(const QString &access_mobile1) {
    m_access_mobile1 = access_mobile1;
    m_access_mobile1_isSet = true;
}

bool OAILatestTenancyModel::is_access_mobile1_Set() const{
    return m_access_mobile1_isSet;
}

bool OAILatestTenancyModel::is_access_mobile1_Valid() const{
    return m_access_mobile1_isValid;
}

QString OAILatestTenancyModel::getAccessMobile2() const {
    return m_access_mobile2;
}
void OAILatestTenancyModel::setAccessMobile2(const QString &access_mobile2) {
    m_access_mobile2 = access_mobile2;
    m_access_mobile2_isSet = true;
}

bool OAILatestTenancyModel::is_access_mobile2_Set() const{
    return m_access_mobile2_isSet;
}

bool OAILatestTenancyModel::is_access_mobile2_Valid() const{
    return m_access_mobile2_isValid;
}

QString OAILatestTenancyModel::getAccessMobile3() const {
    return m_access_mobile3;
}
void OAILatestTenancyModel::setAccessMobile3(const QString &access_mobile3) {
    m_access_mobile3 = access_mobile3;
    m_access_mobile3_isSet = true;
}

bool OAILatestTenancyModel::is_access_mobile3_Set() const{
    return m_access_mobile3_isSet;
}

bool OAILatestTenancyModel::is_access_mobile3_Valid() const{
    return m_access_mobile3_isValid;
}

QString OAILatestTenancyModel::getAccessName1() const {
    return m_access_name1;
}
void OAILatestTenancyModel::setAccessName1(const QString &access_name1) {
    m_access_name1 = access_name1;
    m_access_name1_isSet = true;
}

bool OAILatestTenancyModel::is_access_name1_Set() const{
    return m_access_name1_isSet;
}

bool OAILatestTenancyModel::is_access_name1_Valid() const{
    return m_access_name1_isValid;
}

QString OAILatestTenancyModel::getAccessName2() const {
    return m_access_name2;
}
void OAILatestTenancyModel::setAccessName2(const QString &access_name2) {
    m_access_name2 = access_name2;
    m_access_name2_isSet = true;
}

bool OAILatestTenancyModel::is_access_name2_Set() const{
    return m_access_name2_isSet;
}

bool OAILatestTenancyModel::is_access_name2_Valid() const{
    return m_access_name2_isValid;
}

QString OAILatestTenancyModel::getAccessName3() const {
    return m_access_name3;
}
void OAILatestTenancyModel::setAccessName3(const QString &access_name3) {
    m_access_name3 = access_name3;
    m_access_name3_isSet = true;
}

bool OAILatestTenancyModel::is_access_name3_Set() const{
    return m_access_name3_isSet;
}

bool OAILatestTenancyModel::is_access_name3_Valid() const{
    return m_access_name3_isValid;
}

QString OAILatestTenancyModel::getETag() const {
    return m_e_tag;
}
void OAILatestTenancyModel::setETag(const QString &e_tag) {
    m_e_tag = e_tag;
    m_e_tag_isSet = true;
}

bool OAILatestTenancyModel::is_e_tag_Set() const{
    return m_e_tag_isSet;
}

bool OAILatestTenancyModel::is_e_tag_Valid() const{
    return m_e_tag_isValid;
}

QDateTime OAILatestTenancyModel::getEndDate() const {
    return m_end_date;
}
void OAILatestTenancyModel::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAILatestTenancyModel::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAILatestTenancyModel::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QDateTime OAILatestTenancyModel::getFixedDate() const {
    return m_fixed_date;
}
void OAILatestTenancyModel::setFixedDate(const QDateTime &fixed_date) {
    m_fixed_date = fixed_date;
    m_fixed_date_isSet = true;
}

bool OAILatestTenancyModel::is_fixed_date_Set() const{
    return m_fixed_date_isSet;
}

bool OAILatestTenancyModel::is_fixed_date_Valid() const{
    return m_fixed_date_isValid;
}

QString OAILatestTenancyModel::getGlobalReference() const {
    return m_global_reference;
}
void OAILatestTenancyModel::setGlobalReference(const QString &global_reference) {
    m_global_reference = global_reference;
    m_global_reference_isSet = true;
}

bool OAILatestTenancyModel::is_global_reference_Set() const{
    return m_global_reference_isSet;
}

bool OAILatestTenancyModel::is_global_reference_Valid() const{
    return m_global_reference_isValid;
}

bool OAILatestTenancyModel::isIsTenancyEnded() const {
    return m_is_tenancy_ended;
}
void OAILatestTenancyModel::setIsTenancyEnded(const bool &is_tenancy_ended) {
    m_is_tenancy_ended = is_tenancy_ended;
    m_is_tenancy_ended_isSet = true;
}

bool OAILatestTenancyModel::is_is_tenancy_ended_Set() const{
    return m_is_tenancy_ended_isSet;
}

bool OAILatestTenancyModel::is_is_tenancy_ended_Valid() const{
    return m_is_tenancy_ended_isValid;
}

bool OAILatestTenancyModel::isIsTenancyProposed() const {
    return m_is_tenancy_proposed;
}
void OAILatestTenancyModel::setIsTenancyProposed(const bool &is_tenancy_proposed) {
    m_is_tenancy_proposed = is_tenancy_proposed;
    m_is_tenancy_proposed_isSet = true;
}

bool OAILatestTenancyModel::is_is_tenancy_proposed_Set() const{
    return m_is_tenancy_proposed_isSet;
}

bool OAILatestTenancyModel::is_is_tenancy_proposed_Valid() const{
    return m_is_tenancy_proposed_isValid;
}

bool OAILatestTenancyModel::isIsTenancySigned() const {
    return m_is_tenancy_signed;
}
void OAILatestTenancyModel::setIsTenancySigned(const bool &is_tenancy_signed) {
    m_is_tenancy_signed = is_tenancy_signed;
    m_is_tenancy_signed_isSet = true;
}

bool OAILatestTenancyModel::is_is_tenancy_signed_Set() const{
    return m_is_tenancy_signed_isSet;
}

bool OAILatestTenancyModel::is_is_tenancy_signed_Valid() const{
    return m_is_tenancy_signed_isValid;
}

QList<OAILinkedTenantModel> OAILatestTenancyModel::getLinkedTenants() const {
    return m_linked_tenants;
}
void OAILatestTenancyModel::setLinkedTenants(const QList<OAILinkedTenantModel> &linked_tenants) {
    m_linked_tenants = linked_tenants;
    m_linked_tenants_isSet = true;
}

bool OAILatestTenancyModel::is_linked_tenants_Set() const{
    return m_linked_tenants_isSet;
}

bool OAILatestTenancyModel::is_linked_tenants_Valid() const{
    return m_linked_tenants_isValid;
}

QString OAILatestTenancyModel::getOid() const {
    return m_oid;
}
void OAILatestTenancyModel::setOid(const QString &oid) {
    m_oid = oid;
    m_oid_isSet = true;
}

bool OAILatestTenancyModel::is_oid_Set() const{
    return m_oid_isSet;
}

bool OAILatestTenancyModel::is_oid_Valid() const{
    return m_oid_isValid;
}

QDateTime OAILatestTenancyModel::getStartDate() const {
    return m_start_date;
}
void OAILatestTenancyModel::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAILatestTenancyModel::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAILatestTenancyModel::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAILatestTenancyModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_arrangements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_mobile1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_mobile2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_mobile3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_name1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_name2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_name3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tenancy_ended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tenancy_proposed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tenancy_signed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_tenants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILatestTenancyModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
