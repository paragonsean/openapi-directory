# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.diary_booking_model import DiaryBookingModel
from openapi_server.models.diary_guest_details import DiaryGuestDetails
from openapi_server import util


class DiaryAppointmentDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocation_details: DiaryBookingModel=None, appointment_type: str=None, extra_comments: str=None, guests: List[DiaryGuestDetails]=None, subject: str=None):
        """DiaryAppointmentDetails - a model defined in OpenAPI

        :param allocation_details: The allocation_details of this DiaryAppointmentDetails.
        :param appointment_type: The appointment_type of this DiaryAppointmentDetails.
        :param extra_comments: The extra_comments of this DiaryAppointmentDetails.
        :param guests: The guests of this DiaryAppointmentDetails.
        :param subject: The subject of this DiaryAppointmentDetails.
        """
        self.openapi_types = {
            'allocation_details': DiaryBookingModel,
            'appointment_type': str,
            'extra_comments': str,
            'guests': List[DiaryGuestDetails],
            'subject': str
        }

        self.attribute_map = {
            'allocation_details': 'AllocationDetails',
            'appointment_type': 'AppointmentType',
            'extra_comments': 'ExtraComments',
            'guests': 'Guests',
            'subject': 'Subject'
        }

        self._allocation_details = allocation_details
        self._appointment_type = appointment_type
        self._extra_comments = extra_comments
        self._guests = guests
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiaryAppointmentDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiaryAppointmentDetails of this DiaryAppointmentDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocation_details(self):
        """Gets the allocation_details of this DiaryAppointmentDetails.


        :return: The allocation_details of this DiaryAppointmentDetails.
        :rtype: DiaryBookingModel
        """
        return self._allocation_details

    @allocation_details.setter
    def allocation_details(self, allocation_details):
        """Sets the allocation_details of this DiaryAppointmentDetails.


        :param allocation_details: The allocation_details of this DiaryAppointmentDetails.
        :type allocation_details: DiaryBookingModel
        """

        self._allocation_details = allocation_details

    @property
    def appointment_type(self):
        """Gets the appointment_type of this DiaryAppointmentDetails.

        The Appointment Type ID

        :return: The appointment_type of this DiaryAppointmentDetails.
        :rtype: str
        """
        return self._appointment_type

    @appointment_type.setter
    def appointment_type(self, appointment_type):
        """Sets the appointment_type of this DiaryAppointmentDetails.

        The Appointment Type ID

        :param appointment_type: The appointment_type of this DiaryAppointmentDetails.
        :type appointment_type: str
        """

        self._appointment_type = appointment_type

    @property
    def extra_comments(self):
        """Gets the extra_comments of this DiaryAppointmentDetails.

        Additional appointment comments

        :return: The extra_comments of this DiaryAppointmentDetails.
        :rtype: str
        """
        return self._extra_comments

    @extra_comments.setter
    def extra_comments(self, extra_comments):
        """Sets the extra_comments of this DiaryAppointmentDetails.

        Additional appointment comments

        :param extra_comments: The extra_comments of this DiaryAppointmentDetails.
        :type extra_comments: str
        """

        self._extra_comments = extra_comments

    @property
    def guests(self):
        """Gets the guests of this DiaryAppointmentDetails.

        A collection of guests linked to the appointment. If none leave empty

        :return: The guests of this DiaryAppointmentDetails.
        :rtype: List[DiaryGuestDetails]
        """
        return self._guests

    @guests.setter
    def guests(self, guests):
        """Sets the guests of this DiaryAppointmentDetails.

        A collection of guests linked to the appointment. If none leave empty

        :param guests: The guests of this DiaryAppointmentDetails.
        :type guests: List[DiaryGuestDetails]
        """

        self._guests = guests

    @property
    def subject(self):
        """Gets the subject of this DiaryAppointmentDetails.

        The subject of the appointment

        :return: The subject of this DiaryAppointmentDetails.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this DiaryAppointmentDetails.

        The subject of the appointment

        :param subject: The subject of this DiaryAppointmentDetails.
        :type subject: str
        """

        self._subject = subject
