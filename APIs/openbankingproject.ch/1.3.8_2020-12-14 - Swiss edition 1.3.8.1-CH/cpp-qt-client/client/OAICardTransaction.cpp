/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardTransaction::OAICardTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardTransaction::OAICardTransaction() {
    this->initializeModel();
}

OAICardTransaction::~OAICardTransaction() {}

void OAICardTransaction::initializeModel() {

    m_acceptor_transaction_date_time_isSet = false;
    m_acceptor_transaction_date_time_isValid = false;

    m_booking_date_isSet = false;
    m_booking_date_isValid = false;

    m_card_acceptor_address_isSet = false;
    m_card_acceptor_address_isValid = false;

    m_card_acceptor_id_isSet = false;
    m_card_acceptor_id_isValid = false;

    m_card_acceptor_phone_isSet = false;
    m_card_acceptor_phone_isValid = false;

    m_card_transaction_id_isSet = false;
    m_card_transaction_id_isValid = false;

    m_currency_exchange_isSet = false;
    m_currency_exchange_isValid = false;

    m_invoiced_isSet = false;
    m_invoiced_isValid = false;

    m_markup_fee_isSet = false;
    m_markup_fee_isValid = false;

    m_markup_fee_percentage_isSet = false;
    m_markup_fee_percentage_isValid = false;

    m_masked_pan_isSet = false;
    m_masked_pan_isValid = false;

    m_merchant_category_code_isSet = false;
    m_merchant_category_code_isValid = false;

    m_original_amount_isSet = false;
    m_original_amount_isValid = false;

    m_proprietary_bank_transaction_code_isSet = false;
    m_proprietary_bank_transaction_code_isValid = false;

    m_terminal_id_isSet = false;
    m_terminal_id_isValid = false;

    m_transaction_amount_isSet = false;
    m_transaction_amount_isValid = false;

    m_transaction_date_isSet = false;
    m_transaction_date_isValid = false;

    m_transaction_details_isSet = false;
    m_transaction_details_isValid = false;
}

void OAICardTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardTransaction::fromJsonObject(QJsonObject json) {

    m_acceptor_transaction_date_time_isValid = ::OpenAPI::fromJsonValue(m_acceptor_transaction_date_time, json[QString("acceptorTransactionDateTime")]);
    m_acceptor_transaction_date_time_isSet = !json[QString("acceptorTransactionDateTime")].isNull() && m_acceptor_transaction_date_time_isValid;

    m_booking_date_isValid = ::OpenAPI::fromJsonValue(m_booking_date, json[QString("bookingDate")]);
    m_booking_date_isSet = !json[QString("bookingDate")].isNull() && m_booking_date_isValid;

    m_card_acceptor_address_isValid = ::OpenAPI::fromJsonValue(m_card_acceptor_address, json[QString("cardAcceptorAddress")]);
    m_card_acceptor_address_isSet = !json[QString("cardAcceptorAddress")].isNull() && m_card_acceptor_address_isValid;

    m_card_acceptor_id_isValid = ::OpenAPI::fromJsonValue(m_card_acceptor_id, json[QString("cardAcceptorId")]);
    m_card_acceptor_id_isSet = !json[QString("cardAcceptorId")].isNull() && m_card_acceptor_id_isValid;

    m_card_acceptor_phone_isValid = ::OpenAPI::fromJsonValue(m_card_acceptor_phone, json[QString("cardAcceptorPhone")]);
    m_card_acceptor_phone_isSet = !json[QString("cardAcceptorPhone")].isNull() && m_card_acceptor_phone_isValid;

    m_card_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_card_transaction_id, json[QString("cardTransactionId")]);
    m_card_transaction_id_isSet = !json[QString("cardTransactionId")].isNull() && m_card_transaction_id_isValid;

    m_currency_exchange_isValid = ::OpenAPI::fromJsonValue(m_currency_exchange, json[QString("currencyExchange")]);
    m_currency_exchange_isSet = !json[QString("currencyExchange")].isNull() && m_currency_exchange_isValid;

    m_invoiced_isValid = ::OpenAPI::fromJsonValue(m_invoiced, json[QString("invoiced")]);
    m_invoiced_isSet = !json[QString("invoiced")].isNull() && m_invoiced_isValid;

    m_markup_fee_isValid = ::OpenAPI::fromJsonValue(m_markup_fee, json[QString("markupFee")]);
    m_markup_fee_isSet = !json[QString("markupFee")].isNull() && m_markup_fee_isValid;

    m_markup_fee_percentage_isValid = ::OpenAPI::fromJsonValue(m_markup_fee_percentage, json[QString("markupFeePercentage")]);
    m_markup_fee_percentage_isSet = !json[QString("markupFeePercentage")].isNull() && m_markup_fee_percentage_isValid;

    m_masked_pan_isValid = ::OpenAPI::fromJsonValue(m_masked_pan, json[QString("maskedPAN")]);
    m_masked_pan_isSet = !json[QString("maskedPAN")].isNull() && m_masked_pan_isValid;

    m_merchant_category_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_category_code, json[QString("merchantCategoryCode")]);
    m_merchant_category_code_isSet = !json[QString("merchantCategoryCode")].isNull() && m_merchant_category_code_isValid;

    m_original_amount_isValid = ::OpenAPI::fromJsonValue(m_original_amount, json[QString("originalAmount")]);
    m_original_amount_isSet = !json[QString("originalAmount")].isNull() && m_original_amount_isValid;

    m_proprietary_bank_transaction_code_isValid = ::OpenAPI::fromJsonValue(m_proprietary_bank_transaction_code, json[QString("proprietaryBankTransactionCode")]);
    m_proprietary_bank_transaction_code_isSet = !json[QString("proprietaryBankTransactionCode")].isNull() && m_proprietary_bank_transaction_code_isValid;

    m_terminal_id_isValid = ::OpenAPI::fromJsonValue(m_terminal_id, json[QString("terminalId")]);
    m_terminal_id_isSet = !json[QString("terminalId")].isNull() && m_terminal_id_isValid;

    m_transaction_amount_isValid = ::OpenAPI::fromJsonValue(m_transaction_amount, json[QString("transactionAmount")]);
    m_transaction_amount_isSet = !json[QString("transactionAmount")].isNull() && m_transaction_amount_isValid;

    m_transaction_date_isValid = ::OpenAPI::fromJsonValue(m_transaction_date, json[QString("transactionDate")]);
    m_transaction_date_isSet = !json[QString("transactionDate")].isNull() && m_transaction_date_isValid;

    m_transaction_details_isValid = ::OpenAPI::fromJsonValue(m_transaction_details, json[QString("transactionDetails")]);
    m_transaction_details_isSet = !json[QString("transactionDetails")].isNull() && m_transaction_details_isValid;
}

QString OAICardTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_acceptor_transaction_date_time_isSet) {
        obj.insert(QString("acceptorTransactionDateTime"), ::OpenAPI::toJsonValue(m_acceptor_transaction_date_time));
    }
    if (m_booking_date_isSet) {
        obj.insert(QString("bookingDate"), ::OpenAPI::toJsonValue(m_booking_date));
    }
    if (m_card_acceptor_address.isSet()) {
        obj.insert(QString("cardAcceptorAddress"), ::OpenAPI::toJsonValue(m_card_acceptor_address));
    }
    if (m_card_acceptor_id_isSet) {
        obj.insert(QString("cardAcceptorId"), ::OpenAPI::toJsonValue(m_card_acceptor_id));
    }
    if (m_card_acceptor_phone_isSet) {
        obj.insert(QString("cardAcceptorPhone"), ::OpenAPI::toJsonValue(m_card_acceptor_phone));
    }
    if (m_card_transaction_id_isSet) {
        obj.insert(QString("cardTransactionId"), ::OpenAPI::toJsonValue(m_card_transaction_id));
    }
    if (m_currency_exchange.size() > 0) {
        obj.insert(QString("currencyExchange"), ::OpenAPI::toJsonValue(m_currency_exchange));
    }
    if (m_invoiced_isSet) {
        obj.insert(QString("invoiced"), ::OpenAPI::toJsonValue(m_invoiced));
    }
    if (m_markup_fee.isSet()) {
        obj.insert(QString("markupFee"), ::OpenAPI::toJsonValue(m_markup_fee));
    }
    if (m_markup_fee_percentage_isSet) {
        obj.insert(QString("markupFeePercentage"), ::OpenAPI::toJsonValue(m_markup_fee_percentage));
    }
    if (m_masked_pan_isSet) {
        obj.insert(QString("maskedPAN"), ::OpenAPI::toJsonValue(m_masked_pan));
    }
    if (m_merchant_category_code_isSet) {
        obj.insert(QString("merchantCategoryCode"), ::OpenAPI::toJsonValue(m_merchant_category_code));
    }
    if (m_original_amount.isSet()) {
        obj.insert(QString("originalAmount"), ::OpenAPI::toJsonValue(m_original_amount));
    }
    if (m_proprietary_bank_transaction_code_isSet) {
        obj.insert(QString("proprietaryBankTransactionCode"), ::OpenAPI::toJsonValue(m_proprietary_bank_transaction_code));
    }
    if (m_terminal_id_isSet) {
        obj.insert(QString("terminalId"), ::OpenAPI::toJsonValue(m_terminal_id));
    }
    if (m_transaction_amount.isSet()) {
        obj.insert(QString("transactionAmount"), ::OpenAPI::toJsonValue(m_transaction_amount));
    }
    if (m_transaction_date_isSet) {
        obj.insert(QString("transactionDate"), ::OpenAPI::toJsonValue(m_transaction_date));
    }
    if (m_transaction_details_isSet) {
        obj.insert(QString("transactionDetails"), ::OpenAPI::toJsonValue(m_transaction_details));
    }
    return obj;
}

QDateTime OAICardTransaction::getAcceptorTransactionDateTime() const {
    return m_acceptor_transaction_date_time;
}
void OAICardTransaction::setAcceptorTransactionDateTime(const QDateTime &acceptor_transaction_date_time) {
    m_acceptor_transaction_date_time = acceptor_transaction_date_time;
    m_acceptor_transaction_date_time_isSet = true;
}

bool OAICardTransaction::is_acceptor_transaction_date_time_Set() const{
    return m_acceptor_transaction_date_time_isSet;
}

bool OAICardTransaction::is_acceptor_transaction_date_time_Valid() const{
    return m_acceptor_transaction_date_time_isValid;
}

QDate OAICardTransaction::getBookingDate() const {
    return m_booking_date;
}
void OAICardTransaction::setBookingDate(const QDate &booking_date) {
    m_booking_date = booking_date;
    m_booking_date_isSet = true;
}

bool OAICardTransaction::is_booking_date_Set() const{
    return m_booking_date_isSet;
}

bool OAICardTransaction::is_booking_date_Valid() const{
    return m_booking_date_isValid;
}

OAIAddress OAICardTransaction::getCardAcceptorAddress() const {
    return m_card_acceptor_address;
}
void OAICardTransaction::setCardAcceptorAddress(const OAIAddress &card_acceptor_address) {
    m_card_acceptor_address = card_acceptor_address;
    m_card_acceptor_address_isSet = true;
}

bool OAICardTransaction::is_card_acceptor_address_Set() const{
    return m_card_acceptor_address_isSet;
}

bool OAICardTransaction::is_card_acceptor_address_Valid() const{
    return m_card_acceptor_address_isValid;
}

QString OAICardTransaction::getCardAcceptorId() const {
    return m_card_acceptor_id;
}
void OAICardTransaction::setCardAcceptorId(const QString &card_acceptor_id) {
    m_card_acceptor_id = card_acceptor_id;
    m_card_acceptor_id_isSet = true;
}

bool OAICardTransaction::is_card_acceptor_id_Set() const{
    return m_card_acceptor_id_isSet;
}

bool OAICardTransaction::is_card_acceptor_id_Valid() const{
    return m_card_acceptor_id_isValid;
}

QString OAICardTransaction::getCardAcceptorPhone() const {
    return m_card_acceptor_phone;
}
void OAICardTransaction::setCardAcceptorPhone(const QString &card_acceptor_phone) {
    m_card_acceptor_phone = card_acceptor_phone;
    m_card_acceptor_phone_isSet = true;
}

bool OAICardTransaction::is_card_acceptor_phone_Set() const{
    return m_card_acceptor_phone_isSet;
}

bool OAICardTransaction::is_card_acceptor_phone_Valid() const{
    return m_card_acceptor_phone_isValid;
}

QString OAICardTransaction::getCardTransactionId() const {
    return m_card_transaction_id;
}
void OAICardTransaction::setCardTransactionId(const QString &card_transaction_id) {
    m_card_transaction_id = card_transaction_id;
    m_card_transaction_id_isSet = true;
}

bool OAICardTransaction::is_card_transaction_id_Set() const{
    return m_card_transaction_id_isSet;
}

bool OAICardTransaction::is_card_transaction_id_Valid() const{
    return m_card_transaction_id_isValid;
}

QList<OAIReportExchangeRate> OAICardTransaction::getCurrencyExchange() const {
    return m_currency_exchange;
}
void OAICardTransaction::setCurrencyExchange(const QList<OAIReportExchangeRate> &currency_exchange) {
    m_currency_exchange = currency_exchange;
    m_currency_exchange_isSet = true;
}

bool OAICardTransaction::is_currency_exchange_Set() const{
    return m_currency_exchange_isSet;
}

bool OAICardTransaction::is_currency_exchange_Valid() const{
    return m_currency_exchange_isValid;
}

bool OAICardTransaction::isInvoiced() const {
    return m_invoiced;
}
void OAICardTransaction::setInvoiced(const bool &invoiced) {
    m_invoiced = invoiced;
    m_invoiced_isSet = true;
}

bool OAICardTransaction::is_invoiced_Set() const{
    return m_invoiced_isSet;
}

bool OAICardTransaction::is_invoiced_Valid() const{
    return m_invoiced_isValid;
}

OAIAmount OAICardTransaction::getMarkupFee() const {
    return m_markup_fee;
}
void OAICardTransaction::setMarkupFee(const OAIAmount &markup_fee) {
    m_markup_fee = markup_fee;
    m_markup_fee_isSet = true;
}

bool OAICardTransaction::is_markup_fee_Set() const{
    return m_markup_fee_isSet;
}

bool OAICardTransaction::is_markup_fee_Valid() const{
    return m_markup_fee_isValid;
}

QString OAICardTransaction::getMarkupFeePercentage() const {
    return m_markup_fee_percentage;
}
void OAICardTransaction::setMarkupFeePercentage(const QString &markup_fee_percentage) {
    m_markup_fee_percentage = markup_fee_percentage;
    m_markup_fee_percentage_isSet = true;
}

bool OAICardTransaction::is_markup_fee_percentage_Set() const{
    return m_markup_fee_percentage_isSet;
}

bool OAICardTransaction::is_markup_fee_percentage_Valid() const{
    return m_markup_fee_percentage_isValid;
}

QString OAICardTransaction::getMaskedPan() const {
    return m_masked_pan;
}
void OAICardTransaction::setMaskedPan(const QString &masked_pan) {
    m_masked_pan = masked_pan;
    m_masked_pan_isSet = true;
}

bool OAICardTransaction::is_masked_pan_Set() const{
    return m_masked_pan_isSet;
}

bool OAICardTransaction::is_masked_pan_Valid() const{
    return m_masked_pan_isValid;
}

QString OAICardTransaction::getMerchantCategoryCode() const {
    return m_merchant_category_code;
}
void OAICardTransaction::setMerchantCategoryCode(const QString &merchant_category_code) {
    m_merchant_category_code = merchant_category_code;
    m_merchant_category_code_isSet = true;
}

bool OAICardTransaction::is_merchant_category_code_Set() const{
    return m_merchant_category_code_isSet;
}

bool OAICardTransaction::is_merchant_category_code_Valid() const{
    return m_merchant_category_code_isValid;
}

OAIAmount OAICardTransaction::getOriginalAmount() const {
    return m_original_amount;
}
void OAICardTransaction::setOriginalAmount(const OAIAmount &original_amount) {
    m_original_amount = original_amount;
    m_original_amount_isSet = true;
}

bool OAICardTransaction::is_original_amount_Set() const{
    return m_original_amount_isSet;
}

bool OAICardTransaction::is_original_amount_Valid() const{
    return m_original_amount_isValid;
}

QString OAICardTransaction::getProprietaryBankTransactionCode() const {
    return m_proprietary_bank_transaction_code;
}
void OAICardTransaction::setProprietaryBankTransactionCode(const QString &proprietary_bank_transaction_code) {
    m_proprietary_bank_transaction_code = proprietary_bank_transaction_code;
    m_proprietary_bank_transaction_code_isSet = true;
}

bool OAICardTransaction::is_proprietary_bank_transaction_code_Set() const{
    return m_proprietary_bank_transaction_code_isSet;
}

bool OAICardTransaction::is_proprietary_bank_transaction_code_Valid() const{
    return m_proprietary_bank_transaction_code_isValid;
}

QString OAICardTransaction::getTerminalId() const {
    return m_terminal_id;
}
void OAICardTransaction::setTerminalId(const QString &terminal_id) {
    m_terminal_id = terminal_id;
    m_terminal_id_isSet = true;
}

bool OAICardTransaction::is_terminal_id_Set() const{
    return m_terminal_id_isSet;
}

bool OAICardTransaction::is_terminal_id_Valid() const{
    return m_terminal_id_isValid;
}

OAIAmount OAICardTransaction::getTransactionAmount() const {
    return m_transaction_amount;
}
void OAICardTransaction::setTransactionAmount(const OAIAmount &transaction_amount) {
    m_transaction_amount = transaction_amount;
    m_transaction_amount_isSet = true;
}

bool OAICardTransaction::is_transaction_amount_Set() const{
    return m_transaction_amount_isSet;
}

bool OAICardTransaction::is_transaction_amount_Valid() const{
    return m_transaction_amount_isValid;
}

QDate OAICardTransaction::getTransactionDate() const {
    return m_transaction_date;
}
void OAICardTransaction::setTransactionDate(const QDate &transaction_date) {
    m_transaction_date = transaction_date;
    m_transaction_date_isSet = true;
}

bool OAICardTransaction::is_transaction_date_Set() const{
    return m_transaction_date_isSet;
}

bool OAICardTransaction::is_transaction_date_Valid() const{
    return m_transaction_date_isValid;
}

QString OAICardTransaction::getTransactionDetails() const {
    return m_transaction_details;
}
void OAICardTransaction::setTransactionDetails(const QString &transaction_details) {
    m_transaction_details = transaction_details;
    m_transaction_details_isSet = true;
}

bool OAICardTransaction::is_transaction_details_Set() const{
    return m_transaction_details_isSet;
}

bool OAICardTransaction::is_transaction_details_Valid() const{
    return m_transaction_details_isValid;
}

bool OAICardTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acceptor_transaction_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_acceptor_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_acceptor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_acceptor_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_exchange.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoiced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_markup_fee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_markup_fee_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_masked_pan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_category_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proprietary_bank_transaction_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_details_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transaction_amount_isValid && true;
}

} // namespace OpenAPI
