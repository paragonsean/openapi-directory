/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEntryDetailsElement.h
 *
 * 
 */

#ifndef OAIEntryDetailsElement_H
#define OAIEntryDetailsElement_H

#include <QJsonObject>

#include "OAIAccountReference16_CH.h"
#include "OAIAmount.h"
#include "OAIPurposeCode.h"
#include "OAIRemittanceInformationStructured.h"
#include "OAIReportExchangeRate.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccountReference16_CH;
class OAIReportExchangeRate;
class OAIRemittanceInformationStructured;
class OAIAmount;

class OAIEntryDetailsElement : public OAIObject {
public:
    OAIEntryDetailsElement();
    OAIEntryDetailsElement(QString json);
    ~OAIEntryDetailsElement() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCheckId() const;
    void setCheckId(const QString &check_id);
    bool is_check_id_Set() const;
    bool is_check_id_Valid() const;

    OAIAccountReference16_CH getCreditorAccount() const;
    void setCreditorAccount(const OAIAccountReference16_CH &creditor_account);
    bool is_creditor_account_Set() const;
    bool is_creditor_account_Valid() const;

    QString getCreditorAgent() const;
    void setCreditorAgent(const QString &creditor_agent);
    bool is_creditor_agent_Set() const;
    bool is_creditor_agent_Valid() const;

    QString getCreditorId() const;
    void setCreditorId(const QString &creditor_id);
    bool is_creditor_id_Set() const;
    bool is_creditor_id_Valid() const;

    QString getCreditorName() const;
    void setCreditorName(const QString &creditor_name);
    bool is_creditor_name_Set() const;
    bool is_creditor_name_Valid() const;

    QList<OAIReportExchangeRate> getCurrencyExchange() const;
    void setCurrencyExchange(const QList<OAIReportExchangeRate> &currency_exchange);
    bool is_currency_exchange_Set() const;
    bool is_currency_exchange_Valid() const;

    OAIAccountReference16_CH getDebtorAccount() const;
    void setDebtorAccount(const OAIAccountReference16_CH &debtor_account);
    bool is_debtor_account_Set() const;
    bool is_debtor_account_Valid() const;

    QString getDebtorAgent() const;
    void setDebtorAgent(const QString &debtor_agent);
    bool is_debtor_agent_Set() const;
    bool is_debtor_agent_Valid() const;

    QString getDebtorName() const;
    void setDebtorName(const QString &debtor_name);
    bool is_debtor_name_Set() const;
    bool is_debtor_name_Valid() const;

    QString getEndToEndId() const;
    void setEndToEndId(const QString &end_to_end_id);
    bool is_end_to_end_id_Set() const;
    bool is_end_to_end_id_Valid() const;

    QString getMandateId() const;
    void setMandateId(const QString &mandate_id);
    bool is_mandate_id_Set() const;
    bool is_mandate_id_Valid() const;

    OAIPurposeCode getPurposeCode() const;
    void setPurposeCode(const OAIPurposeCode &purpose_code);
    bool is_purpose_code_Set() const;
    bool is_purpose_code_Valid() const;

    OAIRemittanceInformationStructured getRemittanceInformationStructured() const;
    void setRemittanceInformationStructured(const OAIRemittanceInformationStructured &remittance_information_structured);
    bool is_remittance_information_structured_Set() const;
    bool is_remittance_information_structured_Valid() const;

    QList<OAIRemittanceInformationStructured> getRemittanceInformationStructuredArray() const;
    void setRemittanceInformationStructuredArray(const QList<OAIRemittanceInformationStructured> &remittance_information_structured_array);
    bool is_remittance_information_structured_array_Set() const;
    bool is_remittance_information_structured_array_Valid() const;

    QString getRemittanceInformationUnstructured() const;
    void setRemittanceInformationUnstructured(const QString &remittance_information_unstructured);
    bool is_remittance_information_unstructured_Set() const;
    bool is_remittance_information_unstructured_Valid() const;

    QList<QString> getRemittanceInformationUnstructuredArray() const;
    void setRemittanceInformationUnstructuredArray(const QList<QString> &remittance_information_unstructured_array);
    bool is_remittance_information_unstructured_array_Set() const;
    bool is_remittance_information_unstructured_array_Valid() const;

    OAIAmount getTransactionAmount() const;
    void setTransactionAmount(const OAIAmount &transaction_amount);
    bool is_transaction_amount_Set() const;
    bool is_transaction_amount_Valid() const;

    QString getUltimateCreditor() const;
    void setUltimateCreditor(const QString &ultimate_creditor);
    bool is_ultimate_creditor_Set() const;
    bool is_ultimate_creditor_Valid() const;

    QString getUltimateDebtor() const;
    void setUltimateDebtor(const QString &ultimate_debtor);
    bool is_ultimate_debtor_Set() const;
    bool is_ultimate_debtor_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_check_id;
    bool m_check_id_isSet;
    bool m_check_id_isValid;

    OAIAccountReference16_CH m_creditor_account;
    bool m_creditor_account_isSet;
    bool m_creditor_account_isValid;

    QString m_creditor_agent;
    bool m_creditor_agent_isSet;
    bool m_creditor_agent_isValid;

    QString m_creditor_id;
    bool m_creditor_id_isSet;
    bool m_creditor_id_isValid;

    QString m_creditor_name;
    bool m_creditor_name_isSet;
    bool m_creditor_name_isValid;

    QList<OAIReportExchangeRate> m_currency_exchange;
    bool m_currency_exchange_isSet;
    bool m_currency_exchange_isValid;

    OAIAccountReference16_CH m_debtor_account;
    bool m_debtor_account_isSet;
    bool m_debtor_account_isValid;

    QString m_debtor_agent;
    bool m_debtor_agent_isSet;
    bool m_debtor_agent_isValid;

    QString m_debtor_name;
    bool m_debtor_name_isSet;
    bool m_debtor_name_isValid;

    QString m_end_to_end_id;
    bool m_end_to_end_id_isSet;
    bool m_end_to_end_id_isValid;

    QString m_mandate_id;
    bool m_mandate_id_isSet;
    bool m_mandate_id_isValid;

    OAIPurposeCode m_purpose_code;
    bool m_purpose_code_isSet;
    bool m_purpose_code_isValid;

    OAIRemittanceInformationStructured m_remittance_information_structured;
    bool m_remittance_information_structured_isSet;
    bool m_remittance_information_structured_isValid;

    QList<OAIRemittanceInformationStructured> m_remittance_information_structured_array;
    bool m_remittance_information_structured_array_isSet;
    bool m_remittance_information_structured_array_isValid;

    QString m_remittance_information_unstructured;
    bool m_remittance_information_unstructured_isSet;
    bool m_remittance_information_unstructured_isValid;

    QList<QString> m_remittance_information_unstructured_array;
    bool m_remittance_information_unstructured_array_isSet;
    bool m_remittance_information_unstructured_array_isValid;

    OAIAmount m_transaction_amount;
    bool m_transaction_amount_isSet;
    bool m_transaction_amount_isValid;

    QString m_ultimate_creditor;
    bool m_ultimate_creditor_isSet;
    bool m_ultimate_creditor_isValid;

    QString m_ultimate_debtor;
    bool m_ultimate_debtor_isSet;
    bool m_ultimate_debtor_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEntryDetailsElement)

#endif // OAIEntryDetailsElement_H
