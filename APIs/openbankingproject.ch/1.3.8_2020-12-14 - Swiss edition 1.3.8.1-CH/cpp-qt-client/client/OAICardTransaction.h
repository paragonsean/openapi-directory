/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICardTransaction.h
 *
 * Card transaction information.
 */

#ifndef OAICardTransaction_H
#define OAICardTransaction_H

#include <QJsonObject>

#include "OAIAddress.h"
#include "OAIAmount.h"
#include "OAIReportExchangeRate.h"
#include <QDate>
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAddress;
class OAIReportExchangeRate;
class OAIAmount;

class OAICardTransaction : public OAIObject {
public:
    OAICardTransaction();
    OAICardTransaction(QString json);
    ~OAICardTransaction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getAcceptorTransactionDateTime() const;
    void setAcceptorTransactionDateTime(const QDateTime &acceptor_transaction_date_time);
    bool is_acceptor_transaction_date_time_Set() const;
    bool is_acceptor_transaction_date_time_Valid() const;

    QDate getBookingDate() const;
    void setBookingDate(const QDate &booking_date);
    bool is_booking_date_Set() const;
    bool is_booking_date_Valid() const;

    OAIAddress getCardAcceptorAddress() const;
    void setCardAcceptorAddress(const OAIAddress &card_acceptor_address);
    bool is_card_acceptor_address_Set() const;
    bool is_card_acceptor_address_Valid() const;

    QString getCardAcceptorId() const;
    void setCardAcceptorId(const QString &card_acceptor_id);
    bool is_card_acceptor_id_Set() const;
    bool is_card_acceptor_id_Valid() const;

    QString getCardAcceptorPhone() const;
    void setCardAcceptorPhone(const QString &card_acceptor_phone);
    bool is_card_acceptor_phone_Set() const;
    bool is_card_acceptor_phone_Valid() const;

    QString getCardTransactionId() const;
    void setCardTransactionId(const QString &card_transaction_id);
    bool is_card_transaction_id_Set() const;
    bool is_card_transaction_id_Valid() const;

    QList<OAIReportExchangeRate> getCurrencyExchange() const;
    void setCurrencyExchange(const QList<OAIReportExchangeRate> &currency_exchange);
    bool is_currency_exchange_Set() const;
    bool is_currency_exchange_Valid() const;

    bool isInvoiced() const;
    void setInvoiced(const bool &invoiced);
    bool is_invoiced_Set() const;
    bool is_invoiced_Valid() const;

    OAIAmount getMarkupFee() const;
    void setMarkupFee(const OAIAmount &markup_fee);
    bool is_markup_fee_Set() const;
    bool is_markup_fee_Valid() const;

    QString getMarkupFeePercentage() const;
    void setMarkupFeePercentage(const QString &markup_fee_percentage);
    bool is_markup_fee_percentage_Set() const;
    bool is_markup_fee_percentage_Valid() const;

    QString getMaskedPan() const;
    void setMaskedPan(const QString &masked_pan);
    bool is_masked_pan_Set() const;
    bool is_masked_pan_Valid() const;

    QString getMerchantCategoryCode() const;
    void setMerchantCategoryCode(const QString &merchant_category_code);
    bool is_merchant_category_code_Set() const;
    bool is_merchant_category_code_Valid() const;

    OAIAmount getOriginalAmount() const;
    void setOriginalAmount(const OAIAmount &original_amount);
    bool is_original_amount_Set() const;
    bool is_original_amount_Valid() const;

    QString getProprietaryBankTransactionCode() const;
    void setProprietaryBankTransactionCode(const QString &proprietary_bank_transaction_code);
    bool is_proprietary_bank_transaction_code_Set() const;
    bool is_proprietary_bank_transaction_code_Valid() const;

    QString getTerminalId() const;
    void setTerminalId(const QString &terminal_id);
    bool is_terminal_id_Set() const;
    bool is_terminal_id_Valid() const;

    OAIAmount getTransactionAmount() const;
    void setTransactionAmount(const OAIAmount &transaction_amount);
    bool is_transaction_amount_Set() const;
    bool is_transaction_amount_Valid() const;

    QDate getTransactionDate() const;
    void setTransactionDate(const QDate &transaction_date);
    bool is_transaction_date_Set() const;
    bool is_transaction_date_Valid() const;

    QString getTransactionDetails() const;
    void setTransactionDetails(const QString &transaction_details);
    bool is_transaction_details_Set() const;
    bool is_transaction_details_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_acceptor_transaction_date_time;
    bool m_acceptor_transaction_date_time_isSet;
    bool m_acceptor_transaction_date_time_isValid;

    QDate m_booking_date;
    bool m_booking_date_isSet;
    bool m_booking_date_isValid;

    OAIAddress m_card_acceptor_address;
    bool m_card_acceptor_address_isSet;
    bool m_card_acceptor_address_isValid;

    QString m_card_acceptor_id;
    bool m_card_acceptor_id_isSet;
    bool m_card_acceptor_id_isValid;

    QString m_card_acceptor_phone;
    bool m_card_acceptor_phone_isSet;
    bool m_card_acceptor_phone_isValid;

    QString m_card_transaction_id;
    bool m_card_transaction_id_isSet;
    bool m_card_transaction_id_isValid;

    QList<OAIReportExchangeRate> m_currency_exchange;
    bool m_currency_exchange_isSet;
    bool m_currency_exchange_isValid;

    bool m_invoiced;
    bool m_invoiced_isSet;
    bool m_invoiced_isValid;

    OAIAmount m_markup_fee;
    bool m_markup_fee_isSet;
    bool m_markup_fee_isValid;

    QString m_markup_fee_percentage;
    bool m_markup_fee_percentage_isSet;
    bool m_markup_fee_percentage_isValid;

    QString m_masked_pan;
    bool m_masked_pan_isSet;
    bool m_masked_pan_isValid;

    QString m_merchant_category_code;
    bool m_merchant_category_code_isSet;
    bool m_merchant_category_code_isValid;

    OAIAmount m_original_amount;
    bool m_original_amount_isSet;
    bool m_original_amount_isValid;

    QString m_proprietary_bank_transaction_code;
    bool m_proprietary_bank_transaction_code_isSet;
    bool m_proprietary_bank_transaction_code_isValid;

    QString m_terminal_id;
    bool m_terminal_id_isSet;
    bool m_terminal_id_isValid;

    OAIAmount m_transaction_amount;
    bool m_transaction_amount_isSet;
    bool m_transaction_amount_isValid;

    QDate m_transaction_date;
    bool m_transaction_date_isSet;
    bool m_transaction_date_isValid;

    QString m_transaction_details;
    bool m_transaction_details_isSet;
    bool m_transaction_details_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICardTransaction)

#endif // OAICardTransaction_H
