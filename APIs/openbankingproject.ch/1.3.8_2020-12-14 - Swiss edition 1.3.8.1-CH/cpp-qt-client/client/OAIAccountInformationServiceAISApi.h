/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountInformationServiceAISApi_H
#define OAI_OAIAccountInformationServiceAISApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountList.h"
#include "OAIAuthorisations.h"
#include "OAIConsentInformationResponse_200_json.h"
#include "OAIConsentStatusResponse_200.h"
#include "OAIConsents.h"
#include "OAIConsentsResponse_201.h"
#include "OAIError400_AIS.h"
#include "OAIError400_NG_AIS.h"
#include "OAIError401_AIS.h"
#include "OAIError401_NG_AIS.h"
#include "OAIError403_AIS.h"
#include "OAIError403_NG_AIS.h"
#include "OAIError404_AIS.h"
#include "OAIError404_NG_AIS.h"
#include "OAIError405_AIS.h"
#include "OAIError405_NG_AIS.h"
#include "OAIError406_AIS.h"
#include "OAIError406_NG_AIS.h"
#include "OAIError409_AIS.h"
#include "OAIError409_NG_AIS.h"
#include "OAIError429_AIS.h"
#include "OAIError429_NG_AIS.h"
#include "OAIGetTransactionDetails_200_response.h"
#include "OAIGetTransactionList_200_response.h"
#include "OAIGetTransactionList_200_response_1.h"
#include "OAIReadAccountBalanceResponse_200.h"
#include "OAIReadAccountDetails_200_response.h"
#include "OAIScaStatusResponse.h"
#include "OAIStartConsentAuthorisation_request.h"
#include "OAIStartScaprocessResponse.h"
#include "OAITransactionsResponse_200_json.h"
#include "OAIUpdateConsentsPsuData_200_response.h"
#include "OAIUpdateConsentsPsuData_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountInformationServiceAISApi : public QObject {
    Q_OBJECT

public:
    OAIAccountInformationServiceAISApi(const int timeOut = 0);
    ~OAIAccountInformationServiceAISApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_request_id QString [required]
    * @param[in]  psu_ip_address QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_id QString [optional]
    * @param[in]  psu_id_type QString [optional]
    * @param[in]  psu_corporate_id QString [optional]
    * @param[in]  psu_corporate_id_type QString [optional]
    * @param[in]  tpp_redirect_preferred bool [optional]
    * @param[in]  tpp_redirect_uri QString [optional]
    * @param[in]  tpp_nok_redirect_uri QString [optional]
    * @param[in]  tpp_explicit_authorisation_preferred bool [optional]
    * @param[in]  tpp_brand_logging_information QString [optional]
    * @param[in]  tpp_notification_uri QString [optional]
    * @param[in]  tpp_notification_content_preferred QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    * @param[in]  oai_consents OAIConsents [optional]
    */
    virtual void createConsent(const QString &x_request_id, const QString &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_corporate_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &tpp_redirect_preferred = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &tpp_redirect_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tpp_nok_redirect_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &tpp_explicit_authorisation_preferred = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &tpp_brand_logging_information = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tpp_notification_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tpp_notification_content_preferred = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIConsents> &oai_consents = ::OpenAPI::OptionalParam<OAIConsents>());

    /**
    * @param[in]  consent_id QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    */
    virtual void deleteConsent(const QString &consent_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_request_id QString [required]
    * @param[in]  consent_id QString [required]
    * @param[in]  with_balance bool [optional]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    */
    virtual void getAccountList(const QString &x_request_id, const QString &consent_id, const ::OpenAPI::OptionalParam<bool> &with_balance = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  consent_id QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    */
    virtual void getBalances(const QString &account_id, const QString &x_request_id, const QString &consent_id, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  consent_id QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    */
    virtual void getConsentAuthorisation(const QString &consent_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  consent_id QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    */
    virtual void getConsentInformation(const QString &consent_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  consent_id QString [required]
    * @param[in]  authorisation_id QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    */
    virtual void getConsentScaStatus(const QString &consent_id, const QString &authorisation_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  consent_id QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    */
    virtual void getConsentStatus(const QString &consent_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  consent_id QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    */
    virtual void getTransactionDetails(const QString &account_id, const QString &transaction_id, const QString &x_request_id, const QString &consent_id, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  booking_status QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  consent_id QString [required]
    * @param[in]  date_from QDate [optional]
    * @param[in]  date_to QDate [optional]
    * @param[in]  entry_reference_from QString [optional]
    * @param[in]  delta_list bool [optional]
    * @param[in]  with_balance bool [optional]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    */
    virtual void getTransactionList(const QString &account_id, const QString &booking_status, const QString &x_request_id, const QString &consent_id, const ::OpenAPI::OptionalParam<QDate> &date_from = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_to = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &entry_reference_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &delta_list = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &with_balance = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  consent_id QString [required]
    * @param[in]  with_balance bool [optional]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    */
    virtual void readAccountDetails(const QString &account_id, const QString &x_request_id, const QString &consent_id, const ::OpenAPI::OptionalParam<bool> &with_balance = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  consent_id QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_id QString [optional]
    * @param[in]  psu_id_type QString [optional]
    * @param[in]  psu_corporate_id QString [optional]
    * @param[in]  psu_corporate_id_type QString [optional]
    * @param[in]  tpp_redirect_preferred bool [optional]
    * @param[in]  tpp_redirect_uri QString [optional]
    * @param[in]  tpp_nok_redirect_uri QString [optional]
    * @param[in]  tpp_notification_uri QString [optional]
    * @param[in]  tpp_notification_content_preferred QString [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    * @param[in]  oai_start_consent_authorisation_request OAIStartConsentAuthorisation_request [optional]
    */
    virtual void startConsentAuthorisation(const QString &consent_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_corporate_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &tpp_redirect_preferred = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &tpp_redirect_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tpp_nok_redirect_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tpp_notification_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tpp_notification_content_preferred = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIStartConsentAuthorisation_request> &oai_start_consent_authorisation_request = ::OpenAPI::OptionalParam<OAIStartConsentAuthorisation_request>());

    /**
    * @param[in]  consent_id QString [required]
    * @param[in]  authorisation_id QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_id QString [optional]
    * @param[in]  psu_id_type QString [optional]
    * @param[in]  psu_corporate_id QString [optional]
    * @param[in]  psu_corporate_id_type QString [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    * @param[in]  oai_update_consents_psu_data_request OAIUpdateConsentsPsuData_request [optional]
    */
    virtual void updateConsentsPsuData(const QString &consent_id, const QString &authorisation_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_corporate_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateConsentsPsuData_request> &oai_update_consents_psu_data_request = ::OpenAPI::OptionalParam<OAIUpdateConsentsPsuData_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createConsentCallback(OAIHttpRequestWorker *worker);
    void deleteConsentCallback(OAIHttpRequestWorker *worker);
    void getAccountListCallback(OAIHttpRequestWorker *worker);
    void getBalancesCallback(OAIHttpRequestWorker *worker);
    void getConsentAuthorisationCallback(OAIHttpRequestWorker *worker);
    void getConsentInformationCallback(OAIHttpRequestWorker *worker);
    void getConsentScaStatusCallback(OAIHttpRequestWorker *worker);
    void getConsentStatusCallback(OAIHttpRequestWorker *worker);
    void getTransactionDetailsCallback(OAIHttpRequestWorker *worker);
    void getTransactionListCallback(OAIHttpRequestWorker *worker);
    void readAccountDetailsCallback(OAIHttpRequestWorker *worker);
    void startConsentAuthorisationCallback(OAIHttpRequestWorker *worker);
    void updateConsentsPsuDataCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createConsentSignal(OAIConsentsResponse_201 summary);
    void deleteConsentSignal();
    void getAccountListSignal(OAIAccountList summary);
    void getBalancesSignal(OAIReadAccountBalanceResponse_200 summary);
    void getConsentAuthorisationSignal(OAIAuthorisations summary);
    void getConsentInformationSignal(OAIConsentInformationResponse_200_json summary);
    void getConsentScaStatusSignal(OAIScaStatusResponse summary);
    void getConsentStatusSignal(OAIConsentStatusResponse_200 summary);
    void getTransactionDetailsSignal(OAIGetTransactionDetails_200_response summary);
    void getTransactionListSignal(OAITransactionsResponse_200_json summary);
    void readAccountDetailsSignal(OAIReadAccountDetails_200_response summary);
    void startConsentAuthorisationSignal(OAIStartScaprocessResponse summary);
    void updateConsentsPsuDataSignal(OAIUpdateConsentsPsuData_200_response summary);


    void createConsentSignalFull(OAIHttpRequestWorker *worker, OAIConsentsResponse_201 summary);
    void deleteConsentSignalFull(OAIHttpRequestWorker *worker);
    void getAccountListSignalFull(OAIHttpRequestWorker *worker, OAIAccountList summary);
    void getBalancesSignalFull(OAIHttpRequestWorker *worker, OAIReadAccountBalanceResponse_200 summary);
    void getConsentAuthorisationSignalFull(OAIHttpRequestWorker *worker, OAIAuthorisations summary);
    void getConsentInformationSignalFull(OAIHttpRequestWorker *worker, OAIConsentInformationResponse_200_json summary);
    void getConsentScaStatusSignalFull(OAIHttpRequestWorker *worker, OAIScaStatusResponse summary);
    void getConsentStatusSignalFull(OAIHttpRequestWorker *worker, OAIConsentStatusResponse_200 summary);
    void getTransactionDetailsSignalFull(OAIHttpRequestWorker *worker, OAIGetTransactionDetails_200_response summary);
    void getTransactionListSignalFull(OAIHttpRequestWorker *worker, OAITransactionsResponse_200_json summary);
    void readAccountDetailsSignalFull(OAIHttpRequestWorker *worker, OAIReadAccountDetails_200_response summary);
    void startConsentAuthorisationSignalFull(OAIHttpRequestWorker *worker, OAIStartScaprocessResponse summary);
    void updateConsentsPsuDataSignalFull(OAIHttpRequestWorker *worker, OAIUpdateConsentsPsuData_200_response summary);

    Q_DECL_DEPRECATED_X("Use createConsentSignalError() instead")
    void createConsentSignalE(OAIConsentsResponse_201 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createConsentSignalError(OAIConsentsResponse_201 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConsentSignalError() instead")
    void deleteConsentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConsentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountListSignalError() instead")
    void getAccountListSignalE(OAIAccountList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountListSignalError(OAIAccountList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBalancesSignalError() instead")
    void getBalancesSignalE(OAIReadAccountBalanceResponse_200 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBalancesSignalError(OAIReadAccountBalanceResponse_200 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConsentAuthorisationSignalError() instead")
    void getConsentAuthorisationSignalE(OAIAuthorisations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConsentAuthorisationSignalError(OAIAuthorisations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConsentInformationSignalError() instead")
    void getConsentInformationSignalE(OAIConsentInformationResponse_200_json summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConsentInformationSignalError(OAIConsentInformationResponse_200_json summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConsentScaStatusSignalError() instead")
    void getConsentScaStatusSignalE(OAIScaStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConsentScaStatusSignalError(OAIScaStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConsentStatusSignalError() instead")
    void getConsentStatusSignalE(OAIConsentStatusResponse_200 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConsentStatusSignalError(OAIConsentStatusResponse_200 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionDetailsSignalError() instead")
    void getTransactionDetailsSignalE(OAIGetTransactionDetails_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionDetailsSignalError(OAIGetTransactionDetails_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionListSignalError() instead")
    void getTransactionListSignalE(OAITransactionsResponse_200_json summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionListSignalError(OAITransactionsResponse_200_json summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readAccountDetailsSignalError() instead")
    void readAccountDetailsSignalE(OAIReadAccountDetails_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readAccountDetailsSignalError(OAIReadAccountDetails_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startConsentAuthorisationSignalError() instead")
    void startConsentAuthorisationSignalE(OAIStartScaprocessResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startConsentAuthorisationSignalError(OAIStartScaprocessResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConsentsPsuDataSignalError() instead")
    void updateConsentsPsuDataSignalE(OAIUpdateConsentsPsuData_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConsentsPsuDataSignalError(OAIUpdateConsentsPsuData_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createConsentSignalErrorFull() instead")
    void createConsentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createConsentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteConsentSignalErrorFull() instead")
    void deleteConsentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConsentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountListSignalErrorFull() instead")
    void getAccountListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBalancesSignalErrorFull() instead")
    void getBalancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBalancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConsentAuthorisationSignalErrorFull() instead")
    void getConsentAuthorisationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConsentAuthorisationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConsentInformationSignalErrorFull() instead")
    void getConsentInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConsentInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConsentScaStatusSignalErrorFull() instead")
    void getConsentScaStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConsentScaStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConsentStatusSignalErrorFull() instead")
    void getConsentStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConsentStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionDetailsSignalErrorFull() instead")
    void getTransactionDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionListSignalErrorFull() instead")
    void getTransactionListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readAccountDetailsSignalErrorFull() instead")
    void readAccountDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readAccountDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startConsentAuthorisationSignalErrorFull() instead")
    void startConsentAuthorisationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startConsentAuthorisationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConsentsPsuDataSignalErrorFull() instead")
    void updateConsentsPsuDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConsentsPsuDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
