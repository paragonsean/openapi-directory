/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountInformationServiceAISApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAccountInformationServiceAISApi::OAIAccountInformationServiceAISApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIAccountInformationServiceAISApi::~OAIAccountInformationServiceAISApi() {
}

void OAIAccountInformationServiceAISApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.dev.openbankingproject.ch"),
    "Open Banking Project Switzerland Developer Portal",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createConsent", defaultConf);
    _serverIndices.insert("createConsent", 0);
    _serverConfigs.insert("deleteConsent", defaultConf);
    _serverIndices.insert("deleteConsent", 0);
    _serverConfigs.insert("getAccountList", defaultConf);
    _serverIndices.insert("getAccountList", 0);
    _serverConfigs.insert("getBalances", defaultConf);
    _serverIndices.insert("getBalances", 0);
    _serverConfigs.insert("getConsentAuthorisation", defaultConf);
    _serverIndices.insert("getConsentAuthorisation", 0);
    _serverConfigs.insert("getConsentInformation", defaultConf);
    _serverIndices.insert("getConsentInformation", 0);
    _serverConfigs.insert("getConsentScaStatus", defaultConf);
    _serverIndices.insert("getConsentScaStatus", 0);
    _serverConfigs.insert("getConsentStatus", defaultConf);
    _serverIndices.insert("getConsentStatus", 0);
    _serverConfigs.insert("getTransactionDetails", defaultConf);
    _serverIndices.insert("getTransactionDetails", 0);
    _serverConfigs.insert("getTransactionList", defaultConf);
    _serverIndices.insert("getTransactionList", 0);
    _serverConfigs.insert("readAccountDetails", defaultConf);
    _serverIndices.insert("readAccountDetails", 0);
    _serverConfigs.insert("startConsentAuthorisation", defaultConf);
    _serverIndices.insert("startConsentAuthorisation", 0);
    _serverConfigs.insert("updateConsentsPsuData", defaultConf);
    _serverIndices.insert("updateConsentsPsuData", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIAccountInformationServiceAISApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIAccountInformationServiceAISApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIAccountInformationServiceAISApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIAccountInformationServiceAISApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIAccountInformationServiceAISApi::setUsername(const QString &username) {
    _username = username;
}

void OAIAccountInformationServiceAISApi::setPassword(const QString &password) {
    _password = password;
}


void OAIAccountInformationServiceAISApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIAccountInformationServiceAISApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIAccountInformationServiceAISApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIAccountInformationServiceAISApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAccountInformationServiceAISApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAccountInformationServiceAISApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIAccountInformationServiceAISApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIAccountInformationServiceAISApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIAccountInformationServiceAISApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIAccountInformationServiceAISApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIAccountInformationServiceAISApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIAccountInformationServiceAISApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIAccountInformationServiceAISApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIAccountInformationServiceAISApi::createConsent(const QString &x_request_id, const QString &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_id, const ::OpenAPI::OptionalParam<QString> &psu_id_type, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type, const ::OpenAPI::OptionalParam<bool> &tpp_redirect_preferred, const ::OpenAPI::OptionalParam<QString> &tpp_redirect_uri, const ::OpenAPI::OptionalParam<QString> &tpp_nok_redirect_uri, const ::OpenAPI::OptionalParam<bool> &tpp_explicit_authorisation_preferred, const ::OpenAPI::OptionalParam<QString> &tpp_brand_logging_information, const ::OpenAPI::OptionalParam<QString> &tpp_notification_uri, const ::OpenAPI::OptionalParam<QString> &tpp_notification_content_preferred, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location, const ::OpenAPI::OptionalParam<OAIConsents> &oai_consents) {
    QString fullPath = QString(_serverConfigs["createConsent"][_serverIndices.value("createConsent")].URL()+"/v1/consents");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_consents.hasValue()){

        
        QByteArray output = oai_consents.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id.value()).isEmpty()) {
            input.headers.insert("PSU-ID", ::OpenAPI::toStringValue(psu_id.value()));
        }
        }
    if (psu_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-ID-Type", ::OpenAPI::toStringValue(psu_id_type.value()));
        }
        }
    if (psu_corporate_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID", ::OpenAPI::toStringValue(psu_corporate_id.value()));
        }
        }
    if (psu_corporate_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID-Type", ::OpenAPI::toStringValue(psu_corporate_id_type.value()));
        }
        }
    if (tpp_redirect_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_redirect_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Redirect-Preferred", ::OpenAPI::toStringValue(tpp_redirect_preferred.value()));
        }
        }
    if (tpp_redirect_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_redirect_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Redirect-URI", ::OpenAPI::toStringValue(tpp_redirect_uri.value()));
        }
        }
    if (tpp_nok_redirect_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_nok_redirect_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Nok-Redirect-URI", ::OpenAPI::toStringValue(tpp_nok_redirect_uri.value()));
        }
        }
    if (tpp_explicit_authorisation_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_explicit_authorisation_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Explicit-Authorisation-Preferred", ::OpenAPI::toStringValue(tpp_explicit_authorisation_preferred.value()));
        }
        }
    if (tpp_brand_logging_information.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_brand_logging_information.value()).isEmpty()) {
            input.headers.insert("TPP-Brand-Logging-Information", ::OpenAPI::toStringValue(tpp_brand_logging_information.value()));
        }
        }
    if (tpp_notification_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_notification_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Notification-URI", ::OpenAPI::toStringValue(tpp_notification_uri.value()));
        }
        }
    if (tpp_notification_content_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_notification_content_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Notification-Content-Preferred", ::OpenAPI::toStringValue(tpp_notification_content_preferred.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(psu_ip_address).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountInformationServiceAISApi::createConsentCallback);
    connect(this, &OAIAccountInformationServiceAISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountInformationServiceAISApi::createConsentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConsentsResponse_201 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createConsentSignal(output);
        Q_EMIT createConsentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createConsentSignalE(output, error_type, error_str);
        Q_EMIT createConsentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createConsentSignalError(output, error_type, error_str);
        Q_EMIT createConsentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountInformationServiceAISApi::deleteConsent(const QString &consent_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["deleteConsent"][_serverIndices.value("deleteConsent")].URL()+"/v1/consents/{consentId}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString consent_idPathParam("{");
        consent_idPathParam.append("consentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "consentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"consentId"+pathSuffix : pathPrefix;
        fullPath.replace(consent_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(consent_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountInformationServiceAISApi::deleteConsentCallback);
    connect(this, &OAIAccountInformationServiceAISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountInformationServiceAISApi::deleteConsentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteConsentSignal();
        Q_EMIT deleteConsentSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteConsentSignalE(error_type, error_str);
        Q_EMIT deleteConsentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteConsentSignalError(error_type, error_str);
        Q_EMIT deleteConsentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountInformationServiceAISApi::getAccountList(const QString &x_request_id, const QString &consent_id, const ::OpenAPI::OptionalParam<bool> &with_balance, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getAccountList"][_serverIndices.value("getAccountList")].URL()+"/v1/accounts");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (with_balance.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "withBalance", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("withBalance")).append(querySuffix).append(QUrl::toPercentEncoding(with_balance.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(consent_id).isEmpty()) {
            input.headers.insert("Consent-ID", ::OpenAPI::toStringValue(consent_id));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountInformationServiceAISApi::getAccountListCallback);
    connect(this, &OAIAccountInformationServiceAISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountInformationServiceAISApi::getAccountListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAccountList output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAccountListSignal(output);
        Q_EMIT getAccountListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAccountListSignalE(output, error_type, error_str);
        Q_EMIT getAccountListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAccountListSignalError(output, error_type, error_str);
        Q_EMIT getAccountListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountInformationServiceAISApi::getBalances(const QString &account_id, const QString &x_request_id, const QString &consent_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getBalances"][_serverIndices.value("getBalances")].URL()+"/v1/accounts/{account-id}/balances");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString account_idPathParam("{");
        account_idPathParam.append("account-id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account-id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account-id"+pathSuffix : pathPrefix;
        fullPath.replace(account_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(consent_id).isEmpty()) {
            input.headers.insert("Consent-ID", ::OpenAPI::toStringValue(consent_id));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountInformationServiceAISApi::getBalancesCallback);
    connect(this, &OAIAccountInformationServiceAISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountInformationServiceAISApi::getBalancesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIReadAccountBalanceResponse_200 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getBalancesSignal(output);
        Q_EMIT getBalancesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getBalancesSignalE(output, error_type, error_str);
        Q_EMIT getBalancesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getBalancesSignalError(output, error_type, error_str);
        Q_EMIT getBalancesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountInformationServiceAISApi::getConsentAuthorisation(const QString &consent_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getConsentAuthorisation"][_serverIndices.value("getConsentAuthorisation")].URL()+"/v1/consents/{consentId}/authorisations");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString consent_idPathParam("{");
        consent_idPathParam.append("consentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "consentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"consentId"+pathSuffix : pathPrefix;
        fullPath.replace(consent_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(consent_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountInformationServiceAISApi::getConsentAuthorisationCallback);
    connect(this, &OAIAccountInformationServiceAISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountInformationServiceAISApi::getConsentAuthorisationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAuthorisations output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getConsentAuthorisationSignal(output);
        Q_EMIT getConsentAuthorisationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getConsentAuthorisationSignalE(output, error_type, error_str);
        Q_EMIT getConsentAuthorisationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getConsentAuthorisationSignalError(output, error_type, error_str);
        Q_EMIT getConsentAuthorisationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountInformationServiceAISApi::getConsentInformation(const QString &consent_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getConsentInformation"][_serverIndices.value("getConsentInformation")].URL()+"/v1/consents/{consentId}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString consent_idPathParam("{");
        consent_idPathParam.append("consentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "consentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"consentId"+pathSuffix : pathPrefix;
        fullPath.replace(consent_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(consent_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountInformationServiceAISApi::getConsentInformationCallback);
    connect(this, &OAIAccountInformationServiceAISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountInformationServiceAISApi::getConsentInformationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConsentInformationResponse_200_json output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getConsentInformationSignal(output);
        Q_EMIT getConsentInformationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getConsentInformationSignalE(output, error_type, error_str);
        Q_EMIT getConsentInformationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getConsentInformationSignalError(output, error_type, error_str);
        Q_EMIT getConsentInformationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountInformationServiceAISApi::getConsentScaStatus(const QString &consent_id, const QString &authorisation_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getConsentScaStatus"][_serverIndices.value("getConsentScaStatus")].URL()+"/v1/consents/{consentId}/authorisations/{authorisationId}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString consent_idPathParam("{");
        consent_idPathParam.append("consentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "consentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"consentId"+pathSuffix : pathPrefix;
        fullPath.replace(consent_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(consent_id)));
    }
    
    {
        QString authorisation_idPathParam("{");
        authorisation_idPathParam.append("authorisationId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "authorisationId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"authorisationId"+pathSuffix : pathPrefix;
        fullPath.replace(authorisation_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(authorisation_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountInformationServiceAISApi::getConsentScaStatusCallback);
    connect(this, &OAIAccountInformationServiceAISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountInformationServiceAISApi::getConsentScaStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIScaStatusResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getConsentScaStatusSignal(output);
        Q_EMIT getConsentScaStatusSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getConsentScaStatusSignalE(output, error_type, error_str);
        Q_EMIT getConsentScaStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getConsentScaStatusSignalError(output, error_type, error_str);
        Q_EMIT getConsentScaStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountInformationServiceAISApi::getConsentStatus(const QString &consent_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getConsentStatus"][_serverIndices.value("getConsentStatus")].URL()+"/v1/consents/{consentId}/status");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString consent_idPathParam("{");
        consent_idPathParam.append("consentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "consentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"consentId"+pathSuffix : pathPrefix;
        fullPath.replace(consent_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(consent_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountInformationServiceAISApi::getConsentStatusCallback);
    connect(this, &OAIAccountInformationServiceAISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountInformationServiceAISApi::getConsentStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIConsentStatusResponse_200 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getConsentStatusSignal(output);
        Q_EMIT getConsentStatusSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getConsentStatusSignalE(output, error_type, error_str);
        Q_EMIT getConsentStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getConsentStatusSignalError(output, error_type, error_str);
        Q_EMIT getConsentStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountInformationServiceAISApi::getTransactionDetails(const QString &account_id, const QString &transaction_id, const QString &x_request_id, const QString &consent_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getTransactionDetails"][_serverIndices.value("getTransactionDetails")].URL()+"/v1/accounts/{account-id}/transactions/{transactionId}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString account_idPathParam("{");
        account_idPathParam.append("account-id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account-id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account-id"+pathSuffix : pathPrefix;
        fullPath.replace(account_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_id)));
    }
    
    {
        QString transaction_idPathParam("{");
        transaction_idPathParam.append("transactionId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "transactionId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"transactionId"+pathSuffix : pathPrefix;
        fullPath.replace(transaction_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(transaction_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(consent_id).isEmpty()) {
            input.headers.insert("Consent-ID", ::OpenAPI::toStringValue(consent_id));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountInformationServiceAISApi::getTransactionDetailsCallback);
    connect(this, &OAIAccountInformationServiceAISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountInformationServiceAISApi::getTransactionDetailsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetTransactionDetails_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTransactionDetailsSignal(output);
        Q_EMIT getTransactionDetailsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTransactionDetailsSignalE(output, error_type, error_str);
        Q_EMIT getTransactionDetailsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTransactionDetailsSignalError(output, error_type, error_str);
        Q_EMIT getTransactionDetailsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountInformationServiceAISApi::getTransactionList(const QString &account_id, const QString &booking_status, const QString &x_request_id, const QString &consent_id, const ::OpenAPI::OptionalParam<QDate> &date_from, const ::OpenAPI::OptionalParam<QDate> &date_to, const ::OpenAPI::OptionalParam<QString> &entry_reference_from, const ::OpenAPI::OptionalParam<bool> &delta_list, const ::OpenAPI::OptionalParam<bool> &with_balance, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getTransactionList"][_serverIndices.value("getTransactionList")].URL()+"/v1/accounts/{account-id}/transactions");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString account_idPathParam("{");
        account_idPathParam.append("account-id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account-id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account-id"+pathSuffix : pathPrefix;
        fullPath.replace(account_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (date_from.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "dateFrom", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("dateFrom")).append(querySuffix).append(QUrl::toPercentEncoding(date_from.stringValue()));
    }
    if (date_to.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "dateTo", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("dateTo")).append(querySuffix).append(QUrl::toPercentEncoding(date_to.stringValue()));
    }
    if (entry_reference_from.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "entryReferenceFrom", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("entryReferenceFrom")).append(querySuffix).append(QUrl::toPercentEncoding(entry_reference_from.stringValue()));
    }
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "bookingStatus", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("bookingStatus")).append(querySuffix).append(QUrl::toPercentEncoding(booking_status));
    }
    if (delta_list.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "deltaList", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("deltaList")).append(querySuffix).append(QUrl::toPercentEncoding(delta_list.stringValue()));
    }
    if (with_balance.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "withBalance", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("withBalance")).append(querySuffix).append(QUrl::toPercentEncoding(with_balance.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(consent_id).isEmpty()) {
            input.headers.insert("Consent-ID", ::OpenAPI::toStringValue(consent_id));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountInformationServiceAISApi::getTransactionListCallback);
    connect(this, &OAIAccountInformationServiceAISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountInformationServiceAISApi::getTransactionListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITransactionsResponse_200_json output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTransactionListSignal(output);
        Q_EMIT getTransactionListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTransactionListSignalE(output, error_type, error_str);
        Q_EMIT getTransactionListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTransactionListSignalError(output, error_type, error_str);
        Q_EMIT getTransactionListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountInformationServiceAISApi::readAccountDetails(const QString &account_id, const QString &x_request_id, const QString &consent_id, const ::OpenAPI::OptionalParam<bool> &with_balance, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["readAccountDetails"][_serverIndices.value("readAccountDetails")].URL()+"/v1/accounts/{account-id}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString account_idPathParam("{");
        account_idPathParam.append("account-id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "account-id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"account-id"+pathSuffix : pathPrefix;
        fullPath.replace(account_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(account_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (with_balance.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "withBalance", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("withBalance")).append(querySuffix).append(QUrl::toPercentEncoding(with_balance.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(consent_id).isEmpty()) {
            input.headers.insert("Consent-ID", ::OpenAPI::toStringValue(consent_id));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountInformationServiceAISApi::readAccountDetailsCallback);
    connect(this, &OAIAccountInformationServiceAISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountInformationServiceAISApi::readAccountDetailsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIReadAccountDetails_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT readAccountDetailsSignal(output);
        Q_EMIT readAccountDetailsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT readAccountDetailsSignalE(output, error_type, error_str);
        Q_EMIT readAccountDetailsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT readAccountDetailsSignalError(output, error_type, error_str);
        Q_EMIT readAccountDetailsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountInformationServiceAISApi::startConsentAuthorisation(const QString &consent_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_id, const ::OpenAPI::OptionalParam<QString> &psu_id_type, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type, const ::OpenAPI::OptionalParam<bool> &tpp_redirect_preferred, const ::OpenAPI::OptionalParam<QString> &tpp_redirect_uri, const ::OpenAPI::OptionalParam<QString> &tpp_nok_redirect_uri, const ::OpenAPI::OptionalParam<QString> &tpp_notification_uri, const ::OpenAPI::OptionalParam<QString> &tpp_notification_content_preferred, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location, const ::OpenAPI::OptionalParam<OAIStartConsentAuthorisation_request> &oai_start_consent_authorisation_request) {
    QString fullPath = QString(_serverConfigs["startConsentAuthorisation"][_serverIndices.value("startConsentAuthorisation")].URL()+"/v1/consents/{consentId}/authorisations");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString consent_idPathParam("{");
        consent_idPathParam.append("consentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "consentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"consentId"+pathSuffix : pathPrefix;
        fullPath.replace(consent_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(consent_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_start_consent_authorisation_request.hasValue()){

        
        QByteArray output = oai_start_consent_authorisation_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id.value()).isEmpty()) {
            input.headers.insert("PSU-ID", ::OpenAPI::toStringValue(psu_id.value()));
        }
        }
    if (psu_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-ID-Type", ::OpenAPI::toStringValue(psu_id_type.value()));
        }
        }
    if (psu_corporate_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID", ::OpenAPI::toStringValue(psu_corporate_id.value()));
        }
        }
    if (psu_corporate_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID-Type", ::OpenAPI::toStringValue(psu_corporate_id_type.value()));
        }
        }
    if (tpp_redirect_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_redirect_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Redirect-Preferred", ::OpenAPI::toStringValue(tpp_redirect_preferred.value()));
        }
        }
    if (tpp_redirect_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_redirect_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Redirect-URI", ::OpenAPI::toStringValue(tpp_redirect_uri.value()));
        }
        }
    if (tpp_nok_redirect_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_nok_redirect_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Nok-Redirect-URI", ::OpenAPI::toStringValue(tpp_nok_redirect_uri.value()));
        }
        }
    if (tpp_notification_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_notification_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Notification-URI", ::OpenAPI::toStringValue(tpp_notification_uri.value()));
        }
        }
    if (tpp_notification_content_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_notification_content_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Notification-Content-Preferred", ::OpenAPI::toStringValue(tpp_notification_content_preferred.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountInformationServiceAISApi::startConsentAuthorisationCallback);
    connect(this, &OAIAccountInformationServiceAISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountInformationServiceAISApi::startConsentAuthorisationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIStartScaprocessResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT startConsentAuthorisationSignal(output);
        Q_EMIT startConsentAuthorisationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT startConsentAuthorisationSignalE(output, error_type, error_str);
        Q_EMIT startConsentAuthorisationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT startConsentAuthorisationSignalError(output, error_type, error_str);
        Q_EMIT startConsentAuthorisationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountInformationServiceAISApi::updateConsentsPsuData(const QString &consent_id, const QString &authorisation_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_id, const ::OpenAPI::OptionalParam<QString> &psu_id_type, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location, const ::OpenAPI::OptionalParam<OAIUpdateConsentsPsuData_request> &oai_update_consents_psu_data_request) {
    QString fullPath = QString(_serverConfigs["updateConsentsPsuData"][_serverIndices.value("updateConsentsPsuData")].URL()+"/v1/consents/{consentId}/authorisations/{authorisationId}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString consent_idPathParam("{");
        consent_idPathParam.append("consentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "consentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"consentId"+pathSuffix : pathPrefix;
        fullPath.replace(consent_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(consent_id)));
    }
    
    {
        QString authorisation_idPathParam("{");
        authorisation_idPathParam.append("authorisationId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "authorisationId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"authorisationId"+pathSuffix : pathPrefix;
        fullPath.replace(authorisation_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(authorisation_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (oai_update_consents_psu_data_request.hasValue()){

        
        QByteArray output = oai_update_consents_psu_data_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id.value()).isEmpty()) {
            input.headers.insert("PSU-ID", ::OpenAPI::toStringValue(psu_id.value()));
        }
        }
    if (psu_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-ID-Type", ::OpenAPI::toStringValue(psu_id_type.value()));
        }
        }
    if (psu_corporate_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID", ::OpenAPI::toStringValue(psu_corporate_id.value()));
        }
        }
    if (psu_corporate_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID-Type", ::OpenAPI::toStringValue(psu_corporate_id_type.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountInformationServiceAISApi::updateConsentsPsuDataCallback);
    connect(this, &OAIAccountInformationServiceAISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountInformationServiceAISApi::updateConsentsPsuDataCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUpdateConsentsPsuData_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateConsentsPsuDataSignal(output);
        Q_EMIT updateConsentsPsuDataSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateConsentsPsuDataSignalE(output, error_type, error_str);
        Q_EMIT updateConsentsPsuDataSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateConsentsPsuDataSignalError(output, error_type, error_str);
        Q_EMIT updateConsentsPsuDataSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountInformationServiceAISApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
