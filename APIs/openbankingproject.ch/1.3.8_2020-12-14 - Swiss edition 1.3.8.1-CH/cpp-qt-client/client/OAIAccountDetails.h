/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAccountDetails.h
 *
 * The ASPSP shall give at least one of the account reference identifiers:   - iban   - bban   - pan   - maskedPan   - msisdn If the account is a multicurrency account currency code in \&quot;currency\&quot; is set to \&quot;XXX\&quot;. 
 */

#ifndef OAIAccountDetails_H
#define OAIAccountDetails_H

#include <QJsonObject>

#include "OAIAccountStatus.h"
#include "OAIBalance.h"
#include "OAI_linksAccountDetails.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBalance;

class OAIAccountDetails : public OAIObject {
public:
    OAIAccountDetails();
    OAIAccountDetails(QString json);
    ~OAIAccountDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAI_linksAccountDetails getLinks() const;
    void setLinks(const OAI_linksAccountDetails &_links);
    bool is__links_Set() const;
    bool is__links_Valid() const;

    QList<OAIBalance> getBalances() const;
    void setBalances(const QList<OAIBalance> &balances);
    bool is_balances_Set() const;
    bool is_balances_Valid() const;

    QString getBban() const;
    void setBban(const QString &bban);
    bool is_bban_Set() const;
    bool is_bban_Valid() const;

    QString getBic() const;
    void setBic(const QString &bic);
    bool is_bic_Set() const;
    bool is_bic_Valid() const;

    QString getCashAccountType() const;
    void setCashAccountType(const QString &cash_account_type);
    bool is_cash_account_type_Set() const;
    bool is_cash_account_type_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QString getDetails() const;
    void setDetails(const QString &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getIban() const;
    void setIban(const QString &iban);
    bool is_iban_Set() const;
    bool is_iban_Valid() const;

    QString getLinkedAccounts() const;
    void setLinkedAccounts(const QString &linked_accounts);
    bool is_linked_accounts_Set() const;
    bool is_linked_accounts_Valid() const;

    QString getMsisdn() const;
    void setMsisdn(const QString &msisdn);
    bool is_msisdn_Set() const;
    bool is_msisdn_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOwnerName() const;
    void setOwnerName(const QString &owner_name);
    bool is_owner_name_Set() const;
    bool is_owner_name_Valid() const;

    QString getProduct() const;
    void setProduct(const QString &product);
    bool is_product_Set() const;
    bool is_product_Valid() const;

    QString getResourceId() const;
    void setResourceId(const QString &resource_id);
    bool is_resource_id_Set() const;
    bool is_resource_id_Valid() const;

    OAIAccountStatus getStatus() const;
    void setStatus(const OAIAccountStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getUsage() const;
    void setUsage(const QString &usage);
    bool is_usage_Set() const;
    bool is_usage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAI_linksAccountDetails m__links;
    bool m__links_isSet;
    bool m__links_isValid;

    QList<OAIBalance> m_balances;
    bool m_balances_isSet;
    bool m_balances_isValid;

    QString m_bban;
    bool m_bban_isSet;
    bool m_bban_isValid;

    QString m_bic;
    bool m_bic_isSet;
    bool m_bic_isValid;

    QString m_cash_account_type;
    bool m_cash_account_type_isSet;
    bool m_cash_account_type_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QString m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_iban;
    bool m_iban_isSet;
    bool m_iban_isValid;

    QString m_linked_accounts;
    bool m_linked_accounts_isSet;
    bool m_linked_accounts_isValid;

    QString m_msisdn;
    bool m_msisdn_isSet;
    bool m_msisdn_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_owner_name;
    bool m_owner_name_isSet;
    bool m_owner_name_isValid;

    QString m_product;
    bool m_product_isSet;
    bool m_product_isValid;

    QString m_resource_id;
    bool m_resource_id_isSet;
    bool m_resource_id_isValid;

    OAIAccountStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_usage;
    bool m_usage_isSet;
    bool m_usage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAccountDetails)

#endif // OAIAccountDetails_H
