/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISigningBasketsServiceSBSApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAISigningBasketsServiceSBSApi::OAISigningBasketsServiceSBSApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAISigningBasketsServiceSBSApi::~OAISigningBasketsServiceSBSApi() {
}

void OAISigningBasketsServiceSBSApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.dev.openbankingproject.ch"),
    "Open Banking Project Switzerland Developer Portal",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createSigningBasket", defaultConf);
    _serverIndices.insert("createSigningBasket", 0);
    _serverConfigs.insert("deleteSigningBasket", defaultConf);
    _serverIndices.insert("deleteSigningBasket", 0);
    _serverConfigs.insert("getSigningBasket", defaultConf);
    _serverIndices.insert("getSigningBasket", 0);
    _serverConfigs.insert("getSigningBasketAuthorisation", defaultConf);
    _serverIndices.insert("getSigningBasketAuthorisation", 0);
    _serverConfigs.insert("getSigningBasketScaStatus", defaultConf);
    _serverIndices.insert("getSigningBasketScaStatus", 0);
    _serverConfigs.insert("getSigningBasketStatus", defaultConf);
    _serverIndices.insert("getSigningBasketStatus", 0);
    _serverConfigs.insert("startSigningBasketAuthorisation", defaultConf);
    _serverIndices.insert("startSigningBasketAuthorisation", 0);
    _serverConfigs.insert("updateSigningBasketPsuData", defaultConf);
    _serverIndices.insert("updateSigningBasketPsuData", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAISigningBasketsServiceSBSApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAISigningBasketsServiceSBSApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAISigningBasketsServiceSBSApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAISigningBasketsServiceSBSApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAISigningBasketsServiceSBSApi::setUsername(const QString &username) {
    _username = username;
}

void OAISigningBasketsServiceSBSApi::setPassword(const QString &password) {
    _password = password;
}


void OAISigningBasketsServiceSBSApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAISigningBasketsServiceSBSApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAISigningBasketsServiceSBSApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAISigningBasketsServiceSBSApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAISigningBasketsServiceSBSApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAISigningBasketsServiceSBSApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAISigningBasketsServiceSBSApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAISigningBasketsServiceSBSApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAISigningBasketsServiceSBSApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAISigningBasketsServiceSBSApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAISigningBasketsServiceSBSApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAISigningBasketsServiceSBSApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAISigningBasketsServiceSBSApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAISigningBasketsServiceSBSApi::createSigningBasket(const QString &x_request_id, const QString &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_id, const ::OpenAPI::OptionalParam<QString> &psu_id_type, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type, const ::OpenAPI::OptionalParam<QString> &consent_id, const ::OpenAPI::OptionalParam<bool> &tpp_redirect_preferred, const ::OpenAPI::OptionalParam<QString> &tpp_redirect_uri, const ::OpenAPI::OptionalParam<QString> &tpp_nok_redirect_uri, const ::OpenAPI::OptionalParam<bool> &tpp_explicit_authorisation_preferred, const ::OpenAPI::OptionalParam<QString> &tpp_notification_uri, const ::OpenAPI::OptionalParam<QString> &tpp_notification_content_preferred, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location, const ::OpenAPI::OptionalParam<OAISigningBasket> &oai_signing_basket) {
    QString fullPath = QString(_serverConfigs["createSigningBasket"][_serverIndices.value("createSigningBasket")].URL()+"/v1/signing-baskets");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_signing_basket.hasValue()){

        
        QByteArray output = oai_signing_basket.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id.value()).isEmpty()) {
            input.headers.insert("PSU-ID", ::OpenAPI::toStringValue(psu_id.value()));
        }
        }
    if (psu_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-ID-Type", ::OpenAPI::toStringValue(psu_id_type.value()));
        }
        }
    if (psu_corporate_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID", ::OpenAPI::toStringValue(psu_corporate_id.value()));
        }
        }
    if (psu_corporate_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID-Type", ::OpenAPI::toStringValue(psu_corporate_id_type.value()));
        }
        }
    if (consent_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(consent_id.value()).isEmpty()) {
            input.headers.insert("Consent-ID", ::OpenAPI::toStringValue(consent_id.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(psu_ip_address).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address));
        }
        }
    if (tpp_redirect_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_redirect_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Redirect-Preferred", ::OpenAPI::toStringValue(tpp_redirect_preferred.value()));
        }
        }
    if (tpp_redirect_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_redirect_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Redirect-URI", ::OpenAPI::toStringValue(tpp_redirect_uri.value()));
        }
        }
    if (tpp_nok_redirect_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_nok_redirect_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Nok-Redirect-URI", ::OpenAPI::toStringValue(tpp_nok_redirect_uri.value()));
        }
        }
    if (tpp_explicit_authorisation_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_explicit_authorisation_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Explicit-Authorisation-Preferred", ::OpenAPI::toStringValue(tpp_explicit_authorisation_preferred.value()));
        }
        }
    if (tpp_notification_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_notification_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Notification-URI", ::OpenAPI::toStringValue(tpp_notification_uri.value()));
        }
        }
    if (tpp_notification_content_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_notification_content_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Notification-Content-Preferred", ::OpenAPI::toStringValue(tpp_notification_content_preferred.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISigningBasketsServiceSBSApi::createSigningBasketCallback);
    connect(this, &OAISigningBasketsServiceSBSApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISigningBasketsServiceSBSApi::createSigningBasketCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISigningBasketResponse_201 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createSigningBasketSignal(output);
        Q_EMIT createSigningBasketSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createSigningBasketSignalE(output, error_type, error_str);
        Q_EMIT createSigningBasketSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createSigningBasketSignalError(output, error_type, error_str);
        Q_EMIT createSigningBasketSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISigningBasketsServiceSBSApi::deleteSigningBasket(const QString &basket_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["deleteSigningBasket"][_serverIndices.value("deleteSigningBasket")].URL()+"/v1/signing-baskets/{basketId}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString basket_idPathParam("{");
        basket_idPathParam.append("basketId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "basketId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"basketId"+pathSuffix : pathPrefix;
        fullPath.replace(basket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(basket_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISigningBasketsServiceSBSApi::deleteSigningBasketCallback);
    connect(this, &OAISigningBasketsServiceSBSApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISigningBasketsServiceSBSApi::deleteSigningBasketCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteSigningBasketSignal();
        Q_EMIT deleteSigningBasketSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteSigningBasketSignalE(error_type, error_str);
        Q_EMIT deleteSigningBasketSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteSigningBasketSignalError(error_type, error_str);
        Q_EMIT deleteSigningBasketSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISigningBasketsServiceSBSApi::getSigningBasket(const QString &basket_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getSigningBasket"][_serverIndices.value("getSigningBasket")].URL()+"/v1/signing-baskets/{basketId}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString basket_idPathParam("{");
        basket_idPathParam.append("basketId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "basketId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"basketId"+pathSuffix : pathPrefix;
        fullPath.replace(basket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(basket_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISigningBasketsServiceSBSApi::getSigningBasketCallback);
    connect(this, &OAISigningBasketsServiceSBSApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISigningBasketsServiceSBSApi::getSigningBasketCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISigningBasketResponse_200 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getSigningBasketSignal(output);
        Q_EMIT getSigningBasketSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getSigningBasketSignalE(output, error_type, error_str);
        Q_EMIT getSigningBasketSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getSigningBasketSignalError(output, error_type, error_str);
        Q_EMIT getSigningBasketSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISigningBasketsServiceSBSApi::getSigningBasketAuthorisation(const QString &basket_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getSigningBasketAuthorisation"][_serverIndices.value("getSigningBasketAuthorisation")].URL()+"/v1/signing-baskets/{basketId}/authorisations");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString basket_idPathParam("{");
        basket_idPathParam.append("basketId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "basketId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"basketId"+pathSuffix : pathPrefix;
        fullPath.replace(basket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(basket_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISigningBasketsServiceSBSApi::getSigningBasketAuthorisationCallback);
    connect(this, &OAISigningBasketsServiceSBSApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISigningBasketsServiceSBSApi::getSigningBasketAuthorisationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAuthorisations output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getSigningBasketAuthorisationSignal(output);
        Q_EMIT getSigningBasketAuthorisationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getSigningBasketAuthorisationSignalE(output, error_type, error_str);
        Q_EMIT getSigningBasketAuthorisationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getSigningBasketAuthorisationSignalError(output, error_type, error_str);
        Q_EMIT getSigningBasketAuthorisationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISigningBasketsServiceSBSApi::getSigningBasketScaStatus(const QString &basket_id, const QString &authorisation_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getSigningBasketScaStatus"][_serverIndices.value("getSigningBasketScaStatus")].URL()+"/v1/signing-baskets/{basketId}/authorisations/{authorisationId}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString basket_idPathParam("{");
        basket_idPathParam.append("basketId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "basketId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"basketId"+pathSuffix : pathPrefix;
        fullPath.replace(basket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(basket_id)));
    }
    
    {
        QString authorisation_idPathParam("{");
        authorisation_idPathParam.append("authorisationId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "authorisationId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"authorisationId"+pathSuffix : pathPrefix;
        fullPath.replace(authorisation_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(authorisation_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISigningBasketsServiceSBSApi::getSigningBasketScaStatusCallback);
    connect(this, &OAISigningBasketsServiceSBSApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISigningBasketsServiceSBSApi::getSigningBasketScaStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIScaStatusResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getSigningBasketScaStatusSignal(output);
        Q_EMIT getSigningBasketScaStatusSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getSigningBasketScaStatusSignalE(output, error_type, error_str);
        Q_EMIT getSigningBasketScaStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getSigningBasketScaStatusSignalError(output, error_type, error_str);
        Q_EMIT getSigningBasketScaStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISigningBasketsServiceSBSApi::getSigningBasketStatus(const QString &basket_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_id, const ::OpenAPI::OptionalParam<QString> &psu_id_type, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getSigningBasketStatus"][_serverIndices.value("getSigningBasketStatus")].URL()+"/v1/signing-baskets/{basketId}/status");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString basket_idPathParam("{");
        basket_idPathParam.append("basketId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "basketId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"basketId"+pathSuffix : pathPrefix;
        fullPath.replace(basket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(basket_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id.value()).isEmpty()) {
            input.headers.insert("PSU-ID", ::OpenAPI::toStringValue(psu_id.value()));
        }
        }
    if (psu_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-ID-Type", ::OpenAPI::toStringValue(psu_id_type.value()));
        }
        }
    if (psu_corporate_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID", ::OpenAPI::toStringValue(psu_corporate_id.value()));
        }
        }
    if (psu_corporate_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID-Type", ::OpenAPI::toStringValue(psu_corporate_id_type.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISigningBasketsServiceSBSApi::getSigningBasketStatusCallback);
    connect(this, &OAISigningBasketsServiceSBSApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISigningBasketsServiceSBSApi::getSigningBasketStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISigningBasketStatusResponse_200 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getSigningBasketStatusSignal(output);
        Q_EMIT getSigningBasketStatusSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getSigningBasketStatusSignalE(output, error_type, error_str);
        Q_EMIT getSigningBasketStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getSigningBasketStatusSignalError(output, error_type, error_str);
        Q_EMIT getSigningBasketStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISigningBasketsServiceSBSApi::startSigningBasketAuthorisation(const QString &basket_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_id, const ::OpenAPI::OptionalParam<QString> &psu_id_type, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type, const ::OpenAPI::OptionalParam<bool> &tpp_redirect_preferred, const ::OpenAPI::OptionalParam<QString> &tpp_redirect_uri, const ::OpenAPI::OptionalParam<QString> &tpp_nok_redirect_uri, const ::OpenAPI::OptionalParam<QString> &tpp_notification_uri, const ::OpenAPI::OptionalParam<QString> &tpp_notification_content_preferred, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location, const ::OpenAPI::OptionalParam<OAIStartConsentAuthorisation_request> &oai_start_consent_authorisation_request) {
    QString fullPath = QString(_serverConfigs["startSigningBasketAuthorisation"][_serverIndices.value("startSigningBasketAuthorisation")].URL()+"/v1/signing-baskets/{basketId}/authorisations");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString basket_idPathParam("{");
        basket_idPathParam.append("basketId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "basketId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"basketId"+pathSuffix : pathPrefix;
        fullPath.replace(basket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(basket_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_start_consent_authorisation_request.hasValue()){

        
        QByteArray output = oai_start_consent_authorisation_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id.value()).isEmpty()) {
            input.headers.insert("PSU-ID", ::OpenAPI::toStringValue(psu_id.value()));
        }
        }
    if (psu_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-ID-Type", ::OpenAPI::toStringValue(psu_id_type.value()));
        }
        }
    if (psu_corporate_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID", ::OpenAPI::toStringValue(psu_corporate_id.value()));
        }
        }
    if (psu_corporate_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID-Type", ::OpenAPI::toStringValue(psu_corporate_id_type.value()));
        }
        }
    if (tpp_redirect_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_redirect_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Redirect-Preferred", ::OpenAPI::toStringValue(tpp_redirect_preferred.value()));
        }
        }
    if (tpp_redirect_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_redirect_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Redirect-URI", ::OpenAPI::toStringValue(tpp_redirect_uri.value()));
        }
        }
    if (tpp_nok_redirect_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_nok_redirect_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Nok-Redirect-URI", ::OpenAPI::toStringValue(tpp_nok_redirect_uri.value()));
        }
        }
    if (tpp_notification_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_notification_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Notification-URI", ::OpenAPI::toStringValue(tpp_notification_uri.value()));
        }
        }
    if (tpp_notification_content_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_notification_content_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Notification-Content-Preferred", ::OpenAPI::toStringValue(tpp_notification_content_preferred.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISigningBasketsServiceSBSApi::startSigningBasketAuthorisationCallback);
    connect(this, &OAISigningBasketsServiceSBSApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISigningBasketsServiceSBSApi::startSigningBasketAuthorisationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIStartScaprocessResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT startSigningBasketAuthorisationSignal(output);
        Q_EMIT startSigningBasketAuthorisationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT startSigningBasketAuthorisationSignalE(output, error_type, error_str);
        Q_EMIT startSigningBasketAuthorisationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT startSigningBasketAuthorisationSignalError(output, error_type, error_str);
        Q_EMIT startSigningBasketAuthorisationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISigningBasketsServiceSBSApi::updateSigningBasketPsuData(const QString &basket_id, const QString &authorisation_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_id, const ::OpenAPI::OptionalParam<QString> &psu_id_type, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location, const ::OpenAPI::OptionalParam<OAIUpdateConsentsPsuData_request> &oai_update_consents_psu_data_request) {
    QString fullPath = QString(_serverConfigs["updateSigningBasketPsuData"][_serverIndices.value("updateSigningBasketPsuData")].URL()+"/v1/signing-baskets/{basketId}/authorisations/{authorisationId}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString basket_idPathParam("{");
        basket_idPathParam.append("basketId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "basketId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"basketId"+pathSuffix : pathPrefix;
        fullPath.replace(basket_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(basket_id)));
    }
    
    {
        QString authorisation_idPathParam("{");
        authorisation_idPathParam.append("authorisationId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "authorisationId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"authorisationId"+pathSuffix : pathPrefix;
        fullPath.replace(authorisation_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(authorisation_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (oai_update_consents_psu_data_request.hasValue()){

        
        QByteArray output = oai_update_consents_psu_data_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id.value()).isEmpty()) {
            input.headers.insert("PSU-ID", ::OpenAPI::toStringValue(psu_id.value()));
        }
        }
    if (psu_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-ID-Type", ::OpenAPI::toStringValue(psu_id_type.value()));
        }
        }
    if (psu_corporate_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID", ::OpenAPI::toStringValue(psu_corporate_id.value()));
        }
        }
    if (psu_corporate_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID-Type", ::OpenAPI::toStringValue(psu_corporate_id_type.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAISigningBasketsServiceSBSApi::updateSigningBasketPsuDataCallback);
    connect(this, &OAISigningBasketsServiceSBSApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAISigningBasketsServiceSBSApi::updateSigningBasketPsuDataCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUpdateConsentsPsuData_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateSigningBasketPsuDataSignal(output);
        Q_EMIT updateSigningBasketPsuDataSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateSigningBasketPsuDataSignalE(output, error_type, error_str);
        Q_EMIT updateSigningBasketPsuDataSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateSigningBasketPsuDataSignalError(output, error_type, error_str);
        Q_EMIT updateSigningBasketPsuDataSignalErrorFull(worker, error_type, error_str);
    }
}

void OAISigningBasketsServiceSBSApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
