/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPaymentInformation_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPaymentInformation_200_response::OAIGetPaymentInformation_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPaymentInformation_200_response::OAIGetPaymentInformation_200_response() {
    this->initializeModel();
}

OAIGetPaymentInformation_200_response::~OAIGetPaymentInformation_200_response() {}

void OAIGetPaymentInformation_200_response::initializeModel() {

    m_creditor_account_isSet = false;
    m_creditor_account_isValid = false;

    m_creditor_address_isSet = false;
    m_creditor_address_isValid = false;

    m_creditor_agent_isSet = false;
    m_creditor_agent_isValid = false;

    m_creditor_name_isSet = false;
    m_creditor_name_isValid = false;

    m_debtor_account_isSet = false;
    m_debtor_account_isValid = false;

    m_end_to_end_identification_isSet = false;
    m_end_to_end_identification_isValid = false;

    m_instructed_amount_isSet = false;
    m_instructed_amount_isValid = false;

    m_purpose_code_isSet = false;
    m_purpose_code_isValid = false;

    m_remittance_information_structured_isSet = false;
    m_remittance_information_structured_isValid = false;

    m_remittance_information_unstructured_isSet = false;
    m_remittance_information_unstructured_isValid = false;

    m_remittance_information_unstructured_array_isSet = false;
    m_remittance_information_unstructured_array_isValid = false;

    m_requested_execution_date_isSet = false;
    m_requested_execution_date_isValid = false;

    m_requested_execution_time_isSet = false;
    m_requested_execution_time_isValid = false;

    m_transaction_status_isSet = false;
    m_transaction_status_isValid = false;

    m_ultimate_creditor_isSet = false;
    m_ultimate_creditor_isValid = false;

    m_ultimate_debtor_isSet = false;
    m_ultimate_debtor_isValid = false;

    m_day_of_execution_isSet = false;
    m_day_of_execution_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_execution_rule_isSet = false;
    m_execution_rule_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_acceptor_transaction_date_time_isSet = false;
    m_acceptor_transaction_date_time_isValid = false;

    m_batch_booking_preferred_isSet = false;
    m_batch_booking_preferred_isValid = false;

    m_payment_information_id_isSet = false;
    m_payment_information_id_isValid = false;

    m_payments_isSet = false;
    m_payments_isValid = false;
}

void OAIGetPaymentInformation_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPaymentInformation_200_response::fromJsonObject(QJsonObject json) {

    m_creditor_account_isValid = ::OpenAPI::fromJsonValue(m_creditor_account, json[QString("creditorAccount")]);
    m_creditor_account_isSet = !json[QString("creditorAccount")].isNull() && m_creditor_account_isValid;

    m_creditor_address_isValid = ::OpenAPI::fromJsonValue(m_creditor_address, json[QString("creditorAddress")]);
    m_creditor_address_isSet = !json[QString("creditorAddress")].isNull() && m_creditor_address_isValid;

    m_creditor_agent_isValid = ::OpenAPI::fromJsonValue(m_creditor_agent, json[QString("creditorAgent")]);
    m_creditor_agent_isSet = !json[QString("creditorAgent")].isNull() && m_creditor_agent_isValid;

    m_creditor_name_isValid = ::OpenAPI::fromJsonValue(m_creditor_name, json[QString("creditorName")]);
    m_creditor_name_isSet = !json[QString("creditorName")].isNull() && m_creditor_name_isValid;

    m_debtor_account_isValid = ::OpenAPI::fromJsonValue(m_debtor_account, json[QString("debtorAccount")]);
    m_debtor_account_isSet = !json[QString("debtorAccount")].isNull() && m_debtor_account_isValid;

    m_end_to_end_identification_isValid = ::OpenAPI::fromJsonValue(m_end_to_end_identification, json[QString("endToEndIdentification")]);
    m_end_to_end_identification_isSet = !json[QString("endToEndIdentification")].isNull() && m_end_to_end_identification_isValid;

    m_instructed_amount_isValid = ::OpenAPI::fromJsonValue(m_instructed_amount, json[QString("instructedAmount")]);
    m_instructed_amount_isSet = !json[QString("instructedAmount")].isNull() && m_instructed_amount_isValid;

    m_purpose_code_isValid = ::OpenAPI::fromJsonValue(m_purpose_code, json[QString("purposeCode")]);
    m_purpose_code_isSet = !json[QString("purposeCode")].isNull() && m_purpose_code_isValid;

    m_remittance_information_structured_isValid = ::OpenAPI::fromJsonValue(m_remittance_information_structured, json[QString("remittanceInformationStructured")]);
    m_remittance_information_structured_isSet = !json[QString("remittanceInformationStructured")].isNull() && m_remittance_information_structured_isValid;

    m_remittance_information_unstructured_isValid = ::OpenAPI::fromJsonValue(m_remittance_information_unstructured, json[QString("remittanceInformationUnstructured")]);
    m_remittance_information_unstructured_isSet = !json[QString("remittanceInformationUnstructured")].isNull() && m_remittance_information_unstructured_isValid;

    m_remittance_information_unstructured_array_isValid = ::OpenAPI::fromJsonValue(m_remittance_information_unstructured_array, json[QString("remittanceInformationUnstructuredArray")]);
    m_remittance_information_unstructured_array_isSet = !json[QString("remittanceInformationUnstructuredArray")].isNull() && m_remittance_information_unstructured_array_isValid;

    m_requested_execution_date_isValid = ::OpenAPI::fromJsonValue(m_requested_execution_date, json[QString("requestedExecutionDate")]);
    m_requested_execution_date_isSet = !json[QString("requestedExecutionDate")].isNull() && m_requested_execution_date_isValid;

    m_requested_execution_time_isValid = ::OpenAPI::fromJsonValue(m_requested_execution_time, json[QString("requestedExecutionTime")]);
    m_requested_execution_time_isSet = !json[QString("requestedExecutionTime")].isNull() && m_requested_execution_time_isValid;

    m_transaction_status_isValid = ::OpenAPI::fromJsonValue(m_transaction_status, json[QString("transactionStatus")]);
    m_transaction_status_isSet = !json[QString("transactionStatus")].isNull() && m_transaction_status_isValid;

    m_ultimate_creditor_isValid = ::OpenAPI::fromJsonValue(m_ultimate_creditor, json[QString("ultimateCreditor")]);
    m_ultimate_creditor_isSet = !json[QString("ultimateCreditor")].isNull() && m_ultimate_creditor_isValid;

    m_ultimate_debtor_isValid = ::OpenAPI::fromJsonValue(m_ultimate_debtor, json[QString("ultimateDebtor")]);
    m_ultimate_debtor_isSet = !json[QString("ultimateDebtor")].isNull() && m_ultimate_debtor_isValid;

    m_day_of_execution_isValid = ::OpenAPI::fromJsonValue(m_day_of_execution, json[QString("dayOfExecution")]);
    m_day_of_execution_isSet = !json[QString("dayOfExecution")].isNull() && m_day_of_execution_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_execution_rule_isValid = ::OpenAPI::fromJsonValue(m_execution_rule, json[QString("executionRule")]);
    m_execution_rule_isSet = !json[QString("executionRule")].isNull() && m_execution_rule_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_acceptor_transaction_date_time_isValid = ::OpenAPI::fromJsonValue(m_acceptor_transaction_date_time, json[QString("acceptorTransactionDateTime")]);
    m_acceptor_transaction_date_time_isSet = !json[QString("acceptorTransactionDateTime")].isNull() && m_acceptor_transaction_date_time_isValid;

    m_batch_booking_preferred_isValid = ::OpenAPI::fromJsonValue(m_batch_booking_preferred, json[QString("batchBookingPreferred")]);
    m_batch_booking_preferred_isSet = !json[QString("batchBookingPreferred")].isNull() && m_batch_booking_preferred_isValid;

    m_payment_information_id_isValid = ::OpenAPI::fromJsonValue(m_payment_information_id, json[QString("paymentInformationId")]);
    m_payment_information_id_isSet = !json[QString("paymentInformationId")].isNull() && m_payment_information_id_isValid;

    m_payments_isValid = ::OpenAPI::fromJsonValue(m_payments, json[QString("payments")]);
    m_payments_isSet = !json[QString("payments")].isNull() && m_payments_isValid;
}

QString OAIGetPaymentInformation_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPaymentInformation_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_creditor_account.isSet()) {
        obj.insert(QString("creditorAccount"), ::OpenAPI::toJsonValue(m_creditor_account));
    }
    if (m_creditor_address.isSet()) {
        obj.insert(QString("creditorAddress"), ::OpenAPI::toJsonValue(m_creditor_address));
    }
    if (m_creditor_agent.isSet()) {
        obj.insert(QString("creditorAgent"), ::OpenAPI::toJsonValue(m_creditor_agent));
    }
    if (m_creditor_name_isSet) {
        obj.insert(QString("creditorName"), ::OpenAPI::toJsonValue(m_creditor_name));
    }
    if (m_debtor_account.isSet()) {
        obj.insert(QString("debtorAccount"), ::OpenAPI::toJsonValue(m_debtor_account));
    }
    if (m_end_to_end_identification_isSet) {
        obj.insert(QString("endToEndIdentification"), ::OpenAPI::toJsonValue(m_end_to_end_identification));
    }
    if (m_instructed_amount.isSet()) {
        obj.insert(QString("instructedAmount"), ::OpenAPI::toJsonValue(m_instructed_amount));
    }
    if (m_purpose_code.isSet()) {
        obj.insert(QString("purposeCode"), ::OpenAPI::toJsonValue(m_purpose_code));
    }
    if (m_remittance_information_structured.isSet()) {
        obj.insert(QString("remittanceInformationStructured"), ::OpenAPI::toJsonValue(m_remittance_information_structured));
    }
    if (m_remittance_information_unstructured_isSet) {
        obj.insert(QString("remittanceInformationUnstructured"), ::OpenAPI::toJsonValue(m_remittance_information_unstructured));
    }
    if (m_remittance_information_unstructured_array.size() > 0) {
        obj.insert(QString("remittanceInformationUnstructuredArray"), ::OpenAPI::toJsonValue(m_remittance_information_unstructured_array));
    }
    if (m_requested_execution_date_isSet) {
        obj.insert(QString("requestedExecutionDate"), ::OpenAPI::toJsonValue(m_requested_execution_date));
    }
    if (m_requested_execution_time_isSet) {
        obj.insert(QString("requestedExecutionTime"), ::OpenAPI::toJsonValue(m_requested_execution_time));
    }
    if (m_transaction_status.isSet()) {
        obj.insert(QString("transactionStatus"), ::OpenAPI::toJsonValue(m_transaction_status));
    }
    if (m_ultimate_creditor_isSet) {
        obj.insert(QString("ultimateCreditor"), ::OpenAPI::toJsonValue(m_ultimate_creditor));
    }
    if (m_ultimate_debtor_isSet) {
        obj.insert(QString("ultimateDebtor"), ::OpenAPI::toJsonValue(m_ultimate_debtor));
    }
    if (m_day_of_execution.isSet()) {
        obj.insert(QString("dayOfExecution"), ::OpenAPI::toJsonValue(m_day_of_execution));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_execution_rule.isSet()) {
        obj.insert(QString("executionRule"), ::OpenAPI::toJsonValue(m_execution_rule));
    }
    if (m_frequency.isSet()) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_acceptor_transaction_date_time_isSet) {
        obj.insert(QString("acceptorTransactionDateTime"), ::OpenAPI::toJsonValue(m_acceptor_transaction_date_time));
    }
    if (m_batch_booking_preferred_isSet) {
        obj.insert(QString("batchBookingPreferred"), ::OpenAPI::toJsonValue(m_batch_booking_preferred));
    }
    if (m_payment_information_id_isSet) {
        obj.insert(QString("paymentInformationId"), ::OpenAPI::toJsonValue(m_payment_information_id));
    }
    if (m_payments.size() > 0) {
        obj.insert(QString("payments"), ::OpenAPI::toJsonValue(m_payments));
    }
    return obj;
}

OAIAccountReference16_CH OAIGetPaymentInformation_200_response::getCreditorAccount() const {
    return m_creditor_account;
}
void OAIGetPaymentInformation_200_response::setCreditorAccount(const OAIAccountReference16_CH &creditor_account) {
    m_creditor_account = creditor_account;
    m_creditor_account_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_creditor_account_Set() const{
    return m_creditor_account_isSet;
}

bool OAIGetPaymentInformation_200_response::is_creditor_account_Valid() const{
    return m_creditor_account_isValid;
}

OAIAddress OAIGetPaymentInformation_200_response::getCreditorAddress() const {
    return m_creditor_address;
}
void OAIGetPaymentInformation_200_response::setCreditorAddress(const OAIAddress &creditor_address) {
    m_creditor_address = creditor_address;
    m_creditor_address_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_creditor_address_Set() const{
    return m_creditor_address_isSet;
}

bool OAIGetPaymentInformation_200_response::is_creditor_address_Valid() const{
    return m_creditor_address_isValid;
}

OAICreditorAgent7_CH OAIGetPaymentInformation_200_response::getCreditorAgent() const {
    return m_creditor_agent;
}
void OAIGetPaymentInformation_200_response::setCreditorAgent(const OAICreditorAgent7_CH &creditor_agent) {
    m_creditor_agent = creditor_agent;
    m_creditor_agent_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_creditor_agent_Set() const{
    return m_creditor_agent_isSet;
}

bool OAIGetPaymentInformation_200_response::is_creditor_agent_Valid() const{
    return m_creditor_agent_isValid;
}

QString OAIGetPaymentInformation_200_response::getCreditorName() const {
    return m_creditor_name;
}
void OAIGetPaymentInformation_200_response::setCreditorName(const QString &creditor_name) {
    m_creditor_name = creditor_name;
    m_creditor_name_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_creditor_name_Set() const{
    return m_creditor_name_isSet;
}

bool OAIGetPaymentInformation_200_response::is_creditor_name_Valid() const{
    return m_creditor_name_isValid;
}

OAIAccountReference16_CH OAIGetPaymentInformation_200_response::getDebtorAccount() const {
    return m_debtor_account;
}
void OAIGetPaymentInformation_200_response::setDebtorAccount(const OAIAccountReference16_CH &debtor_account) {
    m_debtor_account = debtor_account;
    m_debtor_account_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_debtor_account_Set() const{
    return m_debtor_account_isSet;
}

bool OAIGetPaymentInformation_200_response::is_debtor_account_Valid() const{
    return m_debtor_account_isValid;
}

QString OAIGetPaymentInformation_200_response::getEndToEndIdentification() const {
    return m_end_to_end_identification;
}
void OAIGetPaymentInformation_200_response::setEndToEndIdentification(const QString &end_to_end_identification) {
    m_end_to_end_identification = end_to_end_identification;
    m_end_to_end_identification_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_end_to_end_identification_Set() const{
    return m_end_to_end_identification_isSet;
}

bool OAIGetPaymentInformation_200_response::is_end_to_end_identification_Valid() const{
    return m_end_to_end_identification_isValid;
}

OAIAmount OAIGetPaymentInformation_200_response::getInstructedAmount() const {
    return m_instructed_amount;
}
void OAIGetPaymentInformation_200_response::setInstructedAmount(const OAIAmount &instructed_amount) {
    m_instructed_amount = instructed_amount;
    m_instructed_amount_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_instructed_amount_Set() const{
    return m_instructed_amount_isSet;
}

bool OAIGetPaymentInformation_200_response::is_instructed_amount_Valid() const{
    return m_instructed_amount_isValid;
}

OAIPurposeCode OAIGetPaymentInformation_200_response::getPurposeCode() const {
    return m_purpose_code;
}
void OAIGetPaymentInformation_200_response::setPurposeCode(const OAIPurposeCode &purpose_code) {
    m_purpose_code = purpose_code;
    m_purpose_code_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_purpose_code_Set() const{
    return m_purpose_code_isSet;
}

bool OAIGetPaymentInformation_200_response::is_purpose_code_Valid() const{
    return m_purpose_code_isValid;
}

OAIRemittanceInformationStructured OAIGetPaymentInformation_200_response::getRemittanceInformationStructured() const {
    return m_remittance_information_structured;
}
void OAIGetPaymentInformation_200_response::setRemittanceInformationStructured(const OAIRemittanceInformationStructured &remittance_information_structured) {
    m_remittance_information_structured = remittance_information_structured;
    m_remittance_information_structured_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_remittance_information_structured_Set() const{
    return m_remittance_information_structured_isSet;
}

bool OAIGetPaymentInformation_200_response::is_remittance_information_structured_Valid() const{
    return m_remittance_information_structured_isValid;
}

QString OAIGetPaymentInformation_200_response::getRemittanceInformationUnstructured() const {
    return m_remittance_information_unstructured;
}
void OAIGetPaymentInformation_200_response::setRemittanceInformationUnstructured(const QString &remittance_information_unstructured) {
    m_remittance_information_unstructured = remittance_information_unstructured;
    m_remittance_information_unstructured_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_remittance_information_unstructured_Set() const{
    return m_remittance_information_unstructured_isSet;
}

bool OAIGetPaymentInformation_200_response::is_remittance_information_unstructured_Valid() const{
    return m_remittance_information_unstructured_isValid;
}

QList<QString> OAIGetPaymentInformation_200_response::getRemittanceInformationUnstructuredArray() const {
    return m_remittance_information_unstructured_array;
}
void OAIGetPaymentInformation_200_response::setRemittanceInformationUnstructuredArray(const QList<QString> &remittance_information_unstructured_array) {
    m_remittance_information_unstructured_array = remittance_information_unstructured_array;
    m_remittance_information_unstructured_array_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_remittance_information_unstructured_array_Set() const{
    return m_remittance_information_unstructured_array_isSet;
}

bool OAIGetPaymentInformation_200_response::is_remittance_information_unstructured_array_Valid() const{
    return m_remittance_information_unstructured_array_isValid;
}

QDate OAIGetPaymentInformation_200_response::getRequestedExecutionDate() const {
    return m_requested_execution_date;
}
void OAIGetPaymentInformation_200_response::setRequestedExecutionDate(const QDate &requested_execution_date) {
    m_requested_execution_date = requested_execution_date;
    m_requested_execution_date_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_requested_execution_date_Set() const{
    return m_requested_execution_date_isSet;
}

bool OAIGetPaymentInformation_200_response::is_requested_execution_date_Valid() const{
    return m_requested_execution_date_isValid;
}

QDateTime OAIGetPaymentInformation_200_response::getRequestedExecutionTime() const {
    return m_requested_execution_time;
}
void OAIGetPaymentInformation_200_response::setRequestedExecutionTime(const QDateTime &requested_execution_time) {
    m_requested_execution_time = requested_execution_time;
    m_requested_execution_time_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_requested_execution_time_Set() const{
    return m_requested_execution_time_isSet;
}

bool OAIGetPaymentInformation_200_response::is_requested_execution_time_Valid() const{
    return m_requested_execution_time_isValid;
}

OAITransactionStatus OAIGetPaymentInformation_200_response::getTransactionStatus() const {
    return m_transaction_status;
}
void OAIGetPaymentInformation_200_response::setTransactionStatus(const OAITransactionStatus &transaction_status) {
    m_transaction_status = transaction_status;
    m_transaction_status_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_transaction_status_Set() const{
    return m_transaction_status_isSet;
}

bool OAIGetPaymentInformation_200_response::is_transaction_status_Valid() const{
    return m_transaction_status_isValid;
}

QString OAIGetPaymentInformation_200_response::getUltimateCreditor() const {
    return m_ultimate_creditor;
}
void OAIGetPaymentInformation_200_response::setUltimateCreditor(const QString &ultimate_creditor) {
    m_ultimate_creditor = ultimate_creditor;
    m_ultimate_creditor_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_ultimate_creditor_Set() const{
    return m_ultimate_creditor_isSet;
}

bool OAIGetPaymentInformation_200_response::is_ultimate_creditor_Valid() const{
    return m_ultimate_creditor_isValid;
}

QString OAIGetPaymentInformation_200_response::getUltimateDebtor() const {
    return m_ultimate_debtor;
}
void OAIGetPaymentInformation_200_response::setUltimateDebtor(const QString &ultimate_debtor) {
    m_ultimate_debtor = ultimate_debtor;
    m_ultimate_debtor_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_ultimate_debtor_Set() const{
    return m_ultimate_debtor_isSet;
}

bool OAIGetPaymentInformation_200_response::is_ultimate_debtor_Valid() const{
    return m_ultimate_debtor_isValid;
}

OAIDayOfExecution OAIGetPaymentInformation_200_response::getDayOfExecution() const {
    return m_day_of_execution;
}
void OAIGetPaymentInformation_200_response::setDayOfExecution(const OAIDayOfExecution &day_of_execution) {
    m_day_of_execution = day_of_execution;
    m_day_of_execution_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_day_of_execution_Set() const{
    return m_day_of_execution_isSet;
}

bool OAIGetPaymentInformation_200_response::is_day_of_execution_Valid() const{
    return m_day_of_execution_isValid;
}

QDate OAIGetPaymentInformation_200_response::getEndDate() const {
    return m_end_date;
}
void OAIGetPaymentInformation_200_response::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIGetPaymentInformation_200_response::is_end_date_Valid() const{
    return m_end_date_isValid;
}

OAIExecutionRule OAIGetPaymentInformation_200_response::getExecutionRule() const {
    return m_execution_rule;
}
void OAIGetPaymentInformation_200_response::setExecutionRule(const OAIExecutionRule &execution_rule) {
    m_execution_rule = execution_rule;
    m_execution_rule_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_execution_rule_Set() const{
    return m_execution_rule_isSet;
}

bool OAIGetPaymentInformation_200_response::is_execution_rule_Valid() const{
    return m_execution_rule_isValid;
}

OAIFrequencyCode OAIGetPaymentInformation_200_response::getFrequency() const {
    return m_frequency;
}
void OAIGetPaymentInformation_200_response::setFrequency(const OAIFrequencyCode &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIGetPaymentInformation_200_response::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QDate OAIGetPaymentInformation_200_response::getStartDate() const {
    return m_start_date;
}
void OAIGetPaymentInformation_200_response::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIGetPaymentInformation_200_response::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QDateTime OAIGetPaymentInformation_200_response::getAcceptorTransactionDateTime() const {
    return m_acceptor_transaction_date_time;
}
void OAIGetPaymentInformation_200_response::setAcceptorTransactionDateTime(const QDateTime &acceptor_transaction_date_time) {
    m_acceptor_transaction_date_time = acceptor_transaction_date_time;
    m_acceptor_transaction_date_time_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_acceptor_transaction_date_time_Set() const{
    return m_acceptor_transaction_date_time_isSet;
}

bool OAIGetPaymentInformation_200_response::is_acceptor_transaction_date_time_Valid() const{
    return m_acceptor_transaction_date_time_isValid;
}

bool OAIGetPaymentInformation_200_response::isBatchBookingPreferred() const {
    return m_batch_booking_preferred;
}
void OAIGetPaymentInformation_200_response::setBatchBookingPreferred(const bool &batch_booking_preferred) {
    m_batch_booking_preferred = batch_booking_preferred;
    m_batch_booking_preferred_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_batch_booking_preferred_Set() const{
    return m_batch_booking_preferred_isSet;
}

bool OAIGetPaymentInformation_200_response::is_batch_booking_preferred_Valid() const{
    return m_batch_booking_preferred_isValid;
}

QString OAIGetPaymentInformation_200_response::getPaymentInformationId() const {
    return m_payment_information_id;
}
void OAIGetPaymentInformation_200_response::setPaymentInformationId(const QString &payment_information_id) {
    m_payment_information_id = payment_information_id;
    m_payment_information_id_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_payment_information_id_Set() const{
    return m_payment_information_id_isSet;
}

bool OAIGetPaymentInformation_200_response::is_payment_information_id_Valid() const{
    return m_payment_information_id_isValid;
}

QList<OAIPaymentInitiationBulkElement_json> OAIGetPaymentInformation_200_response::getPayments() const {
    return m_payments;
}
void OAIGetPaymentInformation_200_response::setPayments(const QList<OAIPaymentInitiationBulkElement_json> &payments) {
    m_payments = payments;
    m_payments_isSet = true;
}

bool OAIGetPaymentInformation_200_response::is_payments_Set() const{
    return m_payments_isSet;
}

bool OAIGetPaymentInformation_200_response::is_payments_Valid() const{
    return m_payments_isValid;
}

bool OAIGetPaymentInformation_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creditor_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creditor_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creditor_agent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creditor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debtor_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_to_end_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructed_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remittance_information_structured.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remittance_information_unstructured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remittance_information_unstructured_array.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_execution_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_execution_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ultimate_creditor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ultimate_debtor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_of_execution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acceptor_transaction_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_booking_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_information_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPaymentInformation_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creditor_account_isValid && m_creditor_name_isValid && m_debtor_account_isValid && m_instructed_amount_isValid && m_frequency_isValid && m_start_date_isValid && m_payments_isValid && true;
}

} // namespace OpenAPI
