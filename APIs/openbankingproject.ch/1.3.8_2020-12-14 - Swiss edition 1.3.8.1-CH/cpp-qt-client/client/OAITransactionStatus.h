/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITransactionStatus.h
 *
 * The transaction status is filled with codes of the ISO 20022 data table: - &#39;ACCC&#39;: &#39;AcceptedSettlementCompleted&#39; -   Settlement on the creditor&#39;s account has been completed. - &#39;ACCP&#39;: &#39;AcceptedCustomerProfile&#39; -   Preceding check of technical validation was successful.   Customer profile check was also successful. - &#39;ACSC&#39;: &#39;AcceptedSettlementCompleted&#39; -   Settlement on the debtoro?&#x3D;s account has been completed.    **Usage:** this can be used by the first agent to report to the debtor that the transaction has been completed.    **Warning:** this status is provided for transaction status reasons, not for financial information.   It can only be used after bilateral agreement. - &#39;ACSP&#39;: &#39;AcceptedSettlementInProcess&#39; -   All preceding checks such as technical validation and customer profile were successful and therefore the payment initiation has been accepted for execution. - &#39;ACTC&#39;: &#39;AcceptedTechnicalValidation&#39; -   Authentication and syntactical and semantical validation are successful. - &#39;ACWC&#39;: &#39;AcceptedWithChange&#39; -   Instruction is accepted but a change will be made, such as date or remittance not sent. - &#39;ACWP&#39;: &#39;AcceptedWithoutPosting&#39; -   Payment instruction included in the credit transfer is accepted without being posted to the creditor customero?&#x3D;s account. - &#39;RCVD&#39;: &#39;Received&#39; -   Payment initiation has been received by the receiving agent. - &#39;PDNG&#39;: &#39;Pending&#39; -   Payment initiation or individual transaction included in the payment initiation is pending.   Further checks and status update will be performed. - &#39;RJCT&#39;: &#39;Rejected&#39; -   Payment initiation or individual transaction included in the payment initiation has been rejected. - &#39;CANC&#39;: &#39;Cancelled&#39;   Payment initiation has been cancelled before execution   Remark: This codeis accepted as new code by ISO20022. - &#39;ACFC&#39;: &#39;AcceptedFundsChecked&#39; -   Preceding check of technical validation and customer profile was successful and an automatic funds check was positive .   Remark: This code is accepted as new code by ISO20022. - &#39;PATC&#39;: &#39;PartiallyAcceptedTechnical&#39;   Correct The payment initiation needs multiple authentications, where some but not yet all have been performed. Syntactical and semantical validations are successful.   Remark: This code is accepted as new code by ISO20022. - &#39;PART&#39;: &#39;PartiallyAccepted&#39; -   A number of transactions have been accepted, whereas another number of transactions have not yet achieved &#39;accepted&#39; status.   Remark: This code may be used only in case of bulk payments. It is only used in a situation where all mandated authorisations have been applied, but some payments have been rejected. 
 */

#ifndef OAITransactionStatus_H
#define OAITransactionStatus_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITransactionStatus : public OAIEnum {
public:
    OAITransactionStatus();
    OAITransactionStatus(QString json);
    ~OAITransactionStatus() override;

    QString asJson() const override;
    QJsonValue asJsonValue() const override;
    void fromJsonValue(QJsonValue json) override;
    void fromJson(QString jsonString) override;

    enum class eOAITransactionStatus {
        INVALID_VALUE_OPENAPI_GENERATED = 0,
        ACCC, 
        ACCP, 
        ACSC, 
        ACSP, 
        ACTC, 
        ACWC, 
        ACWP, 
        RCVD, 
        PDNG, 
        RJCT, 
        CANC, 
        ACFC, 
        PATC, 
        PART
    };
    OAITransactionStatus::eOAITransactionStatus getValue() const;
    void setValue(const OAITransactionStatus::eOAITransactionStatus& value);
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    eOAITransactionStatus m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITransactionStatus)

#endif // OAITransactionStatus_H
