/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISigningBasketsServiceSBSApi_H
#define OAI_OAISigningBasketsServiceSBSApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuthorisations.h"
#include "OAIError400_NG_SBS.h"
#include "OAIError400_SBS.h"
#include "OAIError401_NG_SBS.h"
#include "OAIError401_SBS.h"
#include "OAIError403_NG_SBS.h"
#include "OAIError403_SBS.h"
#include "OAIError404_NG_SBS.h"
#include "OAIError404_SBS.h"
#include "OAIError405_NG_SBS.h"
#include "OAIError405_SBS.h"
#include "OAIError409_NG_SBS.h"
#include "OAIError409_SBS.h"
#include "OAIScaStatusResponse.h"
#include "OAISigningBasket.h"
#include "OAISigningBasketResponse_200.h"
#include "OAISigningBasketResponse_201.h"
#include "OAISigningBasketStatusResponse_200.h"
#include "OAIStartConsentAuthorisation_request.h"
#include "OAIStartScaprocessResponse.h"
#include "OAIUpdateConsentsPsuData_200_response.h"
#include "OAIUpdateConsentsPsuData_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISigningBasketsServiceSBSApi : public QObject {
    Q_OBJECT

public:
    OAISigningBasketsServiceSBSApi(const int timeOut = 0);
    ~OAISigningBasketsServiceSBSApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_request_id QString [required]
    * @param[in]  psu_ip_address QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_id QString [optional]
    * @param[in]  psu_id_type QString [optional]
    * @param[in]  psu_corporate_id QString [optional]
    * @param[in]  psu_corporate_id_type QString [optional]
    * @param[in]  consent_id QString [optional]
    * @param[in]  tpp_redirect_preferred bool [optional]
    * @param[in]  tpp_redirect_uri QString [optional]
    * @param[in]  tpp_nok_redirect_uri QString [optional]
    * @param[in]  tpp_explicit_authorisation_preferred bool [optional]
    * @param[in]  tpp_notification_uri QString [optional]
    * @param[in]  tpp_notification_content_preferred QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    * @param[in]  oai_signing_basket OAISigningBasket [optional]
    */
    virtual void createSigningBasket(const QString &x_request_id, const QString &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_corporate_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &consent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &tpp_redirect_preferred = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &tpp_redirect_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tpp_nok_redirect_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &tpp_explicit_authorisation_preferred = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &tpp_notification_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tpp_notification_content_preferred = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISigningBasket> &oai_signing_basket = ::OpenAPI::OptionalParam<OAISigningBasket>());

    /**
    * @param[in]  basket_id QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    */
    virtual void deleteSigningBasket(const QString &basket_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  basket_id QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    */
    virtual void getSigningBasket(const QString &basket_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  basket_id QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    */
    virtual void getSigningBasketAuthorisation(const QString &basket_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  basket_id QString [required]
    * @param[in]  authorisation_id QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    */
    virtual void getSigningBasketScaStatus(const QString &basket_id, const QString &authorisation_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  basket_id QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_id QString [optional]
    * @param[in]  psu_id_type QString [optional]
    * @param[in]  psu_corporate_id QString [optional]
    * @param[in]  psu_corporate_id_type QString [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    */
    virtual void getSigningBasketStatus(const QString &basket_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_corporate_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  basket_id QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_id QString [optional]
    * @param[in]  psu_id_type QString [optional]
    * @param[in]  psu_corporate_id QString [optional]
    * @param[in]  psu_corporate_id_type QString [optional]
    * @param[in]  tpp_redirect_preferred bool [optional]
    * @param[in]  tpp_redirect_uri QString [optional]
    * @param[in]  tpp_nok_redirect_uri QString [optional]
    * @param[in]  tpp_notification_uri QString [optional]
    * @param[in]  tpp_notification_content_preferred QString [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    * @param[in]  oai_start_consent_authorisation_request OAIStartConsentAuthorisation_request [optional]
    */
    virtual void startSigningBasketAuthorisation(const QString &basket_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_corporate_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &tpp_redirect_preferred = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &tpp_redirect_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tpp_nok_redirect_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tpp_notification_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tpp_notification_content_preferred = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIStartConsentAuthorisation_request> &oai_start_consent_authorisation_request = ::OpenAPI::OptionalParam<OAIStartConsentAuthorisation_request>());

    /**
    * @param[in]  basket_id QString [required]
    * @param[in]  authorisation_id QString [required]
    * @param[in]  x_request_id QString [required]
    * @param[in]  digest QString [optional]
    * @param[in]  signature QString [optional]
    * @param[in]  tpp_signature_certificate QByteArray [optional]
    * @param[in]  psu_id QString [optional]
    * @param[in]  psu_id_type QString [optional]
    * @param[in]  psu_corporate_id QString [optional]
    * @param[in]  psu_corporate_id_type QString [optional]
    * @param[in]  psu_ip_address QString [optional]
    * @param[in]  psu_ip_port QString [optional]
    * @param[in]  psu_accept QString [optional]
    * @param[in]  psu_accept_charset QString [optional]
    * @param[in]  psu_accept_encoding QString [optional]
    * @param[in]  psu_accept_language QString [optional]
    * @param[in]  psu_user_agent QString [optional]
    * @param[in]  psu_http_method QString [optional]
    * @param[in]  psu_device_id QString [optional]
    * @param[in]  psu_geo_location QString [optional]
    * @param[in]  oai_update_consents_psu_data_request OAIUpdateConsentsPsuData_request [optional]
    */
    virtual void updateSigningBasketPsuData(const QString &basket_id, const QString &authorisation_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate = ::OpenAPI::OptionalParam<QByteArray>(), const ::OpenAPI::OptionalParam<QString> &psu_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_corporate_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_ip_port = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_charset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_user_agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_device_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &psu_geo_location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateConsentsPsuData_request> &oai_update_consents_psu_data_request = ::OpenAPI::OptionalParam<OAIUpdateConsentsPsuData_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSigningBasketCallback(OAIHttpRequestWorker *worker);
    void deleteSigningBasketCallback(OAIHttpRequestWorker *worker);
    void getSigningBasketCallback(OAIHttpRequestWorker *worker);
    void getSigningBasketAuthorisationCallback(OAIHttpRequestWorker *worker);
    void getSigningBasketScaStatusCallback(OAIHttpRequestWorker *worker);
    void getSigningBasketStatusCallback(OAIHttpRequestWorker *worker);
    void startSigningBasketAuthorisationCallback(OAIHttpRequestWorker *worker);
    void updateSigningBasketPsuDataCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSigningBasketSignal(OAISigningBasketResponse_201 summary);
    void deleteSigningBasketSignal();
    void getSigningBasketSignal(OAISigningBasketResponse_200 summary);
    void getSigningBasketAuthorisationSignal(OAIAuthorisations summary);
    void getSigningBasketScaStatusSignal(OAIScaStatusResponse summary);
    void getSigningBasketStatusSignal(OAISigningBasketStatusResponse_200 summary);
    void startSigningBasketAuthorisationSignal(OAIStartScaprocessResponse summary);
    void updateSigningBasketPsuDataSignal(OAIUpdateConsentsPsuData_200_response summary);


    void createSigningBasketSignalFull(OAIHttpRequestWorker *worker, OAISigningBasketResponse_201 summary);
    void deleteSigningBasketSignalFull(OAIHttpRequestWorker *worker);
    void getSigningBasketSignalFull(OAIHttpRequestWorker *worker, OAISigningBasketResponse_200 summary);
    void getSigningBasketAuthorisationSignalFull(OAIHttpRequestWorker *worker, OAIAuthorisations summary);
    void getSigningBasketScaStatusSignalFull(OAIHttpRequestWorker *worker, OAIScaStatusResponse summary);
    void getSigningBasketStatusSignalFull(OAIHttpRequestWorker *worker, OAISigningBasketStatusResponse_200 summary);
    void startSigningBasketAuthorisationSignalFull(OAIHttpRequestWorker *worker, OAIStartScaprocessResponse summary);
    void updateSigningBasketPsuDataSignalFull(OAIHttpRequestWorker *worker, OAIUpdateConsentsPsuData_200_response summary);

    Q_DECL_DEPRECATED_X("Use createSigningBasketSignalError() instead")
    void createSigningBasketSignalE(OAISigningBasketResponse_201 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSigningBasketSignalError(OAISigningBasketResponse_201 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSigningBasketSignalError() instead")
    void deleteSigningBasketSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSigningBasketSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSigningBasketSignalError() instead")
    void getSigningBasketSignalE(OAISigningBasketResponse_200 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSigningBasketSignalError(OAISigningBasketResponse_200 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSigningBasketAuthorisationSignalError() instead")
    void getSigningBasketAuthorisationSignalE(OAIAuthorisations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSigningBasketAuthorisationSignalError(OAIAuthorisations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSigningBasketScaStatusSignalError() instead")
    void getSigningBasketScaStatusSignalE(OAIScaStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSigningBasketScaStatusSignalError(OAIScaStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSigningBasketStatusSignalError() instead")
    void getSigningBasketStatusSignalE(OAISigningBasketStatusResponse_200 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSigningBasketStatusSignalError(OAISigningBasketStatusResponse_200 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSigningBasketAuthorisationSignalError() instead")
    void startSigningBasketAuthorisationSignalE(OAIStartScaprocessResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startSigningBasketAuthorisationSignalError(OAIStartScaprocessResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSigningBasketPsuDataSignalError() instead")
    void updateSigningBasketPsuDataSignalE(OAIUpdateConsentsPsuData_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSigningBasketPsuDataSignalError(OAIUpdateConsentsPsuData_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSigningBasketSignalErrorFull() instead")
    void createSigningBasketSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSigningBasketSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSigningBasketSignalErrorFull() instead")
    void deleteSigningBasketSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSigningBasketSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSigningBasketSignalErrorFull() instead")
    void getSigningBasketSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSigningBasketSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSigningBasketAuthorisationSignalErrorFull() instead")
    void getSigningBasketAuthorisationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSigningBasketAuthorisationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSigningBasketScaStatusSignalErrorFull() instead")
    void getSigningBasketScaStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSigningBasketScaStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSigningBasketStatusSignalErrorFull() instead")
    void getSigningBasketStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSigningBasketStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSigningBasketAuthorisationSignalErrorFull() instead")
    void startSigningBasketAuthorisationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startSigningBasketAuthorisationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSigningBasketPsuDataSignalErrorFull() instead")
    void updateSigningBasketPsuDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSigningBasketPsuDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
