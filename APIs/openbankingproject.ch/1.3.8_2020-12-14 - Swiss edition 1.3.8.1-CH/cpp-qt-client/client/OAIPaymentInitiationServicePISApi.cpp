/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentInitiationServicePISApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIPaymentInitiationServicePISApi::OAIPaymentInitiationServicePISApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIPaymentInitiationServicePISApi::~OAIPaymentInitiationServicePISApi() {
}

void OAIPaymentInitiationServicePISApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.dev.openbankingproject.ch"),
    "Open Banking Project Switzerland Developer Portal",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("cancelPayment", defaultConf);
    _serverIndices.insert("cancelPayment", 0);
    _serverConfigs.insert("getPaymentCancellationScaStatus", defaultConf);
    _serverIndices.insert("getPaymentCancellationScaStatus", 0);
    _serverConfigs.insert("getPaymentInformation", defaultConf);
    _serverIndices.insert("getPaymentInformation", 0);
    _serverConfigs.insert("getPaymentInitiationAuthorisation", defaultConf);
    _serverIndices.insert("getPaymentInitiationAuthorisation", 0);
    _serverConfigs.insert("getPaymentInitiationCancellationAuthorisationInformation", defaultConf);
    _serverIndices.insert("getPaymentInitiationCancellationAuthorisationInformation", 0);
    _serverConfigs.insert("getPaymentInitiationScaStatus", defaultConf);
    _serverIndices.insert("getPaymentInitiationScaStatus", 0);
    _serverConfigs.insert("getPaymentInitiationStatus", defaultConf);
    _serverIndices.insert("getPaymentInitiationStatus", 0);
    _serverConfigs.insert("initiatePayment", defaultConf);
    _serverIndices.insert("initiatePayment", 0);
    _serverConfigs.insert("startPaymentAuthorisation", defaultConf);
    _serverIndices.insert("startPaymentAuthorisation", 0);
    _serverConfigs.insert("startPaymentInitiationCancellationAuthorisation", defaultConf);
    _serverIndices.insert("startPaymentInitiationCancellationAuthorisation", 0);
    _serverConfigs.insert("updatePaymentCancellationPsuData", defaultConf);
    _serverIndices.insert("updatePaymentCancellationPsuData", 0);
    _serverConfigs.insert("updatePaymentPsuData", defaultConf);
    _serverIndices.insert("updatePaymentPsuData", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIPaymentInitiationServicePISApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIPaymentInitiationServicePISApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIPaymentInitiationServicePISApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIPaymentInitiationServicePISApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIPaymentInitiationServicePISApi::setUsername(const QString &username) {
    _username = username;
}

void OAIPaymentInitiationServicePISApi::setPassword(const QString &password) {
    _password = password;
}


void OAIPaymentInitiationServicePISApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIPaymentInitiationServicePISApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIPaymentInitiationServicePISApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIPaymentInitiationServicePISApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPaymentInitiationServicePISApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPaymentInitiationServicePISApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIPaymentInitiationServicePISApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIPaymentInitiationServicePISApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIPaymentInitiationServicePISApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIPaymentInitiationServicePISApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIPaymentInitiationServicePISApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIPaymentInitiationServicePISApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIPaymentInitiationServicePISApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIPaymentInitiationServicePISApi::cancelPayment(const QString &payment_service, const QString &payment_product, const QString &payment_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<bool> &tpp_redirect_preferred, const ::OpenAPI::OptionalParam<QString> &tpp_nok_redirect_uri, const ::OpenAPI::OptionalParam<QString> &tpp_redirect_uri, const ::OpenAPI::OptionalParam<bool> &tpp_explicit_authorisation_preferred, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["cancelPayment"][_serverIndices.value("cancelPayment")].URL()+"/v1/{payment-service}/{payment-product}/{paymentId}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString payment_servicePathParam("{");
        payment_servicePathParam.append("payment-service").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-service", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-service"+pathSuffix : pathPrefix;
        fullPath.replace(payment_servicePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_service)));
    }
    
    {
        QString payment_productPathParam("{");
        payment_productPathParam.append("payment-product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-product"+pathSuffix : pathPrefix;
        fullPath.replace(payment_productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_product)));
    }
    
    {
        QString payment_idPathParam("{");
        payment_idPathParam.append("paymentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "paymentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"paymentId"+pathSuffix : pathPrefix;
        fullPath.replace(payment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (tpp_redirect_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_redirect_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Redirect-Preferred", ::OpenAPI::toStringValue(tpp_redirect_preferred.value()));
        }
        }
    if (tpp_nok_redirect_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_nok_redirect_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Nok-Redirect-URI", ::OpenAPI::toStringValue(tpp_nok_redirect_uri.value()));
        }
        }
    if (tpp_redirect_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_redirect_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Redirect-URI", ::OpenAPI::toStringValue(tpp_redirect_uri.value()));
        }
        }
    if (tpp_explicit_authorisation_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_explicit_authorisation_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Explicit-Authorisation-Preferred", ::OpenAPI::toStringValue(tpp_explicit_authorisation_preferred.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentInitiationServicePISApi::cancelPaymentCallback);
    connect(this, &OAIPaymentInitiationServicePISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentInitiationServicePISApi::cancelPaymentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPaymentInitiationCancelResponse_202 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cancelPaymentSignal(output);
        Q_EMIT cancelPaymentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cancelPaymentSignalE(output, error_type, error_str);
        Q_EMIT cancelPaymentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cancelPaymentSignalError(output, error_type, error_str);
        Q_EMIT cancelPaymentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentInitiationServicePISApi::getPaymentCancellationScaStatus(const QString &payment_service, const QString &payment_product, const QString &payment_id, const QString &authorisation_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getPaymentCancellationScaStatus"][_serverIndices.value("getPaymentCancellationScaStatus")].URL()+"/v1/{payment-service}/{payment-product}/{paymentId}/cancellation-authorisations/{authorisationId}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString payment_servicePathParam("{");
        payment_servicePathParam.append("payment-service").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-service", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-service"+pathSuffix : pathPrefix;
        fullPath.replace(payment_servicePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_service)));
    }
    
    {
        QString payment_productPathParam("{");
        payment_productPathParam.append("payment-product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-product"+pathSuffix : pathPrefix;
        fullPath.replace(payment_productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_product)));
    }
    
    {
        QString payment_idPathParam("{");
        payment_idPathParam.append("paymentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "paymentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"paymentId"+pathSuffix : pathPrefix;
        fullPath.replace(payment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_id)));
    }
    
    {
        QString authorisation_idPathParam("{");
        authorisation_idPathParam.append("authorisationId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "authorisationId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"authorisationId"+pathSuffix : pathPrefix;
        fullPath.replace(authorisation_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(authorisation_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentInitiationServicePISApi::getPaymentCancellationScaStatusCallback);
    connect(this, &OAIPaymentInitiationServicePISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentInitiationServicePISApi::getPaymentCancellationScaStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIScaStatusResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPaymentCancellationScaStatusSignal(output);
        Q_EMIT getPaymentCancellationScaStatusSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPaymentCancellationScaStatusSignalE(output, error_type, error_str);
        Q_EMIT getPaymentCancellationScaStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPaymentCancellationScaStatusSignalError(output, error_type, error_str);
        Q_EMIT getPaymentCancellationScaStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentInitiationServicePISApi::getPaymentInformation(const QString &payment_service, const QString &payment_product, const QString &payment_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getPaymentInformation"][_serverIndices.value("getPaymentInformation")].URL()+"/v1/{payment-service}/{payment-product}/{paymentId}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString payment_servicePathParam("{");
        payment_servicePathParam.append("payment-service").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-service", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-service"+pathSuffix : pathPrefix;
        fullPath.replace(payment_servicePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_service)));
    }
    
    {
        QString payment_productPathParam("{");
        payment_productPathParam.append("payment-product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-product"+pathSuffix : pathPrefix;
        fullPath.replace(payment_productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_product)));
    }
    
    {
        QString payment_idPathParam("{");
        payment_idPathParam.append("paymentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "paymentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"paymentId"+pathSuffix : pathPrefix;
        fullPath.replace(payment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentInitiationServicePISApi::getPaymentInformationCallback);
    connect(this, &OAIPaymentInitiationServicePISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentInitiationServicePISApi::getPaymentInformationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetPaymentInformation_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPaymentInformationSignal(output);
        Q_EMIT getPaymentInformationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPaymentInformationSignalE(output, error_type, error_str);
        Q_EMIT getPaymentInformationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPaymentInformationSignalError(output, error_type, error_str);
        Q_EMIT getPaymentInformationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentInitiationServicePISApi::getPaymentInitiationAuthorisation(const QString &payment_service, const QString &payment_product, const QString &payment_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getPaymentInitiationAuthorisation"][_serverIndices.value("getPaymentInitiationAuthorisation")].URL()+"/v1/{payment-service}/{payment-product}/{paymentId}/authorisations");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString payment_servicePathParam("{");
        payment_servicePathParam.append("payment-service").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-service", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-service"+pathSuffix : pathPrefix;
        fullPath.replace(payment_servicePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_service)));
    }
    
    {
        QString payment_productPathParam("{");
        payment_productPathParam.append("payment-product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-product"+pathSuffix : pathPrefix;
        fullPath.replace(payment_productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_product)));
    }
    
    {
        QString payment_idPathParam("{");
        payment_idPathParam.append("paymentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "paymentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"paymentId"+pathSuffix : pathPrefix;
        fullPath.replace(payment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentInitiationServicePISApi::getPaymentInitiationAuthorisationCallback);
    connect(this, &OAIPaymentInitiationServicePISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentInitiationServicePISApi::getPaymentInitiationAuthorisationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAuthorisations output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPaymentInitiationAuthorisationSignal(output);
        Q_EMIT getPaymentInitiationAuthorisationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPaymentInitiationAuthorisationSignalE(output, error_type, error_str);
        Q_EMIT getPaymentInitiationAuthorisationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPaymentInitiationAuthorisationSignalError(output, error_type, error_str);
        Q_EMIT getPaymentInitiationAuthorisationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentInitiationServicePISApi::getPaymentInitiationCancellationAuthorisationInformation(const QString &payment_service, const QString &payment_product, const QString &payment_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getPaymentInitiationCancellationAuthorisationInformation"][_serverIndices.value("getPaymentInitiationCancellationAuthorisationInformation")].URL()+"/v1/{payment-service}/{payment-product}/{paymentId}/cancellation-authorisations");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString payment_servicePathParam("{");
        payment_servicePathParam.append("payment-service").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-service", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-service"+pathSuffix : pathPrefix;
        fullPath.replace(payment_servicePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_service)));
    }
    
    {
        QString payment_productPathParam("{");
        payment_productPathParam.append("payment-product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-product"+pathSuffix : pathPrefix;
        fullPath.replace(payment_productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_product)));
    }
    
    {
        QString payment_idPathParam("{");
        payment_idPathParam.append("paymentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "paymentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"paymentId"+pathSuffix : pathPrefix;
        fullPath.replace(payment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentInitiationServicePISApi::getPaymentInitiationCancellationAuthorisationInformationCallback);
    connect(this, &OAIPaymentInitiationServicePISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentInitiationServicePISApi::getPaymentInitiationCancellationAuthorisationInformationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAuthorisations output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPaymentInitiationCancellationAuthorisationInformationSignal(output);
        Q_EMIT getPaymentInitiationCancellationAuthorisationInformationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPaymentInitiationCancellationAuthorisationInformationSignalE(output, error_type, error_str);
        Q_EMIT getPaymentInitiationCancellationAuthorisationInformationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPaymentInitiationCancellationAuthorisationInformationSignalError(output, error_type, error_str);
        Q_EMIT getPaymentInitiationCancellationAuthorisationInformationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentInitiationServicePISApi::getPaymentInitiationScaStatus(const QString &payment_service, const QString &payment_product, const QString &payment_id, const QString &authorisation_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getPaymentInitiationScaStatus"][_serverIndices.value("getPaymentInitiationScaStatus")].URL()+"/v1/{payment-service}/{payment-product}/{paymentId}/authorisations/{authorisationId}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString payment_servicePathParam("{");
        payment_servicePathParam.append("payment-service").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-service", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-service"+pathSuffix : pathPrefix;
        fullPath.replace(payment_servicePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_service)));
    }
    
    {
        QString payment_productPathParam("{");
        payment_productPathParam.append("payment-product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-product"+pathSuffix : pathPrefix;
        fullPath.replace(payment_productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_product)));
    }
    
    {
        QString payment_idPathParam("{");
        payment_idPathParam.append("paymentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "paymentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"paymentId"+pathSuffix : pathPrefix;
        fullPath.replace(payment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_id)));
    }
    
    {
        QString authorisation_idPathParam("{");
        authorisation_idPathParam.append("authorisationId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "authorisationId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"authorisationId"+pathSuffix : pathPrefix;
        fullPath.replace(authorisation_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(authorisation_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentInitiationServicePISApi::getPaymentInitiationScaStatusCallback);
    connect(this, &OAIPaymentInitiationServicePISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentInitiationServicePISApi::getPaymentInitiationScaStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIScaStatusResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPaymentInitiationScaStatusSignal(output);
        Q_EMIT getPaymentInitiationScaStatusSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPaymentInitiationScaStatusSignalE(output, error_type, error_str);
        Q_EMIT getPaymentInitiationScaStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPaymentInitiationScaStatusSignalError(output, error_type, error_str);
        Q_EMIT getPaymentInitiationScaStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentInitiationServicePISApi::getPaymentInitiationStatus(const QString &payment_service, const QString &payment_product, const QString &payment_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["getPaymentInitiationStatus"][_serverIndices.value("getPaymentInitiationStatus")].URL()+"/v1/{payment-service}/{payment-product}/{paymentId}/status");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString payment_servicePathParam("{");
        payment_servicePathParam.append("payment-service").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-service", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-service"+pathSuffix : pathPrefix;
        fullPath.replace(payment_servicePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_service)));
    }
    
    {
        QString payment_productPathParam("{");
        payment_productPathParam.append("payment-product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-product"+pathSuffix : pathPrefix;
        fullPath.replace(payment_productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_product)));
    }
    
    {
        QString payment_idPathParam("{");
        payment_idPathParam.append("paymentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "paymentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"paymentId"+pathSuffix : pathPrefix;
        fullPath.replace(payment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentInitiationServicePISApi::getPaymentInitiationStatusCallback);
    connect(this, &OAIPaymentInitiationServicePISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentInitiationServicePISApi::getPaymentInitiationStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPaymentInitiationStatusResponse_200_json output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPaymentInitiationStatusSignal(output);
        Q_EMIT getPaymentInitiationStatusSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPaymentInitiationStatusSignalE(output, error_type, error_str);
        Q_EMIT getPaymentInitiationStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPaymentInitiationStatusSignalError(output, error_type, error_str);
        Q_EMIT getPaymentInitiationStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentInitiationServicePISApi::initiatePayment(const QString &payment_service, const QString &payment_product, const QString &x_request_id, const QString &psu_ip_address, const OAIInitiatePayment_request &oai_initiate_payment_request, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_id, const ::OpenAPI::OptionalParam<QString> &psu_id_type, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type, const ::OpenAPI::OptionalParam<QString> &consent_id, const ::OpenAPI::OptionalParam<bool> &tpp_redirect_preferred, const ::OpenAPI::OptionalParam<QString> &tpp_redirect_uri, const ::OpenAPI::OptionalParam<QString> &tpp_nok_redirect_uri, const ::OpenAPI::OptionalParam<bool> &tpp_explicit_authorisation_preferred, const ::OpenAPI::OptionalParam<bool> &tpp_rejection_no_funds_preferred, const ::OpenAPI::OptionalParam<QString> &tpp_brand_logging_information, const ::OpenAPI::OptionalParam<QString> &tpp_notification_uri, const ::OpenAPI::OptionalParam<QString> &tpp_notification_content_preferred, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location) {
    QString fullPath = QString(_serverConfigs["initiatePayment"][_serverIndices.value("initiatePayment")].URL()+"/v1/{payment-service}/{payment-product}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString payment_servicePathParam("{");
        payment_servicePathParam.append("payment-service").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-service", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-service"+pathSuffix : pathPrefix;
        fullPath.replace(payment_servicePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_service)));
    }
    
    {
        QString payment_productPathParam("{");
        payment_productPathParam.append("payment-product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-product"+pathSuffix : pathPrefix;
        fullPath.replace(payment_productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_product)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_initiate_payment_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id.value()).isEmpty()) {
            input.headers.insert("PSU-ID", ::OpenAPI::toStringValue(psu_id.value()));
        }
        }
    if (psu_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-ID-Type", ::OpenAPI::toStringValue(psu_id_type.value()));
        }
        }
    if (psu_corporate_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID", ::OpenAPI::toStringValue(psu_corporate_id.value()));
        }
        }
    if (psu_corporate_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID-Type", ::OpenAPI::toStringValue(psu_corporate_id_type.value()));
        }
        }
    if (consent_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(consent_id.value()).isEmpty()) {
            input.headers.insert("Consent-ID", ::OpenAPI::toStringValue(consent_id.value()));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(psu_ip_address).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address));
        }
        }
    if (tpp_redirect_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_redirect_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Redirect-Preferred", ::OpenAPI::toStringValue(tpp_redirect_preferred.value()));
        }
        }
    if (tpp_redirect_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_redirect_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Redirect-URI", ::OpenAPI::toStringValue(tpp_redirect_uri.value()));
        }
        }
    if (tpp_nok_redirect_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_nok_redirect_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Nok-Redirect-URI", ::OpenAPI::toStringValue(tpp_nok_redirect_uri.value()));
        }
        }
    if (tpp_explicit_authorisation_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_explicit_authorisation_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Explicit-Authorisation-Preferred", ::OpenAPI::toStringValue(tpp_explicit_authorisation_preferred.value()));
        }
        }
    if (tpp_rejection_no_funds_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_rejection_no_funds_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Rejection-NoFunds-Preferred", ::OpenAPI::toStringValue(tpp_rejection_no_funds_preferred.value()));
        }
        }
    if (tpp_brand_logging_information.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_brand_logging_information.value()).isEmpty()) {
            input.headers.insert("TPP-Brand-Logging-Information", ::OpenAPI::toStringValue(tpp_brand_logging_information.value()));
        }
        }
    if (tpp_notification_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_notification_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Notification-URI", ::OpenAPI::toStringValue(tpp_notification_uri.value()));
        }
        }
    if (tpp_notification_content_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_notification_content_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Notification-Content-Preferred", ::OpenAPI::toStringValue(tpp_notification_content_preferred.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentInitiationServicePISApi::initiatePaymentCallback);
    connect(this, &OAIPaymentInitiationServicePISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentInitiationServicePISApi::initiatePaymentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPaymentInitationRequestResponse_201 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT initiatePaymentSignal(output);
        Q_EMIT initiatePaymentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT initiatePaymentSignalE(output, error_type, error_str);
        Q_EMIT initiatePaymentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT initiatePaymentSignalError(output, error_type, error_str);
        Q_EMIT initiatePaymentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentInitiationServicePISApi::startPaymentAuthorisation(const QString &payment_service, const QString &payment_product, const QString &payment_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &psu_id, const ::OpenAPI::OptionalParam<QString> &psu_id_type, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type, const ::OpenAPI::OptionalParam<bool> &tpp_redirect_preferred, const ::OpenAPI::OptionalParam<QString> &tpp_redirect_uri, const ::OpenAPI::OptionalParam<QString> &tpp_nok_redirect_uri, const ::OpenAPI::OptionalParam<QString> &tpp_notification_uri, const ::OpenAPI::OptionalParam<QString> &tpp_notification_content_preferred, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location, const ::OpenAPI::OptionalParam<OAIStartConsentAuthorisation_request> &oai_start_consent_authorisation_request) {
    QString fullPath = QString(_serverConfigs["startPaymentAuthorisation"][_serverIndices.value("startPaymentAuthorisation")].URL()+"/v1/{payment-service}/{payment-product}/{paymentId}/authorisations");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString payment_servicePathParam("{");
        payment_servicePathParam.append("payment-service").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-service", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-service"+pathSuffix : pathPrefix;
        fullPath.replace(payment_servicePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_service)));
    }
    
    {
        QString payment_productPathParam("{");
        payment_productPathParam.append("payment-product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-product"+pathSuffix : pathPrefix;
        fullPath.replace(payment_productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_product)));
    }
    
    {
        QString payment_idPathParam("{");
        payment_idPathParam.append("paymentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "paymentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"paymentId"+pathSuffix : pathPrefix;
        fullPath.replace(payment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_start_consent_authorisation_request.hasValue()){

        
        QByteArray output = oai_start_consent_authorisation_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (psu_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id.value()).isEmpty()) {
            input.headers.insert("PSU-ID", ::OpenAPI::toStringValue(psu_id.value()));
        }
        }
    if (psu_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-ID-Type", ::OpenAPI::toStringValue(psu_id_type.value()));
        }
        }
    if (psu_corporate_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID", ::OpenAPI::toStringValue(psu_corporate_id.value()));
        }
        }
    if (psu_corporate_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID-Type", ::OpenAPI::toStringValue(psu_corporate_id_type.value()));
        }
        }
    if (tpp_redirect_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_redirect_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Redirect-Preferred", ::OpenAPI::toStringValue(tpp_redirect_preferred.value()));
        }
        }
    if (tpp_redirect_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_redirect_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Redirect-URI", ::OpenAPI::toStringValue(tpp_redirect_uri.value()));
        }
        }
    if (tpp_nok_redirect_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_nok_redirect_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Nok-Redirect-URI", ::OpenAPI::toStringValue(tpp_nok_redirect_uri.value()));
        }
        }
    if (tpp_notification_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_notification_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Notification-URI", ::OpenAPI::toStringValue(tpp_notification_uri.value()));
        }
        }
    if (tpp_notification_content_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_notification_content_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Notification-Content-Preferred", ::OpenAPI::toStringValue(tpp_notification_content_preferred.value()));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentInitiationServicePISApi::startPaymentAuthorisationCallback);
    connect(this, &OAIPaymentInitiationServicePISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentInitiationServicePISApi::startPaymentAuthorisationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIStartScaprocessResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT startPaymentAuthorisationSignal(output);
        Q_EMIT startPaymentAuthorisationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT startPaymentAuthorisationSignalE(output, error_type, error_str);
        Q_EMIT startPaymentAuthorisationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT startPaymentAuthorisationSignalError(output, error_type, error_str);
        Q_EMIT startPaymentAuthorisationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentInitiationServicePISApi::startPaymentInitiationCancellationAuthorisation(const QString &payment_service, const QString &payment_product, const QString &payment_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_id, const ::OpenAPI::OptionalParam<QString> &psu_id_type, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type, const ::OpenAPI::OptionalParam<bool> &tpp_redirect_preferred, const ::OpenAPI::OptionalParam<QString> &tpp_redirect_uri, const ::OpenAPI::OptionalParam<QString> &tpp_nok_redirect_uri, const ::OpenAPI::OptionalParam<QString> &tpp_notification_uri, const ::OpenAPI::OptionalParam<QString> &tpp_notification_content_preferred, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location, const ::OpenAPI::OptionalParam<OAIStartConsentAuthorisation_request> &oai_start_consent_authorisation_request) {
    QString fullPath = QString(_serverConfigs["startPaymentInitiationCancellationAuthorisation"][_serverIndices.value("startPaymentInitiationCancellationAuthorisation")].URL()+"/v1/{payment-service}/{payment-product}/{paymentId}/cancellation-authorisations");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString payment_servicePathParam("{");
        payment_servicePathParam.append("payment-service").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-service", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-service"+pathSuffix : pathPrefix;
        fullPath.replace(payment_servicePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_service)));
    }
    
    {
        QString payment_productPathParam("{");
        payment_productPathParam.append("payment-product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-product"+pathSuffix : pathPrefix;
        fullPath.replace(payment_productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_product)));
    }
    
    {
        QString payment_idPathParam("{");
        payment_idPathParam.append("paymentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "paymentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"paymentId"+pathSuffix : pathPrefix;
        fullPath.replace(payment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_start_consent_authorisation_request.hasValue()){

        
        QByteArray output = oai_start_consent_authorisation_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id.value()).isEmpty()) {
            input.headers.insert("PSU-ID", ::OpenAPI::toStringValue(psu_id.value()));
        }
        }
    if (psu_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-ID-Type", ::OpenAPI::toStringValue(psu_id_type.value()));
        }
        }
    if (psu_corporate_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID", ::OpenAPI::toStringValue(psu_corporate_id.value()));
        }
        }
    if (psu_corporate_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID-Type", ::OpenAPI::toStringValue(psu_corporate_id_type.value()));
        }
        }
    if (tpp_redirect_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_redirect_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Redirect-Preferred", ::OpenAPI::toStringValue(tpp_redirect_preferred.value()));
        }
        }
    if (tpp_redirect_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_redirect_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Redirect-URI", ::OpenAPI::toStringValue(tpp_redirect_uri.value()));
        }
        }
    if (tpp_nok_redirect_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_nok_redirect_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Nok-Redirect-URI", ::OpenAPI::toStringValue(tpp_nok_redirect_uri.value()));
        }
        }
    if (tpp_notification_uri.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_notification_uri.value()).isEmpty()) {
            input.headers.insert("TPP-Notification-URI", ::OpenAPI::toStringValue(tpp_notification_uri.value()));
        }
        }
    if (tpp_notification_content_preferred.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_notification_content_preferred.value()).isEmpty()) {
            input.headers.insert("TPP-Notification-Content-Preferred", ::OpenAPI::toStringValue(tpp_notification_content_preferred.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentInitiationServicePISApi::startPaymentInitiationCancellationAuthorisationCallback);
    connect(this, &OAIPaymentInitiationServicePISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentInitiationServicePISApi::startPaymentInitiationCancellationAuthorisationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIStartScaprocessResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT startPaymentInitiationCancellationAuthorisationSignal(output);
        Q_EMIT startPaymentInitiationCancellationAuthorisationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT startPaymentInitiationCancellationAuthorisationSignalE(output, error_type, error_str);
        Q_EMIT startPaymentInitiationCancellationAuthorisationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT startPaymentInitiationCancellationAuthorisationSignalError(output, error_type, error_str);
        Q_EMIT startPaymentInitiationCancellationAuthorisationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentInitiationServicePISApi::updatePaymentCancellationPsuData(const QString &payment_service, const QString &payment_product, const QString &payment_id, const QString &authorisation_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_id, const ::OpenAPI::OptionalParam<QString> &psu_id_type, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location, const ::OpenAPI::OptionalParam<OAIUpdateConsentsPsuData_request> &oai_update_consents_psu_data_request) {
    QString fullPath = QString(_serverConfigs["updatePaymentCancellationPsuData"][_serverIndices.value("updatePaymentCancellationPsuData")].URL()+"/v1/{payment-service}/{payment-product}/{paymentId}/cancellation-authorisations/{authorisationId}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString payment_servicePathParam("{");
        payment_servicePathParam.append("payment-service").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-service", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-service"+pathSuffix : pathPrefix;
        fullPath.replace(payment_servicePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_service)));
    }
    
    {
        QString payment_productPathParam("{");
        payment_productPathParam.append("payment-product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-product"+pathSuffix : pathPrefix;
        fullPath.replace(payment_productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_product)));
    }
    
    {
        QString payment_idPathParam("{");
        payment_idPathParam.append("paymentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "paymentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"paymentId"+pathSuffix : pathPrefix;
        fullPath.replace(payment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_id)));
    }
    
    {
        QString authorisation_idPathParam("{");
        authorisation_idPathParam.append("authorisationId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "authorisationId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"authorisationId"+pathSuffix : pathPrefix;
        fullPath.replace(authorisation_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(authorisation_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (oai_update_consents_psu_data_request.hasValue()){

        
        QByteArray output = oai_update_consents_psu_data_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id.value()).isEmpty()) {
            input.headers.insert("PSU-ID", ::OpenAPI::toStringValue(psu_id.value()));
        }
        }
    if (psu_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-ID-Type", ::OpenAPI::toStringValue(psu_id_type.value()));
        }
        }
    if (psu_corporate_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID", ::OpenAPI::toStringValue(psu_corporate_id.value()));
        }
        }
    if (psu_corporate_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID-Type", ::OpenAPI::toStringValue(psu_corporate_id_type.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentInitiationServicePISApi::updatePaymentCancellationPsuDataCallback);
    connect(this, &OAIPaymentInitiationServicePISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentInitiationServicePISApi::updatePaymentCancellationPsuDataCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUpdateConsentsPsuData_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updatePaymentCancellationPsuDataSignal(output);
        Q_EMIT updatePaymentCancellationPsuDataSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updatePaymentCancellationPsuDataSignalE(output, error_type, error_str);
        Q_EMIT updatePaymentCancellationPsuDataSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updatePaymentCancellationPsuDataSignalError(output, error_type, error_str);
        Q_EMIT updatePaymentCancellationPsuDataSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentInitiationServicePISApi::updatePaymentPsuData(const QString &payment_service, const QString &payment_product, const QString &payment_id, const QString &authorisation_id, const QString &x_request_id, const ::OpenAPI::OptionalParam<QString> &digest, const ::OpenAPI::OptionalParam<QString> &signature, const ::OpenAPI::OptionalParam<QByteArray> &tpp_signature_certificate, const ::OpenAPI::OptionalParam<QString> &psu_id, const ::OpenAPI::OptionalParam<QString> &psu_id_type, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id, const ::OpenAPI::OptionalParam<QString> &psu_corporate_id_type, const ::OpenAPI::OptionalParam<QString> &psu_ip_address, const ::OpenAPI::OptionalParam<QString> &psu_ip_port, const ::OpenAPI::OptionalParam<QString> &psu_accept, const ::OpenAPI::OptionalParam<QString> &psu_accept_charset, const ::OpenAPI::OptionalParam<QString> &psu_accept_encoding, const ::OpenAPI::OptionalParam<QString> &psu_accept_language, const ::OpenAPI::OptionalParam<QString> &psu_user_agent, const ::OpenAPI::OptionalParam<QString> &psu_http_method, const ::OpenAPI::OptionalParam<QString> &psu_device_id, const ::OpenAPI::OptionalParam<QString> &psu_geo_location, const ::OpenAPI::OptionalParam<OAIUpdateConsentsPsuData_request> &oai_update_consents_psu_data_request) {
    QString fullPath = QString(_serverConfigs["updatePaymentPsuData"][_serverIndices.value("updatePaymentPsuData")].URL()+"/v1/{payment-service}/{payment-product}/{paymentId}/authorisations/{authorisationId}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString payment_servicePathParam("{");
        payment_servicePathParam.append("payment-service").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-service", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-service"+pathSuffix : pathPrefix;
        fullPath.replace(payment_servicePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_service)));
    }
    
    {
        QString payment_productPathParam("{");
        payment_productPathParam.append("payment-product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "payment-product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"payment-product"+pathSuffix : pathPrefix;
        fullPath.replace(payment_productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_product)));
    }
    
    {
        QString payment_idPathParam("{");
        payment_idPathParam.append("paymentId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "paymentId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"paymentId"+pathSuffix : pathPrefix;
        fullPath.replace(payment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_id)));
    }
    
    {
        QString authorisation_idPathParam("{");
        authorisation_idPathParam.append("authorisationId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "authorisationId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"authorisationId"+pathSuffix : pathPrefix;
        fullPath.replace(authorisation_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(authorisation_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (oai_update_consents_psu_data_request.hasValue()){

        
        QByteArray output = oai_update_consents_psu_data_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(x_request_id).isEmpty()) {
            input.headers.insert("X-Request-ID", ::OpenAPI::toStringValue(x_request_id));
        }
        }
    if (digest.hasValue())
    {
        if (!::OpenAPI::toStringValue(digest.value()).isEmpty()) {
            input.headers.insert("Digest", ::OpenAPI::toStringValue(digest.value()));
        }
        }
    if (signature.hasValue())
    {
        if (!::OpenAPI::toStringValue(signature.value()).isEmpty()) {
            input.headers.insert("Signature", ::OpenAPI::toStringValue(signature.value()));
        }
        }
    if (tpp_signature_certificate.hasValue())
    {
        if (!::OpenAPI::toStringValue(tpp_signature_certificate.value()).isEmpty()) {
            input.headers.insert("TPP-Signature-Certificate", ::OpenAPI::toStringValue(tpp_signature_certificate.value()));
        }
        }
    if (psu_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id.value()).isEmpty()) {
            input.headers.insert("PSU-ID", ::OpenAPI::toStringValue(psu_id.value()));
        }
        }
    if (psu_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-ID-Type", ::OpenAPI::toStringValue(psu_id_type.value()));
        }
        }
    if (psu_corporate_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID", ::OpenAPI::toStringValue(psu_corporate_id.value()));
        }
        }
    if (psu_corporate_id_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_corporate_id_type.value()).isEmpty()) {
            input.headers.insert("PSU-Corporate-ID-Type", ::OpenAPI::toStringValue(psu_corporate_id_type.value()));
        }
        }
    if (psu_ip_address.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_address.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Address", ::OpenAPI::toStringValue(psu_ip_address.value()));
        }
        }
    if (psu_ip_port.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_ip_port.value()).isEmpty()) {
            input.headers.insert("PSU-IP-Port", ::OpenAPI::toStringValue(psu_ip_port.value()));
        }
        }
    if (psu_accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept.value()).isEmpty()) {
            input.headers.insert("PSU-Accept", ::OpenAPI::toStringValue(psu_accept.value()));
        }
        }
    if (psu_accept_charset.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_charset.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Charset", ::OpenAPI::toStringValue(psu_accept_charset.value()));
        }
        }
    if (psu_accept_encoding.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_encoding.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Encoding", ::OpenAPI::toStringValue(psu_accept_encoding.value()));
        }
        }
    if (psu_accept_language.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_accept_language.value()).isEmpty()) {
            input.headers.insert("PSU-Accept-Language", ::OpenAPI::toStringValue(psu_accept_language.value()));
        }
        }
    if (psu_user_agent.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_user_agent.value()).isEmpty()) {
            input.headers.insert("PSU-User-Agent", ::OpenAPI::toStringValue(psu_user_agent.value()));
        }
        }
    if (psu_http_method.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_http_method.value()).isEmpty()) {
            input.headers.insert("PSU-Http-Method", ::OpenAPI::toStringValue(psu_http_method.value()));
        }
        }
    if (psu_device_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_device_id.value()).isEmpty()) {
            input.headers.insert("PSU-Device-ID", ::OpenAPI::toStringValue(psu_device_id.value()));
        }
        }
    if (psu_geo_location.hasValue())
    {
        if (!::OpenAPI::toStringValue(psu_geo_location.value()).isEmpty()) {
            input.headers.insert("PSU-Geo-Location", ::OpenAPI::toStringValue(psu_geo_location.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentInitiationServicePISApi::updatePaymentPsuDataCallback);
    connect(this, &OAIPaymentInitiationServicePISApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentInitiationServicePISApi::updatePaymentPsuDataCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUpdateConsentsPsuData_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updatePaymentPsuDataSignal(output);
        Q_EMIT updatePaymentPsuDataSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updatePaymentPsuDataSignalE(output, error_type, error_str);
        Q_EMIT updatePaymentPsuDataSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updatePaymentPsuDataSignalError(output, error_type, error_str);
        Q_EMIT updatePaymentPsuDataSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentInitiationServicePISApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
