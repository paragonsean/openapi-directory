/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPeriodicPaymentInitiation_json.h
 *
 * Generic Body for a periodic payment initation via JSON.  This generic JSON body can be used to represent valid periodic payment initiations for the following JSON based payment product, which where defined in the Implementation Guidelines:    * domestic-swiss-credit-transfers-isr   * domestic-swiss-credit-transfers   * domestic-swiss-credit-transfers-qr   * domestic-swiss-foreign-credit-transfers   * swiss-sepa-credit-transfers   * swiss-cross-border-credit-transfers  For the convenience of the implementer additional which are already predefinded in the Implementation Guidelines are included (but commented in source code), such that an ASPSP may add them easily.  Take care: Since the format is intended to fit for all payment products there are additional conditions which are NOT covered by this specification. Please check the SIX Swiss Payment Standards implementation guidelines for details.   The following data element are depending on the actual payment product available (in source code):  &lt;table style&#x3D;\&quot;width:100%\&quot;&gt; &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;Payment Type 1: ISR&lt;/td&gt;&lt;td&gt;Payment Type 3: IBAN/postal account and IID/BIC&lt;/td&gt;&lt;td&gt;Payment Type 3: QR-bill&lt;/td&gt;&lt;td&gt;Payment Type 4: Foreign currency&lt;/td&gt;&lt;td&gt;Payment Type 5: Foreign SEPA&lt;/td&gt;&lt;td&gt;Payment Type 6: Foreign&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;CH Domestic Data Element&lt;/td&gt;&lt;td&gt;domestic-swiss-credit-transfers-isr&lt;/td&gt;&lt;td&gt;domestic-swiss-credit-transfers&lt;/td&gt;&lt;td&gt;domestic-swiss-credit-transfers-qr&lt;/td&gt;&lt;td&gt;domestic-swiss-foreign-credit-transfers&lt;/td&gt;&lt;td&gt;swiss-sepa-credit-transfers&lt;/td&gt;&lt;td&gt;swiss-cross-border-credit-transfers&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;endToEndIdentification&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;instructionIdentification&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;debtorAccount (incl. type)&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;debtorAgent&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;debtorName&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;debtorId&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;ultimateDebtor&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;instructedAmount (incl. currency)&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;equivalentAmount&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;transactionCurrency&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;exchangeRateInformation&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorAccount&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory 8)&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorAgent&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent 4)&lt;/td&gt;&lt;td&gt;dependent 4)&lt;/td&gt;&lt;td&gt;dependent 4)&lt;/td&gt;&lt;td&gt;dependent 4)&lt;/td&gt;&lt;td&gt;dependent 4)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorAgentName&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent 5)&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent 5)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorName&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorId&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorAddress&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorNameAndAddress&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent&lt;/td&gt;&lt;td&gt;dependent&lt;/td&gt;&lt;td&gt;dependent&lt;/td&gt;&lt;td&gt;dependent&lt;/td&gt;&lt;td&gt;dependent&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;ultimateCreditor&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;n.a. (for future use)&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;chargeBearer&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;purposeCode&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;serviceLevel&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;remittanceInformationUnstructured&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;remittanceInformationUnstructuredArray&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;remittanceInformationStructured&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;mandatory 6)&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;remittanceInformationStructuredArray&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;requestedExecutionDate&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;requestedExecutionTime&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;intermediaryAgent&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;startDate&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;endDate&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;executionRule&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;frequency&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;dayOfExecution&lt;/td&gt;&lt;td&gt;conditional&lt;/td&gt;&lt;td&gt;conditional&lt;/td&gt;&lt;td&gt;conditional&lt;/td&gt;&lt;td&gt;conditional&lt;/td&gt;&lt;td&gt;conditional&lt;/td&gt;&lt;td&gt;conditional&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;  Footnotes from the table: 1) This element may only be used by agreement with the instructed financial institution. 2) The element may only be used in consultation with the financial institution commissioned. 3) The element is currently ignored by financial institutions. 4) Dependence on creditorAccount, see SIX Swiss Payments Standards implementation guidelines. 5) Type 4(V3), 6(V2, V3): Must be present. Type 4(V2): May be present. Other species: May not be present. 6) QR-reference, creditor reference or IPI reference 7) currencyOfTransfer is a subfield of equivalentAmount and may only be used if equivalentAmount is used instead of instructedAmount. 8) QR-IBAN (CH/LI) must be present.  IMPORTANT: In this API definition the following holds:   *  All data elements mentioned above are defined, but some of them are commented,     i.e. they are only visible in the source code and can be used by uncommenting them.   * Data elements which are mandatory in the table above for all payment products     are set to be mandatory in this specification.   * Data elements which are indicated in the table above as n.a. for all payment products are commented in the source code.   * Data elements which are indicated to be option, conditional or mandatory for at least one payment product     in the table above are set to be optional in the s specification except the case where all are definde to be mandatory.   * Data element which are inticated to be n.a. can be used by the ASPS if needed.     In this case uncomment tthe the relatetd lines in the source code.   * If one uses this data types for some payment products he has to ensure that the used data type is     valid according to the underlying payment product, e.g. by some appropriate validations. 
 */

#ifndef OAIPeriodicPaymentInitiation_json_H
#define OAIPeriodicPaymentInitiation_json_H

#include <QJsonObject>

#include "OAIAccountReference16_CH.h"
#include "OAIAddress.h"
#include "OAIAmount.h"
#include "OAIChargeBearer.h"
#include "OAICreditorAgent7_CH.h"
#include "OAIDayOfExecution.h"
#include "OAIDebtorAgent7_CH.h"
#include "OAIExchangeRateInformation1.h"
#include "OAIExecutionRule.h"
#include "OAIExternalServiceLevel1Code.h"
#include "OAIFrequencyCode.h"
#include "OAIPurposeCode.h"
#include "OAIRemittanceInformationStructured.h"
#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccountReference16_CH;
class OAIAddress;
class OAICreditorAgent7_CH;
class OAIDebtorAgent7_CH;
class OAIAmount;
class OAIExchangeRateInformation1;
class OAIRemittanceInformationStructured;

class OAIPeriodicPaymentInitiation_json : public OAIObject {
public:
    OAIPeriodicPaymentInitiation_json();
    OAIPeriodicPaymentInitiation_json(QString json);
    ~OAIPeriodicPaymentInitiation_json() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIChargeBearer getChargeBearer() const;
    void setChargeBearer(const OAIChargeBearer &charge_bearer);
    bool is_charge_bearer_Set() const;
    bool is_charge_bearer_Valid() const;

    OAIAccountReference16_CH getCreditorAccount() const;
    void setCreditorAccount(const OAIAccountReference16_CH &creditor_account);
    bool is_creditor_account_Set() const;
    bool is_creditor_account_Valid() const;

    OAIAddress getCreditorAddress() const;
    void setCreditorAddress(const OAIAddress &creditor_address);
    bool is_creditor_address_Set() const;
    bool is_creditor_address_Valid() const;

    OAICreditorAgent7_CH getCreditorAgent() const;
    void setCreditorAgent(const OAICreditorAgent7_CH &creditor_agent);
    bool is_creditor_agent_Set() const;
    bool is_creditor_agent_Valid() const;

    QString getCreditorAgentName() const;
    void setCreditorAgentName(const QString &creditor_agent_name);
    bool is_creditor_agent_name_Set() const;
    bool is_creditor_agent_name_Valid() const;

    QString getCreditorId() const;
    void setCreditorId(const QString &creditor_id);
    bool is_creditor_id_Set() const;
    bool is_creditor_id_Valid() const;

    QString getCreditorName() const;
    void setCreditorName(const QString &creditor_name);
    bool is_creditor_name_Set() const;
    bool is_creditor_name_Valid() const;

    QString getCreditorNameAndAddress() const;
    void setCreditorNameAndAddress(const QString &creditor_name_and_address);
    bool is_creditor_name_and_address_Set() const;
    bool is_creditor_name_and_address_Valid() const;

    OAIDayOfExecution getDayOfExecution() const;
    void setDayOfExecution(const OAIDayOfExecution &day_of_execution);
    bool is_day_of_execution_Set() const;
    bool is_day_of_execution_Valid() const;

    OAIAccountReference16_CH getDebtorAccount() const;
    void setDebtorAccount(const OAIAccountReference16_CH &debtor_account);
    bool is_debtor_account_Set() const;
    bool is_debtor_account_Valid() const;

    OAIDebtorAgent7_CH getDebtorAgent() const;
    void setDebtorAgent(const OAIDebtorAgent7_CH &debtor_agent);
    bool is_debtor_agent_Set() const;
    bool is_debtor_agent_Valid() const;

    QString getDebtorId() const;
    void setDebtorId(const QString &debtor_id);
    bool is_debtor_id_Set() const;
    bool is_debtor_id_Valid() const;

    QString getDebtorName() const;
    void setDebtorName(const QString &debtor_name);
    bool is_debtor_name_Set() const;
    bool is_debtor_name_Valid() const;

    QDate getEndDate() const;
    void setEndDate(const QDate &end_date);
    bool is_end_date_Set() const;
    bool is_end_date_Valid() const;

    QString getEndToEndIdentification() const;
    void setEndToEndIdentification(const QString &end_to_end_identification);
    bool is_end_to_end_identification_Set() const;
    bool is_end_to_end_identification_Valid() const;

    OAIAmount getEquivalentAmount() const;
    void setEquivalentAmount(const OAIAmount &equivalent_amount);
    bool is_equivalent_amount_Set() const;
    bool is_equivalent_amount_Valid() const;

    OAIExchangeRateInformation1 getExchangeRateInformation() const;
    void setExchangeRateInformation(const OAIExchangeRateInformation1 &exchange_rate_information);
    bool is_exchange_rate_information_Set() const;
    bool is_exchange_rate_information_Valid() const;

    OAIExecutionRule getExecutionRule() const;
    void setExecutionRule(const OAIExecutionRule &execution_rule);
    bool is_execution_rule_Set() const;
    bool is_execution_rule_Valid() const;

    OAIFrequencyCode getFrequency() const;
    void setFrequency(const OAIFrequencyCode &frequency);
    bool is_frequency_Set() const;
    bool is_frequency_Valid() const;

    OAIAmount getInstructedAmount() const;
    void setInstructedAmount(const OAIAmount &instructed_amount);
    bool is_instructed_amount_Set() const;
    bool is_instructed_amount_Valid() const;

    QString getIntermediaryAgent() const;
    void setIntermediaryAgent(const QString &intermediary_agent);
    bool is_intermediary_agent_Set() const;
    bool is_intermediary_agent_Valid() const;

    OAIPurposeCode getPurposeCode() const;
    void setPurposeCode(const OAIPurposeCode &purpose_code);
    bool is_purpose_code_Set() const;
    bool is_purpose_code_Valid() const;

    OAIRemittanceInformationStructured getRemittanceInformationStructured() const;
    void setRemittanceInformationStructured(const OAIRemittanceInformationStructured &remittance_information_structured);
    bool is_remittance_information_structured_Set() const;
    bool is_remittance_information_structured_Valid() const;

    QString getRemittanceInformationUnstructured() const;
    void setRemittanceInformationUnstructured(const QString &remittance_information_unstructured);
    bool is_remittance_information_unstructured_Set() const;
    bool is_remittance_information_unstructured_Valid() const;

    OAIExternalServiceLevel1Code getServiceLevel() const;
    void setServiceLevel(const OAIExternalServiceLevel1Code &service_level);
    bool is_service_level_Set() const;
    bool is_service_level_Valid() const;

    QDate getStartDate() const;
    void setStartDate(const QDate &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    QString getTransactionCurrency() const;
    void setTransactionCurrency(const QString &transaction_currency);
    bool is_transaction_currency_Set() const;
    bool is_transaction_currency_Valid() const;

    QString getUltimateCreditor() const;
    void setUltimateCreditor(const QString &ultimate_creditor);
    bool is_ultimate_creditor_Set() const;
    bool is_ultimate_creditor_Valid() const;

    QString getUltimateDebtor() const;
    void setUltimateDebtor(const QString &ultimate_debtor);
    bool is_ultimate_debtor_Set() const;
    bool is_ultimate_debtor_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIChargeBearer m_charge_bearer;
    bool m_charge_bearer_isSet;
    bool m_charge_bearer_isValid;

    OAIAccountReference16_CH m_creditor_account;
    bool m_creditor_account_isSet;
    bool m_creditor_account_isValid;

    OAIAddress m_creditor_address;
    bool m_creditor_address_isSet;
    bool m_creditor_address_isValid;

    OAICreditorAgent7_CH m_creditor_agent;
    bool m_creditor_agent_isSet;
    bool m_creditor_agent_isValid;

    QString m_creditor_agent_name;
    bool m_creditor_agent_name_isSet;
    bool m_creditor_agent_name_isValid;

    QString m_creditor_id;
    bool m_creditor_id_isSet;
    bool m_creditor_id_isValid;

    QString m_creditor_name;
    bool m_creditor_name_isSet;
    bool m_creditor_name_isValid;

    QString m_creditor_name_and_address;
    bool m_creditor_name_and_address_isSet;
    bool m_creditor_name_and_address_isValid;

    OAIDayOfExecution m_day_of_execution;
    bool m_day_of_execution_isSet;
    bool m_day_of_execution_isValid;

    OAIAccountReference16_CH m_debtor_account;
    bool m_debtor_account_isSet;
    bool m_debtor_account_isValid;

    OAIDebtorAgent7_CH m_debtor_agent;
    bool m_debtor_agent_isSet;
    bool m_debtor_agent_isValid;

    QString m_debtor_id;
    bool m_debtor_id_isSet;
    bool m_debtor_id_isValid;

    QString m_debtor_name;
    bool m_debtor_name_isSet;
    bool m_debtor_name_isValid;

    QDate m_end_date;
    bool m_end_date_isSet;
    bool m_end_date_isValid;

    QString m_end_to_end_identification;
    bool m_end_to_end_identification_isSet;
    bool m_end_to_end_identification_isValid;

    OAIAmount m_equivalent_amount;
    bool m_equivalent_amount_isSet;
    bool m_equivalent_amount_isValid;

    OAIExchangeRateInformation1 m_exchange_rate_information;
    bool m_exchange_rate_information_isSet;
    bool m_exchange_rate_information_isValid;

    OAIExecutionRule m_execution_rule;
    bool m_execution_rule_isSet;
    bool m_execution_rule_isValid;

    OAIFrequencyCode m_frequency;
    bool m_frequency_isSet;
    bool m_frequency_isValid;

    OAIAmount m_instructed_amount;
    bool m_instructed_amount_isSet;
    bool m_instructed_amount_isValid;

    QString m_intermediary_agent;
    bool m_intermediary_agent_isSet;
    bool m_intermediary_agent_isValid;

    OAIPurposeCode m_purpose_code;
    bool m_purpose_code_isSet;
    bool m_purpose_code_isValid;

    OAIRemittanceInformationStructured m_remittance_information_structured;
    bool m_remittance_information_structured_isSet;
    bool m_remittance_information_structured_isValid;

    QString m_remittance_information_unstructured;
    bool m_remittance_information_unstructured_isSet;
    bool m_remittance_information_unstructured_isValid;

    OAIExternalServiceLevel1Code m_service_level;
    bool m_service_level_isSet;
    bool m_service_level_isValid;

    QDate m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    QString m_transaction_currency;
    bool m_transaction_currency_isSet;
    bool m_transaction_currency_isValid;

    QString m_ultimate_creditor;
    bool m_ultimate_creditor_isSet;
    bool m_ultimate_creditor_isValid;

    QString m_ultimate_debtor;
    bool m_ultimate_debtor_isSet;
    bool m_ultimate_debtor_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPeriodicPaymentInitiation_json)

#endif // OAIPeriodicPaymentInitiation_json_H
