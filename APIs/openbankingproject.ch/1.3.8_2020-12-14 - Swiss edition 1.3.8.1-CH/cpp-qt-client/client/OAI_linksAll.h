/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_linksAll.h
 *
 * A _link object with all availabel link types. 
 */

#ifndef OAI_linksAll_H
#define OAI_linksAll_H

#include <QJsonObject>

#include "OAIHrefType.h"
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHrefType;

class OAI_linksAll : public OAIObject {
public:
    OAI_linksAll();
    OAI_linksAll(QString json);
    ~OAI_linksAll() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIHrefType getAccount() const;
    void setAccount(const OAIHrefType &account);
    bool is_account_Set() const;
    bool is_account_Valid() const;

    OAIHrefType getAuthoriseTransaction() const;
    void setAuthoriseTransaction(const OAIHrefType &authorise_transaction);
    bool is_authorise_transaction_Set() const;
    bool is_authorise_transaction_Valid() const;

    OAIHrefType getBalances() const;
    void setBalances(const OAIHrefType &balances);
    bool is_balances_Set() const;
    bool is_balances_Valid() const;

    OAIHrefType getCardAccount() const;
    void setCardAccount(const OAIHrefType &card_account);
    bool is_card_account_Set() const;
    bool is_card_account_Valid() const;

    OAIHrefType getCardTransactions() const;
    void setCardTransactions(const OAIHrefType &card_transactions);
    bool is_card_transactions_Set() const;
    bool is_card_transactions_Valid() const;

    OAIHrefType getConfirmation() const;
    void setConfirmation(const OAIHrefType &confirmation);
    bool is_confirmation_Set() const;
    bool is_confirmation_Valid() const;

    OAIHrefType getDownload() const;
    void setDownload(const OAIHrefType &download);
    bool is_download_Set() const;
    bool is_download_Valid() const;

    OAIHrefType getFirst() const;
    void setFirst(const OAIHrefType &first);
    bool is_first_Set() const;
    bool is_first_Valid() const;

    OAIHrefType getLast() const;
    void setLast(const OAIHrefType &last);
    bool is_last_Set() const;
    bool is_last_Valid() const;

    OAIHrefType getNext() const;
    void setNext(const OAIHrefType &next);
    bool is_next_Set() const;
    bool is_next_Valid() const;

    OAIHrefType getPrevious() const;
    void setPrevious(const OAIHrefType &previous);
    bool is_previous_Set() const;
    bool is_previous_Valid() const;

    OAIHrefType getScaOAuth() const;
    void setScaOAuth(const OAIHrefType &sca_o_auth);
    bool is_sca_o_auth_Set() const;
    bool is_sca_o_auth_Valid() const;

    OAIHrefType getScaRedirect() const;
    void setScaRedirect(const OAIHrefType &sca_redirect);
    bool is_sca_redirect_Set() const;
    bool is_sca_redirect_Valid() const;

    OAIHrefType getScaStatus() const;
    void setScaStatus(const OAIHrefType &sca_status);
    bool is_sca_status_Set() const;
    bool is_sca_status_Valid() const;

    OAIHrefType getSelectAuthenticationMethod() const;
    void setSelectAuthenticationMethod(const OAIHrefType &select_authentication_method);
    bool is_select_authentication_method_Set() const;
    bool is_select_authentication_method_Valid() const;

    OAIHrefType getSelf() const;
    void setSelf(const OAIHrefType &self);
    bool is_self_Set() const;
    bool is_self_Valid() const;

    OAIHrefType getStartAuthorisation() const;
    void setStartAuthorisation(const OAIHrefType &start_authorisation);
    bool is_start_authorisation_Set() const;
    bool is_start_authorisation_Valid() const;

    OAIHrefType getStartAuthorisationWithAuthenticationMethodSelection() const;
    void setStartAuthorisationWithAuthenticationMethodSelection(const OAIHrefType &start_authorisation_with_authentication_method_selection);
    bool is_start_authorisation_with_authentication_method_selection_Set() const;
    bool is_start_authorisation_with_authentication_method_selection_Valid() const;

    OAIHrefType getStartAuthorisationWithEncryptedPsuAuthentication() const;
    void setStartAuthorisationWithEncryptedPsuAuthentication(const OAIHrefType &start_authorisation_with_encrypted_psu_authentication);
    bool is_start_authorisation_with_encrypted_psu_authentication_Set() const;
    bool is_start_authorisation_with_encrypted_psu_authentication_Valid() const;

    OAIHrefType getStartAuthorisationWithProprietaryData() const;
    void setStartAuthorisationWithProprietaryData(const OAIHrefType &start_authorisation_with_proprietary_data);
    bool is_start_authorisation_with_proprietary_data_Set() const;
    bool is_start_authorisation_with_proprietary_data_Valid() const;

    OAIHrefType getStartAuthorisationWithPsuAuthentication() const;
    void setStartAuthorisationWithPsuAuthentication(const OAIHrefType &start_authorisation_with_psu_authentication);
    bool is_start_authorisation_with_psu_authentication_Set() const;
    bool is_start_authorisation_with_psu_authentication_Valid() const;

    OAIHrefType getStartAuthorisationWithPsuIdentification() const;
    void setStartAuthorisationWithPsuIdentification(const OAIHrefType &start_authorisation_with_psu_identification);
    bool is_start_authorisation_with_psu_identification_Set() const;
    bool is_start_authorisation_with_psu_identification_Valid() const;

    OAIHrefType getStartAuthorisationWithTransactionAuthorisation() const;
    void setStartAuthorisationWithTransactionAuthorisation(const OAIHrefType &start_authorisation_with_transaction_authorisation);
    bool is_start_authorisation_with_transaction_authorisation_Set() const;
    bool is_start_authorisation_with_transaction_authorisation_Valid() const;

    OAIHrefType getStatus() const;
    void setStatus(const OAIHrefType &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIHrefType getTransactionDetails() const;
    void setTransactionDetails(const OAIHrefType &transaction_details);
    bool is_transaction_details_Set() const;
    bool is_transaction_details_Valid() const;

    OAIHrefType getTransactions() const;
    void setTransactions(const OAIHrefType &transactions);
    bool is_transactions_Set() const;
    bool is_transactions_Valid() const;

    OAIHrefType getUpdateAdditionalEncryptedPsuAuthentication() const;
    void setUpdateAdditionalEncryptedPsuAuthentication(const OAIHrefType &update_additional_encrypted_psu_authentication);
    bool is_update_additional_encrypted_psu_authentication_Set() const;
    bool is_update_additional_encrypted_psu_authentication_Valid() const;

    OAIHrefType getUpdateAdditionalPsuAuthentication() const;
    void setUpdateAdditionalPsuAuthentication(const OAIHrefType &update_additional_psu_authentication);
    bool is_update_additional_psu_authentication_Set() const;
    bool is_update_additional_psu_authentication_Valid() const;

    OAIHrefType getUpdateEncryptedPsuAuthentication() const;
    void setUpdateEncryptedPsuAuthentication(const OAIHrefType &update_encrypted_psu_authentication);
    bool is_update_encrypted_psu_authentication_Set() const;
    bool is_update_encrypted_psu_authentication_Valid() const;

    OAIHrefType getUpdateProprietaryData() const;
    void setUpdateProprietaryData(const OAIHrefType &update_proprietary_data);
    bool is_update_proprietary_data_Set() const;
    bool is_update_proprietary_data_Valid() const;

    OAIHrefType getUpdatePsuAuthentication() const;
    void setUpdatePsuAuthentication(const OAIHrefType &update_psu_authentication);
    bool is_update_psu_authentication_Set() const;
    bool is_update_psu_authentication_Valid() const;

    OAIHrefType getUpdatePsuIdentification() const;
    void setUpdatePsuIdentification(const OAIHrefType &update_psu_identification);
    bool is_update_psu_identification_Set() const;
    bool is_update_psu_identification_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIHrefType m_account;
    bool m_account_isSet;
    bool m_account_isValid;

    OAIHrefType m_authorise_transaction;
    bool m_authorise_transaction_isSet;
    bool m_authorise_transaction_isValid;

    OAIHrefType m_balances;
    bool m_balances_isSet;
    bool m_balances_isValid;

    OAIHrefType m_card_account;
    bool m_card_account_isSet;
    bool m_card_account_isValid;

    OAIHrefType m_card_transactions;
    bool m_card_transactions_isSet;
    bool m_card_transactions_isValid;

    OAIHrefType m_confirmation;
    bool m_confirmation_isSet;
    bool m_confirmation_isValid;

    OAIHrefType m_download;
    bool m_download_isSet;
    bool m_download_isValid;

    OAIHrefType m_first;
    bool m_first_isSet;
    bool m_first_isValid;

    OAIHrefType m_last;
    bool m_last_isSet;
    bool m_last_isValid;

    OAIHrefType m_next;
    bool m_next_isSet;
    bool m_next_isValid;

    OAIHrefType m_previous;
    bool m_previous_isSet;
    bool m_previous_isValid;

    OAIHrefType m_sca_o_auth;
    bool m_sca_o_auth_isSet;
    bool m_sca_o_auth_isValid;

    OAIHrefType m_sca_redirect;
    bool m_sca_redirect_isSet;
    bool m_sca_redirect_isValid;

    OAIHrefType m_sca_status;
    bool m_sca_status_isSet;
    bool m_sca_status_isValid;

    OAIHrefType m_select_authentication_method;
    bool m_select_authentication_method_isSet;
    bool m_select_authentication_method_isValid;

    OAIHrefType m_self;
    bool m_self_isSet;
    bool m_self_isValid;

    OAIHrefType m_start_authorisation;
    bool m_start_authorisation_isSet;
    bool m_start_authorisation_isValid;

    OAIHrefType m_start_authorisation_with_authentication_method_selection;
    bool m_start_authorisation_with_authentication_method_selection_isSet;
    bool m_start_authorisation_with_authentication_method_selection_isValid;

    OAIHrefType m_start_authorisation_with_encrypted_psu_authentication;
    bool m_start_authorisation_with_encrypted_psu_authentication_isSet;
    bool m_start_authorisation_with_encrypted_psu_authentication_isValid;

    OAIHrefType m_start_authorisation_with_proprietary_data;
    bool m_start_authorisation_with_proprietary_data_isSet;
    bool m_start_authorisation_with_proprietary_data_isValid;

    OAIHrefType m_start_authorisation_with_psu_authentication;
    bool m_start_authorisation_with_psu_authentication_isSet;
    bool m_start_authorisation_with_psu_authentication_isValid;

    OAIHrefType m_start_authorisation_with_psu_identification;
    bool m_start_authorisation_with_psu_identification_isSet;
    bool m_start_authorisation_with_psu_identification_isValid;

    OAIHrefType m_start_authorisation_with_transaction_authorisation;
    bool m_start_authorisation_with_transaction_authorisation_isSet;
    bool m_start_authorisation_with_transaction_authorisation_isValid;

    OAIHrefType m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIHrefType m_transaction_details;
    bool m_transaction_details_isSet;
    bool m_transaction_details_isValid;

    OAIHrefType m_transactions;
    bool m_transactions_isSet;
    bool m_transactions_isValid;

    OAIHrefType m_update_additional_encrypted_psu_authentication;
    bool m_update_additional_encrypted_psu_authentication_isSet;
    bool m_update_additional_encrypted_psu_authentication_isValid;

    OAIHrefType m_update_additional_psu_authentication;
    bool m_update_additional_psu_authentication_isSet;
    bool m_update_additional_psu_authentication_isValid;

    OAIHrefType m_update_encrypted_psu_authentication;
    bool m_update_encrypted_psu_authentication_isSet;
    bool m_update_encrypted_psu_authentication_isValid;

    OAIHrefType m_update_proprietary_data;
    bool m_update_proprietary_data_isSet;
    bool m_update_proprietary_data_isValid;

    OAIHrefType m_update_psu_authentication;
    bool m_update_psu_authentication_isSet;
    bool m_update_psu_authentication_isValid;

    OAIHrefType m_update_psu_identification;
    bool m_update_psu_identification_isSet;
    bool m_update_psu_identification_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_linksAll)

#endif // OAI_linksAll_H
