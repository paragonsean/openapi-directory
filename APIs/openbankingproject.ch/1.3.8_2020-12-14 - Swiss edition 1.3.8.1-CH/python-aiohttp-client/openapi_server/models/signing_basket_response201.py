# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_object import AuthenticationObject
from openapi_server.models.challenge_data import ChallengeData
from openapi_server.models.links_signing_basket import LinksSigningBasket
from openapi_server.models.tpp_message2_xx import TppMessage2XX
from openapi_server.models.transaction_status_sbs import TransactionStatusSBS
from openapi_server import util


class SigningBasketResponse201(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: LinksSigningBasket=None, basket_id: str=None, challenge_data: ChallengeData=None, chosen_sca_method: AuthenticationObject=None, psu_message: str=None, sca_methods: List[AuthenticationObject]=None, tpp_messages: List[TppMessage2XX]=None, transaction_status: TransactionStatusSBS=None):
        """SigningBasketResponse201 - a model defined in OpenAPI

        :param links: The links of this SigningBasketResponse201.
        :param basket_id: The basket_id of this SigningBasketResponse201.
        :param challenge_data: The challenge_data of this SigningBasketResponse201.
        :param chosen_sca_method: The chosen_sca_method of this SigningBasketResponse201.
        :param psu_message: The psu_message of this SigningBasketResponse201.
        :param sca_methods: The sca_methods of this SigningBasketResponse201.
        :param tpp_messages: The tpp_messages of this SigningBasketResponse201.
        :param transaction_status: The transaction_status of this SigningBasketResponse201.
        """
        self.openapi_types = {
            'links': LinksSigningBasket,
            'basket_id': str,
            'challenge_data': ChallengeData,
            'chosen_sca_method': AuthenticationObject,
            'psu_message': str,
            'sca_methods': List[AuthenticationObject],
            'tpp_messages': List[TppMessage2XX],
            'transaction_status': TransactionStatusSBS
        }

        self.attribute_map = {
            'links': '_links',
            'basket_id': 'basketId',
            'challenge_data': 'challengeData',
            'chosen_sca_method': 'chosenScaMethod',
            'psu_message': 'psuMessage',
            'sca_methods': 'scaMethods',
            'tpp_messages': 'tppMessages',
            'transaction_status': 'transactionStatus'
        }

        self._links = links
        self._basket_id = basket_id
        self._challenge_data = challenge_data
        self._chosen_sca_method = chosen_sca_method
        self._psu_message = psu_message
        self._sca_methods = sca_methods
        self._tpp_messages = tpp_messages
        self._transaction_status = transaction_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SigningBasketResponse201':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The signingBasketResponse-201 of this SigningBasketResponse201.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this SigningBasketResponse201.


        :return: The links of this SigningBasketResponse201.
        :rtype: LinksSigningBasket
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SigningBasketResponse201.


        :param links: The links of this SigningBasketResponse201.
        :type links: LinksSigningBasket
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def basket_id(self):
        """Gets the basket_id of this SigningBasketResponse201.

        Resource identification of the generated signing basket resource.

        :return: The basket_id of this SigningBasketResponse201.
        :rtype: str
        """
        return self._basket_id

    @basket_id.setter
    def basket_id(self, basket_id):
        """Sets the basket_id of this SigningBasketResponse201.

        Resource identification of the generated signing basket resource.

        :param basket_id: The basket_id of this SigningBasketResponse201.
        :type basket_id: str
        """
        if basket_id is None:
            raise ValueError("Invalid value for `basket_id`, must not be `None`")

        self._basket_id = basket_id

    @property
    def challenge_data(self):
        """Gets the challenge_data of this SigningBasketResponse201.


        :return: The challenge_data of this SigningBasketResponse201.
        :rtype: ChallengeData
        """
        return self._challenge_data

    @challenge_data.setter
    def challenge_data(self, challenge_data):
        """Sets the challenge_data of this SigningBasketResponse201.


        :param challenge_data: The challenge_data of this SigningBasketResponse201.
        :type challenge_data: ChallengeData
        """

        self._challenge_data = challenge_data

    @property
    def chosen_sca_method(self):
        """Gets the chosen_sca_method of this SigningBasketResponse201.


        :return: The chosen_sca_method of this SigningBasketResponse201.
        :rtype: AuthenticationObject
        """
        return self._chosen_sca_method

    @chosen_sca_method.setter
    def chosen_sca_method(self, chosen_sca_method):
        """Sets the chosen_sca_method of this SigningBasketResponse201.


        :param chosen_sca_method: The chosen_sca_method of this SigningBasketResponse201.
        :type chosen_sca_method: AuthenticationObject
        """

        self._chosen_sca_method = chosen_sca_method

    @property
    def psu_message(self):
        """Gets the psu_message of this SigningBasketResponse201.

        Text to be displayed to the PSU.

        :return: The psu_message of this SigningBasketResponse201.
        :rtype: str
        """
        return self._psu_message

    @psu_message.setter
    def psu_message(self, psu_message):
        """Sets the psu_message of this SigningBasketResponse201.

        Text to be displayed to the PSU.

        :param psu_message: The psu_message of this SigningBasketResponse201.
        :type psu_message: str
        """
        if psu_message is not None and len(psu_message) > 500:
            raise ValueError("Invalid value for `psu_message`, length must be less than or equal to `500`")

        self._psu_message = psu_message

    @property
    def sca_methods(self):
        """Gets the sca_methods of this SigningBasketResponse201.

        This data element might be contained, if SCA is required and if the PSU has a choice between different authentication methods.  Depending on the risk management of the ASPSP this choice might be offered before or after the PSU has been identified with the first relevant factor, or if an access token is transported.  If this data element is contained, then there is also a hyperlink of type 'startAuthorisationWithAuthenticationMethodSelection' contained in the response body.  These methods shall be presented towards the PSU for selection by the TPP. 

        :return: The sca_methods of this SigningBasketResponse201.
        :rtype: List[AuthenticationObject]
        """
        return self._sca_methods

    @sca_methods.setter
    def sca_methods(self, sca_methods):
        """Sets the sca_methods of this SigningBasketResponse201.

        This data element might be contained, if SCA is required and if the PSU has a choice between different authentication methods.  Depending on the risk management of the ASPSP this choice might be offered before or after the PSU has been identified with the first relevant factor, or if an access token is transported.  If this data element is contained, then there is also a hyperlink of type 'startAuthorisationWithAuthenticationMethodSelection' contained in the response body.  These methods shall be presented towards the PSU for selection by the TPP. 

        :param sca_methods: The sca_methods of this SigningBasketResponse201.
        :type sca_methods: List[AuthenticationObject]
        """

        self._sca_methods = sca_methods

    @property
    def tpp_messages(self):
        """Gets the tpp_messages of this SigningBasketResponse201.


        :return: The tpp_messages of this SigningBasketResponse201.
        :rtype: List[TppMessage2XX]
        """
        return self._tpp_messages

    @tpp_messages.setter
    def tpp_messages(self, tpp_messages):
        """Sets the tpp_messages of this SigningBasketResponse201.


        :param tpp_messages: The tpp_messages of this SigningBasketResponse201.
        :type tpp_messages: List[TppMessage2XX]
        """

        self._tpp_messages = tpp_messages

    @property
    def transaction_status(self):
        """Gets the transaction_status of this SigningBasketResponse201.


        :return: The transaction_status of this SigningBasketResponse201.
        :rtype: TransactionStatusSBS
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this SigningBasketResponse201.


        :param transaction_status: The transaction_status of this SigningBasketResponse201.
        :type transaction_status: TransactionStatusSBS
        """
        if transaction_status is None:
            raise ValueError("Invalid value for `transaction_status`, must not be `None`")

        self._transaction_status = transaction_status
