# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_status import AccountStatus
from openapi_server.models.amount import Amount
from openapi_server.models.balance import Balance
from openapi_server.models.links_account_details import LinksAccountDetails
import re
from openapi_server import util


class CardAccountDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: LinksAccountDetails=None, balances: List[Balance]=None, credit_limit: Amount=None, currency: str=None, debit_accounting: bool=None, details: str=None, display_name: str=None, masked_pan: str=None, name: str=None, owner_name: str=None, product: str=None, resource_id: str=None, status: AccountStatus=None, usage: str=None):
        """CardAccountDetails - a model defined in OpenAPI

        :param links: The links of this CardAccountDetails.
        :param balances: The balances of this CardAccountDetails.
        :param credit_limit: The credit_limit of this CardAccountDetails.
        :param currency: The currency of this CardAccountDetails.
        :param debit_accounting: The debit_accounting of this CardAccountDetails.
        :param details: The details of this CardAccountDetails.
        :param display_name: The display_name of this CardAccountDetails.
        :param masked_pan: The masked_pan of this CardAccountDetails.
        :param name: The name of this CardAccountDetails.
        :param owner_name: The owner_name of this CardAccountDetails.
        :param product: The product of this CardAccountDetails.
        :param resource_id: The resource_id of this CardAccountDetails.
        :param status: The status of this CardAccountDetails.
        :param usage: The usage of this CardAccountDetails.
        """
        self.openapi_types = {
            'links': LinksAccountDetails,
            'balances': List[Balance],
            'credit_limit': Amount,
            'currency': str,
            'debit_accounting': bool,
            'details': str,
            'display_name': str,
            'masked_pan': str,
            'name': str,
            'owner_name': str,
            'product': str,
            'resource_id': str,
            'status': AccountStatus,
            'usage': str
        }

        self.attribute_map = {
            'links': '_links',
            'balances': 'balances',
            'credit_limit': 'creditLimit',
            'currency': 'currency',
            'debit_accounting': 'debitAccounting',
            'details': 'details',
            'display_name': 'displayName',
            'masked_pan': 'maskedPan',
            'name': 'name',
            'owner_name': 'ownerName',
            'product': 'product',
            'resource_id': 'resourceId',
            'status': 'status',
            'usage': 'usage'
        }

        self._links = links
        self._balances = balances
        self._credit_limit = credit_limit
        self._currency = currency
        self._debit_accounting = debit_accounting
        self._details = details
        self._display_name = display_name
        self._masked_pan = masked_pan
        self._name = name
        self._owner_name = owner_name
        self._product = product
        self._resource_id = resource_id
        self._status = status
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardAccountDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cardAccountDetails of this CardAccountDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this CardAccountDetails.


        :return: The links of this CardAccountDetails.
        :rtype: LinksAccountDetails
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CardAccountDetails.


        :param links: The links of this CardAccountDetails.
        :type links: LinksAccountDetails
        """

        self._links = links

    @property
    def balances(self):
        """Gets the balances of this CardAccountDetails.

        A list of balances regarding this account, e.g. the current balance, the last booked balance. The list might be restricted to the current balance. 

        :return: The balances of this CardAccountDetails.
        :rtype: List[Balance]
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this CardAccountDetails.

        A list of balances regarding this account, e.g. the current balance, the last booked balance. The list might be restricted to the current balance. 

        :param balances: The balances of this CardAccountDetails.
        :type balances: List[Balance]
        """

        self._balances = balances

    @property
    def credit_limit(self):
        """Gets the credit_limit of this CardAccountDetails.


        :return: The credit_limit of this CardAccountDetails.
        :rtype: Amount
        """
        return self._credit_limit

    @credit_limit.setter
    def credit_limit(self, credit_limit):
        """Sets the credit_limit of this CardAccountDetails.


        :param credit_limit: The credit_limit of this CardAccountDetails.
        :type credit_limit: Amount
        """

        self._credit_limit = credit_limit

    @property
    def currency(self):
        """Gets the currency of this CardAccountDetails.

        ISO 4217 Alpha 3 currency code. 

        :return: The currency of this CardAccountDetails.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CardAccountDetails.

        ISO 4217 Alpha 3 currency code. 

        :param currency: The currency of this CardAccountDetails.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and not re.search(r'[A-Z]{3}', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/[A-Z]{3}/`")

        self._currency = currency

    @property
    def debit_accounting(self):
        """Gets the debit_accounting of this CardAccountDetails.

        If true, the amounts of debits on the reports are quoted positive with the related consequence for balances. If false, the amount of debits on the reports are quoted negative. 

        :return: The debit_accounting of this CardAccountDetails.
        :rtype: bool
        """
        return self._debit_accounting

    @debit_accounting.setter
    def debit_accounting(self, debit_accounting):
        """Sets the debit_accounting of this CardAccountDetails.

        If true, the amounts of debits on the reports are quoted positive with the related consequence for balances. If false, the amount of debits on the reports are quoted negative. 

        :param debit_accounting: The debit_accounting of this CardAccountDetails.
        :type debit_accounting: bool
        """

        self._debit_accounting = debit_accounting

    @property
    def details(self):
        """Gets the details of this CardAccountDetails.

        Specifications that might be provided by the ASPSP:   - characteristics of the account   - characteristics of the relevant card 

        :return: The details of this CardAccountDetails.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this CardAccountDetails.

        Specifications that might be provided by the ASPSP:   - characteristics of the account   - characteristics of the relevant card 

        :param details: The details of this CardAccountDetails.
        :type details: str
        """
        if details is not None and len(details) > 500:
            raise ValueError("Invalid value for `details`, length must be less than or equal to `500`")

        self._details = details

    @property
    def display_name(self):
        """Gets the display_name of this CardAccountDetails.

        Name of the account as defined by the PSU within online channels. 

        :return: The display_name of this CardAccountDetails.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CardAccountDetails.

        Name of the account as defined by the PSU within online channels. 

        :param display_name: The display_name of this CardAccountDetails.
        :type display_name: str
        """
        if display_name is not None and len(display_name) > 70:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `70`")

        self._display_name = display_name

    @property
    def masked_pan(self):
        """Gets the masked_pan of this CardAccountDetails.

        Masked Primary Account Number. 

        :return: The masked_pan of this CardAccountDetails.
        :rtype: str
        """
        return self._masked_pan

    @masked_pan.setter
    def masked_pan(self, masked_pan):
        """Sets the masked_pan of this CardAccountDetails.

        Masked Primary Account Number. 

        :param masked_pan: The masked_pan of this CardAccountDetails.
        :type masked_pan: str
        """
        if masked_pan is None:
            raise ValueError("Invalid value for `masked_pan`, must not be `None`")
        if masked_pan is not None and len(masked_pan) > 35:
            raise ValueError("Invalid value for `masked_pan`, length must be less than or equal to `35`")

        self._masked_pan = masked_pan

    @property
    def name(self):
        """Gets the name of this CardAccountDetails.

        Name of the account, as assigned by the ASPSP,  in agreement with the account owner in order to provide an additional means of identification of the account. 

        :return: The name of this CardAccountDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CardAccountDetails.

        Name of the account, as assigned by the ASPSP,  in agreement with the account owner in order to provide an additional means of identification of the account. 

        :param name: The name of this CardAccountDetails.
        :type name: str
        """
        if name is not None and len(name) > 70:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `70`")

        self._name = name

    @property
    def owner_name(self):
        """Gets the owner_name of this CardAccountDetails.

        Name of the legal account owner.  If there is more than one owner, then e.g. two names might be noted here.  For a corporate account, the corporate name is used for this attribute. Even if supported by the ASPSP, the provision of this field might depend on the fact whether an explicit consent to this specific additional account information has been given by the PSU. 

        :return: The owner_name of this CardAccountDetails.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this CardAccountDetails.

        Name of the legal account owner.  If there is more than one owner, then e.g. two names might be noted here.  For a corporate account, the corporate name is used for this attribute. Even if supported by the ASPSP, the provision of this field might depend on the fact whether an explicit consent to this specific additional account information has been given by the PSU. 

        :param owner_name: The owner_name of this CardAccountDetails.
        :type owner_name: str
        """
        if owner_name is not None and len(owner_name) > 140:
            raise ValueError("Invalid value for `owner_name`, length must be less than or equal to `140`")

        self._owner_name = owner_name

    @property
    def product(self):
        """Gets the product of this CardAccountDetails.

        Product Name of the Bank for this account, proprietary definition. 

        :return: The product of this CardAccountDetails.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this CardAccountDetails.

        Product Name of the Bank for this account, proprietary definition. 

        :param product: The product of this CardAccountDetails.
        :type product: str
        """
        if product is not None and len(product) > 35:
            raise ValueError("Invalid value for `product`, length must be less than or equal to `35`")

        self._product = product

    @property
    def resource_id(self):
        """Gets the resource_id of this CardAccountDetails.

        This is the data element to be used in the path when retrieving data from a dedicated account. This shall be filled, if addressable resource are created by the ASPSP on the /card-accounts endpoint. 

        :return: The resource_id of this CardAccountDetails.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this CardAccountDetails.

        This is the data element to be used in the path when retrieving data from a dedicated account. This shall be filled, if addressable resource are created by the ASPSP on the /card-accounts endpoint. 

        :param resource_id: The resource_id of this CardAccountDetails.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def status(self):
        """Gets the status of this CardAccountDetails.


        :return: The status of this CardAccountDetails.
        :rtype: AccountStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CardAccountDetails.


        :param status: The status of this CardAccountDetails.
        :type status: AccountStatus
        """

        self._status = status

    @property
    def usage(self):
        """Gets the usage of this CardAccountDetails.

        Specifies the usage of the account:   * PRIV: private personal account   * ORGA: professional account 

        :return: The usage of this CardAccountDetails.
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this CardAccountDetails.

        Specifies the usage of the account:   * PRIV: private personal account   * ORGA: professional account 

        :param usage: The usage of this CardAccountDetails.
        :type usage: str
        """
        allowed_values = ["PRIV", "ORGA"]  # noqa: E501
        if usage not in allowed_values:
            raise ValueError(
                "Invalid value for `usage` ({0}), must be one of {1}"
                .format(usage, allowed_values)
            )

        self._usage = usage
