# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_reference16_ch import AccountReference16CH
from openapi_server.models.address import Address
from openapi_server.models.amount import Amount
from openapi_server.models.creditor_agent7_ch import CreditorAgent7CH
from openapi_server.models.purpose_code import PurposeCode
from openapi_server.models.remittance_information_structured import RemittanceInformationStructured
from openapi_server.models.transaction_status import TransactionStatus
from openapi_server import util


class PaymentInitiationWithStatusResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creditor_account: AccountReference16CH=None, creditor_address: Address=None, creditor_agent: CreditorAgent7CH=None, creditor_name: str=None, debtor_account: AccountReference16CH=None, end_to_end_identification: str=None, instructed_amount: Amount=None, purpose_code: PurposeCode=None, remittance_information_structured: RemittanceInformationStructured=None, remittance_information_unstructured: str=None, remittance_information_unstructured_array: List[str]=None, requested_execution_date: date=None, requested_execution_time: datetime=None, transaction_status: TransactionStatus=None, ultimate_creditor: str=None, ultimate_debtor: str=None):
        """PaymentInitiationWithStatusResponse - a model defined in OpenAPI

        :param creditor_account: The creditor_account of this PaymentInitiationWithStatusResponse.
        :param creditor_address: The creditor_address of this PaymentInitiationWithStatusResponse.
        :param creditor_agent: The creditor_agent of this PaymentInitiationWithStatusResponse.
        :param creditor_name: The creditor_name of this PaymentInitiationWithStatusResponse.
        :param debtor_account: The debtor_account of this PaymentInitiationWithStatusResponse.
        :param end_to_end_identification: The end_to_end_identification of this PaymentInitiationWithStatusResponse.
        :param instructed_amount: The instructed_amount of this PaymentInitiationWithStatusResponse.
        :param purpose_code: The purpose_code of this PaymentInitiationWithStatusResponse.
        :param remittance_information_structured: The remittance_information_structured of this PaymentInitiationWithStatusResponse.
        :param remittance_information_unstructured: The remittance_information_unstructured of this PaymentInitiationWithStatusResponse.
        :param remittance_information_unstructured_array: The remittance_information_unstructured_array of this PaymentInitiationWithStatusResponse.
        :param requested_execution_date: The requested_execution_date of this PaymentInitiationWithStatusResponse.
        :param requested_execution_time: The requested_execution_time of this PaymentInitiationWithStatusResponse.
        :param transaction_status: The transaction_status of this PaymentInitiationWithStatusResponse.
        :param ultimate_creditor: The ultimate_creditor of this PaymentInitiationWithStatusResponse.
        :param ultimate_debtor: The ultimate_debtor of this PaymentInitiationWithStatusResponse.
        """
        self.openapi_types = {
            'creditor_account': AccountReference16CH,
            'creditor_address': Address,
            'creditor_agent': CreditorAgent7CH,
            'creditor_name': str,
            'debtor_account': AccountReference16CH,
            'end_to_end_identification': str,
            'instructed_amount': Amount,
            'purpose_code': PurposeCode,
            'remittance_information_structured': RemittanceInformationStructured,
            'remittance_information_unstructured': str,
            'remittance_information_unstructured_array': List[str],
            'requested_execution_date': date,
            'requested_execution_time': datetime,
            'transaction_status': TransactionStatus,
            'ultimate_creditor': str,
            'ultimate_debtor': str
        }

        self.attribute_map = {
            'creditor_account': 'creditorAccount',
            'creditor_address': 'creditorAddress',
            'creditor_agent': 'creditorAgent',
            'creditor_name': 'creditorName',
            'debtor_account': 'debtorAccount',
            'end_to_end_identification': 'endToEndIdentification',
            'instructed_amount': 'instructedAmount',
            'purpose_code': 'purposeCode',
            'remittance_information_structured': 'remittanceInformationStructured',
            'remittance_information_unstructured': 'remittanceInformationUnstructured',
            'remittance_information_unstructured_array': 'remittanceInformationUnstructuredArray',
            'requested_execution_date': 'requestedExecutionDate',
            'requested_execution_time': 'requestedExecutionTime',
            'transaction_status': 'transactionStatus',
            'ultimate_creditor': 'ultimateCreditor',
            'ultimate_debtor': 'ultimateDebtor'
        }

        self._creditor_account = creditor_account
        self._creditor_address = creditor_address
        self._creditor_agent = creditor_agent
        self._creditor_name = creditor_name
        self._debtor_account = debtor_account
        self._end_to_end_identification = end_to_end_identification
        self._instructed_amount = instructed_amount
        self._purpose_code = purpose_code
        self._remittance_information_structured = remittance_information_structured
        self._remittance_information_unstructured = remittance_information_unstructured
        self._remittance_information_unstructured_array = remittance_information_unstructured_array
        self._requested_execution_date = requested_execution_date
        self._requested_execution_time = requested_execution_time
        self._transaction_status = transaction_status
        self._ultimate_creditor = ultimate_creditor
        self._ultimate_debtor = ultimate_debtor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentInitiationWithStatusResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The paymentInitiationWithStatusResponse of this PaymentInitiationWithStatusResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creditor_account(self):
        """Gets the creditor_account of this PaymentInitiationWithStatusResponse.


        :return: The creditor_account of this PaymentInitiationWithStatusResponse.
        :rtype: AccountReference16CH
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this PaymentInitiationWithStatusResponse.


        :param creditor_account: The creditor_account of this PaymentInitiationWithStatusResponse.
        :type creditor_account: AccountReference16CH
        """
        if creditor_account is None:
            raise ValueError("Invalid value for `creditor_account`, must not be `None`")

        self._creditor_account = creditor_account

    @property
    def creditor_address(self):
        """Gets the creditor_address of this PaymentInitiationWithStatusResponse.


        :return: The creditor_address of this PaymentInitiationWithStatusResponse.
        :rtype: Address
        """
        return self._creditor_address

    @creditor_address.setter
    def creditor_address(self, creditor_address):
        """Sets the creditor_address of this PaymentInitiationWithStatusResponse.


        :param creditor_address: The creditor_address of this PaymentInitiationWithStatusResponse.
        :type creditor_address: Address
        """

        self._creditor_address = creditor_address

    @property
    def creditor_agent(self):
        """Gets the creditor_agent of this PaymentInitiationWithStatusResponse.


        :return: The creditor_agent of this PaymentInitiationWithStatusResponse.
        :rtype: CreditorAgent7CH
        """
        return self._creditor_agent

    @creditor_agent.setter
    def creditor_agent(self, creditor_agent):
        """Sets the creditor_agent of this PaymentInitiationWithStatusResponse.


        :param creditor_agent: The creditor_agent of this PaymentInitiationWithStatusResponse.
        :type creditor_agent: CreditorAgent7CH
        """

        self._creditor_agent = creditor_agent

    @property
    def creditor_name(self):
        """Gets the creditor_name of this PaymentInitiationWithStatusResponse.

        Creditor name.

        :return: The creditor_name of this PaymentInitiationWithStatusResponse.
        :rtype: str
        """
        return self._creditor_name

    @creditor_name.setter
    def creditor_name(self, creditor_name):
        """Sets the creditor_name of this PaymentInitiationWithStatusResponse.

        Creditor name.

        :param creditor_name: The creditor_name of this PaymentInitiationWithStatusResponse.
        :type creditor_name: str
        """
        if creditor_name is None:
            raise ValueError("Invalid value for `creditor_name`, must not be `None`")
        if creditor_name is not None and len(creditor_name) > 70:
            raise ValueError("Invalid value for `creditor_name`, length must be less than or equal to `70`")

        self._creditor_name = creditor_name

    @property
    def debtor_account(self):
        """Gets the debtor_account of this PaymentInitiationWithStatusResponse.


        :return: The debtor_account of this PaymentInitiationWithStatusResponse.
        :rtype: AccountReference16CH
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this PaymentInitiationWithStatusResponse.


        :param debtor_account: The debtor_account of this PaymentInitiationWithStatusResponse.
        :type debtor_account: AccountReference16CH
        """
        if debtor_account is None:
            raise ValueError("Invalid value for `debtor_account`, must not be `None`")

        self._debtor_account = debtor_account

    @property
    def end_to_end_identification(self):
        """Gets the end_to_end_identification of this PaymentInitiationWithStatusResponse.


        :return: The end_to_end_identification of this PaymentInitiationWithStatusResponse.
        :rtype: str
        """
        return self._end_to_end_identification

    @end_to_end_identification.setter
    def end_to_end_identification(self, end_to_end_identification):
        """Sets the end_to_end_identification of this PaymentInitiationWithStatusResponse.


        :param end_to_end_identification: The end_to_end_identification of this PaymentInitiationWithStatusResponse.
        :type end_to_end_identification: str
        """
        if end_to_end_identification is not None and len(end_to_end_identification) > 35:
            raise ValueError("Invalid value for `end_to_end_identification`, length must be less than or equal to `35`")

        self._end_to_end_identification = end_to_end_identification

    @property
    def instructed_amount(self):
        """Gets the instructed_amount of this PaymentInitiationWithStatusResponse.


        :return: The instructed_amount of this PaymentInitiationWithStatusResponse.
        :rtype: Amount
        """
        return self._instructed_amount

    @instructed_amount.setter
    def instructed_amount(self, instructed_amount):
        """Sets the instructed_amount of this PaymentInitiationWithStatusResponse.


        :param instructed_amount: The instructed_amount of this PaymentInitiationWithStatusResponse.
        :type instructed_amount: Amount
        """
        if instructed_amount is None:
            raise ValueError("Invalid value for `instructed_amount`, must not be `None`")

        self._instructed_amount = instructed_amount

    @property
    def purpose_code(self):
        """Gets the purpose_code of this PaymentInitiationWithStatusResponse.


        :return: The purpose_code of this PaymentInitiationWithStatusResponse.
        :rtype: PurposeCode
        """
        return self._purpose_code

    @purpose_code.setter
    def purpose_code(self, purpose_code):
        """Sets the purpose_code of this PaymentInitiationWithStatusResponse.


        :param purpose_code: The purpose_code of this PaymentInitiationWithStatusResponse.
        :type purpose_code: PurposeCode
        """

        self._purpose_code = purpose_code

    @property
    def remittance_information_structured(self):
        """Gets the remittance_information_structured of this PaymentInitiationWithStatusResponse.


        :return: The remittance_information_structured of this PaymentInitiationWithStatusResponse.
        :rtype: RemittanceInformationStructured
        """
        return self._remittance_information_structured

    @remittance_information_structured.setter
    def remittance_information_structured(self, remittance_information_structured):
        """Sets the remittance_information_structured of this PaymentInitiationWithStatusResponse.


        :param remittance_information_structured: The remittance_information_structured of this PaymentInitiationWithStatusResponse.
        :type remittance_information_structured: RemittanceInformationStructured
        """

        self._remittance_information_structured = remittance_information_structured

    @property
    def remittance_information_unstructured(self):
        """Gets the remittance_information_unstructured of this PaymentInitiationWithStatusResponse.

        Unstructured remittance information. 

        :return: The remittance_information_unstructured of this PaymentInitiationWithStatusResponse.
        :rtype: str
        """
        return self._remittance_information_unstructured

    @remittance_information_unstructured.setter
    def remittance_information_unstructured(self, remittance_information_unstructured):
        """Sets the remittance_information_unstructured of this PaymentInitiationWithStatusResponse.

        Unstructured remittance information. 

        :param remittance_information_unstructured: The remittance_information_unstructured of this PaymentInitiationWithStatusResponse.
        :type remittance_information_unstructured: str
        """
        if remittance_information_unstructured is not None and len(remittance_information_unstructured) > 140:
            raise ValueError("Invalid value for `remittance_information_unstructured`, length must be less than or equal to `140`")

        self._remittance_information_unstructured = remittance_information_unstructured

    @property
    def remittance_information_unstructured_array(self):
        """Gets the remittance_information_unstructured_array of this PaymentInitiationWithStatusResponse.

        Array of unstructured remittance information. 

        :return: The remittance_information_unstructured_array of this PaymentInitiationWithStatusResponse.
        :rtype: List[str]
        """
        return self._remittance_information_unstructured_array

    @remittance_information_unstructured_array.setter
    def remittance_information_unstructured_array(self, remittance_information_unstructured_array):
        """Sets the remittance_information_unstructured_array of this PaymentInitiationWithStatusResponse.

        Array of unstructured remittance information. 

        :param remittance_information_unstructured_array: The remittance_information_unstructured_array of this PaymentInitiationWithStatusResponse.
        :type remittance_information_unstructured_array: List[str]
        """

        self._remittance_information_unstructured_array = remittance_information_unstructured_array

    @property
    def requested_execution_date(self):
        """Gets the requested_execution_date of this PaymentInitiationWithStatusResponse.


        :return: The requested_execution_date of this PaymentInitiationWithStatusResponse.
        :rtype: date
        """
        return self._requested_execution_date

    @requested_execution_date.setter
    def requested_execution_date(self, requested_execution_date):
        """Sets the requested_execution_date of this PaymentInitiationWithStatusResponse.


        :param requested_execution_date: The requested_execution_date of this PaymentInitiationWithStatusResponse.
        :type requested_execution_date: date
        """

        self._requested_execution_date = requested_execution_date

    @property
    def requested_execution_time(self):
        """Gets the requested_execution_time of this PaymentInitiationWithStatusResponse.


        :return: The requested_execution_time of this PaymentInitiationWithStatusResponse.
        :rtype: datetime
        """
        return self._requested_execution_time

    @requested_execution_time.setter
    def requested_execution_time(self, requested_execution_time):
        """Sets the requested_execution_time of this PaymentInitiationWithStatusResponse.


        :param requested_execution_time: The requested_execution_time of this PaymentInitiationWithStatusResponse.
        :type requested_execution_time: datetime
        """

        self._requested_execution_time = requested_execution_time

    @property
    def transaction_status(self):
        """Gets the transaction_status of this PaymentInitiationWithStatusResponse.


        :return: The transaction_status of this PaymentInitiationWithStatusResponse.
        :rtype: TransactionStatus
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this PaymentInitiationWithStatusResponse.


        :param transaction_status: The transaction_status of this PaymentInitiationWithStatusResponse.
        :type transaction_status: TransactionStatus
        """

        self._transaction_status = transaction_status

    @property
    def ultimate_creditor(self):
        """Gets the ultimate_creditor of this PaymentInitiationWithStatusResponse.

        Ultimate creditor.

        :return: The ultimate_creditor of this PaymentInitiationWithStatusResponse.
        :rtype: str
        """
        return self._ultimate_creditor

    @ultimate_creditor.setter
    def ultimate_creditor(self, ultimate_creditor):
        """Sets the ultimate_creditor of this PaymentInitiationWithStatusResponse.

        Ultimate creditor.

        :param ultimate_creditor: The ultimate_creditor of this PaymentInitiationWithStatusResponse.
        :type ultimate_creditor: str
        """
        if ultimate_creditor is not None and len(ultimate_creditor) > 70:
            raise ValueError("Invalid value for `ultimate_creditor`, length must be less than or equal to `70`")

        self._ultimate_creditor = ultimate_creditor

    @property
    def ultimate_debtor(self):
        """Gets the ultimate_debtor of this PaymentInitiationWithStatusResponse.

        Ultimate debtor.

        :return: The ultimate_debtor of this PaymentInitiationWithStatusResponse.
        :rtype: str
        """
        return self._ultimate_debtor

    @ultimate_debtor.setter
    def ultimate_debtor(self, ultimate_debtor):
        """Sets the ultimate_debtor of this PaymentInitiationWithStatusResponse.

        Ultimate debtor.

        :param ultimate_debtor: The ultimate_debtor of this PaymentInitiationWithStatusResponse.
        :type ultimate_debtor: str
        """
        if ultimate_debtor is not None and len(ultimate_debtor) > 70:
            raise ValueError("Invalid value for `ultimate_debtor`, length must be less than or equal to `70`")

        self._ultimate_debtor = ultimate_debtor
