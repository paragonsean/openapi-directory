# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_type import AuthenticationType
from openapi_server import util


class AuthenticationObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_method_id: str=None, authentication_type: AuthenticationType=None, authentication_version: str=None, explanation: str=None, name: str=None):
        """AuthenticationObject - a model defined in OpenAPI

        :param authentication_method_id: The authentication_method_id of this AuthenticationObject.
        :param authentication_type: The authentication_type of this AuthenticationObject.
        :param authentication_version: The authentication_version of this AuthenticationObject.
        :param explanation: The explanation of this AuthenticationObject.
        :param name: The name of this AuthenticationObject.
        """
        self.openapi_types = {
            'authentication_method_id': str,
            'authentication_type': AuthenticationType,
            'authentication_version': str,
            'explanation': str,
            'name': str
        }

        self.attribute_map = {
            'authentication_method_id': 'authenticationMethodId',
            'authentication_type': 'authenticationType',
            'authentication_version': 'authenticationVersion',
            'explanation': 'explanation',
            'name': 'name'
        }

        self._authentication_method_id = authentication_method_id
        self._authentication_type = authentication_type
        self._authentication_version = authentication_version
        self._explanation = explanation
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticationObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The authenticationObject of this AuthenticationObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_method_id(self):
        """Gets the authentication_method_id of this AuthenticationObject.

        An identification provided by the ASPSP for the later identification of the authentication method selection. 

        :return: The authentication_method_id of this AuthenticationObject.
        :rtype: str
        """
        return self._authentication_method_id

    @authentication_method_id.setter
    def authentication_method_id(self, authentication_method_id):
        """Sets the authentication_method_id of this AuthenticationObject.

        An identification provided by the ASPSP for the later identification of the authentication method selection. 

        :param authentication_method_id: The authentication_method_id of this AuthenticationObject.
        :type authentication_method_id: str
        """
        if authentication_method_id is None:
            raise ValueError("Invalid value for `authentication_method_id`, must not be `None`")
        if authentication_method_id is not None and len(authentication_method_id) > 35:
            raise ValueError("Invalid value for `authentication_method_id`, length must be less than or equal to `35`")

        self._authentication_method_id = authentication_method_id

    @property
    def authentication_type(self):
        """Gets the authentication_type of this AuthenticationObject.


        :return: The authentication_type of this AuthenticationObject.
        :rtype: AuthenticationType
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this AuthenticationObject.


        :param authentication_type: The authentication_type of this AuthenticationObject.
        :type authentication_type: AuthenticationType
        """
        if authentication_type is None:
            raise ValueError("Invalid value for `authentication_type`, must not be `None`")

        self._authentication_type = authentication_type

    @property
    def authentication_version(self):
        """Gets the authentication_version of this AuthenticationObject.

        Depending on the \"authenticationType\". This version can be used by differentiating authentication tools used within performing OTP generation in the same authentication type. This version can be referred to in the ASPSP?s documentation. 

        :return: The authentication_version of this AuthenticationObject.
        :rtype: str
        """
        return self._authentication_version

    @authentication_version.setter
    def authentication_version(self, authentication_version):
        """Sets the authentication_version of this AuthenticationObject.

        Depending on the \"authenticationType\". This version can be used by differentiating authentication tools used within performing OTP generation in the same authentication type. This version can be referred to in the ASPSP?s documentation. 

        :param authentication_version: The authentication_version of this AuthenticationObject.
        :type authentication_version: str
        """

        self._authentication_version = authentication_version

    @property
    def explanation(self):
        """Gets the explanation of this AuthenticationObject.

        Detailed information about the SCA method for the PSU. 

        :return: The explanation of this AuthenticationObject.
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this AuthenticationObject.

        Detailed information about the SCA method for the PSU. 

        :param explanation: The explanation of this AuthenticationObject.
        :type explanation: str
        """

        self._explanation = explanation

    @property
    def name(self):
        """Gets the name of this AuthenticationObject.

        This is the name of the authentication method defined by the PSU in the Online Banking frontend of the ASPSP. Alternatively this could be a description provided by the ASPSP like \"SMS OTP on phone +49160 xxxxx 28\". This name shall be used by the TPP when presenting a list of authentication methods to the PSU, if available. 

        :return: The name of this AuthenticationObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthenticationObject.

        This is the name of the authentication method defined by the PSU in the Online Banking frontend of the ASPSP. Alternatively this could be a description provided by the ASPSP like \"SMS OTP on phone +49160 xxxxx 28\". This name shall be used by the TPP when presenting a list of authentication methods to the PSU, if available. 

        :param name: The name of this AuthenticationObject.
        :type name: str
        """

        self._name = name
