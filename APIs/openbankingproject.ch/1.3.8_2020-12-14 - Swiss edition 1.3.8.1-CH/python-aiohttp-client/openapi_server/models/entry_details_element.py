# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_reference16_ch import AccountReference16CH
from openapi_server.models.amount import Amount
from openapi_server.models.purpose_code import PurposeCode
from openapi_server.models.remittance_information_structured import RemittanceInformationStructured
from openapi_server.models.report_exchange_rate import ReportExchangeRate
import re
from openapi_server import util


class EntryDetailsElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_id: str=None, creditor_account: AccountReference16CH=None, creditor_agent: str=None, creditor_id: str=None, creditor_name: str=None, currency_exchange: List[ReportExchangeRate]=None, debtor_account: AccountReference16CH=None, debtor_agent: str=None, debtor_name: str=None, end_to_end_id: str=None, mandate_id: str=None, purpose_code: PurposeCode=None, remittance_information_structured: RemittanceInformationStructured=None, remittance_information_structured_array: List[RemittanceInformationStructured]=None, remittance_information_unstructured: str=None, remittance_information_unstructured_array: List[str]=None, transaction_amount: Amount=None, ultimate_creditor: str=None, ultimate_debtor: str=None):
        """EntryDetailsElement - a model defined in OpenAPI

        :param check_id: The check_id of this EntryDetailsElement.
        :param creditor_account: The creditor_account of this EntryDetailsElement.
        :param creditor_agent: The creditor_agent of this EntryDetailsElement.
        :param creditor_id: The creditor_id of this EntryDetailsElement.
        :param creditor_name: The creditor_name of this EntryDetailsElement.
        :param currency_exchange: The currency_exchange of this EntryDetailsElement.
        :param debtor_account: The debtor_account of this EntryDetailsElement.
        :param debtor_agent: The debtor_agent of this EntryDetailsElement.
        :param debtor_name: The debtor_name of this EntryDetailsElement.
        :param end_to_end_id: The end_to_end_id of this EntryDetailsElement.
        :param mandate_id: The mandate_id of this EntryDetailsElement.
        :param purpose_code: The purpose_code of this EntryDetailsElement.
        :param remittance_information_structured: The remittance_information_structured of this EntryDetailsElement.
        :param remittance_information_structured_array: The remittance_information_structured_array of this EntryDetailsElement.
        :param remittance_information_unstructured: The remittance_information_unstructured of this EntryDetailsElement.
        :param remittance_information_unstructured_array: The remittance_information_unstructured_array of this EntryDetailsElement.
        :param transaction_amount: The transaction_amount of this EntryDetailsElement.
        :param ultimate_creditor: The ultimate_creditor of this EntryDetailsElement.
        :param ultimate_debtor: The ultimate_debtor of this EntryDetailsElement.
        """
        self.openapi_types = {
            'check_id': str,
            'creditor_account': AccountReference16CH,
            'creditor_agent': str,
            'creditor_id': str,
            'creditor_name': str,
            'currency_exchange': List[ReportExchangeRate],
            'debtor_account': AccountReference16CH,
            'debtor_agent': str,
            'debtor_name': str,
            'end_to_end_id': str,
            'mandate_id': str,
            'purpose_code': PurposeCode,
            'remittance_information_structured': RemittanceInformationStructured,
            'remittance_information_structured_array': List[RemittanceInformationStructured],
            'remittance_information_unstructured': str,
            'remittance_information_unstructured_array': List[str],
            'transaction_amount': Amount,
            'ultimate_creditor': str,
            'ultimate_debtor': str
        }

        self.attribute_map = {
            'check_id': 'checkId',
            'creditor_account': 'creditorAccount',
            'creditor_agent': 'creditorAgent',
            'creditor_id': 'creditorId',
            'creditor_name': 'creditorName',
            'currency_exchange': 'currencyExchange',
            'debtor_account': 'debtorAccount',
            'debtor_agent': 'debtorAgent',
            'debtor_name': 'debtorName',
            'end_to_end_id': 'endToEndId',
            'mandate_id': 'mandateId',
            'purpose_code': 'purposeCode',
            'remittance_information_structured': 'remittanceInformationStructured',
            'remittance_information_structured_array': 'remittanceInformationStructuredArray',
            'remittance_information_unstructured': 'remittanceInformationUnstructured',
            'remittance_information_unstructured_array': 'remittanceInformationUnstructuredArray',
            'transaction_amount': 'transactionAmount',
            'ultimate_creditor': 'ultimateCreditor',
            'ultimate_debtor': 'ultimateDebtor'
        }

        self._check_id = check_id
        self._creditor_account = creditor_account
        self._creditor_agent = creditor_agent
        self._creditor_id = creditor_id
        self._creditor_name = creditor_name
        self._currency_exchange = currency_exchange
        self._debtor_account = debtor_account
        self._debtor_agent = debtor_agent
        self._debtor_name = debtor_name
        self._end_to_end_id = end_to_end_id
        self._mandate_id = mandate_id
        self._purpose_code = purpose_code
        self._remittance_information_structured = remittance_information_structured
        self._remittance_information_structured_array = remittance_information_structured_array
        self._remittance_information_unstructured = remittance_information_unstructured
        self._remittance_information_unstructured_array = remittance_information_unstructured_array
        self._transaction_amount = transaction_amount
        self._ultimate_creditor = ultimate_creditor
        self._ultimate_debtor = ultimate_debtor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntryDetailsElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntryDetailsElement of this EntryDetailsElement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_id(self):
        """Gets the check_id of this EntryDetailsElement.

        Identification of a Cheque.

        :return: The check_id of this EntryDetailsElement.
        :rtype: str
        """
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Sets the check_id of this EntryDetailsElement.

        Identification of a Cheque.

        :param check_id: The check_id of this EntryDetailsElement.
        :type check_id: str
        """
        if check_id is not None and len(check_id) > 35:
            raise ValueError("Invalid value for `check_id`, length must be less than or equal to `35`")

        self._check_id = check_id

    @property
    def creditor_account(self):
        """Gets the creditor_account of this EntryDetailsElement.


        :return: The creditor_account of this EntryDetailsElement.
        :rtype: AccountReference16CH
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this EntryDetailsElement.


        :param creditor_account: The creditor_account of this EntryDetailsElement.
        :type creditor_account: AccountReference16CH
        """

        self._creditor_account = creditor_account

    @property
    def creditor_agent(self):
        """Gets the creditor_agent of this EntryDetailsElement.

        BICFI 

        :return: The creditor_agent of this EntryDetailsElement.
        :rtype: str
        """
        return self._creditor_agent

    @creditor_agent.setter
    def creditor_agent(self, creditor_agent):
        """Sets the creditor_agent of this EntryDetailsElement.

        BICFI 

        :param creditor_agent: The creditor_agent of this EntryDetailsElement.
        :type creditor_agent: str
        """
        if creditor_agent is not None and not re.search(r'[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}', creditor_agent):
            raise ValueError("Invalid value for `creditor_agent`, must be a follow pattern or equal to `/[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/`")

        self._creditor_agent = creditor_agent

    @property
    def creditor_id(self):
        """Gets the creditor_id of this EntryDetailsElement.

        Identification of Creditors, e.g. a SEPA Creditor ID.

        :return: The creditor_id of this EntryDetailsElement.
        :rtype: str
        """
        return self._creditor_id

    @creditor_id.setter
    def creditor_id(self, creditor_id):
        """Sets the creditor_id of this EntryDetailsElement.

        Identification of Creditors, e.g. a SEPA Creditor ID.

        :param creditor_id: The creditor_id of this EntryDetailsElement.
        :type creditor_id: str
        """
        if creditor_id is not None and len(creditor_id) > 35:
            raise ValueError("Invalid value for `creditor_id`, length must be less than or equal to `35`")

        self._creditor_id = creditor_id

    @property
    def creditor_name(self):
        """Gets the creditor_name of this EntryDetailsElement.

        Creditor name.

        :return: The creditor_name of this EntryDetailsElement.
        :rtype: str
        """
        return self._creditor_name

    @creditor_name.setter
    def creditor_name(self, creditor_name):
        """Sets the creditor_name of this EntryDetailsElement.

        Creditor name.

        :param creditor_name: The creditor_name of this EntryDetailsElement.
        :type creditor_name: str
        """
        if creditor_name is not None and len(creditor_name) > 70:
            raise ValueError("Invalid value for `creditor_name`, length must be less than or equal to `70`")

        self._creditor_name = creditor_name

    @property
    def currency_exchange(self):
        """Gets the currency_exchange of this EntryDetailsElement.

        Array of exchange rates.

        :return: The currency_exchange of this EntryDetailsElement.
        :rtype: List[ReportExchangeRate]
        """
        return self._currency_exchange

    @currency_exchange.setter
    def currency_exchange(self, currency_exchange):
        """Sets the currency_exchange of this EntryDetailsElement.

        Array of exchange rates.

        :param currency_exchange: The currency_exchange of this EntryDetailsElement.
        :type currency_exchange: List[ReportExchangeRate]
        """

        self._currency_exchange = currency_exchange

    @property
    def debtor_account(self):
        """Gets the debtor_account of this EntryDetailsElement.


        :return: The debtor_account of this EntryDetailsElement.
        :rtype: AccountReference16CH
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this EntryDetailsElement.


        :param debtor_account: The debtor_account of this EntryDetailsElement.
        :type debtor_account: AccountReference16CH
        """

        self._debtor_account = debtor_account

    @property
    def debtor_agent(self):
        """Gets the debtor_agent of this EntryDetailsElement.

        BICFI 

        :return: The debtor_agent of this EntryDetailsElement.
        :rtype: str
        """
        return self._debtor_agent

    @debtor_agent.setter
    def debtor_agent(self, debtor_agent):
        """Sets the debtor_agent of this EntryDetailsElement.

        BICFI 

        :param debtor_agent: The debtor_agent of this EntryDetailsElement.
        :type debtor_agent: str
        """
        if debtor_agent is not None and not re.search(r'[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}', debtor_agent):
            raise ValueError("Invalid value for `debtor_agent`, must be a follow pattern or equal to `/[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/`")

        self._debtor_agent = debtor_agent

    @property
    def debtor_name(self):
        """Gets the debtor_name of this EntryDetailsElement.

        Debtor name.

        :return: The debtor_name of this EntryDetailsElement.
        :rtype: str
        """
        return self._debtor_name

    @debtor_name.setter
    def debtor_name(self, debtor_name):
        """Sets the debtor_name of this EntryDetailsElement.

        Debtor name.

        :param debtor_name: The debtor_name of this EntryDetailsElement.
        :type debtor_name: str
        """
        if debtor_name is not None and len(debtor_name) > 70:
            raise ValueError("Invalid value for `debtor_name`, length must be less than or equal to `70`")

        self._debtor_name = debtor_name

    @property
    def end_to_end_id(self):
        """Gets the end_to_end_id of this EntryDetailsElement.

        Unique end to end identity.

        :return: The end_to_end_id of this EntryDetailsElement.
        :rtype: str
        """
        return self._end_to_end_id

    @end_to_end_id.setter
    def end_to_end_id(self, end_to_end_id):
        """Sets the end_to_end_id of this EntryDetailsElement.

        Unique end to end identity.

        :param end_to_end_id: The end_to_end_id of this EntryDetailsElement.
        :type end_to_end_id: str
        """
        if end_to_end_id is not None and len(end_to_end_id) > 35:
            raise ValueError("Invalid value for `end_to_end_id`, length must be less than or equal to `35`")

        self._end_to_end_id = end_to_end_id

    @property
    def mandate_id(self):
        """Gets the mandate_id of this EntryDetailsElement.

        Identification of Mandates, e.g. a SEPA Mandate ID.

        :return: The mandate_id of this EntryDetailsElement.
        :rtype: str
        """
        return self._mandate_id

    @mandate_id.setter
    def mandate_id(self, mandate_id):
        """Sets the mandate_id of this EntryDetailsElement.

        Identification of Mandates, e.g. a SEPA Mandate ID.

        :param mandate_id: The mandate_id of this EntryDetailsElement.
        :type mandate_id: str
        """
        if mandate_id is not None and len(mandate_id) > 35:
            raise ValueError("Invalid value for `mandate_id`, length must be less than or equal to `35`")

        self._mandate_id = mandate_id

    @property
    def purpose_code(self):
        """Gets the purpose_code of this EntryDetailsElement.


        :return: The purpose_code of this EntryDetailsElement.
        :rtype: PurposeCode
        """
        return self._purpose_code

    @purpose_code.setter
    def purpose_code(self, purpose_code):
        """Sets the purpose_code of this EntryDetailsElement.


        :param purpose_code: The purpose_code of this EntryDetailsElement.
        :type purpose_code: PurposeCode
        """

        self._purpose_code = purpose_code

    @property
    def remittance_information_structured(self):
        """Gets the remittance_information_structured of this EntryDetailsElement.


        :return: The remittance_information_structured of this EntryDetailsElement.
        :rtype: RemittanceInformationStructured
        """
        return self._remittance_information_structured

    @remittance_information_structured.setter
    def remittance_information_structured(self, remittance_information_structured):
        """Sets the remittance_information_structured of this EntryDetailsElement.


        :param remittance_information_structured: The remittance_information_structured of this EntryDetailsElement.
        :type remittance_information_structured: RemittanceInformationStructured
        """

        self._remittance_information_structured = remittance_information_structured

    @property
    def remittance_information_structured_array(self):
        """Gets the remittance_information_structured_array of this EntryDetailsElement.

        Array of structured remittance information. 

        :return: The remittance_information_structured_array of this EntryDetailsElement.
        :rtype: List[RemittanceInformationStructured]
        """
        return self._remittance_information_structured_array

    @remittance_information_structured_array.setter
    def remittance_information_structured_array(self, remittance_information_structured_array):
        """Sets the remittance_information_structured_array of this EntryDetailsElement.

        Array of structured remittance information. 

        :param remittance_information_structured_array: The remittance_information_structured_array of this EntryDetailsElement.
        :type remittance_information_structured_array: List[RemittanceInformationStructured]
        """

        self._remittance_information_structured_array = remittance_information_structured_array

    @property
    def remittance_information_unstructured(self):
        """Gets the remittance_information_unstructured of this EntryDetailsElement.

        Unstructured remittance information. 

        :return: The remittance_information_unstructured of this EntryDetailsElement.
        :rtype: str
        """
        return self._remittance_information_unstructured

    @remittance_information_unstructured.setter
    def remittance_information_unstructured(self, remittance_information_unstructured):
        """Sets the remittance_information_unstructured of this EntryDetailsElement.

        Unstructured remittance information. 

        :param remittance_information_unstructured: The remittance_information_unstructured of this EntryDetailsElement.
        :type remittance_information_unstructured: str
        """
        if remittance_information_unstructured is not None and len(remittance_information_unstructured) > 140:
            raise ValueError("Invalid value for `remittance_information_unstructured`, length must be less than or equal to `140`")

        self._remittance_information_unstructured = remittance_information_unstructured

    @property
    def remittance_information_unstructured_array(self):
        """Gets the remittance_information_unstructured_array of this EntryDetailsElement.

        Array of unstructured remittance information. 

        :return: The remittance_information_unstructured_array of this EntryDetailsElement.
        :rtype: List[str]
        """
        return self._remittance_information_unstructured_array

    @remittance_information_unstructured_array.setter
    def remittance_information_unstructured_array(self, remittance_information_unstructured_array):
        """Sets the remittance_information_unstructured_array of this EntryDetailsElement.

        Array of unstructured remittance information. 

        :param remittance_information_unstructured_array: The remittance_information_unstructured_array of this EntryDetailsElement.
        :type remittance_information_unstructured_array: List[str]
        """

        self._remittance_information_unstructured_array = remittance_information_unstructured_array

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this EntryDetailsElement.


        :return: The transaction_amount of this EntryDetailsElement.
        :rtype: Amount
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this EntryDetailsElement.


        :param transaction_amount: The transaction_amount of this EntryDetailsElement.
        :type transaction_amount: Amount
        """
        if transaction_amount is None:
            raise ValueError("Invalid value for `transaction_amount`, must not be `None`")

        self._transaction_amount = transaction_amount

    @property
    def ultimate_creditor(self):
        """Gets the ultimate_creditor of this EntryDetailsElement.

        Ultimate creditor.

        :return: The ultimate_creditor of this EntryDetailsElement.
        :rtype: str
        """
        return self._ultimate_creditor

    @ultimate_creditor.setter
    def ultimate_creditor(self, ultimate_creditor):
        """Sets the ultimate_creditor of this EntryDetailsElement.

        Ultimate creditor.

        :param ultimate_creditor: The ultimate_creditor of this EntryDetailsElement.
        :type ultimate_creditor: str
        """
        if ultimate_creditor is not None and len(ultimate_creditor) > 70:
            raise ValueError("Invalid value for `ultimate_creditor`, length must be less than or equal to `70`")

        self._ultimate_creditor = ultimate_creditor

    @property
    def ultimate_debtor(self):
        """Gets the ultimate_debtor of this EntryDetailsElement.

        Ultimate debtor.

        :return: The ultimate_debtor of this EntryDetailsElement.
        :rtype: str
        """
        return self._ultimate_debtor

    @ultimate_debtor.setter
    def ultimate_debtor(self, ultimate_debtor):
        """Sets the ultimate_debtor of this EntryDetailsElement.

        Ultimate debtor.

        :param ultimate_debtor: The ultimate_debtor of this EntryDetailsElement.
        :type ultimate_debtor: str
        """
        if ultimate_debtor is not None and len(ultimate_debtor) > 70:
            raise ValueError("Invalid value for `ultimate_debtor`, length must be less than or equal to `70`")

        self._ultimate_debtor = ultimate_debtor
