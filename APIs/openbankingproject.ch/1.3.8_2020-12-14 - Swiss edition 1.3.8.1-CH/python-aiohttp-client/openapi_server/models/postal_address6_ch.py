# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PostalAddress6CH(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_line1: str=None, address_line2: str=None, building_number: str=None, country: str=None, post_code: str=None, street_name: str=None, town_name: str=None):
        """PostalAddress6CH - a model defined in OpenAPI

        :param address_line1: The address_line1 of this PostalAddress6CH.
        :param address_line2: The address_line2 of this PostalAddress6CH.
        :param building_number: The building_number of this PostalAddress6CH.
        :param country: The country of this PostalAddress6CH.
        :param post_code: The post_code of this PostalAddress6CH.
        :param street_name: The street_name of this PostalAddress6CH.
        :param town_name: The town_name of this PostalAddress6CH.
        """
        self.openapi_types = {
            'address_line1': str,
            'address_line2': str,
            'building_number': str,
            'country': str,
            'post_code': str,
            'street_name': str,
            'town_name': str
        }

        self.attribute_map = {
            'address_line1': 'addressLine1',
            'address_line2': 'addressLine2',
            'building_number': 'buildingNumber',
            'country': 'country',
            'post_code': 'postCode',
            'street_name': 'streetName',
            'town_name': 'townName'
        }

        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._building_number = building_number
        self._country = country
        self._post_code = post_code
        self._street_name = street_name
        self._town_name = town_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostalAddress6CH':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postalAddress6-CH of this PostalAddress6CH.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_line1(self):
        """Gets the address_line1 of this PostalAddress6CH.


        :return: The address_line1 of this PostalAddress6CH.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this PostalAddress6CH.


        :param address_line1: The address_line1 of this PostalAddress6CH.
        :type address_line1: str
        """
        if address_line1 is not None and len(address_line1) > 70:
            raise ValueError("Invalid value for `address_line1`, length must be less than or equal to `70`")

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this PostalAddress6CH.


        :return: The address_line2 of this PostalAddress6CH.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this PostalAddress6CH.


        :param address_line2: The address_line2 of this PostalAddress6CH.
        :type address_line2: str
        """
        if address_line2 is not None and len(address_line2) > 70:
            raise ValueError("Invalid value for `address_line2`, length must be less than or equal to `70`")

        self._address_line2 = address_line2

    @property
    def building_number(self):
        """Gets the building_number of this PostalAddress6CH.


        :return: The building_number of this PostalAddress6CH.
        :rtype: str
        """
        return self._building_number

    @building_number.setter
    def building_number(self, building_number):
        """Sets the building_number of this PostalAddress6CH.


        :param building_number: The building_number of this PostalAddress6CH.
        :type building_number: str
        """
        if building_number is not None and len(building_number) > 16:
            raise ValueError("Invalid value for `building_number`, length must be less than or equal to `16`")

        self._building_number = building_number

    @property
    def country(self):
        """Gets the country of this PostalAddress6CH.

        ISO 3166 ALPHA2 country code.

        :return: The country of this PostalAddress6CH.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PostalAddress6CH.

        ISO 3166 ALPHA2 country code.

        :param country: The country of this PostalAddress6CH.
        :type country: str
        """
        if country is not None and not re.search(r'[A-Z]{2}', country):
            raise ValueError("Invalid value for `country`, must be a follow pattern or equal to `/[A-Z]{2}/`")

        self._country = country

    @property
    def post_code(self):
        """Gets the post_code of this PostalAddress6CH.


        :return: The post_code of this PostalAddress6CH.
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this PostalAddress6CH.


        :param post_code: The post_code of this PostalAddress6CH.
        :type post_code: str
        """
        if post_code is not None and len(post_code) > 16:
            raise ValueError("Invalid value for `post_code`, length must be less than or equal to `16`")

        self._post_code = post_code

    @property
    def street_name(self):
        """Gets the street_name of this PostalAddress6CH.


        :return: The street_name of this PostalAddress6CH.
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this PostalAddress6CH.


        :param street_name: The street_name of this PostalAddress6CH.
        :type street_name: str
        """
        if street_name is not None and len(street_name) > 70:
            raise ValueError("Invalid value for `street_name`, length must be less than or equal to `70`")

        self._street_name = street_name

    @property
    def town_name(self):
        """Gets the town_name of this PostalAddress6CH.


        :return: The town_name of this PostalAddress6CH.
        :rtype: str
        """
        return self._town_name

    @town_name.setter
    def town_name(self, town_name):
        """Sets the town_name of this PostalAddress6CH.


        :param town_name: The town_name of this PostalAddress6CH.
        :type town_name: str
        """
        if town_name is not None and len(town_name) > 35:
            raise ValueError("Invalid value for `town_name`, length must be less than or equal to `35`")

        self._town_name = town_name
