# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authorisation_confirmation import AuthorisationConfirmation
from openapi_server.models.psu_data import PsuData
from openapi_server.models.select_psu_authentication_method import SelectPsuAuthenticationMethod
from openapi_server.models.transaction_authorisation import TransactionAuthorisation
from openapi_server.models.update_psu_authentication import UpdatePsuAuthentication
from openapi_server import util


class UpdateConsentsPsuDataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, psu_data: PsuData=None, authentication_method_id: str=None, sca_authentication_data: str=None, confirmation_code: str=None):
        """UpdateConsentsPsuDataRequest - a model defined in OpenAPI

        :param psu_data: The psu_data of this UpdateConsentsPsuDataRequest.
        :param authentication_method_id: The authentication_method_id of this UpdateConsentsPsuDataRequest.
        :param sca_authentication_data: The sca_authentication_data of this UpdateConsentsPsuDataRequest.
        :param confirmation_code: The confirmation_code of this UpdateConsentsPsuDataRequest.
        """
        self.openapi_types = {
            'psu_data': PsuData,
            'authentication_method_id': str,
            'sca_authentication_data': str,
            'confirmation_code': str
        }

        self.attribute_map = {
            'psu_data': 'psuData',
            'authentication_method_id': 'authenticationMethodId',
            'sca_authentication_data': 'scaAuthenticationData',
            'confirmation_code': 'confirmationCode'
        }

        self._psu_data = psu_data
        self._authentication_method_id = authentication_method_id
        self._sca_authentication_data = sca_authentication_data
        self._confirmation_code = confirmation_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateConsentsPsuDataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The updateConsentsPsuData_request of this UpdateConsentsPsuDataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def psu_data(self):
        """Gets the psu_data of this UpdateConsentsPsuDataRequest.


        :return: The psu_data of this UpdateConsentsPsuDataRequest.
        :rtype: PsuData
        """
        return self._psu_data

    @psu_data.setter
    def psu_data(self, psu_data):
        """Sets the psu_data of this UpdateConsentsPsuDataRequest.


        :param psu_data: The psu_data of this UpdateConsentsPsuDataRequest.
        :type psu_data: PsuData
        """
        if psu_data is None:
            raise ValueError("Invalid value for `psu_data`, must not be `None`")

        self._psu_data = psu_data

    @property
    def authentication_method_id(self):
        """Gets the authentication_method_id of this UpdateConsentsPsuDataRequest.

        An identification provided by the ASPSP for the later identification of the authentication method selection. 

        :return: The authentication_method_id of this UpdateConsentsPsuDataRequest.
        :rtype: str
        """
        return self._authentication_method_id

    @authentication_method_id.setter
    def authentication_method_id(self, authentication_method_id):
        """Sets the authentication_method_id of this UpdateConsentsPsuDataRequest.

        An identification provided by the ASPSP for the later identification of the authentication method selection. 

        :param authentication_method_id: The authentication_method_id of this UpdateConsentsPsuDataRequest.
        :type authentication_method_id: str
        """
        if authentication_method_id is None:
            raise ValueError("Invalid value for `authentication_method_id`, must not be `None`")
        if authentication_method_id is not None and len(authentication_method_id) > 35:
            raise ValueError("Invalid value for `authentication_method_id`, length must be less than or equal to `35`")

        self._authentication_method_id = authentication_method_id

    @property
    def sca_authentication_data(self):
        """Gets the sca_authentication_data of this UpdateConsentsPsuDataRequest.

        SCA authentication data, depending on the chosen authentication method. If the data is binary, then it is base64 encoded. 

        :return: The sca_authentication_data of this UpdateConsentsPsuDataRequest.
        :rtype: str
        """
        return self._sca_authentication_data

    @sca_authentication_data.setter
    def sca_authentication_data(self, sca_authentication_data):
        """Sets the sca_authentication_data of this UpdateConsentsPsuDataRequest.

        SCA authentication data, depending on the chosen authentication method. If the data is binary, then it is base64 encoded. 

        :param sca_authentication_data: The sca_authentication_data of this UpdateConsentsPsuDataRequest.
        :type sca_authentication_data: str
        """
        if sca_authentication_data is None:
            raise ValueError("Invalid value for `sca_authentication_data`, must not be `None`")

        self._sca_authentication_data = sca_authentication_data

    @property
    def confirmation_code(self):
        """Gets the confirmation_code of this UpdateConsentsPsuDataRequest.

        Confirmation Code as retrieved by the TPP from the redirect based SCA process.

        :return: The confirmation_code of this UpdateConsentsPsuDataRequest.
        :rtype: str
        """
        return self._confirmation_code

    @confirmation_code.setter
    def confirmation_code(self, confirmation_code):
        """Sets the confirmation_code of this UpdateConsentsPsuDataRequest.

        Confirmation Code as retrieved by the TPP from the redirect based SCA process.

        :param confirmation_code: The confirmation_code of this UpdateConsentsPsuDataRequest.
        :type confirmation_code: str
        """
        if confirmation_code is None:
            raise ValueError("Invalid value for `confirmation_code`, must not be `None`")

        self._confirmation_code = confirmation_code
