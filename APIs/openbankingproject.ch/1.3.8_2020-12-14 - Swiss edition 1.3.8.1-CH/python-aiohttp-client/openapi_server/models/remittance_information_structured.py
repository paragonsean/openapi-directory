# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemittanceInformationStructured(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sco_ror_qr_ror_ipi: str=None, additional_remittance_information: str=None, reference: str=None, reference_issuer: str=None, reference_type: str=None):
        """RemittanceInformationStructured - a model defined in OpenAPI

        :param sco_ror_qr_ror_ipi: The sco_ror_qr_ror_ipi of this RemittanceInformationStructured.
        :param additional_remittance_information: The additional_remittance_information of this RemittanceInformationStructured.
        :param reference: The reference of this RemittanceInformationStructured.
        :param reference_issuer: The reference_issuer of this RemittanceInformationStructured.
        :param reference_type: The reference_type of this RemittanceInformationStructured.
        """
        self.openapi_types = {
            'sco_ror_qr_ror_ipi': str,
            'additional_remittance_information': str,
            'reference': str,
            'reference_issuer': str,
            'reference_type': str
        }

        self.attribute_map = {
            'sco_ror_qr_ror_ipi': 'SCORorQRRorIPI',
            'additional_remittance_information': 'additionalRemittanceInformation',
            'reference': 'reference',
            'reference_issuer': 'referenceIssuer',
            'reference_type': 'referenceType'
        }

        self._sco_ror_qr_ror_ipi = sco_ror_qr_ror_ipi
        self._additional_remittance_information = additional_remittance_information
        self._reference = reference
        self._reference_issuer = reference_issuer
        self._reference_type = reference_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemittanceInformationStructured':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The remittanceInformationStructured of this RemittanceInformationStructured.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sco_ror_qr_ror_ipi(self):
        """Gets the sco_ror_qr_ror_ipi of this RemittanceInformationStructured.


        :return: The sco_ror_qr_ror_ipi of this RemittanceInformationStructured.
        :rtype: str
        """
        return self._sco_ror_qr_ror_ipi

    @sco_ror_qr_ror_ipi.setter
    def sco_ror_qr_ror_ipi(self, sco_ror_qr_ror_ipi):
        """Sets the sco_ror_qr_ror_ipi of this RemittanceInformationStructured.


        :param sco_ror_qr_ror_ipi: The sco_ror_qr_ror_ipi of this RemittanceInformationStructured.
        :type sco_ror_qr_ror_ipi: str
        """
        allowed_values = ["SCOR", "QRR", "IPI"]  # noqa: E501
        if sco_ror_qr_ror_ipi not in allowed_values:
            raise ValueError(
                "Invalid value for `sco_ror_qr_ror_ipi` ({0}), must be one of {1}"
                .format(sco_ror_qr_ror_ipi, allowed_values)
            )

        self._sco_ror_qr_ror_ipi = sco_ror_qr_ror_ipi

    @property
    def additional_remittance_information(self):
        """Gets the additional_remittance_information of this RemittanceInformationStructured.


        :return: The additional_remittance_information of this RemittanceInformationStructured.
        :rtype: str
        """
        return self._additional_remittance_information

    @additional_remittance_information.setter
    def additional_remittance_information(self, additional_remittance_information):
        """Sets the additional_remittance_information of this RemittanceInformationStructured.


        :param additional_remittance_information: The additional_remittance_information of this RemittanceInformationStructured.
        :type additional_remittance_information: str
        """
        if additional_remittance_information is not None and len(additional_remittance_information) > 140:
            raise ValueError("Invalid value for `additional_remittance_information`, length must be less than or equal to `140`")

        self._additional_remittance_information = additional_remittance_information

    @property
    def reference(self):
        """Gets the reference of this RemittanceInformationStructured.


        :return: The reference of this RemittanceInformationStructured.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this RemittanceInformationStructured.


        :param reference: The reference of this RemittanceInformationStructured.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")
        if reference is not None and len(reference) > 35:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `35`")

        self._reference = reference

    @property
    def reference_issuer(self):
        """Gets the reference_issuer of this RemittanceInformationStructured.


        :return: The reference_issuer of this RemittanceInformationStructured.
        :rtype: str
        """
        return self._reference_issuer

    @reference_issuer.setter
    def reference_issuer(self, reference_issuer):
        """Sets the reference_issuer of this RemittanceInformationStructured.


        :param reference_issuer: The reference_issuer of this RemittanceInformationStructured.
        :type reference_issuer: str
        """
        if reference_issuer is not None and len(reference_issuer) > 35:
            raise ValueError("Invalid value for `reference_issuer`, length must be less than or equal to `35`")

        self._reference_issuer = reference_issuer

    @property
    def reference_type(self):
        """Gets the reference_type of this RemittanceInformationStructured.


        :return: The reference_type of this RemittanceInformationStructured.
        :rtype: str
        """
        return self._reference_type

    @reference_type.setter
    def reference_type(self, reference_type):
        """Sets the reference_type of this RemittanceInformationStructured.


        :param reference_type: The reference_type of this RemittanceInformationStructured.
        :type reference_type: str
        """
        if reference_type is not None and len(reference_type) > 35:
            raise ValueError("Invalid value for `reference_type`, length must be less than or equal to `35`")

        self._reference_type = reference_type
