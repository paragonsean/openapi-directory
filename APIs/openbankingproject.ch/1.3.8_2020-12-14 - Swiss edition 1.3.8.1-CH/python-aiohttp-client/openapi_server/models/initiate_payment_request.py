# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_reference16_ch import AccountReference16CH
from openapi_server.models.address import Address
from openapi_server.models.amount import Amount
from openapi_server.models.bulk_payment_initiation_json import BulkPaymentInitiationJson
from openapi_server.models.charge_bearer import ChargeBearer
from openapi_server.models.creditor_agent7_ch import CreditorAgent7CH
from openapi_server.models.day_of_execution import DayOfExecution
from openapi_server.models.debtor_agent7_ch import DebtorAgent7CH
from openapi_server.models.exchange_rate_information1 import ExchangeRateInformation1
from openapi_server.models.execution_rule import ExecutionRule
from openapi_server.models.external_service_level1_code import ExternalServiceLevel1Code
from openapi_server.models.frequency_code import FrequencyCode
from openapi_server.models.payment_initiation_bulk_element_json import PaymentInitiationBulkElementJson
from openapi_server.models.payment_initiation_json import PaymentInitiationJson
from openapi_server.models.periodic_payment_initiation_json import PeriodicPaymentInitiationJson
from openapi_server.models.purpose_code import PurposeCode
from openapi_server.models.remittance_information_structured import RemittanceInformationStructured
import re
from openapi_server import util


class InitiatePaymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, charge_bearer: ChargeBearer=None, creditor_account: AccountReference16CH=None, creditor_address: Address=None, creditor_agent: CreditorAgent7CH=None, creditor_agent_name: str=None, creditor_id: str=None, creditor_name: str=None, creditor_name_and_address: str=None, debtor_account: AccountReference16CH=None, debtor_agent: DebtorAgent7CH=None, debtor_id: str=None, debtor_name: str=None, end_to_end_identification: str=None, equivalent_amount: Amount=None, exchange_rate_information: ExchangeRateInformation1=None, instructed_amount: Amount=None, intermediary_agent: str=None, purpose_code: PurposeCode=None, remittance_information_structured: RemittanceInformationStructured=None, remittance_information_unstructured: str=None, requested_execution_date: date=None, service_level: ExternalServiceLevel1Code=None, transaction_currency: str=None, ultimate_creditor: str=None, ultimate_debtor: str=None, day_of_execution: DayOfExecution=None, end_date: date=None, execution_rule: ExecutionRule=None, frequency: FrequencyCode=None, start_date: date=None, batch_booking_preferred: bool=None, payments: List[PaymentInitiationBulkElementJson]=None, requested_execution_time: datetime=None):
        """InitiatePaymentRequest - a model defined in OpenAPI

        :param charge_bearer: The charge_bearer of this InitiatePaymentRequest.
        :param creditor_account: The creditor_account of this InitiatePaymentRequest.
        :param creditor_address: The creditor_address of this InitiatePaymentRequest.
        :param creditor_agent: The creditor_agent of this InitiatePaymentRequest.
        :param creditor_agent_name: The creditor_agent_name of this InitiatePaymentRequest.
        :param creditor_id: The creditor_id of this InitiatePaymentRequest.
        :param creditor_name: The creditor_name of this InitiatePaymentRequest.
        :param creditor_name_and_address: The creditor_name_and_address of this InitiatePaymentRequest.
        :param debtor_account: The debtor_account of this InitiatePaymentRequest.
        :param debtor_agent: The debtor_agent of this InitiatePaymentRequest.
        :param debtor_id: The debtor_id of this InitiatePaymentRequest.
        :param debtor_name: The debtor_name of this InitiatePaymentRequest.
        :param end_to_end_identification: The end_to_end_identification of this InitiatePaymentRequest.
        :param equivalent_amount: The equivalent_amount of this InitiatePaymentRequest.
        :param exchange_rate_information: The exchange_rate_information of this InitiatePaymentRequest.
        :param instructed_amount: The instructed_amount of this InitiatePaymentRequest.
        :param intermediary_agent: The intermediary_agent of this InitiatePaymentRequest.
        :param purpose_code: The purpose_code of this InitiatePaymentRequest.
        :param remittance_information_structured: The remittance_information_structured of this InitiatePaymentRequest.
        :param remittance_information_unstructured: The remittance_information_unstructured of this InitiatePaymentRequest.
        :param requested_execution_date: The requested_execution_date of this InitiatePaymentRequest.
        :param service_level: The service_level of this InitiatePaymentRequest.
        :param transaction_currency: The transaction_currency of this InitiatePaymentRequest.
        :param ultimate_creditor: The ultimate_creditor of this InitiatePaymentRequest.
        :param ultimate_debtor: The ultimate_debtor of this InitiatePaymentRequest.
        :param day_of_execution: The day_of_execution of this InitiatePaymentRequest.
        :param end_date: The end_date of this InitiatePaymentRequest.
        :param execution_rule: The execution_rule of this InitiatePaymentRequest.
        :param frequency: The frequency of this InitiatePaymentRequest.
        :param start_date: The start_date of this InitiatePaymentRequest.
        :param batch_booking_preferred: The batch_booking_preferred of this InitiatePaymentRequest.
        :param payments: The payments of this InitiatePaymentRequest.
        :param requested_execution_time: The requested_execution_time of this InitiatePaymentRequest.
        """
        self.openapi_types = {
            'charge_bearer': ChargeBearer,
            'creditor_account': AccountReference16CH,
            'creditor_address': Address,
            'creditor_agent': CreditorAgent7CH,
            'creditor_agent_name': str,
            'creditor_id': str,
            'creditor_name': str,
            'creditor_name_and_address': str,
            'debtor_account': AccountReference16CH,
            'debtor_agent': DebtorAgent7CH,
            'debtor_id': str,
            'debtor_name': str,
            'end_to_end_identification': str,
            'equivalent_amount': Amount,
            'exchange_rate_information': ExchangeRateInformation1,
            'instructed_amount': Amount,
            'intermediary_agent': str,
            'purpose_code': PurposeCode,
            'remittance_information_structured': RemittanceInformationStructured,
            'remittance_information_unstructured': str,
            'requested_execution_date': date,
            'service_level': ExternalServiceLevel1Code,
            'transaction_currency': str,
            'ultimate_creditor': str,
            'ultimate_debtor': str,
            'day_of_execution': DayOfExecution,
            'end_date': date,
            'execution_rule': ExecutionRule,
            'frequency': FrequencyCode,
            'start_date': date,
            'batch_booking_preferred': bool,
            'payments': List[PaymentInitiationBulkElementJson],
            'requested_execution_time': datetime
        }

        self.attribute_map = {
            'charge_bearer': 'chargeBearer',
            'creditor_account': 'creditorAccount',
            'creditor_address': 'creditorAddress',
            'creditor_agent': 'creditorAgent',
            'creditor_agent_name': 'creditorAgentName',
            'creditor_id': 'creditorId',
            'creditor_name': 'creditorName',
            'creditor_name_and_address': 'creditorNameAndAddress',
            'debtor_account': 'debtorAccount',
            'debtor_agent': 'debtorAgent',
            'debtor_id': 'debtorId',
            'debtor_name': 'debtorName',
            'end_to_end_identification': 'endToEndIdentification',
            'equivalent_amount': 'equivalentAmount',
            'exchange_rate_information': 'exchangeRateInformation',
            'instructed_amount': 'instructedAmount',
            'intermediary_agent': 'intermediaryAgent',
            'purpose_code': 'purposeCode',
            'remittance_information_structured': 'remittanceInformationStructured',
            'remittance_information_unstructured': 'remittanceInformationUnstructured',
            'requested_execution_date': 'requestedExecutionDate',
            'service_level': 'serviceLevel',
            'transaction_currency': 'transactionCurrency',
            'ultimate_creditor': 'ultimateCreditor',
            'ultimate_debtor': 'ultimateDebtor',
            'day_of_execution': 'dayOfExecution',
            'end_date': 'endDate',
            'execution_rule': 'executionRule',
            'frequency': 'frequency',
            'start_date': 'startDate',
            'batch_booking_preferred': 'batchBookingPreferred',
            'payments': 'payments',
            'requested_execution_time': 'requestedExecutionTime'
        }

        self._charge_bearer = charge_bearer
        self._creditor_account = creditor_account
        self._creditor_address = creditor_address
        self._creditor_agent = creditor_agent
        self._creditor_agent_name = creditor_agent_name
        self._creditor_id = creditor_id
        self._creditor_name = creditor_name
        self._creditor_name_and_address = creditor_name_and_address
        self._debtor_account = debtor_account
        self._debtor_agent = debtor_agent
        self._debtor_id = debtor_id
        self._debtor_name = debtor_name
        self._end_to_end_identification = end_to_end_identification
        self._equivalent_amount = equivalent_amount
        self._exchange_rate_information = exchange_rate_information
        self._instructed_amount = instructed_amount
        self._intermediary_agent = intermediary_agent
        self._purpose_code = purpose_code
        self._remittance_information_structured = remittance_information_structured
        self._remittance_information_unstructured = remittance_information_unstructured
        self._requested_execution_date = requested_execution_date
        self._service_level = service_level
        self._transaction_currency = transaction_currency
        self._ultimate_creditor = ultimate_creditor
        self._ultimate_debtor = ultimate_debtor
        self._day_of_execution = day_of_execution
        self._end_date = end_date
        self._execution_rule = execution_rule
        self._frequency = frequency
        self._start_date = start_date
        self._batch_booking_preferred = batch_booking_preferred
        self._payments = payments
        self._requested_execution_time = requested_execution_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InitiatePaymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The initiatePayment_request of this InitiatePaymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def charge_bearer(self):
        """Gets the charge_bearer of this InitiatePaymentRequest.


        :return: The charge_bearer of this InitiatePaymentRequest.
        :rtype: ChargeBearer
        """
        return self._charge_bearer

    @charge_bearer.setter
    def charge_bearer(self, charge_bearer):
        """Sets the charge_bearer of this InitiatePaymentRequest.


        :param charge_bearer: The charge_bearer of this InitiatePaymentRequest.
        :type charge_bearer: ChargeBearer
        """

        self._charge_bearer = charge_bearer

    @property
    def creditor_account(self):
        """Gets the creditor_account of this InitiatePaymentRequest.


        :return: The creditor_account of this InitiatePaymentRequest.
        :rtype: AccountReference16CH
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this InitiatePaymentRequest.


        :param creditor_account: The creditor_account of this InitiatePaymentRequest.
        :type creditor_account: AccountReference16CH
        """
        if creditor_account is None:
            raise ValueError("Invalid value for `creditor_account`, must not be `None`")

        self._creditor_account = creditor_account

    @property
    def creditor_address(self):
        """Gets the creditor_address of this InitiatePaymentRequest.


        :return: The creditor_address of this InitiatePaymentRequest.
        :rtype: Address
        """
        return self._creditor_address

    @creditor_address.setter
    def creditor_address(self, creditor_address):
        """Sets the creditor_address of this InitiatePaymentRequest.


        :param creditor_address: The creditor_address of this InitiatePaymentRequest.
        :type creditor_address: Address
        """

        self._creditor_address = creditor_address

    @property
    def creditor_agent(self):
        """Gets the creditor_agent of this InitiatePaymentRequest.


        :return: The creditor_agent of this InitiatePaymentRequest.
        :rtype: CreditorAgent7CH
        """
        return self._creditor_agent

    @creditor_agent.setter
    def creditor_agent(self, creditor_agent):
        """Sets the creditor_agent of this InitiatePaymentRequest.


        :param creditor_agent: The creditor_agent of this InitiatePaymentRequest.
        :type creditor_agent: CreditorAgent7CH
        """

        self._creditor_agent = creditor_agent

    @property
    def creditor_agent_name(self):
        """Gets the creditor_agent_name of this InitiatePaymentRequest.

        Creditor agent name.

        :return: The creditor_agent_name of this InitiatePaymentRequest.
        :rtype: str
        """
        return self._creditor_agent_name

    @creditor_agent_name.setter
    def creditor_agent_name(self, creditor_agent_name):
        """Sets the creditor_agent_name of this InitiatePaymentRequest.

        Creditor agent name.

        :param creditor_agent_name: The creditor_agent_name of this InitiatePaymentRequest.
        :type creditor_agent_name: str
        """
        if creditor_agent_name is not None and len(creditor_agent_name) > 35:
            raise ValueError("Invalid value for `creditor_agent_name`, length must be less than or equal to `35`")

        self._creditor_agent_name = creditor_agent_name

    @property
    def creditor_id(self):
        """Gets the creditor_id of this InitiatePaymentRequest.

        Identification of Creditors, e.g. a SEPA Creditor ID.

        :return: The creditor_id of this InitiatePaymentRequest.
        :rtype: str
        """
        return self._creditor_id

    @creditor_id.setter
    def creditor_id(self, creditor_id):
        """Sets the creditor_id of this InitiatePaymentRequest.

        Identification of Creditors, e.g. a SEPA Creditor ID.

        :param creditor_id: The creditor_id of this InitiatePaymentRequest.
        :type creditor_id: str
        """
        if creditor_id is not None and len(creditor_id) > 35:
            raise ValueError("Invalid value for `creditor_id`, length must be less than or equal to `35`")

        self._creditor_id = creditor_id

    @property
    def creditor_name(self):
        """Gets the creditor_name of this InitiatePaymentRequest.

        Creditor name.

        :return: The creditor_name of this InitiatePaymentRequest.
        :rtype: str
        """
        return self._creditor_name

    @creditor_name.setter
    def creditor_name(self, creditor_name):
        """Sets the creditor_name of this InitiatePaymentRequest.

        Creditor name.

        :param creditor_name: The creditor_name of this InitiatePaymentRequest.
        :type creditor_name: str
        """
        if creditor_name is None:
            raise ValueError("Invalid value for `creditor_name`, must not be `None`")
        if creditor_name is not None and len(creditor_name) > 70:
            raise ValueError("Invalid value for `creditor_name`, length must be less than or equal to `70`")

        self._creditor_name = creditor_name

    @property
    def creditor_name_and_address(self):
        """Gets the creditor_name_and_address of this InitiatePaymentRequest.

        Creditor Name and Address in a free text field.

        :return: The creditor_name_and_address of this InitiatePaymentRequest.
        :rtype: str
        """
        return self._creditor_name_and_address

    @creditor_name_and_address.setter
    def creditor_name_and_address(self, creditor_name_and_address):
        """Sets the creditor_name_and_address of this InitiatePaymentRequest.

        Creditor Name and Address in a free text field.

        :param creditor_name_and_address: The creditor_name_and_address of this InitiatePaymentRequest.
        :type creditor_name_and_address: str
        """
        if creditor_name_and_address is not None and len(creditor_name_and_address) > 140:
            raise ValueError("Invalid value for `creditor_name_and_address`, length must be less than or equal to `140`")

        self._creditor_name_and_address = creditor_name_and_address

    @property
    def debtor_account(self):
        """Gets the debtor_account of this InitiatePaymentRequest.


        :return: The debtor_account of this InitiatePaymentRequest.
        :rtype: AccountReference16CH
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this InitiatePaymentRequest.


        :param debtor_account: The debtor_account of this InitiatePaymentRequest.
        :type debtor_account: AccountReference16CH
        """
        if debtor_account is None:
            raise ValueError("Invalid value for `debtor_account`, must not be `None`")

        self._debtor_account = debtor_account

    @property
    def debtor_agent(self):
        """Gets the debtor_agent of this InitiatePaymentRequest.


        :return: The debtor_agent of this InitiatePaymentRequest.
        :rtype: DebtorAgent7CH
        """
        return self._debtor_agent

    @debtor_agent.setter
    def debtor_agent(self, debtor_agent):
        """Sets the debtor_agent of this InitiatePaymentRequest.


        :param debtor_agent: The debtor_agent of this InitiatePaymentRequest.
        :type debtor_agent: DebtorAgent7CH
        """
        if debtor_agent is None:
            raise ValueError("Invalid value for `debtor_agent`, must not be `None`")

        self._debtor_agent = debtor_agent

    @property
    def debtor_id(self):
        """Gets the debtor_id of this InitiatePaymentRequest.

        Debtor Id.

        :return: The debtor_id of this InitiatePaymentRequest.
        :rtype: str
        """
        return self._debtor_id

    @debtor_id.setter
    def debtor_id(self, debtor_id):
        """Sets the debtor_id of this InitiatePaymentRequest.

        Debtor Id.

        :param debtor_id: The debtor_id of this InitiatePaymentRequest.
        :type debtor_id: str
        """
        if debtor_id is not None and len(debtor_id) > 35:
            raise ValueError("Invalid value for `debtor_id`, length must be less than or equal to `35`")

        self._debtor_id = debtor_id

    @property
    def debtor_name(self):
        """Gets the debtor_name of this InitiatePaymentRequest.

        Debtor name.

        :return: The debtor_name of this InitiatePaymentRequest.
        :rtype: str
        """
        return self._debtor_name

    @debtor_name.setter
    def debtor_name(self, debtor_name):
        """Sets the debtor_name of this InitiatePaymentRequest.

        Debtor name.

        :param debtor_name: The debtor_name of this InitiatePaymentRequest.
        :type debtor_name: str
        """
        if debtor_name is None:
            raise ValueError("Invalid value for `debtor_name`, must not be `None`")
        if debtor_name is not None and len(debtor_name) > 70:
            raise ValueError("Invalid value for `debtor_name`, length must be less than or equal to `70`")

        self._debtor_name = debtor_name

    @property
    def end_to_end_identification(self):
        """Gets the end_to_end_identification of this InitiatePaymentRequest.


        :return: The end_to_end_identification of this InitiatePaymentRequest.
        :rtype: str
        """
        return self._end_to_end_identification

    @end_to_end_identification.setter
    def end_to_end_identification(self, end_to_end_identification):
        """Sets the end_to_end_identification of this InitiatePaymentRequest.


        :param end_to_end_identification: The end_to_end_identification of this InitiatePaymentRequest.
        :type end_to_end_identification: str
        """
        if end_to_end_identification is None:
            raise ValueError("Invalid value for `end_to_end_identification`, must not be `None`")
        if end_to_end_identification is not None and len(end_to_end_identification) > 35:
            raise ValueError("Invalid value for `end_to_end_identification`, length must be less than or equal to `35`")

        self._end_to_end_identification = end_to_end_identification

    @property
    def equivalent_amount(self):
        """Gets the equivalent_amount of this InitiatePaymentRequest.


        :return: The equivalent_amount of this InitiatePaymentRequest.
        :rtype: Amount
        """
        return self._equivalent_amount

    @equivalent_amount.setter
    def equivalent_amount(self, equivalent_amount):
        """Sets the equivalent_amount of this InitiatePaymentRequest.


        :param equivalent_amount: The equivalent_amount of this InitiatePaymentRequest.
        :type equivalent_amount: Amount
        """

        self._equivalent_amount = equivalent_amount

    @property
    def exchange_rate_information(self):
        """Gets the exchange_rate_information of this InitiatePaymentRequest.


        :return: The exchange_rate_information of this InitiatePaymentRequest.
        :rtype: ExchangeRateInformation1
        """
        return self._exchange_rate_information

    @exchange_rate_information.setter
    def exchange_rate_information(self, exchange_rate_information):
        """Sets the exchange_rate_information of this InitiatePaymentRequest.


        :param exchange_rate_information: The exchange_rate_information of this InitiatePaymentRequest.
        :type exchange_rate_information: ExchangeRateInformation1
        """

        self._exchange_rate_information = exchange_rate_information

    @property
    def instructed_amount(self):
        """Gets the instructed_amount of this InitiatePaymentRequest.


        :return: The instructed_amount of this InitiatePaymentRequest.
        :rtype: Amount
        """
        return self._instructed_amount

    @instructed_amount.setter
    def instructed_amount(self, instructed_amount):
        """Sets the instructed_amount of this InitiatePaymentRequest.


        :param instructed_amount: The instructed_amount of this InitiatePaymentRequest.
        :type instructed_amount: Amount
        """

        self._instructed_amount = instructed_amount

    @property
    def intermediary_agent(self):
        """Gets the intermediary_agent of this InitiatePaymentRequest.

        BICFI 

        :return: The intermediary_agent of this InitiatePaymentRequest.
        :rtype: str
        """
        return self._intermediary_agent

    @intermediary_agent.setter
    def intermediary_agent(self, intermediary_agent):
        """Sets the intermediary_agent of this InitiatePaymentRequest.

        BICFI 

        :param intermediary_agent: The intermediary_agent of this InitiatePaymentRequest.
        :type intermediary_agent: str
        """
        if intermediary_agent is not None and not re.search(r'[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}', intermediary_agent):
            raise ValueError("Invalid value for `intermediary_agent`, must be a follow pattern or equal to `/[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/`")

        self._intermediary_agent = intermediary_agent

    @property
    def purpose_code(self):
        """Gets the purpose_code of this InitiatePaymentRequest.


        :return: The purpose_code of this InitiatePaymentRequest.
        :rtype: PurposeCode
        """
        return self._purpose_code

    @purpose_code.setter
    def purpose_code(self, purpose_code):
        """Sets the purpose_code of this InitiatePaymentRequest.


        :param purpose_code: The purpose_code of this InitiatePaymentRequest.
        :type purpose_code: PurposeCode
        """

        self._purpose_code = purpose_code

    @property
    def remittance_information_structured(self):
        """Gets the remittance_information_structured of this InitiatePaymentRequest.


        :return: The remittance_information_structured of this InitiatePaymentRequest.
        :rtype: RemittanceInformationStructured
        """
        return self._remittance_information_structured

    @remittance_information_structured.setter
    def remittance_information_structured(self, remittance_information_structured):
        """Sets the remittance_information_structured of this InitiatePaymentRequest.


        :param remittance_information_structured: The remittance_information_structured of this InitiatePaymentRequest.
        :type remittance_information_structured: RemittanceInformationStructured
        """

        self._remittance_information_structured = remittance_information_structured

    @property
    def remittance_information_unstructured(self):
        """Gets the remittance_information_unstructured of this InitiatePaymentRequest.

        Unstructured remittance information. 

        :return: The remittance_information_unstructured of this InitiatePaymentRequest.
        :rtype: str
        """
        return self._remittance_information_unstructured

    @remittance_information_unstructured.setter
    def remittance_information_unstructured(self, remittance_information_unstructured):
        """Sets the remittance_information_unstructured of this InitiatePaymentRequest.

        Unstructured remittance information. 

        :param remittance_information_unstructured: The remittance_information_unstructured of this InitiatePaymentRequest.
        :type remittance_information_unstructured: str
        """
        if remittance_information_unstructured is not None and len(remittance_information_unstructured) > 140:
            raise ValueError("Invalid value for `remittance_information_unstructured`, length must be less than or equal to `140`")

        self._remittance_information_unstructured = remittance_information_unstructured

    @property
    def requested_execution_date(self):
        """Gets the requested_execution_date of this InitiatePaymentRequest.


        :return: The requested_execution_date of this InitiatePaymentRequest.
        :rtype: date
        """
        return self._requested_execution_date

    @requested_execution_date.setter
    def requested_execution_date(self, requested_execution_date):
        """Sets the requested_execution_date of this InitiatePaymentRequest.


        :param requested_execution_date: The requested_execution_date of this InitiatePaymentRequest.
        :type requested_execution_date: date
        """
        if requested_execution_date is None:
            raise ValueError("Invalid value for `requested_execution_date`, must not be `None`")

        self._requested_execution_date = requested_execution_date

    @property
    def service_level(self):
        """Gets the service_level of this InitiatePaymentRequest.


        :return: The service_level of this InitiatePaymentRequest.
        :rtype: ExternalServiceLevel1Code
        """
        return self._service_level

    @service_level.setter
    def service_level(self, service_level):
        """Sets the service_level of this InitiatePaymentRequest.


        :param service_level: The service_level of this InitiatePaymentRequest.
        :type service_level: ExternalServiceLevel1Code
        """

        self._service_level = service_level

    @property
    def transaction_currency(self):
        """Gets the transaction_currency of this InitiatePaymentRequest.

        ISO 4217 Alpha 3 currency code. 

        :return: The transaction_currency of this InitiatePaymentRequest.
        :rtype: str
        """
        return self._transaction_currency

    @transaction_currency.setter
    def transaction_currency(self, transaction_currency):
        """Sets the transaction_currency of this InitiatePaymentRequest.

        ISO 4217 Alpha 3 currency code. 

        :param transaction_currency: The transaction_currency of this InitiatePaymentRequest.
        :type transaction_currency: str
        """
        if transaction_currency is not None and not re.search(r'[A-Z]{3}', transaction_currency):
            raise ValueError("Invalid value for `transaction_currency`, must be a follow pattern or equal to `/[A-Z]{3}/`")

        self._transaction_currency = transaction_currency

    @property
    def ultimate_creditor(self):
        """Gets the ultimate_creditor of this InitiatePaymentRequest.

        Ultimate creditor.

        :return: The ultimate_creditor of this InitiatePaymentRequest.
        :rtype: str
        """
        return self._ultimate_creditor

    @ultimate_creditor.setter
    def ultimate_creditor(self, ultimate_creditor):
        """Sets the ultimate_creditor of this InitiatePaymentRequest.

        Ultimate creditor.

        :param ultimate_creditor: The ultimate_creditor of this InitiatePaymentRequest.
        :type ultimate_creditor: str
        """
        if ultimate_creditor is not None and len(ultimate_creditor) > 70:
            raise ValueError("Invalid value for `ultimate_creditor`, length must be less than or equal to `70`")

        self._ultimate_creditor = ultimate_creditor

    @property
    def ultimate_debtor(self):
        """Gets the ultimate_debtor of this InitiatePaymentRequest.

        Ultimate debtor.

        :return: The ultimate_debtor of this InitiatePaymentRequest.
        :rtype: str
        """
        return self._ultimate_debtor

    @ultimate_debtor.setter
    def ultimate_debtor(self, ultimate_debtor):
        """Sets the ultimate_debtor of this InitiatePaymentRequest.

        Ultimate debtor.

        :param ultimate_debtor: The ultimate_debtor of this InitiatePaymentRequest.
        :type ultimate_debtor: str
        """
        if ultimate_debtor is not None and len(ultimate_debtor) > 70:
            raise ValueError("Invalid value for `ultimate_debtor`, length must be less than or equal to `70`")

        self._ultimate_debtor = ultimate_debtor

    @property
    def day_of_execution(self):
        """Gets the day_of_execution of this InitiatePaymentRequest.


        :return: The day_of_execution of this InitiatePaymentRequest.
        :rtype: DayOfExecution
        """
        return self._day_of_execution

    @day_of_execution.setter
    def day_of_execution(self, day_of_execution):
        """Sets the day_of_execution of this InitiatePaymentRequest.


        :param day_of_execution: The day_of_execution of this InitiatePaymentRequest.
        :type day_of_execution: DayOfExecution
        """

        self._day_of_execution = day_of_execution

    @property
    def end_date(self):
        """Gets the end_date of this InitiatePaymentRequest.

        The last applicable day of execution. If not given, it is an infinite standing order. 

        :return: The end_date of this InitiatePaymentRequest.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this InitiatePaymentRequest.

        The last applicable day of execution. If not given, it is an infinite standing order. 

        :param end_date: The end_date of this InitiatePaymentRequest.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def execution_rule(self):
        """Gets the execution_rule of this InitiatePaymentRequest.


        :return: The execution_rule of this InitiatePaymentRequest.
        :rtype: ExecutionRule
        """
        return self._execution_rule

    @execution_rule.setter
    def execution_rule(self, execution_rule):
        """Sets the execution_rule of this InitiatePaymentRequest.


        :param execution_rule: The execution_rule of this InitiatePaymentRequest.
        :type execution_rule: ExecutionRule
        """

        self._execution_rule = execution_rule

    @property
    def frequency(self):
        """Gets the frequency of this InitiatePaymentRequest.


        :return: The frequency of this InitiatePaymentRequest.
        :rtype: FrequencyCode
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this InitiatePaymentRequest.


        :param frequency: The frequency of this InitiatePaymentRequest.
        :type frequency: FrequencyCode
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")

        self._frequency = frequency

    @property
    def start_date(self):
        """Gets the start_date of this InitiatePaymentRequest.

        The first applicable day of execution starting from this date is the first payment. 

        :return: The start_date of this InitiatePaymentRequest.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this InitiatePaymentRequest.

        The first applicable day of execution starting from this date is the first payment. 

        :param start_date: The start_date of this InitiatePaymentRequest.
        :type start_date: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def batch_booking_preferred(self):
        """Gets the batch_booking_preferred of this InitiatePaymentRequest.

        If this element equals 'true', the PSU prefers only one booking entry. If this element equals 'false', the PSU prefers individual booking of all contained individual transactions.  The ASPSP will follow this preference according to contracts agreed on with the PSU. 

        :return: The batch_booking_preferred of this InitiatePaymentRequest.
        :rtype: bool
        """
        return self._batch_booking_preferred

    @batch_booking_preferred.setter
    def batch_booking_preferred(self, batch_booking_preferred):
        """Sets the batch_booking_preferred of this InitiatePaymentRequest.

        If this element equals 'true', the PSU prefers only one booking entry. If this element equals 'false', the PSU prefers individual booking of all contained individual transactions.  The ASPSP will follow this preference according to contracts agreed on with the PSU. 

        :param batch_booking_preferred: The batch_booking_preferred of this InitiatePaymentRequest.
        :type batch_booking_preferred: bool
        """

        self._batch_booking_preferred = batch_booking_preferred

    @property
    def payments(self):
        """Gets the payments of this InitiatePaymentRequest.

        A list of generic JSON bodies payment initations for bulk payments via JSON.  Note: Some fields from single payments do not occcur in a bulk payment element 

        :return: The payments of this InitiatePaymentRequest.
        :rtype: List[PaymentInitiationBulkElementJson]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this InitiatePaymentRequest.

        A list of generic JSON bodies payment initations for bulk payments via JSON.  Note: Some fields from single payments do not occcur in a bulk payment element 

        :param payments: The payments of this InitiatePaymentRequest.
        :type payments: List[PaymentInitiationBulkElementJson]
        """
        if payments is None:
            raise ValueError("Invalid value for `payments`, must not be `None`")

        self._payments = payments

    @property
    def requested_execution_time(self):
        """Gets the requested_execution_time of this InitiatePaymentRequest.


        :return: The requested_execution_time of this InitiatePaymentRequest.
        :rtype: datetime
        """
        return self._requested_execution_time

    @requested_execution_time.setter
    def requested_execution_time(self, requested_execution_time):
        """Sets the requested_execution_time of this InitiatePaymentRequest.


        :param requested_execution_time: The requested_execution_time of this InitiatePaymentRequest.
        :type requested_execution_time: datetime
        """

        self._requested_execution_time = requested_execution_time
