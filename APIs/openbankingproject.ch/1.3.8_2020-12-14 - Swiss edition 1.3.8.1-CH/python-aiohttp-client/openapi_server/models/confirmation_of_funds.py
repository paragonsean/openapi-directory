# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_reference16_ch import AccountReference16CH
from openapi_server.models.amount import Amount
from openapi_server import util


class ConfirmationOfFunds(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: AccountReference16CH=None, card_number: str=None, instructed_amount: Amount=None, payee: str=None):
        """ConfirmationOfFunds - a model defined in OpenAPI

        :param account: The account of this ConfirmationOfFunds.
        :param card_number: The card_number of this ConfirmationOfFunds.
        :param instructed_amount: The instructed_amount of this ConfirmationOfFunds.
        :param payee: The payee of this ConfirmationOfFunds.
        """
        self.openapi_types = {
            'account': AccountReference16CH,
            'card_number': str,
            'instructed_amount': Amount,
            'payee': str
        }

        self.attribute_map = {
            'account': 'account',
            'card_number': 'cardNumber',
            'instructed_amount': 'instructedAmount',
            'payee': 'payee'
        }

        self._account = account
        self._card_number = card_number
        self._instructed_amount = instructed_amount
        self._payee = payee

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfirmationOfFunds':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The confirmationOfFunds of this ConfirmationOfFunds.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this ConfirmationOfFunds.


        :return: The account of this ConfirmationOfFunds.
        :rtype: AccountReference16CH
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ConfirmationOfFunds.


        :param account: The account of this ConfirmationOfFunds.
        :type account: AccountReference16CH
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")

        self._account = account

    @property
    def card_number(self):
        """Gets the card_number of this ConfirmationOfFunds.

        Card Number of the card issued by the PIISP. Should be delivered if available. 

        :return: The card_number of this ConfirmationOfFunds.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this ConfirmationOfFunds.

        Card Number of the card issued by the PIISP. Should be delivered if available. 

        :param card_number: The card_number of this ConfirmationOfFunds.
        :type card_number: str
        """
        if card_number is not None and len(card_number) > 35:
            raise ValueError("Invalid value for `card_number`, length must be less than or equal to `35`")

        self._card_number = card_number

    @property
    def instructed_amount(self):
        """Gets the instructed_amount of this ConfirmationOfFunds.


        :return: The instructed_amount of this ConfirmationOfFunds.
        :rtype: Amount
        """
        return self._instructed_amount

    @instructed_amount.setter
    def instructed_amount(self, instructed_amount):
        """Sets the instructed_amount of this ConfirmationOfFunds.


        :param instructed_amount: The instructed_amount of this ConfirmationOfFunds.
        :type instructed_amount: Amount
        """
        if instructed_amount is None:
            raise ValueError("Invalid value for `instructed_amount`, must not be `None`")

        self._instructed_amount = instructed_amount

    @property
    def payee(self):
        """Gets the payee of this ConfirmationOfFunds.

        Name payee.

        :return: The payee of this ConfirmationOfFunds.
        :rtype: str
        """
        return self._payee

    @payee.setter
    def payee(self, payee):
        """Sets the payee of this ConfirmationOfFunds.

        Name payee.

        :param payee: The payee of this ConfirmationOfFunds.
        :type payee: str
        """
        if payee is not None and len(payee) > 70:
            raise ValueError("Invalid value for `payee`, length must be less than or equal to `70`")

        self._payee = payee
