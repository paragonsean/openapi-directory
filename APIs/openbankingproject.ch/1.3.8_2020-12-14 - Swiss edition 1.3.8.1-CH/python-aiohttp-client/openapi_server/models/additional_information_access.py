# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_reference16_ch import AccountReference16CH
from openapi_server import util


class AdditionalInformationAccess(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, owner_name: List[AccountReference16CH]=None, trusted_beneficiaries: List[AccountReference16CH]=None):
        """AdditionalInformationAccess - a model defined in OpenAPI

        :param owner_name: The owner_name of this AdditionalInformationAccess.
        :param trusted_beneficiaries: The trusted_beneficiaries of this AdditionalInformationAccess.
        """
        self.openapi_types = {
            'owner_name': List[AccountReference16CH],
            'trusted_beneficiaries': List[AccountReference16CH]
        }

        self.attribute_map = {
            'owner_name': 'ownerName',
            'trusted_beneficiaries': 'trustedBeneficiaries'
        }

        self._owner_name = owner_name
        self._trusted_beneficiaries = trusted_beneficiaries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalInformationAccess':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The additionalInformationAccess of this AdditionalInformationAccess.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def owner_name(self):
        """Gets the owner_name of this AdditionalInformationAccess.

        Is asking for account owner name of the accounts referenced within.  If the array is empty in the request, the TPP is asking for the account  owner name of all accessible accounts.  This may be restricted in a PSU/ASPSP authorization dialogue.  If the array is empty, also the arrays for accounts, balances or transactions shall be empty, if used. The ASPSP will indicate in the consent resource after a successful authorisation,  whether the ownerName consent can be accepted by providing the accounts on which the ownerName will  be delivered.  This array can be empty. 

        :return: The owner_name of this AdditionalInformationAccess.
        :rtype: List[AccountReference16CH]
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this AdditionalInformationAccess.

        Is asking for account owner name of the accounts referenced within.  If the array is empty in the request, the TPP is asking for the account  owner name of all accessible accounts.  This may be restricted in a PSU/ASPSP authorization dialogue.  If the array is empty, also the arrays for accounts, balances or transactions shall be empty, if used. The ASPSP will indicate in the consent resource after a successful authorisation,  whether the ownerName consent can be accepted by providing the accounts on which the ownerName will  be delivered.  This array can be empty. 

        :param owner_name: The owner_name of this AdditionalInformationAccess.
        :type owner_name: List[AccountReference16CH]
        """

        self._owner_name = owner_name

    @property
    def trusted_beneficiaries(self):
        """Gets the trusted_beneficiaries of this AdditionalInformationAccess.

        Optional if supported by API provider. Is asking for the trusted beneficiaries related to the accounts referenced within and related to the PSU. If the array is empty in the request, the TPP is asking for the lists of trusted beneficiaries of all accessible accounts.  This may be restricted in a PSU/ASPSP authorization dialogue by the PSU if also the account lists addressed  by the tags “accounts”, “balances” or “transactions” are empty. The ASPSP will indicate in the consent resource after a successful authorisation,  whether the trustedBeneficiaries consent can be accepted by providing the accounts on which the list of trusted beneficiaries will be delivered.  This array can be empty. 

        :return: The trusted_beneficiaries of this AdditionalInformationAccess.
        :rtype: List[AccountReference16CH]
        """
        return self._trusted_beneficiaries

    @trusted_beneficiaries.setter
    def trusted_beneficiaries(self, trusted_beneficiaries):
        """Sets the trusted_beneficiaries of this AdditionalInformationAccess.

        Optional if supported by API provider. Is asking for the trusted beneficiaries related to the accounts referenced within and related to the PSU. If the array is empty in the request, the TPP is asking for the lists of trusted beneficiaries of all accessible accounts.  This may be restricted in a PSU/ASPSP authorization dialogue by the PSU if also the account lists addressed  by the tags “accounts”, “balances” or “transactions” are empty. The ASPSP will indicate in the consent resource after a successful authorisation,  whether the trustedBeneficiaries consent can be accepted by providing the accounts on which the list of trusted beneficiaries will be delivered.  This array can be empty. 

        :param trusted_beneficiaries: The trusted_beneficiaries of this AdditionalInformationAccess.
        :type trusted_beneficiaries: List[AccountReference16CH]
        """

        self._trusted_beneficiaries = trusted_beneficiaries
