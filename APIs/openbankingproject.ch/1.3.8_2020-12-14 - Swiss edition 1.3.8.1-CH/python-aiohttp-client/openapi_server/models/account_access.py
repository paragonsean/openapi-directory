# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_reference16_ch import AccountReference16CH
from openapi_server.models.additional_information_access import AdditionalInformationAccess
from openapi_server import util


class AccountAccess(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounts: List[AccountReference16CH]=None, additional_information: AdditionalInformationAccess=None, all_psd2: str=None, available_accounts: str=None, available_accounts_with_balance: str=None, balances: List[AccountReference16CH]=None, restricted_to: List[str]=None, transactions: List[AccountReference16CH]=None):
        """AccountAccess - a model defined in OpenAPI

        :param accounts: The accounts of this AccountAccess.
        :param additional_information: The additional_information of this AccountAccess.
        :param all_psd2: The all_psd2 of this AccountAccess.
        :param available_accounts: The available_accounts of this AccountAccess.
        :param available_accounts_with_balance: The available_accounts_with_balance of this AccountAccess.
        :param balances: The balances of this AccountAccess.
        :param restricted_to: The restricted_to of this AccountAccess.
        :param transactions: The transactions of this AccountAccess.
        """
        self.openapi_types = {
            'accounts': List[AccountReference16CH],
            'additional_information': AdditionalInformationAccess,
            'all_psd2': str,
            'available_accounts': str,
            'available_accounts_with_balance': str,
            'balances': List[AccountReference16CH],
            'restricted_to': List[str],
            'transactions': List[AccountReference16CH]
        }

        self.attribute_map = {
            'accounts': 'accounts',
            'additional_information': 'additionalInformation',
            'all_psd2': 'allPsd2',
            'available_accounts': 'availableAccounts',
            'available_accounts_with_balance': 'availableAccountsWithBalance',
            'balances': 'balances',
            'restricted_to': 'restrictedTo',
            'transactions': 'transactions'
        }

        self._accounts = accounts
        self._additional_information = additional_information
        self._all_psd2 = all_psd2
        self._available_accounts = available_accounts
        self._available_accounts_with_balance = available_accounts_with_balance
        self._balances = balances
        self._restricted_to = restricted_to
        self._transactions = transactions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountAccess':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The accountAccess of this AccountAccess.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounts(self):
        """Gets the accounts of this AccountAccess.

        Is asking for detailed account information.   If the array is empty in a request, the TPP is asking for an accessible account list.  This may be restricted in a PSU/ASPSP authorization dialogue.  If the array is empty, also the arrays for balances, additionalInformation sub attributes or transactions shall be empty, if used. 

        :return: The accounts of this AccountAccess.
        :rtype: List[AccountReference16CH]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this AccountAccess.

        Is asking for detailed account information.   If the array is empty in a request, the TPP is asking for an accessible account list.  This may be restricted in a PSU/ASPSP authorization dialogue.  If the array is empty, also the arrays for balances, additionalInformation sub attributes or transactions shall be empty, if used. 

        :param accounts: The accounts of this AccountAccess.
        :type accounts: List[AccountReference16CH]
        """

        self._accounts = accounts

    @property
    def additional_information(self):
        """Gets the additional_information of this AccountAccess.


        :return: The additional_information of this AccountAccess.
        :rtype: AdditionalInformationAccess
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this AccountAccess.


        :param additional_information: The additional_information of this AccountAccess.
        :type additional_information: AdditionalInformationAccess
        """

        self._additional_information = additional_information

    @property
    def all_psd2(self):
        """Gets the all_psd2 of this AccountAccess.

        Optional if supported by API provider.  The values \"allAccounts\" and \"allAccountsWithOwnerName\" are admitted.  The support of the \"allAccountsWithOwnerName\" value by the ASPSP is optional. 

        :return: The all_psd2 of this AccountAccess.
        :rtype: str
        """
        return self._all_psd2

    @all_psd2.setter
    def all_psd2(self, all_psd2):
        """Sets the all_psd2 of this AccountAccess.

        Optional if supported by API provider.  The values \"allAccounts\" and \"allAccountsWithOwnerName\" are admitted.  The support of the \"allAccountsWithOwnerName\" value by the ASPSP is optional. 

        :param all_psd2: The all_psd2 of this AccountAccess.
        :type all_psd2: str
        """
        allowed_values = ["allAccounts", "allAccountsWithOwnerName"]  # noqa: E501
        if all_psd2 not in allowed_values:
            raise ValueError(
                "Invalid value for `all_psd2` ({0}), must be one of {1}"
                .format(all_psd2, allowed_values)
            )

        self._all_psd2 = all_psd2

    @property
    def available_accounts(self):
        """Gets the available_accounts of this AccountAccess.

        Optional if supported by API provider.  The values \"allAccounts\" and \"allAccountsWithOwnerName\" are admitted.  The support of the \"allAccountsWithOwnerName\" value by the ASPSP is optional. 

        :return: The available_accounts of this AccountAccess.
        :rtype: str
        """
        return self._available_accounts

    @available_accounts.setter
    def available_accounts(self, available_accounts):
        """Sets the available_accounts of this AccountAccess.

        Optional if supported by API provider.  The values \"allAccounts\" and \"allAccountsWithOwnerName\" are admitted.  The support of the \"allAccountsWithOwnerName\" value by the ASPSP is optional. 

        :param available_accounts: The available_accounts of this AccountAccess.
        :type available_accounts: str
        """
        allowed_values = ["allAccounts", "allAccountsWithOwnerName"]  # noqa: E501
        if available_accounts not in allowed_values:
            raise ValueError(
                "Invalid value for `available_accounts` ({0}), must be one of {1}"
                .format(available_accounts, allowed_values)
            )

        self._available_accounts = available_accounts

    @property
    def available_accounts_with_balance(self):
        """Gets the available_accounts_with_balance of this AccountAccess.

        Optional if supported by API provider.  The values \"allAccounts\" and \"allAccountsWithOwnerName\" are admitted.  The support of the \"allAccountsWithOwnerName\" value by the ASPSP is optional. 

        :return: The available_accounts_with_balance of this AccountAccess.
        :rtype: str
        """
        return self._available_accounts_with_balance

    @available_accounts_with_balance.setter
    def available_accounts_with_balance(self, available_accounts_with_balance):
        """Sets the available_accounts_with_balance of this AccountAccess.

        Optional if supported by API provider.  The values \"allAccounts\" and \"allAccountsWithOwnerName\" are admitted.  The support of the \"allAccountsWithOwnerName\" value by the ASPSP is optional. 

        :param available_accounts_with_balance: The available_accounts_with_balance of this AccountAccess.
        :type available_accounts_with_balance: str
        """
        allowed_values = ["allAccounts", "allAccountsWithOwnerName"]  # noqa: E501
        if available_accounts_with_balance not in allowed_values:
            raise ValueError(
                "Invalid value for `available_accounts_with_balance` ({0}), must be one of {1}"
                .format(available_accounts_with_balance, allowed_values)
            )

        self._available_accounts_with_balance = available_accounts_with_balance

    @property
    def balances(self):
        """Gets the balances of this AccountAccess.

        Is asking for balances of the addressed accounts.  If the array is empty in the request, the TPP is asking for the balances of all accessible account lists.  This may be restricted in a PSU/ASPSP authorization dialogue.  If the array is empty, also the arrays for accounts, additionalInformation sub attributes or transactions shall be empty, if used. 

        :return: The balances of this AccountAccess.
        :rtype: List[AccountReference16CH]
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this AccountAccess.

        Is asking for balances of the addressed accounts.  If the array is empty in the request, the TPP is asking for the balances of all accessible account lists.  This may be restricted in a PSU/ASPSP authorization dialogue.  If the array is empty, also the arrays for accounts, additionalInformation sub attributes or transactions shall be empty, if used. 

        :param balances: The balances of this AccountAccess.
        :type balances: List[AccountReference16CH]
        """

        self._balances = balances

    @property
    def restricted_to(self):
        """Gets the restricted_to of this AccountAccess.

        If the TPP requests access to accounts via availableAccounts (List of available accounts), global  or bank driven consents, the TPP may include this element to restrict access to the referred  account types. Absence of the element is interpreted as \"no restriction\" (therefore access to  accounts of all types is requested). The element may only occur, if each of the elements    - accounts    - balances    - transactions  is either not present or contains an empty array.  

        :return: The restricted_to of this AccountAccess.
        :rtype: List[str]
        """
        return self._restricted_to

    @restricted_to.setter
    def restricted_to(self, restricted_to):
        """Sets the restricted_to of this AccountAccess.

        If the TPP requests access to accounts via availableAccounts (List of available accounts), global  or bank driven consents, the TPP may include this element to restrict access to the referred  account types. Absence of the element is interpreted as \"no restriction\" (therefore access to  accounts of all types is requested). The element may only occur, if each of the elements    - accounts    - balances    - transactions  is either not present or contains an empty array.  

        :param restricted_to: The restricted_to of this AccountAccess.
        :type restricted_to: List[str]
        """

        self._restricted_to = restricted_to

    @property
    def transactions(self):
        """Gets the transactions of this AccountAccess.

        Is asking for transactions of the addressed accounts.   If the array is empty in the request, the TPP is asking for the transactions of all accessible account lists.  This may be restricted in a PSU/ASPSP authorization dialogue.  If the array is empty, also the arrays for accounts, additionalInformation sub attributes or balances shall be empty, if used. 

        :return: The transactions of this AccountAccess.
        :rtype: List[AccountReference16CH]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this AccountAccess.

        Is asking for transactions of the addressed accounts.   If the array is empty in the request, the TPP is asking for the transactions of all accessible account lists.  This may be restricted in a PSU/ASPSP authorization dialogue.  If the array is empty, also the arrays for accounts, additionalInformation sub attributes or balances shall be empty, if used. 

        :param transactions: The transactions of this AccountAccess.
        :type transactions: List[AccountReference16CH]
        """

        self._transactions = transactions
