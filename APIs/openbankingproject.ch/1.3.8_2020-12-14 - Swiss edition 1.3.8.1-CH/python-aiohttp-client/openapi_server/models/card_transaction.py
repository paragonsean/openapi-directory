# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.amount import Amount
from openapi_server.models.report_exchange_rate import ReportExchangeRate
import re
from openapi_server import util


class CardTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acceptor_transaction_date_time: datetime=None, booking_date: date=None, card_acceptor_address: Address=None, card_acceptor_id: str=None, card_acceptor_phone: str=None, card_transaction_id: str=None, currency_exchange: List[ReportExchangeRate]=None, invoiced: bool=None, markup_fee: Amount=None, markup_fee_percentage: str=None, masked_pan: str=None, merchant_category_code: str=None, original_amount: Amount=None, proprietary_bank_transaction_code: str=None, terminal_id: str=None, transaction_amount: Amount=None, transaction_date: date=None, transaction_details: str=None):
        """CardTransaction - a model defined in OpenAPI

        :param acceptor_transaction_date_time: The acceptor_transaction_date_time of this CardTransaction.
        :param booking_date: The booking_date of this CardTransaction.
        :param card_acceptor_address: The card_acceptor_address of this CardTransaction.
        :param card_acceptor_id: The card_acceptor_id of this CardTransaction.
        :param card_acceptor_phone: The card_acceptor_phone of this CardTransaction.
        :param card_transaction_id: The card_transaction_id of this CardTransaction.
        :param currency_exchange: The currency_exchange of this CardTransaction.
        :param invoiced: The invoiced of this CardTransaction.
        :param markup_fee: The markup_fee of this CardTransaction.
        :param markup_fee_percentage: The markup_fee_percentage of this CardTransaction.
        :param masked_pan: The masked_pan of this CardTransaction.
        :param merchant_category_code: The merchant_category_code of this CardTransaction.
        :param original_amount: The original_amount of this CardTransaction.
        :param proprietary_bank_transaction_code: The proprietary_bank_transaction_code of this CardTransaction.
        :param terminal_id: The terminal_id of this CardTransaction.
        :param transaction_amount: The transaction_amount of this CardTransaction.
        :param transaction_date: The transaction_date of this CardTransaction.
        :param transaction_details: The transaction_details of this CardTransaction.
        """
        self.openapi_types = {
            'acceptor_transaction_date_time': datetime,
            'booking_date': date,
            'card_acceptor_address': Address,
            'card_acceptor_id': str,
            'card_acceptor_phone': str,
            'card_transaction_id': str,
            'currency_exchange': List[ReportExchangeRate],
            'invoiced': bool,
            'markup_fee': Amount,
            'markup_fee_percentage': str,
            'masked_pan': str,
            'merchant_category_code': str,
            'original_amount': Amount,
            'proprietary_bank_transaction_code': str,
            'terminal_id': str,
            'transaction_amount': Amount,
            'transaction_date': date,
            'transaction_details': str
        }

        self.attribute_map = {
            'acceptor_transaction_date_time': 'acceptorTransactionDateTime',
            'booking_date': 'bookingDate',
            'card_acceptor_address': 'cardAcceptorAddress',
            'card_acceptor_id': 'cardAcceptorId',
            'card_acceptor_phone': 'cardAcceptorPhone',
            'card_transaction_id': 'cardTransactionId',
            'currency_exchange': 'currencyExchange',
            'invoiced': 'invoiced',
            'markup_fee': 'markupFee',
            'markup_fee_percentage': 'markupFeePercentage',
            'masked_pan': 'maskedPAN',
            'merchant_category_code': 'merchantCategoryCode',
            'original_amount': 'originalAmount',
            'proprietary_bank_transaction_code': 'proprietaryBankTransactionCode',
            'terminal_id': 'terminalId',
            'transaction_amount': 'transactionAmount',
            'transaction_date': 'transactionDate',
            'transaction_details': 'transactionDetails'
        }

        self._acceptor_transaction_date_time = acceptor_transaction_date_time
        self._booking_date = booking_date
        self._card_acceptor_address = card_acceptor_address
        self._card_acceptor_id = card_acceptor_id
        self._card_acceptor_phone = card_acceptor_phone
        self._card_transaction_id = card_transaction_id
        self._currency_exchange = currency_exchange
        self._invoiced = invoiced
        self._markup_fee = markup_fee
        self._markup_fee_percentage = markup_fee_percentage
        self._masked_pan = masked_pan
        self._merchant_category_code = merchant_category_code
        self._original_amount = original_amount
        self._proprietary_bank_transaction_code = proprietary_bank_transaction_code
        self._terminal_id = terminal_id
        self._transaction_amount = transaction_amount
        self._transaction_date = transaction_date
        self._transaction_details = transaction_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cardTransaction of this CardTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acceptor_transaction_date_time(self):
        """Gets the acceptor_transaction_date_time of this CardTransaction.

        Timestamp of the actual card transaction within the acceptance system

        :return: The acceptor_transaction_date_time of this CardTransaction.
        :rtype: datetime
        """
        return self._acceptor_transaction_date_time

    @acceptor_transaction_date_time.setter
    def acceptor_transaction_date_time(self, acceptor_transaction_date_time):
        """Sets the acceptor_transaction_date_time of this CardTransaction.

        Timestamp of the actual card transaction within the acceptance system

        :param acceptor_transaction_date_time: The acceptor_transaction_date_time of this CardTransaction.
        :type acceptor_transaction_date_time: datetime
        """

        self._acceptor_transaction_date_time = acceptor_transaction_date_time

    @property
    def booking_date(self):
        """Gets the booking_date of this CardTransaction.

        The date when an entry is posted to an account on the ASPSPs books. 

        :return: The booking_date of this CardTransaction.
        :rtype: date
        """
        return self._booking_date

    @booking_date.setter
    def booking_date(self, booking_date):
        """Sets the booking_date of this CardTransaction.

        The date when an entry is posted to an account on the ASPSPs books. 

        :param booking_date: The booking_date of this CardTransaction.
        :type booking_date: date
        """

        self._booking_date = booking_date

    @property
    def card_acceptor_address(self):
        """Gets the card_acceptor_address of this CardTransaction.


        :return: The card_acceptor_address of this CardTransaction.
        :rtype: Address
        """
        return self._card_acceptor_address

    @card_acceptor_address.setter
    def card_acceptor_address(self, card_acceptor_address):
        """Sets the card_acceptor_address of this CardTransaction.


        :param card_acceptor_address: The card_acceptor_address of this CardTransaction.
        :type card_acceptor_address: Address
        """

        self._card_acceptor_address = card_acceptor_address

    @property
    def card_acceptor_id(self):
        """Gets the card_acceptor_id of this CardTransaction.


        :return: The card_acceptor_id of this CardTransaction.
        :rtype: str
        """
        return self._card_acceptor_id

    @card_acceptor_id.setter
    def card_acceptor_id(self, card_acceptor_id):
        """Sets the card_acceptor_id of this CardTransaction.


        :param card_acceptor_id: The card_acceptor_id of this CardTransaction.
        :type card_acceptor_id: str
        """
        if card_acceptor_id is not None and len(card_acceptor_id) > 35:
            raise ValueError("Invalid value for `card_acceptor_id`, length must be less than or equal to `35`")

        self._card_acceptor_id = card_acceptor_id

    @property
    def card_acceptor_phone(self):
        """Gets the card_acceptor_phone of this CardTransaction.

        Merchant phone number It consists of a \"+\" followed by the country code (from 1 to 3 characters) then a \"-\" and finally, any combination of numbers, \"(\", \")\", \"+\" and \"-\" (up to 30 characters). pattern according to ISO20022 \\+[0-9]{1,3}-[0-9()+\\-]{1,30} 

        :return: The card_acceptor_phone of this CardTransaction.
        :rtype: str
        """
        return self._card_acceptor_phone

    @card_acceptor_phone.setter
    def card_acceptor_phone(self, card_acceptor_phone):
        """Sets the card_acceptor_phone of this CardTransaction.

        Merchant phone number It consists of a \"+\" followed by the country code (from 1 to 3 characters) then a \"-\" and finally, any combination of numbers, \"(\", \")\", \"+\" and \"-\" (up to 30 characters). pattern according to ISO20022 \\+[0-9]{1,3}-[0-9()+\\-]{1,30} 

        :param card_acceptor_phone: The card_acceptor_phone of this CardTransaction.
        :type card_acceptor_phone: str
        """
        if card_acceptor_phone is not None and not re.search(r'\+[0-9]{1,3}\-[0-9()+\-]{1,30}', card_acceptor_phone):
            raise ValueError("Invalid value for `card_acceptor_phone`, must be a follow pattern or equal to `/\+[0-9]{1,3}\-[0-9()+\-]{1,30}/`")

        self._card_acceptor_phone = card_acceptor_phone

    @property
    def card_transaction_id(self):
        """Gets the card_transaction_id of this CardTransaction.

        Unique end to end identity.

        :return: The card_transaction_id of this CardTransaction.
        :rtype: str
        """
        return self._card_transaction_id

    @card_transaction_id.setter
    def card_transaction_id(self, card_transaction_id):
        """Sets the card_transaction_id of this CardTransaction.

        Unique end to end identity.

        :param card_transaction_id: The card_transaction_id of this CardTransaction.
        :type card_transaction_id: str
        """
        if card_transaction_id is not None and len(card_transaction_id) > 35:
            raise ValueError("Invalid value for `card_transaction_id`, length must be less than or equal to `35`")

        self._card_transaction_id = card_transaction_id

    @property
    def currency_exchange(self):
        """Gets the currency_exchange of this CardTransaction.

        Array of exchange rates.

        :return: The currency_exchange of this CardTransaction.
        :rtype: List[ReportExchangeRate]
        """
        return self._currency_exchange

    @currency_exchange.setter
    def currency_exchange(self, currency_exchange):
        """Sets the currency_exchange of this CardTransaction.

        Array of exchange rates.

        :param currency_exchange: The currency_exchange of this CardTransaction.
        :type currency_exchange: List[ReportExchangeRate]
        """

        self._currency_exchange = currency_exchange

    @property
    def invoiced(self):
        """Gets the invoiced of this CardTransaction.


        :return: The invoiced of this CardTransaction.
        :rtype: bool
        """
        return self._invoiced

    @invoiced.setter
    def invoiced(self, invoiced):
        """Sets the invoiced of this CardTransaction.


        :param invoiced: The invoiced of this CardTransaction.
        :type invoiced: bool
        """

        self._invoiced = invoiced

    @property
    def markup_fee(self):
        """Gets the markup_fee of this CardTransaction.


        :return: The markup_fee of this CardTransaction.
        :rtype: Amount
        """
        return self._markup_fee

    @markup_fee.setter
    def markup_fee(self, markup_fee):
        """Sets the markup_fee of this CardTransaction.


        :param markup_fee: The markup_fee of this CardTransaction.
        :type markup_fee: Amount
        """

        self._markup_fee = markup_fee

    @property
    def markup_fee_percentage(self):
        """Gets the markup_fee_percentage of this CardTransaction.


        :return: The markup_fee_percentage of this CardTransaction.
        :rtype: str
        """
        return self._markup_fee_percentage

    @markup_fee_percentage.setter
    def markup_fee_percentage(self, markup_fee_percentage):
        """Sets the markup_fee_percentage of this CardTransaction.


        :param markup_fee_percentage: The markup_fee_percentage of this CardTransaction.
        :type markup_fee_percentage: str
        """

        self._markup_fee_percentage = markup_fee_percentage

    @property
    def masked_pan(self):
        """Gets the masked_pan of this CardTransaction.

        Masked Primary Account Number. 

        :return: The masked_pan of this CardTransaction.
        :rtype: str
        """
        return self._masked_pan

    @masked_pan.setter
    def masked_pan(self, masked_pan):
        """Sets the masked_pan of this CardTransaction.

        Masked Primary Account Number. 

        :param masked_pan: The masked_pan of this CardTransaction.
        :type masked_pan: str
        """
        if masked_pan is not None and len(masked_pan) > 35:
            raise ValueError("Invalid value for `masked_pan`, length must be less than or equal to `35`")

        self._masked_pan = masked_pan

    @property
    def merchant_category_code(self):
        """Gets the merchant_category_code of this CardTransaction.

        Merchant category code.

        :return: The merchant_category_code of this CardTransaction.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """Sets the merchant_category_code of this CardTransaction.

        Merchant category code.

        :param merchant_category_code: The merchant_category_code of this CardTransaction.
        :type merchant_category_code: str
        """
        if merchant_category_code is not None and len(merchant_category_code) > 4:
            raise ValueError("Invalid value for `merchant_category_code`, length must be less than or equal to `4`")
        if merchant_category_code is not None and len(merchant_category_code) < 4:
            raise ValueError("Invalid value for `merchant_category_code`, length must be greater than or equal to `4`")

        self._merchant_category_code = merchant_category_code

    @property
    def original_amount(self):
        """Gets the original_amount of this CardTransaction.


        :return: The original_amount of this CardTransaction.
        :rtype: Amount
        """
        return self._original_amount

    @original_amount.setter
    def original_amount(self, original_amount):
        """Sets the original_amount of this CardTransaction.


        :param original_amount: The original_amount of this CardTransaction.
        :type original_amount: Amount
        """

        self._original_amount = original_amount

    @property
    def proprietary_bank_transaction_code(self):
        """Gets the proprietary_bank_transaction_code of this CardTransaction.

        Proprietary bank transaction code as used within a community or within an ASPSP e.g. for MT94x based transaction reports. 

        :return: The proprietary_bank_transaction_code of this CardTransaction.
        :rtype: str
        """
        return self._proprietary_bank_transaction_code

    @proprietary_bank_transaction_code.setter
    def proprietary_bank_transaction_code(self, proprietary_bank_transaction_code):
        """Sets the proprietary_bank_transaction_code of this CardTransaction.

        Proprietary bank transaction code as used within a community or within an ASPSP e.g. for MT94x based transaction reports. 

        :param proprietary_bank_transaction_code: The proprietary_bank_transaction_code of this CardTransaction.
        :type proprietary_bank_transaction_code: str
        """
        if proprietary_bank_transaction_code is not None and len(proprietary_bank_transaction_code) > 35:
            raise ValueError("Invalid value for `proprietary_bank_transaction_code`, length must be less than or equal to `35`")

        self._proprietary_bank_transaction_code = proprietary_bank_transaction_code

    @property
    def terminal_id(self):
        """Gets the terminal_id of this CardTransaction.

        Identification of the Terminal, where the card has been used.

        :return: The terminal_id of this CardTransaction.
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this CardTransaction.

        Identification of the Terminal, where the card has been used.

        :param terminal_id: The terminal_id of this CardTransaction.
        :type terminal_id: str
        """
        if terminal_id is not None and len(terminal_id) > 35:
            raise ValueError("Invalid value for `terminal_id`, length must be less than or equal to `35`")

        self._terminal_id = terminal_id

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this CardTransaction.


        :return: The transaction_amount of this CardTransaction.
        :rtype: Amount
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this CardTransaction.


        :param transaction_amount: The transaction_amount of this CardTransaction.
        :type transaction_amount: Amount
        """
        if transaction_amount is None:
            raise ValueError("Invalid value for `transaction_amount`, must not be `None`")

        self._transaction_amount = transaction_amount

    @property
    def transaction_date(self):
        """Gets the transaction_date of this CardTransaction.

        Date of the actual card transaction.

        :return: The transaction_date of this CardTransaction.
        :rtype: date
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this CardTransaction.

        Date of the actual card transaction.

        :param transaction_date: The transaction_date of this CardTransaction.
        :type transaction_date: date
        """

        self._transaction_date = transaction_date

    @property
    def transaction_details(self):
        """Gets the transaction_details of this CardTransaction.


        :return: The transaction_details of this CardTransaction.
        :rtype: str
        """
        return self._transaction_details

    @transaction_details.setter
    def transaction_details(self, transaction_details):
        """Sets the transaction_details of this CardTransaction.


        :param transaction_details: The transaction_details of this CardTransaction.
        :type transaction_details: str
        """
        if transaction_details is not None and len(transaction_details) > 140:
            raise ValueError("Invalid value for `transaction_details`, length must be less than or equal to `140`")

        self._transaction_details = transaction_details
