# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Authorisations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorisation_ids: List[str]=None):
        """Authorisations - a model defined in OpenAPI

        :param authorisation_ids: The authorisation_ids of this Authorisations.
        """
        self.openapi_types = {
            'authorisation_ids': List[str]
        }

        self.attribute_map = {
            'authorisation_ids': 'authorisationIds'
        }

        self._authorisation_ids = authorisation_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Authorisations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The authorisations of this Authorisations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorisation_ids(self):
        """Gets the authorisation_ids of this Authorisations.

        An array of all authorisationIds.

        :return: The authorisation_ids of this Authorisations.
        :rtype: List[str]
        """
        return self._authorisation_ids

    @authorisation_ids.setter
    def authorisation_ids(self, authorisation_ids):
        """Sets the authorisation_ids of this Authorisations.

        An array of all authorisationIds.

        :param authorisation_ids: The authorisation_ids of this Authorisations.
        :type authorisation_ids: List[str]
        """
        if authorisation_ids is None:
            raise ValueError("Invalid value for `authorisation_ids`, must not be `None`")

        self._authorisation_ids = authorisation_ids
