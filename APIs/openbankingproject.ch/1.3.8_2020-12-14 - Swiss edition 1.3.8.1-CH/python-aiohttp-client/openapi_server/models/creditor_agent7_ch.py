# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.institutional_identification2 import InstitutionalIdentification2
from openapi_server.models.postal_address6_ch import PostalAddress6CH
import re
from openapi_server import util


class CreditorAgent7CH(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: PostalAddress6CH=None, bic: str=None, iid: InstitutionalIdentification2=None, name: str=None):
        """CreditorAgent7CH - a model defined in OpenAPI

        :param address: The address of this CreditorAgent7CH.
        :param bic: The bic of this CreditorAgent7CH.
        :param iid: The iid of this CreditorAgent7CH.
        :param name: The name of this CreditorAgent7CH.
        """
        self.openapi_types = {
            'address': PostalAddress6CH,
            'bic': str,
            'iid': InstitutionalIdentification2,
            'name': str
        }

        self.attribute_map = {
            'address': 'address',
            'bic': 'bic',
            'iid': 'iid',
            'name': 'name'
        }

        self._address = address
        self._bic = bic
        self._iid = iid
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreditorAgent7CH':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The creditorAgent7-CH of this CreditorAgent7CH.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this CreditorAgent7CH.


        :return: The address of this CreditorAgent7CH.
        :rtype: PostalAddress6CH
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CreditorAgent7CH.


        :param address: The address of this CreditorAgent7CH.
        :type address: PostalAddress6CH
        """

        self._address = address

    @property
    def bic(self):
        """Gets the bic of this CreditorAgent7CH.

        BICFI 

        :return: The bic of this CreditorAgent7CH.
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this CreditorAgent7CH.

        BICFI 

        :param bic: The bic of this CreditorAgent7CH.
        :type bic: str
        """
        if bic is not None and not re.search(r'[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}', bic):
            raise ValueError("Invalid value for `bic`, must be a follow pattern or equal to `/[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/`")

        self._bic = bic

    @property
    def iid(self):
        """Gets the iid of this CreditorAgent7CH.


        :return: The iid of this CreditorAgent7CH.
        :rtype: InstitutionalIdentification2
        """
        return self._iid

    @iid.setter
    def iid(self, iid):
        """Sets the iid of this CreditorAgent7CH.


        :param iid: The iid of this CreditorAgent7CH.
        :type iid: InstitutionalIdentification2
        """

        self._iid = iid

    @property
    def name(self):
        """Gets the name of this CreditorAgent7CH.


        :return: The name of this CreditorAgent7CH.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreditorAgent7CH.


        :param name: The name of this CreditorAgent7CH.
        :type name: str
        """
        if name is not None and len(name) > 35:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `35`")

        self._name = name
