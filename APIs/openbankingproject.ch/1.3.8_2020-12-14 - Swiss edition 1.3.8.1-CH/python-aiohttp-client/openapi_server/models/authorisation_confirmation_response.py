# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_authorisation_confirmation import LinksAuthorisationConfirmation
from openapi_server.models.sca_status_authorisation_confirmation import ScaStatusAuthorisationConfirmation
from openapi_server import util


class AuthorisationConfirmationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: LinksAuthorisationConfirmation=None, psu_message: str=None, sca_status: ScaStatusAuthorisationConfirmation=None):
        """AuthorisationConfirmationResponse - a model defined in OpenAPI

        :param links: The links of this AuthorisationConfirmationResponse.
        :param psu_message: The psu_message of this AuthorisationConfirmationResponse.
        :param sca_status: The sca_status of this AuthorisationConfirmationResponse.
        """
        self.openapi_types = {
            'links': LinksAuthorisationConfirmation,
            'psu_message': str,
            'sca_status': ScaStatusAuthorisationConfirmation
        }

        self.attribute_map = {
            'links': '_links',
            'psu_message': 'psuMessage',
            'sca_status': 'scaStatus'
        }

        self._links = links
        self._psu_message = psu_message
        self._sca_status = sca_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorisationConfirmationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The authorisationConfirmationResponse of this AuthorisationConfirmationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this AuthorisationConfirmationResponse.


        :return: The links of this AuthorisationConfirmationResponse.
        :rtype: LinksAuthorisationConfirmation
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AuthorisationConfirmationResponse.


        :param links: The links of this AuthorisationConfirmationResponse.
        :type links: LinksAuthorisationConfirmation
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def psu_message(self):
        """Gets the psu_message of this AuthorisationConfirmationResponse.

        Text to be displayed to the PSU.

        :return: The psu_message of this AuthorisationConfirmationResponse.
        :rtype: str
        """
        return self._psu_message

    @psu_message.setter
    def psu_message(self, psu_message):
        """Sets the psu_message of this AuthorisationConfirmationResponse.

        Text to be displayed to the PSU.

        :param psu_message: The psu_message of this AuthorisationConfirmationResponse.
        :type psu_message: str
        """
        if psu_message is not None and len(psu_message) > 500:
            raise ValueError("Invalid value for `psu_message`, length must be less than or equal to `500`")

        self._psu_message = psu_message

    @property
    def sca_status(self):
        """Gets the sca_status of this AuthorisationConfirmationResponse.


        :return: The sca_status of this AuthorisationConfirmationResponse.
        :rtype: ScaStatusAuthorisationConfirmation
        """
        return self._sca_status

    @sca_status.setter
    def sca_status(self, sca_status):
        """Sets the sca_status of this AuthorisationConfirmationResponse.


        :param sca_status: The sca_status of this AuthorisationConfirmationResponse.
        :type sca_status: ScaStatusAuthorisationConfirmation
        """
        if sca_status is None:
            raise ValueError("Invalid value for `sca_status`, must not be `None`")

        self._sca_status = sca_status
