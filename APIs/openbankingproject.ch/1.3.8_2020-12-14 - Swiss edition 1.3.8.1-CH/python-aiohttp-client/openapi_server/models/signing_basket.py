# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SigningBasket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent_ids: List[str]=None, payment_ids: List[str]=None):
        """SigningBasket - a model defined in OpenAPI

        :param consent_ids: The consent_ids of this SigningBasket.
        :param payment_ids: The payment_ids of this SigningBasket.
        """
        self.openapi_types = {
            'consent_ids': List[str],
            'payment_ids': List[str]
        }

        self.attribute_map = {
            'consent_ids': 'consentIds',
            'payment_ids': 'paymentIds'
        }

        self._consent_ids = consent_ids
        self._payment_ids = payment_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SigningBasket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The signingBasket of this SigningBasket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent_ids(self):
        """Gets the consent_ids of this SigningBasket.

        A list of consentIds.

        :return: The consent_ids of this SigningBasket.
        :rtype: List[str]
        """
        return self._consent_ids

    @consent_ids.setter
    def consent_ids(self, consent_ids):
        """Sets the consent_ids of this SigningBasket.

        A list of consentIds.

        :param consent_ids: The consent_ids of this SigningBasket.
        :type consent_ids: List[str]
        """
        if consent_ids is not None and len(consent_ids) < 1:
            raise ValueError("Invalid value for `consent_ids`, number of items must be greater than or equal to `1`")

        self._consent_ids = consent_ids

    @property
    def payment_ids(self):
        """Gets the payment_ids of this SigningBasket.

        A list of paymentIds.

        :return: The payment_ids of this SigningBasket.
        :rtype: List[str]
        """
        return self._payment_ids

    @payment_ids.setter
    def payment_ids(self, payment_ids):
        """Sets the payment_ids of this SigningBasket.

        A list of paymentIds.

        :param payment_ids: The payment_ids of this SigningBasket.
        :type payment_ids: List[str]
        """
        if payment_ids is not None and len(payment_ids) < 1:
            raise ValueError("Invalid value for `payment_ids`, number of items must be greater than or equal to `1`")

        self._payment_ids = payment_ids
