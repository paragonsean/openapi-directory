# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AccountReference16CH(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cash_account_type: str=None, currency: str=None, iban: str=None, other_account_identification: str=None):
        """AccountReference16CH - a model defined in OpenAPI

        :param cash_account_type: The cash_account_type of this AccountReference16CH.
        :param currency: The currency of this AccountReference16CH.
        :param iban: The iban of this AccountReference16CH.
        :param other_account_identification: The other_account_identification of this AccountReference16CH.
        """
        self.openapi_types = {
            'cash_account_type': str,
            'currency': str,
            'iban': str,
            'other_account_identification': str
        }

        self.attribute_map = {
            'cash_account_type': 'cashAccountType',
            'currency': 'currency',
            'iban': 'iban',
            'other_account_identification': 'otherAccountIdentification'
        }

        self._cash_account_type = cash_account_type
        self._currency = currency
        self._iban = iban
        self._other_account_identification = other_account_identification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountReference16CH':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The accountReference16-CH of this AccountReference16CH.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cash_account_type(self):
        """Gets the cash_account_type of this AccountReference16CH.

        ExternalCashAccountType1Code from ISO 20022. 

        :return: The cash_account_type of this AccountReference16CH.
        :rtype: str
        """
        return self._cash_account_type

    @cash_account_type.setter
    def cash_account_type(self, cash_account_type):
        """Sets the cash_account_type of this AccountReference16CH.

        ExternalCashAccountType1Code from ISO 20022. 

        :param cash_account_type: The cash_account_type of this AccountReference16CH.
        :type cash_account_type: str
        """

        self._cash_account_type = cash_account_type

    @property
    def currency(self):
        """Gets the currency of this AccountReference16CH.

        ISO 4217 Alpha 3 currency code. 

        :return: The currency of this AccountReference16CH.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountReference16CH.

        ISO 4217 Alpha 3 currency code. 

        :param currency: The currency of this AccountReference16CH.
        :type currency: str
        """
        if currency is not None and not re.search(r'[A-Z]{3}', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/[A-Z]{3}/`")

        self._currency = currency

    @property
    def iban(self):
        """Gets the iban of this AccountReference16CH.

        IBAN of an account.

        :return: The iban of this AccountReference16CH.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this AccountReference16CH.

        IBAN of an account.

        :param iban: The iban of this AccountReference16CH.
        :type iban: str
        """
        if iban is not None and not re.search(r'[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}', iban):
            raise ValueError("Invalid value for `iban`, must be a follow pattern or equal to `/[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/`")

        self._iban = iban

    @property
    def other_account_identification(self):
        """Gets the other_account_identification of this AccountReference16CH.

        Other payment account Identifier. adapted from ISO pain.001.001.03.ch.02 GenericAccountIdentification1-CH 

        :return: The other_account_identification of this AccountReference16CH.
        :rtype: str
        """
        return self._other_account_identification

    @other_account_identification.setter
    def other_account_identification(self, other_account_identification):
        """Sets the other_account_identification of this AccountReference16CH.

        Other payment account Identifier. adapted from ISO pain.001.001.03.ch.02 GenericAccountIdentification1-CH 

        :param other_account_identification: The other_account_identification of this AccountReference16CH.
        :type other_account_identification: str
        """
        if other_account_identification is not None and len(other_account_identification) > 34:
            raise ValueError("Invalid value for `other_account_identification`, length must be less than or equal to `34`")

        self._other_account_identification = other_account_identification
