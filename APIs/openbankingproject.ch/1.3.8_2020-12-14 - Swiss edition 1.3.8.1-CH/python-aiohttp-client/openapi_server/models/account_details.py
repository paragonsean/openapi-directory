# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_status import AccountStatus
from openapi_server.models.balance import Balance
from openapi_server.models.links_account_details import LinksAccountDetails
import re
from openapi_server import util


class AccountDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: LinksAccountDetails=None, balances: List[Balance]=None, bban: str=None, bic: str=None, cash_account_type: str=None, currency: str=None, details: str=None, display_name: str=None, iban: str=None, linked_accounts: str=None, msisdn: str=None, name: str=None, owner_name: str=None, product: str=None, resource_id: str=None, status: AccountStatus=None, usage: str=None):
        """AccountDetails - a model defined in OpenAPI

        :param links: The links of this AccountDetails.
        :param balances: The balances of this AccountDetails.
        :param bban: The bban of this AccountDetails.
        :param bic: The bic of this AccountDetails.
        :param cash_account_type: The cash_account_type of this AccountDetails.
        :param currency: The currency of this AccountDetails.
        :param details: The details of this AccountDetails.
        :param display_name: The display_name of this AccountDetails.
        :param iban: The iban of this AccountDetails.
        :param linked_accounts: The linked_accounts of this AccountDetails.
        :param msisdn: The msisdn of this AccountDetails.
        :param name: The name of this AccountDetails.
        :param owner_name: The owner_name of this AccountDetails.
        :param product: The product of this AccountDetails.
        :param resource_id: The resource_id of this AccountDetails.
        :param status: The status of this AccountDetails.
        :param usage: The usage of this AccountDetails.
        """
        self.openapi_types = {
            'links': LinksAccountDetails,
            'balances': List[Balance],
            'bban': str,
            'bic': str,
            'cash_account_type': str,
            'currency': str,
            'details': str,
            'display_name': str,
            'iban': str,
            'linked_accounts': str,
            'msisdn': str,
            'name': str,
            'owner_name': str,
            'product': str,
            'resource_id': str,
            'status': AccountStatus,
            'usage': str
        }

        self.attribute_map = {
            'links': '_links',
            'balances': 'balances',
            'bban': 'bban',
            'bic': 'bic',
            'cash_account_type': 'cashAccountType',
            'currency': 'currency',
            'details': 'details',
            'display_name': 'displayName',
            'iban': 'iban',
            'linked_accounts': 'linkedAccounts',
            'msisdn': 'msisdn',
            'name': 'name',
            'owner_name': 'ownerName',
            'product': 'product',
            'resource_id': 'resourceId',
            'status': 'status',
            'usage': 'usage'
        }

        self._links = links
        self._balances = balances
        self._bban = bban
        self._bic = bic
        self._cash_account_type = cash_account_type
        self._currency = currency
        self._details = details
        self._display_name = display_name
        self._iban = iban
        self._linked_accounts = linked_accounts
        self._msisdn = msisdn
        self._name = name
        self._owner_name = owner_name
        self._product = product
        self._resource_id = resource_id
        self._status = status
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The accountDetails of this AccountDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this AccountDetails.


        :return: The links of this AccountDetails.
        :rtype: LinksAccountDetails
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AccountDetails.


        :param links: The links of this AccountDetails.
        :type links: LinksAccountDetails
        """

        self._links = links

    @property
    def balances(self):
        """Gets the balances of this AccountDetails.

        A list of balances regarding this account, e.g. the current balance, the last booked balance. The list might be restricted to the current balance. 

        :return: The balances of this AccountDetails.
        :rtype: List[Balance]
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this AccountDetails.

        A list of balances regarding this account, e.g. the current balance, the last booked balance. The list might be restricted to the current balance. 

        :param balances: The balances of this AccountDetails.
        :type balances: List[Balance]
        """

        self._balances = balances

    @property
    def bban(self):
        """Gets the bban of this AccountDetails.

        Basic Bank Account Number (BBAN) Identifier.  This data element can be used in the body of the consent request.   Message for retrieving account access consent from this account. This   data elements is used for payment accounts which have no IBAN.   ISO20022: Basic Bank Account Number (BBAN).       Identifier used nationally by financial institutions, i.e., in individual countries,    generally as part of a National Account Numbering Scheme(s),    which uniquely identifies the account of a customer. 

        :return: The bban of this AccountDetails.
        :rtype: str
        """
        return self._bban

    @bban.setter
    def bban(self, bban):
        """Sets the bban of this AccountDetails.

        Basic Bank Account Number (BBAN) Identifier.  This data element can be used in the body of the consent request.   Message for retrieving account access consent from this account. This   data elements is used for payment accounts which have no IBAN.   ISO20022: Basic Bank Account Number (BBAN).       Identifier used nationally by financial institutions, i.e., in individual countries,    generally as part of a National Account Numbering Scheme(s),    which uniquely identifies the account of a customer. 

        :param bban: The bban of this AccountDetails.
        :type bban: str
        """
        if bban is not None and not re.search(r'[a-zA-Z0-9]{1,30}', bban):
            raise ValueError("Invalid value for `bban`, must be a follow pattern or equal to `/[a-zA-Z0-9]{1,30}/`")

        self._bban = bban

    @property
    def bic(self):
        """Gets the bic of this AccountDetails.

        BICFI 

        :return: The bic of this AccountDetails.
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this AccountDetails.

        BICFI 

        :param bic: The bic of this AccountDetails.
        :type bic: str
        """
        if bic is not None and not re.search(r'[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}', bic):
            raise ValueError("Invalid value for `bic`, must be a follow pattern or equal to `/[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/`")

        self._bic = bic

    @property
    def cash_account_type(self):
        """Gets the cash_account_type of this AccountDetails.

        ExternalCashAccountType1Code from ISO 20022. 

        :return: The cash_account_type of this AccountDetails.
        :rtype: str
        """
        return self._cash_account_type

    @cash_account_type.setter
    def cash_account_type(self, cash_account_type):
        """Sets the cash_account_type of this AccountDetails.

        ExternalCashAccountType1Code from ISO 20022. 

        :param cash_account_type: The cash_account_type of this AccountDetails.
        :type cash_account_type: str
        """

        self._cash_account_type = cash_account_type

    @property
    def currency(self):
        """Gets the currency of this AccountDetails.

        ISO 4217 Alpha 3 currency code. 

        :return: The currency of this AccountDetails.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountDetails.

        ISO 4217 Alpha 3 currency code. 

        :param currency: The currency of this AccountDetails.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and not re.search(r'[A-Z]{3}', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/[A-Z]{3}/`")

        self._currency = currency

    @property
    def details(self):
        """Gets the details of this AccountDetails.

        Specifications that might be provided by the ASPSP:   - characteristics of the account   - characteristics of the relevant card 

        :return: The details of this AccountDetails.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this AccountDetails.

        Specifications that might be provided by the ASPSP:   - characteristics of the account   - characteristics of the relevant card 

        :param details: The details of this AccountDetails.
        :type details: str
        """
        if details is not None and len(details) > 500:
            raise ValueError("Invalid value for `details`, length must be less than or equal to `500`")

        self._details = details

    @property
    def display_name(self):
        """Gets the display_name of this AccountDetails.

        Name of the account as defined by the PSU within online channels. 

        :return: The display_name of this AccountDetails.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AccountDetails.

        Name of the account as defined by the PSU within online channels. 

        :param display_name: The display_name of this AccountDetails.
        :type display_name: str
        """
        if display_name is not None and len(display_name) > 70:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `70`")

        self._display_name = display_name

    @property
    def iban(self):
        """Gets the iban of this AccountDetails.

        IBAN of an account.

        :return: The iban of this AccountDetails.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this AccountDetails.

        IBAN of an account.

        :param iban: The iban of this AccountDetails.
        :type iban: str
        """
        if iban is not None and not re.search(r'[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}', iban):
            raise ValueError("Invalid value for `iban`, must be a follow pattern or equal to `/[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/`")

        self._iban = iban

    @property
    def linked_accounts(self):
        """Gets the linked_accounts of this AccountDetails.

        Case of a set of pending card transactions, the APSP will provide the relevant cash account the card is set up on.

        :return: The linked_accounts of this AccountDetails.
        :rtype: str
        """
        return self._linked_accounts

    @linked_accounts.setter
    def linked_accounts(self, linked_accounts):
        """Sets the linked_accounts of this AccountDetails.

        Case of a set of pending card transactions, the APSP will provide the relevant cash account the card is set up on.

        :param linked_accounts: The linked_accounts of this AccountDetails.
        :type linked_accounts: str
        """
        if linked_accounts is not None and len(linked_accounts) > 70:
            raise ValueError("Invalid value for `linked_accounts`, length must be less than or equal to `70`")

        self._linked_accounts = linked_accounts

    @property
    def msisdn(self):
        """Gets the msisdn of this AccountDetails.

        Mobile phone number.

        :return: The msisdn of this AccountDetails.
        :rtype: str
        """
        return self._msisdn

    @msisdn.setter
    def msisdn(self, msisdn):
        """Sets the msisdn of this AccountDetails.

        Mobile phone number.

        :param msisdn: The msisdn of this AccountDetails.
        :type msisdn: str
        """
        if msisdn is not None and len(msisdn) > 35:
            raise ValueError("Invalid value for `msisdn`, length must be less than or equal to `35`")

        self._msisdn = msisdn

    @property
    def name(self):
        """Gets the name of this AccountDetails.

        Name of the account, as assigned by the ASPSP, in agreement with the account owner in order to provide an additional means of identification of the account.

        :return: The name of this AccountDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountDetails.

        Name of the account, as assigned by the ASPSP, in agreement with the account owner in order to provide an additional means of identification of the account.

        :param name: The name of this AccountDetails.
        :type name: str
        """
        if name is not None and len(name) > 70:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `70`")

        self._name = name

    @property
    def owner_name(self):
        """Gets the owner_name of this AccountDetails.

        Name of the legal account owner.  If there is more than one owner, then e.g. two names might be noted here.  For a corporate account, the corporate name is used for this attribute. Even if supported by the ASPSP, the provision of this field might depend on the fact whether an explicit consent to this specific additional account information has been given by the PSU. 

        :return: The owner_name of this AccountDetails.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this AccountDetails.

        Name of the legal account owner.  If there is more than one owner, then e.g. two names might be noted here.  For a corporate account, the corporate name is used for this attribute. Even if supported by the ASPSP, the provision of this field might depend on the fact whether an explicit consent to this specific additional account information has been given by the PSU. 

        :param owner_name: The owner_name of this AccountDetails.
        :type owner_name: str
        """
        if owner_name is not None and len(owner_name) > 140:
            raise ValueError("Invalid value for `owner_name`, length must be less than or equal to `140`")

        self._owner_name = owner_name

    @property
    def product(self):
        """Gets the product of this AccountDetails.

        Product name of the bank for this account, proprietary definition.

        :return: The product of this AccountDetails.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this AccountDetails.

        Product name of the bank for this account, proprietary definition.

        :param product: The product of this AccountDetails.
        :type product: str
        """
        if product is not None and len(product) > 35:
            raise ValueError("Invalid value for `product`, length must be less than or equal to `35`")

        self._product = product

    @property
    def resource_id(self):
        """Gets the resource_id of this AccountDetails.

        This shall be filled, if addressable resource are created by the ASPSP on the /accounts or /card-accounts endpoint.

        :return: The resource_id of this AccountDetails.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this AccountDetails.

        This shall be filled, if addressable resource are created by the ASPSP on the /accounts or /card-accounts endpoint.

        :param resource_id: The resource_id of this AccountDetails.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def status(self):
        """Gets the status of this AccountDetails.


        :return: The status of this AccountDetails.
        :rtype: AccountStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountDetails.


        :param status: The status of this AccountDetails.
        :type status: AccountStatus
        """

        self._status = status

    @property
    def usage(self):
        """Gets the usage of this AccountDetails.

        Specifies the usage of the account:   * PRIV: private personal account   * ORGA: professional account 

        :return: The usage of this AccountDetails.
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this AccountDetails.

        Specifies the usage of the account:   * PRIV: private personal account   * ORGA: professional account 

        :param usage: The usage of this AccountDetails.
        :type usage: str
        """
        allowed_values = ["PRIV", "ORGA"]  # noqa: E501
        if usage not in allowed_values:
            raise ValueError(
                "Invalid value for `usage` ({0}), must be one of {1}"
                .format(usage, allowed_values)
            )

        self._usage = usage
