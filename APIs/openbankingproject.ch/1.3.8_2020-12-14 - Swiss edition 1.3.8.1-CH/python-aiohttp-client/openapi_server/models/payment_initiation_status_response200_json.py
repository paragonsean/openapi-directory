# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction_status import TransactionStatus
from openapi_server import util


class PaymentInitiationStatusResponse200Json(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, funds_available: bool=None, psu_message: str=None, transaction_status: TransactionStatus=None):
        """PaymentInitiationStatusResponse200Json - a model defined in OpenAPI

        :param funds_available: The funds_available of this PaymentInitiationStatusResponse200Json.
        :param psu_message: The psu_message of this PaymentInitiationStatusResponse200Json.
        :param transaction_status: The transaction_status of this PaymentInitiationStatusResponse200Json.
        """
        self.openapi_types = {
            'funds_available': bool,
            'psu_message': str,
            'transaction_status': TransactionStatus
        }

        self.attribute_map = {
            'funds_available': 'fundsAvailable',
            'psu_message': 'psuMessage',
            'transaction_status': 'transactionStatus'
        }

        self._funds_available = funds_available
        self._psu_message = psu_message
        self._transaction_status = transaction_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentInitiationStatusResponse200Json':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The paymentInitiationStatusResponse-200_json of this PaymentInitiationStatusResponse200Json.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def funds_available(self):
        """Gets the funds_available of this PaymentInitiationStatusResponse200Json.

        Equals true if sufficient funds are available at the time of the request, false otherwise.  This datalemenet is allways contained in a confirmation of funds response.  This data element is contained in a payment status response,  if supported by the ASPSP, if a funds check has been performed and  if the transactionStatus is \"ACTC\", \"ACWC\" or \"ACCP\". 

        :return: The funds_available of this PaymentInitiationStatusResponse200Json.
        :rtype: bool
        """
        return self._funds_available

    @funds_available.setter
    def funds_available(self, funds_available):
        """Sets the funds_available of this PaymentInitiationStatusResponse200Json.

        Equals true if sufficient funds are available at the time of the request, false otherwise.  This datalemenet is allways contained in a confirmation of funds response.  This data element is contained in a payment status response,  if supported by the ASPSP, if a funds check has been performed and  if the transactionStatus is \"ACTC\", \"ACWC\" or \"ACCP\". 

        :param funds_available: The funds_available of this PaymentInitiationStatusResponse200Json.
        :type funds_available: bool
        """

        self._funds_available = funds_available

    @property
    def psu_message(self):
        """Gets the psu_message of this PaymentInitiationStatusResponse200Json.

        Text to be displayed to the PSU.

        :return: The psu_message of this PaymentInitiationStatusResponse200Json.
        :rtype: str
        """
        return self._psu_message

    @psu_message.setter
    def psu_message(self, psu_message):
        """Sets the psu_message of this PaymentInitiationStatusResponse200Json.

        Text to be displayed to the PSU.

        :param psu_message: The psu_message of this PaymentInitiationStatusResponse200Json.
        :type psu_message: str
        """
        if psu_message is not None and len(psu_message) > 500:
            raise ValueError("Invalid value for `psu_message`, length must be less than or equal to `500`")

        self._psu_message = psu_message

    @property
    def transaction_status(self):
        """Gets the transaction_status of this PaymentInitiationStatusResponse200Json.


        :return: The transaction_status of this PaymentInitiationStatusResponse200Json.
        :rtype: TransactionStatus
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this PaymentInitiationStatusResponse200Json.


        :param transaction_status: The transaction_status of this PaymentInitiationStatusResponse200Json.
        :type transaction_status: TransactionStatus
        """
        if transaction_status is None:
            raise ValueError("Invalid value for `transaction_status`, must not be `None`")

        self._transaction_status = transaction_status
