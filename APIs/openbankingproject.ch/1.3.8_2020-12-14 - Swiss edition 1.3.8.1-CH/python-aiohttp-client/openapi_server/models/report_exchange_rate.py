# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ReportExchangeRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contract_identification: str=None, exchange_rate: str=None, quotation_date: date=None, source_currency: str=None, target_currency: str=None, unit_currency: str=None):
        """ReportExchangeRate - a model defined in OpenAPI

        :param contract_identification: The contract_identification of this ReportExchangeRate.
        :param exchange_rate: The exchange_rate of this ReportExchangeRate.
        :param quotation_date: The quotation_date of this ReportExchangeRate.
        :param source_currency: The source_currency of this ReportExchangeRate.
        :param target_currency: The target_currency of this ReportExchangeRate.
        :param unit_currency: The unit_currency of this ReportExchangeRate.
        """
        self.openapi_types = {
            'contract_identification': str,
            'exchange_rate': str,
            'quotation_date': date,
            'source_currency': str,
            'target_currency': str,
            'unit_currency': str
        }

        self.attribute_map = {
            'contract_identification': 'contractIdentification',
            'exchange_rate': 'exchangeRate',
            'quotation_date': 'quotationDate',
            'source_currency': 'sourceCurrency',
            'target_currency': 'targetCurrency',
            'unit_currency': 'unitCurrency'
        }

        self._contract_identification = contract_identification
        self._exchange_rate = exchange_rate
        self._quotation_date = quotation_date
        self._source_currency = source_currency
        self._target_currency = target_currency
        self._unit_currency = unit_currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportExchangeRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reportExchangeRate of this ReportExchangeRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contract_identification(self):
        """Gets the contract_identification of this ReportExchangeRate.


        :return: The contract_identification of this ReportExchangeRate.
        :rtype: str
        """
        return self._contract_identification

    @contract_identification.setter
    def contract_identification(self, contract_identification):
        """Sets the contract_identification of this ReportExchangeRate.


        :param contract_identification: The contract_identification of this ReportExchangeRate.
        :type contract_identification: str
        """

        self._contract_identification = contract_identification

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this ReportExchangeRate.


        :return: The exchange_rate of this ReportExchangeRate.
        :rtype: str
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this ReportExchangeRate.


        :param exchange_rate: The exchange_rate of this ReportExchangeRate.
        :type exchange_rate: str
        """
        if exchange_rate is None:
            raise ValueError("Invalid value for `exchange_rate`, must not be `None`")

        self._exchange_rate = exchange_rate

    @property
    def quotation_date(self):
        """Gets the quotation_date of this ReportExchangeRate.


        :return: The quotation_date of this ReportExchangeRate.
        :rtype: date
        """
        return self._quotation_date

    @quotation_date.setter
    def quotation_date(self, quotation_date):
        """Sets the quotation_date of this ReportExchangeRate.


        :param quotation_date: The quotation_date of this ReportExchangeRate.
        :type quotation_date: date
        """
        if quotation_date is None:
            raise ValueError("Invalid value for `quotation_date`, must not be `None`")

        self._quotation_date = quotation_date

    @property
    def source_currency(self):
        """Gets the source_currency of this ReportExchangeRate.

        ISO 4217 Alpha 3 currency code. 

        :return: The source_currency of this ReportExchangeRate.
        :rtype: str
        """
        return self._source_currency

    @source_currency.setter
    def source_currency(self, source_currency):
        """Sets the source_currency of this ReportExchangeRate.

        ISO 4217 Alpha 3 currency code. 

        :param source_currency: The source_currency of this ReportExchangeRate.
        :type source_currency: str
        """
        if source_currency is None:
            raise ValueError("Invalid value for `source_currency`, must not be `None`")
        if source_currency is not None and not re.search(r'[A-Z]{3}', source_currency):
            raise ValueError("Invalid value for `source_currency`, must be a follow pattern or equal to `/[A-Z]{3}/`")

        self._source_currency = source_currency

    @property
    def target_currency(self):
        """Gets the target_currency of this ReportExchangeRate.

        ISO 4217 Alpha 3 currency code. 

        :return: The target_currency of this ReportExchangeRate.
        :rtype: str
        """
        return self._target_currency

    @target_currency.setter
    def target_currency(self, target_currency):
        """Sets the target_currency of this ReportExchangeRate.

        ISO 4217 Alpha 3 currency code. 

        :param target_currency: The target_currency of this ReportExchangeRate.
        :type target_currency: str
        """
        if target_currency is None:
            raise ValueError("Invalid value for `target_currency`, must not be `None`")
        if target_currency is not None and not re.search(r'[A-Z]{3}', target_currency):
            raise ValueError("Invalid value for `target_currency`, must be a follow pattern or equal to `/[A-Z]{3}/`")

        self._target_currency = target_currency

    @property
    def unit_currency(self):
        """Gets the unit_currency of this ReportExchangeRate.


        :return: The unit_currency of this ReportExchangeRate.
        :rtype: str
        """
        return self._unit_currency

    @unit_currency.setter
    def unit_currency(self, unit_currency):
        """Sets the unit_currency of this ReportExchangeRate.


        :param unit_currency: The unit_currency of this ReportExchangeRate.
        :type unit_currency: str
        """
        if unit_currency is None:
            raise ValueError("Invalid value for `unit_currency`, must not be `None`")

        self._unit_currency = unit_currency
