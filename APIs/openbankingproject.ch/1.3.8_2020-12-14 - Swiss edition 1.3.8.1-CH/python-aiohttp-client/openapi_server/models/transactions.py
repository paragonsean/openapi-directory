# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_reference16_ch import AccountReference16CH
from openapi_server.models.additional_information_structured import AdditionalInformationStructured
from openapi_server.models.amount import Amount
from openapi_server.models.balance import Balance
from openapi_server.models.entry_details_element import EntryDetailsElement
from openapi_server.models.links_transaction_details import LinksTransactionDetails
from openapi_server.models.purpose_code import PurposeCode
from openapi_server.models.remittance_information_structured import RemittanceInformationStructured
from openapi_server.models.report_exchange_rate import ReportExchangeRate
import re
from openapi_server import util


class Transactions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: LinksTransactionDetails=None, additional_information: str=None, additional_information_structured: AdditionalInformationStructured=None, balance_after_transaction: Balance=None, bank_transaction_code: str=None, batch_indicator: bool=None, batch_number_of_transactions: int=None, booking_date: date=None, check_id: str=None, creditor_account: AccountReference16CH=None, creditor_agent: str=None, creditor_id: str=None, creditor_name: str=None, currency_exchange: List[ReportExchangeRate]=None, debtor_account: AccountReference16CH=None, debtor_agent: str=None, debtor_name: str=None, end_to_end_id: str=None, entry_details: List[EntryDetailsElement]=None, entry_reference: str=None, mandate_id: str=None, proprietary_bank_transaction_code: str=None, purpose_code: PurposeCode=None, remittance_information_structured: str=None, remittance_information_structured_array: List[RemittanceInformationStructured]=None, remittance_information_unstructured: str=None, remittance_information_unstructured_array: List[str]=None, transaction_amount: Amount=None, transaction_id: str=None, ultimate_creditor: str=None, ultimate_debtor: str=None, value_date: date=None):
        """Transactions - a model defined in OpenAPI

        :param links: The links of this Transactions.
        :param additional_information: The additional_information of this Transactions.
        :param additional_information_structured: The additional_information_structured of this Transactions.
        :param balance_after_transaction: The balance_after_transaction of this Transactions.
        :param bank_transaction_code: The bank_transaction_code of this Transactions.
        :param batch_indicator: The batch_indicator of this Transactions.
        :param batch_number_of_transactions: The batch_number_of_transactions of this Transactions.
        :param booking_date: The booking_date of this Transactions.
        :param check_id: The check_id of this Transactions.
        :param creditor_account: The creditor_account of this Transactions.
        :param creditor_agent: The creditor_agent of this Transactions.
        :param creditor_id: The creditor_id of this Transactions.
        :param creditor_name: The creditor_name of this Transactions.
        :param currency_exchange: The currency_exchange of this Transactions.
        :param debtor_account: The debtor_account of this Transactions.
        :param debtor_agent: The debtor_agent of this Transactions.
        :param debtor_name: The debtor_name of this Transactions.
        :param end_to_end_id: The end_to_end_id of this Transactions.
        :param entry_details: The entry_details of this Transactions.
        :param entry_reference: The entry_reference of this Transactions.
        :param mandate_id: The mandate_id of this Transactions.
        :param proprietary_bank_transaction_code: The proprietary_bank_transaction_code of this Transactions.
        :param purpose_code: The purpose_code of this Transactions.
        :param remittance_information_structured: The remittance_information_structured of this Transactions.
        :param remittance_information_structured_array: The remittance_information_structured_array of this Transactions.
        :param remittance_information_unstructured: The remittance_information_unstructured of this Transactions.
        :param remittance_information_unstructured_array: The remittance_information_unstructured_array of this Transactions.
        :param transaction_amount: The transaction_amount of this Transactions.
        :param transaction_id: The transaction_id of this Transactions.
        :param ultimate_creditor: The ultimate_creditor of this Transactions.
        :param ultimate_debtor: The ultimate_debtor of this Transactions.
        :param value_date: The value_date of this Transactions.
        """
        self.openapi_types = {
            'links': LinksTransactionDetails,
            'additional_information': str,
            'additional_information_structured': AdditionalInformationStructured,
            'balance_after_transaction': Balance,
            'bank_transaction_code': str,
            'batch_indicator': bool,
            'batch_number_of_transactions': int,
            'booking_date': date,
            'check_id': str,
            'creditor_account': AccountReference16CH,
            'creditor_agent': str,
            'creditor_id': str,
            'creditor_name': str,
            'currency_exchange': List[ReportExchangeRate],
            'debtor_account': AccountReference16CH,
            'debtor_agent': str,
            'debtor_name': str,
            'end_to_end_id': str,
            'entry_details': List[EntryDetailsElement],
            'entry_reference': str,
            'mandate_id': str,
            'proprietary_bank_transaction_code': str,
            'purpose_code': PurposeCode,
            'remittance_information_structured': str,
            'remittance_information_structured_array': List[RemittanceInformationStructured],
            'remittance_information_unstructured': str,
            'remittance_information_unstructured_array': List[str],
            'transaction_amount': Amount,
            'transaction_id': str,
            'ultimate_creditor': str,
            'ultimate_debtor': str,
            'value_date': date
        }

        self.attribute_map = {
            'links': '_links',
            'additional_information': 'additionalInformation',
            'additional_information_structured': 'additionalInformationStructured',
            'balance_after_transaction': 'balanceAfterTransaction',
            'bank_transaction_code': 'bankTransactionCode',
            'batch_indicator': 'batchIndicator',
            'batch_number_of_transactions': 'batchNumberOfTransactions',
            'booking_date': 'bookingDate',
            'check_id': 'checkId',
            'creditor_account': 'creditorAccount',
            'creditor_agent': 'creditorAgent',
            'creditor_id': 'creditorId',
            'creditor_name': 'creditorName',
            'currency_exchange': 'currencyExchange',
            'debtor_account': 'debtorAccount',
            'debtor_agent': 'debtorAgent',
            'debtor_name': 'debtorName',
            'end_to_end_id': 'endToEndId',
            'entry_details': 'entryDetails',
            'entry_reference': 'entryReference',
            'mandate_id': 'mandateId',
            'proprietary_bank_transaction_code': 'proprietaryBankTransactionCode',
            'purpose_code': 'purposeCode',
            'remittance_information_structured': 'remittanceInformationStructured',
            'remittance_information_structured_array': 'remittanceInformationStructuredArray',
            'remittance_information_unstructured': 'remittanceInformationUnstructured',
            'remittance_information_unstructured_array': 'remittanceInformationUnstructuredArray',
            'transaction_amount': 'transactionAmount',
            'transaction_id': 'transactionId',
            'ultimate_creditor': 'ultimateCreditor',
            'ultimate_debtor': 'ultimateDebtor',
            'value_date': 'valueDate'
        }

        self._links = links
        self._additional_information = additional_information
        self._additional_information_structured = additional_information_structured
        self._balance_after_transaction = balance_after_transaction
        self._bank_transaction_code = bank_transaction_code
        self._batch_indicator = batch_indicator
        self._batch_number_of_transactions = batch_number_of_transactions
        self._booking_date = booking_date
        self._check_id = check_id
        self._creditor_account = creditor_account
        self._creditor_agent = creditor_agent
        self._creditor_id = creditor_id
        self._creditor_name = creditor_name
        self._currency_exchange = currency_exchange
        self._debtor_account = debtor_account
        self._debtor_agent = debtor_agent
        self._debtor_name = debtor_name
        self._end_to_end_id = end_to_end_id
        self._entry_details = entry_details
        self._entry_reference = entry_reference
        self._mandate_id = mandate_id
        self._proprietary_bank_transaction_code = proprietary_bank_transaction_code
        self._purpose_code = purpose_code
        self._remittance_information_structured = remittance_information_structured
        self._remittance_information_structured_array = remittance_information_structured_array
        self._remittance_information_unstructured = remittance_information_unstructured
        self._remittance_information_unstructured_array = remittance_information_unstructured_array
        self._transaction_amount = transaction_amount
        self._transaction_id = transaction_id
        self._ultimate_creditor = ultimate_creditor
        self._ultimate_debtor = ultimate_debtor
        self._value_date = value_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transactions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The transactions of this Transactions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this Transactions.


        :return: The links of this Transactions.
        :rtype: LinksTransactionDetails
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Transactions.


        :param links: The links of this Transactions.
        :type links: LinksTransactionDetails
        """

        self._links = links

    @property
    def additional_information(self):
        """Gets the additional_information of this Transactions.

        Might be used by the ASPSP to transport additional transaction related information to the PSU 

        :return: The additional_information of this Transactions.
        :rtype: str
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this Transactions.

        Might be used by the ASPSP to transport additional transaction related information to the PSU 

        :param additional_information: The additional_information of this Transactions.
        :type additional_information: str
        """
        if additional_information is not None and len(additional_information) > 500:
            raise ValueError("Invalid value for `additional_information`, length must be less than or equal to `500`")

        self._additional_information = additional_information

    @property
    def additional_information_structured(self):
        """Gets the additional_information_structured of this Transactions.


        :return: The additional_information_structured of this Transactions.
        :rtype: AdditionalInformationStructured
        """
        return self._additional_information_structured

    @additional_information_structured.setter
    def additional_information_structured(self, additional_information_structured):
        """Sets the additional_information_structured of this Transactions.


        :param additional_information_structured: The additional_information_structured of this Transactions.
        :type additional_information_structured: AdditionalInformationStructured
        """

        self._additional_information_structured = additional_information_structured

    @property
    def balance_after_transaction(self):
        """Gets the balance_after_transaction of this Transactions.


        :return: The balance_after_transaction of this Transactions.
        :rtype: Balance
        """
        return self._balance_after_transaction

    @balance_after_transaction.setter
    def balance_after_transaction(self, balance_after_transaction):
        """Sets the balance_after_transaction of this Transactions.


        :param balance_after_transaction: The balance_after_transaction of this Transactions.
        :type balance_after_transaction: Balance
        """

        self._balance_after_transaction = balance_after_transaction

    @property
    def bank_transaction_code(self):
        """Gets the bank_transaction_code of this Transactions.

        Bank transaction code as used by the ASPSP and using the sub elements of this structured code defined by ISO 20022.  This code type is concatenating the three ISO20022 Codes   * Domain Code,   * Family Code, and   * SubFamiliy Code by hyphens, resulting in 'DomainCode'-'FamilyCode'-'SubFamilyCode'. 

        :return: The bank_transaction_code of this Transactions.
        :rtype: str
        """
        return self._bank_transaction_code

    @bank_transaction_code.setter
    def bank_transaction_code(self, bank_transaction_code):
        """Sets the bank_transaction_code of this Transactions.

        Bank transaction code as used by the ASPSP and using the sub elements of this structured code defined by ISO 20022.  This code type is concatenating the three ISO20022 Codes   * Domain Code,   * Family Code, and   * SubFamiliy Code by hyphens, resulting in 'DomainCode'-'FamilyCode'-'SubFamilyCode'. 

        :param bank_transaction_code: The bank_transaction_code of this Transactions.
        :type bank_transaction_code: str
        """

        self._bank_transaction_code = bank_transaction_code

    @property
    def batch_indicator(self):
        """Gets the batch_indicator of this Transactions.

        If this indicator equals true, then the related entry is a batch entry. 

        :return: The batch_indicator of this Transactions.
        :rtype: bool
        """
        return self._batch_indicator

    @batch_indicator.setter
    def batch_indicator(self, batch_indicator):
        """Sets the batch_indicator of this Transactions.

        If this indicator equals true, then the related entry is a batch entry. 

        :param batch_indicator: The batch_indicator of this Transactions.
        :type batch_indicator: bool
        """

        self._batch_indicator = batch_indicator

    @property
    def batch_number_of_transactions(self):
        """Gets the batch_number_of_transactions of this Transactions.

        Shall be used if and only if the batchIndicator is contained and equals true. 

        :return: The batch_number_of_transactions of this Transactions.
        :rtype: int
        """
        return self._batch_number_of_transactions

    @batch_number_of_transactions.setter
    def batch_number_of_transactions(self, batch_number_of_transactions):
        """Sets the batch_number_of_transactions of this Transactions.

        Shall be used if and only if the batchIndicator is contained and equals true. 

        :param batch_number_of_transactions: The batch_number_of_transactions of this Transactions.
        :type batch_number_of_transactions: int
        """

        self._batch_number_of_transactions = batch_number_of_transactions

    @property
    def booking_date(self):
        """Gets the booking_date of this Transactions.

        The date when an entry is posted to an account on the ASPSPs books. 

        :return: The booking_date of this Transactions.
        :rtype: date
        """
        return self._booking_date

    @booking_date.setter
    def booking_date(self, booking_date):
        """Sets the booking_date of this Transactions.

        The date when an entry is posted to an account on the ASPSPs books. 

        :param booking_date: The booking_date of this Transactions.
        :type booking_date: date
        """

        self._booking_date = booking_date

    @property
    def check_id(self):
        """Gets the check_id of this Transactions.

        Identification of a Cheque.

        :return: The check_id of this Transactions.
        :rtype: str
        """
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Sets the check_id of this Transactions.

        Identification of a Cheque.

        :param check_id: The check_id of this Transactions.
        :type check_id: str
        """
        if check_id is not None and len(check_id) > 35:
            raise ValueError("Invalid value for `check_id`, length must be less than or equal to `35`")

        self._check_id = check_id

    @property
    def creditor_account(self):
        """Gets the creditor_account of this Transactions.


        :return: The creditor_account of this Transactions.
        :rtype: AccountReference16CH
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this Transactions.


        :param creditor_account: The creditor_account of this Transactions.
        :type creditor_account: AccountReference16CH
        """

        self._creditor_account = creditor_account

    @property
    def creditor_agent(self):
        """Gets the creditor_agent of this Transactions.

        BICFI 

        :return: The creditor_agent of this Transactions.
        :rtype: str
        """
        return self._creditor_agent

    @creditor_agent.setter
    def creditor_agent(self, creditor_agent):
        """Sets the creditor_agent of this Transactions.

        BICFI 

        :param creditor_agent: The creditor_agent of this Transactions.
        :type creditor_agent: str
        """
        if creditor_agent is not None and not re.search(r'[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}', creditor_agent):
            raise ValueError("Invalid value for `creditor_agent`, must be a follow pattern or equal to `/[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/`")

        self._creditor_agent = creditor_agent

    @property
    def creditor_id(self):
        """Gets the creditor_id of this Transactions.

        Identification of Creditors, e.g. a SEPA Creditor ID.

        :return: The creditor_id of this Transactions.
        :rtype: str
        """
        return self._creditor_id

    @creditor_id.setter
    def creditor_id(self, creditor_id):
        """Sets the creditor_id of this Transactions.

        Identification of Creditors, e.g. a SEPA Creditor ID.

        :param creditor_id: The creditor_id of this Transactions.
        :type creditor_id: str
        """
        if creditor_id is not None and len(creditor_id) > 35:
            raise ValueError("Invalid value for `creditor_id`, length must be less than or equal to `35`")

        self._creditor_id = creditor_id

    @property
    def creditor_name(self):
        """Gets the creditor_name of this Transactions.

        Creditor name.

        :return: The creditor_name of this Transactions.
        :rtype: str
        """
        return self._creditor_name

    @creditor_name.setter
    def creditor_name(self, creditor_name):
        """Sets the creditor_name of this Transactions.

        Creditor name.

        :param creditor_name: The creditor_name of this Transactions.
        :type creditor_name: str
        """
        if creditor_name is not None and len(creditor_name) > 70:
            raise ValueError("Invalid value for `creditor_name`, length must be less than or equal to `70`")

        self._creditor_name = creditor_name

    @property
    def currency_exchange(self):
        """Gets the currency_exchange of this Transactions.

        Array of exchange rates.

        :return: The currency_exchange of this Transactions.
        :rtype: List[ReportExchangeRate]
        """
        return self._currency_exchange

    @currency_exchange.setter
    def currency_exchange(self, currency_exchange):
        """Sets the currency_exchange of this Transactions.

        Array of exchange rates.

        :param currency_exchange: The currency_exchange of this Transactions.
        :type currency_exchange: List[ReportExchangeRate]
        """

        self._currency_exchange = currency_exchange

    @property
    def debtor_account(self):
        """Gets the debtor_account of this Transactions.


        :return: The debtor_account of this Transactions.
        :rtype: AccountReference16CH
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this Transactions.


        :param debtor_account: The debtor_account of this Transactions.
        :type debtor_account: AccountReference16CH
        """

        self._debtor_account = debtor_account

    @property
    def debtor_agent(self):
        """Gets the debtor_agent of this Transactions.

        BICFI 

        :return: The debtor_agent of this Transactions.
        :rtype: str
        """
        return self._debtor_agent

    @debtor_agent.setter
    def debtor_agent(self, debtor_agent):
        """Sets the debtor_agent of this Transactions.

        BICFI 

        :param debtor_agent: The debtor_agent of this Transactions.
        :type debtor_agent: str
        """
        if debtor_agent is not None and not re.search(r'[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}', debtor_agent):
            raise ValueError("Invalid value for `debtor_agent`, must be a follow pattern or equal to `/[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/`")

        self._debtor_agent = debtor_agent

    @property
    def debtor_name(self):
        """Gets the debtor_name of this Transactions.

        Debtor name.

        :return: The debtor_name of this Transactions.
        :rtype: str
        """
        return self._debtor_name

    @debtor_name.setter
    def debtor_name(self, debtor_name):
        """Sets the debtor_name of this Transactions.

        Debtor name.

        :param debtor_name: The debtor_name of this Transactions.
        :type debtor_name: str
        """
        if debtor_name is not None and len(debtor_name) > 70:
            raise ValueError("Invalid value for `debtor_name`, length must be less than or equal to `70`")

        self._debtor_name = debtor_name

    @property
    def end_to_end_id(self):
        """Gets the end_to_end_id of this Transactions.

        Unique end to end identity.

        :return: The end_to_end_id of this Transactions.
        :rtype: str
        """
        return self._end_to_end_id

    @end_to_end_id.setter
    def end_to_end_id(self, end_to_end_id):
        """Sets the end_to_end_id of this Transactions.

        Unique end to end identity.

        :param end_to_end_id: The end_to_end_id of this Transactions.
        :type end_to_end_id: str
        """
        if end_to_end_id is not None and len(end_to_end_id) > 35:
            raise ValueError("Invalid value for `end_to_end_id`, length must be less than or equal to `35`")

        self._end_to_end_id = end_to_end_id

    @property
    def entry_details(self):
        """Gets the entry_details of this Transactions.

        Might be used by the ASPSP to transport details about transactions within a batch. 

        :return: The entry_details of this Transactions.
        :rtype: List[EntryDetailsElement]
        """
        return self._entry_details

    @entry_details.setter
    def entry_details(self, entry_details):
        """Sets the entry_details of this Transactions.

        Might be used by the ASPSP to transport details about transactions within a batch. 

        :param entry_details: The entry_details of this Transactions.
        :type entry_details: List[EntryDetailsElement]
        """

        self._entry_details = entry_details

    @property
    def entry_reference(self):
        """Gets the entry_reference of this Transactions.

        Is the identification of the transaction as used e.g. for reference for deltafunction on application level. The same identification as for example used within camt.05x messages. 

        :return: The entry_reference of this Transactions.
        :rtype: str
        """
        return self._entry_reference

    @entry_reference.setter
    def entry_reference(self, entry_reference):
        """Sets the entry_reference of this Transactions.

        Is the identification of the transaction as used e.g. for reference for deltafunction on application level. The same identification as for example used within camt.05x messages. 

        :param entry_reference: The entry_reference of this Transactions.
        :type entry_reference: str
        """
        if entry_reference is not None and len(entry_reference) > 35:
            raise ValueError("Invalid value for `entry_reference`, length must be less than or equal to `35`")

        self._entry_reference = entry_reference

    @property
    def mandate_id(self):
        """Gets the mandate_id of this Transactions.

        Identification of Mandates, e.g. a SEPA Mandate ID.

        :return: The mandate_id of this Transactions.
        :rtype: str
        """
        return self._mandate_id

    @mandate_id.setter
    def mandate_id(self, mandate_id):
        """Sets the mandate_id of this Transactions.

        Identification of Mandates, e.g. a SEPA Mandate ID.

        :param mandate_id: The mandate_id of this Transactions.
        :type mandate_id: str
        """
        if mandate_id is not None and len(mandate_id) > 35:
            raise ValueError("Invalid value for `mandate_id`, length must be less than or equal to `35`")

        self._mandate_id = mandate_id

    @property
    def proprietary_bank_transaction_code(self):
        """Gets the proprietary_bank_transaction_code of this Transactions.

        Proprietary bank transaction code as used within a community or within an ASPSP e.g. for MT94x based transaction reports. 

        :return: The proprietary_bank_transaction_code of this Transactions.
        :rtype: str
        """
        return self._proprietary_bank_transaction_code

    @proprietary_bank_transaction_code.setter
    def proprietary_bank_transaction_code(self, proprietary_bank_transaction_code):
        """Sets the proprietary_bank_transaction_code of this Transactions.

        Proprietary bank transaction code as used within a community or within an ASPSP e.g. for MT94x based transaction reports. 

        :param proprietary_bank_transaction_code: The proprietary_bank_transaction_code of this Transactions.
        :type proprietary_bank_transaction_code: str
        """
        if proprietary_bank_transaction_code is not None and len(proprietary_bank_transaction_code) > 35:
            raise ValueError("Invalid value for `proprietary_bank_transaction_code`, length must be less than or equal to `35`")

        self._proprietary_bank_transaction_code = proprietary_bank_transaction_code

    @property
    def purpose_code(self):
        """Gets the purpose_code of this Transactions.


        :return: The purpose_code of this Transactions.
        :rtype: PurposeCode
        """
        return self._purpose_code

    @purpose_code.setter
    def purpose_code(self, purpose_code):
        """Sets the purpose_code of this Transactions.


        :param purpose_code: The purpose_code of this Transactions.
        :type purpose_code: PurposeCode
        """

        self._purpose_code = purpose_code

    @property
    def remittance_information_structured(self):
        """Gets the remittance_information_structured of this Transactions.

        Structured remittance information Max 

        :return: The remittance_information_structured of this Transactions.
        :rtype: str
        """
        return self._remittance_information_structured

    @remittance_information_structured.setter
    def remittance_information_structured(self, remittance_information_structured):
        """Sets the remittance_information_structured of this Transactions.

        Structured remittance information Max 

        :param remittance_information_structured: The remittance_information_structured of this Transactions.
        :type remittance_information_structured: str
        """
        if remittance_information_structured is not None and len(remittance_information_structured) > 140:
            raise ValueError("Invalid value for `remittance_information_structured`, length must be less than or equal to `140`")

        self._remittance_information_structured = remittance_information_structured

    @property
    def remittance_information_structured_array(self):
        """Gets the remittance_information_structured_array of this Transactions.

        Array of structured remittance information. 

        :return: The remittance_information_structured_array of this Transactions.
        :rtype: List[RemittanceInformationStructured]
        """
        return self._remittance_information_structured_array

    @remittance_information_structured_array.setter
    def remittance_information_structured_array(self, remittance_information_structured_array):
        """Sets the remittance_information_structured_array of this Transactions.

        Array of structured remittance information. 

        :param remittance_information_structured_array: The remittance_information_structured_array of this Transactions.
        :type remittance_information_structured_array: List[RemittanceInformationStructured]
        """

        self._remittance_information_structured_array = remittance_information_structured_array

    @property
    def remittance_information_unstructured(self):
        """Gets the remittance_information_unstructured of this Transactions.

        Unstructured remittance information. 

        :return: The remittance_information_unstructured of this Transactions.
        :rtype: str
        """
        return self._remittance_information_unstructured

    @remittance_information_unstructured.setter
    def remittance_information_unstructured(self, remittance_information_unstructured):
        """Sets the remittance_information_unstructured of this Transactions.

        Unstructured remittance information. 

        :param remittance_information_unstructured: The remittance_information_unstructured of this Transactions.
        :type remittance_information_unstructured: str
        """
        if remittance_information_unstructured is not None and len(remittance_information_unstructured) > 140:
            raise ValueError("Invalid value for `remittance_information_unstructured`, length must be less than or equal to `140`")

        self._remittance_information_unstructured = remittance_information_unstructured

    @property
    def remittance_information_unstructured_array(self):
        """Gets the remittance_information_unstructured_array of this Transactions.

        Array of unstructured remittance information. 

        :return: The remittance_information_unstructured_array of this Transactions.
        :rtype: List[str]
        """
        return self._remittance_information_unstructured_array

    @remittance_information_unstructured_array.setter
    def remittance_information_unstructured_array(self, remittance_information_unstructured_array):
        """Sets the remittance_information_unstructured_array of this Transactions.

        Array of unstructured remittance information. 

        :param remittance_information_unstructured_array: The remittance_information_unstructured_array of this Transactions.
        :type remittance_information_unstructured_array: List[str]
        """

        self._remittance_information_unstructured_array = remittance_information_unstructured_array

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this Transactions.


        :return: The transaction_amount of this Transactions.
        :rtype: Amount
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this Transactions.


        :param transaction_amount: The transaction_amount of this Transactions.
        :type transaction_amount: Amount
        """
        if transaction_amount is None:
            raise ValueError("Invalid value for `transaction_amount`, must not be `None`")

        self._transaction_amount = transaction_amount

    @property
    def transaction_id(self):
        """Gets the transaction_id of this Transactions.

        This identification is given by the attribute transactionId of the corresponding entry of a transaction list. 

        :return: The transaction_id of this Transactions.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this Transactions.

        This identification is given by the attribute transactionId of the corresponding entry of a transaction list. 

        :param transaction_id: The transaction_id of this Transactions.
        :type transaction_id: str
        """

        self._transaction_id = transaction_id

    @property
    def ultimate_creditor(self):
        """Gets the ultimate_creditor of this Transactions.

        Ultimate creditor.

        :return: The ultimate_creditor of this Transactions.
        :rtype: str
        """
        return self._ultimate_creditor

    @ultimate_creditor.setter
    def ultimate_creditor(self, ultimate_creditor):
        """Sets the ultimate_creditor of this Transactions.

        Ultimate creditor.

        :param ultimate_creditor: The ultimate_creditor of this Transactions.
        :type ultimate_creditor: str
        """
        if ultimate_creditor is not None and len(ultimate_creditor) > 70:
            raise ValueError("Invalid value for `ultimate_creditor`, length must be less than or equal to `70`")

        self._ultimate_creditor = ultimate_creditor

    @property
    def ultimate_debtor(self):
        """Gets the ultimate_debtor of this Transactions.

        Ultimate debtor.

        :return: The ultimate_debtor of this Transactions.
        :rtype: str
        """
        return self._ultimate_debtor

    @ultimate_debtor.setter
    def ultimate_debtor(self, ultimate_debtor):
        """Sets the ultimate_debtor of this Transactions.

        Ultimate debtor.

        :param ultimate_debtor: The ultimate_debtor of this Transactions.
        :type ultimate_debtor: str
        """
        if ultimate_debtor is not None and len(ultimate_debtor) > 70:
            raise ValueError("Invalid value for `ultimate_debtor`, length must be less than or equal to `70`")

        self._ultimate_debtor = ultimate_debtor

    @property
    def value_date(self):
        """Gets the value_date of this Transactions.

        The Date at which assets become available to the account owner in case of a credit.

        :return: The value_date of this Transactions.
        :rtype: date
        """
        return self._value_date

    @value_date.setter
    def value_date(self, value_date):
        """Sets the value_date of this Transactions.

        The Date at which assets become available to the account owner in case of a credit.

        :param value_date: The value_date of this Transactions.
        :type value_date: date
        """

        self._value_date = value_date
