# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_reference16_ch import AccountReference16CH
from openapi_server.models.payment_initiation_bulk_element_json import PaymentInitiationBulkElementJson
from openapi_server.models.transaction_status import TransactionStatus
from openapi_server import util


class BulkPaymentInitiationWithStatusResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acceptor_transaction_date_time: datetime=None, batch_booking_preferred: bool=None, debtor_account: AccountReference16CH=None, payment_information_id: str=None, payments: List[PaymentInitiationBulkElementJson]=None, requested_execution_date: date=None, transaction_status: TransactionStatus=None):
        """BulkPaymentInitiationWithStatusResponse - a model defined in OpenAPI

        :param acceptor_transaction_date_time: The acceptor_transaction_date_time of this BulkPaymentInitiationWithStatusResponse.
        :param batch_booking_preferred: The batch_booking_preferred of this BulkPaymentInitiationWithStatusResponse.
        :param debtor_account: The debtor_account of this BulkPaymentInitiationWithStatusResponse.
        :param payment_information_id: The payment_information_id of this BulkPaymentInitiationWithStatusResponse.
        :param payments: The payments of this BulkPaymentInitiationWithStatusResponse.
        :param requested_execution_date: The requested_execution_date of this BulkPaymentInitiationWithStatusResponse.
        :param transaction_status: The transaction_status of this BulkPaymentInitiationWithStatusResponse.
        """
        self.openapi_types = {
            'acceptor_transaction_date_time': datetime,
            'batch_booking_preferred': bool,
            'debtor_account': AccountReference16CH,
            'payment_information_id': str,
            'payments': List[PaymentInitiationBulkElementJson],
            'requested_execution_date': date,
            'transaction_status': TransactionStatus
        }

        self.attribute_map = {
            'acceptor_transaction_date_time': 'acceptorTransactionDateTime',
            'batch_booking_preferred': 'batchBookingPreferred',
            'debtor_account': 'debtorAccount',
            'payment_information_id': 'paymentInformationId',
            'payments': 'payments',
            'requested_execution_date': 'requestedExecutionDate',
            'transaction_status': 'transactionStatus'
        }

        self._acceptor_transaction_date_time = acceptor_transaction_date_time
        self._batch_booking_preferred = batch_booking_preferred
        self._debtor_account = debtor_account
        self._payment_information_id = payment_information_id
        self._payments = payments
        self._requested_execution_date = requested_execution_date
        self._transaction_status = transaction_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BulkPaymentInitiationWithStatusResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bulkPaymentInitiationWithStatusResponse of this BulkPaymentInitiationWithStatusResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acceptor_transaction_date_time(self):
        """Gets the acceptor_transaction_date_time of this BulkPaymentInitiationWithStatusResponse.


        :return: The acceptor_transaction_date_time of this BulkPaymentInitiationWithStatusResponse.
        :rtype: datetime
        """
        return self._acceptor_transaction_date_time

    @acceptor_transaction_date_time.setter
    def acceptor_transaction_date_time(self, acceptor_transaction_date_time):
        """Sets the acceptor_transaction_date_time of this BulkPaymentInitiationWithStatusResponse.


        :param acceptor_transaction_date_time: The acceptor_transaction_date_time of this BulkPaymentInitiationWithStatusResponse.
        :type acceptor_transaction_date_time: datetime
        """

        self._acceptor_transaction_date_time = acceptor_transaction_date_time

    @property
    def batch_booking_preferred(self):
        """Gets the batch_booking_preferred of this BulkPaymentInitiationWithStatusResponse.

        If this element equals 'true', the PSU prefers only one booking entry. If this element equals 'false', the PSU prefers individual booking of all contained individual transactions.  The ASPSP will follow this preference according to contracts agreed on with the PSU. 

        :return: The batch_booking_preferred of this BulkPaymentInitiationWithStatusResponse.
        :rtype: bool
        """
        return self._batch_booking_preferred

    @batch_booking_preferred.setter
    def batch_booking_preferred(self, batch_booking_preferred):
        """Sets the batch_booking_preferred of this BulkPaymentInitiationWithStatusResponse.

        If this element equals 'true', the PSU prefers only one booking entry. If this element equals 'false', the PSU prefers individual booking of all contained individual transactions.  The ASPSP will follow this preference according to contracts agreed on with the PSU. 

        :param batch_booking_preferred: The batch_booking_preferred of this BulkPaymentInitiationWithStatusResponse.
        :type batch_booking_preferred: bool
        """

        self._batch_booking_preferred = batch_booking_preferred

    @property
    def debtor_account(self):
        """Gets the debtor_account of this BulkPaymentInitiationWithStatusResponse.


        :return: The debtor_account of this BulkPaymentInitiationWithStatusResponse.
        :rtype: AccountReference16CH
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this BulkPaymentInitiationWithStatusResponse.


        :param debtor_account: The debtor_account of this BulkPaymentInitiationWithStatusResponse.
        :type debtor_account: AccountReference16CH
        """
        if debtor_account is None:
            raise ValueError("Invalid value for `debtor_account`, must not be `None`")

        self._debtor_account = debtor_account

    @property
    def payment_information_id(self):
        """Gets the payment_information_id of this BulkPaymentInitiationWithStatusResponse.


        :return: The payment_information_id of this BulkPaymentInitiationWithStatusResponse.
        :rtype: str
        """
        return self._payment_information_id

    @payment_information_id.setter
    def payment_information_id(self, payment_information_id):
        """Sets the payment_information_id of this BulkPaymentInitiationWithStatusResponse.


        :param payment_information_id: The payment_information_id of this BulkPaymentInitiationWithStatusResponse.
        :type payment_information_id: str
        """
        if payment_information_id is not None and len(payment_information_id) > 35:
            raise ValueError("Invalid value for `payment_information_id`, length must be less than or equal to `35`")

        self._payment_information_id = payment_information_id

    @property
    def payments(self):
        """Gets the payments of this BulkPaymentInitiationWithStatusResponse.

        A list of generic JSON bodies payment initations for bulk payments via JSON.  Note: Some fields from single payments do not occcur in a bulk payment element 

        :return: The payments of this BulkPaymentInitiationWithStatusResponse.
        :rtype: List[PaymentInitiationBulkElementJson]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this BulkPaymentInitiationWithStatusResponse.

        A list of generic JSON bodies payment initations for bulk payments via JSON.  Note: Some fields from single payments do not occcur in a bulk payment element 

        :param payments: The payments of this BulkPaymentInitiationWithStatusResponse.
        :type payments: List[PaymentInitiationBulkElementJson]
        """
        if payments is None:
            raise ValueError("Invalid value for `payments`, must not be `None`")

        self._payments = payments

    @property
    def requested_execution_date(self):
        """Gets the requested_execution_date of this BulkPaymentInitiationWithStatusResponse.


        :return: The requested_execution_date of this BulkPaymentInitiationWithStatusResponse.
        :rtype: date
        """
        return self._requested_execution_date

    @requested_execution_date.setter
    def requested_execution_date(self, requested_execution_date):
        """Sets the requested_execution_date of this BulkPaymentInitiationWithStatusResponse.


        :param requested_execution_date: The requested_execution_date of this BulkPaymentInitiationWithStatusResponse.
        :type requested_execution_date: date
        """

        self._requested_execution_date = requested_execution_date

    @property
    def transaction_status(self):
        """Gets the transaction_status of this BulkPaymentInitiationWithStatusResponse.


        :return: The transaction_status of this BulkPaymentInitiationWithStatusResponse.
        :rtype: TransactionStatus
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this BulkPaymentInitiationWithStatusResponse.


        :param transaction_status: The transaction_status of this BulkPaymentInitiationWithStatusResponse.
        :type transaction_status: TransactionStatus
        """

        self._transaction_status = transaction_status
