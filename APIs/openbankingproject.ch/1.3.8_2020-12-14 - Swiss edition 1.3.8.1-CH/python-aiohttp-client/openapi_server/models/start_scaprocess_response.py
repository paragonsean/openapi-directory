# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_object import AuthenticationObject
from openapi_server.models.challenge_data import ChallengeData
from openapi_server.models.links_start_sca_process import LinksStartScaProcess
from openapi_server.models.sca_status import ScaStatus
from openapi_server import util


class StartScaprocessResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: LinksStartScaProcess=None, authorisation_id: str=None, challenge_data: ChallengeData=None, chosen_sca_method: AuthenticationObject=None, psu_message: str=None, sca_methods: List[AuthenticationObject]=None, sca_status: ScaStatus=None):
        """StartScaprocessResponse - a model defined in OpenAPI

        :param links: The links of this StartScaprocessResponse.
        :param authorisation_id: The authorisation_id of this StartScaprocessResponse.
        :param challenge_data: The challenge_data of this StartScaprocessResponse.
        :param chosen_sca_method: The chosen_sca_method of this StartScaprocessResponse.
        :param psu_message: The psu_message of this StartScaprocessResponse.
        :param sca_methods: The sca_methods of this StartScaprocessResponse.
        :param sca_status: The sca_status of this StartScaprocessResponse.
        """
        self.openapi_types = {
            'links': LinksStartScaProcess,
            'authorisation_id': str,
            'challenge_data': ChallengeData,
            'chosen_sca_method': AuthenticationObject,
            'psu_message': str,
            'sca_methods': List[AuthenticationObject],
            'sca_status': ScaStatus
        }

        self.attribute_map = {
            'links': '_links',
            'authorisation_id': 'authorisationId',
            'challenge_data': 'challengeData',
            'chosen_sca_method': 'chosenScaMethod',
            'psu_message': 'psuMessage',
            'sca_methods': 'scaMethods',
            'sca_status': 'scaStatus'
        }

        self._links = links
        self._authorisation_id = authorisation_id
        self._challenge_data = challenge_data
        self._chosen_sca_method = chosen_sca_method
        self._psu_message = psu_message
        self._sca_methods = sca_methods
        self._sca_status = sca_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartScaprocessResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The startScaprocessResponse of this StartScaprocessResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this StartScaprocessResponse.


        :return: The links of this StartScaprocessResponse.
        :rtype: LinksStartScaProcess
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this StartScaprocessResponse.


        :param links: The links of this StartScaprocessResponse.
        :type links: LinksStartScaProcess
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def authorisation_id(self):
        """Gets the authorisation_id of this StartScaprocessResponse.

        Resource identification of the related SCA.

        :return: The authorisation_id of this StartScaprocessResponse.
        :rtype: str
        """
        return self._authorisation_id

    @authorisation_id.setter
    def authorisation_id(self, authorisation_id):
        """Sets the authorisation_id of this StartScaprocessResponse.

        Resource identification of the related SCA.

        :param authorisation_id: The authorisation_id of this StartScaprocessResponse.
        :type authorisation_id: str
        """
        if authorisation_id is None:
            raise ValueError("Invalid value for `authorisation_id`, must not be `None`")

        self._authorisation_id = authorisation_id

    @property
    def challenge_data(self):
        """Gets the challenge_data of this StartScaprocessResponse.


        :return: The challenge_data of this StartScaprocessResponse.
        :rtype: ChallengeData
        """
        return self._challenge_data

    @challenge_data.setter
    def challenge_data(self, challenge_data):
        """Sets the challenge_data of this StartScaprocessResponse.


        :param challenge_data: The challenge_data of this StartScaprocessResponse.
        :type challenge_data: ChallengeData
        """

        self._challenge_data = challenge_data

    @property
    def chosen_sca_method(self):
        """Gets the chosen_sca_method of this StartScaprocessResponse.


        :return: The chosen_sca_method of this StartScaprocessResponse.
        :rtype: AuthenticationObject
        """
        return self._chosen_sca_method

    @chosen_sca_method.setter
    def chosen_sca_method(self, chosen_sca_method):
        """Sets the chosen_sca_method of this StartScaprocessResponse.


        :param chosen_sca_method: The chosen_sca_method of this StartScaprocessResponse.
        :type chosen_sca_method: AuthenticationObject
        """

        self._chosen_sca_method = chosen_sca_method

    @property
    def psu_message(self):
        """Gets the psu_message of this StartScaprocessResponse.

        Text to be displayed to the PSU.

        :return: The psu_message of this StartScaprocessResponse.
        :rtype: str
        """
        return self._psu_message

    @psu_message.setter
    def psu_message(self, psu_message):
        """Sets the psu_message of this StartScaprocessResponse.

        Text to be displayed to the PSU.

        :param psu_message: The psu_message of this StartScaprocessResponse.
        :type psu_message: str
        """
        if psu_message is not None and len(psu_message) > 500:
            raise ValueError("Invalid value for `psu_message`, length must be less than or equal to `500`")

        self._psu_message = psu_message

    @property
    def sca_methods(self):
        """Gets the sca_methods of this StartScaprocessResponse.

        This data element might be contained, if SCA is required and if the PSU has a choice between different authentication methods.  Depending on the risk management of the ASPSP this choice might be offered before or after the PSU has been identified with the first relevant factor, or if an access token is transported.  If this data element is contained, then there is also a hyperlink of type 'startAuthorisationWithAuthenticationMethodSelection' contained in the response body.  These methods shall be presented towards the PSU for selection by the TPP. 

        :return: The sca_methods of this StartScaprocessResponse.
        :rtype: List[AuthenticationObject]
        """
        return self._sca_methods

    @sca_methods.setter
    def sca_methods(self, sca_methods):
        """Sets the sca_methods of this StartScaprocessResponse.

        This data element might be contained, if SCA is required and if the PSU has a choice between different authentication methods.  Depending on the risk management of the ASPSP this choice might be offered before or after the PSU has been identified with the first relevant factor, or if an access token is transported.  If this data element is contained, then there is also a hyperlink of type 'startAuthorisationWithAuthenticationMethodSelection' contained in the response body.  These methods shall be presented towards the PSU for selection by the TPP. 

        :param sca_methods: The sca_methods of this StartScaprocessResponse.
        :type sca_methods: List[AuthenticationObject]
        """

        self._sca_methods = sca_methods

    @property
    def sca_status(self):
        """Gets the sca_status of this StartScaprocessResponse.


        :return: The sca_status of this StartScaprocessResponse.
        :rtype: ScaStatus
        """
        return self._sca_status

    @sca_status.setter
    def sca_status(self, sca_status):
        """Sets the sca_status of this StartScaprocessResponse.


        :param sca_status: The sca_status of this StartScaprocessResponse.
        :type sca_status: ScaStatus
        """
        if sca_status is None:
            raise ValueError("Invalid value for `sca_status`, must not be `None`")

        self._sca_status = sca_status
