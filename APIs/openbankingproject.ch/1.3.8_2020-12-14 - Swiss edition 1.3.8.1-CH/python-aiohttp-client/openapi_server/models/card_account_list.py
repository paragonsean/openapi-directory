# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.card_account_details import CardAccountDetails
from openapi_server import util


class CardAccountList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_accounts: List[CardAccountDetails]=None):
        """CardAccountList - a model defined in OpenAPI

        :param card_accounts: The card_accounts of this CardAccountList.
        """
        self.openapi_types = {
            'card_accounts': List[CardAccountDetails]
        }

        self.attribute_map = {
            'card_accounts': 'cardAccounts'
        }

        self._card_accounts = card_accounts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardAccountList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cardAccountList of this CardAccountList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_accounts(self):
        """Gets the card_accounts of this CardAccountList.


        :return: The card_accounts of this CardAccountList.
        :rtype: List[CardAccountDetails]
        """
        return self._card_accounts

    @card_accounts.setter
    def card_accounts(self, card_accounts):
        """Sets the card_accounts of this CardAccountList.


        :param card_accounts: The card_accounts of this CardAccountList.
        :type card_accounts: List[CardAccountDetails]
        """
        if card_accounts is None:
            raise ValueError("Invalid value for `card_accounts`, must not be `None`")

        self._card_accounts = card_accounts
