# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SelectPsuAuthenticationMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_method_id: str=None):
        """SelectPsuAuthenticationMethod - a model defined in OpenAPI

        :param authentication_method_id: The authentication_method_id of this SelectPsuAuthenticationMethod.
        """
        self.openapi_types = {
            'authentication_method_id': str
        }

        self.attribute_map = {
            'authentication_method_id': 'authenticationMethodId'
        }

        self._authentication_method_id = authentication_method_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SelectPsuAuthenticationMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The selectPsuAuthenticationMethod of this SelectPsuAuthenticationMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_method_id(self):
        """Gets the authentication_method_id of this SelectPsuAuthenticationMethod.

        An identification provided by the ASPSP for the later identification of the authentication method selection. 

        :return: The authentication_method_id of this SelectPsuAuthenticationMethod.
        :rtype: str
        """
        return self._authentication_method_id

    @authentication_method_id.setter
    def authentication_method_id(self, authentication_method_id):
        """Sets the authentication_method_id of this SelectPsuAuthenticationMethod.

        An identification provided by the ASPSP for the later identification of the authentication method selection. 

        :param authentication_method_id: The authentication_method_id of this SelectPsuAuthenticationMethod.
        :type authentication_method_id: str
        """
        if authentication_method_id is None:
            raise ValueError("Invalid value for `authentication_method_id`, must not be `None`")
        if authentication_method_id is not None and len(authentication_method_id) > 35:
            raise ValueError("Invalid value for `authentication_method_id`, length must be less than or equal to `35`")

        self._authentication_method_id = authentication_method_id
