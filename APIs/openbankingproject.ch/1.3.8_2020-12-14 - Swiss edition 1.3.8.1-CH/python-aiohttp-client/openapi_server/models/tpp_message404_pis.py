# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_code404_pis import MessageCode404PIS
from openapi_server.models.tpp_message_category import TppMessageCategory
from openapi_server import util


class TppMessage404PIS(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: TppMessageCategory=None, code: MessageCode404PIS=None, path: str=None, text: str=None):
        """TppMessage404PIS - a model defined in OpenAPI

        :param category: The category of this TppMessage404PIS.
        :param code: The code of this TppMessage404PIS.
        :param path: The path of this TppMessage404PIS.
        :param text: The text of this TppMessage404PIS.
        """
        self.openapi_types = {
            'category': TppMessageCategory,
            'code': MessageCode404PIS,
            'path': str,
            'text': str
        }

        self.attribute_map = {
            'category': 'category',
            'code': 'code',
            'path': 'path',
            'text': 'text'
        }

        self._category = category
        self._code = code
        self._path = path
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TppMessage404PIS':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tppMessage404_PIS of this TppMessage404PIS.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this TppMessage404PIS.


        :return: The category of this TppMessage404PIS.
        :rtype: TppMessageCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TppMessage404PIS.


        :param category: The category of this TppMessage404PIS.
        :type category: TppMessageCategory
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def code(self):
        """Gets the code of this TppMessage404PIS.


        :return: The code of this TppMessage404PIS.
        :rtype: MessageCode404PIS
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TppMessage404PIS.


        :param code: The code of this TppMessage404PIS.
        :type code: MessageCode404PIS
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def path(self):
        """Gets the path of this TppMessage404PIS.


        :return: The path of this TppMessage404PIS.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this TppMessage404PIS.


        :param path: The path of this TppMessage404PIS.
        :type path: str
        """

        self._path = path

    @property
    def text(self):
        """Gets the text of this TppMessage404PIS.

        Additional explaining text to the TPP.

        :return: The text of this TppMessage404PIS.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TppMessage404PIS.

        Additional explaining text to the TPP.

        :param text: The text of this TppMessage404PIS.
        :type text: str
        """
        if text is not None and len(text) > 500:
            raise ValueError("Invalid value for `text`, length must be less than or equal to `500`")

        self._text = text
