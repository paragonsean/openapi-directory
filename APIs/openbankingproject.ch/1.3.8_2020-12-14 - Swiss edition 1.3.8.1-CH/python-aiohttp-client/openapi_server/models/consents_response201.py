# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_object import AuthenticationObject
from openapi_server.models.challenge_data import ChallengeData
from openapi_server.models.consent_status import ConsentStatus
from openapi_server.models.links_consents import LinksConsents
from openapi_server import util


class ConsentsResponse201(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: LinksConsents=None, challenge_data: ChallengeData=None, chosen_sca_method: AuthenticationObject=None, consent_id: str=None, consent_status: ConsentStatus=None, psu_message: str=None, sca_methods: List[AuthenticationObject]=None):
        """ConsentsResponse201 - a model defined in OpenAPI

        :param links: The links of this ConsentsResponse201.
        :param challenge_data: The challenge_data of this ConsentsResponse201.
        :param chosen_sca_method: The chosen_sca_method of this ConsentsResponse201.
        :param consent_id: The consent_id of this ConsentsResponse201.
        :param consent_status: The consent_status of this ConsentsResponse201.
        :param psu_message: The psu_message of this ConsentsResponse201.
        :param sca_methods: The sca_methods of this ConsentsResponse201.
        """
        self.openapi_types = {
            'links': LinksConsents,
            'challenge_data': ChallengeData,
            'chosen_sca_method': AuthenticationObject,
            'consent_id': str,
            'consent_status': ConsentStatus,
            'psu_message': str,
            'sca_methods': List[AuthenticationObject]
        }

        self.attribute_map = {
            'links': '_links',
            'challenge_data': 'challengeData',
            'chosen_sca_method': 'chosenScaMethod',
            'consent_id': 'consentId',
            'consent_status': 'consentStatus',
            'psu_message': 'psuMessage',
            'sca_methods': 'scaMethods'
        }

        self._links = links
        self._challenge_data = challenge_data
        self._chosen_sca_method = chosen_sca_method
        self._consent_id = consent_id
        self._consent_status = consent_status
        self._psu_message = psu_message
        self._sca_methods = sca_methods

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsentsResponse201':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The consentsResponse-201 of this ConsentsResponse201.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this ConsentsResponse201.


        :return: The links of this ConsentsResponse201.
        :rtype: LinksConsents
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ConsentsResponse201.


        :param links: The links of this ConsentsResponse201.
        :type links: LinksConsents
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def challenge_data(self):
        """Gets the challenge_data of this ConsentsResponse201.


        :return: The challenge_data of this ConsentsResponse201.
        :rtype: ChallengeData
        """
        return self._challenge_data

    @challenge_data.setter
    def challenge_data(self, challenge_data):
        """Sets the challenge_data of this ConsentsResponse201.


        :param challenge_data: The challenge_data of this ConsentsResponse201.
        :type challenge_data: ChallengeData
        """

        self._challenge_data = challenge_data

    @property
    def chosen_sca_method(self):
        """Gets the chosen_sca_method of this ConsentsResponse201.


        :return: The chosen_sca_method of this ConsentsResponse201.
        :rtype: AuthenticationObject
        """
        return self._chosen_sca_method

    @chosen_sca_method.setter
    def chosen_sca_method(self, chosen_sca_method):
        """Sets the chosen_sca_method of this ConsentsResponse201.


        :param chosen_sca_method: The chosen_sca_method of this ConsentsResponse201.
        :type chosen_sca_method: AuthenticationObject
        """

        self._chosen_sca_method = chosen_sca_method

    @property
    def consent_id(self):
        """Gets the consent_id of this ConsentsResponse201.

        ID of the corresponding consent object as returned by an account information consent request. 

        :return: The consent_id of this ConsentsResponse201.
        :rtype: str
        """
        return self._consent_id

    @consent_id.setter
    def consent_id(self, consent_id):
        """Sets the consent_id of this ConsentsResponse201.

        ID of the corresponding consent object as returned by an account information consent request. 

        :param consent_id: The consent_id of this ConsentsResponse201.
        :type consent_id: str
        """
        if consent_id is None:
            raise ValueError("Invalid value for `consent_id`, must not be `None`")

        self._consent_id = consent_id

    @property
    def consent_status(self):
        """Gets the consent_status of this ConsentsResponse201.


        :return: The consent_status of this ConsentsResponse201.
        :rtype: ConsentStatus
        """
        return self._consent_status

    @consent_status.setter
    def consent_status(self, consent_status):
        """Sets the consent_status of this ConsentsResponse201.


        :param consent_status: The consent_status of this ConsentsResponse201.
        :type consent_status: ConsentStatus
        """
        if consent_status is None:
            raise ValueError("Invalid value for `consent_status`, must not be `None`")

        self._consent_status = consent_status

    @property
    def psu_message(self):
        """Gets the psu_message of this ConsentsResponse201.

        Text to be displayed to the PSU.

        :return: The psu_message of this ConsentsResponse201.
        :rtype: str
        """
        return self._psu_message

    @psu_message.setter
    def psu_message(self, psu_message):
        """Sets the psu_message of this ConsentsResponse201.

        Text to be displayed to the PSU.

        :param psu_message: The psu_message of this ConsentsResponse201.
        :type psu_message: str
        """
        if psu_message is not None and len(psu_message) > 500:
            raise ValueError("Invalid value for `psu_message`, length must be less than or equal to `500`")

        self._psu_message = psu_message

    @property
    def sca_methods(self):
        """Gets the sca_methods of this ConsentsResponse201.

        This data element might be contained, if SCA is required and if the PSU has a choice between different authentication methods.  Depending on the risk management of the ASPSP this choice might be offered before or after the PSU has been identified with the first relevant factor, or if an access token is transported.  If this data element is contained, then there is also a hyperlink of type 'startAuthorisationWithAuthenticationMethodSelection' contained in the response body.  These methods shall be presented towards the PSU for selection by the TPP. 

        :return: The sca_methods of this ConsentsResponse201.
        :rtype: List[AuthenticationObject]
        """
        return self._sca_methods

    @sca_methods.setter
    def sca_methods(self, sca_methods):
        """Sets the sca_methods of this ConsentsResponse201.

        This data element might be contained, if SCA is required and if the PSU has a choice between different authentication methods.  Depending on the risk management of the ASPSP this choice might be offered before or after the PSU has been identified with the first relevant factor, or if an access token is transported.  If this data element is contained, then there is also a hyperlink of type 'startAuthorisationWithAuthenticationMethodSelection' contained in the response body.  These methods shall be presented towards the PSU for selection by the TPP. 

        :param sca_methods: The sca_methods of this ConsentsResponse201.
        :type sca_methods: List[AuthenticationObject]
        """

        self._sca_methods = sca_methods
