# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consent_status import ConsentStatus
from openapi_server import util


class ConsentStatusResponse200(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent_status: ConsentStatus=None, psu_message: str=None):
        """ConsentStatusResponse200 - a model defined in OpenAPI

        :param consent_status: The consent_status of this ConsentStatusResponse200.
        :param psu_message: The psu_message of this ConsentStatusResponse200.
        """
        self.openapi_types = {
            'consent_status': ConsentStatus,
            'psu_message': str
        }

        self.attribute_map = {
            'consent_status': 'consentStatus',
            'psu_message': 'psuMessage'
        }

        self._consent_status = consent_status
        self._psu_message = psu_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsentStatusResponse200':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The consentStatusResponse-200 of this ConsentStatusResponse200.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent_status(self):
        """Gets the consent_status of this ConsentStatusResponse200.


        :return: The consent_status of this ConsentStatusResponse200.
        :rtype: ConsentStatus
        """
        return self._consent_status

    @consent_status.setter
    def consent_status(self, consent_status):
        """Sets the consent_status of this ConsentStatusResponse200.


        :param consent_status: The consent_status of this ConsentStatusResponse200.
        :type consent_status: ConsentStatus
        """
        if consent_status is None:
            raise ValueError("Invalid value for `consent_status`, must not be `None`")

        self._consent_status = consent_status

    @property
    def psu_message(self):
        """Gets the psu_message of this ConsentStatusResponse200.

        Text to be displayed to the PSU.

        :return: The psu_message of this ConsentStatusResponse200.
        :rtype: str
        """
        return self._psu_message

    @psu_message.setter
    def psu_message(self, psu_message):
        """Sets the psu_message of this ConsentStatusResponse200.

        Text to be displayed to the PSU.

        :param psu_message: The psu_message of this ConsentStatusResponse200.
        :type psu_message: str
        """
        if psu_message is not None and len(psu_message) > 500:
            raise ValueError("Invalid value for `psu_message`, length must be less than or equal to `500`")

        self._psu_message = psu_message
