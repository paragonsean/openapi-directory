# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Amount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: str=None, currency: str=None):
        """Amount - a model defined in OpenAPI

        :param amount: The amount of this Amount.
        :param currency: The currency of this Amount.
        """
        self.openapi_types = {
            'amount': str,
            'currency': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency': 'currency'
        }

        self._amount = amount
        self._currency = currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Amount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The amount of this Amount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Amount.

        The amount given with fractional digits, where fractions must be compliant to the currency definition. Up to 14 significant figures. Negative amounts are signed by minus. The decimal separator is a dot.  **Example:** Valid representations for EUR with up to two decimals are:    * 1056   * 5768.2   * -1.50   * 5877.78 

        :return: The amount of this Amount.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Amount.

        The amount given with fractional digits, where fractions must be compliant to the currency definition. Up to 14 significant figures. Negative amounts are signed by minus. The decimal separator is a dot.  **Example:** Valid representations for EUR with up to two decimals are:    * 1056   * 5768.2   * -1.50   * 5877.78 

        :param amount: The amount of this Amount.
        :type amount: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")
        if amount is not None and not re.search(r'-?[0-9]{1,14}(\.[0-9]{1,3})?', amount):
            raise ValueError("Invalid value for `amount`, must be a follow pattern or equal to `/-?[0-9]{1,14}(\.[0-9]{1,3})?/`")

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this Amount.

        ISO 4217 Alpha 3 currency code. 

        :return: The currency of this Amount.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Amount.

        ISO 4217 Alpha 3 currency code. 

        :param currency: The currency of this Amount.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and not re.search(r'[A-Z]{3}', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/[A-Z]{3}/`")

        self._currency = currency
