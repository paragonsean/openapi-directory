# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExchangeRateInformation1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contract_identification: str=None, exchange_rate: str=None, rate_type: str=None):
        """ExchangeRateInformation1 - a model defined in OpenAPI

        :param contract_identification: The contract_identification of this ExchangeRateInformation1.
        :param exchange_rate: The exchange_rate of this ExchangeRateInformation1.
        :param rate_type: The rate_type of this ExchangeRateInformation1.
        """
        self.openapi_types = {
            'contract_identification': str,
            'exchange_rate': str,
            'rate_type': str
        }

        self.attribute_map = {
            'contract_identification': 'contractIdentification',
            'exchange_rate': 'exchangeRate',
            'rate_type': 'rateType'
        }

        self._contract_identification = contract_identification
        self._exchange_rate = exchange_rate
        self._rate_type = rate_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExchangeRateInformation1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The exchangeRateInformation1 of this ExchangeRateInformation1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contract_identification(self):
        """Gets the contract_identification of this ExchangeRateInformation1.


        :return: The contract_identification of this ExchangeRateInformation1.
        :rtype: str
        """
        return self._contract_identification

    @contract_identification.setter
    def contract_identification(self, contract_identification):
        """Sets the contract_identification of this ExchangeRateInformation1.


        :param contract_identification: The contract_identification of this ExchangeRateInformation1.
        :type contract_identification: str
        """
        if contract_identification is not None and len(contract_identification) > 35:
            raise ValueError("Invalid value for `contract_identification`, length must be less than or equal to `35`")

        self._contract_identification = contract_identification

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this ExchangeRateInformation1.


        :return: The exchange_rate of this ExchangeRateInformation1.
        :rtype: str
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this ExchangeRateInformation1.


        :param exchange_rate: The exchange_rate of this ExchangeRateInformation1.
        :type exchange_rate: str
        """

        self._exchange_rate = exchange_rate

    @property
    def rate_type(self):
        """Gets the rate_type of this ExchangeRateInformation1.


        :return: The rate_type of this ExchangeRateInformation1.
        :rtype: str
        """
        return self._rate_type

    @rate_type.setter
    def rate_type(self, rate_type):
        """Sets the rate_type of this ExchangeRateInformation1.


        :param rate_type: The rate_type of this ExchangeRateInformation1.
        :type rate_type: str
        """
        allowed_values = ["SPOT", "SALE", "AGRD"]  # noqa: E501
        if rate_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rate_type` ({0}), must be one of {1}"
                .format(rate_type, allowed_values)
            )

        self._rate_type = rate_type
