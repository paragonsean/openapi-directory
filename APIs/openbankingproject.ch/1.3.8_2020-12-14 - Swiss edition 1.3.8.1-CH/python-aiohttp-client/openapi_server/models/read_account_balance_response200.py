# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_reference16_ch import AccountReference16CH
from openapi_server.models.balance import Balance
from openapi_server import util


class ReadAccountBalanceResponse200(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: AccountReference16CH=None, balances: List[Balance]=None):
        """ReadAccountBalanceResponse200 - a model defined in OpenAPI

        :param account: The account of this ReadAccountBalanceResponse200.
        :param balances: The balances of this ReadAccountBalanceResponse200.
        """
        self.openapi_types = {
            'account': AccountReference16CH,
            'balances': List[Balance]
        }

        self.attribute_map = {
            'account': 'account',
            'balances': 'balances'
        }

        self._account = account
        self._balances = balances

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReadAccountBalanceResponse200':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The readAccountBalanceResponse-200 of this ReadAccountBalanceResponse200.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this ReadAccountBalanceResponse200.


        :return: The account of this ReadAccountBalanceResponse200.
        :rtype: AccountReference16CH
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ReadAccountBalanceResponse200.


        :param account: The account of this ReadAccountBalanceResponse200.
        :type account: AccountReference16CH
        """

        self._account = account

    @property
    def balances(self):
        """Gets the balances of this ReadAccountBalanceResponse200.

        A list of balances regarding this account, e.g. the current balance, the last booked balance. The list might be restricted to the current balance. 

        :return: The balances of this ReadAccountBalanceResponse200.
        :rtype: List[Balance]
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this ReadAccountBalanceResponse200.

        A list of balances regarding this account, e.g. the current balance, the last booked balance. The list might be restricted to the current balance. 

        :param balances: The balances of this ReadAccountBalanceResponse200.
        :type balances: List[Balance]
        """
        if balances is None:
            raise ValueError("Invalid value for `balances`, must not be `None`")

        self._balances = balances
