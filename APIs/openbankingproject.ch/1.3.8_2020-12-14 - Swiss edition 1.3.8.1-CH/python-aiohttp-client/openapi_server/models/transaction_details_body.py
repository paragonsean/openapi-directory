# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transactions import Transactions
from openapi_server import util


class TransactionDetailsBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transaction_details: Transactions=None):
        """TransactionDetailsBody - a model defined in OpenAPI

        :param transaction_details: The transaction_details of this TransactionDetailsBody.
        """
        self.openapi_types = {
            'transaction_details': Transactions
        }

        self.attribute_map = {
            'transaction_details': 'transactionDetails'
        }

        self._transaction_details = transaction_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionDetailsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The transactionDetailsBody of this TransactionDetailsBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_details(self):
        """Gets the transaction_details of this TransactionDetailsBody.


        :return: The transaction_details of this TransactionDetailsBody.
        :rtype: Transactions
        """
        return self._transaction_details

    @transaction_details.setter
    def transaction_details(self, transaction_details):
        """Sets the transaction_details of this TransactionDetailsBody.


        :param transaction_details: The transaction_details of this TransactionDetailsBody.
        :type transaction_details: Transactions
        """
        if transaction_details is None:
            raise ValueError("Invalid value for `transaction_details`, must not be `None`")

        self._transaction_details = transaction_details
