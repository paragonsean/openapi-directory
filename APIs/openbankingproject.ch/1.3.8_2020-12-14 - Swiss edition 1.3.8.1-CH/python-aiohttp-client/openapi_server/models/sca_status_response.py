# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sca_status import ScaStatus
from openapi_server import util


class ScaStatusResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, psu_message: str=None, sca_status: ScaStatus=None, trusted_beneficiary_flag: bool=None):
        """ScaStatusResponse - a model defined in OpenAPI

        :param psu_message: The psu_message of this ScaStatusResponse.
        :param sca_status: The sca_status of this ScaStatusResponse.
        :param trusted_beneficiary_flag: The trusted_beneficiary_flag of this ScaStatusResponse.
        """
        self.openapi_types = {
            'psu_message': str,
            'sca_status': ScaStatus,
            'trusted_beneficiary_flag': bool
        }

        self.attribute_map = {
            'psu_message': 'psuMessage',
            'sca_status': 'scaStatus',
            'trusted_beneficiary_flag': 'trustedBeneficiaryFlag'
        }

        self._psu_message = psu_message
        self._sca_status = sca_status
        self._trusted_beneficiary_flag = trusted_beneficiary_flag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScaStatusResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The scaStatusResponse of this ScaStatusResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def psu_message(self):
        """Gets the psu_message of this ScaStatusResponse.

        Text to be displayed to the PSU.

        :return: The psu_message of this ScaStatusResponse.
        :rtype: str
        """
        return self._psu_message

    @psu_message.setter
    def psu_message(self, psu_message):
        """Sets the psu_message of this ScaStatusResponse.

        Text to be displayed to the PSU.

        :param psu_message: The psu_message of this ScaStatusResponse.
        :type psu_message: str
        """
        if psu_message is not None and len(psu_message) > 500:
            raise ValueError("Invalid value for `psu_message`, length must be less than or equal to `500`")

        self._psu_message = psu_message

    @property
    def sca_status(self):
        """Gets the sca_status of this ScaStatusResponse.


        :return: The sca_status of this ScaStatusResponse.
        :rtype: ScaStatus
        """
        return self._sca_status

    @sca_status.setter
    def sca_status(self, sca_status):
        """Sets the sca_status of this ScaStatusResponse.


        :param sca_status: The sca_status of this ScaStatusResponse.
        :type sca_status: ScaStatus
        """
        if sca_status is None:
            raise ValueError("Invalid value for `sca_status`, must not be `None`")

        self._sca_status = sca_status

    @property
    def trusted_beneficiary_flag(self):
        """Gets the trusted_beneficiary_flag of this ScaStatusResponse.

        Additional Service: Trusted Benificiaries Within this data element, the ASPSP might optionally communicate towards the TPP whether the creditor was part of the related trusted beneficiary list.  This attribute is only contained in case of a final scaStatus. 

        :return: The trusted_beneficiary_flag of this ScaStatusResponse.
        :rtype: bool
        """
        return self._trusted_beneficiary_flag

    @trusted_beneficiary_flag.setter
    def trusted_beneficiary_flag(self, trusted_beneficiary_flag):
        """Sets the trusted_beneficiary_flag of this ScaStatusResponse.

        Additional Service: Trusted Benificiaries Within this data element, the ASPSP might optionally communicate towards the TPP whether the creditor was part of the related trusted beneficiary list.  This attribute is only contained in case of a final scaStatus. 

        :param trusted_beneficiary_flag: The trusted_beneficiary_flag of this ScaStatusResponse.
        :type trusted_beneficiary_flag: bool
        """

        self._trusted_beneficiary_flag = trusted_beneficiary_flag
