# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.card_transaction import CardTransaction
from openapi_server.models.links_card_account_report import LinksCardAccountReport
from openapi_server import util


class CardAccountReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: LinksCardAccountReport=None, booked: List[CardTransaction]=None, pending: List[CardTransaction]=None):
        """CardAccountReport - a model defined in OpenAPI

        :param links: The links of this CardAccountReport.
        :param booked: The booked of this CardAccountReport.
        :param pending: The pending of this CardAccountReport.
        """
        self.openapi_types = {
            'links': LinksCardAccountReport,
            'booked': List[CardTransaction],
            'pending': List[CardTransaction]
        }

        self.attribute_map = {
            'links': '_links',
            'booked': 'booked',
            'pending': 'pending'
        }

        self._links = links
        self._booked = booked
        self._pending = pending

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardAccountReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cardAccountReport of this CardAccountReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this CardAccountReport.


        :return: The links of this CardAccountReport.
        :rtype: LinksCardAccountReport
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CardAccountReport.


        :param links: The links of this CardAccountReport.
        :type links: LinksCardAccountReport
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def booked(self):
        """Gets the booked of this CardAccountReport.

        Array of transaction details.

        :return: The booked of this CardAccountReport.
        :rtype: List[CardTransaction]
        """
        return self._booked

    @booked.setter
    def booked(self, booked):
        """Sets the booked of this CardAccountReport.

        Array of transaction details.

        :param booked: The booked of this CardAccountReport.
        :type booked: List[CardTransaction]
        """
        if booked is None:
            raise ValueError("Invalid value for `booked`, must not be `None`")

        self._booked = booked

    @property
    def pending(self):
        """Gets the pending of this CardAccountReport.

        Array of transaction details.

        :return: The pending of this CardAccountReport.
        :rtype: List[CardTransaction]
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this CardAccountReport.

        Array of transaction details.

        :param pending: The pending of this CardAccountReport.
        :type pending: List[CardTransaction]
        """

        self._pending = pending
