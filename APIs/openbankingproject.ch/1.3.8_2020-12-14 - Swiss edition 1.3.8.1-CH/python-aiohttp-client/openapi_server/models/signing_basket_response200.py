# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_signing_basket import LinksSigningBasket
from openapi_server.models.transaction_status_sbs import TransactionStatusSBS
from openapi_server import util


class SigningBasketResponse200(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: LinksSigningBasket=None, consents: List[str]=None, payments: List[str]=None, transaction_status: TransactionStatusSBS=None):
        """SigningBasketResponse200 - a model defined in OpenAPI

        :param links: The links of this SigningBasketResponse200.
        :param consents: The consents of this SigningBasketResponse200.
        :param payments: The payments of this SigningBasketResponse200.
        :param transaction_status: The transaction_status of this SigningBasketResponse200.
        """
        self.openapi_types = {
            'links': LinksSigningBasket,
            'consents': List[str],
            'payments': List[str],
            'transaction_status': TransactionStatusSBS
        }

        self.attribute_map = {
            'links': '_links',
            'consents': 'consents',
            'payments': 'payments',
            'transaction_status': 'transactionStatus'
        }

        self._links = links
        self._consents = consents
        self._payments = payments
        self._transaction_status = transaction_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SigningBasketResponse200':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The signingBasketResponse-200 of this SigningBasketResponse200.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this SigningBasketResponse200.


        :return: The links of this SigningBasketResponse200.
        :rtype: LinksSigningBasket
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SigningBasketResponse200.


        :param links: The links of this SigningBasketResponse200.
        :type links: LinksSigningBasket
        """

        self._links = links

    @property
    def consents(self):
        """Gets the consents of this SigningBasketResponse200.

        A list of consentIds.

        :return: The consents of this SigningBasketResponse200.
        :rtype: List[str]
        """
        return self._consents

    @consents.setter
    def consents(self, consents):
        """Sets the consents of this SigningBasketResponse200.

        A list of consentIds.

        :param consents: The consents of this SigningBasketResponse200.
        :type consents: List[str]
        """
        if consents is not None and len(consents) < 1:
            raise ValueError("Invalid value for `consents`, number of items must be greater than or equal to `1`")

        self._consents = consents

    @property
    def payments(self):
        """Gets the payments of this SigningBasketResponse200.

        A list of paymentIds.

        :return: The payments of this SigningBasketResponse200.
        :rtype: List[str]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this SigningBasketResponse200.

        A list of paymentIds.

        :param payments: The payments of this SigningBasketResponse200.
        :type payments: List[str]
        """
        if payments is not None and len(payments) < 1:
            raise ValueError("Invalid value for `payments`, number of items must be greater than or equal to `1`")

        self._payments = payments

    @property
    def transaction_status(self):
        """Gets the transaction_status of this SigningBasketResponse200.


        :return: The transaction_status of this SigningBasketResponse200.
        :rtype: TransactionStatusSBS
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this SigningBasketResponse200.


        :param transaction_status: The transaction_status of this SigningBasketResponse200.
        :type transaction_status: TransactionStatusSBS
        """
        if transaction_status is None:
            raise ValueError("Invalid value for `transaction_status`, must not be `None`")

        self._transaction_status = transaction_status
