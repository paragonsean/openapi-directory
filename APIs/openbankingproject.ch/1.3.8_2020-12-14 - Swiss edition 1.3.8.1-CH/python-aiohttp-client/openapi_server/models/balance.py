# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.balance_type import BalanceType
from openapi_server import util


class Balance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance_amount: Amount=None, balance_type: BalanceType=None, credit_limit_included: bool=None, last_change_date_time: datetime=None, last_committed_transaction: str=None, reference_date: date=None):
        """Balance - a model defined in OpenAPI

        :param balance_amount: The balance_amount of this Balance.
        :param balance_type: The balance_type of this Balance.
        :param credit_limit_included: The credit_limit_included of this Balance.
        :param last_change_date_time: The last_change_date_time of this Balance.
        :param last_committed_transaction: The last_committed_transaction of this Balance.
        :param reference_date: The reference_date of this Balance.
        """
        self.openapi_types = {
            'balance_amount': Amount,
            'balance_type': BalanceType,
            'credit_limit_included': bool,
            'last_change_date_time': datetime,
            'last_committed_transaction': str,
            'reference_date': date
        }

        self.attribute_map = {
            'balance_amount': 'balanceAmount',
            'balance_type': 'balanceType',
            'credit_limit_included': 'creditLimitIncluded',
            'last_change_date_time': 'lastChangeDateTime',
            'last_committed_transaction': 'lastCommittedTransaction',
            'reference_date': 'referenceDate'
        }

        self._balance_amount = balance_amount
        self._balance_type = balance_type
        self._credit_limit_included = credit_limit_included
        self._last_change_date_time = last_change_date_time
        self._last_committed_transaction = last_committed_transaction
        self._reference_date = reference_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Balance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The balance of this Balance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance_amount(self):
        """Gets the balance_amount of this Balance.


        :return: The balance_amount of this Balance.
        :rtype: Amount
        """
        return self._balance_amount

    @balance_amount.setter
    def balance_amount(self, balance_amount):
        """Sets the balance_amount of this Balance.


        :param balance_amount: The balance_amount of this Balance.
        :type balance_amount: Amount
        """
        if balance_amount is None:
            raise ValueError("Invalid value for `balance_amount`, must not be `None`")

        self._balance_amount = balance_amount

    @property
    def balance_type(self):
        """Gets the balance_type of this Balance.


        :return: The balance_type of this Balance.
        :rtype: BalanceType
        """
        return self._balance_type

    @balance_type.setter
    def balance_type(self, balance_type):
        """Sets the balance_type of this Balance.


        :param balance_type: The balance_type of this Balance.
        :type balance_type: BalanceType
        """
        if balance_type is None:
            raise ValueError("Invalid value for `balance_type`, must not be `None`")

        self._balance_type = balance_type

    @property
    def credit_limit_included(self):
        """Gets the credit_limit_included of this Balance.

        A flag indicating if the credit limit of the corresponding account is included in the calculation of the balance, where applicable. 

        :return: The credit_limit_included of this Balance.
        :rtype: bool
        """
        return self._credit_limit_included

    @credit_limit_included.setter
    def credit_limit_included(self, credit_limit_included):
        """Sets the credit_limit_included of this Balance.

        A flag indicating if the credit limit of the corresponding account is included in the calculation of the balance, where applicable. 

        :param credit_limit_included: The credit_limit_included of this Balance.
        :type credit_limit_included: bool
        """

        self._credit_limit_included = credit_limit_included

    @property
    def last_change_date_time(self):
        """Gets the last_change_date_time of this Balance.

        This data element might be used to indicate e.g. with the expected or booked balance that no action is known on the account, which is not yet booked. 

        :return: The last_change_date_time of this Balance.
        :rtype: datetime
        """
        return self._last_change_date_time

    @last_change_date_time.setter
    def last_change_date_time(self, last_change_date_time):
        """Sets the last_change_date_time of this Balance.

        This data element might be used to indicate e.g. with the expected or booked balance that no action is known on the account, which is not yet booked. 

        :param last_change_date_time: The last_change_date_time of this Balance.
        :type last_change_date_time: datetime
        """

        self._last_change_date_time = last_change_date_time

    @property
    def last_committed_transaction(self):
        """Gets the last_committed_transaction of this Balance.

        \"entryReference\" of the last commited transaction to support the TPP in identifying whether all PSU transactions are already known. 

        :return: The last_committed_transaction of this Balance.
        :rtype: str
        """
        return self._last_committed_transaction

    @last_committed_transaction.setter
    def last_committed_transaction(self, last_committed_transaction):
        """Sets the last_committed_transaction of this Balance.

        \"entryReference\" of the last commited transaction to support the TPP in identifying whether all PSU transactions are already known. 

        :param last_committed_transaction: The last_committed_transaction of this Balance.
        :type last_committed_transaction: str
        """
        if last_committed_transaction is not None and len(last_committed_transaction) > 35:
            raise ValueError("Invalid value for `last_committed_transaction`, length must be less than or equal to `35`")

        self._last_committed_transaction = last_committed_transaction

    @property
    def reference_date(self):
        """Gets the reference_date of this Balance.

        Indicates the date of the balance.

        :return: The reference_date of this Balance.
        :rtype: date
        """
        return self._reference_date

    @reference_date.setter
    def reference_date(self, reference_date):
        """Sets the reference_date of this Balance.

        Indicates the date of the balance.

        :param reference_date: The reference_date of this Balance.
        :type reference_date: date
        """

        self._reference_date = reference_date
