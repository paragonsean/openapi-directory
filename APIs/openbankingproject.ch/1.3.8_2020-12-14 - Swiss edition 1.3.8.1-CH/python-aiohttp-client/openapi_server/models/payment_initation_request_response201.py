# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.authentication_object import AuthenticationObject
from openapi_server.models.challenge_data import ChallengeData
from openapi_server.models.links_payment_initiation import LinksPaymentInitiation
from openapi_server.models.tpp_message2_xx import TppMessage2XX
from openapi_server.models.transaction_status import TransactionStatus
from openapi_server import util


class PaymentInitationRequestResponse201(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: LinksPaymentInitiation=None, challenge_data: ChallengeData=None, chosen_sca_method: AuthenticationObject=None, currency_conversion_fee: Amount=None, estimated_interbank_settlement_amount: Amount=None, estimated_total_amount: Amount=None, payment_id: str=None, psu_message: str=None, sca_methods: List[AuthenticationObject]=None, tpp_messages: List[TppMessage2XX]=None, transaction_fee_indicator: bool=None, transaction_fees: Amount=None, transaction_status: TransactionStatus=None):
        """PaymentInitationRequestResponse201 - a model defined in OpenAPI

        :param links: The links of this PaymentInitationRequestResponse201.
        :param challenge_data: The challenge_data of this PaymentInitationRequestResponse201.
        :param chosen_sca_method: The chosen_sca_method of this PaymentInitationRequestResponse201.
        :param currency_conversion_fee: The currency_conversion_fee of this PaymentInitationRequestResponse201.
        :param estimated_interbank_settlement_amount: The estimated_interbank_settlement_amount of this PaymentInitationRequestResponse201.
        :param estimated_total_amount: The estimated_total_amount of this PaymentInitationRequestResponse201.
        :param payment_id: The payment_id of this PaymentInitationRequestResponse201.
        :param psu_message: The psu_message of this PaymentInitationRequestResponse201.
        :param sca_methods: The sca_methods of this PaymentInitationRequestResponse201.
        :param tpp_messages: The tpp_messages of this PaymentInitationRequestResponse201.
        :param transaction_fee_indicator: The transaction_fee_indicator of this PaymentInitationRequestResponse201.
        :param transaction_fees: The transaction_fees of this PaymentInitationRequestResponse201.
        :param transaction_status: The transaction_status of this PaymentInitationRequestResponse201.
        """
        self.openapi_types = {
            'links': LinksPaymentInitiation,
            'challenge_data': ChallengeData,
            'chosen_sca_method': AuthenticationObject,
            'currency_conversion_fee': Amount,
            'estimated_interbank_settlement_amount': Amount,
            'estimated_total_amount': Amount,
            'payment_id': str,
            'psu_message': str,
            'sca_methods': List[AuthenticationObject],
            'tpp_messages': List[TppMessage2XX],
            'transaction_fee_indicator': bool,
            'transaction_fees': Amount,
            'transaction_status': TransactionStatus
        }

        self.attribute_map = {
            'links': '_links',
            'challenge_data': 'challengeData',
            'chosen_sca_method': 'chosenScaMethod',
            'currency_conversion_fee': 'currencyConversionFee',
            'estimated_interbank_settlement_amount': 'estimatedInterbankSettlementAmount',
            'estimated_total_amount': 'estimatedTotalAmount',
            'payment_id': 'paymentId',
            'psu_message': 'psuMessage',
            'sca_methods': 'scaMethods',
            'tpp_messages': 'tppMessages',
            'transaction_fee_indicator': 'transactionFeeIndicator',
            'transaction_fees': 'transactionFees',
            'transaction_status': 'transactionStatus'
        }

        self._links = links
        self._challenge_data = challenge_data
        self._chosen_sca_method = chosen_sca_method
        self._currency_conversion_fee = currency_conversion_fee
        self._estimated_interbank_settlement_amount = estimated_interbank_settlement_amount
        self._estimated_total_amount = estimated_total_amount
        self._payment_id = payment_id
        self._psu_message = psu_message
        self._sca_methods = sca_methods
        self._tpp_messages = tpp_messages
        self._transaction_fee_indicator = transaction_fee_indicator
        self._transaction_fees = transaction_fees
        self._transaction_status = transaction_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentInitationRequestResponse201':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The paymentInitationRequestResponse-201 of this PaymentInitationRequestResponse201.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this PaymentInitationRequestResponse201.


        :return: The links of this PaymentInitationRequestResponse201.
        :rtype: LinksPaymentInitiation
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PaymentInitationRequestResponse201.


        :param links: The links of this PaymentInitationRequestResponse201.
        :type links: LinksPaymentInitiation
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def challenge_data(self):
        """Gets the challenge_data of this PaymentInitationRequestResponse201.


        :return: The challenge_data of this PaymentInitationRequestResponse201.
        :rtype: ChallengeData
        """
        return self._challenge_data

    @challenge_data.setter
    def challenge_data(self, challenge_data):
        """Sets the challenge_data of this PaymentInitationRequestResponse201.


        :param challenge_data: The challenge_data of this PaymentInitationRequestResponse201.
        :type challenge_data: ChallengeData
        """

        self._challenge_data = challenge_data

    @property
    def chosen_sca_method(self):
        """Gets the chosen_sca_method of this PaymentInitationRequestResponse201.


        :return: The chosen_sca_method of this PaymentInitationRequestResponse201.
        :rtype: AuthenticationObject
        """
        return self._chosen_sca_method

    @chosen_sca_method.setter
    def chosen_sca_method(self, chosen_sca_method):
        """Sets the chosen_sca_method of this PaymentInitationRequestResponse201.


        :param chosen_sca_method: The chosen_sca_method of this PaymentInitationRequestResponse201.
        :type chosen_sca_method: AuthenticationObject
        """

        self._chosen_sca_method = chosen_sca_method

    @property
    def currency_conversion_fee(self):
        """Gets the currency_conversion_fee of this PaymentInitationRequestResponse201.


        :return: The currency_conversion_fee of this PaymentInitationRequestResponse201.
        :rtype: Amount
        """
        return self._currency_conversion_fee

    @currency_conversion_fee.setter
    def currency_conversion_fee(self, currency_conversion_fee):
        """Sets the currency_conversion_fee of this PaymentInitationRequestResponse201.


        :param currency_conversion_fee: The currency_conversion_fee of this PaymentInitationRequestResponse201.
        :type currency_conversion_fee: Amount
        """

        self._currency_conversion_fee = currency_conversion_fee

    @property
    def estimated_interbank_settlement_amount(self):
        """Gets the estimated_interbank_settlement_amount of this PaymentInitationRequestResponse201.


        :return: The estimated_interbank_settlement_amount of this PaymentInitationRequestResponse201.
        :rtype: Amount
        """
        return self._estimated_interbank_settlement_amount

    @estimated_interbank_settlement_amount.setter
    def estimated_interbank_settlement_amount(self, estimated_interbank_settlement_amount):
        """Sets the estimated_interbank_settlement_amount of this PaymentInitationRequestResponse201.


        :param estimated_interbank_settlement_amount: The estimated_interbank_settlement_amount of this PaymentInitationRequestResponse201.
        :type estimated_interbank_settlement_amount: Amount
        """

        self._estimated_interbank_settlement_amount = estimated_interbank_settlement_amount

    @property
    def estimated_total_amount(self):
        """Gets the estimated_total_amount of this PaymentInitationRequestResponse201.


        :return: The estimated_total_amount of this PaymentInitationRequestResponse201.
        :rtype: Amount
        """
        return self._estimated_total_amount

    @estimated_total_amount.setter
    def estimated_total_amount(self, estimated_total_amount):
        """Sets the estimated_total_amount of this PaymentInitationRequestResponse201.


        :param estimated_total_amount: The estimated_total_amount of this PaymentInitationRequestResponse201.
        :type estimated_total_amount: Amount
        """

        self._estimated_total_amount = estimated_total_amount

    @property
    def payment_id(self):
        """Gets the payment_id of this PaymentInitationRequestResponse201.

        Resource identification of the generated payment initiation resource.

        :return: The payment_id of this PaymentInitationRequestResponse201.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this PaymentInitationRequestResponse201.

        Resource identification of the generated payment initiation resource.

        :param payment_id: The payment_id of this PaymentInitationRequestResponse201.
        :type payment_id: str
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")

        self._payment_id = payment_id

    @property
    def psu_message(self):
        """Gets the psu_message of this PaymentInitationRequestResponse201.

        Text to be displayed to the PSU.

        :return: The psu_message of this PaymentInitationRequestResponse201.
        :rtype: str
        """
        return self._psu_message

    @psu_message.setter
    def psu_message(self, psu_message):
        """Sets the psu_message of this PaymentInitationRequestResponse201.

        Text to be displayed to the PSU.

        :param psu_message: The psu_message of this PaymentInitationRequestResponse201.
        :type psu_message: str
        """
        if psu_message is not None and len(psu_message) > 500:
            raise ValueError("Invalid value for `psu_message`, length must be less than or equal to `500`")

        self._psu_message = psu_message

    @property
    def sca_methods(self):
        """Gets the sca_methods of this PaymentInitationRequestResponse201.

        This data element might be contained, if SCA is required and if the PSU has a choice between different authentication methods.  Depending on the risk management of the ASPSP this choice might be offered before or after the PSU has been identified with the first relevant factor, or if an access token is transported.  If this data element is contained, then there is also a hyperlink of type 'startAuthorisationWithAuthenticationMethodSelection' contained in the response body.  These methods shall be presented towards the PSU for selection by the TPP. 

        :return: The sca_methods of this PaymentInitationRequestResponse201.
        :rtype: List[AuthenticationObject]
        """
        return self._sca_methods

    @sca_methods.setter
    def sca_methods(self, sca_methods):
        """Sets the sca_methods of this PaymentInitationRequestResponse201.

        This data element might be contained, if SCA is required and if the PSU has a choice between different authentication methods.  Depending on the risk management of the ASPSP this choice might be offered before or after the PSU has been identified with the first relevant factor, or if an access token is transported.  If this data element is contained, then there is also a hyperlink of type 'startAuthorisationWithAuthenticationMethodSelection' contained in the response body.  These methods shall be presented towards the PSU for selection by the TPP. 

        :param sca_methods: The sca_methods of this PaymentInitationRequestResponse201.
        :type sca_methods: List[AuthenticationObject]
        """

        self._sca_methods = sca_methods

    @property
    def tpp_messages(self):
        """Gets the tpp_messages of this PaymentInitationRequestResponse201.


        :return: The tpp_messages of this PaymentInitationRequestResponse201.
        :rtype: List[TppMessage2XX]
        """
        return self._tpp_messages

    @tpp_messages.setter
    def tpp_messages(self, tpp_messages):
        """Sets the tpp_messages of this PaymentInitationRequestResponse201.


        :param tpp_messages: The tpp_messages of this PaymentInitationRequestResponse201.
        :type tpp_messages: List[TppMessage2XX]
        """

        self._tpp_messages = tpp_messages

    @property
    def transaction_fee_indicator(self):
        """Gets the transaction_fee_indicator of this PaymentInitationRequestResponse201.

        If equals 'true', the transaction will involve specific transaction cost as shown by the ASPSP in their public price list or as agreed between ASPSP and PSU. If equals 'false', the transaction will not involve additional specific transaction costs to the PSU unless the fee amount is given specifically in the data elements transactionFees and/or currencyConversionFees. If this data element is not used, there is no information about transaction fees unless the fee amount is given explicitly in the data element transactionFees and/or currencyConversionFees. 

        :return: The transaction_fee_indicator of this PaymentInitationRequestResponse201.
        :rtype: bool
        """
        return self._transaction_fee_indicator

    @transaction_fee_indicator.setter
    def transaction_fee_indicator(self, transaction_fee_indicator):
        """Sets the transaction_fee_indicator of this PaymentInitationRequestResponse201.

        If equals 'true', the transaction will involve specific transaction cost as shown by the ASPSP in their public price list or as agreed between ASPSP and PSU. If equals 'false', the transaction will not involve additional specific transaction costs to the PSU unless the fee amount is given specifically in the data elements transactionFees and/or currencyConversionFees. If this data element is not used, there is no information about transaction fees unless the fee amount is given explicitly in the data element transactionFees and/or currencyConversionFees. 

        :param transaction_fee_indicator: The transaction_fee_indicator of this PaymentInitationRequestResponse201.
        :type transaction_fee_indicator: bool
        """

        self._transaction_fee_indicator = transaction_fee_indicator

    @property
    def transaction_fees(self):
        """Gets the transaction_fees of this PaymentInitationRequestResponse201.


        :return: The transaction_fees of this PaymentInitationRequestResponse201.
        :rtype: Amount
        """
        return self._transaction_fees

    @transaction_fees.setter
    def transaction_fees(self, transaction_fees):
        """Sets the transaction_fees of this PaymentInitationRequestResponse201.


        :param transaction_fees: The transaction_fees of this PaymentInitationRequestResponse201.
        :type transaction_fees: Amount
        """

        self._transaction_fees = transaction_fees

    @property
    def transaction_status(self):
        """Gets the transaction_status of this PaymentInitationRequestResponse201.


        :return: The transaction_status of this PaymentInitationRequestResponse201.
        :rtype: TransactionStatus
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this PaymentInitationRequestResponse201.


        :param transaction_status: The transaction_status of this PaymentInitationRequestResponse201.
        :type transaction_status: TransactionStatus
        """
        if transaction_status is None:
            raise ValueError("Invalid value for `transaction_status`, must not be `None`")

        self._transaction_status = transaction_status
