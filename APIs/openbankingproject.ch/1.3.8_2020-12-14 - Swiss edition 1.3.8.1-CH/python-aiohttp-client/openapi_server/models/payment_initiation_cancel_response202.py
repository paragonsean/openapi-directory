# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_object import AuthenticationObject
from openapi_server.models.challenge_data import ChallengeData
from openapi_server.models.links_payment_initiation_cancel import LinksPaymentInitiationCancel
from openapi_server.models.transaction_status import TransactionStatus
from openapi_server import util


class PaymentInitiationCancelResponse202(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: LinksPaymentInitiationCancel=None, challenge_data: ChallengeData=None, chosen_sca_method: AuthenticationObject=None, sca_methods: List[AuthenticationObject]=None, transaction_status: TransactionStatus=None):
        """PaymentInitiationCancelResponse202 - a model defined in OpenAPI

        :param links: The links of this PaymentInitiationCancelResponse202.
        :param challenge_data: The challenge_data of this PaymentInitiationCancelResponse202.
        :param chosen_sca_method: The chosen_sca_method of this PaymentInitiationCancelResponse202.
        :param sca_methods: The sca_methods of this PaymentInitiationCancelResponse202.
        :param transaction_status: The transaction_status of this PaymentInitiationCancelResponse202.
        """
        self.openapi_types = {
            'links': LinksPaymentInitiationCancel,
            'challenge_data': ChallengeData,
            'chosen_sca_method': AuthenticationObject,
            'sca_methods': List[AuthenticationObject],
            'transaction_status': TransactionStatus
        }

        self.attribute_map = {
            'links': '_links',
            'challenge_data': 'challengeData',
            'chosen_sca_method': 'chosenScaMethod',
            'sca_methods': 'scaMethods',
            'transaction_status': 'transactionStatus'
        }

        self._links = links
        self._challenge_data = challenge_data
        self._chosen_sca_method = chosen_sca_method
        self._sca_methods = sca_methods
        self._transaction_status = transaction_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentInitiationCancelResponse202':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The paymentInitiationCancelResponse-202 of this PaymentInitiationCancelResponse202.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this PaymentInitiationCancelResponse202.


        :return: The links of this PaymentInitiationCancelResponse202.
        :rtype: LinksPaymentInitiationCancel
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PaymentInitiationCancelResponse202.


        :param links: The links of this PaymentInitiationCancelResponse202.
        :type links: LinksPaymentInitiationCancel
        """

        self._links = links

    @property
    def challenge_data(self):
        """Gets the challenge_data of this PaymentInitiationCancelResponse202.


        :return: The challenge_data of this PaymentInitiationCancelResponse202.
        :rtype: ChallengeData
        """
        return self._challenge_data

    @challenge_data.setter
    def challenge_data(self, challenge_data):
        """Sets the challenge_data of this PaymentInitiationCancelResponse202.


        :param challenge_data: The challenge_data of this PaymentInitiationCancelResponse202.
        :type challenge_data: ChallengeData
        """

        self._challenge_data = challenge_data

    @property
    def chosen_sca_method(self):
        """Gets the chosen_sca_method of this PaymentInitiationCancelResponse202.


        :return: The chosen_sca_method of this PaymentInitiationCancelResponse202.
        :rtype: AuthenticationObject
        """
        return self._chosen_sca_method

    @chosen_sca_method.setter
    def chosen_sca_method(self, chosen_sca_method):
        """Sets the chosen_sca_method of this PaymentInitiationCancelResponse202.


        :param chosen_sca_method: The chosen_sca_method of this PaymentInitiationCancelResponse202.
        :type chosen_sca_method: AuthenticationObject
        """

        self._chosen_sca_method = chosen_sca_method

    @property
    def sca_methods(self):
        """Gets the sca_methods of this PaymentInitiationCancelResponse202.

        This data element might be contained, if SCA is required and if the PSU has a choice between different authentication methods.  Depending on the risk management of the ASPSP this choice might be offered before or after the PSU has been identified with the first relevant factor, or if an access token is transported.  If this data element is contained, then there is also a hyperlink of type 'startAuthorisationWithAuthenticationMethodSelection' contained in the response body.  These methods shall be presented towards the PSU for selection by the TPP. 

        :return: The sca_methods of this PaymentInitiationCancelResponse202.
        :rtype: List[AuthenticationObject]
        """
        return self._sca_methods

    @sca_methods.setter
    def sca_methods(self, sca_methods):
        """Sets the sca_methods of this PaymentInitiationCancelResponse202.

        This data element might be contained, if SCA is required and if the PSU has a choice between different authentication methods.  Depending on the risk management of the ASPSP this choice might be offered before or after the PSU has been identified with the first relevant factor, or if an access token is transported.  If this data element is contained, then there is also a hyperlink of type 'startAuthorisationWithAuthenticationMethodSelection' contained in the response body.  These methods shall be presented towards the PSU for selection by the TPP. 

        :param sca_methods: The sca_methods of this PaymentInitiationCancelResponse202.
        :type sca_methods: List[AuthenticationObject]
        """

        self._sca_methods = sca_methods

    @property
    def transaction_status(self):
        """Gets the transaction_status of this PaymentInitiationCancelResponse202.


        :return: The transaction_status of this PaymentInitiationCancelResponse202.
        :rtype: TransactionStatus
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this PaymentInitiationCancelResponse202.


        :param transaction_status: The transaction_status of this PaymentInitiationCancelResponse202.
        :type transaction_status: TransactionStatus
        """
        if transaction_status is None:
            raise ValueError("Invalid value for `transaction_status`, must not be `None`")

        self._transaction_status = transaction_status
