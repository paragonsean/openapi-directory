# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_reference16_ch import AccountReference16CH
from openapi_server.models.address import Address
from openapi_server.models.amount import Amount
from openapi_server.models.bulk_payment_initiation_with_status_response import BulkPaymentInitiationWithStatusResponse
from openapi_server.models.creditor_agent7_ch import CreditorAgent7CH
from openapi_server.models.day_of_execution import DayOfExecution
from openapi_server.models.execution_rule import ExecutionRule
from openapi_server.models.frequency_code import FrequencyCode
from openapi_server.models.payment_initiation_bulk_element_json import PaymentInitiationBulkElementJson
from openapi_server.models.payment_initiation_with_status_response import PaymentInitiationWithStatusResponse
from openapi_server.models.periodic_payment_initiation_with_status_response import PeriodicPaymentInitiationWithStatusResponse
from openapi_server.models.purpose_code import PurposeCode
from openapi_server.models.remittance_information_structured import RemittanceInformationStructured
from openapi_server.models.transaction_status import TransactionStatus
from openapi_server import util


class GetPaymentInformation200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creditor_account: AccountReference16CH=None, creditor_address: Address=None, creditor_agent: CreditorAgent7CH=None, creditor_name: str=None, debtor_account: AccountReference16CH=None, end_to_end_identification: str=None, instructed_amount: Amount=None, purpose_code: PurposeCode=None, remittance_information_structured: RemittanceInformationStructured=None, remittance_information_unstructured: str=None, remittance_information_unstructured_array: List[str]=None, requested_execution_date: date=None, requested_execution_time: datetime=None, transaction_status: TransactionStatus=None, ultimate_creditor: str=None, ultimate_debtor: str=None, day_of_execution: DayOfExecution=None, end_date: date=None, execution_rule: ExecutionRule=None, frequency: FrequencyCode=None, start_date: date=None, acceptor_transaction_date_time: datetime=None, batch_booking_preferred: bool=None, payment_information_id: str=None, payments: List[PaymentInitiationBulkElementJson]=None):
        """GetPaymentInformation200Response - a model defined in OpenAPI

        :param creditor_account: The creditor_account of this GetPaymentInformation200Response.
        :param creditor_address: The creditor_address of this GetPaymentInformation200Response.
        :param creditor_agent: The creditor_agent of this GetPaymentInformation200Response.
        :param creditor_name: The creditor_name of this GetPaymentInformation200Response.
        :param debtor_account: The debtor_account of this GetPaymentInformation200Response.
        :param end_to_end_identification: The end_to_end_identification of this GetPaymentInformation200Response.
        :param instructed_amount: The instructed_amount of this GetPaymentInformation200Response.
        :param purpose_code: The purpose_code of this GetPaymentInformation200Response.
        :param remittance_information_structured: The remittance_information_structured of this GetPaymentInformation200Response.
        :param remittance_information_unstructured: The remittance_information_unstructured of this GetPaymentInformation200Response.
        :param remittance_information_unstructured_array: The remittance_information_unstructured_array of this GetPaymentInformation200Response.
        :param requested_execution_date: The requested_execution_date of this GetPaymentInformation200Response.
        :param requested_execution_time: The requested_execution_time of this GetPaymentInformation200Response.
        :param transaction_status: The transaction_status of this GetPaymentInformation200Response.
        :param ultimate_creditor: The ultimate_creditor of this GetPaymentInformation200Response.
        :param ultimate_debtor: The ultimate_debtor of this GetPaymentInformation200Response.
        :param day_of_execution: The day_of_execution of this GetPaymentInformation200Response.
        :param end_date: The end_date of this GetPaymentInformation200Response.
        :param execution_rule: The execution_rule of this GetPaymentInformation200Response.
        :param frequency: The frequency of this GetPaymentInformation200Response.
        :param start_date: The start_date of this GetPaymentInformation200Response.
        :param acceptor_transaction_date_time: The acceptor_transaction_date_time of this GetPaymentInformation200Response.
        :param batch_booking_preferred: The batch_booking_preferred of this GetPaymentInformation200Response.
        :param payment_information_id: The payment_information_id of this GetPaymentInformation200Response.
        :param payments: The payments of this GetPaymentInformation200Response.
        """
        self.openapi_types = {
            'creditor_account': AccountReference16CH,
            'creditor_address': Address,
            'creditor_agent': CreditorAgent7CH,
            'creditor_name': str,
            'debtor_account': AccountReference16CH,
            'end_to_end_identification': str,
            'instructed_amount': Amount,
            'purpose_code': PurposeCode,
            'remittance_information_structured': RemittanceInformationStructured,
            'remittance_information_unstructured': str,
            'remittance_information_unstructured_array': List[str],
            'requested_execution_date': date,
            'requested_execution_time': datetime,
            'transaction_status': TransactionStatus,
            'ultimate_creditor': str,
            'ultimate_debtor': str,
            'day_of_execution': DayOfExecution,
            'end_date': date,
            'execution_rule': ExecutionRule,
            'frequency': FrequencyCode,
            'start_date': date,
            'acceptor_transaction_date_time': datetime,
            'batch_booking_preferred': bool,
            'payment_information_id': str,
            'payments': List[PaymentInitiationBulkElementJson]
        }

        self.attribute_map = {
            'creditor_account': 'creditorAccount',
            'creditor_address': 'creditorAddress',
            'creditor_agent': 'creditorAgent',
            'creditor_name': 'creditorName',
            'debtor_account': 'debtorAccount',
            'end_to_end_identification': 'endToEndIdentification',
            'instructed_amount': 'instructedAmount',
            'purpose_code': 'purposeCode',
            'remittance_information_structured': 'remittanceInformationStructured',
            'remittance_information_unstructured': 'remittanceInformationUnstructured',
            'remittance_information_unstructured_array': 'remittanceInformationUnstructuredArray',
            'requested_execution_date': 'requestedExecutionDate',
            'requested_execution_time': 'requestedExecutionTime',
            'transaction_status': 'transactionStatus',
            'ultimate_creditor': 'ultimateCreditor',
            'ultimate_debtor': 'ultimateDebtor',
            'day_of_execution': 'dayOfExecution',
            'end_date': 'endDate',
            'execution_rule': 'executionRule',
            'frequency': 'frequency',
            'start_date': 'startDate',
            'acceptor_transaction_date_time': 'acceptorTransactionDateTime',
            'batch_booking_preferred': 'batchBookingPreferred',
            'payment_information_id': 'paymentInformationId',
            'payments': 'payments'
        }

        self._creditor_account = creditor_account
        self._creditor_address = creditor_address
        self._creditor_agent = creditor_agent
        self._creditor_name = creditor_name
        self._debtor_account = debtor_account
        self._end_to_end_identification = end_to_end_identification
        self._instructed_amount = instructed_amount
        self._purpose_code = purpose_code
        self._remittance_information_structured = remittance_information_structured
        self._remittance_information_unstructured = remittance_information_unstructured
        self._remittance_information_unstructured_array = remittance_information_unstructured_array
        self._requested_execution_date = requested_execution_date
        self._requested_execution_time = requested_execution_time
        self._transaction_status = transaction_status
        self._ultimate_creditor = ultimate_creditor
        self._ultimate_debtor = ultimate_debtor
        self._day_of_execution = day_of_execution
        self._end_date = end_date
        self._execution_rule = execution_rule
        self._frequency = frequency
        self._start_date = start_date
        self._acceptor_transaction_date_time = acceptor_transaction_date_time
        self._batch_booking_preferred = batch_booking_preferred
        self._payment_information_id = payment_information_id
        self._payments = payments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPaymentInformation200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getPaymentInformation_200_response of this GetPaymentInformation200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creditor_account(self):
        """Gets the creditor_account of this GetPaymentInformation200Response.


        :return: The creditor_account of this GetPaymentInformation200Response.
        :rtype: AccountReference16CH
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this GetPaymentInformation200Response.


        :param creditor_account: The creditor_account of this GetPaymentInformation200Response.
        :type creditor_account: AccountReference16CH
        """
        if creditor_account is None:
            raise ValueError("Invalid value for `creditor_account`, must not be `None`")

        self._creditor_account = creditor_account

    @property
    def creditor_address(self):
        """Gets the creditor_address of this GetPaymentInformation200Response.


        :return: The creditor_address of this GetPaymentInformation200Response.
        :rtype: Address
        """
        return self._creditor_address

    @creditor_address.setter
    def creditor_address(self, creditor_address):
        """Sets the creditor_address of this GetPaymentInformation200Response.


        :param creditor_address: The creditor_address of this GetPaymentInformation200Response.
        :type creditor_address: Address
        """

        self._creditor_address = creditor_address

    @property
    def creditor_agent(self):
        """Gets the creditor_agent of this GetPaymentInformation200Response.


        :return: The creditor_agent of this GetPaymentInformation200Response.
        :rtype: CreditorAgent7CH
        """
        return self._creditor_agent

    @creditor_agent.setter
    def creditor_agent(self, creditor_agent):
        """Sets the creditor_agent of this GetPaymentInformation200Response.


        :param creditor_agent: The creditor_agent of this GetPaymentInformation200Response.
        :type creditor_agent: CreditorAgent7CH
        """

        self._creditor_agent = creditor_agent

    @property
    def creditor_name(self):
        """Gets the creditor_name of this GetPaymentInformation200Response.

        Creditor name.

        :return: The creditor_name of this GetPaymentInformation200Response.
        :rtype: str
        """
        return self._creditor_name

    @creditor_name.setter
    def creditor_name(self, creditor_name):
        """Sets the creditor_name of this GetPaymentInformation200Response.

        Creditor name.

        :param creditor_name: The creditor_name of this GetPaymentInformation200Response.
        :type creditor_name: str
        """
        if creditor_name is None:
            raise ValueError("Invalid value for `creditor_name`, must not be `None`")
        if creditor_name is not None and len(creditor_name) > 70:
            raise ValueError("Invalid value for `creditor_name`, length must be less than or equal to `70`")

        self._creditor_name = creditor_name

    @property
    def debtor_account(self):
        """Gets the debtor_account of this GetPaymentInformation200Response.


        :return: The debtor_account of this GetPaymentInformation200Response.
        :rtype: AccountReference16CH
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this GetPaymentInformation200Response.


        :param debtor_account: The debtor_account of this GetPaymentInformation200Response.
        :type debtor_account: AccountReference16CH
        """
        if debtor_account is None:
            raise ValueError("Invalid value for `debtor_account`, must not be `None`")

        self._debtor_account = debtor_account

    @property
    def end_to_end_identification(self):
        """Gets the end_to_end_identification of this GetPaymentInformation200Response.


        :return: The end_to_end_identification of this GetPaymentInformation200Response.
        :rtype: str
        """
        return self._end_to_end_identification

    @end_to_end_identification.setter
    def end_to_end_identification(self, end_to_end_identification):
        """Sets the end_to_end_identification of this GetPaymentInformation200Response.


        :param end_to_end_identification: The end_to_end_identification of this GetPaymentInformation200Response.
        :type end_to_end_identification: str
        """
        if end_to_end_identification is not None and len(end_to_end_identification) > 35:
            raise ValueError("Invalid value for `end_to_end_identification`, length must be less than or equal to `35`")

        self._end_to_end_identification = end_to_end_identification

    @property
    def instructed_amount(self):
        """Gets the instructed_amount of this GetPaymentInformation200Response.


        :return: The instructed_amount of this GetPaymentInformation200Response.
        :rtype: Amount
        """
        return self._instructed_amount

    @instructed_amount.setter
    def instructed_amount(self, instructed_amount):
        """Sets the instructed_amount of this GetPaymentInformation200Response.


        :param instructed_amount: The instructed_amount of this GetPaymentInformation200Response.
        :type instructed_amount: Amount
        """
        if instructed_amount is None:
            raise ValueError("Invalid value for `instructed_amount`, must not be `None`")

        self._instructed_amount = instructed_amount

    @property
    def purpose_code(self):
        """Gets the purpose_code of this GetPaymentInformation200Response.


        :return: The purpose_code of this GetPaymentInformation200Response.
        :rtype: PurposeCode
        """
        return self._purpose_code

    @purpose_code.setter
    def purpose_code(self, purpose_code):
        """Sets the purpose_code of this GetPaymentInformation200Response.


        :param purpose_code: The purpose_code of this GetPaymentInformation200Response.
        :type purpose_code: PurposeCode
        """

        self._purpose_code = purpose_code

    @property
    def remittance_information_structured(self):
        """Gets the remittance_information_structured of this GetPaymentInformation200Response.


        :return: The remittance_information_structured of this GetPaymentInformation200Response.
        :rtype: RemittanceInformationStructured
        """
        return self._remittance_information_structured

    @remittance_information_structured.setter
    def remittance_information_structured(self, remittance_information_structured):
        """Sets the remittance_information_structured of this GetPaymentInformation200Response.


        :param remittance_information_structured: The remittance_information_structured of this GetPaymentInformation200Response.
        :type remittance_information_structured: RemittanceInformationStructured
        """

        self._remittance_information_structured = remittance_information_structured

    @property
    def remittance_information_unstructured(self):
        """Gets the remittance_information_unstructured of this GetPaymentInformation200Response.

        Unstructured remittance information. 

        :return: The remittance_information_unstructured of this GetPaymentInformation200Response.
        :rtype: str
        """
        return self._remittance_information_unstructured

    @remittance_information_unstructured.setter
    def remittance_information_unstructured(self, remittance_information_unstructured):
        """Sets the remittance_information_unstructured of this GetPaymentInformation200Response.

        Unstructured remittance information. 

        :param remittance_information_unstructured: The remittance_information_unstructured of this GetPaymentInformation200Response.
        :type remittance_information_unstructured: str
        """
        if remittance_information_unstructured is not None and len(remittance_information_unstructured) > 140:
            raise ValueError("Invalid value for `remittance_information_unstructured`, length must be less than or equal to `140`")

        self._remittance_information_unstructured = remittance_information_unstructured

    @property
    def remittance_information_unstructured_array(self):
        """Gets the remittance_information_unstructured_array of this GetPaymentInformation200Response.

        Array of unstructured remittance information. 

        :return: The remittance_information_unstructured_array of this GetPaymentInformation200Response.
        :rtype: List[str]
        """
        return self._remittance_information_unstructured_array

    @remittance_information_unstructured_array.setter
    def remittance_information_unstructured_array(self, remittance_information_unstructured_array):
        """Sets the remittance_information_unstructured_array of this GetPaymentInformation200Response.

        Array of unstructured remittance information. 

        :param remittance_information_unstructured_array: The remittance_information_unstructured_array of this GetPaymentInformation200Response.
        :type remittance_information_unstructured_array: List[str]
        """

        self._remittance_information_unstructured_array = remittance_information_unstructured_array

    @property
    def requested_execution_date(self):
        """Gets the requested_execution_date of this GetPaymentInformation200Response.


        :return: The requested_execution_date of this GetPaymentInformation200Response.
        :rtype: date
        """
        return self._requested_execution_date

    @requested_execution_date.setter
    def requested_execution_date(self, requested_execution_date):
        """Sets the requested_execution_date of this GetPaymentInformation200Response.


        :param requested_execution_date: The requested_execution_date of this GetPaymentInformation200Response.
        :type requested_execution_date: date
        """

        self._requested_execution_date = requested_execution_date

    @property
    def requested_execution_time(self):
        """Gets the requested_execution_time of this GetPaymentInformation200Response.


        :return: The requested_execution_time of this GetPaymentInformation200Response.
        :rtype: datetime
        """
        return self._requested_execution_time

    @requested_execution_time.setter
    def requested_execution_time(self, requested_execution_time):
        """Sets the requested_execution_time of this GetPaymentInformation200Response.


        :param requested_execution_time: The requested_execution_time of this GetPaymentInformation200Response.
        :type requested_execution_time: datetime
        """

        self._requested_execution_time = requested_execution_time

    @property
    def transaction_status(self):
        """Gets the transaction_status of this GetPaymentInformation200Response.


        :return: The transaction_status of this GetPaymentInformation200Response.
        :rtype: TransactionStatus
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this GetPaymentInformation200Response.


        :param transaction_status: The transaction_status of this GetPaymentInformation200Response.
        :type transaction_status: TransactionStatus
        """

        self._transaction_status = transaction_status

    @property
    def ultimate_creditor(self):
        """Gets the ultimate_creditor of this GetPaymentInformation200Response.

        Ultimate creditor.

        :return: The ultimate_creditor of this GetPaymentInformation200Response.
        :rtype: str
        """
        return self._ultimate_creditor

    @ultimate_creditor.setter
    def ultimate_creditor(self, ultimate_creditor):
        """Sets the ultimate_creditor of this GetPaymentInformation200Response.

        Ultimate creditor.

        :param ultimate_creditor: The ultimate_creditor of this GetPaymentInformation200Response.
        :type ultimate_creditor: str
        """
        if ultimate_creditor is not None and len(ultimate_creditor) > 70:
            raise ValueError("Invalid value for `ultimate_creditor`, length must be less than or equal to `70`")

        self._ultimate_creditor = ultimate_creditor

    @property
    def ultimate_debtor(self):
        """Gets the ultimate_debtor of this GetPaymentInformation200Response.

        Ultimate debtor.

        :return: The ultimate_debtor of this GetPaymentInformation200Response.
        :rtype: str
        """
        return self._ultimate_debtor

    @ultimate_debtor.setter
    def ultimate_debtor(self, ultimate_debtor):
        """Sets the ultimate_debtor of this GetPaymentInformation200Response.

        Ultimate debtor.

        :param ultimate_debtor: The ultimate_debtor of this GetPaymentInformation200Response.
        :type ultimate_debtor: str
        """
        if ultimate_debtor is not None and len(ultimate_debtor) > 70:
            raise ValueError("Invalid value for `ultimate_debtor`, length must be less than or equal to `70`")

        self._ultimate_debtor = ultimate_debtor

    @property
    def day_of_execution(self):
        """Gets the day_of_execution of this GetPaymentInformation200Response.


        :return: The day_of_execution of this GetPaymentInformation200Response.
        :rtype: DayOfExecution
        """
        return self._day_of_execution

    @day_of_execution.setter
    def day_of_execution(self, day_of_execution):
        """Sets the day_of_execution of this GetPaymentInformation200Response.


        :param day_of_execution: The day_of_execution of this GetPaymentInformation200Response.
        :type day_of_execution: DayOfExecution
        """

        self._day_of_execution = day_of_execution

    @property
    def end_date(self):
        """Gets the end_date of this GetPaymentInformation200Response.

        The last applicable day of execution. If not given, it is an infinite standing order. 

        :return: The end_date of this GetPaymentInformation200Response.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this GetPaymentInformation200Response.

        The last applicable day of execution. If not given, it is an infinite standing order. 

        :param end_date: The end_date of this GetPaymentInformation200Response.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def execution_rule(self):
        """Gets the execution_rule of this GetPaymentInformation200Response.


        :return: The execution_rule of this GetPaymentInformation200Response.
        :rtype: ExecutionRule
        """
        return self._execution_rule

    @execution_rule.setter
    def execution_rule(self, execution_rule):
        """Sets the execution_rule of this GetPaymentInformation200Response.


        :param execution_rule: The execution_rule of this GetPaymentInformation200Response.
        :type execution_rule: ExecutionRule
        """

        self._execution_rule = execution_rule

    @property
    def frequency(self):
        """Gets the frequency of this GetPaymentInformation200Response.


        :return: The frequency of this GetPaymentInformation200Response.
        :rtype: FrequencyCode
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this GetPaymentInformation200Response.


        :param frequency: The frequency of this GetPaymentInformation200Response.
        :type frequency: FrequencyCode
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")

        self._frequency = frequency

    @property
    def start_date(self):
        """Gets the start_date of this GetPaymentInformation200Response.

        The first applicable day of execution starting from this date is the first payment. 

        :return: The start_date of this GetPaymentInformation200Response.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GetPaymentInformation200Response.

        The first applicable day of execution starting from this date is the first payment. 

        :param start_date: The start_date of this GetPaymentInformation200Response.
        :type start_date: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def acceptor_transaction_date_time(self):
        """Gets the acceptor_transaction_date_time of this GetPaymentInformation200Response.


        :return: The acceptor_transaction_date_time of this GetPaymentInformation200Response.
        :rtype: datetime
        """
        return self._acceptor_transaction_date_time

    @acceptor_transaction_date_time.setter
    def acceptor_transaction_date_time(self, acceptor_transaction_date_time):
        """Sets the acceptor_transaction_date_time of this GetPaymentInformation200Response.


        :param acceptor_transaction_date_time: The acceptor_transaction_date_time of this GetPaymentInformation200Response.
        :type acceptor_transaction_date_time: datetime
        """

        self._acceptor_transaction_date_time = acceptor_transaction_date_time

    @property
    def batch_booking_preferred(self):
        """Gets the batch_booking_preferred of this GetPaymentInformation200Response.

        If this element equals 'true', the PSU prefers only one booking entry. If this element equals 'false', the PSU prefers individual booking of all contained individual transactions.  The ASPSP will follow this preference according to contracts agreed on with the PSU. 

        :return: The batch_booking_preferred of this GetPaymentInformation200Response.
        :rtype: bool
        """
        return self._batch_booking_preferred

    @batch_booking_preferred.setter
    def batch_booking_preferred(self, batch_booking_preferred):
        """Sets the batch_booking_preferred of this GetPaymentInformation200Response.

        If this element equals 'true', the PSU prefers only one booking entry. If this element equals 'false', the PSU prefers individual booking of all contained individual transactions.  The ASPSP will follow this preference according to contracts agreed on with the PSU. 

        :param batch_booking_preferred: The batch_booking_preferred of this GetPaymentInformation200Response.
        :type batch_booking_preferred: bool
        """

        self._batch_booking_preferred = batch_booking_preferred

    @property
    def payment_information_id(self):
        """Gets the payment_information_id of this GetPaymentInformation200Response.


        :return: The payment_information_id of this GetPaymentInformation200Response.
        :rtype: str
        """
        return self._payment_information_id

    @payment_information_id.setter
    def payment_information_id(self, payment_information_id):
        """Sets the payment_information_id of this GetPaymentInformation200Response.


        :param payment_information_id: The payment_information_id of this GetPaymentInformation200Response.
        :type payment_information_id: str
        """
        if payment_information_id is not None and len(payment_information_id) > 35:
            raise ValueError("Invalid value for `payment_information_id`, length must be less than or equal to `35`")

        self._payment_information_id = payment_information_id

    @property
    def payments(self):
        """Gets the payments of this GetPaymentInformation200Response.

        A list of generic JSON bodies payment initations for bulk payments via JSON.  Note: Some fields from single payments do not occcur in a bulk payment element 

        :return: The payments of this GetPaymentInformation200Response.
        :rtype: List[PaymentInitiationBulkElementJson]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this GetPaymentInformation200Response.

        A list of generic JSON bodies payment initations for bulk payments via JSON.  Note: Some fields from single payments do not occcur in a bulk payment element 

        :param payments: The payments of this GetPaymentInformation200Response.
        :type payments: List[PaymentInitiationBulkElementJson]
        """
        if payments is None:
            raise ValueError("Invalid value for `payments`, must not be `None`")

        self._payments = payments
