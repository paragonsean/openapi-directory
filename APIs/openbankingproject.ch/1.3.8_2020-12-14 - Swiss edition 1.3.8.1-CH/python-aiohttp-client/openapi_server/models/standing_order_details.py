# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.day_of_execution import DayOfExecution
from openapi_server.models.execution_rule import ExecutionRule
from openapi_server.models.frequency_code import FrequencyCode
from openapi_server import util


class StandingOrderDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_execution: DayOfExecution=None, end_date: date=None, execution_rule: ExecutionRule=None, frequency: FrequencyCode=None, limit_amount: Amount=None, months_of_execution: List[str]=None, multiplicator: int=None, start_date: date=None, within_a_month_flag: bool=None):
        """StandingOrderDetails - a model defined in OpenAPI

        :param day_of_execution: The day_of_execution of this StandingOrderDetails.
        :param end_date: The end_date of this StandingOrderDetails.
        :param execution_rule: The execution_rule of this StandingOrderDetails.
        :param frequency: The frequency of this StandingOrderDetails.
        :param limit_amount: The limit_amount of this StandingOrderDetails.
        :param months_of_execution: The months_of_execution of this StandingOrderDetails.
        :param multiplicator: The multiplicator of this StandingOrderDetails.
        :param start_date: The start_date of this StandingOrderDetails.
        :param within_a_month_flag: The within_a_month_flag of this StandingOrderDetails.
        """
        self.openapi_types = {
            'day_of_execution': DayOfExecution,
            'end_date': date,
            'execution_rule': ExecutionRule,
            'frequency': FrequencyCode,
            'limit_amount': Amount,
            'months_of_execution': List[str],
            'multiplicator': int,
            'start_date': date,
            'within_a_month_flag': bool
        }

        self.attribute_map = {
            'day_of_execution': 'dayOfExecution',
            'end_date': 'endDate',
            'execution_rule': 'executionRule',
            'frequency': 'frequency',
            'limit_amount': 'limitAmount',
            'months_of_execution': 'monthsOfExecution',
            'multiplicator': 'multiplicator',
            'start_date': 'startDate',
            'within_a_month_flag': 'withinAMonthFlag'
        }

        self._day_of_execution = day_of_execution
        self._end_date = end_date
        self._execution_rule = execution_rule
        self._frequency = frequency
        self._limit_amount = limit_amount
        self._months_of_execution = months_of_execution
        self._multiplicator = multiplicator
        self._start_date = start_date
        self._within_a_month_flag = within_a_month_flag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StandingOrderDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The standingOrderDetails of this StandingOrderDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_execution(self):
        """Gets the day_of_execution of this StandingOrderDetails.


        :return: The day_of_execution of this StandingOrderDetails.
        :rtype: DayOfExecution
        """
        return self._day_of_execution

    @day_of_execution.setter
    def day_of_execution(self, day_of_execution):
        """Sets the day_of_execution of this StandingOrderDetails.


        :param day_of_execution: The day_of_execution of this StandingOrderDetails.
        :type day_of_execution: DayOfExecution
        """

        self._day_of_execution = day_of_execution

    @property
    def end_date(self):
        """Gets the end_date of this StandingOrderDetails.

        The last applicable day of execution. If not given, it is an infinite standing order. 

        :return: The end_date of this StandingOrderDetails.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this StandingOrderDetails.

        The last applicable day of execution. If not given, it is an infinite standing order. 

        :param end_date: The end_date of this StandingOrderDetails.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def execution_rule(self):
        """Gets the execution_rule of this StandingOrderDetails.


        :return: The execution_rule of this StandingOrderDetails.
        :rtype: ExecutionRule
        """
        return self._execution_rule

    @execution_rule.setter
    def execution_rule(self, execution_rule):
        """Sets the execution_rule of this StandingOrderDetails.


        :param execution_rule: The execution_rule of this StandingOrderDetails.
        :type execution_rule: ExecutionRule
        """

        self._execution_rule = execution_rule

    @property
    def frequency(self):
        """Gets the frequency of this StandingOrderDetails.


        :return: The frequency of this StandingOrderDetails.
        :rtype: FrequencyCode
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this StandingOrderDetails.


        :param frequency: The frequency of this StandingOrderDetails.
        :type frequency: FrequencyCode
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")

        self._frequency = frequency

    @property
    def limit_amount(self):
        """Gets the limit_amount of this StandingOrderDetails.


        :return: The limit_amount of this StandingOrderDetails.
        :rtype: Amount
        """
        return self._limit_amount

    @limit_amount.setter
    def limit_amount(self, limit_amount):
        """Sets the limit_amount of this StandingOrderDetails.


        :param limit_amount: The limit_amount of this StandingOrderDetails.
        :type limit_amount: Amount
        """

        self._limit_amount = limit_amount

    @property
    def months_of_execution(self):
        """Gets the months_of_execution of this StandingOrderDetails.

        The format is following the regular expression \\d{1,2}.  The array is restricted to 11 entries.  The values contained in the array entries shall all be different and the maximum value of one entry is 12. This attribute is contained if and only if the frequency equals \"MonthlyVariable\". Example: An execution on January, April and October each year is addressed by [\"1\", \"4\", \"10\"]. 

        :return: The months_of_execution of this StandingOrderDetails.
        :rtype: List[str]
        """
        return self._months_of_execution

    @months_of_execution.setter
    def months_of_execution(self, months_of_execution):
        """Sets the months_of_execution of this StandingOrderDetails.

        The format is following the regular expression \\d{1,2}.  The array is restricted to 11 entries.  The values contained in the array entries shall all be different and the maximum value of one entry is 12. This attribute is contained if and only if the frequency equals \"MonthlyVariable\". Example: An execution on January, April and October each year is addressed by [\"1\", \"4\", \"10\"]. 

        :param months_of_execution: The months_of_execution of this StandingOrderDetails.
        :type months_of_execution: List[str]
        """
        allowed_values = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]  # noqa: E501
        if not set(months_of_execution).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `months_of_execution` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(months_of_execution) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._months_of_execution = months_of_execution

    @property
    def multiplicator(self):
        """Gets the multiplicator of this StandingOrderDetails.

        This is multiplying the given frequency resulting the exact frequency, e.g. Frequency=weekly and multiplicator=3 means every 3 weeks. Remark: This attribute is rarely supported in the market. 

        :return: The multiplicator of this StandingOrderDetails.
        :rtype: int
        """
        return self._multiplicator

    @multiplicator.setter
    def multiplicator(self, multiplicator):
        """Sets the multiplicator of this StandingOrderDetails.

        This is multiplying the given frequency resulting the exact frequency, e.g. Frequency=weekly and multiplicator=3 means every 3 weeks. Remark: This attribute is rarely supported in the market. 

        :param multiplicator: The multiplicator of this StandingOrderDetails.
        :type multiplicator: int
        """

        self._multiplicator = multiplicator

    @property
    def start_date(self):
        """Gets the start_date of this StandingOrderDetails.

        The first applicable day of execution starting from this date is the first payment. 

        :return: The start_date of this StandingOrderDetails.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this StandingOrderDetails.

        The first applicable day of execution starting from this date is the first payment. 

        :param start_date: The start_date of this StandingOrderDetails.
        :type start_date: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def within_a_month_flag(self):
        """Gets the within_a_month_flag of this StandingOrderDetails.

        This element is only used in case of frequency equals \"Monthly\".  If this element equals false it has no effect. If this element equals true, then the execution rule is overruled if the day of execution would fall into a different month using the execution rule.  Example: executionRule equals \"preceding\", dayOfExecution equals \"02\" and the second of a month is a Sunday.  In this case, the transaction date would be on the last day of the month before.  This would be overruled if withinAMonthFlag equals true and the payment is processed on Monday the third of the Month. Remark: This attribute is rarely supported in the market. 

        :return: The within_a_month_flag of this StandingOrderDetails.
        :rtype: bool
        """
        return self._within_a_month_flag

    @within_a_month_flag.setter
    def within_a_month_flag(self, within_a_month_flag):
        """Sets the within_a_month_flag of this StandingOrderDetails.

        This element is only used in case of frequency equals \"Monthly\".  If this element equals false it has no effect. If this element equals true, then the execution rule is overruled if the day of execution would fall into a different month using the execution rule.  Example: executionRule equals \"preceding\", dayOfExecution equals \"02\" and the second of a month is a Sunday.  In this case, the transaction date would be on the last day of the month before.  This would be overruled if withinAMonthFlag equals true and the payment is processed on Monday the third of the Month. Remark: This attribute is rarely supported in the market. 

        :param within_a_month_flag: The within_a_month_flag of this StandingOrderDetails.
        :type within_a_month_flag: bool
        """

        self._within_a_month_flag = within_a_month_flag
