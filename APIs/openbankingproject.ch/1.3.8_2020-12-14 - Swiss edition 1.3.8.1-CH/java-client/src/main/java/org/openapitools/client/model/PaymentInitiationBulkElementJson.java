/*
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccountReference16CH;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.ChargeBearer;
import org.openapitools.client.model.CreditorAgent7CH;
import org.openapitools.client.model.ExchangeRateInformation1;
import org.openapitools.client.model.ExternalServiceLevel1Code;
import org.openapitools.client.model.PurposeCode;
import org.openapitools.client.model.RemittanceInformationStructured;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Generic body for a bulk payment initation entry.  The bulk entry type is a type which follows the JSON formats for the supported products for single payments excluding the data elements (if supported):   * debtorAccount   * requestedExecutionDate,   * requestedExecutionTime. These data elements may not be contained in any bulk entry.  This data object can be used to represent valid bulk payment initiations entry for the following JSON based payment product, which where defined in the Implementation Guidelines:    * domestic-swiss-credit-transfers-isr   * domestic-swiss-credit-transfers   * domestic-swiss-credit-transfers-qr   * domestic-swiss-foreign-credit-transfers   * swiss-sepa-credit-transfers   * swiss-cross-border-credit-transfers  For the convenience of the implementer additional which are already predefinded in the Implementation Guidelines are included (but commented in source code), such that an ASPSP may add them easily.  Take care: Since the format is intended to fit for all payment products there are additional conditions which are NOT covered by this specification. Please check the SIX Swiss Payment Standards implementation guidelines for details.   The following data element are depending on the actual payment product available (in source code):  &lt;table style&#x3D;\&quot;width:100%\&quot;&gt; &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;Payment Type 1: ISR&lt;/td&gt;&lt;td&gt;Payment Type 3: IBAN/postal account and IID/BIC&lt;/td&gt;&lt;td&gt;Payment Type 3: QR-bill&lt;/td&gt;&lt;td&gt;Payment Type 4: Foreign currency&lt;/td&gt;&lt;td&gt;Payment Type 5: Foreign SEPA&lt;/td&gt;&lt;td&gt;Payment Type 6: Foreign&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;CH Domestic Data Element&lt;/td&gt;&lt;td&gt;domestic-swiss-credit-transfers-isr&lt;/td&gt;&lt;td&gt;domestic-swiss-credit-transfers&lt;/td&gt;&lt;td&gt;domestic-swiss-credit-transfers-qr&lt;/td&gt;&lt;td&gt;domestic-swiss-foreign-credit-transfers&lt;/td&gt;&lt;td&gt;swiss-sepa-credit-transfers&lt;/td&gt;&lt;td&gt;swiss-cross-border-credit-transfers&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;endToEndIdentification&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;instructionIdentification&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;debtorName&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;debtorId&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;ultimateDebtor&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;instructedAmount (incl. currency)&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;equivalentAmount&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;transactionCurrency&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;exchangeRateInformation&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorAccount&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory 8)&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorAgent&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent 4)&lt;/td&gt;&lt;td&gt;dependent 4)&lt;/td&gt;&lt;td&gt;dependent 4)&lt;/td&gt;&lt;td&gt;dependent 4)&lt;/td&gt;&lt;td&gt;dependent 4)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorAgentName&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent 5)&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent 5)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorName&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorId&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorAddress&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorNameAndAddress&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent&lt;/td&gt;&lt;td&gt;dependent&lt;/td&gt;&lt;td&gt;dependent&lt;/td&gt;&lt;td&gt;dependent&lt;/td&gt;&lt;td&gt;dependent&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;ultimateCreditor&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;n.a. (for future use)&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;chargeBearer&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;purposeCode&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;serviceLevel&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;remittanceInformationUnstructured&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;remittanceInformationUnstructuredArray&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;remittanceInformationStructured&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;mandatory 6)&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;remittanceInformationStructuredArray&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;intermediaryAgent&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;  Footnotes from the table: 1) This element may only be used by agreement with the instructed financial institution. 2) The element may only be used in consultation with the financial institution commissioned. 3) The element is currently ignored by financial institutions. 4) Dependence on creditorAccount, see SIX Swiss Payments Standards implementation guidelines. 5) Type 4(V3), 6(V2, V3): Must be present. Type 4(V2): May be present. Other species: May not be present. 6) QR-reference, creditor reference or IPI reference 7) currencyOfTransfer is a subfield of equivalentAmount and may only be used if equivalentAmount is used instead of instructedAmount. 8) QR-IBAN (CH/LI) must be present.  IMPORTANT: In this API definition the following holds:   *  All data elements mentioned above are defined, but some of them are commented,     i.e. they are only visible in the source code and can be used by uncommenting them.   * Data elements which are mandatory in the table above for all payment products     are set to be mandatory in this specification.   * Data elements which are indicated in the table above as n.a. for all payment products are commented in the source code.   * Data elements which are indicated to be option, conditional or mandatory for at least one payment product     in the table above are set to be optional in the s specification except the case where all are definde to be mandatory.   * Data element which are inticated to be n.a. can be used by the ASPS if needed.     In this case uncomment tthe the relatetd lines in the source code.   * If one uses this data types for some payment products he has to ensure that the used data type is     valid according to the underlying payment product, e.g. by some appropriate validations. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:56.314640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentInitiationBulkElementJson {
  public static final String SERIALIZED_NAME_CHARGE_BEARER = "chargeBearer";
  @SerializedName(SERIALIZED_NAME_CHARGE_BEARER)
  private ChargeBearer chargeBearer;

  public static final String SERIALIZED_NAME_CREDITOR_ACCOUNT = "creditorAccount";
  @SerializedName(SERIALIZED_NAME_CREDITOR_ACCOUNT)
  private AccountReference16CH creditorAccount;

  public static final String SERIALIZED_NAME_CREDITOR_ADDRESS = "creditorAddress";
  @SerializedName(SERIALIZED_NAME_CREDITOR_ADDRESS)
  private Address creditorAddress;

  public static final String SERIALIZED_NAME_CREDITOR_AGENT = "creditorAgent";
  @SerializedName(SERIALIZED_NAME_CREDITOR_AGENT)
  private CreditorAgent7CH creditorAgent;

  public static final String SERIALIZED_NAME_CREDITOR_AGENT_NAME = "creditorAgentName";
  @SerializedName(SERIALIZED_NAME_CREDITOR_AGENT_NAME)
  private String creditorAgentName;

  public static final String SERIALIZED_NAME_CREDITOR_ID = "creditorId";
  @SerializedName(SERIALIZED_NAME_CREDITOR_ID)
  private String creditorId;

  public static final String SERIALIZED_NAME_CREDITOR_NAME = "creditorName";
  @SerializedName(SERIALIZED_NAME_CREDITOR_NAME)
  private String creditorName;

  public static final String SERIALIZED_NAME_CREDITOR_NAME_AND_ADDRESS = "creditorNameAndAddress";
  @SerializedName(SERIALIZED_NAME_CREDITOR_NAME_AND_ADDRESS)
  private String creditorNameAndAddress;

  public static final String SERIALIZED_NAME_DEBTOR_ID = "debtorId";
  @SerializedName(SERIALIZED_NAME_DEBTOR_ID)
  private String debtorId;

  public static final String SERIALIZED_NAME_DEBTOR_NAME = "debtorName";
  @SerializedName(SERIALIZED_NAME_DEBTOR_NAME)
  private String debtorName;

  public static final String SERIALIZED_NAME_END_TO_END_IDENTIFICATION = "endToEndIdentification";
  @SerializedName(SERIALIZED_NAME_END_TO_END_IDENTIFICATION)
  private String endToEndIdentification;

  public static final String SERIALIZED_NAME_EQUIVALENT_AMOUNT = "equivalentAmount";
  @SerializedName(SERIALIZED_NAME_EQUIVALENT_AMOUNT)
  private Amount equivalentAmount;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE_INFORMATION = "exchangeRateInformation";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE_INFORMATION)
  private ExchangeRateInformation1 exchangeRateInformation;

  public static final String SERIALIZED_NAME_INSTRUCTED_AMOUNT = "instructedAmount";
  @SerializedName(SERIALIZED_NAME_INSTRUCTED_AMOUNT)
  private Amount instructedAmount;

  public static final String SERIALIZED_NAME_INTERMEDIARY_AGENT = "intermediaryAgent";
  @SerializedName(SERIALIZED_NAME_INTERMEDIARY_AGENT)
  private String intermediaryAgent;

  public static final String SERIALIZED_NAME_PURPOSE_CODE = "purposeCode";
  @SerializedName(SERIALIZED_NAME_PURPOSE_CODE)
  private PurposeCode purposeCode;

  public static final String SERIALIZED_NAME_REMITTANCE_INFORMATION_STRUCTURED = "remittanceInformationStructured";
  @SerializedName(SERIALIZED_NAME_REMITTANCE_INFORMATION_STRUCTURED)
  private RemittanceInformationStructured remittanceInformationStructured;

  public static final String SERIALIZED_NAME_REMITTANCE_INFORMATION_UNSTRUCTURED = "remittanceInformationUnstructured";
  @SerializedName(SERIALIZED_NAME_REMITTANCE_INFORMATION_UNSTRUCTURED)
  private String remittanceInformationUnstructured;

  public static final String SERIALIZED_NAME_SERVICE_LEVEL = "serviceLevel";
  @SerializedName(SERIALIZED_NAME_SERVICE_LEVEL)
  private ExternalServiceLevel1Code serviceLevel;

  public static final String SERIALIZED_NAME_TRANSACTION_CURRENCY = "transactionCurrency";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CURRENCY)
  private String transactionCurrency;

  public static final String SERIALIZED_NAME_ULTIMATE_CREDITOR = "ultimateCreditor";
  @SerializedName(SERIALIZED_NAME_ULTIMATE_CREDITOR)
  private String ultimateCreditor;

  public static final String SERIALIZED_NAME_ULTIMATE_DEBTOR = "ultimateDebtor";
  @SerializedName(SERIALIZED_NAME_ULTIMATE_DEBTOR)
  private String ultimateDebtor;

  public PaymentInitiationBulkElementJson() {
  }

  public PaymentInitiationBulkElementJson chargeBearer(ChargeBearer chargeBearer) {
    this.chargeBearer = chargeBearer;
    return this;
  }

  /**
   * Get chargeBearer
   * @return chargeBearer
   */
  @javax.annotation.Nullable
  public ChargeBearer getChargeBearer() {
    return chargeBearer;
  }

  public void setChargeBearer(ChargeBearer chargeBearer) {
    this.chargeBearer = chargeBearer;
  }


  public PaymentInitiationBulkElementJson creditorAccount(AccountReference16CH creditorAccount) {
    this.creditorAccount = creditorAccount;
    return this;
  }

  /**
   * Get creditorAccount
   * @return creditorAccount
   */
  @javax.annotation.Nonnull
  public AccountReference16CH getCreditorAccount() {
    return creditorAccount;
  }

  public void setCreditorAccount(AccountReference16CH creditorAccount) {
    this.creditorAccount = creditorAccount;
  }


  public PaymentInitiationBulkElementJson creditorAddress(Address creditorAddress) {
    this.creditorAddress = creditorAddress;
    return this;
  }

  /**
   * Get creditorAddress
   * @return creditorAddress
   */
  @javax.annotation.Nullable
  public Address getCreditorAddress() {
    return creditorAddress;
  }

  public void setCreditorAddress(Address creditorAddress) {
    this.creditorAddress = creditorAddress;
  }


  public PaymentInitiationBulkElementJson creditorAgent(CreditorAgent7CH creditorAgent) {
    this.creditorAgent = creditorAgent;
    return this;
  }

  /**
   * Get creditorAgent
   * @return creditorAgent
   */
  @javax.annotation.Nullable
  public CreditorAgent7CH getCreditorAgent() {
    return creditorAgent;
  }

  public void setCreditorAgent(CreditorAgent7CH creditorAgent) {
    this.creditorAgent = creditorAgent;
  }


  public PaymentInitiationBulkElementJson creditorAgentName(String creditorAgentName) {
    this.creditorAgentName = creditorAgentName;
    return this;
  }

  /**
   * Creditor agent name.
   * @return creditorAgentName
   */
  @javax.annotation.Nullable
  public String getCreditorAgentName() {
    return creditorAgentName;
  }

  public void setCreditorAgentName(String creditorAgentName) {
    this.creditorAgentName = creditorAgentName;
  }


  public PaymentInitiationBulkElementJson creditorId(String creditorId) {
    this.creditorId = creditorId;
    return this;
  }

  /**
   * Identification of Creditors, e.g. a SEPA Creditor ID.
   * @return creditorId
   */
  @javax.annotation.Nullable
  public String getCreditorId() {
    return creditorId;
  }

  public void setCreditorId(String creditorId) {
    this.creditorId = creditorId;
  }


  public PaymentInitiationBulkElementJson creditorName(String creditorName) {
    this.creditorName = creditorName;
    return this;
  }

  /**
   * Creditor name.
   * @return creditorName
   */
  @javax.annotation.Nonnull
  public String getCreditorName() {
    return creditorName;
  }

  public void setCreditorName(String creditorName) {
    this.creditorName = creditorName;
  }


  public PaymentInitiationBulkElementJson creditorNameAndAddress(String creditorNameAndAddress) {
    this.creditorNameAndAddress = creditorNameAndAddress;
    return this;
  }

  /**
   * Creditor Name and Address in a free text field.
   * @return creditorNameAndAddress
   */
  @javax.annotation.Nullable
  public String getCreditorNameAndAddress() {
    return creditorNameAndAddress;
  }

  public void setCreditorNameAndAddress(String creditorNameAndAddress) {
    this.creditorNameAndAddress = creditorNameAndAddress;
  }


  public PaymentInitiationBulkElementJson debtorId(String debtorId) {
    this.debtorId = debtorId;
    return this;
  }

  /**
   * Debtor Id.
   * @return debtorId
   */
  @javax.annotation.Nullable
  public String getDebtorId() {
    return debtorId;
  }

  public void setDebtorId(String debtorId) {
    this.debtorId = debtorId;
  }


  public PaymentInitiationBulkElementJson debtorName(String debtorName) {
    this.debtorName = debtorName;
    return this;
  }

  /**
   * Debtor name.
   * @return debtorName
   */
  @javax.annotation.Nonnull
  public String getDebtorName() {
    return debtorName;
  }

  public void setDebtorName(String debtorName) {
    this.debtorName = debtorName;
  }


  public PaymentInitiationBulkElementJson endToEndIdentification(String endToEndIdentification) {
    this.endToEndIdentification = endToEndIdentification;
    return this;
  }

  /**
   * Get endToEndIdentification
   * @return endToEndIdentification
   */
  @javax.annotation.Nonnull
  public String getEndToEndIdentification() {
    return endToEndIdentification;
  }

  public void setEndToEndIdentification(String endToEndIdentification) {
    this.endToEndIdentification = endToEndIdentification;
  }


  public PaymentInitiationBulkElementJson equivalentAmount(Amount equivalentAmount) {
    this.equivalentAmount = equivalentAmount;
    return this;
  }

  /**
   * Get equivalentAmount
   * @return equivalentAmount
   */
  @javax.annotation.Nullable
  public Amount getEquivalentAmount() {
    return equivalentAmount;
  }

  public void setEquivalentAmount(Amount equivalentAmount) {
    this.equivalentAmount = equivalentAmount;
  }


  public PaymentInitiationBulkElementJson exchangeRateInformation(ExchangeRateInformation1 exchangeRateInformation) {
    this.exchangeRateInformation = exchangeRateInformation;
    return this;
  }

  /**
   * Get exchangeRateInformation
   * @return exchangeRateInformation
   */
  @javax.annotation.Nullable
  public ExchangeRateInformation1 getExchangeRateInformation() {
    return exchangeRateInformation;
  }

  public void setExchangeRateInformation(ExchangeRateInformation1 exchangeRateInformation) {
    this.exchangeRateInformation = exchangeRateInformation;
  }


  public PaymentInitiationBulkElementJson instructedAmount(Amount instructedAmount) {
    this.instructedAmount = instructedAmount;
    return this;
  }

  /**
   * Get instructedAmount
   * @return instructedAmount
   */
  @javax.annotation.Nullable
  public Amount getInstructedAmount() {
    return instructedAmount;
  }

  public void setInstructedAmount(Amount instructedAmount) {
    this.instructedAmount = instructedAmount;
  }


  public PaymentInitiationBulkElementJson intermediaryAgent(String intermediaryAgent) {
    this.intermediaryAgent = intermediaryAgent;
    return this;
  }

  /**
   * BICFI 
   * @return intermediaryAgent
   */
  @javax.annotation.Nullable
  public String getIntermediaryAgent() {
    return intermediaryAgent;
  }

  public void setIntermediaryAgent(String intermediaryAgent) {
    this.intermediaryAgent = intermediaryAgent;
  }


  public PaymentInitiationBulkElementJson purposeCode(PurposeCode purposeCode) {
    this.purposeCode = purposeCode;
    return this;
  }

  /**
   * Get purposeCode
   * @return purposeCode
   */
  @javax.annotation.Nullable
  public PurposeCode getPurposeCode() {
    return purposeCode;
  }

  public void setPurposeCode(PurposeCode purposeCode) {
    this.purposeCode = purposeCode;
  }


  public PaymentInitiationBulkElementJson remittanceInformationStructured(RemittanceInformationStructured remittanceInformationStructured) {
    this.remittanceInformationStructured = remittanceInformationStructured;
    return this;
  }

  /**
   * Get remittanceInformationStructured
   * @return remittanceInformationStructured
   */
  @javax.annotation.Nullable
  public RemittanceInformationStructured getRemittanceInformationStructured() {
    return remittanceInformationStructured;
  }

  public void setRemittanceInformationStructured(RemittanceInformationStructured remittanceInformationStructured) {
    this.remittanceInformationStructured = remittanceInformationStructured;
  }


  public PaymentInitiationBulkElementJson remittanceInformationUnstructured(String remittanceInformationUnstructured) {
    this.remittanceInformationUnstructured = remittanceInformationUnstructured;
    return this;
  }

  /**
   * Unstructured remittance information. 
   * @return remittanceInformationUnstructured
   */
  @javax.annotation.Nullable
  public String getRemittanceInformationUnstructured() {
    return remittanceInformationUnstructured;
  }

  public void setRemittanceInformationUnstructured(String remittanceInformationUnstructured) {
    this.remittanceInformationUnstructured = remittanceInformationUnstructured;
  }


  public PaymentInitiationBulkElementJson serviceLevel(ExternalServiceLevel1Code serviceLevel) {
    this.serviceLevel = serviceLevel;
    return this;
  }

  /**
   * Get serviceLevel
   * @return serviceLevel
   */
  @javax.annotation.Nullable
  public ExternalServiceLevel1Code getServiceLevel() {
    return serviceLevel;
  }

  public void setServiceLevel(ExternalServiceLevel1Code serviceLevel) {
    this.serviceLevel = serviceLevel;
  }


  public PaymentInitiationBulkElementJson transactionCurrency(String transactionCurrency) {
    this.transactionCurrency = transactionCurrency;
    return this;
  }

  /**
   * ISO 4217 Alpha 3 currency code. 
   * @return transactionCurrency
   */
  @javax.annotation.Nullable
  public String getTransactionCurrency() {
    return transactionCurrency;
  }

  public void setTransactionCurrency(String transactionCurrency) {
    this.transactionCurrency = transactionCurrency;
  }


  public PaymentInitiationBulkElementJson ultimateCreditor(String ultimateCreditor) {
    this.ultimateCreditor = ultimateCreditor;
    return this;
  }

  /**
   * Ultimate creditor.
   * @return ultimateCreditor
   */
  @javax.annotation.Nullable
  public String getUltimateCreditor() {
    return ultimateCreditor;
  }

  public void setUltimateCreditor(String ultimateCreditor) {
    this.ultimateCreditor = ultimateCreditor;
  }


  public PaymentInitiationBulkElementJson ultimateDebtor(String ultimateDebtor) {
    this.ultimateDebtor = ultimateDebtor;
    return this;
  }

  /**
   * Ultimate debtor.
   * @return ultimateDebtor
   */
  @javax.annotation.Nullable
  public String getUltimateDebtor() {
    return ultimateDebtor;
  }

  public void setUltimateDebtor(String ultimateDebtor) {
    this.ultimateDebtor = ultimateDebtor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentInitiationBulkElementJson paymentInitiationBulkElementJson = (PaymentInitiationBulkElementJson) o;
    return Objects.equals(this.chargeBearer, paymentInitiationBulkElementJson.chargeBearer) &&
        Objects.equals(this.creditorAccount, paymentInitiationBulkElementJson.creditorAccount) &&
        Objects.equals(this.creditorAddress, paymentInitiationBulkElementJson.creditorAddress) &&
        Objects.equals(this.creditorAgent, paymentInitiationBulkElementJson.creditorAgent) &&
        Objects.equals(this.creditorAgentName, paymentInitiationBulkElementJson.creditorAgentName) &&
        Objects.equals(this.creditorId, paymentInitiationBulkElementJson.creditorId) &&
        Objects.equals(this.creditorName, paymentInitiationBulkElementJson.creditorName) &&
        Objects.equals(this.creditorNameAndAddress, paymentInitiationBulkElementJson.creditorNameAndAddress) &&
        Objects.equals(this.debtorId, paymentInitiationBulkElementJson.debtorId) &&
        Objects.equals(this.debtorName, paymentInitiationBulkElementJson.debtorName) &&
        Objects.equals(this.endToEndIdentification, paymentInitiationBulkElementJson.endToEndIdentification) &&
        Objects.equals(this.equivalentAmount, paymentInitiationBulkElementJson.equivalentAmount) &&
        Objects.equals(this.exchangeRateInformation, paymentInitiationBulkElementJson.exchangeRateInformation) &&
        Objects.equals(this.instructedAmount, paymentInitiationBulkElementJson.instructedAmount) &&
        Objects.equals(this.intermediaryAgent, paymentInitiationBulkElementJson.intermediaryAgent) &&
        Objects.equals(this.purposeCode, paymentInitiationBulkElementJson.purposeCode) &&
        Objects.equals(this.remittanceInformationStructured, paymentInitiationBulkElementJson.remittanceInformationStructured) &&
        Objects.equals(this.remittanceInformationUnstructured, paymentInitiationBulkElementJson.remittanceInformationUnstructured) &&
        Objects.equals(this.serviceLevel, paymentInitiationBulkElementJson.serviceLevel) &&
        Objects.equals(this.transactionCurrency, paymentInitiationBulkElementJson.transactionCurrency) &&
        Objects.equals(this.ultimateCreditor, paymentInitiationBulkElementJson.ultimateCreditor) &&
        Objects.equals(this.ultimateDebtor, paymentInitiationBulkElementJson.ultimateDebtor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chargeBearer, creditorAccount, creditorAddress, creditorAgent, creditorAgentName, creditorId, creditorName, creditorNameAndAddress, debtorId, debtorName, endToEndIdentification, equivalentAmount, exchangeRateInformation, instructedAmount, intermediaryAgent, purposeCode, remittanceInformationStructured, remittanceInformationUnstructured, serviceLevel, transactionCurrency, ultimateCreditor, ultimateDebtor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentInitiationBulkElementJson {\n");
    sb.append("    chargeBearer: ").append(toIndentedString(chargeBearer)).append("\n");
    sb.append("    creditorAccount: ").append(toIndentedString(creditorAccount)).append("\n");
    sb.append("    creditorAddress: ").append(toIndentedString(creditorAddress)).append("\n");
    sb.append("    creditorAgent: ").append(toIndentedString(creditorAgent)).append("\n");
    sb.append("    creditorAgentName: ").append(toIndentedString(creditorAgentName)).append("\n");
    sb.append("    creditorId: ").append(toIndentedString(creditorId)).append("\n");
    sb.append("    creditorName: ").append(toIndentedString(creditorName)).append("\n");
    sb.append("    creditorNameAndAddress: ").append(toIndentedString(creditorNameAndAddress)).append("\n");
    sb.append("    debtorId: ").append(toIndentedString(debtorId)).append("\n");
    sb.append("    debtorName: ").append(toIndentedString(debtorName)).append("\n");
    sb.append("    endToEndIdentification: ").append(toIndentedString(endToEndIdentification)).append("\n");
    sb.append("    equivalentAmount: ").append(toIndentedString(equivalentAmount)).append("\n");
    sb.append("    exchangeRateInformation: ").append(toIndentedString(exchangeRateInformation)).append("\n");
    sb.append("    instructedAmount: ").append(toIndentedString(instructedAmount)).append("\n");
    sb.append("    intermediaryAgent: ").append(toIndentedString(intermediaryAgent)).append("\n");
    sb.append("    purposeCode: ").append(toIndentedString(purposeCode)).append("\n");
    sb.append("    remittanceInformationStructured: ").append(toIndentedString(remittanceInformationStructured)).append("\n");
    sb.append("    remittanceInformationUnstructured: ").append(toIndentedString(remittanceInformationUnstructured)).append("\n");
    sb.append("    serviceLevel: ").append(toIndentedString(serviceLevel)).append("\n");
    sb.append("    transactionCurrency: ").append(toIndentedString(transactionCurrency)).append("\n");
    sb.append("    ultimateCreditor: ").append(toIndentedString(ultimateCreditor)).append("\n");
    sb.append("    ultimateDebtor: ").append(toIndentedString(ultimateDebtor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chargeBearer");
    openapiFields.add("creditorAccount");
    openapiFields.add("creditorAddress");
    openapiFields.add("creditorAgent");
    openapiFields.add("creditorAgentName");
    openapiFields.add("creditorId");
    openapiFields.add("creditorName");
    openapiFields.add("creditorNameAndAddress");
    openapiFields.add("debtorId");
    openapiFields.add("debtorName");
    openapiFields.add("endToEndIdentification");
    openapiFields.add("equivalentAmount");
    openapiFields.add("exchangeRateInformation");
    openapiFields.add("instructedAmount");
    openapiFields.add("intermediaryAgent");
    openapiFields.add("purposeCode");
    openapiFields.add("remittanceInformationStructured");
    openapiFields.add("remittanceInformationUnstructured");
    openapiFields.add("serviceLevel");
    openapiFields.add("transactionCurrency");
    openapiFields.add("ultimateCreditor");
    openapiFields.add("ultimateDebtor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("creditorAccount");
    openapiRequiredFields.add("creditorName");
    openapiRequiredFields.add("debtorName");
    openapiRequiredFields.add("endToEndIdentification");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentInitiationBulkElementJson
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentInitiationBulkElementJson.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentInitiationBulkElementJson is not found in the empty JSON string", PaymentInitiationBulkElementJson.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentInitiationBulkElementJson.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentInitiationBulkElementJson` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentInitiationBulkElementJson.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `chargeBearer`
      if (jsonObj.get("chargeBearer") != null && !jsonObj.get("chargeBearer").isJsonNull()) {
        ChargeBearer.validateJsonElement(jsonObj.get("chargeBearer"));
      }
      // validate the required field `creditorAccount`
      AccountReference16CH.validateJsonElement(jsonObj.get("creditorAccount"));
      // validate the optional field `creditorAddress`
      if (jsonObj.get("creditorAddress") != null && !jsonObj.get("creditorAddress").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("creditorAddress"));
      }
      // validate the optional field `creditorAgent`
      if (jsonObj.get("creditorAgent") != null && !jsonObj.get("creditorAgent").isJsonNull()) {
        CreditorAgent7CH.validateJsonElement(jsonObj.get("creditorAgent"));
      }
      if ((jsonObj.get("creditorAgentName") != null && !jsonObj.get("creditorAgentName").isJsonNull()) && !jsonObj.get("creditorAgentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorAgentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorAgentName").toString()));
      }
      if ((jsonObj.get("creditorId") != null && !jsonObj.get("creditorId").isJsonNull()) && !jsonObj.get("creditorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorId").toString()));
      }
      if (!jsonObj.get("creditorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorName").toString()));
      }
      if ((jsonObj.get("creditorNameAndAddress") != null && !jsonObj.get("creditorNameAndAddress").isJsonNull()) && !jsonObj.get("creditorNameAndAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorNameAndAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorNameAndAddress").toString()));
      }
      if ((jsonObj.get("debtorId") != null && !jsonObj.get("debtorId").isJsonNull()) && !jsonObj.get("debtorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorId").toString()));
      }
      if (!jsonObj.get("debtorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorName").toString()));
      }
      if (!jsonObj.get("endToEndIdentification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endToEndIdentification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endToEndIdentification").toString()));
      }
      // validate the optional field `equivalentAmount`
      if (jsonObj.get("equivalentAmount") != null && !jsonObj.get("equivalentAmount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("equivalentAmount"));
      }
      // validate the optional field `exchangeRateInformation`
      if (jsonObj.get("exchangeRateInformation") != null && !jsonObj.get("exchangeRateInformation").isJsonNull()) {
        ExchangeRateInformation1.validateJsonElement(jsonObj.get("exchangeRateInformation"));
      }
      // validate the optional field `instructedAmount`
      if (jsonObj.get("instructedAmount") != null && !jsonObj.get("instructedAmount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("instructedAmount"));
      }
      if ((jsonObj.get("intermediaryAgent") != null && !jsonObj.get("intermediaryAgent").isJsonNull()) && !jsonObj.get("intermediaryAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intermediaryAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intermediaryAgent").toString()));
      }
      // validate the optional field `purposeCode`
      if (jsonObj.get("purposeCode") != null && !jsonObj.get("purposeCode").isJsonNull()) {
        PurposeCode.validateJsonElement(jsonObj.get("purposeCode"));
      }
      // validate the optional field `remittanceInformationStructured`
      if (jsonObj.get("remittanceInformationStructured") != null && !jsonObj.get("remittanceInformationStructured").isJsonNull()) {
        RemittanceInformationStructured.validateJsonElement(jsonObj.get("remittanceInformationStructured"));
      }
      if ((jsonObj.get("remittanceInformationUnstructured") != null && !jsonObj.get("remittanceInformationUnstructured").isJsonNull()) && !jsonObj.get("remittanceInformationUnstructured").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remittanceInformationUnstructured` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remittanceInformationUnstructured").toString()));
      }
      // validate the optional field `serviceLevel`
      if (jsonObj.get("serviceLevel") != null && !jsonObj.get("serviceLevel").isJsonNull()) {
        ExternalServiceLevel1Code.validateJsonElement(jsonObj.get("serviceLevel"));
      }
      if ((jsonObj.get("transactionCurrency") != null && !jsonObj.get("transactionCurrency").isJsonNull()) && !jsonObj.get("transactionCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionCurrency").toString()));
      }
      if ((jsonObj.get("ultimateCreditor") != null && !jsonObj.get("ultimateCreditor").isJsonNull()) && !jsonObj.get("ultimateCreditor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ultimateCreditor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ultimateCreditor").toString()));
      }
      if ((jsonObj.get("ultimateDebtor") != null && !jsonObj.get("ultimateDebtor").isJsonNull()) && !jsonObj.get("ultimateDebtor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ultimateDebtor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ultimateDebtor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentInitiationBulkElementJson.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentInitiationBulkElementJson' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentInitiationBulkElementJson> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentInitiationBulkElementJson.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentInitiationBulkElementJson>() {
           @Override
           public void write(JsonWriter out, PaymentInitiationBulkElementJson value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentInitiationBulkElementJson read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentInitiationBulkElementJson given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentInitiationBulkElementJson
   * @throws IOException if the JSON string is invalid with respect to PaymentInitiationBulkElementJson
   */
  public static PaymentInitiationBulkElementJson fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentInitiationBulkElementJson.class);
  }

  /**
   * Convert an instance of PaymentInitiationBulkElementJson to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

