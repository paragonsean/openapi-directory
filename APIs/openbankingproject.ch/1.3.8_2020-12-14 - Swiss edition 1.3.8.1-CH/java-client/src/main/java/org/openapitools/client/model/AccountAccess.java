/*
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountReference16CH;
import org.openapitools.client.model.AdditionalInformationAccess;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Requested access services for a consent. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:56.314640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountAccess {
  public static final String SERIALIZED_NAME_ACCOUNTS = "accounts";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS)
  private List<AccountReference16CH> accounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_INFORMATION = "additionalInformation";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFORMATION)
  private AdditionalInformationAccess additionalInformation;

  /**
   * Optional if supported by API provider.  The values \&quot;allAccounts\&quot; and \&quot;allAccountsWithOwnerName\&quot; are admitted.  The support of the \&quot;allAccountsWithOwnerName\&quot; value by the ASPSP is optional. 
   */
  @JsonAdapter(AllPsd2Enum.Adapter.class)
  public enum AllPsd2Enum {
    ALL_ACCOUNTS("allAccounts"),
    
    ALL_ACCOUNTS_WITH_OWNER_NAME("allAccountsWithOwnerName");

    private String value;

    AllPsd2Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllPsd2Enum fromValue(String value) {
      for (AllPsd2Enum b : AllPsd2Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllPsd2Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllPsd2Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllPsd2Enum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllPsd2Enum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllPsd2Enum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALL_PSD2 = "allPsd2";
  @SerializedName(SERIALIZED_NAME_ALL_PSD2)
  private AllPsd2Enum allPsd2;

  /**
   * Optional if supported by API provider.  The values \&quot;allAccounts\&quot; and \&quot;allAccountsWithOwnerName\&quot; are admitted.  The support of the \&quot;allAccountsWithOwnerName\&quot; value by the ASPSP is optional. 
   */
  @JsonAdapter(AvailableAccountsEnum.Adapter.class)
  public enum AvailableAccountsEnum {
    ALL_ACCOUNTS("allAccounts"),
    
    ALL_ACCOUNTS_WITH_OWNER_NAME("allAccountsWithOwnerName");

    private String value;

    AvailableAccountsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailableAccountsEnum fromValue(String value) {
      for (AvailableAccountsEnum b : AvailableAccountsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvailableAccountsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailableAccountsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailableAccountsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvailableAccountsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AvailableAccountsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVAILABLE_ACCOUNTS = "availableAccounts";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ACCOUNTS)
  private AvailableAccountsEnum availableAccounts;

  /**
   * Optional if supported by API provider.  The values \&quot;allAccounts\&quot; and \&quot;allAccountsWithOwnerName\&quot; are admitted.  The support of the \&quot;allAccountsWithOwnerName\&quot; value by the ASPSP is optional. 
   */
  @JsonAdapter(AvailableAccountsWithBalanceEnum.Adapter.class)
  public enum AvailableAccountsWithBalanceEnum {
    ALL_ACCOUNTS("allAccounts"),
    
    ALL_ACCOUNTS_WITH_OWNER_NAME("allAccountsWithOwnerName");

    private String value;

    AvailableAccountsWithBalanceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailableAccountsWithBalanceEnum fromValue(String value) {
      for (AvailableAccountsWithBalanceEnum b : AvailableAccountsWithBalanceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvailableAccountsWithBalanceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailableAccountsWithBalanceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailableAccountsWithBalanceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvailableAccountsWithBalanceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AvailableAccountsWithBalanceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVAILABLE_ACCOUNTS_WITH_BALANCE = "availableAccountsWithBalance";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ACCOUNTS_WITH_BALANCE)
  private AvailableAccountsWithBalanceEnum availableAccountsWithBalance;

  public static final String SERIALIZED_NAME_BALANCES = "balances";
  @SerializedName(SERIALIZED_NAME_BALANCES)
  private List<AccountReference16CH> balances = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESTRICTED_TO = "restrictedTo";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_TO)
  private List<String> restrictedTo = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private List<AccountReference16CH> transactions = new ArrayList<>();

  public AccountAccess() {
  }

  public AccountAccess accounts(List<AccountReference16CH> accounts) {
    this.accounts = accounts;
    return this;
  }

  public AccountAccess addAccountsItem(AccountReference16CH accountsItem) {
    if (this.accounts == null) {
      this.accounts = new ArrayList<>();
    }
    this.accounts.add(accountsItem);
    return this;
  }

  /**
   * Is asking for detailed account information.   If the array is empty in a request, the TPP is asking for an accessible account list.  This may be restricted in a PSU/ASPSP authorization dialogue.  If the array is empty, also the arrays for balances, additionalInformation sub attributes or transactions shall be empty, if used. 
   * @return accounts
   */
  @javax.annotation.Nullable
  public List<AccountReference16CH> getAccounts() {
    return accounts;
  }

  public void setAccounts(List<AccountReference16CH> accounts) {
    this.accounts = accounts;
  }


  public AccountAccess additionalInformation(AdditionalInformationAccess additionalInformation) {
    this.additionalInformation = additionalInformation;
    return this;
  }

  /**
   * Get additionalInformation
   * @return additionalInformation
   */
  @javax.annotation.Nullable
  public AdditionalInformationAccess getAdditionalInformation() {
    return additionalInformation;
  }

  public void setAdditionalInformation(AdditionalInformationAccess additionalInformation) {
    this.additionalInformation = additionalInformation;
  }


  public AccountAccess allPsd2(AllPsd2Enum allPsd2) {
    this.allPsd2 = allPsd2;
    return this;
  }

  /**
   * Optional if supported by API provider.  The values \&quot;allAccounts\&quot; and \&quot;allAccountsWithOwnerName\&quot; are admitted.  The support of the \&quot;allAccountsWithOwnerName\&quot; value by the ASPSP is optional. 
   * @return allPsd2
   */
  @javax.annotation.Nullable
  public AllPsd2Enum getAllPsd2() {
    return allPsd2;
  }

  public void setAllPsd2(AllPsd2Enum allPsd2) {
    this.allPsd2 = allPsd2;
  }


  public AccountAccess availableAccounts(AvailableAccountsEnum availableAccounts) {
    this.availableAccounts = availableAccounts;
    return this;
  }

  /**
   * Optional if supported by API provider.  The values \&quot;allAccounts\&quot; and \&quot;allAccountsWithOwnerName\&quot; are admitted.  The support of the \&quot;allAccountsWithOwnerName\&quot; value by the ASPSP is optional. 
   * @return availableAccounts
   */
  @javax.annotation.Nullable
  public AvailableAccountsEnum getAvailableAccounts() {
    return availableAccounts;
  }

  public void setAvailableAccounts(AvailableAccountsEnum availableAccounts) {
    this.availableAccounts = availableAccounts;
  }


  public AccountAccess availableAccountsWithBalance(AvailableAccountsWithBalanceEnum availableAccountsWithBalance) {
    this.availableAccountsWithBalance = availableAccountsWithBalance;
    return this;
  }

  /**
   * Optional if supported by API provider.  The values \&quot;allAccounts\&quot; and \&quot;allAccountsWithOwnerName\&quot; are admitted.  The support of the \&quot;allAccountsWithOwnerName\&quot; value by the ASPSP is optional. 
   * @return availableAccountsWithBalance
   */
  @javax.annotation.Nullable
  public AvailableAccountsWithBalanceEnum getAvailableAccountsWithBalance() {
    return availableAccountsWithBalance;
  }

  public void setAvailableAccountsWithBalance(AvailableAccountsWithBalanceEnum availableAccountsWithBalance) {
    this.availableAccountsWithBalance = availableAccountsWithBalance;
  }


  public AccountAccess balances(List<AccountReference16CH> balances) {
    this.balances = balances;
    return this;
  }

  public AccountAccess addBalancesItem(AccountReference16CH balancesItem) {
    if (this.balances == null) {
      this.balances = new ArrayList<>();
    }
    this.balances.add(balancesItem);
    return this;
  }

  /**
   * Is asking for balances of the addressed accounts.  If the array is empty in the request, the TPP is asking for the balances of all accessible account lists.  This may be restricted in a PSU/ASPSP authorization dialogue.  If the array is empty, also the arrays for accounts, additionalInformation sub attributes or transactions shall be empty, if used. 
   * @return balances
   */
  @javax.annotation.Nullable
  public List<AccountReference16CH> getBalances() {
    return balances;
  }

  public void setBalances(List<AccountReference16CH> balances) {
    this.balances = balances;
  }


  public AccountAccess restrictedTo(List<String> restrictedTo) {
    this.restrictedTo = restrictedTo;
    return this;
  }

  public AccountAccess addRestrictedToItem(String restrictedToItem) {
    if (this.restrictedTo == null) {
      this.restrictedTo = new ArrayList<>();
    }
    this.restrictedTo.add(restrictedToItem);
    return this;
  }

  /**
   * If the TPP requests access to accounts via availableAccounts (List of available accounts), global  or bank driven consents, the TPP may include this element to restrict access to the referred  account types. Absence of the element is interpreted as \&quot;no restriction\&quot; (therefore access to  accounts of all types is requested). The element may only occur, if each of the elements    - accounts    - balances    - transactions  is either not present or contains an empty array.  
   * @return restrictedTo
   */
  @javax.annotation.Nullable
  public List<String> getRestrictedTo() {
    return restrictedTo;
  }

  public void setRestrictedTo(List<String> restrictedTo) {
    this.restrictedTo = restrictedTo;
  }


  public AccountAccess transactions(List<AccountReference16CH> transactions) {
    this.transactions = transactions;
    return this;
  }

  public AccountAccess addTransactionsItem(AccountReference16CH transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

  /**
   * Is asking for transactions of the addressed accounts.   If the array is empty in the request, the TPP is asking for the transactions of all accessible account lists.  This may be restricted in a PSU/ASPSP authorization dialogue.  If the array is empty, also the arrays for accounts, additionalInformation sub attributes or balances shall be empty, if used. 
   * @return transactions
   */
  @javax.annotation.Nullable
  public List<AccountReference16CH> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<AccountReference16CH> transactions) {
    this.transactions = transactions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountAccess accountAccess = (AccountAccess) o;
    return Objects.equals(this.accounts, accountAccess.accounts) &&
        Objects.equals(this.additionalInformation, accountAccess.additionalInformation) &&
        Objects.equals(this.allPsd2, accountAccess.allPsd2) &&
        Objects.equals(this.availableAccounts, accountAccess.availableAccounts) &&
        Objects.equals(this.availableAccountsWithBalance, accountAccess.availableAccountsWithBalance) &&
        Objects.equals(this.balances, accountAccess.balances) &&
        Objects.equals(this.restrictedTo, accountAccess.restrictedTo) &&
        Objects.equals(this.transactions, accountAccess.transactions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accounts, additionalInformation, allPsd2, availableAccounts, availableAccountsWithBalance, balances, restrictedTo, transactions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountAccess {\n");
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    allPsd2: ").append(toIndentedString(allPsd2)).append("\n");
    sb.append("    availableAccounts: ").append(toIndentedString(availableAccounts)).append("\n");
    sb.append("    availableAccountsWithBalance: ").append(toIndentedString(availableAccountsWithBalance)).append("\n");
    sb.append("    balances: ").append(toIndentedString(balances)).append("\n");
    sb.append("    restrictedTo: ").append(toIndentedString(restrictedTo)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accounts");
    openapiFields.add("additionalInformation");
    openapiFields.add("allPsd2");
    openapiFields.add("availableAccounts");
    openapiFields.add("availableAccountsWithBalance");
    openapiFields.add("balances");
    openapiFields.add("restrictedTo");
    openapiFields.add("transactions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountAccess
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountAccess.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountAccess is not found in the empty JSON string", AccountAccess.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountAccess.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountAccess` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("accounts") != null && !jsonObj.get("accounts").isJsonNull()) {
        JsonArray jsonArrayaccounts = jsonObj.getAsJsonArray("accounts");
        if (jsonArrayaccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accounts` to be an array in the JSON string but got `%s`", jsonObj.get("accounts").toString()));
          }

          // validate the optional field `accounts` (array)
          for (int i = 0; i < jsonArrayaccounts.size(); i++) {
            AccountReference16CH.validateJsonElement(jsonArrayaccounts.get(i));
          };
        }
      }
      // validate the optional field `additionalInformation`
      if (jsonObj.get("additionalInformation") != null && !jsonObj.get("additionalInformation").isJsonNull()) {
        AdditionalInformationAccess.validateJsonElement(jsonObj.get("additionalInformation"));
      }
      if ((jsonObj.get("allPsd2") != null && !jsonObj.get("allPsd2").isJsonNull()) && !jsonObj.get("allPsd2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allPsd2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allPsd2").toString()));
      }
      // validate the optional field `allPsd2`
      if (jsonObj.get("allPsd2") != null && !jsonObj.get("allPsd2").isJsonNull()) {
        AllPsd2Enum.validateJsonElement(jsonObj.get("allPsd2"));
      }
      if ((jsonObj.get("availableAccounts") != null && !jsonObj.get("availableAccounts").isJsonNull()) && !jsonObj.get("availableAccounts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableAccounts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availableAccounts").toString()));
      }
      // validate the optional field `availableAccounts`
      if (jsonObj.get("availableAccounts") != null && !jsonObj.get("availableAccounts").isJsonNull()) {
        AvailableAccountsEnum.validateJsonElement(jsonObj.get("availableAccounts"));
      }
      if ((jsonObj.get("availableAccountsWithBalance") != null && !jsonObj.get("availableAccountsWithBalance").isJsonNull()) && !jsonObj.get("availableAccountsWithBalance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableAccountsWithBalance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availableAccountsWithBalance").toString()));
      }
      // validate the optional field `availableAccountsWithBalance`
      if (jsonObj.get("availableAccountsWithBalance") != null && !jsonObj.get("availableAccountsWithBalance").isJsonNull()) {
        AvailableAccountsWithBalanceEnum.validateJsonElement(jsonObj.get("availableAccountsWithBalance"));
      }
      if (jsonObj.get("balances") != null && !jsonObj.get("balances").isJsonNull()) {
        JsonArray jsonArraybalances = jsonObj.getAsJsonArray("balances");
        if (jsonArraybalances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("balances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `balances` to be an array in the JSON string but got `%s`", jsonObj.get("balances").toString()));
          }

          // validate the optional field `balances` (array)
          for (int i = 0; i < jsonArraybalances.size(); i++) {
            AccountReference16CH.validateJsonElement(jsonArraybalances.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("restrictedTo") != null && !jsonObj.get("restrictedTo").isJsonNull() && !jsonObj.get("restrictedTo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictedTo` to be an array in the JSON string but got `%s`", jsonObj.get("restrictedTo").toString()));
      }
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        JsonArray jsonArraytransactions = jsonObj.getAsJsonArray("transactions");
        if (jsonArraytransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transactions` to be an array in the JSON string but got `%s`", jsonObj.get("transactions").toString()));
          }

          // validate the optional field `transactions` (array)
          for (int i = 0; i < jsonArraytransactions.size(); i++) {
            AccountReference16CH.validateJsonElement(jsonArraytransactions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountAccess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountAccess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountAccess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountAccess.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountAccess>() {
           @Override
           public void write(JsonWriter out, AccountAccess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountAccess read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountAccess given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountAccess
   * @throws IOException if the JSON string is invalid with respect to AccountAccess
   */
  public static AccountAccess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountAccess.class);
  }

  /**
   * Convert an instance of AccountAccess to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

