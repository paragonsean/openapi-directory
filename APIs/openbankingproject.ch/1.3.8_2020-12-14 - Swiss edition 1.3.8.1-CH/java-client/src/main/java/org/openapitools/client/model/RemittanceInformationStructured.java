/*
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Structured remittance information. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:56.314640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RemittanceInformationStructured {
  /**
   * Gets or Sets scORorQRRorIPI
   */
  @JsonAdapter(ScORorQRRorIPIEnum.Adapter.class)
  public enum ScORorQRRorIPIEnum {
    SCOR("SCOR"),
    
    QRR("QRR"),
    
    IPI("IPI");

    private String value;

    ScORorQRRorIPIEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScORorQRRorIPIEnum fromValue(String value) {
      for (ScORorQRRorIPIEnum b : ScORorQRRorIPIEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScORorQRRorIPIEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScORorQRRorIPIEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScORorQRRorIPIEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScORorQRRorIPIEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScORorQRRorIPIEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SC_O_ROR_Q_R_ROR_I_P_I = "SCORorQRRorIPI";
  @SerializedName(SERIALIZED_NAME_SC_O_ROR_Q_R_ROR_I_P_I)
  private ScORorQRRorIPIEnum scORorQRRorIPI;

  public static final String SERIALIZED_NAME_ADDITIONAL_REMITTANCE_INFORMATION = "additionalRemittanceInformation";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_REMITTANCE_INFORMATION)
  private String additionalRemittanceInformation;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_REFERENCE_ISSUER = "referenceIssuer";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ISSUER)
  private String referenceIssuer;

  public static final String SERIALIZED_NAME_REFERENCE_TYPE = "referenceType";
  @SerializedName(SERIALIZED_NAME_REFERENCE_TYPE)
  private String referenceType;

  public RemittanceInformationStructured() {
  }

  public RemittanceInformationStructured scORorQRRorIPI(ScORorQRRorIPIEnum scORorQRRorIPI) {
    this.scORorQRRorIPI = scORorQRRorIPI;
    return this;
  }

  /**
   * Get scORorQRRorIPI
   * @return scORorQRRorIPI
   */
  @javax.annotation.Nullable
  public ScORorQRRorIPIEnum getScORorQRRorIPI() {
    return scORorQRRorIPI;
  }

  public void setScORorQRRorIPI(ScORorQRRorIPIEnum scORorQRRorIPI) {
    this.scORorQRRorIPI = scORorQRRorIPI;
  }


  public RemittanceInformationStructured additionalRemittanceInformation(String additionalRemittanceInformation) {
    this.additionalRemittanceInformation = additionalRemittanceInformation;
    return this;
  }

  /**
   * Get additionalRemittanceInformation
   * @return additionalRemittanceInformation
   */
  @javax.annotation.Nullable
  public String getAdditionalRemittanceInformation() {
    return additionalRemittanceInformation;
  }

  public void setAdditionalRemittanceInformation(String additionalRemittanceInformation) {
    this.additionalRemittanceInformation = additionalRemittanceInformation;
  }


  public RemittanceInformationStructured reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Get reference
   * @return reference
   */
  @javax.annotation.Nonnull
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public RemittanceInformationStructured referenceIssuer(String referenceIssuer) {
    this.referenceIssuer = referenceIssuer;
    return this;
  }

  /**
   * Get referenceIssuer
   * @return referenceIssuer
   */
  @javax.annotation.Nullable
  public String getReferenceIssuer() {
    return referenceIssuer;
  }

  public void setReferenceIssuer(String referenceIssuer) {
    this.referenceIssuer = referenceIssuer;
  }


  public RemittanceInformationStructured referenceType(String referenceType) {
    this.referenceType = referenceType;
    return this;
  }

  /**
   * Get referenceType
   * @return referenceType
   */
  @javax.annotation.Nullable
  public String getReferenceType() {
    return referenceType;
  }

  public void setReferenceType(String referenceType) {
    this.referenceType = referenceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemittanceInformationStructured remittanceInformationStructured = (RemittanceInformationStructured) o;
    return Objects.equals(this.scORorQRRorIPI, remittanceInformationStructured.scORorQRRorIPI) &&
        Objects.equals(this.additionalRemittanceInformation, remittanceInformationStructured.additionalRemittanceInformation) &&
        Objects.equals(this.reference, remittanceInformationStructured.reference) &&
        Objects.equals(this.referenceIssuer, remittanceInformationStructured.referenceIssuer) &&
        Objects.equals(this.referenceType, remittanceInformationStructured.referenceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scORorQRRorIPI, additionalRemittanceInformation, reference, referenceIssuer, referenceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemittanceInformationStructured {\n");
    sb.append("    scORorQRRorIPI: ").append(toIndentedString(scORorQRRorIPI)).append("\n");
    sb.append("    additionalRemittanceInformation: ").append(toIndentedString(additionalRemittanceInformation)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    referenceIssuer: ").append(toIndentedString(referenceIssuer)).append("\n");
    sb.append("    referenceType: ").append(toIndentedString(referenceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SCORorQRRorIPI");
    openapiFields.add("additionalRemittanceInformation");
    openapiFields.add("reference");
    openapiFields.add("referenceIssuer");
    openapiFields.add("referenceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("reference");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemittanceInformationStructured
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemittanceInformationStructured.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemittanceInformationStructured is not found in the empty JSON string", RemittanceInformationStructured.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemittanceInformationStructured.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemittanceInformationStructured` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RemittanceInformationStructured.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("SCORorQRRorIPI") != null && !jsonObj.get("SCORorQRRorIPI").isJsonNull()) && !jsonObj.get("SCORorQRRorIPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SCORorQRRorIPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SCORorQRRorIPI").toString()));
      }
      // validate the optional field `SCORorQRRorIPI`
      if (jsonObj.get("SCORorQRRorIPI") != null && !jsonObj.get("SCORorQRRorIPI").isJsonNull()) {
        ScORorQRRorIPIEnum.validateJsonElement(jsonObj.get("SCORorQRRorIPI"));
      }
      if ((jsonObj.get("additionalRemittanceInformation") != null && !jsonObj.get("additionalRemittanceInformation").isJsonNull()) && !jsonObj.get("additionalRemittanceInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalRemittanceInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalRemittanceInformation").toString()));
      }
      if (!jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if ((jsonObj.get("referenceIssuer") != null && !jsonObj.get("referenceIssuer").isJsonNull()) && !jsonObj.get("referenceIssuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceIssuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceIssuer").toString()));
      }
      if ((jsonObj.get("referenceType") != null && !jsonObj.get("referenceType").isJsonNull()) && !jsonObj.get("referenceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemittanceInformationStructured.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemittanceInformationStructured' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemittanceInformationStructured> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemittanceInformationStructured.class));

       return (TypeAdapter<T>) new TypeAdapter<RemittanceInformationStructured>() {
           @Override
           public void write(JsonWriter out, RemittanceInformationStructured value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemittanceInformationStructured read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemittanceInformationStructured given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemittanceInformationStructured
   * @throws IOException if the JSON string is invalid with respect to RemittanceInformationStructured
   */
  public static RemittanceInformationStructured fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemittanceInformationStructured.class);
  }

  /**
   * Convert an instance of RemittanceInformationStructured to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

