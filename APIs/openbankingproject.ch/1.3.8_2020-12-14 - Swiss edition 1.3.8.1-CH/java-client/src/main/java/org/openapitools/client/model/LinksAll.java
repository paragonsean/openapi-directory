/*
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HrefType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A _link object with all availabel link types. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:56.314640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LinksAll {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private HrefType account;

  public static final String SERIALIZED_NAME_AUTHORISE_TRANSACTION = "authoriseTransaction";
  @SerializedName(SERIALIZED_NAME_AUTHORISE_TRANSACTION)
  private HrefType authoriseTransaction;

  public static final String SERIALIZED_NAME_BALANCES = "balances";
  @SerializedName(SERIALIZED_NAME_BALANCES)
  private HrefType balances;

  public static final String SERIALIZED_NAME_CARD_ACCOUNT = "cardAccount";
  @SerializedName(SERIALIZED_NAME_CARD_ACCOUNT)
  private HrefType cardAccount;

  public static final String SERIALIZED_NAME_CARD_TRANSACTIONS = "cardTransactions";
  @SerializedName(SERIALIZED_NAME_CARD_TRANSACTIONS)
  private HrefType cardTransactions;

  public static final String SERIALIZED_NAME_CONFIRMATION = "confirmation";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION)
  private HrefType confirmation;

  public static final String SERIALIZED_NAME_DOWNLOAD = "download";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD)
  private HrefType download;

  public static final String SERIALIZED_NAME_FIRST = "first";
  @SerializedName(SERIALIZED_NAME_FIRST)
  private HrefType first;

  public static final String SERIALIZED_NAME_LAST = "last";
  @SerializedName(SERIALIZED_NAME_LAST)
  private HrefType last;

  public static final String SERIALIZED_NAME_NEXT = "next";
  @SerializedName(SERIALIZED_NAME_NEXT)
  private HrefType next;

  public static final String SERIALIZED_NAME_PREVIOUS = "previous";
  @SerializedName(SERIALIZED_NAME_PREVIOUS)
  private HrefType previous;

  public static final String SERIALIZED_NAME_SCA_O_AUTH = "scaOAuth";
  @SerializedName(SERIALIZED_NAME_SCA_O_AUTH)
  private HrefType scaOAuth;

  public static final String SERIALIZED_NAME_SCA_REDIRECT = "scaRedirect";
  @SerializedName(SERIALIZED_NAME_SCA_REDIRECT)
  private HrefType scaRedirect;

  public static final String SERIALIZED_NAME_SCA_STATUS = "scaStatus";
  @SerializedName(SERIALIZED_NAME_SCA_STATUS)
  private HrefType scaStatus;

  public static final String SERIALIZED_NAME_SELECT_AUTHENTICATION_METHOD = "selectAuthenticationMethod";
  @SerializedName(SERIALIZED_NAME_SELECT_AUTHENTICATION_METHOD)
  private HrefType selectAuthenticationMethod;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private HrefType self;

  public static final String SERIALIZED_NAME_START_AUTHORISATION = "startAuthorisation";
  @SerializedName(SERIALIZED_NAME_START_AUTHORISATION)
  private HrefType startAuthorisation;

  public static final String SERIALIZED_NAME_START_AUTHORISATION_WITH_AUTHENTICATION_METHOD_SELECTION = "startAuthorisationWithAuthenticationMethodSelection";
  @SerializedName(SERIALIZED_NAME_START_AUTHORISATION_WITH_AUTHENTICATION_METHOD_SELECTION)
  private HrefType startAuthorisationWithAuthenticationMethodSelection;

  public static final String SERIALIZED_NAME_START_AUTHORISATION_WITH_ENCRYPTED_PSU_AUTHENTICATION = "startAuthorisationWithEncryptedPsuAuthentication";
  @SerializedName(SERIALIZED_NAME_START_AUTHORISATION_WITH_ENCRYPTED_PSU_AUTHENTICATION)
  private HrefType startAuthorisationWithEncryptedPsuAuthentication;

  public static final String SERIALIZED_NAME_START_AUTHORISATION_WITH_PROPRIETARY_DATA = "startAuthorisationWithProprietaryData";
  @SerializedName(SERIALIZED_NAME_START_AUTHORISATION_WITH_PROPRIETARY_DATA)
  private HrefType startAuthorisationWithProprietaryData;

  public static final String SERIALIZED_NAME_START_AUTHORISATION_WITH_PSU_AUTHENTICATION = "startAuthorisationWithPsuAuthentication";
  @SerializedName(SERIALIZED_NAME_START_AUTHORISATION_WITH_PSU_AUTHENTICATION)
  private HrefType startAuthorisationWithPsuAuthentication;

  public static final String SERIALIZED_NAME_START_AUTHORISATION_WITH_PSU_IDENTIFICATION = "startAuthorisationWithPsuIdentification";
  @SerializedName(SERIALIZED_NAME_START_AUTHORISATION_WITH_PSU_IDENTIFICATION)
  private HrefType startAuthorisationWithPsuIdentification;

  public static final String SERIALIZED_NAME_START_AUTHORISATION_WITH_TRANSACTION_AUTHORISATION = "startAuthorisationWithTransactionAuthorisation";
  @SerializedName(SERIALIZED_NAME_START_AUTHORISATION_WITH_TRANSACTION_AUTHORISATION)
  private HrefType startAuthorisationWithTransactionAuthorisation;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private HrefType status;

  public static final String SERIALIZED_NAME_TRANSACTION_DETAILS = "transactionDetails";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DETAILS)
  private HrefType transactionDetails;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private HrefType transactions;

  public static final String SERIALIZED_NAME_UPDATE_ADDITIONAL_ENCRYPTED_PSU_AUTHENTICATION = "updateAdditionalEncryptedPsuAuthentication";
  @SerializedName(SERIALIZED_NAME_UPDATE_ADDITIONAL_ENCRYPTED_PSU_AUTHENTICATION)
  private HrefType updateAdditionalEncryptedPsuAuthentication;

  public static final String SERIALIZED_NAME_UPDATE_ADDITIONAL_PSU_AUTHENTICATION = "updateAdditionalPsuAuthentication";
  @SerializedName(SERIALIZED_NAME_UPDATE_ADDITIONAL_PSU_AUTHENTICATION)
  private HrefType updateAdditionalPsuAuthentication;

  public static final String SERIALIZED_NAME_UPDATE_ENCRYPTED_PSU_AUTHENTICATION = "updateEncryptedPsuAuthentication";
  @SerializedName(SERIALIZED_NAME_UPDATE_ENCRYPTED_PSU_AUTHENTICATION)
  private HrefType updateEncryptedPsuAuthentication;

  public static final String SERIALIZED_NAME_UPDATE_PROPRIETARY_DATA = "updateProprietaryData";
  @SerializedName(SERIALIZED_NAME_UPDATE_PROPRIETARY_DATA)
  private HrefType updateProprietaryData;

  public static final String SERIALIZED_NAME_UPDATE_PSU_AUTHENTICATION = "updatePsuAuthentication";
  @SerializedName(SERIALIZED_NAME_UPDATE_PSU_AUTHENTICATION)
  private HrefType updatePsuAuthentication;

  public static final String SERIALIZED_NAME_UPDATE_PSU_IDENTIFICATION = "updatePsuIdentification";
  @SerializedName(SERIALIZED_NAME_UPDATE_PSU_IDENTIFICATION)
  private HrefType updatePsuIdentification;

  public LinksAll() {
  }

  public LinksAll account(HrefType account) {
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  public HrefType getAccount() {
    return account;
  }

  public void setAccount(HrefType account) {
    this.account = account;
  }


  public LinksAll authoriseTransaction(HrefType authoriseTransaction) {
    this.authoriseTransaction = authoriseTransaction;
    return this;
  }

  /**
   * Get authoriseTransaction
   * @return authoriseTransaction
   */
  @javax.annotation.Nullable
  public HrefType getAuthoriseTransaction() {
    return authoriseTransaction;
  }

  public void setAuthoriseTransaction(HrefType authoriseTransaction) {
    this.authoriseTransaction = authoriseTransaction;
  }


  public LinksAll balances(HrefType balances) {
    this.balances = balances;
    return this;
  }

  /**
   * Get balances
   * @return balances
   */
  @javax.annotation.Nullable
  public HrefType getBalances() {
    return balances;
  }

  public void setBalances(HrefType balances) {
    this.balances = balances;
  }


  public LinksAll cardAccount(HrefType cardAccount) {
    this.cardAccount = cardAccount;
    return this;
  }

  /**
   * Get cardAccount
   * @return cardAccount
   */
  @javax.annotation.Nullable
  public HrefType getCardAccount() {
    return cardAccount;
  }

  public void setCardAccount(HrefType cardAccount) {
    this.cardAccount = cardAccount;
  }


  public LinksAll cardTransactions(HrefType cardTransactions) {
    this.cardTransactions = cardTransactions;
    return this;
  }

  /**
   * Get cardTransactions
   * @return cardTransactions
   */
  @javax.annotation.Nullable
  public HrefType getCardTransactions() {
    return cardTransactions;
  }

  public void setCardTransactions(HrefType cardTransactions) {
    this.cardTransactions = cardTransactions;
  }


  public LinksAll confirmation(HrefType confirmation) {
    this.confirmation = confirmation;
    return this;
  }

  /**
   * Get confirmation
   * @return confirmation
   */
  @javax.annotation.Nullable
  public HrefType getConfirmation() {
    return confirmation;
  }

  public void setConfirmation(HrefType confirmation) {
    this.confirmation = confirmation;
  }


  public LinksAll download(HrefType download) {
    this.download = download;
    return this;
  }

  /**
   * Get download
   * @return download
   */
  @javax.annotation.Nullable
  public HrefType getDownload() {
    return download;
  }

  public void setDownload(HrefType download) {
    this.download = download;
  }


  public LinksAll first(HrefType first) {
    this.first = first;
    return this;
  }

  /**
   * Get first
   * @return first
   */
  @javax.annotation.Nullable
  public HrefType getFirst() {
    return first;
  }

  public void setFirst(HrefType first) {
    this.first = first;
  }


  public LinksAll last(HrefType last) {
    this.last = last;
    return this;
  }

  /**
   * Get last
   * @return last
   */
  @javax.annotation.Nullable
  public HrefType getLast() {
    return last;
  }

  public void setLast(HrefType last) {
    this.last = last;
  }


  public LinksAll next(HrefType next) {
    this.next = next;
    return this;
  }

  /**
   * Get next
   * @return next
   */
  @javax.annotation.Nullable
  public HrefType getNext() {
    return next;
  }

  public void setNext(HrefType next) {
    this.next = next;
  }


  public LinksAll previous(HrefType previous) {
    this.previous = previous;
    return this;
  }

  /**
   * Get previous
   * @return previous
   */
  @javax.annotation.Nullable
  public HrefType getPrevious() {
    return previous;
  }

  public void setPrevious(HrefType previous) {
    this.previous = previous;
  }


  public LinksAll scaOAuth(HrefType scaOAuth) {
    this.scaOAuth = scaOAuth;
    return this;
  }

  /**
   * Get scaOAuth
   * @return scaOAuth
   */
  @javax.annotation.Nullable
  public HrefType getScaOAuth() {
    return scaOAuth;
  }

  public void setScaOAuth(HrefType scaOAuth) {
    this.scaOAuth = scaOAuth;
  }


  public LinksAll scaRedirect(HrefType scaRedirect) {
    this.scaRedirect = scaRedirect;
    return this;
  }

  /**
   * Get scaRedirect
   * @return scaRedirect
   */
  @javax.annotation.Nullable
  public HrefType getScaRedirect() {
    return scaRedirect;
  }

  public void setScaRedirect(HrefType scaRedirect) {
    this.scaRedirect = scaRedirect;
  }


  public LinksAll scaStatus(HrefType scaStatus) {
    this.scaStatus = scaStatus;
    return this;
  }

  /**
   * Get scaStatus
   * @return scaStatus
   */
  @javax.annotation.Nullable
  public HrefType getScaStatus() {
    return scaStatus;
  }

  public void setScaStatus(HrefType scaStatus) {
    this.scaStatus = scaStatus;
  }


  public LinksAll selectAuthenticationMethod(HrefType selectAuthenticationMethod) {
    this.selectAuthenticationMethod = selectAuthenticationMethod;
    return this;
  }

  /**
   * Get selectAuthenticationMethod
   * @return selectAuthenticationMethod
   */
  @javax.annotation.Nullable
  public HrefType getSelectAuthenticationMethod() {
    return selectAuthenticationMethod;
  }

  public void setSelectAuthenticationMethod(HrefType selectAuthenticationMethod) {
    this.selectAuthenticationMethod = selectAuthenticationMethod;
  }


  public LinksAll self(HrefType self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public HrefType getSelf() {
    return self;
  }

  public void setSelf(HrefType self) {
    this.self = self;
  }


  public LinksAll startAuthorisation(HrefType startAuthorisation) {
    this.startAuthorisation = startAuthorisation;
    return this;
  }

  /**
   * Get startAuthorisation
   * @return startAuthorisation
   */
  @javax.annotation.Nullable
  public HrefType getStartAuthorisation() {
    return startAuthorisation;
  }

  public void setStartAuthorisation(HrefType startAuthorisation) {
    this.startAuthorisation = startAuthorisation;
  }


  public LinksAll startAuthorisationWithAuthenticationMethodSelection(HrefType startAuthorisationWithAuthenticationMethodSelection) {
    this.startAuthorisationWithAuthenticationMethodSelection = startAuthorisationWithAuthenticationMethodSelection;
    return this;
  }

  /**
   * Get startAuthorisationWithAuthenticationMethodSelection
   * @return startAuthorisationWithAuthenticationMethodSelection
   */
  @javax.annotation.Nullable
  public HrefType getStartAuthorisationWithAuthenticationMethodSelection() {
    return startAuthorisationWithAuthenticationMethodSelection;
  }

  public void setStartAuthorisationWithAuthenticationMethodSelection(HrefType startAuthorisationWithAuthenticationMethodSelection) {
    this.startAuthorisationWithAuthenticationMethodSelection = startAuthorisationWithAuthenticationMethodSelection;
  }


  public LinksAll startAuthorisationWithEncryptedPsuAuthentication(HrefType startAuthorisationWithEncryptedPsuAuthentication) {
    this.startAuthorisationWithEncryptedPsuAuthentication = startAuthorisationWithEncryptedPsuAuthentication;
    return this;
  }

  /**
   * Get startAuthorisationWithEncryptedPsuAuthentication
   * @return startAuthorisationWithEncryptedPsuAuthentication
   */
  @javax.annotation.Nullable
  public HrefType getStartAuthorisationWithEncryptedPsuAuthentication() {
    return startAuthorisationWithEncryptedPsuAuthentication;
  }

  public void setStartAuthorisationWithEncryptedPsuAuthentication(HrefType startAuthorisationWithEncryptedPsuAuthentication) {
    this.startAuthorisationWithEncryptedPsuAuthentication = startAuthorisationWithEncryptedPsuAuthentication;
  }


  public LinksAll startAuthorisationWithProprietaryData(HrefType startAuthorisationWithProprietaryData) {
    this.startAuthorisationWithProprietaryData = startAuthorisationWithProprietaryData;
    return this;
  }

  /**
   * Get startAuthorisationWithProprietaryData
   * @return startAuthorisationWithProprietaryData
   */
  @javax.annotation.Nullable
  public HrefType getStartAuthorisationWithProprietaryData() {
    return startAuthorisationWithProprietaryData;
  }

  public void setStartAuthorisationWithProprietaryData(HrefType startAuthorisationWithProprietaryData) {
    this.startAuthorisationWithProprietaryData = startAuthorisationWithProprietaryData;
  }


  public LinksAll startAuthorisationWithPsuAuthentication(HrefType startAuthorisationWithPsuAuthentication) {
    this.startAuthorisationWithPsuAuthentication = startAuthorisationWithPsuAuthentication;
    return this;
  }

  /**
   * Get startAuthorisationWithPsuAuthentication
   * @return startAuthorisationWithPsuAuthentication
   */
  @javax.annotation.Nullable
  public HrefType getStartAuthorisationWithPsuAuthentication() {
    return startAuthorisationWithPsuAuthentication;
  }

  public void setStartAuthorisationWithPsuAuthentication(HrefType startAuthorisationWithPsuAuthentication) {
    this.startAuthorisationWithPsuAuthentication = startAuthorisationWithPsuAuthentication;
  }


  public LinksAll startAuthorisationWithPsuIdentification(HrefType startAuthorisationWithPsuIdentification) {
    this.startAuthorisationWithPsuIdentification = startAuthorisationWithPsuIdentification;
    return this;
  }

  /**
   * Get startAuthorisationWithPsuIdentification
   * @return startAuthorisationWithPsuIdentification
   */
  @javax.annotation.Nullable
  public HrefType getStartAuthorisationWithPsuIdentification() {
    return startAuthorisationWithPsuIdentification;
  }

  public void setStartAuthorisationWithPsuIdentification(HrefType startAuthorisationWithPsuIdentification) {
    this.startAuthorisationWithPsuIdentification = startAuthorisationWithPsuIdentification;
  }


  public LinksAll startAuthorisationWithTransactionAuthorisation(HrefType startAuthorisationWithTransactionAuthorisation) {
    this.startAuthorisationWithTransactionAuthorisation = startAuthorisationWithTransactionAuthorisation;
    return this;
  }

  /**
   * Get startAuthorisationWithTransactionAuthorisation
   * @return startAuthorisationWithTransactionAuthorisation
   */
  @javax.annotation.Nullable
  public HrefType getStartAuthorisationWithTransactionAuthorisation() {
    return startAuthorisationWithTransactionAuthorisation;
  }

  public void setStartAuthorisationWithTransactionAuthorisation(HrefType startAuthorisationWithTransactionAuthorisation) {
    this.startAuthorisationWithTransactionAuthorisation = startAuthorisationWithTransactionAuthorisation;
  }


  public LinksAll status(HrefType status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public HrefType getStatus() {
    return status;
  }

  public void setStatus(HrefType status) {
    this.status = status;
  }


  public LinksAll transactionDetails(HrefType transactionDetails) {
    this.transactionDetails = transactionDetails;
    return this;
  }

  /**
   * Get transactionDetails
   * @return transactionDetails
   */
  @javax.annotation.Nullable
  public HrefType getTransactionDetails() {
    return transactionDetails;
  }

  public void setTransactionDetails(HrefType transactionDetails) {
    this.transactionDetails = transactionDetails;
  }


  public LinksAll transactions(HrefType transactions) {
    this.transactions = transactions;
    return this;
  }

  /**
   * Get transactions
   * @return transactions
   */
  @javax.annotation.Nullable
  public HrefType getTransactions() {
    return transactions;
  }

  public void setTransactions(HrefType transactions) {
    this.transactions = transactions;
  }


  public LinksAll updateAdditionalEncryptedPsuAuthentication(HrefType updateAdditionalEncryptedPsuAuthentication) {
    this.updateAdditionalEncryptedPsuAuthentication = updateAdditionalEncryptedPsuAuthentication;
    return this;
  }

  /**
   * Get updateAdditionalEncryptedPsuAuthentication
   * @return updateAdditionalEncryptedPsuAuthentication
   */
  @javax.annotation.Nullable
  public HrefType getUpdateAdditionalEncryptedPsuAuthentication() {
    return updateAdditionalEncryptedPsuAuthentication;
  }

  public void setUpdateAdditionalEncryptedPsuAuthentication(HrefType updateAdditionalEncryptedPsuAuthentication) {
    this.updateAdditionalEncryptedPsuAuthentication = updateAdditionalEncryptedPsuAuthentication;
  }


  public LinksAll updateAdditionalPsuAuthentication(HrefType updateAdditionalPsuAuthentication) {
    this.updateAdditionalPsuAuthentication = updateAdditionalPsuAuthentication;
    return this;
  }

  /**
   * Get updateAdditionalPsuAuthentication
   * @return updateAdditionalPsuAuthentication
   */
  @javax.annotation.Nullable
  public HrefType getUpdateAdditionalPsuAuthentication() {
    return updateAdditionalPsuAuthentication;
  }

  public void setUpdateAdditionalPsuAuthentication(HrefType updateAdditionalPsuAuthentication) {
    this.updateAdditionalPsuAuthentication = updateAdditionalPsuAuthentication;
  }


  public LinksAll updateEncryptedPsuAuthentication(HrefType updateEncryptedPsuAuthentication) {
    this.updateEncryptedPsuAuthentication = updateEncryptedPsuAuthentication;
    return this;
  }

  /**
   * Get updateEncryptedPsuAuthentication
   * @return updateEncryptedPsuAuthentication
   */
  @javax.annotation.Nullable
  public HrefType getUpdateEncryptedPsuAuthentication() {
    return updateEncryptedPsuAuthentication;
  }

  public void setUpdateEncryptedPsuAuthentication(HrefType updateEncryptedPsuAuthentication) {
    this.updateEncryptedPsuAuthentication = updateEncryptedPsuAuthentication;
  }


  public LinksAll updateProprietaryData(HrefType updateProprietaryData) {
    this.updateProprietaryData = updateProprietaryData;
    return this;
  }

  /**
   * Get updateProprietaryData
   * @return updateProprietaryData
   */
  @javax.annotation.Nullable
  public HrefType getUpdateProprietaryData() {
    return updateProprietaryData;
  }

  public void setUpdateProprietaryData(HrefType updateProprietaryData) {
    this.updateProprietaryData = updateProprietaryData;
  }


  public LinksAll updatePsuAuthentication(HrefType updatePsuAuthentication) {
    this.updatePsuAuthentication = updatePsuAuthentication;
    return this;
  }

  /**
   * Get updatePsuAuthentication
   * @return updatePsuAuthentication
   */
  @javax.annotation.Nullable
  public HrefType getUpdatePsuAuthentication() {
    return updatePsuAuthentication;
  }

  public void setUpdatePsuAuthentication(HrefType updatePsuAuthentication) {
    this.updatePsuAuthentication = updatePsuAuthentication;
  }


  public LinksAll updatePsuIdentification(HrefType updatePsuIdentification) {
    this.updatePsuIdentification = updatePsuIdentification;
    return this;
  }

  /**
   * Get updatePsuIdentification
   * @return updatePsuIdentification
   */
  @javax.annotation.Nullable
  public HrefType getUpdatePsuIdentification() {
    return updatePsuIdentification;
  }

  public void setUpdatePsuIdentification(HrefType updatePsuIdentification) {
    this.updatePsuIdentification = updatePsuIdentification;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LinksAll instance itself
   */
  public LinksAll putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinksAll linksAll = (LinksAll) o;
    return Objects.equals(this.account, linksAll.account) &&
        Objects.equals(this.authoriseTransaction, linksAll.authoriseTransaction) &&
        Objects.equals(this.balances, linksAll.balances) &&
        Objects.equals(this.cardAccount, linksAll.cardAccount) &&
        Objects.equals(this.cardTransactions, linksAll.cardTransactions) &&
        Objects.equals(this.confirmation, linksAll.confirmation) &&
        Objects.equals(this.download, linksAll.download) &&
        Objects.equals(this.first, linksAll.first) &&
        Objects.equals(this.last, linksAll.last) &&
        Objects.equals(this.next, linksAll.next) &&
        Objects.equals(this.previous, linksAll.previous) &&
        Objects.equals(this.scaOAuth, linksAll.scaOAuth) &&
        Objects.equals(this.scaRedirect, linksAll.scaRedirect) &&
        Objects.equals(this.scaStatus, linksAll.scaStatus) &&
        Objects.equals(this.selectAuthenticationMethod, linksAll.selectAuthenticationMethod) &&
        Objects.equals(this.self, linksAll.self) &&
        Objects.equals(this.startAuthorisation, linksAll.startAuthorisation) &&
        Objects.equals(this.startAuthorisationWithAuthenticationMethodSelection, linksAll.startAuthorisationWithAuthenticationMethodSelection) &&
        Objects.equals(this.startAuthorisationWithEncryptedPsuAuthentication, linksAll.startAuthorisationWithEncryptedPsuAuthentication) &&
        Objects.equals(this.startAuthorisationWithProprietaryData, linksAll.startAuthorisationWithProprietaryData) &&
        Objects.equals(this.startAuthorisationWithPsuAuthentication, linksAll.startAuthorisationWithPsuAuthentication) &&
        Objects.equals(this.startAuthorisationWithPsuIdentification, linksAll.startAuthorisationWithPsuIdentification) &&
        Objects.equals(this.startAuthorisationWithTransactionAuthorisation, linksAll.startAuthorisationWithTransactionAuthorisation) &&
        Objects.equals(this.status, linksAll.status) &&
        Objects.equals(this.transactionDetails, linksAll.transactionDetails) &&
        Objects.equals(this.transactions, linksAll.transactions) &&
        Objects.equals(this.updateAdditionalEncryptedPsuAuthentication, linksAll.updateAdditionalEncryptedPsuAuthentication) &&
        Objects.equals(this.updateAdditionalPsuAuthentication, linksAll.updateAdditionalPsuAuthentication) &&
        Objects.equals(this.updateEncryptedPsuAuthentication, linksAll.updateEncryptedPsuAuthentication) &&
        Objects.equals(this.updateProprietaryData, linksAll.updateProprietaryData) &&
        Objects.equals(this.updatePsuAuthentication, linksAll.updatePsuAuthentication) &&
        Objects.equals(this.updatePsuIdentification, linksAll.updatePsuIdentification)&&
        Objects.equals(this.additionalProperties, linksAll.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, authoriseTransaction, balances, cardAccount, cardTransactions, confirmation, download, first, last, next, previous, scaOAuth, scaRedirect, scaStatus, selectAuthenticationMethod, self, startAuthorisation, startAuthorisationWithAuthenticationMethodSelection, startAuthorisationWithEncryptedPsuAuthentication, startAuthorisationWithProprietaryData, startAuthorisationWithPsuAuthentication, startAuthorisationWithPsuIdentification, startAuthorisationWithTransactionAuthorisation, status, transactionDetails, transactions, updateAdditionalEncryptedPsuAuthentication, updateAdditionalPsuAuthentication, updateEncryptedPsuAuthentication, updateProprietaryData, updatePsuAuthentication, updatePsuIdentification, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinksAll {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    authoriseTransaction: ").append(toIndentedString(authoriseTransaction)).append("\n");
    sb.append("    balances: ").append(toIndentedString(balances)).append("\n");
    sb.append("    cardAccount: ").append(toIndentedString(cardAccount)).append("\n");
    sb.append("    cardTransactions: ").append(toIndentedString(cardTransactions)).append("\n");
    sb.append("    confirmation: ").append(toIndentedString(confirmation)).append("\n");
    sb.append("    download: ").append(toIndentedString(download)).append("\n");
    sb.append("    first: ").append(toIndentedString(first)).append("\n");
    sb.append("    last: ").append(toIndentedString(last)).append("\n");
    sb.append("    next: ").append(toIndentedString(next)).append("\n");
    sb.append("    previous: ").append(toIndentedString(previous)).append("\n");
    sb.append("    scaOAuth: ").append(toIndentedString(scaOAuth)).append("\n");
    sb.append("    scaRedirect: ").append(toIndentedString(scaRedirect)).append("\n");
    sb.append("    scaStatus: ").append(toIndentedString(scaStatus)).append("\n");
    sb.append("    selectAuthenticationMethod: ").append(toIndentedString(selectAuthenticationMethod)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    startAuthorisation: ").append(toIndentedString(startAuthorisation)).append("\n");
    sb.append("    startAuthorisationWithAuthenticationMethodSelection: ").append(toIndentedString(startAuthorisationWithAuthenticationMethodSelection)).append("\n");
    sb.append("    startAuthorisationWithEncryptedPsuAuthentication: ").append(toIndentedString(startAuthorisationWithEncryptedPsuAuthentication)).append("\n");
    sb.append("    startAuthorisationWithProprietaryData: ").append(toIndentedString(startAuthorisationWithProprietaryData)).append("\n");
    sb.append("    startAuthorisationWithPsuAuthentication: ").append(toIndentedString(startAuthorisationWithPsuAuthentication)).append("\n");
    sb.append("    startAuthorisationWithPsuIdentification: ").append(toIndentedString(startAuthorisationWithPsuIdentification)).append("\n");
    sb.append("    startAuthorisationWithTransactionAuthorisation: ").append(toIndentedString(startAuthorisationWithTransactionAuthorisation)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    transactionDetails: ").append(toIndentedString(transactionDetails)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    updateAdditionalEncryptedPsuAuthentication: ").append(toIndentedString(updateAdditionalEncryptedPsuAuthentication)).append("\n");
    sb.append("    updateAdditionalPsuAuthentication: ").append(toIndentedString(updateAdditionalPsuAuthentication)).append("\n");
    sb.append("    updateEncryptedPsuAuthentication: ").append(toIndentedString(updateEncryptedPsuAuthentication)).append("\n");
    sb.append("    updateProprietaryData: ").append(toIndentedString(updateProprietaryData)).append("\n");
    sb.append("    updatePsuAuthentication: ").append(toIndentedString(updatePsuAuthentication)).append("\n");
    sb.append("    updatePsuIdentification: ").append(toIndentedString(updatePsuIdentification)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("authoriseTransaction");
    openapiFields.add("balances");
    openapiFields.add("cardAccount");
    openapiFields.add("cardTransactions");
    openapiFields.add("confirmation");
    openapiFields.add("download");
    openapiFields.add("first");
    openapiFields.add("last");
    openapiFields.add("next");
    openapiFields.add("previous");
    openapiFields.add("scaOAuth");
    openapiFields.add("scaRedirect");
    openapiFields.add("scaStatus");
    openapiFields.add("selectAuthenticationMethod");
    openapiFields.add("self");
    openapiFields.add("startAuthorisation");
    openapiFields.add("startAuthorisationWithAuthenticationMethodSelection");
    openapiFields.add("startAuthorisationWithEncryptedPsuAuthentication");
    openapiFields.add("startAuthorisationWithProprietaryData");
    openapiFields.add("startAuthorisationWithPsuAuthentication");
    openapiFields.add("startAuthorisationWithPsuIdentification");
    openapiFields.add("startAuthorisationWithTransactionAuthorisation");
    openapiFields.add("status");
    openapiFields.add("transactionDetails");
    openapiFields.add("transactions");
    openapiFields.add("updateAdditionalEncryptedPsuAuthentication");
    openapiFields.add("updateAdditionalPsuAuthentication");
    openapiFields.add("updateEncryptedPsuAuthentication");
    openapiFields.add("updateProprietaryData");
    openapiFields.add("updatePsuAuthentication");
    openapiFields.add("updatePsuIdentification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LinksAll
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinksAll.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinksAll is not found in the empty JSON string", LinksAll.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `account`
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("account"));
      }
      // validate the optional field `authoriseTransaction`
      if (jsonObj.get("authoriseTransaction") != null && !jsonObj.get("authoriseTransaction").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("authoriseTransaction"));
      }
      // validate the optional field `balances`
      if (jsonObj.get("balances") != null && !jsonObj.get("balances").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("balances"));
      }
      // validate the optional field `cardAccount`
      if (jsonObj.get("cardAccount") != null && !jsonObj.get("cardAccount").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("cardAccount"));
      }
      // validate the optional field `cardTransactions`
      if (jsonObj.get("cardTransactions") != null && !jsonObj.get("cardTransactions").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("cardTransactions"));
      }
      // validate the optional field `confirmation`
      if (jsonObj.get("confirmation") != null && !jsonObj.get("confirmation").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("confirmation"));
      }
      // validate the optional field `download`
      if (jsonObj.get("download") != null && !jsonObj.get("download").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("download"));
      }
      // validate the optional field `first`
      if (jsonObj.get("first") != null && !jsonObj.get("first").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("first"));
      }
      // validate the optional field `last`
      if (jsonObj.get("last") != null && !jsonObj.get("last").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("last"));
      }
      // validate the optional field `next`
      if (jsonObj.get("next") != null && !jsonObj.get("next").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("next"));
      }
      // validate the optional field `previous`
      if (jsonObj.get("previous") != null && !jsonObj.get("previous").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("previous"));
      }
      // validate the optional field `scaOAuth`
      if (jsonObj.get("scaOAuth") != null && !jsonObj.get("scaOAuth").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("scaOAuth"));
      }
      // validate the optional field `scaRedirect`
      if (jsonObj.get("scaRedirect") != null && !jsonObj.get("scaRedirect").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("scaRedirect"));
      }
      // validate the optional field `scaStatus`
      if (jsonObj.get("scaStatus") != null && !jsonObj.get("scaStatus").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("scaStatus"));
      }
      // validate the optional field `selectAuthenticationMethod`
      if (jsonObj.get("selectAuthenticationMethod") != null && !jsonObj.get("selectAuthenticationMethod").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("selectAuthenticationMethod"));
      }
      // validate the optional field `self`
      if (jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("self"));
      }
      // validate the optional field `startAuthorisation`
      if (jsonObj.get("startAuthorisation") != null && !jsonObj.get("startAuthorisation").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("startAuthorisation"));
      }
      // validate the optional field `startAuthorisationWithAuthenticationMethodSelection`
      if (jsonObj.get("startAuthorisationWithAuthenticationMethodSelection") != null && !jsonObj.get("startAuthorisationWithAuthenticationMethodSelection").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("startAuthorisationWithAuthenticationMethodSelection"));
      }
      // validate the optional field `startAuthorisationWithEncryptedPsuAuthentication`
      if (jsonObj.get("startAuthorisationWithEncryptedPsuAuthentication") != null && !jsonObj.get("startAuthorisationWithEncryptedPsuAuthentication").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("startAuthorisationWithEncryptedPsuAuthentication"));
      }
      // validate the optional field `startAuthorisationWithProprietaryData`
      if (jsonObj.get("startAuthorisationWithProprietaryData") != null && !jsonObj.get("startAuthorisationWithProprietaryData").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("startAuthorisationWithProprietaryData"));
      }
      // validate the optional field `startAuthorisationWithPsuAuthentication`
      if (jsonObj.get("startAuthorisationWithPsuAuthentication") != null && !jsonObj.get("startAuthorisationWithPsuAuthentication").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("startAuthorisationWithPsuAuthentication"));
      }
      // validate the optional field `startAuthorisationWithPsuIdentification`
      if (jsonObj.get("startAuthorisationWithPsuIdentification") != null && !jsonObj.get("startAuthorisationWithPsuIdentification").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("startAuthorisationWithPsuIdentification"));
      }
      // validate the optional field `startAuthorisationWithTransactionAuthorisation`
      if (jsonObj.get("startAuthorisationWithTransactionAuthorisation") != null && !jsonObj.get("startAuthorisationWithTransactionAuthorisation").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("startAuthorisationWithTransactionAuthorisation"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `transactionDetails`
      if (jsonObj.get("transactionDetails") != null && !jsonObj.get("transactionDetails").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("transactionDetails"));
      }
      // validate the optional field `transactions`
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("transactions"));
      }
      // validate the optional field `updateAdditionalEncryptedPsuAuthentication`
      if (jsonObj.get("updateAdditionalEncryptedPsuAuthentication") != null && !jsonObj.get("updateAdditionalEncryptedPsuAuthentication").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("updateAdditionalEncryptedPsuAuthentication"));
      }
      // validate the optional field `updateAdditionalPsuAuthentication`
      if (jsonObj.get("updateAdditionalPsuAuthentication") != null && !jsonObj.get("updateAdditionalPsuAuthentication").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("updateAdditionalPsuAuthentication"));
      }
      // validate the optional field `updateEncryptedPsuAuthentication`
      if (jsonObj.get("updateEncryptedPsuAuthentication") != null && !jsonObj.get("updateEncryptedPsuAuthentication").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("updateEncryptedPsuAuthentication"));
      }
      // validate the optional field `updateProprietaryData`
      if (jsonObj.get("updateProprietaryData") != null && !jsonObj.get("updateProprietaryData").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("updateProprietaryData"));
      }
      // validate the optional field `updatePsuAuthentication`
      if (jsonObj.get("updatePsuAuthentication") != null && !jsonObj.get("updatePsuAuthentication").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("updatePsuAuthentication"));
      }
      // validate the optional field `updatePsuIdentification`
      if (jsonObj.get("updatePsuIdentification") != null && !jsonObj.get("updatePsuIdentification").isJsonNull()) {
        HrefType.validateJsonElement(jsonObj.get("updatePsuIdentification"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinksAll.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinksAll' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinksAll> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinksAll.class));

       return (TypeAdapter<T>) new TypeAdapter<LinksAll>() {
           @Override
           public void write(JsonWriter out, LinksAll value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LinksAll read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             LinksAll instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LinksAll given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LinksAll
   * @throws IOException if the JSON string is invalid with respect to LinksAll
   */
  public static LinksAll fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinksAll.class);
  }

  /**
   * Convert an instance of LinksAll to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

