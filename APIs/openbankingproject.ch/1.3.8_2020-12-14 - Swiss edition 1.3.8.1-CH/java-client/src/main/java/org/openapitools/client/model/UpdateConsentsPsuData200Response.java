/*
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.AuthenticationObject;
import org.openapitools.client.model.AuthorisationConfirmationResponse;
import org.openapitools.client.model.ChallengeData;
import org.openapitools.client.model.LinksAuthorisationConfirmation;
import org.openapitools.client.model.ScaStatusAuthorisationConfirmation;
import org.openapitools.client.model.ScaStatusResponse;
import org.openapitools.client.model.SelectPsuAuthenticationMethodResponse;
import org.openapitools.client.model.UpdatePsuAuthenticationResponse;
import org.openapitools.client.model.UpdatePsuIdenticationResponse;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:56.314640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateConsentsPsuData200Response extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(UpdateConsentsPsuData200Response.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpdateConsentsPsuData200Response.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UpdateConsentsPsuData200Response' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UpdatePsuIdenticationResponse> adapterUpdatePsuIdenticationResponse = gson.getDelegateAdapter(this, TypeToken.get(UpdatePsuIdenticationResponse.class));
            final TypeAdapter<UpdatePsuAuthenticationResponse> adapterUpdatePsuAuthenticationResponse = gson.getDelegateAdapter(this, TypeToken.get(UpdatePsuAuthenticationResponse.class));
            final TypeAdapter<SelectPsuAuthenticationMethodResponse> adapterSelectPsuAuthenticationMethodResponse = gson.getDelegateAdapter(this, TypeToken.get(SelectPsuAuthenticationMethodResponse.class));
            final TypeAdapter<ScaStatusResponse> adapterScaStatusResponse = gson.getDelegateAdapter(this, TypeToken.get(ScaStatusResponse.class));
            final TypeAdapter<AuthorisationConfirmationResponse> adapterAuthorisationConfirmationResponse = gson.getDelegateAdapter(this, TypeToken.get(AuthorisationConfirmationResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<UpdateConsentsPsuData200Response>() {
                @Override
                public void write(JsonWriter out, UpdateConsentsPsuData200Response value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `UpdatePsuIdenticationResponse`
                    if (value.getActualInstance() instanceof UpdatePsuIdenticationResponse) {
                        JsonElement element = adapterUpdatePsuIdenticationResponse.toJsonTree((UpdatePsuIdenticationResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UpdatePsuAuthenticationResponse`
                    if (value.getActualInstance() instanceof UpdatePsuAuthenticationResponse) {
                        JsonElement element = adapterUpdatePsuAuthenticationResponse.toJsonTree((UpdatePsuAuthenticationResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SelectPsuAuthenticationMethodResponse`
                    if (value.getActualInstance() instanceof SelectPsuAuthenticationMethodResponse) {
                        JsonElement element = adapterSelectPsuAuthenticationMethodResponse.toJsonTree((SelectPsuAuthenticationMethodResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ScaStatusResponse`
                    if (value.getActualInstance() instanceof ScaStatusResponse) {
                        JsonElement element = adapterScaStatusResponse.toJsonTree((ScaStatusResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuthorisationConfirmationResponse`
                    if (value.getActualInstance() instanceof AuthorisationConfirmationResponse) {
                        JsonElement element = adapterAuthorisationConfirmationResponse.toJsonTree((AuthorisationConfirmationResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AuthorisationConfirmationResponse, ScaStatusResponse, SelectPsuAuthenticationMethodResponse, UpdatePsuAuthenticationResponse, UpdatePsuIdenticationResponse");
                }

                @Override
                public UpdateConsentsPsuData200Response read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize UpdatePsuIdenticationResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UpdatePsuIdenticationResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterUpdatePsuIdenticationResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UpdatePsuIdenticationResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UpdatePsuIdenticationResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UpdatePsuIdenticationResponse'", e);
                    }
                    // deserialize UpdatePsuAuthenticationResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UpdatePsuAuthenticationResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterUpdatePsuAuthenticationResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UpdatePsuAuthenticationResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UpdatePsuAuthenticationResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UpdatePsuAuthenticationResponse'", e);
                    }
                    // deserialize SelectPsuAuthenticationMethodResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SelectPsuAuthenticationMethodResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterSelectPsuAuthenticationMethodResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SelectPsuAuthenticationMethodResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SelectPsuAuthenticationMethodResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SelectPsuAuthenticationMethodResponse'", e);
                    }
                    // deserialize ScaStatusResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ScaStatusResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterScaStatusResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ScaStatusResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ScaStatusResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ScaStatusResponse'", e);
                    }
                    // deserialize AuthorisationConfirmationResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthorisationConfirmationResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuthorisationConfirmationResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuthorisationConfirmationResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuthorisationConfirmationResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuthorisationConfirmationResponse'", e);
                    }

                    if (match == 1) {
                        UpdateConsentsPsuData200Response ret = new UpdateConsentsPsuData200Response();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for UpdateConsentsPsuData200Response: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public UpdateConsentsPsuData200Response() {
        super("oneOf", Boolean.FALSE);
    }

    public UpdateConsentsPsuData200Response(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("UpdatePsuIdenticationResponse", UpdatePsuIdenticationResponse.class);
        schemas.put("UpdatePsuAuthenticationResponse", UpdatePsuAuthenticationResponse.class);
        schemas.put("SelectPsuAuthenticationMethodResponse", SelectPsuAuthenticationMethodResponse.class);
        schemas.put("ScaStatusResponse", ScaStatusResponse.class);
        schemas.put("AuthorisationConfirmationResponse", AuthorisationConfirmationResponse.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return UpdateConsentsPsuData200Response.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AuthorisationConfirmationResponse, ScaStatusResponse, SelectPsuAuthenticationMethodResponse, UpdatePsuAuthenticationResponse, UpdatePsuIdenticationResponse
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof UpdatePsuIdenticationResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UpdatePsuAuthenticationResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SelectPsuAuthenticationMethodResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ScaStatusResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuthorisationConfirmationResponse) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AuthorisationConfirmationResponse, ScaStatusResponse, SelectPsuAuthenticationMethodResponse, UpdatePsuAuthenticationResponse, UpdatePsuIdenticationResponse");
    }

    /**
     * Get the actual instance, which can be the following:
     * AuthorisationConfirmationResponse, ScaStatusResponse, SelectPsuAuthenticationMethodResponse, UpdatePsuAuthenticationResponse, UpdatePsuIdenticationResponse
     *
     * @return The actual instance (AuthorisationConfirmationResponse, ScaStatusResponse, SelectPsuAuthenticationMethodResponse, UpdatePsuAuthenticationResponse, UpdatePsuIdenticationResponse)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `UpdatePsuIdenticationResponse`. If the actual instance is not `UpdatePsuIdenticationResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UpdatePsuIdenticationResponse`
     * @throws ClassCastException if the instance is not `UpdatePsuIdenticationResponse`
     */
    public UpdatePsuIdenticationResponse getUpdatePsuIdenticationResponse() throws ClassCastException {
        return (UpdatePsuIdenticationResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UpdatePsuAuthenticationResponse`. If the actual instance is not `UpdatePsuAuthenticationResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UpdatePsuAuthenticationResponse`
     * @throws ClassCastException if the instance is not `UpdatePsuAuthenticationResponse`
     */
    public UpdatePsuAuthenticationResponse getUpdatePsuAuthenticationResponse() throws ClassCastException {
        return (UpdatePsuAuthenticationResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SelectPsuAuthenticationMethodResponse`. If the actual instance is not `SelectPsuAuthenticationMethodResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SelectPsuAuthenticationMethodResponse`
     * @throws ClassCastException if the instance is not `SelectPsuAuthenticationMethodResponse`
     */
    public SelectPsuAuthenticationMethodResponse getSelectPsuAuthenticationMethodResponse() throws ClassCastException {
        return (SelectPsuAuthenticationMethodResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ScaStatusResponse`. If the actual instance is not `ScaStatusResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ScaStatusResponse`
     * @throws ClassCastException if the instance is not `ScaStatusResponse`
     */
    public ScaStatusResponse getScaStatusResponse() throws ClassCastException {
        return (ScaStatusResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AuthorisationConfirmationResponse`. If the actual instance is not `AuthorisationConfirmationResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthorisationConfirmationResponse`
     * @throws ClassCastException if the instance is not `AuthorisationConfirmationResponse`
     */
    public AuthorisationConfirmationResponse getAuthorisationConfirmationResponse() throws ClassCastException {
        return (AuthorisationConfirmationResponse)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to UpdateConsentsPsuData200Response
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with UpdatePsuIdenticationResponse
        try {
            UpdatePsuIdenticationResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UpdatePsuIdenticationResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UpdatePsuAuthenticationResponse
        try {
            UpdatePsuAuthenticationResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UpdatePsuAuthenticationResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SelectPsuAuthenticationMethodResponse
        try {
            SelectPsuAuthenticationMethodResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SelectPsuAuthenticationMethodResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ScaStatusResponse
        try {
            ScaStatusResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ScaStatusResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuthorisationConfirmationResponse
        try {
            AuthorisationConfirmationResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuthorisationConfirmationResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for UpdateConsentsPsuData200Response with oneOf schemas: AuthorisationConfirmationResponse, ScaStatusResponse, SelectPsuAuthenticationMethodResponse, UpdatePsuAuthenticationResponse, UpdatePsuIdenticationResponse. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of UpdateConsentsPsuData200Response given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UpdateConsentsPsuData200Response
     * @throws IOException if the JSON string is invalid with respect to UpdateConsentsPsuData200Response
     */
    public static UpdateConsentsPsuData200Response fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, UpdateConsentsPsuData200Response.class);
    }

    /**
     * Convert an instance of UpdateConsentsPsuData200Response to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

