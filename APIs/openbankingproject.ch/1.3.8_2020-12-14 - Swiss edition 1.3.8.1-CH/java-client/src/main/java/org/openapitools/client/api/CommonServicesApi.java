/*
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Authorisations;
import org.openapitools.client.model.Error400AIS;
import org.openapitools.client.model.Error400NGAIS;
import org.openapitools.client.model.Error400NGPIS;
import org.openapitools.client.model.Error400NGSBS;
import org.openapitools.client.model.Error400PIS;
import org.openapitools.client.model.Error400SBS;
import org.openapitools.client.model.Error401AIS;
import org.openapitools.client.model.Error401NGAIS;
import org.openapitools.client.model.Error401NGPIS;
import org.openapitools.client.model.Error401NGSBS;
import org.openapitools.client.model.Error401PIS;
import org.openapitools.client.model.Error401SBS;
import org.openapitools.client.model.Error403AIS;
import org.openapitools.client.model.Error403NGAIS;
import org.openapitools.client.model.Error403NGPIS;
import org.openapitools.client.model.Error403NGSBS;
import org.openapitools.client.model.Error403PIS;
import org.openapitools.client.model.Error403SBS;
import org.openapitools.client.model.Error404AIS;
import org.openapitools.client.model.Error404NGAIS;
import org.openapitools.client.model.Error404NGPIS;
import org.openapitools.client.model.Error404NGSBS;
import org.openapitools.client.model.Error404PIS;
import org.openapitools.client.model.Error404SBS;
import org.openapitools.client.model.Error405AIS;
import org.openapitools.client.model.Error405NGAIS;
import org.openapitools.client.model.Error405NGPIS;
import org.openapitools.client.model.Error405NGSBS;
import org.openapitools.client.model.Error405PIS;
import org.openapitools.client.model.Error405SBS;
import org.openapitools.client.model.Error406AIS;
import org.openapitools.client.model.Error406NGAIS;
import org.openapitools.client.model.Error409AIS;
import org.openapitools.client.model.Error409NGAIS;
import org.openapitools.client.model.Error409NGPIS;
import org.openapitools.client.model.Error409NGSBS;
import org.openapitools.client.model.Error409PIS;
import org.openapitools.client.model.Error409SBS;
import org.openapitools.client.model.Error429AIS;
import org.openapitools.client.model.Error429NGAIS;
import org.openapitools.client.model.ScaStatusResponse;
import org.openapitools.client.model.SigningBasketStatusResponse200;
import org.openapitools.client.model.StartConsentAuthorisationRequest;
import org.openapitools.client.model.StartScaprocessResponse;
import java.net.URI;
import org.openapitools.client.model.UpdateConsentsPsuData200Response;
import org.openapitools.client.model.UpdateConsentsPsuDataRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommonServicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CommonServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommonServicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteSigningBasket_0
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSigningBasket_0Call(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/signing-baskets/{basketId}"
            .replace("{" + "basketId" + "}", localVarApiClient.escapeString(basketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        if (digest != null) {
            localVarHeaderParams.put("Digest", localVarApiClient.parameterToString(digest));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        if (tpPSignatureCertificate != null) {
            localVarHeaderParams.put("TPP-Signature-Certificate", localVarApiClient.parameterToString(tpPSignatureCertificate));
        }

        if (psUIPAddress != null) {
            localVarHeaderParams.put("PSU-IP-Address", localVarApiClient.parameterToString(psUIPAddress));
        }

        if (psUIPPort != null) {
            localVarHeaderParams.put("PSU-IP-Port", localVarApiClient.parameterToString(psUIPPort));
        }

        if (psUAccept != null) {
            localVarHeaderParams.put("PSU-Accept", localVarApiClient.parameterToString(psUAccept));
        }

        if (psUAcceptCharset != null) {
            localVarHeaderParams.put("PSU-Accept-Charset", localVarApiClient.parameterToString(psUAcceptCharset));
        }

        if (psUAcceptEncoding != null) {
            localVarHeaderParams.put("PSU-Accept-Encoding", localVarApiClient.parameterToString(psUAcceptEncoding));
        }

        if (psUAcceptLanguage != null) {
            localVarHeaderParams.put("PSU-Accept-Language", localVarApiClient.parameterToString(psUAcceptLanguage));
        }

        if (psUUserAgent != null) {
            localVarHeaderParams.put("PSU-User-Agent", localVarApiClient.parameterToString(psUUserAgent));
        }

        if (psUHttpMethod != null) {
            localVarHeaderParams.put("PSU-Http-Method", localVarApiClient.parameterToString(psUHttpMethod));
        }

        if (psUDeviceID != null) {
            localVarHeaderParams.put("PSU-Device-ID", localVarApiClient.parameterToString(psUDeviceID));
        }

        if (psUGeoLocation != null) {
            localVarHeaderParams.put("PSU-Geo-Location", localVarApiClient.parameterToString(psUGeoLocation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuthOAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSigningBasket_0ValidateBeforeCall(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'basketId' is set
        if (basketId == null) {
            throw new ApiException("Missing the required parameter 'basketId' when calling deleteSigningBasket_0(Async)");
        }

        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling deleteSigningBasket_0(Async)");
        }

        return deleteSigningBasket_0Call(basketId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, _callback);

    }

    /**
     * Delete the signing basket
     * Delete the signing basket structure as long as no (partial) authorisation has yet been applied. The undlerying transactions are not affected by this deletion.  Remark: The signing basket as such is not deletable after a first (partial) authorisation has been applied. Nevertheless, single transactions might be cancelled on an individual basis on the XS2A interface. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public void deleteSigningBasket_0(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation) throws ApiException {
        deleteSigningBasket_0WithHttpInfo(basketId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);
    }

    /**
     * Delete the signing basket
     * Delete the signing basket structure as long as no (partial) authorisation has yet been applied. The undlerying transactions are not affected by this deletion.  Remark: The signing basket as such is not deletable after a first (partial) authorisation has been applied. Nevertheless, single transactions might be cancelled on an individual basis on the XS2A interface. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSigningBasket_0WithHttpInfo(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation) throws ApiException {
        okhttp3.Call localVarCall = deleteSigningBasket_0ValidateBeforeCall(basketId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the signing basket (asynchronously)
     * Delete the signing basket structure as long as no (partial) authorisation has yet been applied. The undlerying transactions are not affected by this deletion.  Remark: The signing basket as such is not deletable after a first (partial) authorisation has been applied. Nevertheless, single transactions might be cancelled on an individual basis on the XS2A interface. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSigningBasket_0Async(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSigningBasket_0ValidateBeforeCall(basketId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsentScaStatus_0
     * @param consentId ID of the corresponding consent object as returned by an account information consent request.  (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentScaStatus_0Call(String consentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/consents/{consentId}/authorisations/{authorisationId}"
            .replace("{" + "consentId" + "}", localVarApiClient.escapeString(consentId.toString()))
            .replace("{" + "authorisationId" + "}", localVarApiClient.escapeString(authorisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        if (digest != null) {
            localVarHeaderParams.put("Digest", localVarApiClient.parameterToString(digest));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        if (tpPSignatureCertificate != null) {
            localVarHeaderParams.put("TPP-Signature-Certificate", localVarApiClient.parameterToString(tpPSignatureCertificate));
        }

        if (psUIPAddress != null) {
            localVarHeaderParams.put("PSU-IP-Address", localVarApiClient.parameterToString(psUIPAddress));
        }

        if (psUIPPort != null) {
            localVarHeaderParams.put("PSU-IP-Port", localVarApiClient.parameterToString(psUIPPort));
        }

        if (psUAccept != null) {
            localVarHeaderParams.put("PSU-Accept", localVarApiClient.parameterToString(psUAccept));
        }

        if (psUAcceptCharset != null) {
            localVarHeaderParams.put("PSU-Accept-Charset", localVarApiClient.parameterToString(psUAcceptCharset));
        }

        if (psUAcceptEncoding != null) {
            localVarHeaderParams.put("PSU-Accept-Encoding", localVarApiClient.parameterToString(psUAcceptEncoding));
        }

        if (psUAcceptLanguage != null) {
            localVarHeaderParams.put("PSU-Accept-Language", localVarApiClient.parameterToString(psUAcceptLanguage));
        }

        if (psUUserAgent != null) {
            localVarHeaderParams.put("PSU-User-Agent", localVarApiClient.parameterToString(psUUserAgent));
        }

        if (psUHttpMethod != null) {
            localVarHeaderParams.put("PSU-Http-Method", localVarApiClient.parameterToString(psUHttpMethod));
        }

        if (psUDeviceID != null) {
            localVarHeaderParams.put("PSU-Device-ID", localVarApiClient.parameterToString(psUDeviceID));
        }

        if (psUGeoLocation != null) {
            localVarHeaderParams.put("PSU-Geo-Location", localVarApiClient.parameterToString(psUGeoLocation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuthOAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsentScaStatus_0ValidateBeforeCall(String consentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getConsentScaStatus_0(Async)");
        }

        // verify the required parameter 'authorisationId' is set
        if (authorisationId == null) {
            throw new ApiException("Missing the required parameter 'authorisationId' when calling getConsentScaStatus_0(Async)");
        }

        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling getConsentScaStatus_0(Async)");
        }

        return getConsentScaStatus_0Call(consentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, _callback);

    }

    /**
     * Read the SCA status of the consent authorisation
     * This method returns the SCA status of a consent initiation&#39;s authorisation sub-resource. 
     * @param consentId ID of the corresponding consent object as returned by an account information consent request.  (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return ScaStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ScaStatusResponse getConsentScaStatus_0(String consentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation) throws ApiException {
        ApiResponse<ScaStatusResponse> localVarResp = getConsentScaStatus_0WithHttpInfo(consentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);
        return localVarResp.getData();
    }

    /**
     * Read the SCA status of the consent authorisation
     * This method returns the SCA status of a consent initiation&#39;s authorisation sub-resource. 
     * @param consentId ID of the corresponding consent object as returned by an account information consent request.  (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return ApiResponse&lt;ScaStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ScaStatusResponse> getConsentScaStatus_0WithHttpInfo(String consentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation) throws ApiException {
        okhttp3.Call localVarCall = getConsentScaStatus_0ValidateBeforeCall(consentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, null);
        Type localVarReturnType = new TypeToken<ScaStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read the SCA status of the consent authorisation (asynchronously)
     * This method returns the SCA status of a consent initiation&#39;s authorisation sub-resource. 
     * @param consentId ID of the corresponding consent object as returned by an account information consent request.  (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getConsentScaStatus_0Async(String consentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback<ScaStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsentScaStatus_0ValidateBeforeCall(consentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, _callback);
        Type localVarReturnType = new TypeToken<ScaStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentCancellationScaStatus_0
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentCancellationScaStatus_0Call(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{payment-service}/{payment-product}/{paymentId}/cancellation-authorisations/{authorisationId}"
            .replace("{" + "payment-service" + "}", localVarApiClient.escapeString(paymentService.toString()))
            .replace("{" + "payment-product" + "}", localVarApiClient.escapeString(paymentProduct.toString()))
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()))
            .replace("{" + "authorisationId" + "}", localVarApiClient.escapeString(authorisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        if (digest != null) {
            localVarHeaderParams.put("Digest", localVarApiClient.parameterToString(digest));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        if (tpPSignatureCertificate != null) {
            localVarHeaderParams.put("TPP-Signature-Certificate", localVarApiClient.parameterToString(tpPSignatureCertificate));
        }

        if (psUIPAddress != null) {
            localVarHeaderParams.put("PSU-IP-Address", localVarApiClient.parameterToString(psUIPAddress));
        }

        if (psUIPPort != null) {
            localVarHeaderParams.put("PSU-IP-Port", localVarApiClient.parameterToString(psUIPPort));
        }

        if (psUAccept != null) {
            localVarHeaderParams.put("PSU-Accept", localVarApiClient.parameterToString(psUAccept));
        }

        if (psUAcceptCharset != null) {
            localVarHeaderParams.put("PSU-Accept-Charset", localVarApiClient.parameterToString(psUAcceptCharset));
        }

        if (psUAcceptEncoding != null) {
            localVarHeaderParams.put("PSU-Accept-Encoding", localVarApiClient.parameterToString(psUAcceptEncoding));
        }

        if (psUAcceptLanguage != null) {
            localVarHeaderParams.put("PSU-Accept-Language", localVarApiClient.parameterToString(psUAcceptLanguage));
        }

        if (psUUserAgent != null) {
            localVarHeaderParams.put("PSU-User-Agent", localVarApiClient.parameterToString(psUUserAgent));
        }

        if (psUHttpMethod != null) {
            localVarHeaderParams.put("PSU-Http-Method", localVarApiClient.parameterToString(psUHttpMethod));
        }

        if (psUDeviceID != null) {
            localVarHeaderParams.put("PSU-Device-ID", localVarApiClient.parameterToString(psUDeviceID));
        }

        if (psUGeoLocation != null) {
            localVarHeaderParams.put("PSU-Geo-Location", localVarApiClient.parameterToString(psUGeoLocation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuthOAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentCancellationScaStatus_0ValidateBeforeCall(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentService' is set
        if (paymentService == null) {
            throw new ApiException("Missing the required parameter 'paymentService' when calling getPaymentCancellationScaStatus_0(Async)");
        }

        // verify the required parameter 'paymentProduct' is set
        if (paymentProduct == null) {
            throw new ApiException("Missing the required parameter 'paymentProduct' when calling getPaymentCancellationScaStatus_0(Async)");
        }

        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling getPaymentCancellationScaStatus_0(Async)");
        }

        // verify the required parameter 'authorisationId' is set
        if (authorisationId == null) {
            throw new ApiException("Missing the required parameter 'authorisationId' when calling getPaymentCancellationScaStatus_0(Async)");
        }

        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling getPaymentCancellationScaStatus_0(Async)");
        }

        return getPaymentCancellationScaStatus_0Call(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, _callback);

    }

    /**
     * Read the SCA status of the payment cancellation&#39;s authorisation
     * This method returns the SCA status of a payment initiation&#39;s authorisation sub-resource. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return ScaStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ScaStatusResponse getPaymentCancellationScaStatus_0(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation) throws ApiException {
        ApiResponse<ScaStatusResponse> localVarResp = getPaymentCancellationScaStatus_0WithHttpInfo(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);
        return localVarResp.getData();
    }

    /**
     * Read the SCA status of the payment cancellation&#39;s authorisation
     * This method returns the SCA status of a payment initiation&#39;s authorisation sub-resource. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return ApiResponse&lt;ScaStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ScaStatusResponse> getPaymentCancellationScaStatus_0WithHttpInfo(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation) throws ApiException {
        okhttp3.Call localVarCall = getPaymentCancellationScaStatus_0ValidateBeforeCall(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, null);
        Type localVarReturnType = new TypeToken<ScaStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read the SCA status of the payment cancellation&#39;s authorisation (asynchronously)
     * This method returns the SCA status of a payment initiation&#39;s authorisation sub-resource. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentCancellationScaStatus_0Async(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback<ScaStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentCancellationScaStatus_0ValidateBeforeCall(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, _callback);
        Type localVarReturnType = new TypeToken<ScaStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentInitiationAuthorisation_0
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentInitiationAuthorisation_0Call(String paymentService, String paymentProduct, String paymentId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{payment-service}/{payment-product}/{paymentId}/authorisations"
            .replace("{" + "payment-service" + "}", localVarApiClient.escapeString(paymentService.toString()))
            .replace("{" + "payment-product" + "}", localVarApiClient.escapeString(paymentProduct.toString()))
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        if (digest != null) {
            localVarHeaderParams.put("Digest", localVarApiClient.parameterToString(digest));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        if (tpPSignatureCertificate != null) {
            localVarHeaderParams.put("TPP-Signature-Certificate", localVarApiClient.parameterToString(tpPSignatureCertificate));
        }

        if (psUIPAddress != null) {
            localVarHeaderParams.put("PSU-IP-Address", localVarApiClient.parameterToString(psUIPAddress));
        }

        if (psUIPPort != null) {
            localVarHeaderParams.put("PSU-IP-Port", localVarApiClient.parameterToString(psUIPPort));
        }

        if (psUAccept != null) {
            localVarHeaderParams.put("PSU-Accept", localVarApiClient.parameterToString(psUAccept));
        }

        if (psUAcceptCharset != null) {
            localVarHeaderParams.put("PSU-Accept-Charset", localVarApiClient.parameterToString(psUAcceptCharset));
        }

        if (psUAcceptEncoding != null) {
            localVarHeaderParams.put("PSU-Accept-Encoding", localVarApiClient.parameterToString(psUAcceptEncoding));
        }

        if (psUAcceptLanguage != null) {
            localVarHeaderParams.put("PSU-Accept-Language", localVarApiClient.parameterToString(psUAcceptLanguage));
        }

        if (psUUserAgent != null) {
            localVarHeaderParams.put("PSU-User-Agent", localVarApiClient.parameterToString(psUUserAgent));
        }

        if (psUHttpMethod != null) {
            localVarHeaderParams.put("PSU-Http-Method", localVarApiClient.parameterToString(psUHttpMethod));
        }

        if (psUDeviceID != null) {
            localVarHeaderParams.put("PSU-Device-ID", localVarApiClient.parameterToString(psUDeviceID));
        }

        if (psUGeoLocation != null) {
            localVarHeaderParams.put("PSU-Geo-Location", localVarApiClient.parameterToString(psUGeoLocation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuthOAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentInitiationAuthorisation_0ValidateBeforeCall(String paymentService, String paymentProduct, String paymentId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentService' is set
        if (paymentService == null) {
            throw new ApiException("Missing the required parameter 'paymentService' when calling getPaymentInitiationAuthorisation_0(Async)");
        }

        // verify the required parameter 'paymentProduct' is set
        if (paymentProduct == null) {
            throw new ApiException("Missing the required parameter 'paymentProduct' when calling getPaymentInitiationAuthorisation_0(Async)");
        }

        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling getPaymentInitiationAuthorisation_0(Async)");
        }

        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling getPaymentInitiationAuthorisation_0(Async)");
        }

        return getPaymentInitiationAuthorisation_0Call(paymentService, paymentProduct, paymentId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, _callback);

    }

    /**
     * Get payment initiation authorisation sub-resources request
     * Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return Authorisations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public Authorisations getPaymentInitiationAuthorisation_0(String paymentService, String paymentProduct, String paymentId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation) throws ApiException {
        ApiResponse<Authorisations> localVarResp = getPaymentInitiationAuthorisation_0WithHttpInfo(paymentService, paymentProduct, paymentId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);
        return localVarResp.getData();
    }

    /**
     * Get payment initiation authorisation sub-resources request
     * Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return ApiResponse&lt;Authorisations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Authorisations> getPaymentInitiationAuthorisation_0WithHttpInfo(String paymentService, String paymentProduct, String paymentId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation) throws ApiException {
        okhttp3.Call localVarCall = getPaymentInitiationAuthorisation_0ValidateBeforeCall(paymentService, paymentProduct, paymentId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, null);
        Type localVarReturnType = new TypeToken<Authorisations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get payment initiation authorisation sub-resources request (asynchronously)
     * Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentInitiationAuthorisation_0Async(String paymentService, String paymentProduct, String paymentId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback<Authorisations> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentInitiationAuthorisation_0ValidateBeforeCall(paymentService, paymentProduct, paymentId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, _callback);
        Type localVarReturnType = new TypeToken<Authorisations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentInitiationScaStatus_0
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentInitiationScaStatus_0Call(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{payment-service}/{payment-product}/{paymentId}/authorisations/{authorisationId}"
            .replace("{" + "payment-service" + "}", localVarApiClient.escapeString(paymentService.toString()))
            .replace("{" + "payment-product" + "}", localVarApiClient.escapeString(paymentProduct.toString()))
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()))
            .replace("{" + "authorisationId" + "}", localVarApiClient.escapeString(authorisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        if (digest != null) {
            localVarHeaderParams.put("Digest", localVarApiClient.parameterToString(digest));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        if (tpPSignatureCertificate != null) {
            localVarHeaderParams.put("TPP-Signature-Certificate", localVarApiClient.parameterToString(tpPSignatureCertificate));
        }

        if (psUIPAddress != null) {
            localVarHeaderParams.put("PSU-IP-Address", localVarApiClient.parameterToString(psUIPAddress));
        }

        if (psUIPPort != null) {
            localVarHeaderParams.put("PSU-IP-Port", localVarApiClient.parameterToString(psUIPPort));
        }

        if (psUAccept != null) {
            localVarHeaderParams.put("PSU-Accept", localVarApiClient.parameterToString(psUAccept));
        }

        if (psUAcceptCharset != null) {
            localVarHeaderParams.put("PSU-Accept-Charset", localVarApiClient.parameterToString(psUAcceptCharset));
        }

        if (psUAcceptEncoding != null) {
            localVarHeaderParams.put("PSU-Accept-Encoding", localVarApiClient.parameterToString(psUAcceptEncoding));
        }

        if (psUAcceptLanguage != null) {
            localVarHeaderParams.put("PSU-Accept-Language", localVarApiClient.parameterToString(psUAcceptLanguage));
        }

        if (psUUserAgent != null) {
            localVarHeaderParams.put("PSU-User-Agent", localVarApiClient.parameterToString(psUUserAgent));
        }

        if (psUHttpMethod != null) {
            localVarHeaderParams.put("PSU-Http-Method", localVarApiClient.parameterToString(psUHttpMethod));
        }

        if (psUDeviceID != null) {
            localVarHeaderParams.put("PSU-Device-ID", localVarApiClient.parameterToString(psUDeviceID));
        }

        if (psUGeoLocation != null) {
            localVarHeaderParams.put("PSU-Geo-Location", localVarApiClient.parameterToString(psUGeoLocation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuthOAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentInitiationScaStatus_0ValidateBeforeCall(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentService' is set
        if (paymentService == null) {
            throw new ApiException("Missing the required parameter 'paymentService' when calling getPaymentInitiationScaStatus_0(Async)");
        }

        // verify the required parameter 'paymentProduct' is set
        if (paymentProduct == null) {
            throw new ApiException("Missing the required parameter 'paymentProduct' when calling getPaymentInitiationScaStatus_0(Async)");
        }

        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling getPaymentInitiationScaStatus_0(Async)");
        }

        // verify the required parameter 'authorisationId' is set
        if (authorisationId == null) {
            throw new ApiException("Missing the required parameter 'authorisationId' when calling getPaymentInitiationScaStatus_0(Async)");
        }

        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling getPaymentInitiationScaStatus_0(Async)");
        }

        return getPaymentInitiationScaStatus_0Call(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, _callback);

    }

    /**
     * Read the SCA status of the payment authorisation
     * This method returns the SCA status of a payment initiation&#39;s authorisation sub-resource. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return ScaStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ScaStatusResponse getPaymentInitiationScaStatus_0(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation) throws ApiException {
        ApiResponse<ScaStatusResponse> localVarResp = getPaymentInitiationScaStatus_0WithHttpInfo(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);
        return localVarResp.getData();
    }

    /**
     * Read the SCA status of the payment authorisation
     * This method returns the SCA status of a payment initiation&#39;s authorisation sub-resource. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return ApiResponse&lt;ScaStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ScaStatusResponse> getPaymentInitiationScaStatus_0WithHttpInfo(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation) throws ApiException {
        okhttp3.Call localVarCall = getPaymentInitiationScaStatus_0ValidateBeforeCall(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, null);
        Type localVarReturnType = new TypeToken<ScaStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read the SCA status of the payment authorisation (asynchronously)
     * This method returns the SCA status of a payment initiation&#39;s authorisation sub-resource. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentInitiationScaStatus_0Async(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback<ScaStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentInitiationScaStatus_0ValidateBeforeCall(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, _callback);
        Type localVarReturnType = new TypeToken<ScaStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSigningBasketAuthorisation_0
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getSigningBasketAuthorisation_0Call(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/signing-baskets/{basketId}/authorisations"
            .replace("{" + "basketId" + "}", localVarApiClient.escapeString(basketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        if (digest != null) {
            localVarHeaderParams.put("Digest", localVarApiClient.parameterToString(digest));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        if (tpPSignatureCertificate != null) {
            localVarHeaderParams.put("TPP-Signature-Certificate", localVarApiClient.parameterToString(tpPSignatureCertificate));
        }

        if (psUIPAddress != null) {
            localVarHeaderParams.put("PSU-IP-Address", localVarApiClient.parameterToString(psUIPAddress));
        }

        if (psUIPPort != null) {
            localVarHeaderParams.put("PSU-IP-Port", localVarApiClient.parameterToString(psUIPPort));
        }

        if (psUAccept != null) {
            localVarHeaderParams.put("PSU-Accept", localVarApiClient.parameterToString(psUAccept));
        }

        if (psUAcceptCharset != null) {
            localVarHeaderParams.put("PSU-Accept-Charset", localVarApiClient.parameterToString(psUAcceptCharset));
        }

        if (psUAcceptEncoding != null) {
            localVarHeaderParams.put("PSU-Accept-Encoding", localVarApiClient.parameterToString(psUAcceptEncoding));
        }

        if (psUAcceptLanguage != null) {
            localVarHeaderParams.put("PSU-Accept-Language", localVarApiClient.parameterToString(psUAcceptLanguage));
        }

        if (psUUserAgent != null) {
            localVarHeaderParams.put("PSU-User-Agent", localVarApiClient.parameterToString(psUUserAgent));
        }

        if (psUHttpMethod != null) {
            localVarHeaderParams.put("PSU-Http-Method", localVarApiClient.parameterToString(psUHttpMethod));
        }

        if (psUDeviceID != null) {
            localVarHeaderParams.put("PSU-Device-ID", localVarApiClient.parameterToString(psUDeviceID));
        }

        if (psUGeoLocation != null) {
            localVarHeaderParams.put("PSU-Geo-Location", localVarApiClient.parameterToString(psUGeoLocation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuthOAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSigningBasketAuthorisation_0ValidateBeforeCall(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'basketId' is set
        if (basketId == null) {
            throw new ApiException("Missing the required parameter 'basketId' when calling getSigningBasketAuthorisation_0(Async)");
        }

        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling getSigningBasketAuthorisation_0(Async)");
        }

        return getSigningBasketAuthorisation_0Call(basketId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, _callback);

    }

    /**
     * Get signing basket authorisation sub-resources request
     * Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return Authorisations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public Authorisations getSigningBasketAuthorisation_0(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation) throws ApiException {
        ApiResponse<Authorisations> localVarResp = getSigningBasketAuthorisation_0WithHttpInfo(basketId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);
        return localVarResp.getData();
    }

    /**
     * Get signing basket authorisation sub-resources request
     * Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return ApiResponse&lt;Authorisations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Authorisations> getSigningBasketAuthorisation_0WithHttpInfo(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation) throws ApiException {
        okhttp3.Call localVarCall = getSigningBasketAuthorisation_0ValidateBeforeCall(basketId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, null);
        Type localVarReturnType = new TypeToken<Authorisations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get signing basket authorisation sub-resources request (asynchronously)
     * Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getSigningBasketAuthorisation_0Async(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback<Authorisations> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSigningBasketAuthorisation_0ValidateBeforeCall(basketId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, _callback);
        Type localVarReturnType = new TypeToken<Authorisations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSigningBasketScaStatus_0
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getSigningBasketScaStatus_0Call(String basketId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/signing-baskets/{basketId}/authorisations/{authorisationId}"
            .replace("{" + "basketId" + "}", localVarApiClient.escapeString(basketId.toString()))
            .replace("{" + "authorisationId" + "}", localVarApiClient.escapeString(authorisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        if (digest != null) {
            localVarHeaderParams.put("Digest", localVarApiClient.parameterToString(digest));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        if (tpPSignatureCertificate != null) {
            localVarHeaderParams.put("TPP-Signature-Certificate", localVarApiClient.parameterToString(tpPSignatureCertificate));
        }

        if (psUIPAddress != null) {
            localVarHeaderParams.put("PSU-IP-Address", localVarApiClient.parameterToString(psUIPAddress));
        }

        if (psUIPPort != null) {
            localVarHeaderParams.put("PSU-IP-Port", localVarApiClient.parameterToString(psUIPPort));
        }

        if (psUAccept != null) {
            localVarHeaderParams.put("PSU-Accept", localVarApiClient.parameterToString(psUAccept));
        }

        if (psUAcceptCharset != null) {
            localVarHeaderParams.put("PSU-Accept-Charset", localVarApiClient.parameterToString(psUAcceptCharset));
        }

        if (psUAcceptEncoding != null) {
            localVarHeaderParams.put("PSU-Accept-Encoding", localVarApiClient.parameterToString(psUAcceptEncoding));
        }

        if (psUAcceptLanguage != null) {
            localVarHeaderParams.put("PSU-Accept-Language", localVarApiClient.parameterToString(psUAcceptLanguage));
        }

        if (psUUserAgent != null) {
            localVarHeaderParams.put("PSU-User-Agent", localVarApiClient.parameterToString(psUUserAgent));
        }

        if (psUHttpMethod != null) {
            localVarHeaderParams.put("PSU-Http-Method", localVarApiClient.parameterToString(psUHttpMethod));
        }

        if (psUDeviceID != null) {
            localVarHeaderParams.put("PSU-Device-ID", localVarApiClient.parameterToString(psUDeviceID));
        }

        if (psUGeoLocation != null) {
            localVarHeaderParams.put("PSU-Geo-Location", localVarApiClient.parameterToString(psUGeoLocation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuthOAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSigningBasketScaStatus_0ValidateBeforeCall(String basketId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'basketId' is set
        if (basketId == null) {
            throw new ApiException("Missing the required parameter 'basketId' when calling getSigningBasketScaStatus_0(Async)");
        }

        // verify the required parameter 'authorisationId' is set
        if (authorisationId == null) {
            throw new ApiException("Missing the required parameter 'authorisationId' when calling getSigningBasketScaStatus_0(Async)");
        }

        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling getSigningBasketScaStatus_0(Async)");
        }

        return getSigningBasketScaStatus_0Call(basketId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, _callback);

    }

    /**
     * Read the SCA status of the signing basket authorisation
     * This method returns the SCA status of a signing basket&#39;s authorisation sub-resource. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return ScaStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ScaStatusResponse getSigningBasketScaStatus_0(String basketId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation) throws ApiException {
        ApiResponse<ScaStatusResponse> localVarResp = getSigningBasketScaStatus_0WithHttpInfo(basketId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);
        return localVarResp.getData();
    }

    /**
     * Read the SCA status of the signing basket authorisation
     * This method returns the SCA status of a signing basket&#39;s authorisation sub-resource. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return ApiResponse&lt;ScaStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ScaStatusResponse> getSigningBasketScaStatus_0WithHttpInfo(String basketId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation) throws ApiException {
        okhttp3.Call localVarCall = getSigningBasketScaStatus_0ValidateBeforeCall(basketId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, null);
        Type localVarReturnType = new TypeToken<ScaStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read the SCA status of the signing basket authorisation (asynchronously)
     * This method returns the SCA status of a signing basket&#39;s authorisation sub-resource. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getSigningBasketScaStatus_0Async(String basketId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback<ScaStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSigningBasketScaStatus_0ValidateBeforeCall(basketId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, _callback);
        Type localVarReturnType = new TypeToken<ScaStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSigningBasketStatus_0
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getSigningBasketStatus_0Call(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/signing-baskets/{basketId}/status"
            .replace("{" + "basketId" + "}", localVarApiClient.escapeString(basketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        if (digest != null) {
            localVarHeaderParams.put("Digest", localVarApiClient.parameterToString(digest));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        if (tpPSignatureCertificate != null) {
            localVarHeaderParams.put("TPP-Signature-Certificate", localVarApiClient.parameterToString(tpPSignatureCertificate));
        }

        if (PSU_ID != null) {
            localVarHeaderParams.put("PSU-ID", localVarApiClient.parameterToString(PSU_ID));
        }

        if (psUIDType != null) {
            localVarHeaderParams.put("PSU-ID-Type", localVarApiClient.parameterToString(psUIDType));
        }

        if (psUCorporateID != null) {
            localVarHeaderParams.put("PSU-Corporate-ID", localVarApiClient.parameterToString(psUCorporateID));
        }

        if (psUCorporateIDType != null) {
            localVarHeaderParams.put("PSU-Corporate-ID-Type", localVarApiClient.parameterToString(psUCorporateIDType));
        }

        if (psUIPAddress != null) {
            localVarHeaderParams.put("PSU-IP-Address", localVarApiClient.parameterToString(psUIPAddress));
        }

        if (psUIPPort != null) {
            localVarHeaderParams.put("PSU-IP-Port", localVarApiClient.parameterToString(psUIPPort));
        }

        if (psUAccept != null) {
            localVarHeaderParams.put("PSU-Accept", localVarApiClient.parameterToString(psUAccept));
        }

        if (psUAcceptCharset != null) {
            localVarHeaderParams.put("PSU-Accept-Charset", localVarApiClient.parameterToString(psUAcceptCharset));
        }

        if (psUAcceptEncoding != null) {
            localVarHeaderParams.put("PSU-Accept-Encoding", localVarApiClient.parameterToString(psUAcceptEncoding));
        }

        if (psUAcceptLanguage != null) {
            localVarHeaderParams.put("PSU-Accept-Language", localVarApiClient.parameterToString(psUAcceptLanguage));
        }

        if (psUUserAgent != null) {
            localVarHeaderParams.put("PSU-User-Agent", localVarApiClient.parameterToString(psUUserAgent));
        }

        if (psUHttpMethod != null) {
            localVarHeaderParams.put("PSU-Http-Method", localVarApiClient.parameterToString(psUHttpMethod));
        }

        if (psUDeviceID != null) {
            localVarHeaderParams.put("PSU-Device-ID", localVarApiClient.parameterToString(psUDeviceID));
        }

        if (psUGeoLocation != null) {
            localVarHeaderParams.put("PSU-Geo-Location", localVarApiClient.parameterToString(psUGeoLocation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuthOAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSigningBasketStatus_0ValidateBeforeCall(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'basketId' is set
        if (basketId == null) {
            throw new ApiException("Missing the required parameter 'basketId' when calling getSigningBasketStatus_0(Async)");
        }

        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling getSigningBasketStatus_0(Async)");
        }

        return getSigningBasketStatus_0Call(basketId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, _callback);

    }

    /**
     * Read the status of the signing basket
     * Returns the status of a signing basket object. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return SigningBasketStatusResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public SigningBasketStatusResponse200 getSigningBasketStatus_0(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation) throws ApiException {
        ApiResponse<SigningBasketStatusResponse200> localVarResp = getSigningBasketStatus_0WithHttpInfo(basketId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);
        return localVarResp.getData();
    }

    /**
     * Read the status of the signing basket
     * Returns the status of a signing basket object. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return ApiResponse&lt;SigningBasketStatusResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<SigningBasketStatusResponse200> getSigningBasketStatus_0WithHttpInfo(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation) throws ApiException {
        okhttp3.Call localVarCall = getSigningBasketStatus_0ValidateBeforeCall(basketId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, null);
        Type localVarReturnType = new TypeToken<SigningBasketStatusResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read the status of the signing basket (asynchronously)
     * Returns the status of a signing basket object. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getSigningBasketStatus_0Async(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, final ApiCallback<SigningBasketStatusResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSigningBasketStatus_0ValidateBeforeCall(basketId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, _callback);
        Type localVarReturnType = new TypeToken<SigningBasketStatusResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startConsentAuthorisation_0
     * @param consentId ID of the corresponding consent object as returned by an account information consent request.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param tpPNotificationURI URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param tpPNotificationContentPreferred The string has the form  status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startConsentAuthorisationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call startConsentAuthorisation_0Call(String consentId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startConsentAuthorisationRequest;

        // create path and map variables
        String localVarPath = "/v1/consents/{consentId}/authorisations"
            .replace("{" + "consentId" + "}", localVarApiClient.escapeString(consentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        if (digest != null) {
            localVarHeaderParams.put("Digest", localVarApiClient.parameterToString(digest));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        if (tpPSignatureCertificate != null) {
            localVarHeaderParams.put("TPP-Signature-Certificate", localVarApiClient.parameterToString(tpPSignatureCertificate));
        }

        if (PSU_ID != null) {
            localVarHeaderParams.put("PSU-ID", localVarApiClient.parameterToString(PSU_ID));
        }

        if (psUIDType != null) {
            localVarHeaderParams.put("PSU-ID-Type", localVarApiClient.parameterToString(psUIDType));
        }

        if (psUCorporateID != null) {
            localVarHeaderParams.put("PSU-Corporate-ID", localVarApiClient.parameterToString(psUCorporateID));
        }

        if (psUCorporateIDType != null) {
            localVarHeaderParams.put("PSU-Corporate-ID-Type", localVarApiClient.parameterToString(psUCorporateIDType));
        }

        if (tpPRedirectPreferred != null) {
            localVarHeaderParams.put("TPP-Redirect-Preferred", localVarApiClient.parameterToString(tpPRedirectPreferred));
        }

        if (tpPRedirectURI != null) {
            localVarHeaderParams.put("TPP-Redirect-URI", localVarApiClient.parameterToString(tpPRedirectURI));
        }

        if (tpPNokRedirectURI != null) {
            localVarHeaderParams.put("TPP-Nok-Redirect-URI", localVarApiClient.parameterToString(tpPNokRedirectURI));
        }

        if (tpPNotificationURI != null) {
            localVarHeaderParams.put("TPP-Notification-URI", localVarApiClient.parameterToString(tpPNotificationURI));
        }

        if (tpPNotificationContentPreferred != null) {
            localVarHeaderParams.put("TPP-Notification-Content-Preferred", localVarApiClient.parameterToString(tpPNotificationContentPreferred));
        }

        if (psUIPAddress != null) {
            localVarHeaderParams.put("PSU-IP-Address", localVarApiClient.parameterToString(psUIPAddress));
        }

        if (psUIPPort != null) {
            localVarHeaderParams.put("PSU-IP-Port", localVarApiClient.parameterToString(psUIPPort));
        }

        if (psUAccept != null) {
            localVarHeaderParams.put("PSU-Accept", localVarApiClient.parameterToString(psUAccept));
        }

        if (psUAcceptCharset != null) {
            localVarHeaderParams.put("PSU-Accept-Charset", localVarApiClient.parameterToString(psUAcceptCharset));
        }

        if (psUAcceptEncoding != null) {
            localVarHeaderParams.put("PSU-Accept-Encoding", localVarApiClient.parameterToString(psUAcceptEncoding));
        }

        if (psUAcceptLanguage != null) {
            localVarHeaderParams.put("PSU-Accept-Language", localVarApiClient.parameterToString(psUAcceptLanguage));
        }

        if (psUUserAgent != null) {
            localVarHeaderParams.put("PSU-User-Agent", localVarApiClient.parameterToString(psUUserAgent));
        }

        if (psUHttpMethod != null) {
            localVarHeaderParams.put("PSU-Http-Method", localVarApiClient.parameterToString(psUHttpMethod));
        }

        if (psUDeviceID != null) {
            localVarHeaderParams.put("PSU-Device-ID", localVarApiClient.parameterToString(psUDeviceID));
        }

        if (psUGeoLocation != null) {
            localVarHeaderParams.put("PSU-Geo-Location", localVarApiClient.parameterToString(psUGeoLocation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuthOAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startConsentAuthorisation_0ValidateBeforeCall(String consentId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling startConsentAuthorisation_0(Async)");
        }

        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling startConsentAuthorisation_0(Async)");
        }

        return startConsentAuthorisation_0Call(consentId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest, _callback);

    }

    /**
     * Start the authorisation process for a consent
     * Create an authorisation sub-resource and start the authorisation process of a consent. The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary, since the related authorisation resource will be automatically created by the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with an &#39;startAuthorisation&#39; hyperlink in the preceding Payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentfication&#39;,      * &#39;startAuthorisationWithPsuAuthentication&#39;      * &#39;startAuthorisationWithEncryptedPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an &#39;startAuthorisation&#39; hyperlink in the preceding      payment cancellation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param consentId ID of the corresponding consent object as returned by an account information consent request.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param tpPNotificationURI URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param tpPNotificationContentPreferred The string has the form  status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startConsentAuthorisationRequest  (optional)
     * @return StartScaprocessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public StartScaprocessResponse startConsentAuthorisation_0(String consentId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest) throws ApiException {
        ApiResponse<StartScaprocessResponse> localVarResp = startConsentAuthorisation_0WithHttpInfo(consentId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest);
        return localVarResp.getData();
    }

    /**
     * Start the authorisation process for a consent
     * Create an authorisation sub-resource and start the authorisation process of a consent. The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary, since the related authorisation resource will be automatically created by the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with an &#39;startAuthorisation&#39; hyperlink in the preceding Payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentfication&#39;,      * &#39;startAuthorisationWithPsuAuthentication&#39;      * &#39;startAuthorisationWithEncryptedPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an &#39;startAuthorisation&#39; hyperlink in the preceding      payment cancellation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param consentId ID of the corresponding consent object as returned by an account information consent request.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param tpPNotificationURI URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param tpPNotificationContentPreferred The string has the form  status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startConsentAuthorisationRequest  (optional)
     * @return ApiResponse&lt;StartScaprocessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<StartScaprocessResponse> startConsentAuthorisation_0WithHttpInfo(String consentId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest) throws ApiException {
        okhttp3.Call localVarCall = startConsentAuthorisation_0ValidateBeforeCall(consentId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest, null);
        Type localVarReturnType = new TypeToken<StartScaprocessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start the authorisation process for a consent (asynchronously)
     * Create an authorisation sub-resource and start the authorisation process of a consent. The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary, since the related authorisation resource will be automatically created by the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with an &#39;startAuthorisation&#39; hyperlink in the preceding Payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentfication&#39;,      * &#39;startAuthorisationWithPsuAuthentication&#39;      * &#39;startAuthorisationWithEncryptedPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an &#39;startAuthorisation&#39; hyperlink in the preceding      payment cancellation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param consentId ID of the corresponding consent object as returned by an account information consent request.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param tpPNotificationURI URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param tpPNotificationContentPreferred The string has the form  status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startConsentAuthorisationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call startConsentAuthorisation_0Async(String consentId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest, final ApiCallback<StartScaprocessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startConsentAuthorisation_0ValidateBeforeCall(consentId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest, _callback);
        Type localVarReturnType = new TypeToken<StartScaprocessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startPaymentAuthorisation_0
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param tpPNotificationURI URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param tpPNotificationContentPreferred The string has the form  status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startConsentAuthorisationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call startPaymentAuthorisation_0Call(String paymentService, String paymentProduct, String paymentId, String xRequestID, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startConsentAuthorisationRequest;

        // create path and map variables
        String localVarPath = "/v1/{payment-service}/{payment-product}/{paymentId}/authorisations"
            .replace("{" + "payment-service" + "}", localVarApiClient.escapeString(paymentService.toString()))
            .replace("{" + "payment-product" + "}", localVarApiClient.escapeString(paymentProduct.toString()))
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        if (PSU_ID != null) {
            localVarHeaderParams.put("PSU-ID", localVarApiClient.parameterToString(PSU_ID));
        }

        if (psUIDType != null) {
            localVarHeaderParams.put("PSU-ID-Type", localVarApiClient.parameterToString(psUIDType));
        }

        if (psUCorporateID != null) {
            localVarHeaderParams.put("PSU-Corporate-ID", localVarApiClient.parameterToString(psUCorporateID));
        }

        if (psUCorporateIDType != null) {
            localVarHeaderParams.put("PSU-Corporate-ID-Type", localVarApiClient.parameterToString(psUCorporateIDType));
        }

        if (tpPRedirectPreferred != null) {
            localVarHeaderParams.put("TPP-Redirect-Preferred", localVarApiClient.parameterToString(tpPRedirectPreferred));
        }

        if (tpPRedirectURI != null) {
            localVarHeaderParams.put("TPP-Redirect-URI", localVarApiClient.parameterToString(tpPRedirectURI));
        }

        if (tpPNokRedirectURI != null) {
            localVarHeaderParams.put("TPP-Nok-Redirect-URI", localVarApiClient.parameterToString(tpPNokRedirectURI));
        }

        if (tpPNotificationURI != null) {
            localVarHeaderParams.put("TPP-Notification-URI", localVarApiClient.parameterToString(tpPNotificationURI));
        }

        if (tpPNotificationContentPreferred != null) {
            localVarHeaderParams.put("TPP-Notification-Content-Preferred", localVarApiClient.parameterToString(tpPNotificationContentPreferred));
        }

        if (digest != null) {
            localVarHeaderParams.put("Digest", localVarApiClient.parameterToString(digest));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        if (tpPSignatureCertificate != null) {
            localVarHeaderParams.put("TPP-Signature-Certificate", localVarApiClient.parameterToString(tpPSignatureCertificate));
        }

        if (psUIPAddress != null) {
            localVarHeaderParams.put("PSU-IP-Address", localVarApiClient.parameterToString(psUIPAddress));
        }

        if (psUIPPort != null) {
            localVarHeaderParams.put("PSU-IP-Port", localVarApiClient.parameterToString(psUIPPort));
        }

        if (psUAccept != null) {
            localVarHeaderParams.put("PSU-Accept", localVarApiClient.parameterToString(psUAccept));
        }

        if (psUAcceptCharset != null) {
            localVarHeaderParams.put("PSU-Accept-Charset", localVarApiClient.parameterToString(psUAcceptCharset));
        }

        if (psUAcceptEncoding != null) {
            localVarHeaderParams.put("PSU-Accept-Encoding", localVarApiClient.parameterToString(psUAcceptEncoding));
        }

        if (psUAcceptLanguage != null) {
            localVarHeaderParams.put("PSU-Accept-Language", localVarApiClient.parameterToString(psUAcceptLanguage));
        }

        if (psUUserAgent != null) {
            localVarHeaderParams.put("PSU-User-Agent", localVarApiClient.parameterToString(psUUserAgent));
        }

        if (psUHttpMethod != null) {
            localVarHeaderParams.put("PSU-Http-Method", localVarApiClient.parameterToString(psUHttpMethod));
        }

        if (psUDeviceID != null) {
            localVarHeaderParams.put("PSU-Device-ID", localVarApiClient.parameterToString(psUDeviceID));
        }

        if (psUGeoLocation != null) {
            localVarHeaderParams.put("PSU-Geo-Location", localVarApiClient.parameterToString(psUGeoLocation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuthOAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startPaymentAuthorisation_0ValidateBeforeCall(String paymentService, String paymentProduct, String paymentId, String xRequestID, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentService' is set
        if (paymentService == null) {
            throw new ApiException("Missing the required parameter 'paymentService' when calling startPaymentAuthorisation_0(Async)");
        }

        // verify the required parameter 'paymentProduct' is set
        if (paymentProduct == null) {
            throw new ApiException("Missing the required parameter 'paymentProduct' when calling startPaymentAuthorisation_0(Async)");
        }

        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling startPaymentAuthorisation_0(Async)");
        }

        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling startPaymentAuthorisation_0(Async)");
        }

        return startPaymentAuthorisation_0Call(paymentService, paymentProduct, paymentId, xRequestID, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest, _callback);

    }

    /**
     * Start the authorisation process for a payment initiation
     * Create an authorisation sub-resource and start the authorisation process. The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case of only one SCA process needed, since the related authorisation resource might be automatically created by the ASPSP after the submission of the payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding Payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentfication&#39;     * &#39;startAuthorisationWithPsuAuthentication&#39;     * &#39;startAuthorisationWithEncryptedPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding      Payment cancellation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param tpPNotificationURI URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param tpPNotificationContentPreferred The string has the form  status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startConsentAuthorisationRequest  (optional)
     * @return StartScaprocessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public StartScaprocessResponse startPaymentAuthorisation_0(String paymentService, String paymentProduct, String paymentId, String xRequestID, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest) throws ApiException {
        ApiResponse<StartScaprocessResponse> localVarResp = startPaymentAuthorisation_0WithHttpInfo(paymentService, paymentProduct, paymentId, xRequestID, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest);
        return localVarResp.getData();
    }

    /**
     * Start the authorisation process for a payment initiation
     * Create an authorisation sub-resource and start the authorisation process. The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case of only one SCA process needed, since the related authorisation resource might be automatically created by the ASPSP after the submission of the payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding Payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentfication&#39;     * &#39;startAuthorisationWithPsuAuthentication&#39;     * &#39;startAuthorisationWithEncryptedPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding      Payment cancellation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param tpPNotificationURI URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param tpPNotificationContentPreferred The string has the form  status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startConsentAuthorisationRequest  (optional)
     * @return ApiResponse&lt;StartScaprocessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<StartScaprocessResponse> startPaymentAuthorisation_0WithHttpInfo(String paymentService, String paymentProduct, String paymentId, String xRequestID, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest) throws ApiException {
        okhttp3.Call localVarCall = startPaymentAuthorisation_0ValidateBeforeCall(paymentService, paymentProduct, paymentId, xRequestID, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest, null);
        Type localVarReturnType = new TypeToken<StartScaprocessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start the authorisation process for a payment initiation (asynchronously)
     * Create an authorisation sub-resource and start the authorisation process. The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case of only one SCA process needed, since the related authorisation resource might be automatically created by the ASPSP after the submission of the payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding Payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentfication&#39;     * &#39;startAuthorisationWithPsuAuthentication&#39;     * &#39;startAuthorisationWithEncryptedPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding      Payment cancellation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param tpPNotificationURI URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param tpPNotificationContentPreferred The string has the form  status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startConsentAuthorisationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call startPaymentAuthorisation_0Async(String paymentService, String paymentProduct, String paymentId, String xRequestID, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String digest, String signature, byte[] tpPSignatureCertificate, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest, final ApiCallback<StartScaprocessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startPaymentAuthorisation_0ValidateBeforeCall(paymentService, paymentProduct, paymentId, xRequestID, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest, _callback);
        Type localVarReturnType = new TypeToken<StartScaprocessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startPaymentInitiationCancellationAuthorisation_0
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param tpPNotificationURI URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param tpPNotificationContentPreferred The string has the form  status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startConsentAuthorisationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call startPaymentInitiationCancellationAuthorisation_0Call(String paymentService, String paymentProduct, String paymentId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startConsentAuthorisationRequest;

        // create path and map variables
        String localVarPath = "/v1/{payment-service}/{payment-product}/{paymentId}/cancellation-authorisations"
            .replace("{" + "payment-service" + "}", localVarApiClient.escapeString(paymentService.toString()))
            .replace("{" + "payment-product" + "}", localVarApiClient.escapeString(paymentProduct.toString()))
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        if (digest != null) {
            localVarHeaderParams.put("Digest", localVarApiClient.parameterToString(digest));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        if (tpPSignatureCertificate != null) {
            localVarHeaderParams.put("TPP-Signature-Certificate", localVarApiClient.parameterToString(tpPSignatureCertificate));
        }

        if (PSU_ID != null) {
            localVarHeaderParams.put("PSU-ID", localVarApiClient.parameterToString(PSU_ID));
        }

        if (psUIDType != null) {
            localVarHeaderParams.put("PSU-ID-Type", localVarApiClient.parameterToString(psUIDType));
        }

        if (psUCorporateID != null) {
            localVarHeaderParams.put("PSU-Corporate-ID", localVarApiClient.parameterToString(psUCorporateID));
        }

        if (psUCorporateIDType != null) {
            localVarHeaderParams.put("PSU-Corporate-ID-Type", localVarApiClient.parameterToString(psUCorporateIDType));
        }

        if (tpPRedirectPreferred != null) {
            localVarHeaderParams.put("TPP-Redirect-Preferred", localVarApiClient.parameterToString(tpPRedirectPreferred));
        }

        if (tpPRedirectURI != null) {
            localVarHeaderParams.put("TPP-Redirect-URI", localVarApiClient.parameterToString(tpPRedirectURI));
        }

        if (tpPNokRedirectURI != null) {
            localVarHeaderParams.put("TPP-Nok-Redirect-URI", localVarApiClient.parameterToString(tpPNokRedirectURI));
        }

        if (tpPNotificationURI != null) {
            localVarHeaderParams.put("TPP-Notification-URI", localVarApiClient.parameterToString(tpPNotificationURI));
        }

        if (tpPNotificationContentPreferred != null) {
            localVarHeaderParams.put("TPP-Notification-Content-Preferred", localVarApiClient.parameterToString(tpPNotificationContentPreferred));
        }

        if (psUIPAddress != null) {
            localVarHeaderParams.put("PSU-IP-Address", localVarApiClient.parameterToString(psUIPAddress));
        }

        if (psUIPPort != null) {
            localVarHeaderParams.put("PSU-IP-Port", localVarApiClient.parameterToString(psUIPPort));
        }

        if (psUAccept != null) {
            localVarHeaderParams.put("PSU-Accept", localVarApiClient.parameterToString(psUAccept));
        }

        if (psUAcceptCharset != null) {
            localVarHeaderParams.put("PSU-Accept-Charset", localVarApiClient.parameterToString(psUAcceptCharset));
        }

        if (psUAcceptEncoding != null) {
            localVarHeaderParams.put("PSU-Accept-Encoding", localVarApiClient.parameterToString(psUAcceptEncoding));
        }

        if (psUAcceptLanguage != null) {
            localVarHeaderParams.put("PSU-Accept-Language", localVarApiClient.parameterToString(psUAcceptLanguage));
        }

        if (psUUserAgent != null) {
            localVarHeaderParams.put("PSU-User-Agent", localVarApiClient.parameterToString(psUUserAgent));
        }

        if (psUHttpMethod != null) {
            localVarHeaderParams.put("PSU-Http-Method", localVarApiClient.parameterToString(psUHttpMethod));
        }

        if (psUDeviceID != null) {
            localVarHeaderParams.put("PSU-Device-ID", localVarApiClient.parameterToString(psUDeviceID));
        }

        if (psUGeoLocation != null) {
            localVarHeaderParams.put("PSU-Geo-Location", localVarApiClient.parameterToString(psUGeoLocation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuthOAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startPaymentInitiationCancellationAuthorisation_0ValidateBeforeCall(String paymentService, String paymentProduct, String paymentId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentService' is set
        if (paymentService == null) {
            throw new ApiException("Missing the required parameter 'paymentService' when calling startPaymentInitiationCancellationAuthorisation_0(Async)");
        }

        // verify the required parameter 'paymentProduct' is set
        if (paymentProduct == null) {
            throw new ApiException("Missing the required parameter 'paymentProduct' when calling startPaymentInitiationCancellationAuthorisation_0(Async)");
        }

        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling startPaymentInitiationCancellationAuthorisation_0(Async)");
        }

        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling startPaymentInitiationCancellationAuthorisation_0(Async)");
        }

        return startPaymentInitiationCancellationAuthorisation_0Call(paymentService, paymentProduct, paymentId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest, _callback);

    }

    /**
     * Start the authorisation process for the cancellation of the addressed payment
     * Creates an authorisation sub-resource and start the authorisation process of the cancellation of the addressed payment. The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the cancellation-authorisation.  The ASPSP might make the usage of this access method unnecessary in case of only one SCA process needed, since the related authorisation resource might be automatically created by the ASPSP after the submission of the payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentfication&#39;     * &#39;startAuthorisationWithPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding      payment cancellation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param tpPNotificationURI URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param tpPNotificationContentPreferred The string has the form  status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startConsentAuthorisationRequest  (optional)
     * @return StartScaprocessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public StartScaprocessResponse startPaymentInitiationCancellationAuthorisation_0(String paymentService, String paymentProduct, String paymentId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest) throws ApiException {
        ApiResponse<StartScaprocessResponse> localVarResp = startPaymentInitiationCancellationAuthorisation_0WithHttpInfo(paymentService, paymentProduct, paymentId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest);
        return localVarResp.getData();
    }

    /**
     * Start the authorisation process for the cancellation of the addressed payment
     * Creates an authorisation sub-resource and start the authorisation process of the cancellation of the addressed payment. The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the cancellation-authorisation.  The ASPSP might make the usage of this access method unnecessary in case of only one SCA process needed, since the related authorisation resource might be automatically created by the ASPSP after the submission of the payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentfication&#39;     * &#39;startAuthorisationWithPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding      payment cancellation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param tpPNotificationURI URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param tpPNotificationContentPreferred The string has the form  status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startConsentAuthorisationRequest  (optional)
     * @return ApiResponse&lt;StartScaprocessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<StartScaprocessResponse> startPaymentInitiationCancellationAuthorisation_0WithHttpInfo(String paymentService, String paymentProduct, String paymentId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest) throws ApiException {
        okhttp3.Call localVarCall = startPaymentInitiationCancellationAuthorisation_0ValidateBeforeCall(paymentService, paymentProduct, paymentId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest, null);
        Type localVarReturnType = new TypeToken<StartScaprocessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start the authorisation process for the cancellation of the addressed payment (asynchronously)
     * Creates an authorisation sub-resource and start the authorisation process of the cancellation of the addressed payment. The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the cancellation-authorisation.  The ASPSP might make the usage of this access method unnecessary in case of only one SCA process needed, since the related authorisation resource might be automatically created by the ASPSP after the submission of the payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentfication&#39;     * &#39;startAuthorisationWithPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding      payment cancellation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param tpPNotificationURI URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param tpPNotificationContentPreferred The string has the form  status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startConsentAuthorisationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call startPaymentInitiationCancellationAuthorisation_0Async(String paymentService, String paymentProduct, String paymentId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest, final ApiCallback<StartScaprocessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startPaymentInitiationCancellationAuthorisation_0ValidateBeforeCall(paymentService, paymentProduct, paymentId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest, _callback);
        Type localVarReturnType = new TypeToken<StartScaprocessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startSigningBasketAuthorisation_0
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param tpPNotificationURI URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param tpPNotificationContentPreferred The string has the form  status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startConsentAuthorisationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call startSigningBasketAuthorisation_0Call(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startConsentAuthorisationRequest;

        // create path and map variables
        String localVarPath = "/v1/signing-baskets/{basketId}/authorisations"
            .replace("{" + "basketId" + "}", localVarApiClient.escapeString(basketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        if (digest != null) {
            localVarHeaderParams.put("Digest", localVarApiClient.parameterToString(digest));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        if (tpPSignatureCertificate != null) {
            localVarHeaderParams.put("TPP-Signature-Certificate", localVarApiClient.parameterToString(tpPSignatureCertificate));
        }

        if (PSU_ID != null) {
            localVarHeaderParams.put("PSU-ID", localVarApiClient.parameterToString(PSU_ID));
        }

        if (psUIDType != null) {
            localVarHeaderParams.put("PSU-ID-Type", localVarApiClient.parameterToString(psUIDType));
        }

        if (psUCorporateID != null) {
            localVarHeaderParams.put("PSU-Corporate-ID", localVarApiClient.parameterToString(psUCorporateID));
        }

        if (psUCorporateIDType != null) {
            localVarHeaderParams.put("PSU-Corporate-ID-Type", localVarApiClient.parameterToString(psUCorporateIDType));
        }

        if (tpPRedirectPreferred != null) {
            localVarHeaderParams.put("TPP-Redirect-Preferred", localVarApiClient.parameterToString(tpPRedirectPreferred));
        }

        if (tpPRedirectURI != null) {
            localVarHeaderParams.put("TPP-Redirect-URI", localVarApiClient.parameterToString(tpPRedirectURI));
        }

        if (tpPNokRedirectURI != null) {
            localVarHeaderParams.put("TPP-Nok-Redirect-URI", localVarApiClient.parameterToString(tpPNokRedirectURI));
        }

        if (tpPNotificationURI != null) {
            localVarHeaderParams.put("TPP-Notification-URI", localVarApiClient.parameterToString(tpPNotificationURI));
        }

        if (tpPNotificationContentPreferred != null) {
            localVarHeaderParams.put("TPP-Notification-Content-Preferred", localVarApiClient.parameterToString(tpPNotificationContentPreferred));
        }

        if (psUIPAddress != null) {
            localVarHeaderParams.put("PSU-IP-Address", localVarApiClient.parameterToString(psUIPAddress));
        }

        if (psUIPPort != null) {
            localVarHeaderParams.put("PSU-IP-Port", localVarApiClient.parameterToString(psUIPPort));
        }

        if (psUAccept != null) {
            localVarHeaderParams.put("PSU-Accept", localVarApiClient.parameterToString(psUAccept));
        }

        if (psUAcceptCharset != null) {
            localVarHeaderParams.put("PSU-Accept-Charset", localVarApiClient.parameterToString(psUAcceptCharset));
        }

        if (psUAcceptEncoding != null) {
            localVarHeaderParams.put("PSU-Accept-Encoding", localVarApiClient.parameterToString(psUAcceptEncoding));
        }

        if (psUAcceptLanguage != null) {
            localVarHeaderParams.put("PSU-Accept-Language", localVarApiClient.parameterToString(psUAcceptLanguage));
        }

        if (psUUserAgent != null) {
            localVarHeaderParams.put("PSU-User-Agent", localVarApiClient.parameterToString(psUUserAgent));
        }

        if (psUHttpMethod != null) {
            localVarHeaderParams.put("PSU-Http-Method", localVarApiClient.parameterToString(psUHttpMethod));
        }

        if (psUDeviceID != null) {
            localVarHeaderParams.put("PSU-Device-ID", localVarApiClient.parameterToString(psUDeviceID));
        }

        if (psUGeoLocation != null) {
            localVarHeaderParams.put("PSU-Geo-Location", localVarApiClient.parameterToString(psUGeoLocation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuthOAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startSigningBasketAuthorisation_0ValidateBeforeCall(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'basketId' is set
        if (basketId == null) {
            throw new ApiException("Missing the required parameter 'basketId' when calling startSigningBasketAuthorisation_0(Async)");
        }

        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling startSigningBasketAuthorisation_0(Async)");
        }

        return startSigningBasketAuthorisation_0Call(basketId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest, _callback);

    }

    /**
     * Start the authorisation process for a signing basket
     * Create an authorisation sub-resource and start the authorisation process of a signing basket. The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the signing-baskets.  The ASPSP might make the usage of this access method unnecessary in case of only one SCA process needed, since the related authorisation resource might be automatically created by the ASPSP after the submission of the payment data with the first POST signing basket call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentfication&#39;,      * &#39;startAuthorisationWithPsuAuthentication&#39;      * &#39;startAuthorisationWithEncryptedPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding      payment cancellation response that an explicit start of the authorisation process is needed by the TPP.     The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded     by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param tpPNotificationURI URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param tpPNotificationContentPreferred The string has the form  status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startConsentAuthorisationRequest  (optional)
     * @return StartScaprocessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public StartScaprocessResponse startSigningBasketAuthorisation_0(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest) throws ApiException {
        ApiResponse<StartScaprocessResponse> localVarResp = startSigningBasketAuthorisation_0WithHttpInfo(basketId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest);
        return localVarResp.getData();
    }

    /**
     * Start the authorisation process for a signing basket
     * Create an authorisation sub-resource and start the authorisation process of a signing basket. The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the signing-baskets.  The ASPSP might make the usage of this access method unnecessary in case of only one SCA process needed, since the related authorisation resource might be automatically created by the ASPSP after the submission of the payment data with the first POST signing basket call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentfication&#39;,      * &#39;startAuthorisationWithPsuAuthentication&#39;      * &#39;startAuthorisationWithEncryptedPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding      payment cancellation response that an explicit start of the authorisation process is needed by the TPP.     The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded     by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param tpPNotificationURI URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param tpPNotificationContentPreferred The string has the form  status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startConsentAuthorisationRequest  (optional)
     * @return ApiResponse&lt;StartScaprocessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<StartScaprocessResponse> startSigningBasketAuthorisation_0WithHttpInfo(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest) throws ApiException {
        okhttp3.Call localVarCall = startSigningBasketAuthorisation_0ValidateBeforeCall(basketId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest, null);
        Type localVarReturnType = new TypeToken<StartScaprocessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start the authorisation process for a signing basket (asynchronously)
     * Create an authorisation sub-resource and start the authorisation process of a signing basket. The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the signing-baskets.  The ASPSP might make the usage of this access method unnecessary in case of only one SCA process needed, since the related authorisation resource might be automatically created by the ASPSP after the submission of the payment data with the first POST signing basket call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentfication&#39;,      * &#39;startAuthorisationWithPsuAuthentication&#39;      * &#39;startAuthorisationWithEncryptedPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding      payment cancellation response that an explicit start of the authorisation process is needed by the TPP.     The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded     by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param tpPNotificationURI URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param tpPNotificationContentPreferred The string has the form  status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startConsentAuthorisationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call startSigningBasketAuthorisation_0Async(String basketId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, Boolean tpPRedirectPreferred, URI tpPRedirectURI, URI tpPNokRedirectURI, String tpPNotificationURI, String tpPNotificationContentPreferred, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, StartConsentAuthorisationRequest startConsentAuthorisationRequest, final ApiCallback<StartScaprocessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startSigningBasketAuthorisation_0ValidateBeforeCall(basketId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest, _callback);
        Type localVarReturnType = new TypeToken<StartScaprocessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConsentsPsuData_0
     * @param consentId ID of the corresponding consent object as returned by an account information consent request.  (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updateConsentsPsuDataRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateConsentsPsuData_0Call(String consentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateConsentsPsuDataRequest;

        // create path and map variables
        String localVarPath = "/v1/consents/{consentId}/authorisations/{authorisationId}"
            .replace("{" + "consentId" + "}", localVarApiClient.escapeString(consentId.toString()))
            .replace("{" + "authorisationId" + "}", localVarApiClient.escapeString(authorisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        if (digest != null) {
            localVarHeaderParams.put("Digest", localVarApiClient.parameterToString(digest));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        if (tpPSignatureCertificate != null) {
            localVarHeaderParams.put("TPP-Signature-Certificate", localVarApiClient.parameterToString(tpPSignatureCertificate));
        }

        if (PSU_ID != null) {
            localVarHeaderParams.put("PSU-ID", localVarApiClient.parameterToString(PSU_ID));
        }

        if (psUIDType != null) {
            localVarHeaderParams.put("PSU-ID-Type", localVarApiClient.parameterToString(psUIDType));
        }

        if (psUCorporateID != null) {
            localVarHeaderParams.put("PSU-Corporate-ID", localVarApiClient.parameterToString(psUCorporateID));
        }

        if (psUCorporateIDType != null) {
            localVarHeaderParams.put("PSU-Corporate-ID-Type", localVarApiClient.parameterToString(psUCorporateIDType));
        }

        if (psUIPAddress != null) {
            localVarHeaderParams.put("PSU-IP-Address", localVarApiClient.parameterToString(psUIPAddress));
        }

        if (psUIPPort != null) {
            localVarHeaderParams.put("PSU-IP-Port", localVarApiClient.parameterToString(psUIPPort));
        }

        if (psUAccept != null) {
            localVarHeaderParams.put("PSU-Accept", localVarApiClient.parameterToString(psUAccept));
        }

        if (psUAcceptCharset != null) {
            localVarHeaderParams.put("PSU-Accept-Charset", localVarApiClient.parameterToString(psUAcceptCharset));
        }

        if (psUAcceptEncoding != null) {
            localVarHeaderParams.put("PSU-Accept-Encoding", localVarApiClient.parameterToString(psUAcceptEncoding));
        }

        if (psUAcceptLanguage != null) {
            localVarHeaderParams.put("PSU-Accept-Language", localVarApiClient.parameterToString(psUAcceptLanguage));
        }

        if (psUUserAgent != null) {
            localVarHeaderParams.put("PSU-User-Agent", localVarApiClient.parameterToString(psUUserAgent));
        }

        if (psUHttpMethod != null) {
            localVarHeaderParams.put("PSU-Http-Method", localVarApiClient.parameterToString(psUHttpMethod));
        }

        if (psUDeviceID != null) {
            localVarHeaderParams.put("PSU-Device-ID", localVarApiClient.parameterToString(psUDeviceID));
        }

        if (psUGeoLocation != null) {
            localVarHeaderParams.put("PSU-Geo-Location", localVarApiClient.parameterToString(psUGeoLocation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuthOAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConsentsPsuData_0ValidateBeforeCall(String consentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling updateConsentsPsuData_0(Async)");
        }

        // verify the required parameter 'authorisationId' is set
        if (authorisationId == null) {
            throw new ApiException("Missing the required parameter 'authorisationId' when calling updateConsentsPsuData_0(Async)");
        }

        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling updateConsentsPsuData_0(Async)");
        }

        return updateConsentsPsuData_0Call(consentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest, _callback);

    }

    /**
     * Update PSU Data for consents
     * This method update PSU data on the consents  resource if needed. It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific update PSU data request is only applicable for   * adding the PSU Identification, if not provided yet in the payment initiation request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU autorization method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param consentId ID of the corresponding consent object as returned by an account information consent request.  (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updateConsentsPsuDataRequest  (optional)
     * @return UpdateConsentsPsuData200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public UpdateConsentsPsuData200Response updateConsentsPsuData_0(String consentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest) throws ApiException {
        ApiResponse<UpdateConsentsPsuData200Response> localVarResp = updateConsentsPsuData_0WithHttpInfo(consentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest);
        return localVarResp.getData();
    }

    /**
     * Update PSU Data for consents
     * This method update PSU data on the consents  resource if needed. It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific update PSU data request is only applicable for   * adding the PSU Identification, if not provided yet in the payment initiation request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU autorization method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param consentId ID of the corresponding consent object as returned by an account information consent request.  (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updateConsentsPsuDataRequest  (optional)
     * @return ApiResponse&lt;UpdateConsentsPsuData200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<UpdateConsentsPsuData200Response> updateConsentsPsuData_0WithHttpInfo(String consentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest) throws ApiException {
        okhttp3.Call localVarCall = updateConsentsPsuData_0ValidateBeforeCall(consentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest, null);
        Type localVarReturnType = new TypeToken<UpdateConsentsPsuData200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update PSU Data for consents (asynchronously)
     * This method update PSU data on the consents  resource if needed. It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific update PSU data request is only applicable for   * adding the PSU Identification, if not provided yet in the payment initiation request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU autorization method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param consentId ID of the corresponding consent object as returned by an account information consent request.  (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updateConsentsPsuDataRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateConsentsPsuData_0Async(String consentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest, final ApiCallback<UpdateConsentsPsuData200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConsentsPsuData_0ValidateBeforeCall(consentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateConsentsPsuData200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePaymentCancellationPsuData_0
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updateConsentsPsuDataRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentCancellationPsuData_0Call(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateConsentsPsuDataRequest;

        // create path and map variables
        String localVarPath = "/v1/{payment-service}/{payment-product}/{paymentId}/cancellation-authorisations/{authorisationId}"
            .replace("{" + "payment-service" + "}", localVarApiClient.escapeString(paymentService.toString()))
            .replace("{" + "payment-product" + "}", localVarApiClient.escapeString(paymentProduct.toString()))
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()))
            .replace("{" + "authorisationId" + "}", localVarApiClient.escapeString(authorisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        if (digest != null) {
            localVarHeaderParams.put("Digest", localVarApiClient.parameterToString(digest));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        if (tpPSignatureCertificate != null) {
            localVarHeaderParams.put("TPP-Signature-Certificate", localVarApiClient.parameterToString(tpPSignatureCertificate));
        }

        if (PSU_ID != null) {
            localVarHeaderParams.put("PSU-ID", localVarApiClient.parameterToString(PSU_ID));
        }

        if (psUIDType != null) {
            localVarHeaderParams.put("PSU-ID-Type", localVarApiClient.parameterToString(psUIDType));
        }

        if (psUCorporateID != null) {
            localVarHeaderParams.put("PSU-Corporate-ID", localVarApiClient.parameterToString(psUCorporateID));
        }

        if (psUCorporateIDType != null) {
            localVarHeaderParams.put("PSU-Corporate-ID-Type", localVarApiClient.parameterToString(psUCorporateIDType));
        }

        if (psUIPAddress != null) {
            localVarHeaderParams.put("PSU-IP-Address", localVarApiClient.parameterToString(psUIPAddress));
        }

        if (psUIPPort != null) {
            localVarHeaderParams.put("PSU-IP-Port", localVarApiClient.parameterToString(psUIPPort));
        }

        if (psUAccept != null) {
            localVarHeaderParams.put("PSU-Accept", localVarApiClient.parameterToString(psUAccept));
        }

        if (psUAcceptCharset != null) {
            localVarHeaderParams.put("PSU-Accept-Charset", localVarApiClient.parameterToString(psUAcceptCharset));
        }

        if (psUAcceptEncoding != null) {
            localVarHeaderParams.put("PSU-Accept-Encoding", localVarApiClient.parameterToString(psUAcceptEncoding));
        }

        if (psUAcceptLanguage != null) {
            localVarHeaderParams.put("PSU-Accept-Language", localVarApiClient.parameterToString(psUAcceptLanguage));
        }

        if (psUUserAgent != null) {
            localVarHeaderParams.put("PSU-User-Agent", localVarApiClient.parameterToString(psUUserAgent));
        }

        if (psUHttpMethod != null) {
            localVarHeaderParams.put("PSU-Http-Method", localVarApiClient.parameterToString(psUHttpMethod));
        }

        if (psUDeviceID != null) {
            localVarHeaderParams.put("PSU-Device-ID", localVarApiClient.parameterToString(psUDeviceID));
        }

        if (psUGeoLocation != null) {
            localVarHeaderParams.put("PSU-Geo-Location", localVarApiClient.parameterToString(psUGeoLocation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuthOAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePaymentCancellationPsuData_0ValidateBeforeCall(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentService' is set
        if (paymentService == null) {
            throw new ApiException("Missing the required parameter 'paymentService' when calling updatePaymentCancellationPsuData_0(Async)");
        }

        // verify the required parameter 'paymentProduct' is set
        if (paymentProduct == null) {
            throw new ApiException("Missing the required parameter 'paymentProduct' when calling updatePaymentCancellationPsuData_0(Async)");
        }

        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling updatePaymentCancellationPsuData_0(Async)");
        }

        // verify the required parameter 'authorisationId' is set
        if (authorisationId == null) {
            throw new ApiException("Missing the required parameter 'authorisationId' when calling updatePaymentCancellationPsuData_0(Async)");
        }

        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling updatePaymentCancellationPsuData_0(Async)");
        }

        return updatePaymentCancellationPsuData_0Call(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest, _callback);

    }

    /**
     * Update PSU data for payment initiation cancellation
     * This method updates PSU data on the cancellation authorisation resource if needed.  It may authorise a cancellation of the payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of a cancellation authorisation within the payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU data request is only applicable for   * adding the PSU Identification, if not provided yet in the payment initiation request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA approach might depend on the chosen SCA method.  For that reason, the following possible update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU autorization method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updateConsentsPsuDataRequest  (optional)
     * @return UpdateConsentsPsuData200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public UpdateConsentsPsuData200Response updatePaymentCancellationPsuData_0(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest) throws ApiException {
        ApiResponse<UpdateConsentsPsuData200Response> localVarResp = updatePaymentCancellationPsuData_0WithHttpInfo(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest);
        return localVarResp.getData();
    }

    /**
     * Update PSU data for payment initiation cancellation
     * This method updates PSU data on the cancellation authorisation resource if needed.  It may authorise a cancellation of the payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of a cancellation authorisation within the payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU data request is only applicable for   * adding the PSU Identification, if not provided yet in the payment initiation request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA approach might depend on the chosen SCA method.  For that reason, the following possible update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU autorization method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updateConsentsPsuDataRequest  (optional)
     * @return ApiResponse&lt;UpdateConsentsPsuData200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<UpdateConsentsPsuData200Response> updatePaymentCancellationPsuData_0WithHttpInfo(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePaymentCancellationPsuData_0ValidateBeforeCall(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest, null);
        Type localVarReturnType = new TypeToken<UpdateConsentsPsuData200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update PSU data for payment initiation cancellation (asynchronously)
     * This method updates PSU data on the cancellation authorisation resource if needed.  It may authorise a cancellation of the payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of a cancellation authorisation within the payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU data request is only applicable for   * adding the PSU Identification, if not provided yet in the payment initiation request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA approach might depend on the chosen SCA method.  For that reason, the following possible update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU autorization method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updateConsentsPsuDataRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentCancellationPsuData_0Async(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest, final ApiCallback<UpdateConsentsPsuData200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePaymentCancellationPsuData_0ValidateBeforeCall(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateConsentsPsuData200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePaymentPsuData_0
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updateConsentsPsuDataRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentPsuData_0Call(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateConsentsPsuDataRequest;

        // create path and map variables
        String localVarPath = "/v1/{payment-service}/{payment-product}/{paymentId}/authorisations/{authorisationId}"
            .replace("{" + "payment-service" + "}", localVarApiClient.escapeString(paymentService.toString()))
            .replace("{" + "payment-product" + "}", localVarApiClient.escapeString(paymentProduct.toString()))
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()))
            .replace("{" + "authorisationId" + "}", localVarApiClient.escapeString(authorisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        if (digest != null) {
            localVarHeaderParams.put("Digest", localVarApiClient.parameterToString(digest));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        if (tpPSignatureCertificate != null) {
            localVarHeaderParams.put("TPP-Signature-Certificate", localVarApiClient.parameterToString(tpPSignatureCertificate));
        }

        if (PSU_ID != null) {
            localVarHeaderParams.put("PSU-ID", localVarApiClient.parameterToString(PSU_ID));
        }

        if (psUIDType != null) {
            localVarHeaderParams.put("PSU-ID-Type", localVarApiClient.parameterToString(psUIDType));
        }

        if (psUCorporateID != null) {
            localVarHeaderParams.put("PSU-Corporate-ID", localVarApiClient.parameterToString(psUCorporateID));
        }

        if (psUCorporateIDType != null) {
            localVarHeaderParams.put("PSU-Corporate-ID-Type", localVarApiClient.parameterToString(psUCorporateIDType));
        }

        if (psUIPAddress != null) {
            localVarHeaderParams.put("PSU-IP-Address", localVarApiClient.parameterToString(psUIPAddress));
        }

        if (psUIPPort != null) {
            localVarHeaderParams.put("PSU-IP-Port", localVarApiClient.parameterToString(psUIPPort));
        }

        if (psUAccept != null) {
            localVarHeaderParams.put("PSU-Accept", localVarApiClient.parameterToString(psUAccept));
        }

        if (psUAcceptCharset != null) {
            localVarHeaderParams.put("PSU-Accept-Charset", localVarApiClient.parameterToString(psUAcceptCharset));
        }

        if (psUAcceptEncoding != null) {
            localVarHeaderParams.put("PSU-Accept-Encoding", localVarApiClient.parameterToString(psUAcceptEncoding));
        }

        if (psUAcceptLanguage != null) {
            localVarHeaderParams.put("PSU-Accept-Language", localVarApiClient.parameterToString(psUAcceptLanguage));
        }

        if (psUUserAgent != null) {
            localVarHeaderParams.put("PSU-User-Agent", localVarApiClient.parameterToString(psUUserAgent));
        }

        if (psUHttpMethod != null) {
            localVarHeaderParams.put("PSU-Http-Method", localVarApiClient.parameterToString(psUHttpMethod));
        }

        if (psUDeviceID != null) {
            localVarHeaderParams.put("PSU-Device-ID", localVarApiClient.parameterToString(psUDeviceID));
        }

        if (psUGeoLocation != null) {
            localVarHeaderParams.put("PSU-Geo-Location", localVarApiClient.parameterToString(psUGeoLocation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuthOAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePaymentPsuData_0ValidateBeforeCall(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentService' is set
        if (paymentService == null) {
            throw new ApiException("Missing the required parameter 'paymentService' when calling updatePaymentPsuData_0(Async)");
        }

        // verify the required parameter 'paymentProduct' is set
        if (paymentProduct == null) {
            throw new ApiException("Missing the required parameter 'paymentProduct' when calling updatePaymentPsuData_0(Async)");
        }

        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling updatePaymentPsuData_0(Async)");
        }

        // verify the required parameter 'authorisationId' is set
        if (authorisationId == null) {
            throw new ApiException("Missing the required parameter 'authorisationId' when calling updatePaymentPsuData_0(Async)");
        }

        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling updatePaymentPsuData_0(Async)");
        }

        return updatePaymentPsuData_0Call(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest, _callback);

    }

    /**
     * Update PSU data for payment initiation
     * This methods updates PSU data on the authorisation resource if needed. It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific update PSU data request is only applicable for   * adding the PSU identification, if not provided yet in the payment initiation request or the account information consent request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU autorization method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updateConsentsPsuDataRequest  (optional)
     * @return UpdateConsentsPsuData200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public UpdateConsentsPsuData200Response updatePaymentPsuData_0(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest) throws ApiException {
        ApiResponse<UpdateConsentsPsuData200Response> localVarResp = updatePaymentPsuData_0WithHttpInfo(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest);
        return localVarResp.getData();
    }

    /**
     * Update PSU data for payment initiation
     * This methods updates PSU data on the authorisation resource if needed. It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific update PSU data request is only applicable for   * adding the PSU identification, if not provided yet in the payment initiation request or the account information consent request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU autorization method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updateConsentsPsuDataRequest  (optional)
     * @return ApiResponse&lt;UpdateConsentsPsuData200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<UpdateConsentsPsuData200Response> updatePaymentPsuData_0WithHttpInfo(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePaymentPsuData_0ValidateBeforeCall(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest, null);
        Type localVarReturnType = new TypeToken<UpdateConsentsPsuData200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update PSU data for payment initiation (asynchronously)
     * This methods updates PSU data on the authorisation resource if needed. It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific update PSU data request is only applicable for   * adding the PSU identification, if not provided yet in the payment initiation request or the account information consent request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU autorization method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param paymentService Payment service:  Possible values are: * payments * bulk-payments * periodic-payments  (required)
     * @param paymentProduct The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - domestic-swiss-credit-transfers-isr   - domestic-swiss-credit-transfers   - domestic-swiss-credit-transfers-qr   - domestic-swiss-foreign-credit-transfers   - swiss-sepa-credit-transfers   - swiss-cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-cross-border-credit-transfers   - pain.001-swiss-six-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding, the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content. Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist. There are plenty of country specificic scheme variants.  (required)
     * @param paymentId Resource identification of the generated payment initiation resource. (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updateConsentsPsuDataRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentPsuData_0Async(String paymentService, String paymentProduct, String paymentId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest, final ApiCallback<UpdateConsentsPsuData200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePaymentPsuData_0ValidateBeforeCall(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateConsentsPsuData200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSigningBasketPsuData_0
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updateConsentsPsuDataRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateSigningBasketPsuData_0Call(String basketId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateConsentsPsuDataRequest;

        // create path and map variables
        String localVarPath = "/v1/signing-baskets/{basketId}/authorisations/{authorisationId}"
            .replace("{" + "basketId" + "}", localVarApiClient.escapeString(basketId.toString()))
            .replace("{" + "authorisationId" + "}", localVarApiClient.escapeString(authorisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        if (digest != null) {
            localVarHeaderParams.put("Digest", localVarApiClient.parameterToString(digest));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        if (tpPSignatureCertificate != null) {
            localVarHeaderParams.put("TPP-Signature-Certificate", localVarApiClient.parameterToString(tpPSignatureCertificate));
        }

        if (PSU_ID != null) {
            localVarHeaderParams.put("PSU-ID", localVarApiClient.parameterToString(PSU_ID));
        }

        if (psUIDType != null) {
            localVarHeaderParams.put("PSU-ID-Type", localVarApiClient.parameterToString(psUIDType));
        }

        if (psUCorporateID != null) {
            localVarHeaderParams.put("PSU-Corporate-ID", localVarApiClient.parameterToString(psUCorporateID));
        }

        if (psUCorporateIDType != null) {
            localVarHeaderParams.put("PSU-Corporate-ID-Type", localVarApiClient.parameterToString(psUCorporateIDType));
        }

        if (psUIPAddress != null) {
            localVarHeaderParams.put("PSU-IP-Address", localVarApiClient.parameterToString(psUIPAddress));
        }

        if (psUIPPort != null) {
            localVarHeaderParams.put("PSU-IP-Port", localVarApiClient.parameterToString(psUIPPort));
        }

        if (psUAccept != null) {
            localVarHeaderParams.put("PSU-Accept", localVarApiClient.parameterToString(psUAccept));
        }

        if (psUAcceptCharset != null) {
            localVarHeaderParams.put("PSU-Accept-Charset", localVarApiClient.parameterToString(psUAcceptCharset));
        }

        if (psUAcceptEncoding != null) {
            localVarHeaderParams.put("PSU-Accept-Encoding", localVarApiClient.parameterToString(psUAcceptEncoding));
        }

        if (psUAcceptLanguage != null) {
            localVarHeaderParams.put("PSU-Accept-Language", localVarApiClient.parameterToString(psUAcceptLanguage));
        }

        if (psUUserAgent != null) {
            localVarHeaderParams.put("PSU-User-Agent", localVarApiClient.parameterToString(psUUserAgent));
        }

        if (psUHttpMethod != null) {
            localVarHeaderParams.put("PSU-Http-Method", localVarApiClient.parameterToString(psUHttpMethod));
        }

        if (psUDeviceID != null) {
            localVarHeaderParams.put("PSU-Device-ID", localVarApiClient.parameterToString(psUDeviceID));
        }

        if (psUGeoLocation != null) {
            localVarHeaderParams.put("PSU-Geo-Location", localVarApiClient.parameterToString(psUGeoLocation));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuthOAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSigningBasketPsuData_0ValidateBeforeCall(String basketId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'basketId' is set
        if (basketId == null) {
            throw new ApiException("Missing the required parameter 'basketId' when calling updateSigningBasketPsuData_0(Async)");
        }

        // verify the required parameter 'authorisationId' is set
        if (authorisationId == null) {
            throw new ApiException("Missing the required parameter 'authorisationId' when calling updateSigningBasketPsuData_0(Async)");
        }

        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling updateSigningBasketPsuData_0(Async)");
        }

        return updateSigningBasketPsuData_0Call(basketId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest, _callback);

    }

    /**
     * Update PSU data for signing basket
     * This method update PSU data on the signing basket resource if needed.  It may authorise a igning basket within the embedded SCA approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU data request is only applicable for   * adding the PSU Identification, if not provided yet in the payment initiation request or the account information consent request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The update PSU data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA approach might depend on the chosen SCA method.  For that reason, the following possible update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU autorization Method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updateConsentsPsuDataRequest  (optional)
     * @return UpdateConsentsPsuData200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public UpdateConsentsPsuData200Response updateSigningBasketPsuData_0(String basketId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest) throws ApiException {
        ApiResponse<UpdateConsentsPsuData200Response> localVarResp = updateSigningBasketPsuData_0WithHttpInfo(basketId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest);
        return localVarResp.getData();
    }

    /**
     * Update PSU data for signing basket
     * This method update PSU data on the signing basket resource if needed.  It may authorise a igning basket within the embedded SCA approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU data request is only applicable for   * adding the PSU Identification, if not provided yet in the payment initiation request or the account information consent request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The update PSU data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA approach might depend on the chosen SCA method.  For that reason, the following possible update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU autorization Method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updateConsentsPsuDataRequest  (optional)
     * @return ApiResponse&lt;UpdateConsentsPsuData200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<UpdateConsentsPsuData200Response> updateSigningBasketPsuData_0WithHttpInfo(String basketId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSigningBasketPsuData_0ValidateBeforeCall(basketId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest, null);
        Type localVarReturnType = new TypeToken<UpdateConsentsPsuData200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update PSU data for signing basket (asynchronously)
     * This method update PSU data on the signing basket resource if needed.  It may authorise a igning basket within the embedded SCA approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU data request is only applicable for   * adding the PSU Identification, if not provided yet in the payment initiation request or the account information consent request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The update PSU data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA approach might depend on the chosen SCA method.  For that reason, the following possible update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU autorization Method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param basketId This identification of the corresponding signing basket object.  (required)
     * @param authorisationId Resource identification of the related SCA. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP&#39;s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updateConsentsPsuDataRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * ASPSP-SCA-Approach -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateSigningBasketPsuData_0Async(String basketId, String authorisationId, String xRequestID, String digest, String signature, byte[] tpPSignatureCertificate, String PSU_ID, String psUIDType, String psUCorporateID, String psUCorporateIDType, String psUIPAddress, String psUIPPort, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUUserAgent, String psUHttpMethod, String psUDeviceID, String psUGeoLocation, UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest, final ApiCallback<UpdateConsentsPsuData200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSigningBasketPsuData_0ValidateBeforeCall(basketId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateConsentsPsuData200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
