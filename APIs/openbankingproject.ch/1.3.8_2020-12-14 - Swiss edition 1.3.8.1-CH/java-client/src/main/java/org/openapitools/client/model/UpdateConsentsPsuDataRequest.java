/*
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AuthorisationConfirmation;
import org.openapitools.client.model.PsuData;
import org.openapitools.client.model.SelectPsuAuthenticationMethod;
import org.openapitools.client.model.TransactionAuthorisation;
import org.openapitools.client.model.UpdatePsuAuthentication;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:56.314640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateConsentsPsuDataRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(UpdateConsentsPsuDataRequest.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpdateConsentsPsuDataRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UpdateConsentsPsuDataRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UpdatePsuAuthentication> adapterUpdatePsuAuthentication = gson.getDelegateAdapter(this, TypeToken.get(UpdatePsuAuthentication.class));
            final TypeAdapter<SelectPsuAuthenticationMethod> adapterSelectPsuAuthenticationMethod = gson.getDelegateAdapter(this, TypeToken.get(SelectPsuAuthenticationMethod.class));
            final TypeAdapter<TransactionAuthorisation> adapterTransactionAuthorisation = gson.getDelegateAdapter(this, TypeToken.get(TransactionAuthorisation.class));
            final TypeAdapter<AuthorisationConfirmation> adapterAuthorisationConfirmation = gson.getDelegateAdapter(this, TypeToken.get(AuthorisationConfirmation.class));

            return (TypeAdapter<T>) new TypeAdapter<UpdateConsentsPsuDataRequest>() {
                @Override
                public void write(JsonWriter out, UpdateConsentsPsuDataRequest value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `UpdatePsuAuthentication`
                    if (value.getActualInstance() instanceof UpdatePsuAuthentication) {
                        JsonElement element = adapterUpdatePsuAuthentication.toJsonTree((UpdatePsuAuthentication)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SelectPsuAuthenticationMethod`
                    if (value.getActualInstance() instanceof SelectPsuAuthenticationMethod) {
                        JsonElement element = adapterSelectPsuAuthenticationMethod.toJsonTree((SelectPsuAuthenticationMethod)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TransactionAuthorisation`
                    if (value.getActualInstance() instanceof TransactionAuthorisation) {
                        JsonElement element = adapterTransactionAuthorisation.toJsonTree((TransactionAuthorisation)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuthorisationConfirmation`
                    if (value.getActualInstance() instanceof AuthorisationConfirmation) {
                        JsonElement element = adapterAuthorisationConfirmation.toJsonTree((AuthorisationConfirmation)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AuthorisationConfirmation, SelectPsuAuthenticationMethod, TransactionAuthorisation, UpdatePsuAuthentication");
                }

                @Override
                public UpdateConsentsPsuDataRequest read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize UpdatePsuAuthentication
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UpdatePsuAuthentication.validateJsonElement(jsonElement);
                        actualAdapter = adapterUpdatePsuAuthentication;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UpdatePsuAuthentication'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UpdatePsuAuthentication failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UpdatePsuAuthentication'", e);
                    }
                    // deserialize SelectPsuAuthenticationMethod
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SelectPsuAuthenticationMethod.validateJsonElement(jsonElement);
                        actualAdapter = adapterSelectPsuAuthenticationMethod;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SelectPsuAuthenticationMethod'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SelectPsuAuthenticationMethod failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SelectPsuAuthenticationMethod'", e);
                    }
                    // deserialize TransactionAuthorisation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransactionAuthorisation.validateJsonElement(jsonElement);
                        actualAdapter = adapterTransactionAuthorisation;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransactionAuthorisation'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransactionAuthorisation failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransactionAuthorisation'", e);
                    }
                    // deserialize AuthorisationConfirmation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthorisationConfirmation.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuthorisationConfirmation;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuthorisationConfirmation'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuthorisationConfirmation failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuthorisationConfirmation'", e);
                    }

                    if (match == 1) {
                        UpdateConsentsPsuDataRequest ret = new UpdateConsentsPsuDataRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for UpdateConsentsPsuDataRequest: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public UpdateConsentsPsuDataRequest() {
        super("oneOf", Boolean.TRUE);
    }

    public UpdateConsentsPsuDataRequest(Object o) {
        super("oneOf", Boolean.TRUE);
        setActualInstance(o);
    }

    static {
        schemas.put("UpdatePsuAuthentication", UpdatePsuAuthentication.class);
        schemas.put("SelectPsuAuthenticationMethod", SelectPsuAuthenticationMethod.class);
        schemas.put("TransactionAuthorisation", TransactionAuthorisation.class);
        schemas.put("AuthorisationConfirmation", AuthorisationConfirmation.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return UpdateConsentsPsuDataRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AuthorisationConfirmation, SelectPsuAuthenticationMethod, TransactionAuthorisation, UpdatePsuAuthentication
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance == null) {
           super.setActualInstance(instance);
           return;
        }

        if (instance instanceof UpdatePsuAuthentication) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SelectPsuAuthenticationMethod) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransactionAuthorisation) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuthorisationConfirmation) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AuthorisationConfirmation, SelectPsuAuthenticationMethod, TransactionAuthorisation, UpdatePsuAuthentication");
    }

    /**
     * Get the actual instance, which can be the following:
     * AuthorisationConfirmation, SelectPsuAuthenticationMethod, TransactionAuthorisation, UpdatePsuAuthentication
     *
     * @return The actual instance (AuthorisationConfirmation, SelectPsuAuthenticationMethod, TransactionAuthorisation, UpdatePsuAuthentication)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `UpdatePsuAuthentication`. If the actual instance is not `UpdatePsuAuthentication`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UpdatePsuAuthentication`
     * @throws ClassCastException if the instance is not `UpdatePsuAuthentication`
     */
    public UpdatePsuAuthentication getUpdatePsuAuthentication() throws ClassCastException {
        return (UpdatePsuAuthentication)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SelectPsuAuthenticationMethod`. If the actual instance is not `SelectPsuAuthenticationMethod`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SelectPsuAuthenticationMethod`
     * @throws ClassCastException if the instance is not `SelectPsuAuthenticationMethod`
     */
    public SelectPsuAuthenticationMethod getSelectPsuAuthenticationMethod() throws ClassCastException {
        return (SelectPsuAuthenticationMethod)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransactionAuthorisation`. If the actual instance is not `TransactionAuthorisation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransactionAuthorisation`
     * @throws ClassCastException if the instance is not `TransactionAuthorisation`
     */
    public TransactionAuthorisation getTransactionAuthorisation() throws ClassCastException {
        return (TransactionAuthorisation)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AuthorisationConfirmation`. If the actual instance is not `AuthorisationConfirmation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthorisationConfirmation`
     * @throws ClassCastException if the instance is not `AuthorisationConfirmation`
     */
    public AuthorisationConfirmation getAuthorisationConfirmation() throws ClassCastException {
        return (AuthorisationConfirmation)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to UpdateConsentsPsuDataRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with UpdatePsuAuthentication
        try {
            UpdatePsuAuthentication.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UpdatePsuAuthentication failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SelectPsuAuthenticationMethod
        try {
            SelectPsuAuthenticationMethod.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SelectPsuAuthenticationMethod failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TransactionAuthorisation
        try {
            TransactionAuthorisation.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TransactionAuthorisation failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuthorisationConfirmation
        try {
            AuthorisationConfirmation.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuthorisationConfirmation failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for UpdateConsentsPsuDataRequest with oneOf schemas: AuthorisationConfirmation, SelectPsuAuthenticationMethod, TransactionAuthorisation, UpdatePsuAuthentication. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of UpdateConsentsPsuDataRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UpdateConsentsPsuDataRequest
     * @throws IOException if the JSON string is invalid with respect to UpdateConsentsPsuDataRequest
     */
    public static UpdateConsentsPsuDataRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, UpdateConsentsPsuDataRequest.class);
    }

    /**
     * Convert an instance of UpdateConsentsPsuDataRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

