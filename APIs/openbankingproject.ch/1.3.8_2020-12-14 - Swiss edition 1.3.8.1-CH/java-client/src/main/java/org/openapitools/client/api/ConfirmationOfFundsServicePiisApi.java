/*
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CheckAvailabilityOfFunds200Response;
import org.openapitools.client.model.ConfirmationOfFunds;
import org.openapitools.client.model.Error400AIS;
import org.openapitools.client.model.Error400NGAIS;
import org.openapitools.client.model.Error401NGPIIS;
import org.openapitools.client.model.Error401PIIS;
import org.openapitools.client.model.Error403NGPIIS;
import org.openapitools.client.model.Error403PIIS;
import org.openapitools.client.model.Error404NGPIIS;
import org.openapitools.client.model.Error404PIIS;
import org.openapitools.client.model.Error405NGPIIS;
import org.openapitools.client.model.Error405PIIS;
import org.openapitools.client.model.Error409NGPIIS;
import org.openapitools.client.model.Error409PIIS;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfirmationOfFundsServicePiisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConfirmationOfFundsServicePiisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfirmationOfFundsServicePiisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkAvailabilityOfFunds
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param confirmationOfFunds Request body for a confirmation of funds request.  (required)
     * @param authorization This field  might be used in case where a consent was agreed between ASPSP and PSU through an OAuth2 based protocol, facilitated by the TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call checkAvailabilityOfFundsCall(String xRequestID, ConfirmationOfFunds confirmationOfFunds, String authorization, String digest, String signature, byte[] tpPSignatureCertificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = confirmationOfFunds;

        // create path and map variables
        String localVarPath = "/v1/funds-confirmations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xRequestID != null) {
            localVarHeaderParams.put("X-Request-ID", localVarApiClient.parameterToString(xRequestID));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (digest != null) {
            localVarHeaderParams.put("Digest", localVarApiClient.parameterToString(digest));
        }

        if (signature != null) {
            localVarHeaderParams.put("Signature", localVarApiClient.parameterToString(signature));
        }

        if (tpPSignatureCertificate != null) {
            localVarHeaderParams.put("TPP-Signature-Certificate", localVarApiClient.parameterToString(tpPSignatureCertificate));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuthOAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkAvailabilityOfFundsValidateBeforeCall(String xRequestID, ConfirmationOfFunds confirmationOfFunds, String authorization, String digest, String signature, byte[] tpPSignatureCertificate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling checkAvailabilityOfFunds(Async)");
        }

        // verify the required parameter 'confirmationOfFunds' is set
        if (confirmationOfFunds == null) {
            throw new ApiException("Missing the required parameter 'confirmationOfFunds' when calling checkAvailabilityOfFunds(Async)");
        }

        return checkAvailabilityOfFundsCall(xRequestID, confirmationOfFunds, authorization, digest, signature, tpPSignatureCertificate, _callback);

    }

    /**
     * Confirmation of funds request
     * Creates a confirmation of funds request at the ASPSP. Checks whether a specific amount is available at point of time of the request on an account linked to a given tuple card issuer(TPP)/card number, or addressed by IBAN and TPP respectively. If the related extended services are used a conditional Consent-ID is contained in the header. This field is contained but commented out in this specification.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param confirmationOfFunds Request body for a confirmation of funds request.  (required)
     * @param authorization This field  might be used in case where a consent was agreed between ASPSP and PSU through an OAuth2 based protocol, facilitated by the TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @return CheckAvailabilityOfFunds200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public CheckAvailabilityOfFunds200Response checkAvailabilityOfFunds(String xRequestID, ConfirmationOfFunds confirmationOfFunds, String authorization, String digest, String signature, byte[] tpPSignatureCertificate) throws ApiException {
        ApiResponse<CheckAvailabilityOfFunds200Response> localVarResp = checkAvailabilityOfFundsWithHttpInfo(xRequestID, confirmationOfFunds, authorization, digest, signature, tpPSignatureCertificate);
        return localVarResp.getData();
    }

    /**
     * Confirmation of funds request
     * Creates a confirmation of funds request at the ASPSP. Checks whether a specific amount is available at point of time of the request on an account linked to a given tuple card issuer(TPP)/card number, or addressed by IBAN and TPP respectively. If the related extended services are used a conditional Consent-ID is contained in the header. This field is contained but commented out in this specification.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param confirmationOfFunds Request body for a confirmation of funds request.  (required)
     * @param authorization This field  might be used in case where a consent was agreed between ASPSP and PSU through an OAuth2 based protocol, facilitated by the TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @return ApiResponse&lt;CheckAvailabilityOfFunds200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<CheckAvailabilityOfFunds200Response> checkAvailabilityOfFundsWithHttpInfo(String xRequestID, ConfirmationOfFunds confirmationOfFunds, String authorization, String digest, String signature, byte[] tpPSignatureCertificate) throws ApiException {
        okhttp3.Call localVarCall = checkAvailabilityOfFundsValidateBeforeCall(xRequestID, confirmationOfFunds, authorization, digest, signature, tpPSignatureCertificate, null);
        Type localVarReturnType = new TypeToken<CheckAvailabilityOfFunds200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Confirmation of funds request (asynchronously)
     * Creates a confirmation of funds request at the ASPSP. Checks whether a specific amount is available at point of time of the request on an account linked to a given tuple card issuer(TPP)/card number, or addressed by IBAN and TPP respectively. If the related extended services are used a conditional Consent-ID is contained in the header. This field is contained but commented out in this specification.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param confirmationOfFunds Request body for a confirmation of funds request.  (required)
     * @param authorization This field  might be used in case where a consent was agreed between ASPSP and PSU through an OAuth2 based protocol, facilitated by the TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 408 </td><td> Request Timeout </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  * Location -  <br>  * X-Request-ID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call checkAvailabilityOfFundsAsync(String xRequestID, ConfirmationOfFunds confirmationOfFunds, String authorization, String digest, String signature, byte[] tpPSignatureCertificate, final ApiCallback<CheckAvailabilityOfFunds200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkAvailabilityOfFundsValidateBeforeCall(xRequestID, confirmationOfFunds, authorization, digest, signature, tpPSignatureCertificate, _callback);
        Type localVarReturnType = new TypeToken<CheckAvailabilityOfFunds200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
