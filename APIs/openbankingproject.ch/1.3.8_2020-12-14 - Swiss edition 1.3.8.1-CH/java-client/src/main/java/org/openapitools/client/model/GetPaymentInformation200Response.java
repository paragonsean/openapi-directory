/*
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountReference16CH;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.BulkPaymentInitiationWithStatusResponse;
import org.openapitools.client.model.CreditorAgent7CH;
import org.openapitools.client.model.DayOfExecution;
import org.openapitools.client.model.ExecutionRule;
import org.openapitools.client.model.FrequencyCode;
import org.openapitools.client.model.PaymentInitiationBulkElementJson;
import org.openapitools.client.model.PaymentInitiationWithStatusResponse;
import org.openapitools.client.model.PeriodicPaymentInitiationWithStatusResponse;
import org.openapitools.client.model.PurposeCode;
import org.openapitools.client.model.RemittanceInformationStructured;
import org.openapitools.client.model.TransactionStatus;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:56.314640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetPaymentInformation200Response extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(GetPaymentInformation200Response.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetPaymentInformation200Response.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetPaymentInformation200Response' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PaymentInitiationWithStatusResponse> adapterPaymentInitiationWithStatusResponse = gson.getDelegateAdapter(this, TypeToken.get(PaymentInitiationWithStatusResponse.class));
            final TypeAdapter<PeriodicPaymentInitiationWithStatusResponse> adapterPeriodicPaymentInitiationWithStatusResponse = gson.getDelegateAdapter(this, TypeToken.get(PeriodicPaymentInitiationWithStatusResponse.class));
            final TypeAdapter<BulkPaymentInitiationWithStatusResponse> adapterBulkPaymentInitiationWithStatusResponse = gson.getDelegateAdapter(this, TypeToken.get(BulkPaymentInitiationWithStatusResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<GetPaymentInformation200Response>() {
                @Override
                public void write(JsonWriter out, GetPaymentInformation200Response value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `PaymentInitiationWithStatusResponse`
                    if (value.getActualInstance() instanceof PaymentInitiationWithStatusResponse) {
                        JsonElement element = adapterPaymentInitiationWithStatusResponse.toJsonTree((PaymentInitiationWithStatusResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PeriodicPaymentInitiationWithStatusResponse`
                    if (value.getActualInstance() instanceof PeriodicPaymentInitiationWithStatusResponse) {
                        JsonElement element = adapterPeriodicPaymentInitiationWithStatusResponse.toJsonTree((PeriodicPaymentInitiationWithStatusResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `BulkPaymentInitiationWithStatusResponse`
                    if (value.getActualInstance() instanceof BulkPaymentInitiationWithStatusResponse) {
                        JsonElement element = adapterBulkPaymentInitiationWithStatusResponse.toJsonTree((BulkPaymentInitiationWithStatusResponse)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: BulkPaymentInitiationWithStatusResponse, PaymentInitiationWithStatusResponse, PeriodicPaymentInitiationWithStatusResponse");
                }

                @Override
                public GetPaymentInformation200Response read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize PaymentInitiationWithStatusResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PaymentInitiationWithStatusResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterPaymentInitiationWithStatusResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PaymentInitiationWithStatusResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PaymentInitiationWithStatusResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PaymentInitiationWithStatusResponse'", e);
                    }
                    // deserialize PeriodicPaymentInitiationWithStatusResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PeriodicPaymentInitiationWithStatusResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterPeriodicPaymentInitiationWithStatusResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PeriodicPaymentInitiationWithStatusResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PeriodicPaymentInitiationWithStatusResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PeriodicPaymentInitiationWithStatusResponse'", e);
                    }
                    // deserialize BulkPaymentInitiationWithStatusResponse
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BulkPaymentInitiationWithStatusResponse.validateJsonElement(jsonElement);
                        actualAdapter = adapterBulkPaymentInitiationWithStatusResponse;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BulkPaymentInitiationWithStatusResponse'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BulkPaymentInitiationWithStatusResponse failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BulkPaymentInitiationWithStatusResponse'", e);
                    }

                    if (match == 1) {
                        GetPaymentInformation200Response ret = new GetPaymentInformation200Response();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for GetPaymentInformation200Response: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public GetPaymentInformation200Response() {
        super("oneOf", Boolean.FALSE);
    }

    public GetPaymentInformation200Response(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PaymentInitiationWithStatusResponse", PaymentInitiationWithStatusResponse.class);
        schemas.put("PeriodicPaymentInitiationWithStatusResponse", PeriodicPaymentInitiationWithStatusResponse.class);
        schemas.put("BulkPaymentInitiationWithStatusResponse", BulkPaymentInitiationWithStatusResponse.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return GetPaymentInformation200Response.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * BulkPaymentInitiationWithStatusResponse, PaymentInitiationWithStatusResponse, PeriodicPaymentInitiationWithStatusResponse
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof PaymentInitiationWithStatusResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PeriodicPaymentInitiationWithStatusResponse) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BulkPaymentInitiationWithStatusResponse) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be BulkPaymentInitiationWithStatusResponse, PaymentInitiationWithStatusResponse, PeriodicPaymentInitiationWithStatusResponse");
    }

    /**
     * Get the actual instance, which can be the following:
     * BulkPaymentInitiationWithStatusResponse, PaymentInitiationWithStatusResponse, PeriodicPaymentInitiationWithStatusResponse
     *
     * @return The actual instance (BulkPaymentInitiationWithStatusResponse, PaymentInitiationWithStatusResponse, PeriodicPaymentInitiationWithStatusResponse)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentInitiationWithStatusResponse`. If the actual instance is not `PaymentInitiationWithStatusResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentInitiationWithStatusResponse`
     * @throws ClassCastException if the instance is not `PaymentInitiationWithStatusResponse`
     */
    public PaymentInitiationWithStatusResponse getPaymentInitiationWithStatusResponse() throws ClassCastException {
        return (PaymentInitiationWithStatusResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PeriodicPaymentInitiationWithStatusResponse`. If the actual instance is not `PeriodicPaymentInitiationWithStatusResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PeriodicPaymentInitiationWithStatusResponse`
     * @throws ClassCastException if the instance is not `PeriodicPaymentInitiationWithStatusResponse`
     */
    public PeriodicPaymentInitiationWithStatusResponse getPeriodicPaymentInitiationWithStatusResponse() throws ClassCastException {
        return (PeriodicPaymentInitiationWithStatusResponse)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BulkPaymentInitiationWithStatusResponse`. If the actual instance is not `BulkPaymentInitiationWithStatusResponse`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BulkPaymentInitiationWithStatusResponse`
     * @throws ClassCastException if the instance is not `BulkPaymentInitiationWithStatusResponse`
     */
    public BulkPaymentInitiationWithStatusResponse getBulkPaymentInitiationWithStatusResponse() throws ClassCastException {
        return (BulkPaymentInitiationWithStatusResponse)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetPaymentInformation200Response
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with PaymentInitiationWithStatusResponse
        try {
            PaymentInitiationWithStatusResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PaymentInitiationWithStatusResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PeriodicPaymentInitiationWithStatusResponse
        try {
            PeriodicPaymentInitiationWithStatusResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PeriodicPaymentInitiationWithStatusResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with BulkPaymentInitiationWithStatusResponse
        try {
            BulkPaymentInitiationWithStatusResponse.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BulkPaymentInitiationWithStatusResponse failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for GetPaymentInformation200Response with oneOf schemas: BulkPaymentInitiationWithStatusResponse, PaymentInitiationWithStatusResponse, PeriodicPaymentInitiationWithStatusResponse. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of GetPaymentInformation200Response given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetPaymentInformation200Response
     * @throws IOException if the JSON string is invalid with respect to GetPaymentInformation200Response
     */
    public static GetPaymentInformation200Response fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetPaymentInformation200Response.class);
    }

    /**
     * Convert an instance of GetPaymentInformation200Response to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

