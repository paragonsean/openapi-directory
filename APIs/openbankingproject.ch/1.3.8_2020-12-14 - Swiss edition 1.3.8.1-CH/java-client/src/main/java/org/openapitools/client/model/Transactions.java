/*
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountReference16CH;
import org.openapitools.client.model.AdditionalInformationStructured;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.Balance;
import org.openapitools.client.model.EntryDetailsElement;
import org.openapitools.client.model.LinksTransactionDetails;
import org.openapitools.client.model.PurposeCode;
import org.openapitools.client.model.RemittanceInformationStructured;
import org.openapitools.client.model.ReportExchangeRate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transaction details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:56.314640-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transactions {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private LinksTransactionDetails links;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFORMATION = "additionalInformation";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFORMATION)
  private String additionalInformation;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFORMATION_STRUCTURED = "additionalInformationStructured";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFORMATION_STRUCTURED)
  private AdditionalInformationStructured additionalInformationStructured;

  public static final String SERIALIZED_NAME_BALANCE_AFTER_TRANSACTION = "balanceAfterTransaction";
  @SerializedName(SERIALIZED_NAME_BALANCE_AFTER_TRANSACTION)
  private Balance balanceAfterTransaction;

  public static final String SERIALIZED_NAME_BANK_TRANSACTION_CODE = "bankTransactionCode";
  @SerializedName(SERIALIZED_NAME_BANK_TRANSACTION_CODE)
  private String bankTransactionCode;

  public static final String SERIALIZED_NAME_BATCH_INDICATOR = "batchIndicator";
  @SerializedName(SERIALIZED_NAME_BATCH_INDICATOR)
  private Boolean batchIndicator;

  public static final String SERIALIZED_NAME_BATCH_NUMBER_OF_TRANSACTIONS = "batchNumberOfTransactions";
  @SerializedName(SERIALIZED_NAME_BATCH_NUMBER_OF_TRANSACTIONS)
  private Integer batchNumberOfTransactions;

  public static final String SERIALIZED_NAME_BOOKING_DATE = "bookingDate";
  @SerializedName(SERIALIZED_NAME_BOOKING_DATE)
  private LocalDate bookingDate;

  public static final String SERIALIZED_NAME_CHECK_ID = "checkId";
  @SerializedName(SERIALIZED_NAME_CHECK_ID)
  private String checkId;

  public static final String SERIALIZED_NAME_CREDITOR_ACCOUNT = "creditorAccount";
  @SerializedName(SERIALIZED_NAME_CREDITOR_ACCOUNT)
  private AccountReference16CH creditorAccount;

  public static final String SERIALIZED_NAME_CREDITOR_AGENT = "creditorAgent";
  @SerializedName(SERIALIZED_NAME_CREDITOR_AGENT)
  private String creditorAgent;

  public static final String SERIALIZED_NAME_CREDITOR_ID = "creditorId";
  @SerializedName(SERIALIZED_NAME_CREDITOR_ID)
  private String creditorId;

  public static final String SERIALIZED_NAME_CREDITOR_NAME = "creditorName";
  @SerializedName(SERIALIZED_NAME_CREDITOR_NAME)
  private String creditorName;

  public static final String SERIALIZED_NAME_CURRENCY_EXCHANGE = "currencyExchange";
  @SerializedName(SERIALIZED_NAME_CURRENCY_EXCHANGE)
  private List<ReportExchangeRate> currencyExchange = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEBTOR_ACCOUNT = "debtorAccount";
  @SerializedName(SERIALIZED_NAME_DEBTOR_ACCOUNT)
  private AccountReference16CH debtorAccount;

  public static final String SERIALIZED_NAME_DEBTOR_AGENT = "debtorAgent";
  @SerializedName(SERIALIZED_NAME_DEBTOR_AGENT)
  private String debtorAgent;

  public static final String SERIALIZED_NAME_DEBTOR_NAME = "debtorName";
  @SerializedName(SERIALIZED_NAME_DEBTOR_NAME)
  private String debtorName;

  public static final String SERIALIZED_NAME_END_TO_END_ID = "endToEndId";
  @SerializedName(SERIALIZED_NAME_END_TO_END_ID)
  private String endToEndId;

  public static final String SERIALIZED_NAME_ENTRY_DETAILS = "entryDetails";
  @SerializedName(SERIALIZED_NAME_ENTRY_DETAILS)
  private List<EntryDetailsElement> entryDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTRY_REFERENCE = "entryReference";
  @SerializedName(SERIALIZED_NAME_ENTRY_REFERENCE)
  private String entryReference;

  public static final String SERIALIZED_NAME_MANDATE_ID = "mandateId";
  @SerializedName(SERIALIZED_NAME_MANDATE_ID)
  private String mandateId;

  public static final String SERIALIZED_NAME_PROPRIETARY_BANK_TRANSACTION_CODE = "proprietaryBankTransactionCode";
  @SerializedName(SERIALIZED_NAME_PROPRIETARY_BANK_TRANSACTION_CODE)
  private String proprietaryBankTransactionCode;

  public static final String SERIALIZED_NAME_PURPOSE_CODE = "purposeCode";
  @SerializedName(SERIALIZED_NAME_PURPOSE_CODE)
  private PurposeCode purposeCode;

  public static final String SERIALIZED_NAME_REMITTANCE_INFORMATION_STRUCTURED = "remittanceInformationStructured";
  @SerializedName(SERIALIZED_NAME_REMITTANCE_INFORMATION_STRUCTURED)
  private String remittanceInformationStructured;

  public static final String SERIALIZED_NAME_REMITTANCE_INFORMATION_STRUCTURED_ARRAY = "remittanceInformationStructuredArray";
  @SerializedName(SERIALIZED_NAME_REMITTANCE_INFORMATION_STRUCTURED_ARRAY)
  private List<RemittanceInformationStructured> remittanceInformationStructuredArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_REMITTANCE_INFORMATION_UNSTRUCTURED = "remittanceInformationUnstructured";
  @SerializedName(SERIALIZED_NAME_REMITTANCE_INFORMATION_UNSTRUCTURED)
  private String remittanceInformationUnstructured;

  public static final String SERIALIZED_NAME_REMITTANCE_INFORMATION_UNSTRUCTURED_ARRAY = "remittanceInformationUnstructuredArray";
  @SerializedName(SERIALIZED_NAME_REMITTANCE_INFORMATION_UNSTRUCTURED_ARRAY)
  private List<String> remittanceInformationUnstructuredArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT = "transactionAmount";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT)
  private Amount transactionAmount;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_ULTIMATE_CREDITOR = "ultimateCreditor";
  @SerializedName(SERIALIZED_NAME_ULTIMATE_CREDITOR)
  private String ultimateCreditor;

  public static final String SERIALIZED_NAME_ULTIMATE_DEBTOR = "ultimateDebtor";
  @SerializedName(SERIALIZED_NAME_ULTIMATE_DEBTOR)
  private String ultimateDebtor;

  public static final String SERIALIZED_NAME_VALUE_DATE = "valueDate";
  @SerializedName(SERIALIZED_NAME_VALUE_DATE)
  private LocalDate valueDate;

  public Transactions() {
  }

  public Transactions links(LinksTransactionDetails links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public LinksTransactionDetails getLinks() {
    return links;
  }

  public void setLinks(LinksTransactionDetails links) {
    this.links = links;
  }


  public Transactions additionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
    return this;
  }

  /**
   * Might be used by the ASPSP to transport additional transaction related information to the PSU 
   * @return additionalInformation
   */
  @javax.annotation.Nullable
  public String getAdditionalInformation() {
    return additionalInformation;
  }

  public void setAdditionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
  }


  public Transactions additionalInformationStructured(AdditionalInformationStructured additionalInformationStructured) {
    this.additionalInformationStructured = additionalInformationStructured;
    return this;
  }

  /**
   * Get additionalInformationStructured
   * @return additionalInformationStructured
   */
  @javax.annotation.Nullable
  public AdditionalInformationStructured getAdditionalInformationStructured() {
    return additionalInformationStructured;
  }

  public void setAdditionalInformationStructured(AdditionalInformationStructured additionalInformationStructured) {
    this.additionalInformationStructured = additionalInformationStructured;
  }


  public Transactions balanceAfterTransaction(Balance balanceAfterTransaction) {
    this.balanceAfterTransaction = balanceAfterTransaction;
    return this;
  }

  /**
   * Get balanceAfterTransaction
   * @return balanceAfterTransaction
   */
  @javax.annotation.Nullable
  public Balance getBalanceAfterTransaction() {
    return balanceAfterTransaction;
  }

  public void setBalanceAfterTransaction(Balance balanceAfterTransaction) {
    this.balanceAfterTransaction = balanceAfterTransaction;
  }


  public Transactions bankTransactionCode(String bankTransactionCode) {
    this.bankTransactionCode = bankTransactionCode;
    return this;
  }

  /**
   * Bank transaction code as used by the ASPSP and using the sub elements of this structured code defined by ISO 20022.  This code type is concatenating the three ISO20022 Codes   * Domain Code,   * Family Code, and   * SubFamiliy Code by hyphens, resulting in &#39;DomainCode&#39;-&#39;FamilyCode&#39;-&#39;SubFamilyCode&#39;. 
   * @return bankTransactionCode
   */
  @javax.annotation.Nullable
  public String getBankTransactionCode() {
    return bankTransactionCode;
  }

  public void setBankTransactionCode(String bankTransactionCode) {
    this.bankTransactionCode = bankTransactionCode;
  }


  public Transactions batchIndicator(Boolean batchIndicator) {
    this.batchIndicator = batchIndicator;
    return this;
  }

  /**
   * If this indicator equals true, then the related entry is a batch entry. 
   * @return batchIndicator
   */
  @javax.annotation.Nullable
  public Boolean getBatchIndicator() {
    return batchIndicator;
  }

  public void setBatchIndicator(Boolean batchIndicator) {
    this.batchIndicator = batchIndicator;
  }


  public Transactions batchNumberOfTransactions(Integer batchNumberOfTransactions) {
    this.batchNumberOfTransactions = batchNumberOfTransactions;
    return this;
  }

  /**
   * Shall be used if and only if the batchIndicator is contained and equals true. 
   * @return batchNumberOfTransactions
   */
  @javax.annotation.Nullable
  public Integer getBatchNumberOfTransactions() {
    return batchNumberOfTransactions;
  }

  public void setBatchNumberOfTransactions(Integer batchNumberOfTransactions) {
    this.batchNumberOfTransactions = batchNumberOfTransactions;
  }


  public Transactions bookingDate(LocalDate bookingDate) {
    this.bookingDate = bookingDate;
    return this;
  }

  /**
   * The date when an entry is posted to an account on the ASPSPs books. 
   * @return bookingDate
   */
  @javax.annotation.Nullable
  public LocalDate getBookingDate() {
    return bookingDate;
  }

  public void setBookingDate(LocalDate bookingDate) {
    this.bookingDate = bookingDate;
  }


  public Transactions checkId(String checkId) {
    this.checkId = checkId;
    return this;
  }

  /**
   * Identification of a Cheque.
   * @return checkId
   */
  @javax.annotation.Nullable
  public String getCheckId() {
    return checkId;
  }

  public void setCheckId(String checkId) {
    this.checkId = checkId;
  }


  public Transactions creditorAccount(AccountReference16CH creditorAccount) {
    this.creditorAccount = creditorAccount;
    return this;
  }

  /**
   * Get creditorAccount
   * @return creditorAccount
   */
  @javax.annotation.Nullable
  public AccountReference16CH getCreditorAccount() {
    return creditorAccount;
  }

  public void setCreditorAccount(AccountReference16CH creditorAccount) {
    this.creditorAccount = creditorAccount;
  }


  public Transactions creditorAgent(String creditorAgent) {
    this.creditorAgent = creditorAgent;
    return this;
  }

  /**
   * BICFI 
   * @return creditorAgent
   */
  @javax.annotation.Nullable
  public String getCreditorAgent() {
    return creditorAgent;
  }

  public void setCreditorAgent(String creditorAgent) {
    this.creditorAgent = creditorAgent;
  }


  public Transactions creditorId(String creditorId) {
    this.creditorId = creditorId;
    return this;
  }

  /**
   * Identification of Creditors, e.g. a SEPA Creditor ID.
   * @return creditorId
   */
  @javax.annotation.Nullable
  public String getCreditorId() {
    return creditorId;
  }

  public void setCreditorId(String creditorId) {
    this.creditorId = creditorId;
  }


  public Transactions creditorName(String creditorName) {
    this.creditorName = creditorName;
    return this;
  }

  /**
   * Creditor name.
   * @return creditorName
   */
  @javax.annotation.Nullable
  public String getCreditorName() {
    return creditorName;
  }

  public void setCreditorName(String creditorName) {
    this.creditorName = creditorName;
  }


  public Transactions currencyExchange(List<ReportExchangeRate> currencyExchange) {
    this.currencyExchange = currencyExchange;
    return this;
  }

  public Transactions addCurrencyExchangeItem(ReportExchangeRate currencyExchangeItem) {
    if (this.currencyExchange == null) {
      this.currencyExchange = new ArrayList<>();
    }
    this.currencyExchange.add(currencyExchangeItem);
    return this;
  }

  /**
   * Array of exchange rates.
   * @return currencyExchange
   */
  @javax.annotation.Nullable
  public List<ReportExchangeRate> getCurrencyExchange() {
    return currencyExchange;
  }

  public void setCurrencyExchange(List<ReportExchangeRate> currencyExchange) {
    this.currencyExchange = currencyExchange;
  }


  public Transactions debtorAccount(AccountReference16CH debtorAccount) {
    this.debtorAccount = debtorAccount;
    return this;
  }

  /**
   * Get debtorAccount
   * @return debtorAccount
   */
  @javax.annotation.Nullable
  public AccountReference16CH getDebtorAccount() {
    return debtorAccount;
  }

  public void setDebtorAccount(AccountReference16CH debtorAccount) {
    this.debtorAccount = debtorAccount;
  }


  public Transactions debtorAgent(String debtorAgent) {
    this.debtorAgent = debtorAgent;
    return this;
  }

  /**
   * BICFI 
   * @return debtorAgent
   */
  @javax.annotation.Nullable
  public String getDebtorAgent() {
    return debtorAgent;
  }

  public void setDebtorAgent(String debtorAgent) {
    this.debtorAgent = debtorAgent;
  }


  public Transactions debtorName(String debtorName) {
    this.debtorName = debtorName;
    return this;
  }

  /**
   * Debtor name.
   * @return debtorName
   */
  @javax.annotation.Nullable
  public String getDebtorName() {
    return debtorName;
  }

  public void setDebtorName(String debtorName) {
    this.debtorName = debtorName;
  }


  public Transactions endToEndId(String endToEndId) {
    this.endToEndId = endToEndId;
    return this;
  }

  /**
   * Unique end to end identity.
   * @return endToEndId
   */
  @javax.annotation.Nullable
  public String getEndToEndId() {
    return endToEndId;
  }

  public void setEndToEndId(String endToEndId) {
    this.endToEndId = endToEndId;
  }


  public Transactions entryDetails(List<EntryDetailsElement> entryDetails) {
    this.entryDetails = entryDetails;
    return this;
  }

  public Transactions addEntryDetailsItem(EntryDetailsElement entryDetailsItem) {
    if (this.entryDetails == null) {
      this.entryDetails = new ArrayList<>();
    }
    this.entryDetails.add(entryDetailsItem);
    return this;
  }

  /**
   * Might be used by the ASPSP to transport details about transactions within a batch. 
   * @return entryDetails
   */
  @javax.annotation.Nullable
  public List<EntryDetailsElement> getEntryDetails() {
    return entryDetails;
  }

  public void setEntryDetails(List<EntryDetailsElement> entryDetails) {
    this.entryDetails = entryDetails;
  }


  public Transactions entryReference(String entryReference) {
    this.entryReference = entryReference;
    return this;
  }

  /**
   * Is the identification of the transaction as used e.g. for reference for deltafunction on application level. The same identification as for example used within camt.05x messages. 
   * @return entryReference
   */
  @javax.annotation.Nullable
  public String getEntryReference() {
    return entryReference;
  }

  public void setEntryReference(String entryReference) {
    this.entryReference = entryReference;
  }


  public Transactions mandateId(String mandateId) {
    this.mandateId = mandateId;
    return this;
  }

  /**
   * Identification of Mandates, e.g. a SEPA Mandate ID.
   * @return mandateId
   */
  @javax.annotation.Nullable
  public String getMandateId() {
    return mandateId;
  }

  public void setMandateId(String mandateId) {
    this.mandateId = mandateId;
  }


  public Transactions proprietaryBankTransactionCode(String proprietaryBankTransactionCode) {
    this.proprietaryBankTransactionCode = proprietaryBankTransactionCode;
    return this;
  }

  /**
   * Proprietary bank transaction code as used within a community or within an ASPSP e.g. for MT94x based transaction reports. 
   * @return proprietaryBankTransactionCode
   */
  @javax.annotation.Nullable
  public String getProprietaryBankTransactionCode() {
    return proprietaryBankTransactionCode;
  }

  public void setProprietaryBankTransactionCode(String proprietaryBankTransactionCode) {
    this.proprietaryBankTransactionCode = proprietaryBankTransactionCode;
  }


  public Transactions purposeCode(PurposeCode purposeCode) {
    this.purposeCode = purposeCode;
    return this;
  }

  /**
   * Get purposeCode
   * @return purposeCode
   */
  @javax.annotation.Nullable
  public PurposeCode getPurposeCode() {
    return purposeCode;
  }

  public void setPurposeCode(PurposeCode purposeCode) {
    this.purposeCode = purposeCode;
  }


  public Transactions remittanceInformationStructured(String remittanceInformationStructured) {
    this.remittanceInformationStructured = remittanceInformationStructured;
    return this;
  }

  /**
   * Structured remittance information Max 
   * @return remittanceInformationStructured
   */
  @javax.annotation.Nullable
  public String getRemittanceInformationStructured() {
    return remittanceInformationStructured;
  }

  public void setRemittanceInformationStructured(String remittanceInformationStructured) {
    this.remittanceInformationStructured = remittanceInformationStructured;
  }


  public Transactions remittanceInformationStructuredArray(List<RemittanceInformationStructured> remittanceInformationStructuredArray) {
    this.remittanceInformationStructuredArray = remittanceInformationStructuredArray;
    return this;
  }

  public Transactions addRemittanceInformationStructuredArrayItem(RemittanceInformationStructured remittanceInformationStructuredArrayItem) {
    if (this.remittanceInformationStructuredArray == null) {
      this.remittanceInformationStructuredArray = new ArrayList<>();
    }
    this.remittanceInformationStructuredArray.add(remittanceInformationStructuredArrayItem);
    return this;
  }

  /**
   * Array of structured remittance information. 
   * @return remittanceInformationStructuredArray
   */
  @javax.annotation.Nullable
  public List<RemittanceInformationStructured> getRemittanceInformationStructuredArray() {
    return remittanceInformationStructuredArray;
  }

  public void setRemittanceInformationStructuredArray(List<RemittanceInformationStructured> remittanceInformationStructuredArray) {
    this.remittanceInformationStructuredArray = remittanceInformationStructuredArray;
  }


  public Transactions remittanceInformationUnstructured(String remittanceInformationUnstructured) {
    this.remittanceInformationUnstructured = remittanceInformationUnstructured;
    return this;
  }

  /**
   * Unstructured remittance information. 
   * @return remittanceInformationUnstructured
   */
  @javax.annotation.Nullable
  public String getRemittanceInformationUnstructured() {
    return remittanceInformationUnstructured;
  }

  public void setRemittanceInformationUnstructured(String remittanceInformationUnstructured) {
    this.remittanceInformationUnstructured = remittanceInformationUnstructured;
  }


  public Transactions remittanceInformationUnstructuredArray(List<String> remittanceInformationUnstructuredArray) {
    this.remittanceInformationUnstructuredArray = remittanceInformationUnstructuredArray;
    return this;
  }

  public Transactions addRemittanceInformationUnstructuredArrayItem(String remittanceInformationUnstructuredArrayItem) {
    if (this.remittanceInformationUnstructuredArray == null) {
      this.remittanceInformationUnstructuredArray = new ArrayList<>();
    }
    this.remittanceInformationUnstructuredArray.add(remittanceInformationUnstructuredArrayItem);
    return this;
  }

  /**
   * Array of unstructured remittance information. 
   * @return remittanceInformationUnstructuredArray
   */
  @javax.annotation.Nullable
  public List<String> getRemittanceInformationUnstructuredArray() {
    return remittanceInformationUnstructuredArray;
  }

  public void setRemittanceInformationUnstructuredArray(List<String> remittanceInformationUnstructuredArray) {
    this.remittanceInformationUnstructuredArray = remittanceInformationUnstructuredArray;
  }


  public Transactions transactionAmount(Amount transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

  /**
   * Get transactionAmount
   * @return transactionAmount
   */
  @javax.annotation.Nonnull
  public Amount getTransactionAmount() {
    return transactionAmount;
  }

  public void setTransactionAmount(Amount transactionAmount) {
    this.transactionAmount = transactionAmount;
  }


  public Transactions transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * This identification is given by the attribute transactionId of the corresponding entry of a transaction list. 
   * @return transactionId
   */
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public Transactions ultimateCreditor(String ultimateCreditor) {
    this.ultimateCreditor = ultimateCreditor;
    return this;
  }

  /**
   * Ultimate creditor.
   * @return ultimateCreditor
   */
  @javax.annotation.Nullable
  public String getUltimateCreditor() {
    return ultimateCreditor;
  }

  public void setUltimateCreditor(String ultimateCreditor) {
    this.ultimateCreditor = ultimateCreditor;
  }


  public Transactions ultimateDebtor(String ultimateDebtor) {
    this.ultimateDebtor = ultimateDebtor;
    return this;
  }

  /**
   * Ultimate debtor.
   * @return ultimateDebtor
   */
  @javax.annotation.Nullable
  public String getUltimateDebtor() {
    return ultimateDebtor;
  }

  public void setUltimateDebtor(String ultimateDebtor) {
    this.ultimateDebtor = ultimateDebtor;
  }


  public Transactions valueDate(LocalDate valueDate) {
    this.valueDate = valueDate;
    return this;
  }

  /**
   * The Date at which assets become available to the account owner in case of a credit.
   * @return valueDate
   */
  @javax.annotation.Nullable
  public LocalDate getValueDate() {
    return valueDate;
  }

  public void setValueDate(LocalDate valueDate) {
    this.valueDate = valueDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transactions transactions = (Transactions) o;
    return Objects.equals(this.links, transactions.links) &&
        Objects.equals(this.additionalInformation, transactions.additionalInformation) &&
        Objects.equals(this.additionalInformationStructured, transactions.additionalInformationStructured) &&
        Objects.equals(this.balanceAfterTransaction, transactions.balanceAfterTransaction) &&
        Objects.equals(this.bankTransactionCode, transactions.bankTransactionCode) &&
        Objects.equals(this.batchIndicator, transactions.batchIndicator) &&
        Objects.equals(this.batchNumberOfTransactions, transactions.batchNumberOfTransactions) &&
        Objects.equals(this.bookingDate, transactions.bookingDate) &&
        Objects.equals(this.checkId, transactions.checkId) &&
        Objects.equals(this.creditorAccount, transactions.creditorAccount) &&
        Objects.equals(this.creditorAgent, transactions.creditorAgent) &&
        Objects.equals(this.creditorId, transactions.creditorId) &&
        Objects.equals(this.creditorName, transactions.creditorName) &&
        Objects.equals(this.currencyExchange, transactions.currencyExchange) &&
        Objects.equals(this.debtorAccount, transactions.debtorAccount) &&
        Objects.equals(this.debtorAgent, transactions.debtorAgent) &&
        Objects.equals(this.debtorName, transactions.debtorName) &&
        Objects.equals(this.endToEndId, transactions.endToEndId) &&
        Objects.equals(this.entryDetails, transactions.entryDetails) &&
        Objects.equals(this.entryReference, transactions.entryReference) &&
        Objects.equals(this.mandateId, transactions.mandateId) &&
        Objects.equals(this.proprietaryBankTransactionCode, transactions.proprietaryBankTransactionCode) &&
        Objects.equals(this.purposeCode, transactions.purposeCode) &&
        Objects.equals(this.remittanceInformationStructured, transactions.remittanceInformationStructured) &&
        Objects.equals(this.remittanceInformationStructuredArray, transactions.remittanceInformationStructuredArray) &&
        Objects.equals(this.remittanceInformationUnstructured, transactions.remittanceInformationUnstructured) &&
        Objects.equals(this.remittanceInformationUnstructuredArray, transactions.remittanceInformationUnstructuredArray) &&
        Objects.equals(this.transactionAmount, transactions.transactionAmount) &&
        Objects.equals(this.transactionId, transactions.transactionId) &&
        Objects.equals(this.ultimateCreditor, transactions.ultimateCreditor) &&
        Objects.equals(this.ultimateDebtor, transactions.ultimateDebtor) &&
        Objects.equals(this.valueDate, transactions.valueDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, additionalInformation, additionalInformationStructured, balanceAfterTransaction, bankTransactionCode, batchIndicator, batchNumberOfTransactions, bookingDate, checkId, creditorAccount, creditorAgent, creditorId, creditorName, currencyExchange, debtorAccount, debtorAgent, debtorName, endToEndId, entryDetails, entryReference, mandateId, proprietaryBankTransactionCode, purposeCode, remittanceInformationStructured, remittanceInformationStructuredArray, remittanceInformationUnstructured, remittanceInformationUnstructuredArray, transactionAmount, transactionId, ultimateCreditor, ultimateDebtor, valueDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transactions {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    additionalInformationStructured: ").append(toIndentedString(additionalInformationStructured)).append("\n");
    sb.append("    balanceAfterTransaction: ").append(toIndentedString(balanceAfterTransaction)).append("\n");
    sb.append("    bankTransactionCode: ").append(toIndentedString(bankTransactionCode)).append("\n");
    sb.append("    batchIndicator: ").append(toIndentedString(batchIndicator)).append("\n");
    sb.append("    batchNumberOfTransactions: ").append(toIndentedString(batchNumberOfTransactions)).append("\n");
    sb.append("    bookingDate: ").append(toIndentedString(bookingDate)).append("\n");
    sb.append("    checkId: ").append(toIndentedString(checkId)).append("\n");
    sb.append("    creditorAccount: ").append(toIndentedString(creditorAccount)).append("\n");
    sb.append("    creditorAgent: ").append(toIndentedString(creditorAgent)).append("\n");
    sb.append("    creditorId: ").append(toIndentedString(creditorId)).append("\n");
    sb.append("    creditorName: ").append(toIndentedString(creditorName)).append("\n");
    sb.append("    currencyExchange: ").append(toIndentedString(currencyExchange)).append("\n");
    sb.append("    debtorAccount: ").append(toIndentedString(debtorAccount)).append("\n");
    sb.append("    debtorAgent: ").append(toIndentedString(debtorAgent)).append("\n");
    sb.append("    debtorName: ").append(toIndentedString(debtorName)).append("\n");
    sb.append("    endToEndId: ").append(toIndentedString(endToEndId)).append("\n");
    sb.append("    entryDetails: ").append(toIndentedString(entryDetails)).append("\n");
    sb.append("    entryReference: ").append(toIndentedString(entryReference)).append("\n");
    sb.append("    mandateId: ").append(toIndentedString(mandateId)).append("\n");
    sb.append("    proprietaryBankTransactionCode: ").append(toIndentedString(proprietaryBankTransactionCode)).append("\n");
    sb.append("    purposeCode: ").append(toIndentedString(purposeCode)).append("\n");
    sb.append("    remittanceInformationStructured: ").append(toIndentedString(remittanceInformationStructured)).append("\n");
    sb.append("    remittanceInformationStructuredArray: ").append(toIndentedString(remittanceInformationStructuredArray)).append("\n");
    sb.append("    remittanceInformationUnstructured: ").append(toIndentedString(remittanceInformationUnstructured)).append("\n");
    sb.append("    remittanceInformationUnstructuredArray: ").append(toIndentedString(remittanceInformationUnstructuredArray)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    ultimateCreditor: ").append(toIndentedString(ultimateCreditor)).append("\n");
    sb.append("    ultimateDebtor: ").append(toIndentedString(ultimateDebtor)).append("\n");
    sb.append("    valueDate: ").append(toIndentedString(valueDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("additionalInformation");
    openapiFields.add("additionalInformationStructured");
    openapiFields.add("balanceAfterTransaction");
    openapiFields.add("bankTransactionCode");
    openapiFields.add("batchIndicator");
    openapiFields.add("batchNumberOfTransactions");
    openapiFields.add("bookingDate");
    openapiFields.add("checkId");
    openapiFields.add("creditorAccount");
    openapiFields.add("creditorAgent");
    openapiFields.add("creditorId");
    openapiFields.add("creditorName");
    openapiFields.add("currencyExchange");
    openapiFields.add("debtorAccount");
    openapiFields.add("debtorAgent");
    openapiFields.add("debtorName");
    openapiFields.add("endToEndId");
    openapiFields.add("entryDetails");
    openapiFields.add("entryReference");
    openapiFields.add("mandateId");
    openapiFields.add("proprietaryBankTransactionCode");
    openapiFields.add("purposeCode");
    openapiFields.add("remittanceInformationStructured");
    openapiFields.add("remittanceInformationStructuredArray");
    openapiFields.add("remittanceInformationUnstructured");
    openapiFields.add("remittanceInformationUnstructuredArray");
    openapiFields.add("transactionAmount");
    openapiFields.add("transactionId");
    openapiFields.add("ultimateCreditor");
    openapiFields.add("ultimateDebtor");
    openapiFields.add("valueDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transactionAmount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transactions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transactions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transactions is not found in the empty JSON string", Transactions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transactions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transactions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Transactions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalInformation") != null && !jsonObj.get("additionalInformation").isJsonNull()) && !jsonObj.get("additionalInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalInformation").toString()));
      }
      // validate the optional field `additionalInformationStructured`
      if (jsonObj.get("additionalInformationStructured") != null && !jsonObj.get("additionalInformationStructured").isJsonNull()) {
        AdditionalInformationStructured.validateJsonElement(jsonObj.get("additionalInformationStructured"));
      }
      // validate the optional field `balanceAfterTransaction`
      if (jsonObj.get("balanceAfterTransaction") != null && !jsonObj.get("balanceAfterTransaction").isJsonNull()) {
        Balance.validateJsonElement(jsonObj.get("balanceAfterTransaction"));
      }
      if ((jsonObj.get("bankTransactionCode") != null && !jsonObj.get("bankTransactionCode").isJsonNull()) && !jsonObj.get("bankTransactionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankTransactionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankTransactionCode").toString()));
      }
      if ((jsonObj.get("checkId") != null && !jsonObj.get("checkId").isJsonNull()) && !jsonObj.get("checkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkId").toString()));
      }
      // validate the optional field `creditorAccount`
      if (jsonObj.get("creditorAccount") != null && !jsonObj.get("creditorAccount").isJsonNull()) {
        AccountReference16CH.validateJsonElement(jsonObj.get("creditorAccount"));
      }
      if ((jsonObj.get("creditorAgent") != null && !jsonObj.get("creditorAgent").isJsonNull()) && !jsonObj.get("creditorAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorAgent").toString()));
      }
      if ((jsonObj.get("creditorId") != null && !jsonObj.get("creditorId").isJsonNull()) && !jsonObj.get("creditorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorId").toString()));
      }
      if ((jsonObj.get("creditorName") != null && !jsonObj.get("creditorName").isJsonNull()) && !jsonObj.get("creditorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditorName").toString()));
      }
      if (jsonObj.get("currencyExchange") != null && !jsonObj.get("currencyExchange").isJsonNull()) {
        JsonArray jsonArraycurrencyExchange = jsonObj.getAsJsonArray("currencyExchange");
        if (jsonArraycurrencyExchange != null) {
          // ensure the json data is an array
          if (!jsonObj.get("currencyExchange").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `currencyExchange` to be an array in the JSON string but got `%s`", jsonObj.get("currencyExchange").toString()));
          }

          // validate the optional field `currencyExchange` (array)
          for (int i = 0; i < jsonArraycurrencyExchange.size(); i++) {
            ReportExchangeRate.validateJsonElement(jsonArraycurrencyExchange.get(i));
          };
        }
      }
      // validate the optional field `debtorAccount`
      if (jsonObj.get("debtorAccount") != null && !jsonObj.get("debtorAccount").isJsonNull()) {
        AccountReference16CH.validateJsonElement(jsonObj.get("debtorAccount"));
      }
      if ((jsonObj.get("debtorAgent") != null && !jsonObj.get("debtorAgent").isJsonNull()) && !jsonObj.get("debtorAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorAgent").toString()));
      }
      if ((jsonObj.get("debtorName") != null && !jsonObj.get("debtorName").isJsonNull()) && !jsonObj.get("debtorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debtorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debtorName").toString()));
      }
      if ((jsonObj.get("endToEndId") != null && !jsonObj.get("endToEndId").isJsonNull()) && !jsonObj.get("endToEndId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endToEndId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endToEndId").toString()));
      }
      if (jsonObj.get("entryDetails") != null && !jsonObj.get("entryDetails").isJsonNull()) {
        JsonArray jsonArrayentryDetails = jsonObj.getAsJsonArray("entryDetails");
        if (jsonArrayentryDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entryDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entryDetails` to be an array in the JSON string but got `%s`", jsonObj.get("entryDetails").toString()));
          }

          // validate the optional field `entryDetails` (array)
          for (int i = 0; i < jsonArrayentryDetails.size(); i++) {
            EntryDetailsElement.validateJsonElement(jsonArrayentryDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("entryReference") != null && !jsonObj.get("entryReference").isJsonNull()) && !jsonObj.get("entryReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entryReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entryReference").toString()));
      }
      if ((jsonObj.get("mandateId") != null && !jsonObj.get("mandateId").isJsonNull()) && !jsonObj.get("mandateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mandateId").toString()));
      }
      if ((jsonObj.get("proprietaryBankTransactionCode") != null && !jsonObj.get("proprietaryBankTransactionCode").isJsonNull()) && !jsonObj.get("proprietaryBankTransactionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proprietaryBankTransactionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proprietaryBankTransactionCode").toString()));
      }
      // validate the optional field `purposeCode`
      if (jsonObj.get("purposeCode") != null && !jsonObj.get("purposeCode").isJsonNull()) {
        PurposeCode.validateJsonElement(jsonObj.get("purposeCode"));
      }
      if ((jsonObj.get("remittanceInformationStructured") != null && !jsonObj.get("remittanceInformationStructured").isJsonNull()) && !jsonObj.get("remittanceInformationStructured").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remittanceInformationStructured` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remittanceInformationStructured").toString()));
      }
      if (jsonObj.get("remittanceInformationStructuredArray") != null && !jsonObj.get("remittanceInformationStructuredArray").isJsonNull()) {
        JsonArray jsonArrayremittanceInformationStructuredArray = jsonObj.getAsJsonArray("remittanceInformationStructuredArray");
        if (jsonArrayremittanceInformationStructuredArray != null) {
          // ensure the json data is an array
          if (!jsonObj.get("remittanceInformationStructuredArray").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `remittanceInformationStructuredArray` to be an array in the JSON string but got `%s`", jsonObj.get("remittanceInformationStructuredArray").toString()));
          }

          // validate the optional field `remittanceInformationStructuredArray` (array)
          for (int i = 0; i < jsonArrayremittanceInformationStructuredArray.size(); i++) {
            RemittanceInformationStructured.validateJsonElement(jsonArrayremittanceInformationStructuredArray.get(i));
          };
        }
      }
      if ((jsonObj.get("remittanceInformationUnstructured") != null && !jsonObj.get("remittanceInformationUnstructured").isJsonNull()) && !jsonObj.get("remittanceInformationUnstructured").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remittanceInformationUnstructured` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remittanceInformationUnstructured").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("remittanceInformationUnstructuredArray") != null && !jsonObj.get("remittanceInformationUnstructuredArray").isJsonNull() && !jsonObj.get("remittanceInformationUnstructuredArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `remittanceInformationUnstructuredArray` to be an array in the JSON string but got `%s`", jsonObj.get("remittanceInformationUnstructuredArray").toString()));
      }
      // validate the required field `transactionAmount`
      Amount.validateJsonElement(jsonObj.get("transactionAmount"));
      if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if ((jsonObj.get("ultimateCreditor") != null && !jsonObj.get("ultimateCreditor").isJsonNull()) && !jsonObj.get("ultimateCreditor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ultimateCreditor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ultimateCreditor").toString()));
      }
      if ((jsonObj.get("ultimateDebtor") != null && !jsonObj.get("ultimateDebtor").isJsonNull()) && !jsonObj.get("ultimateDebtor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ultimateDebtor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ultimateDebtor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transactions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transactions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transactions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transactions.class));

       return (TypeAdapter<T>) new TypeAdapter<Transactions>() {
           @Override
           public void write(JsonWriter out, Transactions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transactions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transactions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transactions
   * @throws IOException if the JSON string is invalid with respect to Transactions
   */
  public static Transactions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transactions.class);
  }

  /**
   * Convert an instance of Transactions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

