/*
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Authorisations;
import org.openapitools.client.model.Error400NGPIS;
import org.openapitools.client.model.Error400PIS;
import org.openapitools.client.model.Error401NGPIS;
import org.openapitools.client.model.Error401PIS;
import org.openapitools.client.model.Error403NGPIS;
import org.openapitools.client.model.Error403PIS;
import org.openapitools.client.model.Error404NGPIS;
import org.openapitools.client.model.Error404PIS;
import org.openapitools.client.model.Error405NGPIS;
import org.openapitools.client.model.Error405NGPISCANC;
import org.openapitools.client.model.Error405PIS;
import org.openapitools.client.model.Error405PISCANC;
import org.openapitools.client.model.Error409NGPIS;
import org.openapitools.client.model.Error409PIS;
import org.openapitools.client.model.GetPaymentInformation200Response;
import org.openapitools.client.model.InitiatePaymentRequest;
import org.openapitools.client.model.InitiatePaymentRequest1;
import org.openapitools.client.model.PaymentInitationRequestResponse201;
import org.openapitools.client.model.PaymentInitiationCancelResponse202;
import org.openapitools.client.model.PaymentInitiationStatusResponse200Json;
import org.openapitools.client.model.PeriodicPaymentInitiationMultipartBody;
import org.openapitools.client.model.ScaStatusResponse;
import org.openapitools.client.model.StartConsentAuthorisationRequest;
import org.openapitools.client.model.StartScaprocessResponse;
import java.net.URI;
import org.openapitools.client.model.UpdateConsentsPsuData200Response;
import org.openapitools.client.model.UpdateConsentsPsuDataRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentInitiationServicePisApi
 */
@Disabled
public class PaymentInitiationServicePisApiTest {

    private final PaymentInitiationServicePisApi api = new PaymentInitiationServicePisApi();

    /**
     * Payment cancellation request
     *
     * This method initiates the cancellation of a payment.  Depending on the payment-service, the payment-product and the ASPSP&#39;s implementation,  this TPP call might be sufficient to cancel a payment.  If an authorisation of the payment cancellation is mandated by the ASPSP,  a corresponding hyperlink will be contained in the response message.  Cancels the addressed payment with resource identification paymentId if applicable to the payment-service, payment-product and received in product related timelines (e.g. before end of business day for scheduled payments of the last business day before the scheduled execution day).   The response to this DELETE command will tell the TPP whether the   * access method was rejected,   * access method was successful, or   * access method is generally applicable, but further authorisation processes are needed. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelPaymentTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        String xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        Boolean tpPRedirectPreferred = null;
        URI tpPNokRedirectURI = null;
        URI tpPRedirectURI = null;
        Boolean tpPExplicitAuthorisationPreferred = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUGeoLocation = null;
        PaymentInitiationCancelResponse202 response = api.cancelPayment(paymentService, paymentProduct, paymentId, xRequestID, digest, signature, tpPSignatureCertificate, tpPRedirectPreferred, tpPNokRedirectURI, tpPRedirectURI, tpPExplicitAuthorisationPreferred, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);
        // TODO: test validations
    }

    /**
     * Read the SCA status of the payment cancellation&#39;s authorisation
     *
     * This method returns the SCA status of a payment initiation&#39;s authorisation sub-resource. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentCancellationScaStatusTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        String authorisationId = null;
        String xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUGeoLocation = null;
        ScaStatusResponse response = api.getPaymentCancellationScaStatus(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);
        // TODO: test validations
    }

    /**
     * Get payment information
     *
     * Returns the content of a payment object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentInformationTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        String xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUGeoLocation = null;
        GetPaymentInformation200Response response = api.getPaymentInformation(paymentService, paymentProduct, paymentId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);
        // TODO: test validations
    }

    /**
     * Get payment initiation authorisation sub-resources request
     *
     * Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentInitiationAuthorisationTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        String xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUGeoLocation = null;
        Authorisations response = api.getPaymentInitiationAuthorisation(paymentService, paymentProduct, paymentId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);
        // TODO: test validations
    }

    /**
     * Will deliver an array of resource identifications to all generated cancellation authorisation sub-resources
     *
     * Retrieve a list of all created cancellation authorisation sub-resources. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentInitiationCancellationAuthorisationInformationTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        String xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUGeoLocation = null;
        Authorisations response = api.getPaymentInitiationCancellationAuthorisationInformation(paymentService, paymentProduct, paymentId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);
        // TODO: test validations
    }

    /**
     * Read the SCA status of the payment authorisation
     *
     * This method returns the SCA status of a payment initiation&#39;s authorisation sub-resource. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentInitiationScaStatusTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        String authorisationId = null;
        String xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUGeoLocation = null;
        ScaStatusResponse response = api.getPaymentInitiationScaStatus(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);
        // TODO: test validations
    }

    /**
     * Payment initiation status request
     *
     * Check the transaction status of a payment initiation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentInitiationStatusTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        String xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUGeoLocation = null;
        PaymentInitiationStatusResponse200Json response = api.getPaymentInitiationStatus(paymentService, paymentProduct, paymentId, xRequestID, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);
        // TODO: test validations
    }

    /**
     * Payment initiation request
     *
     * This method is used to initiate a payment at the ASPSP.  ## Variants of payment initiation requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***domestic-swiss-credit-transfers-isr***     - ***domestic-swiss-credit-transfers***     - ***domestic-swiss-credit-transfers-qr***     - ***domestic-swiss-foreign-credit-transfers***     - ***swiss-sepa-credit-transfers***     - ***swiss-cross-border-credit-transfers***   - Payment products with payment information in *SIX pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-cross-border-credit-transfers***     - ***pain.001-swiss-six-credit-transfers***  Furthermore the request body depends on the **payment-service**:   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment initiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.      In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:     Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}      with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.  This is the first step in the API to initiate the related recurring/periodic payment.  ## Single and mulitilevel SCA Processes  The payment initiation requests are independent from the need of one or multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like &#39;scaRedirect&#39; or &#39;scaOAuth&#39; cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the &#39;startAuthorisation&#39; link. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiatePaymentTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String xRequestID = null;
        String psUIPAddress = null;
        InitiatePaymentRequest initiatePaymentRequest = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String PSU_ID = null;
        String psUIDType = null;
        String psUCorporateID = null;
        String psUCorporateIDType = null;
        String consentID = null;
        Boolean tpPRedirectPreferred = null;
        URI tpPRedirectURI = null;
        URI tpPNokRedirectURI = null;
        Boolean tpPExplicitAuthorisationPreferred = null;
        Boolean tpPRejectionNoFundsPreferred = null;
        String tpPBrandLoggingInformation = null;
        String tpPNotificationURI = null;
        String tpPNotificationContentPreferred = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUGeoLocation = null;
        PaymentInitationRequestResponse201 response = api.initiatePayment(paymentService, paymentProduct, xRequestID, psUIPAddress, initiatePaymentRequest, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, consentID, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPExplicitAuthorisationPreferred, tpPRejectionNoFundsPreferred, tpPBrandLoggingInformation, tpPNotificationURI, tpPNotificationContentPreferred, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation);
        // TODO: test validations
    }

    /**
     * Start the authorisation process for a payment initiation
     *
     * Create an authorisation sub-resource and start the authorisation process. The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case of only one SCA process needed, since the related authorisation resource might be automatically created by the ASPSP after the submission of the payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding Payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentfication&#39;     * &#39;startAuthorisationWithPsuAuthentication&#39;     * &#39;startAuthorisationWithEncryptedPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding      Payment cancellation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startPaymentAuthorisationTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        String xRequestID = null;
        String PSU_ID = null;
        String psUIDType = null;
        String psUCorporateID = null;
        String psUCorporateIDType = null;
        Boolean tpPRedirectPreferred = null;
        URI tpPRedirectURI = null;
        URI tpPNokRedirectURI = null;
        String tpPNotificationURI = null;
        String tpPNotificationContentPreferred = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUGeoLocation = null;
        StartConsentAuthorisationRequest startConsentAuthorisationRequest = null;
        StartScaprocessResponse response = api.startPaymentAuthorisation(paymentService, paymentProduct, paymentId, xRequestID, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, digest, signature, tpPSignatureCertificate, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest);
        // TODO: test validations
    }

    /**
     * Start the authorisation process for the cancellation of the addressed payment
     *
     * Creates an authorisation sub-resource and start the authorisation process of the cancellation of the addressed payment. The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the cancellation-authorisation.  The ASPSP might make the usage of this access method unnecessary in case of only one SCA process needed, since the related authorisation resource might be automatically created by the ASPSP after the submission of the payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentfication&#39;     * &#39;startAuthorisationWithPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding      payment cancellation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startPaymentInitiationCancellationAuthorisationTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        String xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String PSU_ID = null;
        String psUIDType = null;
        String psUCorporateID = null;
        String psUCorporateIDType = null;
        Boolean tpPRedirectPreferred = null;
        URI tpPRedirectURI = null;
        URI tpPNokRedirectURI = null;
        String tpPNotificationURI = null;
        String tpPNotificationContentPreferred = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUGeoLocation = null;
        StartConsentAuthorisationRequest startConsentAuthorisationRequest = null;
        StartScaprocessResponse response = api.startPaymentInitiationCancellationAuthorisation(paymentService, paymentProduct, paymentId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, tpPRedirectPreferred, tpPRedirectURI, tpPNokRedirectURI, tpPNotificationURI, tpPNotificationContentPreferred, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, startConsentAuthorisationRequest);
        // TODO: test validations
    }

    /**
     * Update PSU data for payment initiation cancellation
     *
     * This method updates PSU data on the cancellation authorisation resource if needed.  It may authorise a cancellation of the payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of a cancellation authorisation within the payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU data request is only applicable for   * adding the PSU Identification, if not provided yet in the payment initiation request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA approach might depend on the chosen SCA method.  For that reason, the following possible update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU autorization method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaymentCancellationPsuDataTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        String authorisationId = null;
        String xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String PSU_ID = null;
        String psUIDType = null;
        String psUCorporateID = null;
        String psUCorporateIDType = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUGeoLocation = null;
        UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest = null;
        UpdateConsentsPsuData200Response response = api.updatePaymentCancellationPsuData(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest);
        // TODO: test validations
    }

    /**
     * Update PSU data for payment initiation
     *
     * This methods updates PSU data on the authorisation resource if needed. It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific update PSU data request is only applicable for   * adding the PSU identification, if not provided yet in the payment initiation request or the account information consent request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU autorization method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaymentPsuDataTest() throws ApiException {
        String paymentService = null;
        String paymentProduct = null;
        String paymentId = null;
        String authorisationId = null;
        String xRequestID = null;
        String digest = null;
        String signature = null;
        byte[] tpPSignatureCertificate = null;
        String PSU_ID = null;
        String psUIDType = null;
        String psUCorporateID = null;
        String psUCorporateIDType = null;
        String psUIPAddress = null;
        String psUIPPort = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUUserAgent = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUGeoLocation = null;
        UpdateConsentsPsuDataRequest updateConsentsPsuDataRequest = null;
        UpdateConsentsPsuData200Response response = api.updatePaymentPsuData(paymentService, paymentProduct, paymentId, authorisationId, xRequestID, digest, signature, tpPSignatureCertificate, PSU_ID, psUIDType, psUCorporateID, psUCorporateIDType, psUIPAddress, psUIPPort, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUUserAgent, psUHttpMethod, psUDeviceID, psUGeoLocation, updateConsentsPsuDataRequest);
        // TODO: test validations
    }

}
