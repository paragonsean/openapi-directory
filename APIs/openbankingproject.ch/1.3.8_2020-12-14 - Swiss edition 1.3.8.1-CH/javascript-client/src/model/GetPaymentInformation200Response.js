/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountReference16CH from './AccountReference16CH';
import Address from './Address';
import Amount from './Amount';
import BulkPaymentInitiationWithStatusResponse from './BulkPaymentInitiationWithStatusResponse';
import CreditorAgent7CH from './CreditorAgent7CH';
import DayOfExecution from './DayOfExecution';
import ExecutionRule from './ExecutionRule';
import FrequencyCode from './FrequencyCode';
import PaymentInitiationBulkElementJson from './PaymentInitiationBulkElementJson';
import PaymentInitiationWithStatusResponse from './PaymentInitiationWithStatusResponse';
import PeriodicPaymentInitiationWithStatusResponse from './PeriodicPaymentInitiationWithStatusResponse';
import PurposeCode from './PurposeCode';
import RemittanceInformationStructured from './RemittanceInformationStructured';
import TransactionStatus from './TransactionStatus';

/**
 * The GetPaymentInformation200Response model module.
 * @module model/GetPaymentInformation200Response
 * @version 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 */
class GetPaymentInformation200Response {
    /**
     * Constructs a new <code>GetPaymentInformation200Response</code>.
     * @alias module:model/GetPaymentInformation200Response
     * @param {(module:model/BulkPaymentInitiationWithStatusResponse|module:model/PaymentInitiationWithStatusResponse|module:model/PeriodicPaymentInitiationWithStatusResponse)} instance The actual instance to initialize GetPaymentInformation200Response.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "PaymentInitiationWithStatusResponse") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PaymentInitiationWithStatusResponse.validateJSON(instance); // throw an exception if no match
                // create PaymentInitiationWithStatusResponse from JS object
                this.actualInstance = PaymentInitiationWithStatusResponse.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PaymentInitiationWithStatusResponse
            errorMessages.push("Failed to construct PaymentInitiationWithStatusResponse: " + err)
        }

        try {
            if (typeof instance === "PeriodicPaymentInitiationWithStatusResponse") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PeriodicPaymentInitiationWithStatusResponse.validateJSON(instance); // throw an exception if no match
                // create PeriodicPaymentInitiationWithStatusResponse from JS object
                this.actualInstance = PeriodicPaymentInitiationWithStatusResponse.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PeriodicPaymentInitiationWithStatusResponse
            errorMessages.push("Failed to construct PeriodicPaymentInitiationWithStatusResponse: " + err)
        }

        try {
            if (typeof instance === "BulkPaymentInitiationWithStatusResponse") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                BulkPaymentInitiationWithStatusResponse.validateJSON(instance); // throw an exception if no match
                // create BulkPaymentInitiationWithStatusResponse from JS object
                this.actualInstance = BulkPaymentInitiationWithStatusResponse.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into BulkPaymentInitiationWithStatusResponse
            errorMessages.push("Failed to construct BulkPaymentInitiationWithStatusResponse: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `GetPaymentInformation200Response` with oneOf schemas BulkPaymentInitiationWithStatusResponse, PaymentInitiationWithStatusResponse, PeriodicPaymentInitiationWithStatusResponse. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `GetPaymentInformation200Response` with oneOf schemas BulkPaymentInitiationWithStatusResponse, PaymentInitiationWithStatusResponse, PeriodicPaymentInitiationWithStatusResponse. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>GetPaymentInformation200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetPaymentInformation200Response} obj Optional instance to populate.
     * @return {module:model/GetPaymentInformation200Response} The populated <code>GetPaymentInformation200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        return new GetPaymentInformation200Response(data);
    }

    /**
     * Gets the actual instance, which can be <code>BulkPaymentInitiationWithStatusResponse</code>, <code>PaymentInitiationWithStatusResponse</code>, <code>PeriodicPaymentInitiationWithStatusResponse</code>.
     * @return {(module:model/BulkPaymentInitiationWithStatusResponse|module:model/PaymentInitiationWithStatusResponse|module:model/PeriodicPaymentInitiationWithStatusResponse)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>BulkPaymentInitiationWithStatusResponse</code>, <code>PaymentInitiationWithStatusResponse</code>, <code>PeriodicPaymentInitiationWithStatusResponse</code>.
     * @param {(module:model/BulkPaymentInitiationWithStatusResponse|module:model/PaymentInitiationWithStatusResponse|module:model/PeriodicPaymentInitiationWithStatusResponse)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = GetPaymentInformation200Response.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of GetPaymentInformation200Response from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/GetPaymentInformation200Response} An instance of GetPaymentInformation200Response.
     */
    static fromJSON = function(json_string){
        return GetPaymentInformation200Response.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/AccountReference16CH} creditorAccount
 */
GetPaymentInformation200Response.prototype['creditorAccount'] = undefined;

/**
 * @member {module:model/Address} creditorAddress
 */
GetPaymentInformation200Response.prototype['creditorAddress'] = undefined;

/**
 * @member {module:model/CreditorAgent7CH} creditorAgent
 */
GetPaymentInformation200Response.prototype['creditorAgent'] = undefined;

/**
 * Creditor name.
 * @member {String} creditorName
 */
GetPaymentInformation200Response.prototype['creditorName'] = undefined;

/**
 * @member {module:model/AccountReference16CH} debtorAccount
 */
GetPaymentInformation200Response.prototype['debtorAccount'] = undefined;

/**
 * @member {String} endToEndIdentification
 */
GetPaymentInformation200Response.prototype['endToEndIdentification'] = undefined;

/**
 * @member {module:model/Amount} instructedAmount
 */
GetPaymentInformation200Response.prototype['instructedAmount'] = undefined;

/**
 * @member {module:model/PurposeCode} purposeCode
 */
GetPaymentInformation200Response.prototype['purposeCode'] = undefined;

/**
 * @member {module:model/RemittanceInformationStructured} remittanceInformationStructured
 */
GetPaymentInformation200Response.prototype['remittanceInformationStructured'] = undefined;

/**
 * Unstructured remittance information. 
 * @member {String} remittanceInformationUnstructured
 */
GetPaymentInformation200Response.prototype['remittanceInformationUnstructured'] = undefined;

/**
 * Array of unstructured remittance information. 
 * @member {Array.<String>} remittanceInformationUnstructuredArray
 */
GetPaymentInformation200Response.prototype['remittanceInformationUnstructuredArray'] = undefined;

/**
 * @member {Date} requestedExecutionDate
 */
GetPaymentInformation200Response.prototype['requestedExecutionDate'] = undefined;

/**
 * @member {Date} requestedExecutionTime
 */
GetPaymentInformation200Response.prototype['requestedExecutionTime'] = undefined;

/**
 * @member {module:model/TransactionStatus} transactionStatus
 */
GetPaymentInformation200Response.prototype['transactionStatus'] = undefined;

/**
 * Ultimate creditor.
 * @member {String} ultimateCreditor
 */
GetPaymentInformation200Response.prototype['ultimateCreditor'] = undefined;

/**
 * Ultimate debtor.
 * @member {String} ultimateDebtor
 */
GetPaymentInformation200Response.prototype['ultimateDebtor'] = undefined;

/**
 * @member {module:model/DayOfExecution} dayOfExecution
 */
GetPaymentInformation200Response.prototype['dayOfExecution'] = undefined;

/**
 * The last applicable day of execution. If not given, it is an infinite standing order. 
 * @member {Date} endDate
 */
GetPaymentInformation200Response.prototype['endDate'] = undefined;

/**
 * @member {module:model/ExecutionRule} executionRule
 */
GetPaymentInformation200Response.prototype['executionRule'] = undefined;

/**
 * @member {module:model/FrequencyCode} frequency
 */
GetPaymentInformation200Response.prototype['frequency'] = undefined;

/**
 * The first applicable day of execution starting from this date is the first payment. 
 * @member {Date} startDate
 */
GetPaymentInformation200Response.prototype['startDate'] = undefined;

/**
 * @member {Date} acceptorTransactionDateTime
 */
GetPaymentInformation200Response.prototype['acceptorTransactionDateTime'] = undefined;

/**
 * If this element equals 'true', the PSU prefers only one booking entry. If this element equals 'false', the PSU prefers individual booking of all contained individual transactions.  The ASPSP will follow this preference according to contracts agreed on with the PSU. 
 * @member {Boolean} batchBookingPreferred
 */
GetPaymentInformation200Response.prototype['batchBookingPreferred'] = undefined;

/**
 * @member {String} paymentInformationId
 */
GetPaymentInformation200Response.prototype['paymentInformationId'] = undefined;

/**
 * A list of generic JSON bodies payment initations for bulk payments via JSON.  Note: Some fields from single payments do not occcur in a bulk payment element 
 * @member {Array.<module:model/PaymentInitiationBulkElementJson>} payments
 */
GetPaymentInformation200Response.prototype['payments'] = undefined;


GetPaymentInformation200Response.OneOf = ["BulkPaymentInitiationWithStatusResponse", "PaymentInitiationWithStatusResponse", "PeriodicPaymentInitiationWithStatusResponse"];

export default GetPaymentInformation200Response;

