/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountReference16CH from './AccountReference16CH';
import Address from './Address';
import Amount from './Amount';
import ChargeBearer from './ChargeBearer';
import CreditorAgent7CH from './CreditorAgent7CH';
import DayOfExecution from './DayOfExecution';
import DebtorAgent7CH from './DebtorAgent7CH';
import ExchangeRateInformation1 from './ExchangeRateInformation1';
import ExecutionRule from './ExecutionRule';
import ExternalServiceLevel1Code from './ExternalServiceLevel1Code';
import FrequencyCode from './FrequencyCode';
import PurposeCode from './PurposeCode';
import RemittanceInformationStructured from './RemittanceInformationStructured';

/**
 * The PeriodicPaymentInitiationJson model module.
 * @module model/PeriodicPaymentInitiationJson
 * @version 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 */
class PeriodicPaymentInitiationJson {
    /**
     * Constructs a new <code>PeriodicPaymentInitiationJson</code>.
     * Generic Body for a periodic payment initation via JSON.  This generic JSON body can be used to represent valid periodic payment initiations for the following JSON based payment product, which where defined in the Implementation Guidelines:    * domestic-swiss-credit-transfers-isr   * domestic-swiss-credit-transfers   * domestic-swiss-credit-transfers-qr   * domestic-swiss-foreign-credit-transfers   * swiss-sepa-credit-transfers   * swiss-cross-border-credit-transfers  For the convenience of the implementer additional which are already predefinded in the Implementation Guidelines are included (but commented in source code), such that an ASPSP may add them easily.  Take care: Since the format is intended to fit for all payment products there are additional conditions which are NOT covered by this specification. Please check the SIX Swiss Payment Standards implementation guidelines for details.   The following data element are depending on the actual payment product available (in source code):  &lt;table style&#x3D;\&quot;width:100%\&quot;&gt; &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;Payment Type 1: ISR&lt;/td&gt;&lt;td&gt;Payment Type 3: IBAN/postal account and IID/BIC&lt;/td&gt;&lt;td&gt;Payment Type 3: QR-bill&lt;/td&gt;&lt;td&gt;Payment Type 4: Foreign currency&lt;/td&gt;&lt;td&gt;Payment Type 5: Foreign SEPA&lt;/td&gt;&lt;td&gt;Payment Type 6: Foreign&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;CH Domestic Data Element&lt;/td&gt;&lt;td&gt;domestic-swiss-credit-transfers-isr&lt;/td&gt;&lt;td&gt;domestic-swiss-credit-transfers&lt;/td&gt;&lt;td&gt;domestic-swiss-credit-transfers-qr&lt;/td&gt;&lt;td&gt;domestic-swiss-foreign-credit-transfers&lt;/td&gt;&lt;td&gt;swiss-sepa-credit-transfers&lt;/td&gt;&lt;td&gt;swiss-cross-border-credit-transfers&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;endToEndIdentification&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;instructionIdentification&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;debtorAccount (incl. type)&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;debtorAgent&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;debtorName&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;debtorId&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;td&gt;optional 3)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;ultimateDebtor&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;instructedAmount (incl. currency)&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;equivalentAmount&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;transactionCurrency&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;td&gt;dependent 1)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;exchangeRateInformation&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorAccount&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory 8)&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorAgent&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent 4)&lt;/td&gt;&lt;td&gt;dependent 4)&lt;/td&gt;&lt;td&gt;dependent 4)&lt;/td&gt;&lt;td&gt;dependent 4)&lt;/td&gt;&lt;td&gt;dependent 4)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorAgentName&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent 5)&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent 5)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorName&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorId&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorAddress&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;creditorNameAndAddress&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;dependent&lt;/td&gt;&lt;td&gt;dependent&lt;/td&gt;&lt;td&gt;dependent&lt;/td&gt;&lt;td&gt;dependent&lt;/td&gt;&lt;td&gt;dependent&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;ultimateCreditor&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;n.a. (for future use)&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;chargeBearer&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;purposeCode&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;serviceLevel&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;remittanceInformationUnstructured&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;remittanceInformationUnstructuredArray&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;remittanceInformationStructured&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;mandatory 6)&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;remittanceInformationStructuredArray&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;requestedExecutionDate&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;requestedExecutionTime&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;intermediaryAgent&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;optional 2)&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;startDate&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;endDate&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;executionRule&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;frequency&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;td&gt;mandatory&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;dayOfExecution&lt;/td&gt;&lt;td&gt;conditional&lt;/td&gt;&lt;td&gt;conditional&lt;/td&gt;&lt;td&gt;conditional&lt;/td&gt;&lt;td&gt;conditional&lt;/td&gt;&lt;td&gt;conditional&lt;/td&gt;&lt;td&gt;conditional&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;  Footnotes from the table: 1) This element may only be used by agreement with the instructed financial institution. 2) The element may only be used in consultation with the financial institution commissioned. 3) The element is currently ignored by financial institutions. 4) Dependence on creditorAccount, see SIX Swiss Payments Standards implementation guidelines. 5) Type 4(V3), 6(V2, V3): Must be present. Type 4(V2): May be present. Other species: May not be present. 6) QR-reference, creditor reference or IPI reference 7) currencyOfTransfer is a subfield of equivalentAmount and may only be used if equivalentAmount is used instead of instructedAmount. 8) QR-IBAN (CH/LI) must be present.  IMPORTANT: In this API definition the following holds:   *  All data elements mentioned above are defined, but some of them are commented,     i.e. they are only visible in the source code and can be used by uncommenting them.   * Data elements which are mandatory in the table above for all payment products     are set to be mandatory in this specification.   * Data elements which are indicated in the table above as n.a. for all payment products are commented in the source code.   * Data elements which are indicated to be option, conditional or mandatory for at least one payment product     in the table above are set to be optional in the s specification except the case where all are definde to be mandatory.   * Data element which are inticated to be n.a. can be used by the ASPS if needed.     In this case uncomment tthe the relatetd lines in the source code.   * If one uses this data types for some payment products he has to ensure that the used data type is     valid according to the underlying payment product, e.g. by some appropriate validations. 
     * @alias module:model/PeriodicPaymentInitiationJson
     * @param creditorAccount {module:model/AccountReference16CH} 
     * @param creditorName {String} Creditor name.
     * @param debtorAccount {module:model/AccountReference16CH} 
     * @param debtorName {String} Debtor name.
     * @param endToEndIdentification {String} 
     * @param frequency {module:model/FrequencyCode} 
     * @param startDate {Date} The first applicable day of execution starting from this date is the first payment. 
     */
    constructor(creditorAccount, creditorName, debtorAccount, debtorName, endToEndIdentification, frequency, startDate) { 
        
        PeriodicPaymentInitiationJson.initialize(this, creditorAccount, creditorName, debtorAccount, debtorName, endToEndIdentification, frequency, startDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, creditorAccount, creditorName, debtorAccount, debtorName, endToEndIdentification, frequency, startDate) { 
        obj['creditorAccount'] = creditorAccount;
        obj['creditorName'] = creditorName;
        obj['debtorAccount'] = debtorAccount;
        obj['debtorName'] = debtorName;
        obj['endToEndIdentification'] = endToEndIdentification;
        obj['frequency'] = frequency;
        obj['startDate'] = startDate;
    }

    /**
     * Constructs a <code>PeriodicPaymentInitiationJson</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PeriodicPaymentInitiationJson} obj Optional instance to populate.
     * @return {module:model/PeriodicPaymentInitiationJson} The populated <code>PeriodicPaymentInitiationJson</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PeriodicPaymentInitiationJson();

            if (data.hasOwnProperty('chargeBearer')) {
                obj['chargeBearer'] = ChargeBearer.constructFromObject(data['chargeBearer']);
            }
            if (data.hasOwnProperty('creditorAccount')) {
                obj['creditorAccount'] = AccountReference16CH.constructFromObject(data['creditorAccount']);
            }
            if (data.hasOwnProperty('creditorAddress')) {
                obj['creditorAddress'] = Address.constructFromObject(data['creditorAddress']);
            }
            if (data.hasOwnProperty('creditorAgent')) {
                obj['creditorAgent'] = CreditorAgent7CH.constructFromObject(data['creditorAgent']);
            }
            if (data.hasOwnProperty('creditorAgentName')) {
                obj['creditorAgentName'] = ApiClient.convertToType(data['creditorAgentName'], 'String');
            }
            if (data.hasOwnProperty('creditorId')) {
                obj['creditorId'] = ApiClient.convertToType(data['creditorId'], 'String');
            }
            if (data.hasOwnProperty('creditorName')) {
                obj['creditorName'] = ApiClient.convertToType(data['creditorName'], 'String');
            }
            if (data.hasOwnProperty('creditorNameAndAddress')) {
                obj['creditorNameAndAddress'] = ApiClient.convertToType(data['creditorNameAndAddress'], 'String');
            }
            if (data.hasOwnProperty('dayOfExecution')) {
                obj['dayOfExecution'] = DayOfExecution.constructFromObject(data['dayOfExecution']);
            }
            if (data.hasOwnProperty('debtorAccount')) {
                obj['debtorAccount'] = AccountReference16CH.constructFromObject(data['debtorAccount']);
            }
            if (data.hasOwnProperty('debtorAgent')) {
                obj['debtorAgent'] = DebtorAgent7CH.constructFromObject(data['debtorAgent']);
            }
            if (data.hasOwnProperty('debtorId')) {
                obj['debtorId'] = ApiClient.convertToType(data['debtorId'], 'String');
            }
            if (data.hasOwnProperty('debtorName')) {
                obj['debtorName'] = ApiClient.convertToType(data['debtorName'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('endToEndIdentification')) {
                obj['endToEndIdentification'] = ApiClient.convertToType(data['endToEndIdentification'], 'String');
            }
            if (data.hasOwnProperty('equivalentAmount')) {
                obj['equivalentAmount'] = Amount.constructFromObject(data['equivalentAmount']);
            }
            if (data.hasOwnProperty('exchangeRateInformation')) {
                obj['exchangeRateInformation'] = ExchangeRateInformation1.constructFromObject(data['exchangeRateInformation']);
            }
            if (data.hasOwnProperty('executionRule')) {
                obj['executionRule'] = ExecutionRule.constructFromObject(data['executionRule']);
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = FrequencyCode.constructFromObject(data['frequency']);
            }
            if (data.hasOwnProperty('instructedAmount')) {
                obj['instructedAmount'] = Amount.constructFromObject(data['instructedAmount']);
            }
            if (data.hasOwnProperty('intermediaryAgent')) {
                obj['intermediaryAgent'] = ApiClient.convertToType(data['intermediaryAgent'], 'String');
            }
            if (data.hasOwnProperty('purposeCode')) {
                obj['purposeCode'] = PurposeCode.constructFromObject(data['purposeCode']);
            }
            if (data.hasOwnProperty('remittanceInformationStructured')) {
                obj['remittanceInformationStructured'] = RemittanceInformationStructured.constructFromObject(data['remittanceInformationStructured']);
            }
            if (data.hasOwnProperty('remittanceInformationUnstructured')) {
                obj['remittanceInformationUnstructured'] = ApiClient.convertToType(data['remittanceInformationUnstructured'], 'String');
            }
            if (data.hasOwnProperty('serviceLevel')) {
                obj['serviceLevel'] = ExternalServiceLevel1Code.constructFromObject(data['serviceLevel']);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('transactionCurrency')) {
                obj['transactionCurrency'] = ApiClient.convertToType(data['transactionCurrency'], 'String');
            }
            if (data.hasOwnProperty('ultimateCreditor')) {
                obj['ultimateCreditor'] = ApiClient.convertToType(data['ultimateCreditor'], 'String');
            }
            if (data.hasOwnProperty('ultimateDebtor')) {
                obj['ultimateDebtor'] = ApiClient.convertToType(data['ultimateDebtor'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PeriodicPaymentInitiationJson</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PeriodicPaymentInitiationJson</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PeriodicPaymentInitiationJson.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `creditorAccount`
        if (data['creditorAccount']) { // data not null
          AccountReference16CH.validateJSON(data['creditorAccount']);
        }
        // validate the optional field `creditorAddress`
        if (data['creditorAddress']) { // data not null
          Address.validateJSON(data['creditorAddress']);
        }
        // validate the optional field `creditorAgent`
        if (data['creditorAgent']) { // data not null
          CreditorAgent7CH.validateJSON(data['creditorAgent']);
        }
        // ensure the json data is a string
        if (data['creditorAgentName'] && !(typeof data['creditorAgentName'] === 'string' || data['creditorAgentName'] instanceof String)) {
            throw new Error("Expected the field `creditorAgentName` to be a primitive type in the JSON string but got " + data['creditorAgentName']);
        }
        // ensure the json data is a string
        if (data['creditorId'] && !(typeof data['creditorId'] === 'string' || data['creditorId'] instanceof String)) {
            throw new Error("Expected the field `creditorId` to be a primitive type in the JSON string but got " + data['creditorId']);
        }
        // ensure the json data is a string
        if (data['creditorName'] && !(typeof data['creditorName'] === 'string' || data['creditorName'] instanceof String)) {
            throw new Error("Expected the field `creditorName` to be a primitive type in the JSON string but got " + data['creditorName']);
        }
        // ensure the json data is a string
        if (data['creditorNameAndAddress'] && !(typeof data['creditorNameAndAddress'] === 'string' || data['creditorNameAndAddress'] instanceof String)) {
            throw new Error("Expected the field `creditorNameAndAddress` to be a primitive type in the JSON string but got " + data['creditorNameAndAddress']);
        }
        // validate the optional field `debtorAccount`
        if (data['debtorAccount']) { // data not null
          AccountReference16CH.validateJSON(data['debtorAccount']);
        }
        // validate the optional field `debtorAgent`
        if (data['debtorAgent']) { // data not null
          DebtorAgent7CH.validateJSON(data['debtorAgent']);
        }
        // ensure the json data is a string
        if (data['debtorId'] && !(typeof data['debtorId'] === 'string' || data['debtorId'] instanceof String)) {
            throw new Error("Expected the field `debtorId` to be a primitive type in the JSON string but got " + data['debtorId']);
        }
        // ensure the json data is a string
        if (data['debtorName'] && !(typeof data['debtorName'] === 'string' || data['debtorName'] instanceof String)) {
            throw new Error("Expected the field `debtorName` to be a primitive type in the JSON string but got " + data['debtorName']);
        }
        // ensure the json data is a string
        if (data['endToEndIdentification'] && !(typeof data['endToEndIdentification'] === 'string' || data['endToEndIdentification'] instanceof String)) {
            throw new Error("Expected the field `endToEndIdentification` to be a primitive type in the JSON string but got " + data['endToEndIdentification']);
        }
        // validate the optional field `equivalentAmount`
        if (data['equivalentAmount']) { // data not null
          Amount.validateJSON(data['equivalentAmount']);
        }
        // validate the optional field `exchangeRateInformation`
        if (data['exchangeRateInformation']) { // data not null
          ExchangeRateInformation1.validateJSON(data['exchangeRateInformation']);
        }
        // validate the optional field `instructedAmount`
        if (data['instructedAmount']) { // data not null
          Amount.validateJSON(data['instructedAmount']);
        }
        // ensure the json data is a string
        if (data['intermediaryAgent'] && !(typeof data['intermediaryAgent'] === 'string' || data['intermediaryAgent'] instanceof String)) {
            throw new Error("Expected the field `intermediaryAgent` to be a primitive type in the JSON string but got " + data['intermediaryAgent']);
        }
        // validate the optional field `remittanceInformationStructured`
        if (data['remittanceInformationStructured']) { // data not null
          RemittanceInformationStructured.validateJSON(data['remittanceInformationStructured']);
        }
        // ensure the json data is a string
        if (data['remittanceInformationUnstructured'] && !(typeof data['remittanceInformationUnstructured'] === 'string' || data['remittanceInformationUnstructured'] instanceof String)) {
            throw new Error("Expected the field `remittanceInformationUnstructured` to be a primitive type in the JSON string but got " + data['remittanceInformationUnstructured']);
        }
        // ensure the json data is a string
        if (data['transactionCurrency'] && !(typeof data['transactionCurrency'] === 'string' || data['transactionCurrency'] instanceof String)) {
            throw new Error("Expected the field `transactionCurrency` to be a primitive type in the JSON string but got " + data['transactionCurrency']);
        }
        // ensure the json data is a string
        if (data['ultimateCreditor'] && !(typeof data['ultimateCreditor'] === 'string' || data['ultimateCreditor'] instanceof String)) {
            throw new Error("Expected the field `ultimateCreditor` to be a primitive type in the JSON string but got " + data['ultimateCreditor']);
        }
        // ensure the json data is a string
        if (data['ultimateDebtor'] && !(typeof data['ultimateDebtor'] === 'string' || data['ultimateDebtor'] instanceof String)) {
            throw new Error("Expected the field `ultimateDebtor` to be a primitive type in the JSON string but got " + data['ultimateDebtor']);
        }

        return true;
    }


}

PeriodicPaymentInitiationJson.RequiredProperties = ["creditorAccount", "creditorName", "debtorAccount", "debtorName", "endToEndIdentification", "frequency", "startDate"];

/**
 * @member {module:model/ChargeBearer} chargeBearer
 */
PeriodicPaymentInitiationJson.prototype['chargeBearer'] = undefined;

/**
 * @member {module:model/AccountReference16CH} creditorAccount
 */
PeriodicPaymentInitiationJson.prototype['creditorAccount'] = undefined;

/**
 * @member {module:model/Address} creditorAddress
 */
PeriodicPaymentInitiationJson.prototype['creditorAddress'] = undefined;

/**
 * @member {module:model/CreditorAgent7CH} creditorAgent
 */
PeriodicPaymentInitiationJson.prototype['creditorAgent'] = undefined;

/**
 * Creditor agent name.
 * @member {String} creditorAgentName
 */
PeriodicPaymentInitiationJson.prototype['creditorAgentName'] = undefined;

/**
 * Identification of Creditors, e.g. a SEPA Creditor ID.
 * @member {String} creditorId
 */
PeriodicPaymentInitiationJson.prototype['creditorId'] = undefined;

/**
 * Creditor name.
 * @member {String} creditorName
 */
PeriodicPaymentInitiationJson.prototype['creditorName'] = undefined;

/**
 * Creditor Name and Address in a free text field.
 * @member {String} creditorNameAndAddress
 */
PeriodicPaymentInitiationJson.prototype['creditorNameAndAddress'] = undefined;

/**
 * @member {module:model/DayOfExecution} dayOfExecution
 */
PeriodicPaymentInitiationJson.prototype['dayOfExecution'] = undefined;

/**
 * @member {module:model/AccountReference16CH} debtorAccount
 */
PeriodicPaymentInitiationJson.prototype['debtorAccount'] = undefined;

/**
 * @member {module:model/DebtorAgent7CH} debtorAgent
 */
PeriodicPaymentInitiationJson.prototype['debtorAgent'] = undefined;

/**
 * Debtor Id.
 * @member {String} debtorId
 */
PeriodicPaymentInitiationJson.prototype['debtorId'] = undefined;

/**
 * Debtor name.
 * @member {String} debtorName
 */
PeriodicPaymentInitiationJson.prototype['debtorName'] = undefined;

/**
 * The last applicable day of execution. If not given, it is an infinite standing order. 
 * @member {Date} endDate
 */
PeriodicPaymentInitiationJson.prototype['endDate'] = undefined;

/**
 * @member {String} endToEndIdentification
 */
PeriodicPaymentInitiationJson.prototype['endToEndIdentification'] = undefined;

/**
 * @member {module:model/Amount} equivalentAmount
 */
PeriodicPaymentInitiationJson.prototype['equivalentAmount'] = undefined;

/**
 * @member {module:model/ExchangeRateInformation1} exchangeRateInformation
 */
PeriodicPaymentInitiationJson.prototype['exchangeRateInformation'] = undefined;

/**
 * @member {module:model/ExecutionRule} executionRule
 */
PeriodicPaymentInitiationJson.prototype['executionRule'] = undefined;

/**
 * @member {module:model/FrequencyCode} frequency
 */
PeriodicPaymentInitiationJson.prototype['frequency'] = undefined;

/**
 * @member {module:model/Amount} instructedAmount
 */
PeriodicPaymentInitiationJson.prototype['instructedAmount'] = undefined;

/**
 * BICFI 
 * @member {String} intermediaryAgent
 */
PeriodicPaymentInitiationJson.prototype['intermediaryAgent'] = undefined;

/**
 * @member {module:model/PurposeCode} purposeCode
 */
PeriodicPaymentInitiationJson.prototype['purposeCode'] = undefined;

/**
 * @member {module:model/RemittanceInformationStructured} remittanceInformationStructured
 */
PeriodicPaymentInitiationJson.prototype['remittanceInformationStructured'] = undefined;

/**
 * Unstructured remittance information. 
 * @member {String} remittanceInformationUnstructured
 */
PeriodicPaymentInitiationJson.prototype['remittanceInformationUnstructured'] = undefined;

/**
 * @member {module:model/ExternalServiceLevel1Code} serviceLevel
 */
PeriodicPaymentInitiationJson.prototype['serviceLevel'] = undefined;

/**
 * The first applicable day of execution starting from this date is the first payment. 
 * @member {Date} startDate
 */
PeriodicPaymentInitiationJson.prototype['startDate'] = undefined;

/**
 * ISO 4217 Alpha 3 currency code. 
 * @member {String} transactionCurrency
 */
PeriodicPaymentInitiationJson.prototype['transactionCurrency'] = undefined;

/**
 * Ultimate creditor.
 * @member {String} ultimateCreditor
 */
PeriodicPaymentInitiationJson.prototype['ultimateCreditor'] = undefined;

/**
 * Ultimate debtor.
 * @member {String} ultimateDebtor
 */
PeriodicPaymentInitiationJson.prototype['ultimateDebtor'] = undefined;






export default PeriodicPaymentInitiationJson;

