/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HrefType from './HrefType';

/**
 * The LinksSelectPsuAuthenticationMethod model module.
 * @module model/LinksSelectPsuAuthenticationMethod
 * @version 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 */
class LinksSelectPsuAuthenticationMethod {
    /**
     * Constructs a new <code>LinksSelectPsuAuthenticationMethod</code>.
     * A list of hyperlinks to be recognised by the TPP. The actual hyperlinks used in the response depend on the dynamical decisions of the ASPSP when processing the request.  **Remark:** All links can be relative or full links, to be decided by the ASPSP.  **Remark:** This method can be applied before or after PSU identification. This leads to many possible hyperlink responses. Type of links admitted in this response, (further links might be added for ASPSP defined extensions):  - &#39;scaRedirect&#39;:   In case of an SCA Redirect Approach, the ASPSP is transmitting the link to which to   redirect the PSU browser. - &#39;scaOAuth&#39;:   In case of a SCA OAuth2 Approach, the ASPSP is transmitting the URI where the   configuration of the Authorisation Server can be retrieved.   The configuration follows the OAuth 2.0 Authorisation Server Metadata specification. * &#39;confirmation&#39;:    Might be added by the ASPSP if either the \&quot;scaRedirect\&quot; or \&quot;scaOAuth\&quot; hyperlink is returned    in the same response message.    This hyperlink defines the URL to the resource which needs to be updated with      * a confirmation code as retrieved after the plain redirect authentication process with the ASPSP authentication server or     * an access token as retrieved by submitting an authorization code after the integrated OAuth based authentication process with the ASPSP authentication server. - &#39;updatePsuIdentification&#39;:    The link to the authorisation or cancellation authorisation sub-resource,    where PSU identification data needs to be uploaded. - &#39;updatePsuAuthentication&#39;:   The link to the authorisation or cancellation authorisation sub-resource,   where PSU authentication data needs to be uploaded.   - &#39;updateEncryptedPsuAuthentication&#39;:   The link to the authorisation or cancellation authorisation sub-resource,   where PSU authentication encrypted data needs to be uploaded. - &#39;updateAdditionalPsuAuthentication&#39;:     The link to the payment initiation or account information resource,     which needs to be updated by an additional PSU password. - &#39;updateAdditionalEncryptedPsuAuthentication&#39;:     The link to the payment initiation or account information resource,     which needs to be updated by an additional encrypted PSU password. - &#39;authoriseTransaction&#39;:   The link to the authorisation or cancellation authorisation sub-resource,   where the authorisation data has to be uploaded, e.g. the TOP received by SMS. - &#39;scaStatus&#39;:   The link to retrieve the scaStatus of the corresponding authorisation sub-resource. 
     * @alias module:model/LinksSelectPsuAuthenticationMethod
     * @extends Object
     */
    constructor() { 
        
        LinksSelectPsuAuthenticationMethod.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LinksSelectPsuAuthenticationMethod</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinksSelectPsuAuthenticationMethod} obj Optional instance to populate.
     * @return {module:model/LinksSelectPsuAuthenticationMethod} The populated <code>LinksSelectPsuAuthenticationMethod</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinksSelectPsuAuthenticationMethod();

            ApiClient.constructFromObject(data, obj, 'HrefType');
            

            if (data.hasOwnProperty('authoriseTransaction')) {
                obj['authoriseTransaction'] = HrefType.constructFromObject(data['authoriseTransaction']);
            }
            if (data.hasOwnProperty('confirmation')) {
                obj['confirmation'] = HrefType.constructFromObject(data['confirmation']);
            }
            if (data.hasOwnProperty('scaOAuth')) {
                obj['scaOAuth'] = HrefType.constructFromObject(data['scaOAuth']);
            }
            if (data.hasOwnProperty('scaRedirect')) {
                obj['scaRedirect'] = HrefType.constructFromObject(data['scaRedirect']);
            }
            if (data.hasOwnProperty('scaStatus')) {
                obj['scaStatus'] = HrefType.constructFromObject(data['scaStatus']);
            }
            if (data.hasOwnProperty('updateAdditionalEncryptedPsuAuthentication')) {
                obj['updateAdditionalEncryptedPsuAuthentication'] = HrefType.constructFromObject(data['updateAdditionalEncryptedPsuAuthentication']);
            }
            if (data.hasOwnProperty('updateAdditionalPsuAuthentication')) {
                obj['updateAdditionalPsuAuthentication'] = HrefType.constructFromObject(data['updateAdditionalPsuAuthentication']);
            }
            if (data.hasOwnProperty('updatePsuAuthentication')) {
                obj['updatePsuAuthentication'] = HrefType.constructFromObject(data['updatePsuAuthentication']);
            }
            if (data.hasOwnProperty('updatePsuIdentification')) {
                obj['updatePsuIdentification'] = HrefType.constructFromObject(data['updatePsuIdentification']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinksSelectPsuAuthenticationMethod</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinksSelectPsuAuthenticationMethod</code>.
     */
    static validateJSON(data) {
        // validate the optional field `authoriseTransaction`
        if (data['authoriseTransaction']) { // data not null
          HrefType.validateJSON(data['authoriseTransaction']);
        }
        // validate the optional field `confirmation`
        if (data['confirmation']) { // data not null
          HrefType.validateJSON(data['confirmation']);
        }
        // validate the optional field `scaOAuth`
        if (data['scaOAuth']) { // data not null
          HrefType.validateJSON(data['scaOAuth']);
        }
        // validate the optional field `scaRedirect`
        if (data['scaRedirect']) { // data not null
          HrefType.validateJSON(data['scaRedirect']);
        }
        // validate the optional field `scaStatus`
        if (data['scaStatus']) { // data not null
          HrefType.validateJSON(data['scaStatus']);
        }
        // validate the optional field `updateAdditionalEncryptedPsuAuthentication`
        if (data['updateAdditionalEncryptedPsuAuthentication']) { // data not null
          HrefType.validateJSON(data['updateAdditionalEncryptedPsuAuthentication']);
        }
        // validate the optional field `updateAdditionalPsuAuthentication`
        if (data['updateAdditionalPsuAuthentication']) { // data not null
          HrefType.validateJSON(data['updateAdditionalPsuAuthentication']);
        }
        // validate the optional field `updatePsuAuthentication`
        if (data['updatePsuAuthentication']) { // data not null
          HrefType.validateJSON(data['updatePsuAuthentication']);
        }
        // validate the optional field `updatePsuIdentification`
        if (data['updatePsuIdentification']) { // data not null
          HrefType.validateJSON(data['updatePsuIdentification']);
        }

        return true;
    }


}



/**
 * @member {module:model/HrefType} authoriseTransaction
 */
LinksSelectPsuAuthenticationMethod.prototype['authoriseTransaction'] = undefined;

/**
 * @member {module:model/HrefType} confirmation
 */
LinksSelectPsuAuthenticationMethod.prototype['confirmation'] = undefined;

/**
 * @member {module:model/HrefType} scaOAuth
 */
LinksSelectPsuAuthenticationMethod.prototype['scaOAuth'] = undefined;

/**
 * @member {module:model/HrefType} scaRedirect
 */
LinksSelectPsuAuthenticationMethod.prototype['scaRedirect'] = undefined;

/**
 * @member {module:model/HrefType} scaStatus
 */
LinksSelectPsuAuthenticationMethod.prototype['scaStatus'] = undefined;

/**
 * @member {module:model/HrefType} updateAdditionalEncryptedPsuAuthentication
 */
LinksSelectPsuAuthenticationMethod.prototype['updateAdditionalEncryptedPsuAuthentication'] = undefined;

/**
 * @member {module:model/HrefType} updateAdditionalPsuAuthentication
 */
LinksSelectPsuAuthenticationMethod.prototype['updateAdditionalPsuAuthentication'] = undefined;

/**
 * @member {module:model/HrefType} updatePsuAuthentication
 */
LinksSelectPsuAuthenticationMethod.prototype['updatePsuAuthentication'] = undefined;

/**
 * @member {module:model/HrefType} updatePsuIdentification
 */
LinksSelectPsuAuthenticationMethod.prototype['updatePsuIdentification'] = undefined;






export default LinksSelectPsuAuthenticationMethod;

