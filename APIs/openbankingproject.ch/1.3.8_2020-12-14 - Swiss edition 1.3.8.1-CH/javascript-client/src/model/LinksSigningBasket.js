/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HrefType from './HrefType';

/**
 * The LinksSigningBasket model module.
 * @module model/LinksSigningBasket
 * @version 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 */
class LinksSigningBasket {
    /**
     * Constructs a new <code>LinksSigningBasket</code>.
     * A list of hyperlinks to be recognised by the TPP. The actual hyperlinks used in the response depend on the dynamical decisions of the ASPSP when processing the request.  Remark: All links can be relative or full links, to be decided by the ASPSP. Type of links admitted in this response, (further links might be added for ASPSP defined extensions):    * &#39;scaRedirect&#39;:     In case of an SCA Redirect Approach, the ASPSP is transmitting the link to     which to redirect the PSU browser.   * &#39;scaOAuth&#39;:     In case of a SCA OAuth2 Approach, the ASPSP is transmitting the URI where the configuration of     the Authorisation Server can be retrieved. The configuration follows the     OAuth 2.0 Authorisation Server Metadata specification.   * &#39;startAuthorisation&#39;:     In case, where an explicit start of the transaction authorisation is needed,     but no more data needs to be updated (no authentication method to be selected,     no PSU identification nor PSU authentication data to be uploaded).   * &#39;startAuthorisationWithPsuIdentification&#39;:     The link to the authorisation end-point, where the authorisation sub-resource     has to be generated while uploading the PSU identification data.   * &#39;startAuthorisationWithPsuAuthentication&#39;:     The link to the authorisation end-point, where the authorisation sub-resource     has to be generated while uploading the PSU authentication data.   * &#39;startAuthorisationWithEncryptedPsuAuthentication&#39;:     The link to the authorisation end-point, where the authorisation sub-resource has     to be generated while uploading the encrypted PSU authentication data.   * &#39;startAuthorisationWithAuthenticationMethodSelection&#39;:     The link to the authorisation end-point, where the authorisation sub-resource     has to be generated while selecting the authentication method.     This link is contained under exactly the same conditions as the data element &#39;scaMethods&#39;   * &#39;startAuthorisationWithTransactionAuthorisation&#39;:     The link to the authorisation end-point, where the authorisation sub-resource     has to be generated while authorising the transaction e.g. by uploading an     OTP received by SMS.   * &#39;self&#39;:     The link to the payment initiation resource created by this request.     This link can be used to retrieve the resource data.   * &#39;status&#39;:     The link to retrieve the transaction status of the payment initiation.   * &#39;scaStatus&#39;:     The link to retrieve the scaStatus of the corresponding authorisation sub-resource.     This link is only contained, if an authorisation sub-resource has been already created. 
     * @alias module:model/LinksSigningBasket
     */
    constructor() { 
        
        LinksSigningBasket.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LinksSigningBasket</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinksSigningBasket} obj Optional instance to populate.
     * @return {module:model/LinksSigningBasket} The populated <code>LinksSigningBasket</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinksSigningBasket();

            if (data.hasOwnProperty('scaOAuth')) {
                obj['scaOAuth'] = HrefType.constructFromObject(data['scaOAuth']);
            }
            if (data.hasOwnProperty('scaRedirect')) {
                obj['scaRedirect'] = HrefType.constructFromObject(data['scaRedirect']);
            }
            if (data.hasOwnProperty('scaStatus')) {
                obj['scaStatus'] = HrefType.constructFromObject(data['scaStatus']);
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = HrefType.constructFromObject(data['self']);
            }
            if (data.hasOwnProperty('startAuthorisation')) {
                obj['startAuthorisation'] = HrefType.constructFromObject(data['startAuthorisation']);
            }
            if (data.hasOwnProperty('startAuthorisationWithAuthenticationMethodSelection')) {
                obj['startAuthorisationWithAuthenticationMethodSelection'] = HrefType.constructFromObject(data['startAuthorisationWithAuthenticationMethodSelection']);
            }
            if (data.hasOwnProperty('startAuthorisationWithEncryptedPsuAuthentication')) {
                obj['startAuthorisationWithEncryptedPsuAuthentication'] = HrefType.constructFromObject(data['startAuthorisationWithEncryptedPsuAuthentication']);
            }
            if (data.hasOwnProperty('startAuthorisationWithPsuAuthentication')) {
                obj['startAuthorisationWithPsuAuthentication'] = HrefType.constructFromObject(data['startAuthorisationWithPsuAuthentication']);
            }
            if (data.hasOwnProperty('startAuthorisationWithPsuIdentification')) {
                obj['startAuthorisationWithPsuIdentification'] = HrefType.constructFromObject(data['startAuthorisationWithPsuIdentification']);
            }
            if (data.hasOwnProperty('startAuthorisationWithTransactionAuthorisation')) {
                obj['startAuthorisationWithTransactionAuthorisation'] = HrefType.constructFromObject(data['startAuthorisationWithTransactionAuthorisation']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = HrefType.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinksSigningBasket</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinksSigningBasket</code>.
     */
    static validateJSON(data) {
        // validate the optional field `scaOAuth`
        if (data['scaOAuth']) { // data not null
          HrefType.validateJSON(data['scaOAuth']);
        }
        // validate the optional field `scaRedirect`
        if (data['scaRedirect']) { // data not null
          HrefType.validateJSON(data['scaRedirect']);
        }
        // validate the optional field `scaStatus`
        if (data['scaStatus']) { // data not null
          HrefType.validateJSON(data['scaStatus']);
        }
        // validate the optional field `self`
        if (data['self']) { // data not null
          HrefType.validateJSON(data['self']);
        }
        // validate the optional field `startAuthorisation`
        if (data['startAuthorisation']) { // data not null
          HrefType.validateJSON(data['startAuthorisation']);
        }
        // validate the optional field `startAuthorisationWithAuthenticationMethodSelection`
        if (data['startAuthorisationWithAuthenticationMethodSelection']) { // data not null
          HrefType.validateJSON(data['startAuthorisationWithAuthenticationMethodSelection']);
        }
        // validate the optional field `startAuthorisationWithEncryptedPsuAuthentication`
        if (data['startAuthorisationWithEncryptedPsuAuthentication']) { // data not null
          HrefType.validateJSON(data['startAuthorisationWithEncryptedPsuAuthentication']);
        }
        // validate the optional field `startAuthorisationWithPsuAuthentication`
        if (data['startAuthorisationWithPsuAuthentication']) { // data not null
          HrefType.validateJSON(data['startAuthorisationWithPsuAuthentication']);
        }
        // validate the optional field `startAuthorisationWithPsuIdentification`
        if (data['startAuthorisationWithPsuIdentification']) { // data not null
          HrefType.validateJSON(data['startAuthorisationWithPsuIdentification']);
        }
        // validate the optional field `startAuthorisationWithTransactionAuthorisation`
        if (data['startAuthorisationWithTransactionAuthorisation']) { // data not null
          HrefType.validateJSON(data['startAuthorisationWithTransactionAuthorisation']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          HrefType.validateJSON(data['status']);
        }

        return true;
    }


}



/**
 * @member {module:model/HrefType} scaOAuth
 */
LinksSigningBasket.prototype['scaOAuth'] = undefined;

/**
 * @member {module:model/HrefType} scaRedirect
 */
LinksSigningBasket.prototype['scaRedirect'] = undefined;

/**
 * @member {module:model/HrefType} scaStatus
 */
LinksSigningBasket.prototype['scaStatus'] = undefined;

/**
 * @member {module:model/HrefType} self
 */
LinksSigningBasket.prototype['self'] = undefined;

/**
 * @member {module:model/HrefType} startAuthorisation
 */
LinksSigningBasket.prototype['startAuthorisation'] = undefined;

/**
 * @member {module:model/HrefType} startAuthorisationWithAuthenticationMethodSelection
 */
LinksSigningBasket.prototype['startAuthorisationWithAuthenticationMethodSelection'] = undefined;

/**
 * @member {module:model/HrefType} startAuthorisationWithEncryptedPsuAuthentication
 */
LinksSigningBasket.prototype['startAuthorisationWithEncryptedPsuAuthentication'] = undefined;

/**
 * @member {module:model/HrefType} startAuthorisationWithPsuAuthentication
 */
LinksSigningBasket.prototype['startAuthorisationWithPsuAuthentication'] = undefined;

/**
 * @member {module:model/HrefType} startAuthorisationWithPsuIdentification
 */
LinksSigningBasket.prototype['startAuthorisationWithPsuIdentification'] = undefined;

/**
 * @member {module:model/HrefType} startAuthorisationWithTransactionAuthorisation
 */
LinksSigningBasket.prototype['startAuthorisationWithTransactionAuthorisation'] = undefined;

/**
 * @member {module:model/HrefType} status
 */
LinksSigningBasket.prototype['status'] = undefined;






export default LinksSigningBasket;

