/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import DayOfExecution from './DayOfExecution';
import ExecutionRule from './ExecutionRule';
import FrequencyCode from './FrequencyCode';

/**
 * The StandingOrderDetails model module.
 * @module model/StandingOrderDetails
 * @version 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 */
class StandingOrderDetails {
    /**
     * Constructs a new <code>StandingOrderDetails</code>.
     * Details of underlying standing orders. 
     * @alias module:model/StandingOrderDetails
     * @param frequency {module:model/FrequencyCode} 
     * @param startDate {Date} The first applicable day of execution starting from this date is the first payment. 
     */
    constructor(frequency, startDate) { 
        
        StandingOrderDetails.initialize(this, frequency, startDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, frequency, startDate) { 
        obj['frequency'] = frequency;
        obj['startDate'] = startDate;
    }

    /**
     * Constructs a <code>StandingOrderDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StandingOrderDetails} obj Optional instance to populate.
     * @return {module:model/StandingOrderDetails} The populated <code>StandingOrderDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StandingOrderDetails();

            if (data.hasOwnProperty('dayOfExecution')) {
                obj['dayOfExecution'] = DayOfExecution.constructFromObject(data['dayOfExecution']);
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('executionRule')) {
                obj['executionRule'] = ExecutionRule.constructFromObject(data['executionRule']);
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = FrequencyCode.constructFromObject(data['frequency']);
            }
            if (data.hasOwnProperty('limitAmount')) {
                obj['limitAmount'] = Amount.constructFromObject(data['limitAmount']);
            }
            if (data.hasOwnProperty('monthsOfExecution')) {
                obj['monthsOfExecution'] = ApiClient.convertToType(data['monthsOfExecution'], ['String']);
            }
            if (data.hasOwnProperty('multiplicator')) {
                obj['multiplicator'] = ApiClient.convertToType(data['multiplicator'], 'Number');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('withinAMonthFlag')) {
                obj['withinAMonthFlag'] = ApiClient.convertToType(data['withinAMonthFlag'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StandingOrderDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StandingOrderDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StandingOrderDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `limitAmount`
        if (data['limitAmount']) { // data not null
          Amount.validateJSON(data['limitAmount']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['monthsOfExecution'])) {
            throw new Error("Expected the field `monthsOfExecution` to be an array in the JSON data but got " + data['monthsOfExecution']);
        }

        return true;
    }


}

StandingOrderDetails.RequiredProperties = ["frequency", "startDate"];

/**
 * @member {module:model/DayOfExecution} dayOfExecution
 */
StandingOrderDetails.prototype['dayOfExecution'] = undefined;

/**
 * The last applicable day of execution. If not given, it is an infinite standing order. 
 * @member {Date} endDate
 */
StandingOrderDetails.prototype['endDate'] = undefined;

/**
 * @member {module:model/ExecutionRule} executionRule
 */
StandingOrderDetails.prototype['executionRule'] = undefined;

/**
 * @member {module:model/FrequencyCode} frequency
 */
StandingOrderDetails.prototype['frequency'] = undefined;

/**
 * @member {module:model/Amount} limitAmount
 */
StandingOrderDetails.prototype['limitAmount'] = undefined;

/**
 * The format is following the regular expression \\d{1,2}.  The array is restricted to 11 entries.  The values contained in the array entries shall all be different and the maximum value of one entry is 12. This attribute is contained if and only if the frequency equals \"MonthlyVariable\". Example: An execution on January, April and October each year is addressed by [\"1\", \"4\", \"10\"]. 
 * @member {Array.<module:model/StandingOrderDetails.MonthsOfExecutionEnum>} monthsOfExecution
 */
StandingOrderDetails.prototype['monthsOfExecution'] = undefined;

/**
 * This is multiplying the given frequency resulting the exact frequency, e.g. Frequency=weekly and multiplicator=3 means every 3 weeks. Remark: This attribute is rarely supported in the market. 
 * @member {Number} multiplicator
 */
StandingOrderDetails.prototype['multiplicator'] = undefined;

/**
 * The first applicable day of execution starting from this date is the first payment. 
 * @member {Date} startDate
 */
StandingOrderDetails.prototype['startDate'] = undefined;

/**
 * This element is only used in case of frequency equals \"Monthly\".  If this element equals false it has no effect. If this element equals true, then the execution rule is overruled if the day of execution would fall into a different month using the execution rule.  Example: executionRule equals \"preceding\", dayOfExecution equals \"02\" and the second of a month is a Sunday.  In this case, the transaction date would be on the last day of the month before.  This would be overruled if withinAMonthFlag equals true and the payment is processed on Monday the third of the Month. Remark: This attribute is rarely supported in the market. 
 * @member {Boolean} withinAMonthFlag
 */
StandingOrderDetails.prototype['withinAMonthFlag'] = undefined;





/**
 * Allowed values for the <code>monthsOfExecution</code> property.
 * @enum {String}
 * @readonly
 */
StandingOrderDetails['MonthsOfExecutionEnum'] = {

    /**
     * value: "1"
     * @const
     */
    "1": "1",

    /**
     * value: "2"
     * @const
     */
    "2": "2",

    /**
     * value: "3"
     * @const
     */
    "3": "3",

    /**
     * value: "4"
     * @const
     */
    "4": "4",

    /**
     * value: "5"
     * @const
     */
    "5": "5",

    /**
     * value: "6"
     * @const
     */
    "6": "6",

    /**
     * value: "7"
     * @const
     */
    "7": "7",

    /**
     * value: "8"
     * @const
     */
    "8": "8",

    /**
     * value: "9"
     * @const
     */
    "9": "9",

    /**
     * value: "10"
     * @const
     */
    "10": "10",

    /**
     * value: "11"
     * @const
     */
    "11": "11",

    /**
     * value: "12"
     * @const
     */
    "12": "12"
};



export default StandingOrderDetails;

