/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Authorisations from '../model/Authorisations';
import Error400NGSBS from '../model/Error400NGSBS';
import Error400SBS from '../model/Error400SBS';
import Error401NGSBS from '../model/Error401NGSBS';
import Error401SBS from '../model/Error401SBS';
import Error403NGSBS from '../model/Error403NGSBS';
import Error403SBS from '../model/Error403SBS';
import Error404NGSBS from '../model/Error404NGSBS';
import Error404SBS from '../model/Error404SBS';
import Error405NGSBS from '../model/Error405NGSBS';
import Error405SBS from '../model/Error405SBS';
import Error409NGSBS from '../model/Error409NGSBS';
import Error409SBS from '../model/Error409SBS';
import ScaStatusResponse from '../model/ScaStatusResponse';
import SigningBasket from '../model/SigningBasket';
import SigningBasketResponse200 from '../model/SigningBasketResponse200';
import SigningBasketResponse201 from '../model/SigningBasketResponse201';
import SigningBasketStatusResponse200 from '../model/SigningBasketStatusResponse200';
import StartConsentAuthorisationRequest from '../model/StartConsentAuthorisationRequest';
import StartScaprocessResponse from '../model/StartScaprocessResponse';
import UpdateConsentsPsuData200Response from '../model/UpdateConsentsPsuData200Response';
import UpdateConsentsPsuDataRequest from '../model/UpdateConsentsPsuDataRequest';

/**
* SigningBasketsServiceSBS service.
* @module api/SigningBasketsServiceSBSApi
* @version 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
*/
export default class SigningBasketsServiceSBSApi {

    /**
    * Constructs a new SigningBasketsServiceSBSApi. 
    * @alias module:api/SigningBasketsServiceSBSApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSigningBasket operation.
     * @callback module:api/SigningBasketsServiceSBSApi~createSigningBasketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SigningBasketResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a signing basket resource
     * Create a signing basket resource for authorising several transactions with one SCA method.  The resource identifications of these transactions are contained in the payload of this access method 
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {String} pSUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. If not available, the TPP shall use the IP Address used by the TPP when submitting this request. 
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [PSU_ID] Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP's documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation. 
     * @param {String} [pSUIDType] Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP's documentation. 
     * @param {String} [pSUCorporateID] Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
     * @param {String} [pSUCorporateIDType] Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
     * @param {String} [consentID] This data element may be contained, if the payment initiation transaction is part of a session, i.e. combined AIS/PIS service. This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. 
     * @param {Boolean} [tPPRedirectPreferred] If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
     * @param {String} [tPPRedirectURI] URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \"true\". It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification. 
     * @param {String} [tPPNokRedirectURI] If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. 
     * @param {Boolean} [tPPExplicitAuthorisationPreferred] If it equals \"true\", the TPP prefers to start the authorisation process separately, e.g. because of the usage of a signing basket. This preference might be ignored by the ASPSP, if a signing basket is not supported as functionality.  If it equals \"false\" or if the parameter is not used, there is no preference of the TPP. This especially indicates that the TPP assumes a direct authorisation of the transaction in the next step, without using a signing basket. 
     * @param {String} [tPPNotificationURI] URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. 
     * @param {String} [tPPNotificationContentPreferred] The string has the form  status=X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:model/SigningBasket} [signingBasket] Request body for a confirmation of an establishing signing basket request. 
     * @param {module:api/SigningBasketsServiceSBSApi~createSigningBasketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SigningBasketResponse201}
     */
    createSigningBasket(xRequestID, pSUIPAddress, opts, callback) {
      opts = opts || {};
      let postBody = opts['signingBasket'];
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling createSigningBasket");
      }
      // verify the required parameter 'pSUIPAddress' is set
      if (pSUIPAddress === undefined || pSUIPAddress === null) {
        throw new Error("Missing the required parameter 'pSUIPAddress' when calling createSigningBasket");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'PSU-ID': opts['PSU_ID'],
        'PSU-ID-Type': opts['pSUIDType'],
        'PSU-Corporate-ID': opts['pSUCorporateID'],
        'PSU-Corporate-ID-Type': opts['pSUCorporateIDType'],
        'Consent-ID': opts['consentID'],
        'PSU-IP-Address': pSUIPAddress,
        'TPP-Redirect-Preferred': opts['tPPRedirectPreferred'],
        'TPP-Redirect-URI': opts['tPPRedirectURI'],
        'TPP-Nok-Redirect-URI': opts['tPPNokRedirectURI'],
        'TPP-Explicit-Authorisation-Preferred': opts['tPPExplicitAuthorisationPreferred'],
        'TPP-Notification-URI': opts['tPPNotificationURI'],
        'TPP-Notification-Content-Preferred': opts['tPPNotificationContentPreferred'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = SigningBasketResponse201;
      return this.apiClient.callApi(
        '/v1/signing-baskets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSigningBasket operation.
     * @callback module:api/SigningBasketsServiceSBSApi~deleteSigningBasketCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the signing basket
     * Delete the signing basket structure as long as no (partial) authorisation has yet been applied. The undlerying transactions are not affected by this deletion.  Remark: The signing basket as such is not deletable after a first (partial) authorisation has been applied. Nevertheless, single transactions might be cancelled on an individual basis on the XS2A interface. 
     * @param {String} basketId This identification of the corresponding signing basket object. 
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:api/SigningBasketsServiceSBSApi~deleteSigningBasketCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSigningBasket(basketId, xRequestID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling deleteSigningBasket");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling deleteSigningBasket");
      }

      let pathParams = {
        'basketId': basketId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/signing-baskets/{basketId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSigningBasket operation.
     * @callback module:api/SigningBasketsServiceSBSApi~getSigningBasketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SigningBasketResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the content of an signing basket object
     * Returns the content of a signing basket object.
     * @param {String} basketId This identification of the corresponding signing basket object. 
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:api/SigningBasketsServiceSBSApi~getSigningBasketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SigningBasketResponse200}
     */
    getSigningBasket(basketId, xRequestID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling getSigningBasket");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling getSigningBasket");
      }

      let pathParams = {
        'basketId': basketId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = SigningBasketResponse200;
      return this.apiClient.callApi(
        '/v1/signing-baskets/{basketId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSigningBasketAuthorisation operation.
     * @callback module:api/SigningBasketsServiceSBSApi~getSigningBasketAuthorisationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Authorisations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get signing basket authorisation sub-resources request
     * Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. 
     * @param {String} basketId This identification of the corresponding signing basket object. 
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:api/SigningBasketsServiceSBSApi~getSigningBasketAuthorisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Authorisations}
     */
    getSigningBasketAuthorisation(basketId, xRequestID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling getSigningBasketAuthorisation");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling getSigningBasketAuthorisation");
      }

      let pathParams = {
        'basketId': basketId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Authorisations;
      return this.apiClient.callApi(
        '/v1/signing-baskets/{basketId}/authorisations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSigningBasketScaStatus operation.
     * @callback module:api/SigningBasketsServiceSBSApi~getSigningBasketScaStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScaStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read the SCA status of the signing basket authorisation
     * This method returns the SCA status of a signing basket's authorisation sub-resource. 
     * @param {String} basketId This identification of the corresponding signing basket object. 
     * @param {String} authorisationId Resource identification of the related SCA.
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:api/SigningBasketsServiceSBSApi~getSigningBasketScaStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScaStatusResponse}
     */
    getSigningBasketScaStatus(basketId, authorisationId, xRequestID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling getSigningBasketScaStatus");
      }
      // verify the required parameter 'authorisationId' is set
      if (authorisationId === undefined || authorisationId === null) {
        throw new Error("Missing the required parameter 'authorisationId' when calling getSigningBasketScaStatus");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling getSigningBasketScaStatus");
      }

      let pathParams = {
        'basketId': basketId,
        'authorisationId': authorisationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ScaStatusResponse;
      return this.apiClient.callApi(
        '/v1/signing-baskets/{basketId}/authorisations/{authorisationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSigningBasketStatus operation.
     * @callback module:api/SigningBasketsServiceSBSApi~getSigningBasketStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SigningBasketStatusResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read the status of the signing basket
     * Returns the status of a signing basket object. 
     * @param {String} basketId This identification of the corresponding signing basket object. 
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [PSU_ID] Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP's documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation. 
     * @param {String} [pSUIDType] Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP's documentation. 
     * @param {String} [pSUCorporateID] Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
     * @param {String} [pSUCorporateIDType] Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:api/SigningBasketsServiceSBSApi~getSigningBasketStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SigningBasketStatusResponse200}
     */
    getSigningBasketStatus(basketId, xRequestID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling getSigningBasketStatus");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling getSigningBasketStatus");
      }

      let pathParams = {
        'basketId': basketId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'PSU-ID': opts['PSU_ID'],
        'PSU-ID-Type': opts['pSUIDType'],
        'PSU-Corporate-ID': opts['pSUCorporateID'],
        'PSU-Corporate-ID-Type': opts['pSUCorporateIDType'],
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = SigningBasketStatusResponse200;
      return this.apiClient.callApi(
        '/v1/signing-baskets/{basketId}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startSigningBasketAuthorisation operation.
     * @callback module:api/SigningBasketsServiceSBSApi~startSigningBasketAuthorisationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartScaprocessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start the authorisation process for a signing basket
     * Create an authorisation sub-resource and start the authorisation process of a signing basket. The message might in addition transmit authentication and authorisation related data.  This method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the signing-baskets.  The ASPSP might make the usage of this access method unnecessary in case of only one SCA process needed, since the related authorisation resource might be automatically created by the ASPSP after the submission of the payment data with the first POST signing basket call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with a 'startAuthorisation' hyperlink in the preceding payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'      * 'startAuthorisationWithEncryptedPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with a 'startAuthorisation' hyperlink in the preceding      payment cancellation response that an explicit start of the authorisation process is needed by the TPP.     The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded     by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param {String} basketId This identification of the corresponding signing basket object. 
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [PSU_ID] Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP's documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation. 
     * @param {String} [pSUIDType] Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP's documentation. 
     * @param {String} [pSUCorporateID] Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
     * @param {String} [pSUCorporateIDType] Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
     * @param {Boolean} [tPPRedirectPreferred] If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
     * @param {String} [tPPRedirectURI] URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \"true\". It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification. 
     * @param {String} [tPPNokRedirectURI] If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. 
     * @param {String} [tPPNotificationURI] URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. 
     * @param {String} [tPPNotificationContentPreferred] The string has the form  status=X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:model/StartConsentAuthorisationRequest} [startConsentAuthorisationRequest] 
     * @param {module:api/SigningBasketsServiceSBSApi~startSigningBasketAuthorisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartScaprocessResponse}
     */
    startSigningBasketAuthorisation(basketId, xRequestID, opts, callback) {
      opts = opts || {};
      let postBody = opts['startConsentAuthorisationRequest'];
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling startSigningBasketAuthorisation");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling startSigningBasketAuthorisation");
      }

      let pathParams = {
        'basketId': basketId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'PSU-ID': opts['PSU_ID'],
        'PSU-ID-Type': opts['pSUIDType'],
        'PSU-Corporate-ID': opts['pSUCorporateID'],
        'PSU-Corporate-ID-Type': opts['pSUCorporateIDType'],
        'TPP-Redirect-Preferred': opts['tPPRedirectPreferred'],
        'TPP-Redirect-URI': opts['tPPRedirectURI'],
        'TPP-Nok-Redirect-URI': opts['tPPNokRedirectURI'],
        'TPP-Notification-URI': opts['tPPNotificationURI'],
        'TPP-Notification-Content-Preferred': opts['tPPNotificationContentPreferred'],
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = StartScaprocessResponse;
      return this.apiClient.callApi(
        '/v1/signing-baskets/{basketId}/authorisations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSigningBasketPsuData operation.
     * @callback module:api/SigningBasketsServiceSBSApi~updateSigningBasketPsuDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateConsentsPsuData200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update PSU data for signing basket
     * This method update PSU data on the signing basket resource if needed.  It may authorise a igning basket within the embedded SCA approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU data request is only applicable for   * adding the PSU Identification, if not provided yet in the payment initiation request or the account information consent request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The update PSU data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA approach might depend on the chosen SCA method.  For that reason, the following possible update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU autorization Method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param {String} basketId This identification of the corresponding signing basket object. 
     * @param {String} authorisationId Resource identification of the related SCA.
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [PSU_ID] Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP's documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation. 
     * @param {String} [pSUIDType] Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP's documentation. 
     * @param {String} [pSUCorporateID] Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
     * @param {String} [pSUCorporateIDType] Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:model/UpdateConsentsPsuDataRequest} [updateConsentsPsuDataRequest] 
     * @param {module:api/SigningBasketsServiceSBSApi~updateSigningBasketPsuDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateConsentsPsuData200Response}
     */
    updateSigningBasketPsuData(basketId, authorisationId, xRequestID, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateConsentsPsuDataRequest'];
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling updateSigningBasketPsuData");
      }
      // verify the required parameter 'authorisationId' is set
      if (authorisationId === undefined || authorisationId === null) {
        throw new Error("Missing the required parameter 'authorisationId' when calling updateSigningBasketPsuData");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling updateSigningBasketPsuData");
      }

      let pathParams = {
        'basketId': basketId,
        'authorisationId': authorisationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'PSU-ID': opts['PSU_ID'],
        'PSU-ID-Type': opts['pSUIDType'],
        'PSU-Corporate-ID': opts['pSUCorporateID'],
        'PSU-Corporate-ID-Type': opts['pSUCorporateIDType'],
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = UpdateConsentsPsuData200Response;
      return this.apiClient.callApi(
        '/v1/signing-baskets/{basketId}/authorisations/{authorisationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
