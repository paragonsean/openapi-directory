/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CheckAvailabilityOfFunds200Response from '../model/CheckAvailabilityOfFunds200Response';
import ConfirmationOfFunds from '../model/ConfirmationOfFunds';
import Error400AIS from '../model/Error400AIS';
import Error400NGAIS from '../model/Error400NGAIS';
import Error401NGPIIS from '../model/Error401NGPIIS';
import Error401PIIS from '../model/Error401PIIS';
import Error403NGPIIS from '../model/Error403NGPIIS';
import Error403PIIS from '../model/Error403PIIS';
import Error404NGPIIS from '../model/Error404NGPIIS';
import Error404PIIS from '../model/Error404PIIS';
import Error405NGPIIS from '../model/Error405NGPIIS';
import Error405PIIS from '../model/Error405PIIS';
import Error409NGPIIS from '../model/Error409NGPIIS';
import Error409PIIS from '../model/Error409PIIS';

/**
* ConfirmationOfFundsServicePIIS service.
* @module api/ConfirmationOfFundsServicePIISApi
* @version 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
*/
export default class ConfirmationOfFundsServicePIISApi {

    /**
    * Constructs a new ConfirmationOfFundsServicePIISApi. 
    * @alias module:api/ConfirmationOfFundsServicePIISApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkAvailabilityOfFunds operation.
     * @callback module:api/ConfirmationOfFundsServicePIISApi~checkAvailabilityOfFundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckAvailabilityOfFunds200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirmation of funds request
     * Creates a confirmation of funds request at the ASPSP. Checks whether a specific amount is available at point of time of the request on an account linked to a given tuple card issuer(TPP)/card number, or addressed by IBAN and TPP respectively. If the related extended services are used a conditional Consent-ID is contained in the header. This field is contained but commented out in this specification.
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {module:model/ConfirmationOfFunds} confirmationOfFunds Request body for a confirmation of funds request. 
     * @param {Object} opts Optional parameters
     * @param {String} [authorization] This field  might be used in case where a consent was agreed between ASPSP and PSU through an OAuth2 based protocol, facilitated by the TPP. 
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {module:api/ConfirmationOfFundsServicePIISApi~checkAvailabilityOfFundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckAvailabilityOfFunds200Response}
     */
    checkAvailabilityOfFunds(xRequestID, confirmationOfFunds, opts, callback) {
      opts = opts || {};
      let postBody = confirmationOfFunds;
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling checkAvailabilityOfFunds");
      }
      // verify the required parameter 'confirmationOfFunds' is set
      if (confirmationOfFunds === undefined || confirmationOfFunds === null) {
        throw new Error("Missing the required parameter 'confirmationOfFunds' when calling checkAvailabilityOfFunds");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Authorization': opts['authorization'],
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = CheckAvailabilityOfFunds200Response;
      return this.apiClient.callApi(
        '/v1/funds-confirmations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
