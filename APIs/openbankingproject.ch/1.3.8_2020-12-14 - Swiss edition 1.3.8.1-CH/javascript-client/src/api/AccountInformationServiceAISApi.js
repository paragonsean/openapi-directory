/**
 * Swiss NextGen Banking API-Framework
 * # Summary The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.  The possible Approaches are:   * Redirect SCA Approach   * *(Not recommended by obp.ch community) OAuth SCA Approach*   * *(Not recommended by obp.ch community) Decoupled SCA Approach*   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*    Not every message defined in this API definition is necessary for all approaches.   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional   Therefore for a particular implementation of a compliant API it is only necessary to support   a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure   which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**   It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]      \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"    The element \"Accept\" will not be defined in this file at any place.    The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".  * There are several predefined types which might occur in payment initiation messages,   but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.  * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)   except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.  ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space 
 *
 * The version of the OpenAPI document: 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
 * Contact: info@obp.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountList from '../model/AccountList';
import Authorisations from '../model/Authorisations';
import ConsentInformationResponse200Json from '../model/ConsentInformationResponse200Json';
import ConsentStatusResponse200 from '../model/ConsentStatusResponse200';
import Consents from '../model/Consents';
import ConsentsResponse201 from '../model/ConsentsResponse201';
import Error400AIS from '../model/Error400AIS';
import Error400NGAIS from '../model/Error400NGAIS';
import Error401AIS from '../model/Error401AIS';
import Error401NGAIS from '../model/Error401NGAIS';
import Error403AIS from '../model/Error403AIS';
import Error403NGAIS from '../model/Error403NGAIS';
import Error404AIS from '../model/Error404AIS';
import Error404NGAIS from '../model/Error404NGAIS';
import Error405AIS from '../model/Error405AIS';
import Error405NGAIS from '../model/Error405NGAIS';
import Error406AIS from '../model/Error406AIS';
import Error406NGAIS from '../model/Error406NGAIS';
import Error409AIS from '../model/Error409AIS';
import Error409NGAIS from '../model/Error409NGAIS';
import Error429AIS from '../model/Error429AIS';
import Error429NGAIS from '../model/Error429NGAIS';
import GetTransactionDetails200Response from '../model/GetTransactionDetails200Response';
import GetTransactionList200Response from '../model/GetTransactionList200Response';
import GetTransactionList200Response1 from '../model/GetTransactionList200Response1';
import ReadAccountBalanceResponse200 from '../model/ReadAccountBalanceResponse200';
import ReadAccountDetails200Response from '../model/ReadAccountDetails200Response';
import ScaStatusResponse from '../model/ScaStatusResponse';
import StartConsentAuthorisationRequest from '../model/StartConsentAuthorisationRequest';
import StartScaprocessResponse from '../model/StartScaprocessResponse';
import TransactionsResponse200Json from '../model/TransactionsResponse200Json';
import UpdateConsentsPsuData200Response from '../model/UpdateConsentsPsuData200Response';
import UpdateConsentsPsuDataRequest from '../model/UpdateConsentsPsuDataRequest';

/**
* AccountInformationServiceAIS service.
* @module api/AccountInformationServiceAISApi
* @version 1.3.8_2020-12-14 - Swiss edition 1.3.8.1-CH
*/
export default class AccountInformationServiceAISApi {

    /**
    * Constructs a new AccountInformationServiceAISApi. 
    * @alias module:api/AccountInformationServiceAISApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createConsent operation.
     * @callback module:api/AccountInformationServiceAISApi~createConsentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsentsResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create consent
     * This method create a consent resource, defining access rights to dedicated accounts of  a given PSU-ID. These accounts are addressed explicitly in the method as  parameters as a core function.  **Side Effects** When this consent request is a request where the \"recurringIndicator\" equals \"true\", and if it exists already a former consent for recurring access on account information  for the addressed PSU, then the former consent automatically expires as soon as the new  consent request is authorised by the PSU.  Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all PSD2 related services for all available accounts.  As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account.  The relation to accounts is then handled afterwards between PSU and ASPSP.  This option is not supported for the Embedded SCA Approach.  As a last option, an ASPSP might in addition accept a command with access rights   * to see the list of available payment accounts or   * to see the list of available payment accounts with balances. 
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {String} pSUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. If not available, the TPP shall use the IP Address used by the TPP when submitting this request. 
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [PSU_ID] Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP's documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation. 
     * @param {String} [pSUIDType] Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP's documentation. 
     * @param {String} [pSUCorporateID] Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
     * @param {String} [pSUCorporateIDType] Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
     * @param {Boolean} [tPPRedirectPreferred] If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
     * @param {String} [tPPRedirectURI] URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \"true\". It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification. 
     * @param {String} [tPPNokRedirectURI] If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. 
     * @param {Boolean} [tPPExplicitAuthorisationPreferred] If it equals \"true\", the TPP prefers to start the authorisation process separately, e.g. because of the usage of a signing basket. This preference might be ignored by the ASPSP, if a signing basket is not supported as functionality.  If it equals \"false\" or if the parameter is not used, there is no preference of the TPP. This especially indicates that the TPP assumes a direct authorisation of the transaction in the next step, without using a signing basket. 
     * @param {String} [tPPBrandLoggingInformation] This header might be used by TPPs to inform the ASPSP about the brand used by the TPP towards the PSU.  This information is meant for logging entries to enhance communication between ASPSP and PSU or ASPSP and TPP.  This header might be ignored by the ASPSP. 
     * @param {String} [tPPNotificationURI] URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. 
     * @param {String} [tPPNotificationContentPreferred] The string has the form  status=X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:model/Consents} [consents] Request body for a consents request. 
     * @param {module:api/AccountInformationServiceAISApi~createConsentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsentsResponse201}
     */
    createConsent(xRequestID, pSUIPAddress, opts, callback) {
      opts = opts || {};
      let postBody = opts['consents'];
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling createConsent");
      }
      // verify the required parameter 'pSUIPAddress' is set
      if (pSUIPAddress === undefined || pSUIPAddress === null) {
        throw new Error("Missing the required parameter 'pSUIPAddress' when calling createConsent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'PSU-ID': opts['PSU_ID'],
        'PSU-ID-Type': opts['pSUIDType'],
        'PSU-Corporate-ID': opts['pSUCorporateID'],
        'PSU-Corporate-ID-Type': opts['pSUCorporateIDType'],
        'TPP-Redirect-Preferred': opts['tPPRedirectPreferred'],
        'TPP-Redirect-URI': opts['tPPRedirectURI'],
        'TPP-Nok-Redirect-URI': opts['tPPNokRedirectURI'],
        'TPP-Explicit-Authorisation-Preferred': opts['tPPExplicitAuthorisationPreferred'],
        'TPP-Brand-Logging-Information': opts['tPPBrandLoggingInformation'],
        'TPP-Notification-URI': opts['tPPNotificationURI'],
        'TPP-Notification-Content-Preferred': opts['tPPNotificationContentPreferred'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-IP-Address': pSUIPAddress,
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ConsentsResponse201;
      return this.apiClient.callApi(
        '/v1/consents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConsent operation.
     * @callback module:api/AccountInformationServiceAISApi~deleteConsentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Consent
     * The TPP can delete an account information consent object if needed.
     * @param {String} consentId ID of the corresponding consent object as returned by an account information consent request. 
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:api/AccountInformationServiceAISApi~deleteConsentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConsent(consentId, xRequestID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'consentId' is set
      if (consentId === undefined || consentId === null) {
        throw new Error("Missing the required parameter 'consentId' when calling deleteConsent");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling deleteConsent");
      }

      let pathParams = {
        'consentId': consentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/consents/{consentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountList operation.
     * @callback module:api/AccountInformationServiceAISApi~getAccountListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read account list
     * Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system. The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId, respectively the OAuth2 access token.  Returns all identifiers of the accounts, to which an account access has been granted to through the /consents endpoint by the PSU. In addition, relevant information about the accounts and hyperlinks to corresponding account information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available payment accounts of a PSU. In this case, this endpoint will deliver the information about all available payment accounts of the PSU at this ASPSP. 
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {String} consentID This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [withBalance] If contained, this function reads the list of accessible payment accounts including the booking balance, if granted by the PSU in the related consent and available by the ASPSP. This parameter might be ignored by the ASPSP. 
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:api/AccountInformationServiceAISApi~getAccountListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountList}
     */
    getAccountList(xRequestID, consentID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling getAccountList");
      }
      // verify the required parameter 'consentID' is set
      if (consentID === undefined || consentID === null) {
        throw new Error("Missing the required parameter 'consentID' when calling getAccountList");
      }

      let pathParams = {
      };
      let queryParams = {
        'withBalance': opts['withBalance']
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'Consent-ID': consentID,
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = AccountList;
      return this.apiClient.callApi(
        '/v1/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalances operation.
     * @callback module:api/AccountInformationServiceAISApi~getBalancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReadAccountBalanceResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read balance
     * Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"Get account list\" call.  The account-id is constant at least throughout the lifecycle of a given consent. 
     * @param {String} accountId This identification is denoting the addressed (card) account.  The account-id is retrieved by using a \"Read Account List\" or \"Read Card Account list\" call.  The account-id is the \"resourceId\" attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent. 
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {String} consentID This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. 
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:api/AccountInformationServiceAISApi~getBalancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReadAccountBalanceResponse200}
     */
    getBalances(accountId, xRequestID, consentID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getBalances");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling getBalances");
      }
      // verify the required parameter 'consentID' is set
      if (consentID === undefined || consentID === null) {
        throw new Error("Missing the required parameter 'consentID' when calling getBalances");
      }

      let pathParams = {
        'account-id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'Consent-ID': consentID,
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ReadAccountBalanceResponse200;
      return this.apiClient.callApi(
        '/v1/accounts/{account-id}/balances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConsentAuthorisation operation.
     * @callback module:api/AccountInformationServiceAISApi~getConsentAuthorisationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Authorisations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get consent authorisation sub-resources request
     * Return a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. 
     * @param {String} consentId ID of the corresponding consent object as returned by an account information consent request. 
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:api/AccountInformationServiceAISApi~getConsentAuthorisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Authorisations}
     */
    getConsentAuthorisation(consentId, xRequestID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'consentId' is set
      if (consentId === undefined || consentId === null) {
        throw new Error("Missing the required parameter 'consentId' when calling getConsentAuthorisation");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling getConsentAuthorisation");
      }

      let pathParams = {
        'consentId': consentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = Authorisations;
      return this.apiClient.callApi(
        '/v1/consents/{consentId}/authorisations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConsentInformation operation.
     * @callback module:api/AccountInformationServiceAISApi~getConsentInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsentInformationResponse200Json} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get consent request
     * Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a redirect SCA Approach. 
     * @param {String} consentId ID of the corresponding consent object as returned by an account information consent request. 
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:api/AccountInformationServiceAISApi~getConsentInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsentInformationResponse200Json}
     */
    getConsentInformation(consentId, xRequestID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'consentId' is set
      if (consentId === undefined || consentId === null) {
        throw new Error("Missing the required parameter 'consentId' when calling getConsentInformation");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling getConsentInformation");
      }

      let pathParams = {
        'consentId': consentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ConsentInformationResponse200Json;
      return this.apiClient.callApi(
        '/v1/consents/{consentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConsentScaStatus operation.
     * @callback module:api/AccountInformationServiceAISApi~getConsentScaStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScaStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read the SCA status of the consent authorisation
     * This method returns the SCA status of a consent initiation's authorisation sub-resource. 
     * @param {String} consentId ID of the corresponding consent object as returned by an account information consent request. 
     * @param {String} authorisationId Resource identification of the related SCA.
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:api/AccountInformationServiceAISApi~getConsentScaStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScaStatusResponse}
     */
    getConsentScaStatus(consentId, authorisationId, xRequestID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'consentId' is set
      if (consentId === undefined || consentId === null) {
        throw new Error("Missing the required parameter 'consentId' when calling getConsentScaStatus");
      }
      // verify the required parameter 'authorisationId' is set
      if (authorisationId === undefined || authorisationId === null) {
        throw new Error("Missing the required parameter 'authorisationId' when calling getConsentScaStatus");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling getConsentScaStatus");
      }

      let pathParams = {
        'consentId': consentId,
        'authorisationId': authorisationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ScaStatusResponse;
      return this.apiClient.callApi(
        '/v1/consents/{consentId}/authorisations/{authorisationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConsentStatus operation.
     * @callback module:api/AccountInformationServiceAISApi~getConsentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsentStatusResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consent status request
     * Read the status of an account information consent resource.
     * @param {String} consentId ID of the corresponding consent object as returned by an account information consent request. 
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:api/AccountInformationServiceAISApi~getConsentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsentStatusResponse200}
     */
    getConsentStatus(consentId, xRequestID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'consentId' is set
      if (consentId === undefined || consentId === null) {
        throw new Error("Missing the required parameter 'consentId' when calling getConsentStatus");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling getConsentStatus");
      }

      let pathParams = {
        'consentId': consentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ConsentStatusResponse200;
      return this.apiClient.callApi(
        '/v1/consents/{consentId}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionDetails operation.
     * @callback module:api/AccountInformationServiceAISApi~getTransactionDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTransactionDetails200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read transaction details
     * Reads transaction details from a given transaction addressed by \"transactionId\" on a given account addressed by \"account-id\". This call is only available on transactions as reported in a JSON format.  **Remark:** Please note that the PATH might be already given in detail by the corresponding entry of the response of the \"Read Transaction List\" call within the _links subfield. 
     * @param {String} accountId This identification is denoting the addressed (card) account.  The account-id is retrieved by using a \"Read Account List\" or \"Read Card Account list\" call.  The account-id is the \"resourceId\" attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent. 
     * @param {String} transactionId This identification is given by the attribute transactionId of the corresponding entry of a transaction list. 
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {String} consentID This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. 
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:api/AccountInformationServiceAISApi~getTransactionDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTransactionDetails200Response}
     */
    getTransactionDetails(accountId, transactionId, xRequestID, consentID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getTransactionDetails");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling getTransactionDetails");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling getTransactionDetails");
      }
      // verify the required parameter 'consentID' is set
      if (consentID === undefined || consentID === null) {
        throw new Error("Missing the required parameter 'consentID' when calling getTransactionDetails");
      }

      let pathParams = {
        'account-id': accountId,
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'Consent-ID': consentID,
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = GetTransactionDetails200Response;
      return this.apiClient.callApi(
        '/v1/accounts/{account-id}/transactions/{transactionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionList operation.
     * @callback module:api/AccountInformationServiceAISApi~getTransactionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionsResponse200Json} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read transaction list of an account
     * Read transaction reports or transaction lists of a given account ddressed by \"account-id\", depending on the steering parameter \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\". The ASPSP might add balance information, if transaction lists without balances are not supported. 
     * @param {String} accountId This identification is denoting the addressed (card) account.  The account-id is retrieved by using a \"Read Account List\" or \"Read Card Account list\" call.  The account-id is the \"resourceId\" attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent. 
     * @param {module:model/String} bookingStatus Permitted codes are    * \"information\",   * \"booked\",   * \"pending\", and    * \"both\" \"booked\" shall be supported by the ASPSP. To support the \"pending\" and \"both\" feature is optional for the ASPSP, Error code if not supported in the online banking frontend 
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {String} consentID This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. 
     * @param {Object} opts Optional parameters
     * @param {Date} [dateFrom] Conditional: Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required and if bookingStatus does not equal \"information\".  For booked transactions, the relevant date is the booking date.   For pending transactions, the relevant date is the entry date, which may not be transparent  neither in this API nor other channels of the ASPSP. 
     * @param {Date} [dateTo] End date (inclusive the data dateTo) of the transaction list, default is \"now\" if not given.  Might be ignored if a delta function is used.  For booked transactions, the relevant date is the booking date.  For pending transactions, the relevant date is the entry date, which may not be transparent neither in this API nor other channels of the ASPSP. 
     * @param {String} [entryReferenceFrom] This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries \"dateFrom\" and \"dateTo\" might be ignored by the ASPSP if a delta report is supported.  Optional if supported by API provider. 
     * @param {Boolean} [deltaList] This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report. This delta indicator might be rejected by the ASPSP if this function is not supported. Optional if supported by API provider
     * @param {Boolean} [withBalance] If contained, this function reads the list of accessible payment accounts including the booking balance, if granted by the PSU in the related consent and available by the ASPSP. This parameter might be ignored by the ASPSP. 
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:api/AccountInformationServiceAISApi~getTransactionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionsResponse200Json}
     */
    getTransactionList(accountId, bookingStatus, xRequestID, consentID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getTransactionList");
      }
      // verify the required parameter 'bookingStatus' is set
      if (bookingStatus === undefined || bookingStatus === null) {
        throw new Error("Missing the required parameter 'bookingStatus' when calling getTransactionList");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling getTransactionList");
      }
      // verify the required parameter 'consentID' is set
      if (consentID === undefined || consentID === null) {
        throw new Error("Missing the required parameter 'consentID' when calling getTransactionList");
      }

      let pathParams = {
        'account-id': accountId
      };
      let queryParams = {
        'dateFrom': opts['dateFrom'],
        'dateTo': opts['dateTo'],
        'entryReferenceFrom': opts['entryReferenceFrom'],
        'bookingStatus': bookingStatus,
        'deltaList': opts['deltaList'],
        'withBalance': opts['withBalance']
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'Consent-ID': consentID,
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain', 'application/problem+json'];
      let returnType = TransactionsResponse200Json;
      return this.apiClient.callApi(
        '/v1/accounts/{account-id}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readAccountDetails operation.
     * @callback module:api/AccountInformationServiceAISApi~readAccountDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReadAccountDetails200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read account details
     * Reads details about an account, with balances where required.  It is assumed that a consent of the PSU to  this access is already given and stored on the ASPSP system.  The addressed details of this account depends then on the stored consent addressed by consentId,  respectively the OAuth2 access token.  **NOTE:** The account-id can represent a multicurrency account. In this case the currency code is set to \"XXX\".  Give detailed information about the addressed account.  Give detailed information about the addressed account together with balance information 
     * @param {String} accountId This identification is denoting the addressed (card) account.  The account-id is retrieved by using a \"Read Account List\" or \"Read Card Account list\" call.  The account-id is the \"resourceId\" attribute of the account structure.  Its value is constant at least throughout the lifecycle of a given consent. 
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {String} consentID This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [withBalance] If contained, this function reads the list of accessible payment accounts including the booking balance, if granted by the PSU in the related consent and available by the ASPSP. This parameter might be ignored by the ASPSP. 
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:api/AccountInformationServiceAISApi~readAccountDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReadAccountDetails200Response}
     */
    readAccountDetails(accountId, xRequestID, consentID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling readAccountDetails");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling readAccountDetails");
      }
      // verify the required parameter 'consentID' is set
      if (consentID === undefined || consentID === null) {
        throw new Error("Missing the required parameter 'consentID' when calling readAccountDetails");
      }

      let pathParams = {
        'account-id': accountId
      };
      let queryParams = {
        'withBalance': opts['withBalance']
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'Consent-ID': consentID,
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = ReadAccountDetails200Response;
      return this.apiClient.callApi(
        '/v1/accounts/{account-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startConsentAuthorisation operation.
     * @callback module:api/AccountInformationServiceAISApi~startConsentAuthorisationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartScaprocessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start the authorisation process for a consent
     * Create an authorisation sub-resource and start the authorisation process of a consent. The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary, since the related authorisation resource will be automatically created by the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource.  This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'      * 'startAuthorisationWithEncryptedPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      payment cancellation response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for     executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param {String} consentId ID of the corresponding consent object as returned by an account information consent request. 
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [PSU_ID] Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP's documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation. 
     * @param {String} [pSUIDType] Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP's documentation. 
     * @param {String} [pSUCorporateID] Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
     * @param {String} [pSUCorporateIDType] Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
     * @param {Boolean} [tPPRedirectPreferred] If it equals \"true\", the TPP prefers a redirect over an embedded SCA approach. If it equals \"false\", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. 
     * @param {String} [tPPRedirectURI] URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically when TPP-Redirect-Preferred equals \"true\". It is recommended to always use this header field.  **Remark for Future:** This field might be changed to mandatory in the next version of the specification. 
     * @param {String} [tPPNokRedirectURI] If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. 
     * @param {String} [tPPNotificationURI] URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. 
     * @param {String} [tPPNotificationContentPreferred] The string has the form  status=X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:model/StartConsentAuthorisationRequest} [startConsentAuthorisationRequest] 
     * @param {module:api/AccountInformationServiceAISApi~startConsentAuthorisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartScaprocessResponse}
     */
    startConsentAuthorisation(consentId, xRequestID, opts, callback) {
      opts = opts || {};
      let postBody = opts['startConsentAuthorisationRequest'];
      // verify the required parameter 'consentId' is set
      if (consentId === undefined || consentId === null) {
        throw new Error("Missing the required parameter 'consentId' when calling startConsentAuthorisation");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling startConsentAuthorisation");
      }

      let pathParams = {
        'consentId': consentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'PSU-ID': opts['PSU_ID'],
        'PSU-ID-Type': opts['pSUIDType'],
        'PSU-Corporate-ID': opts['pSUCorporateID'],
        'PSU-Corporate-ID-Type': opts['pSUCorporateIDType'],
        'TPP-Redirect-Preferred': opts['tPPRedirectPreferred'],
        'TPP-Redirect-URI': opts['tPPRedirectURI'],
        'TPP-Nok-Redirect-URI': opts['tPPNokRedirectURI'],
        'TPP-Notification-URI': opts['tPPNotificationURI'],
        'TPP-Notification-Content-Preferred': opts['tPPNotificationContentPreferred'],
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = StartScaprocessResponse;
      return this.apiClient.callApi(
        '/v1/consents/{consentId}/authorisations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConsentsPsuData operation.
     * @callback module:api/AccountInformationServiceAISApi~updateConsentsPsuDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateConsentsPsuData200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update PSU Data for consents
     * This method update PSU data on the consents  resource if needed. It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific update PSU data request is only applicable for   * adding the PSU Identification, if not provided yet in the payment initiation request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU autorization method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param {String} consentId ID of the corresponding consent object as returned by an account information consent request. 
     * @param {String} authorisationId Resource identification of the related SCA.
     * @param {String} xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param {Object} opts Optional parameters
     * @param {String} [digest] Is contained if and only if the \"Signature\" element is contained in the header of the request.
     * @param {String} [signature] A signature of the request by the TPP on application level. This might be mandated by ASPSP. 
     * @param {Blob} [tPPSignatureCertificate] The certificate used for signing the request, in base64 encoding. Must be contained if a signature is contained. 
     * @param {String} [PSU_ID] Client ID of the PSU in the ASPSP client interface.  Might be mandated in the ASPSP's documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match, according to ASPSP documentation. 
     * @param {String} [pSUIDType] Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP's documentation. 
     * @param {String} [pSUCorporateID] Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
     * @param {String} [pSUCorporateIDType] Might be mandated in the ASPSP's documentation. Only used in a corporate context. 
     * @param {String} [pSUIPAddress] The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. It shall be contained if and only if this request was actively initiated by the PSU. 
     * @param {String} [pSUIPPort] The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
     * @param {String} [pSUAccept] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptCharset] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptEncoding] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUAcceptLanguage] The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. 
     * @param {String} [pSUUserAgent] The forwarded Agent header field of the HTTP request between PSU and TPP, if available. 
     * @param {module:model/String} [pSUHttpMethod] HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE 
     * @param {String} [pSUDeviceID] UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. 
     * @param {String} [pSUGeoLocation] The forwarded Geo Location of the corresponding http request between PSU and TPP if available. 
     * @param {module:model/UpdateConsentsPsuDataRequest} [updateConsentsPsuDataRequest] 
     * @param {module:api/AccountInformationServiceAISApi~updateConsentsPsuDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateConsentsPsuData200Response}
     */
    updateConsentsPsuData(consentId, authorisationId, xRequestID, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateConsentsPsuDataRequest'];
      // verify the required parameter 'consentId' is set
      if (consentId === undefined || consentId === null) {
        throw new Error("Missing the required parameter 'consentId' when calling updateConsentsPsuData");
      }
      // verify the required parameter 'authorisationId' is set
      if (authorisationId === undefined || authorisationId === null) {
        throw new Error("Missing the required parameter 'authorisationId' when calling updateConsentsPsuData");
      }
      // verify the required parameter 'xRequestID' is set
      if (xRequestID === undefined || xRequestID === null) {
        throw new Error("Missing the required parameter 'xRequestID' when calling updateConsentsPsuData");
      }

      let pathParams = {
        'consentId': consentId,
        'authorisationId': authorisationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-ID': xRequestID,
        'Digest': opts['digest'],
        'Signature': opts['signature'],
        'TPP-Signature-Certificate': opts['tPPSignatureCertificate'],
        'PSU-ID': opts['PSU_ID'],
        'PSU-ID-Type': opts['pSUIDType'],
        'PSU-Corporate-ID': opts['pSUCorporateID'],
        'PSU-Corporate-ID-Type': opts['pSUCorporateIDType'],
        'PSU-IP-Address': opts['pSUIPAddress'],
        'PSU-IP-Port': opts['pSUIPPort'],
        'PSU-Accept': opts['pSUAccept'],
        'PSU-Accept-Charset': opts['pSUAcceptCharset'],
        'PSU-Accept-Encoding': opts['pSUAcceptEncoding'],
        'PSU-Accept-Language': opts['pSUAcceptLanguage'],
        'PSU-User-Agent': opts['pSUUserAgent'],
        'PSU-Http-Method': opts['pSUHttpMethod'],
        'PSU-Device-ID': opts['pSUDeviceID'],
        'PSU-Geo-Location': opts['pSUGeoLocation']
      };
      let formParams = {
      };

      let authNames = ['BearerAuthOAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/problem+json'];
      let returnType = UpdateConsentsPsuData200Response;
      return this.apiClient.callApi(
        '/v1/consents/{consentId}/authorisations/{authorisationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
