/**
 * Daymet Single Pixel Extraction Tool API
 * Welcome to the Daymet Single Pixel Extraction Tool API. You can use this API to download daily surface data within the Daymet database in a `csv` or `json` format for a single point. This API allows users to query a single geographic point by latitude and longitude in decimal degrees. A routine is executed that translates the (lon, lat) coordinates into projected Daymet (x,y) Lambert Conformal Coordinates. These coordinates are used to access the Daymet database of daily interpolated surface weather variables. Daily data from the nearest 1 km x 1 km Daymet grid cell are extracted from the database.  If you would like to learn how to automate the download of multiple locations for the Daymet Single Pixel Extraction Tool, click [here](https://github.com/ornldaac/daymet-single-pixel-batch).
 *
 * The version of the OpenAPI document: 1.0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  lat double [required]
    * @param[in]  lon double [required]
    * @param[in]  format QString [required]
    * @param[in]  vars QList<QString> [optional]
    * @param[in]  years QList<QString> [optional]
    * @param[in]  start QDate [optional]
    * @param[in]  end QDate [optional]
    */
    virtual void apiDataGet(const double &lat, const double &lon, const QString &format, const ::OpenAPI::OptionalParam<QList<QString>> &vars = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &years = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &start = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &end = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  lat double [required]
    * @param[in]  lon double [required]
    * @param[in]  format QString [required]
    * @param[in]  vars QList<QString> [optional]
    * @param[in]  years QList<QString> [optional]
    * @param[in]  start QDate [optional]
    * @param[in]  end QDate [optional]
    */
    virtual void previewGet(const double &lat, const double &lon, const QString &format, const ::OpenAPI::OptionalParam<QList<QString>> &vars = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &years = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &start = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &end = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  lat double [required]
    * @param[in]  lon double [required]
    * @param[in]  format QString [required]
    * @param[in]  vars QList<QString> [optional]
    * @param[in]  years QList<QString> [optional]
    * @param[in]  start QDate [optional]
    * @param[in]  end QDate [optional]
    */
    virtual void sendSaveDataGet(const double &lat, const double &lon, const QString &format, const ::OpenAPI::OptionalParam<QList<QString>> &vars = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &years = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &start = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &end = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  lat double [required]
    * @param[in]  lon double [required]
    * @param[in]  format QString [required]
    * @param[in]  vars QList<QString> [optional]
    * @param[in]  years QList<QString> [optional]
    * @param[in]  start QDate [optional]
    * @param[in]  end QDate [optional]
    */
    virtual void visualizeGet(const double &lat, const double &lon, const QString &format, const ::OpenAPI::OptionalParam<QList<QString>> &vars = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &years = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &start = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &end = ::OpenAPI::OptionalParam<QDate>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiDataGetCallback(OAIHttpRequestWorker *worker);
    void previewGetCallback(OAIHttpRequestWorker *worker);
    void sendSaveDataGetCallback(OAIHttpRequestWorker *worker);
    void visualizeGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiDataGetSignal();
    void previewGetSignal();
    void sendSaveDataGetSignal();
    void visualizeGetSignal();


    void apiDataGetSignalFull(OAIHttpRequestWorker *worker);
    void previewGetSignalFull(OAIHttpRequestWorker *worker);
    void sendSaveDataGetSignalFull(OAIHttpRequestWorker *worker);
    void visualizeGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiDataGetSignalError() instead")
    void apiDataGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiDataGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use previewGetSignalError() instead")
    void previewGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void previewGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendSaveDataGetSignalError() instead")
    void sendSaveDataGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sendSaveDataGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeGetSignalError() instead")
    void visualizeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiDataGetSignalErrorFull() instead")
    void apiDataGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDataGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use previewGetSignalErrorFull() instead")
    void previewGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void previewGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendSaveDataGetSignalErrorFull() instead")
    void sendSaveDataGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendSaveDataGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use visualizeGetSignalErrorFull() instead")
    void visualizeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void visualizeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
