/**
 * Daymet Single Pixel Extraction Tool API
 * Welcome to the Daymet Single Pixel Extraction Tool API. You can use this API to download daily surface data within the Daymet database in a `csv` or `json` format for a single point. This API allows users to query a single geographic point by latitude and longitude in decimal degrees. A routine is executed that translates the (lon, lat) coordinates into projected Daymet (x,y) Lambert Conformal Coordinates. These coordinates are used to access the Daymet database of daily interpolated surface weather variables. Daily data from the nearest 1 km x 1 km Daymet grid cell are extracted from the database.  If you would like to learn how to automate the download of multiple locations for the Daymet Single Pixel Extraction Tool, click [here](https://github.com/ornldaac/daymet-single-pixel-batch).
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.2
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiDataGet operation.
     * @callback module:api/DefaultApi~apiDataGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Daymet Data
     * Returns a csv or json of the requested data to local machine
     * @param {Number} lat Latitude component of location.
     * @param {Number} lon Longitude component of location.
     * @param {module:model/String} format Specify a format for data retrieval.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [vars] Daymet Daily weather estimates.
     * @param {Array.<String>} [years] Subset on years [1980..2019].
     * @param {Date} [start] Subset on dates (start date).
     * @param {Date} [end] Subset on dates (end date).
     * @param {module:api/DefaultApi~apiDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDataGet(lat, lon, format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling apiDataGet");
      }
      // verify the required parameter 'lon' is set
      if (lon === undefined || lon === null) {
        throw new Error("Missing the required parameter 'lon' when calling apiDataGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling apiDataGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat': lat,
        'lon': lon,
        'vars': this.apiClient.buildCollectionParam(opts['vars'], 'csv'),
        'years': this.apiClient.buildCollectionParam(opts['years'], 'csv'),
        'start': opts['start'],
        'end': opts['end'],
        'format': format
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the previewGet operation.
     * @callback module:api/DefaultApi~previewGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preview Daymet Data in a web browser
     * Returns a table to the browser displaying requested data
     * @param {Number} lat Latitude component of location
     * @param {Number} lon Longitude component of location.
     * @param {module:model/String} format Specify a format for data retrieval.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [vars] Daymet Daily weather estimates.
     * @param {Array.<String>} [years] Subset on years [1980..2019].
     * @param {Date} [start] Subset on dates (start date).
     * @param {Date} [end] Subset on dates (end date).
     * @param {module:api/DefaultApi~previewGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    previewGet(lat, lon, format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling previewGet");
      }
      // verify the required parameter 'lon' is set
      if (lon === undefined || lon === null) {
        throw new Error("Missing the required parameter 'lon' when calling previewGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling previewGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat': lat,
        'lon': lon,
        'vars': this.apiClient.buildCollectionParam(opts['vars'], 'csv'),
        'years': this.apiClient.buildCollectionParam(opts['years'], 'csv'),
        'start': opts['start'],
        'end': opts['end'],
        'format': format
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/preview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendSaveDataGet operation.
     * @callback module:api/DefaultApi~sendSaveDataGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Daymet Data
     * Returns a csv or json of the requested data to local machine
     * @param {Number} lat Latitude component of location.
     * @param {Number} lon Longitude component of location.
     * @param {module:model/String} format Specify a format for data retrieval.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [vars] Daymet Daily weather estimates.
     * @param {Array.<String>} [years] Subset on years [1980..2019].
     * @param {Date} [start] Subset on dates (start date).
     * @param {Date} [end] Subset on dates (end date).
     * @param {module:api/DefaultApi~sendSaveDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sendSaveDataGet(lat, lon, format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling sendSaveDataGet");
      }
      // verify the required parameter 'lon' is set
      if (lon === undefined || lon === null) {
        throw new Error("Missing the required parameter 'lon' when calling sendSaveDataGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling sendSaveDataGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat': lat,
        'lon': lon,
        'vars': this.apiClient.buildCollectionParam(opts['vars'], 'csv'),
        'years': this.apiClient.buildCollectionParam(opts['years'], 'csv'),
        'start': opts['start'],
        'end': opts['end'],
        'format': format
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/send/saveData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the visualizeGet operation.
     * @callback module:api/DefaultApi~visualizeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Visualize Daymet Data in a web browser
     * Returns plots to a web browser of requested data using Plotly
     * @param {Number} lat Latitude component of location.
     * @param {Number} lon Longitude component of location.
     * @param {module:model/String} format Specify a format for data retrieval.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [vars] Daymet Daily weather estimates.
     * @param {Array.<String>} [years] Subset on years [1980..2019].
     * @param {Date} [start] Subset on dates (start date).
     * @param {Date} [end] Subset on dates (end date).
     * @param {module:api/DefaultApi~visualizeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    visualizeGet(lat, lon, format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling visualizeGet");
      }
      // verify the required parameter 'lon' is set
      if (lon === undefined || lon === null) {
        throw new Error("Missing the required parameter 'lon' when calling visualizeGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling visualizeGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat': lat,
        'lon': lon,
        'vars': this.apiClient.buildCollectionParam(opts['vars'], 'csv'),
        'years': this.apiClient.buildCollectionParam(opts['years'], 'csv'),
        'start': opts['start'],
        'end': opts['end'],
        'format': format
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/visualize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
