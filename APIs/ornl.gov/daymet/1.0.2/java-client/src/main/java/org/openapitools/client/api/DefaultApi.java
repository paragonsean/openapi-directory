/*
 * Daymet Single Pixel Extraction Tool API
 * Welcome to the Daymet Single Pixel Extraction Tool API. You can use this API to download daily surface data within the Daymet database in a `csv` or `json` format for a single point. This API allows users to query a single geographic point by latitude and longitude in decimal degrees. A routine is executed that translates the (lon, lat) coordinates into projected Daymet (x,y) Lambert Conformal Coordinates. These coordinates are used to access the Daymet database of daily interpolated surface weather variables. Daily data from the nearest 1 km x 1 km Daymet grid cell are extracted from the database.  If you would like to learn how to automate the download of multiple locations for the Daymet Single Pixel Extraction Tool, click [here](https://github.com/ornldaac/daymet-single-pixel-batch).
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiDataGet
     * @param lat Latitude component of location. (required)
     * @param lon Longitude component of location. (required)
     * @param format Specify a format for data retrieval. (required)
     * @param vars Daymet Daily weather estimates. (optional)
     * @param years Subset on years [1980..2019]. (optional)
     * @param start Subset on dates (start date). (optional)
     * @param end Subset on dates (end date). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Execution </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDataGetCall(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (vars != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "vars", vars));
        }

        if (years != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "years", years));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDataGetValidateBeforeCall(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling apiDataGet(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling apiDataGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling apiDataGet(Async)");
        }

        return apiDataGetCall(lat, lon, format, vars, years, start, end, _callback);

    }

    /**
     * Download Daymet Data
     * Returns a csv or json of the requested data to local machine
     * @param lat Latitude component of location. (required)
     * @param lon Longitude component of location. (required)
     * @param format Specify a format for data retrieval. (required)
     * @param vars Daymet Daily weather estimates. (optional)
     * @param years Subset on years [1980..2019]. (optional)
     * @param start Subset on dates (start date). (optional)
     * @param end Subset on dates (end date). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Execution </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public void apiDataGet(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end) throws ApiException {
        apiDataGetWithHttpInfo(lat, lon, format, vars, years, start, end);
    }

    /**
     * Download Daymet Data
     * Returns a csv or json of the requested data to local machine
     * @param lat Latitude component of location. (required)
     * @param lon Longitude component of location. (required)
     * @param format Specify a format for data retrieval. (required)
     * @param vars Daymet Daily weather estimates. (optional)
     * @param years Subset on years [1980..2019]. (optional)
     * @param start Subset on dates (start date). (optional)
     * @param end Subset on dates (end date). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Execution </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiDataGetWithHttpInfo(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end) throws ApiException {
        okhttp3.Call localVarCall = apiDataGetValidateBeforeCall(lat, lon, format, vars, years, start, end, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Daymet Data (asynchronously)
     * Returns a csv or json of the requested data to local machine
     * @param lat Latitude component of location. (required)
     * @param lon Longitude component of location. (required)
     * @param format Specify a format for data retrieval. (required)
     * @param vars Daymet Daily weather estimates. (optional)
     * @param years Subset on years [1980..2019]. (optional)
     * @param start Subset on dates (start date). (optional)
     * @param end Subset on dates (end date). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Execution </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDataGetAsync(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDataGetValidateBeforeCall(lat, lon, format, vars, years, start, end, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for previewGet
     * @param lat Latitude component of location (required)
     * @param lon Longitude component of location. (required)
     * @param format Specify a format for data retrieval. (required)
     * @param vars Daymet Daily weather estimates. (optional)
     * @param years Subset on years [1980..2019]. (optional)
     * @param start Subset on dates (start date). (optional)
     * @param end Subset on dates (end date). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Execution </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewGetCall(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/preview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (vars != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "vars", vars));
        }

        if (years != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "years", years));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewGetValidateBeforeCall(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling previewGet(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling previewGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling previewGet(Async)");
        }

        return previewGetCall(lat, lon, format, vars, years, start, end, _callback);

    }

    /**
     * Preview Daymet Data in a web browser
     * Returns a table to the browser displaying requested data
     * @param lat Latitude component of location (required)
     * @param lon Longitude component of location. (required)
     * @param format Specify a format for data retrieval. (required)
     * @param vars Daymet Daily weather estimates. (optional)
     * @param years Subset on years [1980..2019]. (optional)
     * @param start Subset on dates (start date). (optional)
     * @param end Subset on dates (end date). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Execution </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public void previewGet(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end) throws ApiException {
        previewGetWithHttpInfo(lat, lon, format, vars, years, start, end);
    }

    /**
     * Preview Daymet Data in a web browser
     * Returns a table to the browser displaying requested data
     * @param lat Latitude component of location (required)
     * @param lon Longitude component of location. (required)
     * @param format Specify a format for data retrieval. (required)
     * @param vars Daymet Daily weather estimates. (optional)
     * @param years Subset on years [1980..2019]. (optional)
     * @param start Subset on dates (start date). (optional)
     * @param end Subset on dates (end date). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Execution </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> previewGetWithHttpInfo(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end) throws ApiException {
        okhttp3.Call localVarCall = previewGetValidateBeforeCall(lat, lon, format, vars, years, start, end, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Preview Daymet Data in a web browser (asynchronously)
     * Returns a table to the browser displaying requested data
     * @param lat Latitude component of location (required)
     * @param lon Longitude component of location. (required)
     * @param format Specify a format for data retrieval. (required)
     * @param vars Daymet Daily weather estimates. (optional)
     * @param years Subset on years [1980..2019]. (optional)
     * @param start Subset on dates (start date). (optional)
     * @param end Subset on dates (end date). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Execution </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewGetAsync(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewGetValidateBeforeCall(lat, lon, format, vars, years, start, end, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendSaveDataGet
     * @param lat Latitude component of location. (required)
     * @param lon Longitude component of location. (required)
     * @param format Specify a format for data retrieval. (required)
     * @param vars Daymet Daily weather estimates. (optional)
     * @param years Subset on years [1980..2019]. (optional)
     * @param start Subset on dates (start date). (optional)
     * @param end Subset on dates (end date). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Execution </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendSaveDataGetCall(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/send/saveData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (vars != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "vars", vars));
        }

        if (years != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "years", years));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendSaveDataGetValidateBeforeCall(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling sendSaveDataGet(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling sendSaveDataGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling sendSaveDataGet(Async)");
        }

        return sendSaveDataGetCall(lat, lon, format, vars, years, start, end, _callback);

    }

    /**
     * Download Daymet Data
     * Returns a csv or json of the requested data to local machine
     * @param lat Latitude component of location. (required)
     * @param lon Longitude component of location. (required)
     * @param format Specify a format for data retrieval. (required)
     * @param vars Daymet Daily weather estimates. (optional)
     * @param years Subset on years [1980..2019]. (optional)
     * @param start Subset on dates (start date). (optional)
     * @param end Subset on dates (end date). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Execution </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public void sendSaveDataGet(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end) throws ApiException {
        sendSaveDataGetWithHttpInfo(lat, lon, format, vars, years, start, end);
    }

    /**
     * Download Daymet Data
     * Returns a csv or json of the requested data to local machine
     * @param lat Latitude component of location. (required)
     * @param lon Longitude component of location. (required)
     * @param format Specify a format for data retrieval. (required)
     * @param vars Daymet Daily weather estimates. (optional)
     * @param years Subset on years [1980..2019]. (optional)
     * @param start Subset on dates (start date). (optional)
     * @param end Subset on dates (end date). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Execution </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sendSaveDataGetWithHttpInfo(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end) throws ApiException {
        okhttp3.Call localVarCall = sendSaveDataGetValidateBeforeCall(lat, lon, format, vars, years, start, end, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Download Daymet Data (asynchronously)
     * Returns a csv or json of the requested data to local machine
     * @param lat Latitude component of location. (required)
     * @param lon Longitude component of location. (required)
     * @param format Specify a format for data retrieval. (required)
     * @param vars Daymet Daily weather estimates. (optional)
     * @param years Subset on years [1980..2019]. (optional)
     * @param start Subset on dates (start date). (optional)
     * @param end Subset on dates (end date). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Execution </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendSaveDataGetAsync(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendSaveDataGetValidateBeforeCall(lat, lon, format, vars, years, start, end, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeGet
     * @param lat Latitude component of location. (required)
     * @param lon Longitude component of location. (required)
     * @param format Specify a format for data retrieval. (required)
     * @param vars Daymet Daily weather estimates. (optional)
     * @param years Subset on years [1980..2019]. (optional)
     * @param start Subset on dates (start date). (optional)
     * @param end Subset on dates (end date). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Execution </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call visualizeGetCall(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/visualize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (vars != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "vars", vars));
        }

        if (years != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "years", years));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeGetValidateBeforeCall(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling visualizeGet(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling visualizeGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling visualizeGet(Async)");
        }

        return visualizeGetCall(lat, lon, format, vars, years, start, end, _callback);

    }

    /**
     * Visualize Daymet Data in a web browser
     * Returns plots to a web browser of requested data using Plotly
     * @param lat Latitude component of location. (required)
     * @param lon Longitude component of location. (required)
     * @param format Specify a format for data retrieval. (required)
     * @param vars Daymet Daily weather estimates. (optional)
     * @param years Subset on years [1980..2019]. (optional)
     * @param start Subset on dates (start date). (optional)
     * @param end Subset on dates (end date). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Execution </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public void visualizeGet(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end) throws ApiException {
        visualizeGetWithHttpInfo(lat, lon, format, vars, years, start, end);
    }

    /**
     * Visualize Daymet Data in a web browser
     * Returns plots to a web browser of requested data using Plotly
     * @param lat Latitude component of location. (required)
     * @param lon Longitude component of location. (required)
     * @param format Specify a format for data retrieval. (required)
     * @param vars Daymet Daily weather estimates. (optional)
     * @param years Subset on years [1980..2019]. (optional)
     * @param start Subset on dates (start date). (optional)
     * @param end Subset on dates (end date). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Execution </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> visualizeGetWithHttpInfo(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end) throws ApiException {
        okhttp3.Call localVarCall = visualizeGetValidateBeforeCall(lat, lon, format, vars, years, start, end, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Visualize Daymet Data in a web browser (asynchronously)
     * Returns plots to a web browser of requested data using Plotly
     * @param lat Latitude component of location. (required)
     * @param lon Longitude component of location. (required)
     * @param format Specify a format for data retrieval. (required)
     * @param vars Daymet Daily weather estimates. (optional)
     * @param years Subset on years [1980..2019]. (optional)
     * @param start Subset on dates (start date). (optional)
     * @param end Subset on dates (end date). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Execution </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call visualizeGetAsync(Double lat, Double lon, String format, List<String> vars, List<String> years, LocalDate start, LocalDate end, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeGetValidateBeforeCall(lat, lon, format, vars, years, start, end, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
