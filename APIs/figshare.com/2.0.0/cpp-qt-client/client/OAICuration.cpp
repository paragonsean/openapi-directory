/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICuration::OAICuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICuration::OAICuration() {
    this->initializeModel();
}

OAICuration::~OAICuration() {}

void OAICuration::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_article_id_isSet = false;
    m_article_id_isValid = false;

    m_assigned_to_isSet = false;
    m_assigned_to_isValid = false;

    m_comments_count_isSet = false;
    m_comments_count_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_review_date_isSet = false;
    m_review_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAICuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICuration::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_article_id_isValid = ::OpenAPI::fromJsonValue(m_article_id, json[QString("article_id")]);
    m_article_id_isSet = !json[QString("article_id")].isNull() && m_article_id_isValid;

    m_assigned_to_isValid = ::OpenAPI::fromJsonValue(m_assigned_to, json[QString("assigned_to")]);
    m_assigned_to_isSet = !json[QString("assigned_to")].isNull() && m_assigned_to_isValid;

    m_comments_count_isValid = ::OpenAPI::fromJsonValue(m_comments_count, json[QString("comments_count")]);
    m_comments_count_isSet = !json[QString("comments_count")].isNull() && m_comments_count_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("created_date")]);
    m_created_date_isSet = !json[QString("created_date")].isNull() && m_created_date_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modified_date")]);
    m_modified_date_isSet = !json[QString("modified_date")].isNull() && m_modified_date_isValid;

    m_review_date_isValid = ::OpenAPI::fromJsonValue(m_review_date, json[QString("review_date")]);
    m_review_date_isSet = !json[QString("review_date")].isNull() && m_review_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAICuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICuration::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_article_id_isSet) {
        obj.insert(QString("article_id"), ::OpenAPI::toJsonValue(m_article_id));
    }
    if (m_assigned_to_isSet) {
        obj.insert(QString("assigned_to"), ::OpenAPI::toJsonValue(m_assigned_to));
    }
    if (m_comments_count_isSet) {
        obj.insert(QString("comments_count"), ::OpenAPI::toJsonValue(m_comments_count));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("created_date"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modified_date"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_review_date_isSet) {
        obj.insert(QString("review_date"), ::OpenAPI::toJsonValue(m_review_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

qint64 OAICuration::getAccountId() const {
    return m_account_id;
}
void OAICuration::setAccountId(const qint64 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICuration::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICuration::is_account_id_Valid() const{
    return m_account_id_isValid;
}

qint64 OAICuration::getArticleId() const {
    return m_article_id;
}
void OAICuration::setArticleId(const qint64 &article_id) {
    m_article_id = article_id;
    m_article_id_isSet = true;
}

bool OAICuration::is_article_id_Set() const{
    return m_article_id_isSet;
}

bool OAICuration::is_article_id_Valid() const{
    return m_article_id_isValid;
}

qint64 OAICuration::getAssignedTo() const {
    return m_assigned_to;
}
void OAICuration::setAssignedTo(const qint64 &assigned_to) {
    m_assigned_to = assigned_to;
    m_assigned_to_isSet = true;
}

bool OAICuration::is_assigned_to_Set() const{
    return m_assigned_to_isSet;
}

bool OAICuration::is_assigned_to_Valid() const{
    return m_assigned_to_isValid;
}

qint64 OAICuration::getCommentsCount() const {
    return m_comments_count;
}
void OAICuration::setCommentsCount(const qint64 &comments_count) {
    m_comments_count = comments_count;
    m_comments_count_isSet = true;
}

bool OAICuration::is_comments_count_Set() const{
    return m_comments_count_isSet;
}

bool OAICuration::is_comments_count_Valid() const{
    return m_comments_count_isValid;
}

QString OAICuration::getCreatedDate() const {
    return m_created_date;
}
void OAICuration::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAICuration::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAICuration::is_created_date_Valid() const{
    return m_created_date_isValid;
}

qint64 OAICuration::getGroupId() const {
    return m_group_id;
}
void OAICuration::setGroupId(const qint64 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAICuration::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAICuration::is_group_id_Valid() const{
    return m_group_id_isValid;
}

qint64 OAICuration::getId() const {
    return m_id;
}
void OAICuration::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICuration::is_id_Set() const{
    return m_id_isSet;
}

bool OAICuration::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICuration::getModifiedDate() const {
    return m_modified_date;
}
void OAICuration::setModifiedDate(const QString &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAICuration::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAICuration::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QString OAICuration::getReviewDate() const {
    return m_review_date;
}
void OAICuration::setReviewDate(const QString &review_date) {
    m_review_date = review_date;
    m_review_date_isSet = true;
}

bool OAICuration::is_review_date_Set() const{
    return m_review_date_isSet;
}

bool OAICuration::is_review_date_Valid() const{
    return m_review_date_isValid;
}

QString OAICuration::getStatus() const {
    return m_status;
}
void OAICuration::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICuration::is_status_Set() const{
    return m_status_isSet;
}

bool OAICuration::is_status_Valid() const{
    return m_status_isValid;
}

qint64 OAICuration::getVersion() const {
    return m_version;
}
void OAICuration::setVersion(const qint64 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICuration::is_version_Set() const{
    return m_version_isSet;
}

bool OAICuration::is_version_Valid() const{
    return m_version_isValid;
}

bool OAICuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_article_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assigned_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_article_id_isValid && m_assigned_to_isValid && m_comments_count_isValid && m_created_date_isValid && m_group_id_isValid && m_id_isValid && m_modified_date_isValid && m_review_date_isValid && m_status_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
