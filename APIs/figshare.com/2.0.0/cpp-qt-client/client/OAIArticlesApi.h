/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIArticlesApi_H
#define OAI_OAIArticlesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountReport.h"
#include "OAIArticle.h"
#include "OAIArticleComplete.h"
#include "OAIArticleCompletePrivate.h"
#include "OAIArticleConfidentiality.h"
#include "OAIArticleCreate.h"
#include "OAIArticleDOI.h"
#include "OAIArticleEmbargo.h"
#include "OAIArticleEmbargoUpdater.h"
#include "OAIArticleHandle.h"
#include "OAIArticleSearch.h"
#include "OAIArticleUpdate.h"
#include "OAIArticleVersions.h"
#include "OAIArticleWithProject.h"
#include "OAIAuthor.h"
#include "OAIAuthorsCreator.h"
#include "OAICategoriesCreator.h"
#include "OAICategory.h"
#include "OAIConfidentialityCreator.h"
#include "OAIErrorMessage.h"
#include "OAIFileCreator.h"
#include "OAIFileId.h"
#include "OAILocation.h"
#include "OAILocationWarnings.h"
#include "OAILocationWarningsUpdate.h"
#include "OAIPrivateArticleSearch.h"
#include "OAIPrivateFile.h"
#include "OAIPrivateLink.h"
#include "OAIPrivateLinkCreator.h"
#include "OAIPrivateLinkResponse.h"
#include "OAIPublicFile.h"
#include "OAIResource.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIArticlesApi : public QObject {
    Q_OBJECT

public:
    OAIArticlesApi(const int timeOut = 0);
    ~OAIArticlesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  group_id qint64 [optional]
    */
    virtual void accountArticleReport(const ::OpenAPI::OptionalParam<qint64> &group_id = ::OpenAPI::OptionalParam<qint64>());


    virtual void accountArticleReportGenerate();

    /**
    * @param[in]  article_id qint64 [required]
    */
    virtual void articleDetails(const qint64 &article_id);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  file_id qint64 [required]
    */
    virtual void articleFileDetails(const qint64 &article_id, const qint64 &file_id);

    /**
    * @param[in]  article_id qint64 [required]
    */
    virtual void articleFiles(const qint64 &article_id);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  v_number qint64 [required]
    */
    virtual void articleVersionConfidentiality(const qint64 &article_id, const qint64 &v_number);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  v_number qint64 [required]
    */
    virtual void articleVersionDetails(const qint64 &article_id, const qint64 &v_number);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  v_number qint64 [required]
    */
    virtual void articleVersionEmbargo(const qint64 &article_id, const qint64 &v_number);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  version_id qint64 [required]
    * @param[in]  oai_article_update OAIArticleUpdate [required]
    */
    virtual void articleVersionUpdate(const qint64 &article_id, const qint64 &version_id, const OAIArticleUpdate &oai_article_update);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  version_id qint64 [required]
    * @param[in]  oai_file_id OAIFileId [required]
    */
    virtual void articleVersionUpdateThumb(const qint64 &article_id, const qint64 &version_id, const OAIFileId &oai_file_id);

    /**
    * @param[in]  article_id qint64 [required]
    */
    virtual void articleVersions(const qint64 &article_id);

    /**
    * @param[in]  x_cursor QString [optional]
    * @param[in]  page qint64 [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  offset qint64 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  order_direction QString [optional]
    * @param[in]  institution qint64 [optional]
    * @param[in]  published_since QString [optional]
    * @param[in]  modified_since QString [optional]
    * @param[in]  group qint64 [optional]
    * @param[in]  resource_doi QString [optional]
    * @param[in]  item_type qint64 [optional]
    * @param[in]  doi QString [optional]
    * @param[in]  handle QString [optional]
    */
    virtual void articlesList(const ::OpenAPI::OptionalParam<QString> &x_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &institution = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &published_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &group = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &resource_doi = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &item_type = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &doi = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &handle = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_cursor QString [optional]
    * @param[in]  oai_article_search OAIArticleSearch [optional]
    */
    virtual void articlesSearch(const ::OpenAPI::OptionalParam<QString> &x_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIArticleSearch> &oai_article_search = ::OpenAPI::OptionalParam<OAIArticleSearch>());

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  author_id qint64 [required]
    */
    virtual void privateArticleAuthorDelete(const qint64 &article_id, const qint64 &author_id);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  oai_authors_creator OAIAuthorsCreator [required]
    */
    virtual void privateArticleAuthorsAdd(const qint64 &article_id, const OAIAuthorsCreator &oai_authors_creator);

    /**
    * @param[in]  article_id qint64 [required]
    */
    virtual void privateArticleAuthorsList(const qint64 &article_id);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  oai_authors_creator OAIAuthorsCreator [required]
    */
    virtual void privateArticleAuthorsReplace(const qint64 &article_id, const OAIAuthorsCreator &oai_authors_creator);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  oai_categories_creator OAICategoriesCreator [required]
    */
    virtual void privateArticleCategoriesAdd(const qint64 &article_id, const OAICategoriesCreator &oai_categories_creator);

    /**
    * @param[in]  article_id qint64 [required]
    */
    virtual void privateArticleCategoriesList(const qint64 &article_id);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  oai_categories_creator OAICategoriesCreator [required]
    */
    virtual void privateArticleCategoriesReplace(const qint64 &article_id, const OAICategoriesCreator &oai_categories_creator);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  category_id qint64 [required]
    */
    virtual void privateArticleCategoryDelete(const qint64 &article_id, const qint64 &category_id);

    /**
    * @param[in]  article_id qint64 [required]
    */
    virtual void privateArticleConfidentialityDelete(const qint64 &article_id);

    /**
    * @param[in]  article_id qint64 [required]
    */
    virtual void privateArticleConfidentialityDetails(const qint64 &article_id);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  oai_confidentiality_creator OAIConfidentialityCreator [required]
    */
    virtual void privateArticleConfidentialityUpdate(const qint64 &article_id, const OAIConfidentialityCreator &oai_confidentiality_creator);

    /**
    * @param[in]  oai_article_create OAIArticleCreate [required]
    */
    virtual void privateArticleCreate(const OAIArticleCreate &oai_article_create);

    /**
    * @param[in]  article_id qint64 [required]
    */
    virtual void privateArticleDelete(const qint64 &article_id);

    /**
    * @param[in]  article_id qint64 [required]
    */
    virtual void privateArticleDetails(const qint64 &article_id);

    /**
    * @param[in]  article_id qint64 [required]
    */
    virtual void privateArticleEmbargoDelete(const qint64 &article_id);

    /**
    * @param[in]  article_id qint64 [required]
    */
    virtual void privateArticleEmbargoDetails(const qint64 &article_id);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  oai_article_embargo_updater OAIArticleEmbargoUpdater [required]
    */
    virtual void privateArticleEmbargoUpdate(const qint64 &article_id, const OAIArticleEmbargoUpdater &oai_article_embargo_updater);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  file_id qint64 [required]
    */
    virtual void privateArticleFile(const qint64 &article_id, const qint64 &file_id);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  file_id qint64 [required]
    */
    virtual void privateArticleFileDelete(const qint64 &article_id, const qint64 &file_id);

    /**
    * @param[in]  article_id qint64 [required]
    */
    virtual void privateArticleFilesList(const qint64 &article_id);

    /**
    * @param[in]  article_id qint64 [required]
    */
    virtual void privateArticlePrivateLink(const qint64 &article_id);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  oai_private_link_creator OAIPrivateLinkCreator [optional]
    */
    virtual void privateArticlePrivateLinkCreate(const qint64 &article_id, const ::OpenAPI::OptionalParam<OAIPrivateLinkCreator> &oai_private_link_creator = ::OpenAPI::OptionalParam<OAIPrivateLinkCreator>());

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  link_id QString [required]
    */
    virtual void privateArticlePrivateLinkDelete(const qint64 &article_id, const QString &link_id);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  link_id QString [required]
    * @param[in]  oai_private_link_creator OAIPrivateLinkCreator [optional]
    */
    virtual void privateArticlePrivateLinkUpdate(const qint64 &article_id, const QString &link_id, const ::OpenAPI::OptionalParam<OAIPrivateLinkCreator> &oai_private_link_creator = ::OpenAPI::OptionalParam<OAIPrivateLinkCreator>());

    /**
    * @param[in]  article_id qint64 [required]
    */
    virtual void privateArticlePublish(const qint64 &article_id);

    /**
    * @param[in]  article_id qint64 [required]
    */
    virtual void privateArticleReserveDoi(const qint64 &article_id);

    /**
    * @param[in]  article_id qint64 [required]
    */
    virtual void privateArticleReserveHandle(const qint64 &article_id);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  oai_resource OAIResource [required]
    */
    virtual void privateArticleResource(const qint64 &article_id, const OAIResource &oai_resource);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  oai_article_update OAIArticleUpdate [required]
    */
    virtual void privateArticleUpdate(const qint64 &article_id, const OAIArticleUpdate &oai_article_update);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  file_id qint64 [required]
    */
    virtual void privateArticleUploadComplete(const qint64 &article_id, const qint64 &file_id);

    /**
    * @param[in]  article_id qint64 [required]
    * @param[in]  oai_file_creator OAIFileCreator [required]
    */
    virtual void privateArticleUploadInitiate(const qint64 &article_id, const OAIFileCreator &oai_file_creator);

    /**
    * @param[in]  page qint64 [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  offset qint64 [optional]
    */
    virtual void privateArticlesList(const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  oai_private_article_search OAIPrivateArticleSearch [required]
    */
    virtual void privateArticlesSearch(const OAIPrivateArticleSearch &oai_private_article_search);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountArticleReportCallback(OAIHttpRequestWorker *worker);
    void accountArticleReportGenerateCallback(OAIHttpRequestWorker *worker);
    void articleDetailsCallback(OAIHttpRequestWorker *worker);
    void articleFileDetailsCallback(OAIHttpRequestWorker *worker);
    void articleFilesCallback(OAIHttpRequestWorker *worker);
    void articleVersionConfidentialityCallback(OAIHttpRequestWorker *worker);
    void articleVersionDetailsCallback(OAIHttpRequestWorker *worker);
    void articleVersionEmbargoCallback(OAIHttpRequestWorker *worker);
    void articleVersionUpdateCallback(OAIHttpRequestWorker *worker);
    void articleVersionUpdateThumbCallback(OAIHttpRequestWorker *worker);
    void articleVersionsCallback(OAIHttpRequestWorker *worker);
    void articlesListCallback(OAIHttpRequestWorker *worker);
    void articlesSearchCallback(OAIHttpRequestWorker *worker);
    void privateArticleAuthorDeleteCallback(OAIHttpRequestWorker *worker);
    void privateArticleAuthorsAddCallback(OAIHttpRequestWorker *worker);
    void privateArticleAuthorsListCallback(OAIHttpRequestWorker *worker);
    void privateArticleAuthorsReplaceCallback(OAIHttpRequestWorker *worker);
    void privateArticleCategoriesAddCallback(OAIHttpRequestWorker *worker);
    void privateArticleCategoriesListCallback(OAIHttpRequestWorker *worker);
    void privateArticleCategoriesReplaceCallback(OAIHttpRequestWorker *worker);
    void privateArticleCategoryDeleteCallback(OAIHttpRequestWorker *worker);
    void privateArticleConfidentialityDeleteCallback(OAIHttpRequestWorker *worker);
    void privateArticleConfidentialityDetailsCallback(OAIHttpRequestWorker *worker);
    void privateArticleConfidentialityUpdateCallback(OAIHttpRequestWorker *worker);
    void privateArticleCreateCallback(OAIHttpRequestWorker *worker);
    void privateArticleDeleteCallback(OAIHttpRequestWorker *worker);
    void privateArticleDetailsCallback(OAIHttpRequestWorker *worker);
    void privateArticleEmbargoDeleteCallback(OAIHttpRequestWorker *worker);
    void privateArticleEmbargoDetailsCallback(OAIHttpRequestWorker *worker);
    void privateArticleEmbargoUpdateCallback(OAIHttpRequestWorker *worker);
    void privateArticleFileCallback(OAIHttpRequestWorker *worker);
    void privateArticleFileDeleteCallback(OAIHttpRequestWorker *worker);
    void privateArticleFilesListCallback(OAIHttpRequestWorker *worker);
    void privateArticlePrivateLinkCallback(OAIHttpRequestWorker *worker);
    void privateArticlePrivateLinkCreateCallback(OAIHttpRequestWorker *worker);
    void privateArticlePrivateLinkDeleteCallback(OAIHttpRequestWorker *worker);
    void privateArticlePrivateLinkUpdateCallback(OAIHttpRequestWorker *worker);
    void privateArticlePublishCallback(OAIHttpRequestWorker *worker);
    void privateArticleReserveDoiCallback(OAIHttpRequestWorker *worker);
    void privateArticleReserveHandleCallback(OAIHttpRequestWorker *worker);
    void privateArticleResourceCallback(OAIHttpRequestWorker *worker);
    void privateArticleUpdateCallback(OAIHttpRequestWorker *worker);
    void privateArticleUploadCompleteCallback(OAIHttpRequestWorker *worker);
    void privateArticleUploadInitiateCallback(OAIHttpRequestWorker *worker);
    void privateArticlesListCallback(OAIHttpRequestWorker *worker);
    void privateArticlesSearchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountArticleReportSignal(QList<OAIAccountReport> summary);
    void accountArticleReportGenerateSignal(OAIAccountReport summary);
    void articleDetailsSignal(OAIArticleComplete summary);
    void articleFileDetailsSignal(OAIPublicFile summary);
    void articleFilesSignal(QList<OAIPublicFile> summary);
    void articleVersionConfidentialitySignal(OAIArticleConfidentiality summary);
    void articleVersionDetailsSignal(OAIArticleComplete summary);
    void articleVersionEmbargoSignal(OAIArticleEmbargo summary);
    void articleVersionUpdateSignal(OAILocationWarningsUpdate summary);
    void articleVersionUpdateThumbSignal();
    void articleVersionsSignal(QList<OAIArticleVersions> summary);
    void articlesListSignal(QList<OAIArticle> summary);
    void articlesSearchSignal(QList<OAIArticleWithProject> summary);
    void privateArticleAuthorDeleteSignal();
    void privateArticleAuthorsAddSignal();
    void privateArticleAuthorsListSignal(QList<OAIAuthor> summary);
    void privateArticleAuthorsReplaceSignal();
    void privateArticleCategoriesAddSignal();
    void privateArticleCategoriesListSignal(QList<OAICategory> summary);
    void privateArticleCategoriesReplaceSignal();
    void privateArticleCategoryDeleteSignal();
    void privateArticleConfidentialityDeleteSignal();
    void privateArticleConfidentialityDetailsSignal(OAIArticleConfidentiality summary);
    void privateArticleConfidentialityUpdateSignal();
    void privateArticleCreateSignal(OAILocationWarnings summary);
    void privateArticleDeleteSignal();
    void privateArticleDetailsSignal(OAIArticleCompletePrivate summary);
    void privateArticleEmbargoDeleteSignal();
    void privateArticleEmbargoDetailsSignal(OAIArticleEmbargo summary);
    void privateArticleEmbargoUpdateSignal();
    void privateArticleFileSignal(OAIPrivateFile summary);
    void privateArticleFileDeleteSignal();
    void privateArticleFilesListSignal(QList<OAIPrivateFile> summary);
    void privateArticlePrivateLinkSignal(QList<OAIPrivateLink> summary);
    void privateArticlePrivateLinkCreateSignal(OAIPrivateLinkResponse summary);
    void privateArticlePrivateLinkDeleteSignal();
    void privateArticlePrivateLinkUpdateSignal();
    void privateArticlePublishSignal(OAILocation summary);
    void privateArticleReserveDoiSignal(OAIArticleDOI summary);
    void privateArticleReserveHandleSignal(OAIArticleHandle summary);
    void privateArticleResourceSignal(OAILocation summary);
    void privateArticleUpdateSignal(OAILocationWarningsUpdate summary);
    void privateArticleUploadCompleteSignal();
    void privateArticleUploadInitiateSignal(OAILocation summary);
    void privateArticlesListSignal(QList<OAIArticle> summary);
    void privateArticlesSearchSignal(QList<OAIArticleWithProject> summary);


    void accountArticleReportSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccountReport> summary);
    void accountArticleReportGenerateSignalFull(OAIHttpRequestWorker *worker, OAIAccountReport summary);
    void articleDetailsSignalFull(OAIHttpRequestWorker *worker, OAIArticleComplete summary);
    void articleFileDetailsSignalFull(OAIHttpRequestWorker *worker, OAIPublicFile summary);
    void articleFilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPublicFile> summary);
    void articleVersionConfidentialitySignalFull(OAIHttpRequestWorker *worker, OAIArticleConfidentiality summary);
    void articleVersionDetailsSignalFull(OAIHttpRequestWorker *worker, OAIArticleComplete summary);
    void articleVersionEmbargoSignalFull(OAIHttpRequestWorker *worker, OAIArticleEmbargo summary);
    void articleVersionUpdateSignalFull(OAIHttpRequestWorker *worker, OAILocationWarningsUpdate summary);
    void articleVersionUpdateThumbSignalFull(OAIHttpRequestWorker *worker);
    void articleVersionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticleVersions> summary);
    void articlesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticle> summary);
    void articlesSearchSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticleWithProject> summary);
    void privateArticleAuthorDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateArticleAuthorsAddSignalFull(OAIHttpRequestWorker *worker);
    void privateArticleAuthorsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIAuthor> summary);
    void privateArticleAuthorsReplaceSignalFull(OAIHttpRequestWorker *worker);
    void privateArticleCategoriesAddSignalFull(OAIHttpRequestWorker *worker);
    void privateArticleCategoriesListSignalFull(OAIHttpRequestWorker *worker, QList<OAICategory> summary);
    void privateArticleCategoriesReplaceSignalFull(OAIHttpRequestWorker *worker);
    void privateArticleCategoryDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateArticleConfidentialityDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateArticleConfidentialityDetailsSignalFull(OAIHttpRequestWorker *worker, OAIArticleConfidentiality summary);
    void privateArticleConfidentialityUpdateSignalFull(OAIHttpRequestWorker *worker);
    void privateArticleCreateSignalFull(OAIHttpRequestWorker *worker, OAILocationWarnings summary);
    void privateArticleDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateArticleDetailsSignalFull(OAIHttpRequestWorker *worker, OAIArticleCompletePrivate summary);
    void privateArticleEmbargoDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateArticleEmbargoDetailsSignalFull(OAIHttpRequestWorker *worker, OAIArticleEmbargo summary);
    void privateArticleEmbargoUpdateSignalFull(OAIHttpRequestWorker *worker);
    void privateArticleFileSignalFull(OAIHttpRequestWorker *worker, OAIPrivateFile summary);
    void privateArticleFileDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateArticleFilesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIPrivateFile> summary);
    void privateArticlePrivateLinkSignalFull(OAIHttpRequestWorker *worker, QList<OAIPrivateLink> summary);
    void privateArticlePrivateLinkCreateSignalFull(OAIHttpRequestWorker *worker, OAIPrivateLinkResponse summary);
    void privateArticlePrivateLinkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateArticlePrivateLinkUpdateSignalFull(OAIHttpRequestWorker *worker);
    void privateArticlePublishSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void privateArticleReserveDoiSignalFull(OAIHttpRequestWorker *worker, OAIArticleDOI summary);
    void privateArticleReserveHandleSignalFull(OAIHttpRequestWorker *worker, OAIArticleHandle summary);
    void privateArticleResourceSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void privateArticleUpdateSignalFull(OAIHttpRequestWorker *worker, OAILocationWarningsUpdate summary);
    void privateArticleUploadCompleteSignalFull(OAIHttpRequestWorker *worker);
    void privateArticleUploadInitiateSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void privateArticlesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticle> summary);
    void privateArticlesSearchSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticleWithProject> summary);

    Q_DECL_DEPRECATED_X("Use accountArticleReportSignalError() instead")
    void accountArticleReportSignalE(QList<OAIAccountReport> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountArticleReportSignalError(QList<OAIAccountReport> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountArticleReportGenerateSignalError() instead")
    void accountArticleReportGenerateSignalE(OAIAccountReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountArticleReportGenerateSignalError(OAIAccountReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleDetailsSignalError() instead")
    void articleDetailsSignalE(OAIArticleComplete summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleDetailsSignalError(OAIArticleComplete summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleFileDetailsSignalError() instead")
    void articleFileDetailsSignalE(OAIPublicFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleFileDetailsSignalError(OAIPublicFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleFilesSignalError() instead")
    void articleFilesSignalE(QList<OAIPublicFile> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleFilesSignalError(QList<OAIPublicFile> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleVersionConfidentialitySignalError() instead")
    void articleVersionConfidentialitySignalE(OAIArticleConfidentiality summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleVersionConfidentialitySignalError(OAIArticleConfidentiality summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleVersionDetailsSignalError() instead")
    void articleVersionDetailsSignalE(OAIArticleComplete summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleVersionDetailsSignalError(OAIArticleComplete summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleVersionEmbargoSignalError() instead")
    void articleVersionEmbargoSignalE(OAIArticleEmbargo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleVersionEmbargoSignalError(OAIArticleEmbargo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleVersionUpdateSignalError() instead")
    void articleVersionUpdateSignalE(OAILocationWarningsUpdate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleVersionUpdateSignalError(OAILocationWarningsUpdate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleVersionUpdateThumbSignalError() instead")
    void articleVersionUpdateThumbSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void articleVersionUpdateThumbSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleVersionsSignalError() instead")
    void articleVersionsSignalE(QList<OAIArticleVersions> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleVersionsSignalError(QList<OAIArticleVersions> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesListSignalError() instead")
    void articlesListSignalE(QList<OAIArticle> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesListSignalError(QList<OAIArticle> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesSearchSignalError() instead")
    void articlesSearchSignalE(QList<OAIArticleWithProject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesSearchSignalError(QList<OAIArticleWithProject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleAuthorDeleteSignalError() instead")
    void privateArticleAuthorDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleAuthorDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleAuthorsAddSignalError() instead")
    void privateArticleAuthorsAddSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleAuthorsAddSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleAuthorsListSignalError() instead")
    void privateArticleAuthorsListSignalE(QList<OAIAuthor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleAuthorsListSignalError(QList<OAIAuthor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleAuthorsReplaceSignalError() instead")
    void privateArticleAuthorsReplaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleAuthorsReplaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleCategoriesAddSignalError() instead")
    void privateArticleCategoriesAddSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleCategoriesAddSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleCategoriesListSignalError() instead")
    void privateArticleCategoriesListSignalE(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleCategoriesListSignalError(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleCategoriesReplaceSignalError() instead")
    void privateArticleCategoriesReplaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleCategoriesReplaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleCategoryDeleteSignalError() instead")
    void privateArticleCategoryDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleCategoryDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleConfidentialityDeleteSignalError() instead")
    void privateArticleConfidentialityDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleConfidentialityDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleConfidentialityDetailsSignalError() instead")
    void privateArticleConfidentialityDetailsSignalE(OAIArticleConfidentiality summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleConfidentialityDetailsSignalError(OAIArticleConfidentiality summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleConfidentialityUpdateSignalError() instead")
    void privateArticleConfidentialityUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleConfidentialityUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleCreateSignalError() instead")
    void privateArticleCreateSignalE(OAILocationWarnings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleCreateSignalError(OAILocationWarnings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleDeleteSignalError() instead")
    void privateArticleDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleDetailsSignalError() instead")
    void privateArticleDetailsSignalE(OAIArticleCompletePrivate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleDetailsSignalError(OAIArticleCompletePrivate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleEmbargoDeleteSignalError() instead")
    void privateArticleEmbargoDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleEmbargoDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleEmbargoDetailsSignalError() instead")
    void privateArticleEmbargoDetailsSignalE(OAIArticleEmbargo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleEmbargoDetailsSignalError(OAIArticleEmbargo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleEmbargoUpdateSignalError() instead")
    void privateArticleEmbargoUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleEmbargoUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleFileSignalError() instead")
    void privateArticleFileSignalE(OAIPrivateFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleFileSignalError(OAIPrivateFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleFileDeleteSignalError() instead")
    void privateArticleFileDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleFileDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleFilesListSignalError() instead")
    void privateArticleFilesListSignalE(QList<OAIPrivateFile> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleFilesListSignalError(QList<OAIPrivateFile> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticlePrivateLinkSignalError() instead")
    void privateArticlePrivateLinkSignalE(QList<OAIPrivateLink> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticlePrivateLinkSignalError(QList<OAIPrivateLink> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticlePrivateLinkCreateSignalError() instead")
    void privateArticlePrivateLinkCreateSignalE(OAIPrivateLinkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticlePrivateLinkCreateSignalError(OAIPrivateLinkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticlePrivateLinkDeleteSignalError() instead")
    void privateArticlePrivateLinkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticlePrivateLinkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticlePrivateLinkUpdateSignalError() instead")
    void privateArticlePrivateLinkUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticlePrivateLinkUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticlePublishSignalError() instead")
    void privateArticlePublishSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticlePublishSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleReserveDoiSignalError() instead")
    void privateArticleReserveDoiSignalE(OAIArticleDOI summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleReserveDoiSignalError(OAIArticleDOI summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleReserveHandleSignalError() instead")
    void privateArticleReserveHandleSignalE(OAIArticleHandle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleReserveHandleSignalError(OAIArticleHandle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleResourceSignalError() instead")
    void privateArticleResourceSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleResourceSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleUpdateSignalError() instead")
    void privateArticleUpdateSignalE(OAILocationWarningsUpdate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleUpdateSignalError(OAILocationWarningsUpdate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleUploadCompleteSignalError() instead")
    void privateArticleUploadCompleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleUploadCompleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleUploadInitiateSignalError() instead")
    void privateArticleUploadInitiateSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleUploadInitiateSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticlesListSignalError() instead")
    void privateArticlesListSignalE(QList<OAIArticle> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticlesListSignalError(QList<OAIArticle> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticlesSearchSignalError() instead")
    void privateArticlesSearchSignalE(QList<OAIArticleWithProject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticlesSearchSignalError(QList<OAIArticleWithProject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountArticleReportSignalErrorFull() instead")
    void accountArticleReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountArticleReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountArticleReportGenerateSignalErrorFull() instead")
    void accountArticleReportGenerateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountArticleReportGenerateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleDetailsSignalErrorFull() instead")
    void articleDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleFileDetailsSignalErrorFull() instead")
    void articleFileDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleFileDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleFilesSignalErrorFull() instead")
    void articleFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleVersionConfidentialitySignalErrorFull() instead")
    void articleVersionConfidentialitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleVersionConfidentialitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleVersionDetailsSignalErrorFull() instead")
    void articleVersionDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleVersionDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleVersionEmbargoSignalErrorFull() instead")
    void articleVersionEmbargoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleVersionEmbargoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleVersionUpdateSignalErrorFull() instead")
    void articleVersionUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleVersionUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleVersionUpdateThumbSignalErrorFull() instead")
    void articleVersionUpdateThumbSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleVersionUpdateThumbSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleVersionsSignalErrorFull() instead")
    void articleVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesListSignalErrorFull() instead")
    void articlesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlesSearchSignalErrorFull() instead")
    void articlesSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articlesSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleAuthorDeleteSignalErrorFull() instead")
    void privateArticleAuthorDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleAuthorDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleAuthorsAddSignalErrorFull() instead")
    void privateArticleAuthorsAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleAuthorsAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleAuthorsListSignalErrorFull() instead")
    void privateArticleAuthorsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleAuthorsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleAuthorsReplaceSignalErrorFull() instead")
    void privateArticleAuthorsReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleAuthorsReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleCategoriesAddSignalErrorFull() instead")
    void privateArticleCategoriesAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleCategoriesAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleCategoriesListSignalErrorFull() instead")
    void privateArticleCategoriesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleCategoriesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleCategoriesReplaceSignalErrorFull() instead")
    void privateArticleCategoriesReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleCategoriesReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleCategoryDeleteSignalErrorFull() instead")
    void privateArticleCategoryDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleCategoryDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleConfidentialityDeleteSignalErrorFull() instead")
    void privateArticleConfidentialityDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleConfidentialityDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleConfidentialityDetailsSignalErrorFull() instead")
    void privateArticleConfidentialityDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleConfidentialityDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleConfidentialityUpdateSignalErrorFull() instead")
    void privateArticleConfidentialityUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleConfidentialityUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleCreateSignalErrorFull() instead")
    void privateArticleCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleDeleteSignalErrorFull() instead")
    void privateArticleDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleDetailsSignalErrorFull() instead")
    void privateArticleDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleEmbargoDeleteSignalErrorFull() instead")
    void privateArticleEmbargoDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleEmbargoDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleEmbargoDetailsSignalErrorFull() instead")
    void privateArticleEmbargoDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleEmbargoDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleEmbargoUpdateSignalErrorFull() instead")
    void privateArticleEmbargoUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleEmbargoUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleFileSignalErrorFull() instead")
    void privateArticleFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleFileDeleteSignalErrorFull() instead")
    void privateArticleFileDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleFileDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleFilesListSignalErrorFull() instead")
    void privateArticleFilesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleFilesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticlePrivateLinkSignalErrorFull() instead")
    void privateArticlePrivateLinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticlePrivateLinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticlePrivateLinkCreateSignalErrorFull() instead")
    void privateArticlePrivateLinkCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticlePrivateLinkCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticlePrivateLinkDeleteSignalErrorFull() instead")
    void privateArticlePrivateLinkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticlePrivateLinkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticlePrivateLinkUpdateSignalErrorFull() instead")
    void privateArticlePrivateLinkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticlePrivateLinkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticlePublishSignalErrorFull() instead")
    void privateArticlePublishSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticlePublishSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleReserveDoiSignalErrorFull() instead")
    void privateArticleReserveDoiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleReserveDoiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleReserveHandleSignalErrorFull() instead")
    void privateArticleReserveHandleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleReserveHandleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleResourceSignalErrorFull() instead")
    void privateArticleResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleUpdateSignalErrorFull() instead")
    void privateArticleUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleUploadCompleteSignalErrorFull() instead")
    void privateArticleUploadCompleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleUploadCompleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticleUploadInitiateSignalErrorFull() instead")
    void privateArticleUploadInitiateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticleUploadInitiateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticlesListSignalErrorFull() instead")
    void privateArticlesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticlesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateArticlesSearchSignalErrorFull() instead")
    void privateArticlesSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateArticlesSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
