/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOtherApi_H
#define OAI_OAIOtherApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount.h"
#include "OAICategory.h"
#include "OAIErrorMessage.h"
#include "OAIFundingInformation.h"
#include "OAIFundingSearch.h"
#include "OAIItemType.h"
#include "OAILicense.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOtherApi : public QObject {
    Q_OBJECT

public:
    OAIOtherApi(const int timeOut = 0);
    ~OAIOtherApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void categoriesList();

    /**
    * @param[in]  file_id qint64 [required]
    */
    virtual void fileDownload(const qint64 &file_id);

    /**
    * @param[in]  group_id qint64 [optional]
    */
    virtual void itemTypesList(const ::OpenAPI::OptionalParam<qint64> &group_id = ::OpenAPI::OptionalParam<qint64>());


    virtual void licensesList();


    virtual void privateAccount();

    /**
    * @param[in]  oai_funding_search OAIFundingSearch [optional]
    */
    virtual void privateFundingSearch(const ::OpenAPI::OptionalParam<OAIFundingSearch> &oai_funding_search = ::OpenAPI::OptionalParam<OAIFundingSearch>());


    virtual void privateLicensesList();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void categoriesListCallback(OAIHttpRequestWorker *worker);
    void fileDownloadCallback(OAIHttpRequestWorker *worker);
    void itemTypesListCallback(OAIHttpRequestWorker *worker);
    void licensesListCallback(OAIHttpRequestWorker *worker);
    void privateAccountCallback(OAIHttpRequestWorker *worker);
    void privateFundingSearchCallback(OAIHttpRequestWorker *worker);
    void privateLicensesListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void categoriesListSignal(QList<OAICategory> summary);
    void fileDownloadSignal();
    void itemTypesListSignal(QList<OAIItemType> summary);
    void licensesListSignal(QList<OAILicense> summary);
    void privateAccountSignal(OAIAccount summary);
    void privateFundingSearchSignal(QList<OAIFundingInformation> summary);
    void privateLicensesListSignal(QList<OAILicense> summary);


    void categoriesListSignalFull(OAIHttpRequestWorker *worker, QList<OAICategory> summary);
    void fileDownloadSignalFull(OAIHttpRequestWorker *worker);
    void itemTypesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIItemType> summary);
    void licensesListSignalFull(OAIHttpRequestWorker *worker, QList<OAILicense> summary);
    void privateAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void privateFundingSearchSignalFull(OAIHttpRequestWorker *worker, QList<OAIFundingInformation> summary);
    void privateLicensesListSignalFull(OAIHttpRequestWorker *worker, QList<OAILicense> summary);

    Q_DECL_DEPRECATED_X("Use categoriesListSignalError() instead")
    void categoriesListSignalE(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesListSignalError(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileDownloadSignalError() instead")
    void fileDownloadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void fileDownloadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemTypesListSignalError() instead")
    void itemTypesListSignalE(QList<OAIItemType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void itemTypesListSignalError(QList<OAIItemType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licensesListSignalError() instead")
    void licensesListSignalE(QList<OAILicense> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void licensesListSignalError(QList<OAILicense> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateAccountSignalError() instead")
    void privateAccountSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateAccountSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateFundingSearchSignalError() instead")
    void privateFundingSearchSignalE(QList<OAIFundingInformation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateFundingSearchSignalError(QList<OAIFundingInformation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLicensesListSignalError() instead")
    void privateLicensesListSignalE(QList<OAILicense> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLicensesListSignalError(QList<OAILicense> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use categoriesListSignalErrorFull() instead")
    void categoriesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileDownloadSignalErrorFull() instead")
    void fileDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemTypesListSignalErrorFull() instead")
    void itemTypesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void itemTypesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licensesListSignalErrorFull() instead")
    void licensesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void licensesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateAccountSignalErrorFull() instead")
    void privateAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateFundingSearchSignalErrorFull() instead")
    void privateFundingSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateFundingSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLicensesListSignalErrorFull() instead")
    void privateLicensesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLicensesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
