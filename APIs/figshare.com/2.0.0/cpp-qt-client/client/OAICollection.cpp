/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollection::OAICollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollection::OAICollection() {
    this->initializeModel();
}

OAICollection::~OAICollection() {}

void OAICollection::initializeModel() {

    m_doi_isSet = false;
    m_doi_isValid = false;

    m_handle_isSet = false;
    m_handle_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_published_date_isSet = false;
    m_published_date_isValid = false;

    m_timeline_isSet = false;
    m_timeline_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollection::fromJsonObject(QJsonObject json) {

    m_doi_isValid = ::OpenAPI::fromJsonValue(m_doi, json[QString("doi")]);
    m_doi_isSet = !json[QString("doi")].isNull() && m_doi_isValid;

    m_handle_isValid = ::OpenAPI::fromJsonValue(m_handle, json[QString("handle")]);
    m_handle_isSet = !json[QString("handle")].isNull() && m_handle_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_published_date_isValid = ::OpenAPI::fromJsonValue(m_published_date, json[QString("published_date")]);
    m_published_date_isSet = !json[QString("published_date")].isNull() && m_published_date_isValid;

    m_timeline_isValid = ::OpenAPI::fromJsonValue(m_timeline, json[QString("timeline")]);
    m_timeline_isSet = !json[QString("timeline")].isNull() && m_timeline_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollection::asJsonObject() const {
    QJsonObject obj;
    if (m_doi_isSet) {
        obj.insert(QString("doi"), ::OpenAPI::toJsonValue(m_doi));
    }
    if (m_handle_isSet) {
        obj.insert(QString("handle"), ::OpenAPI::toJsonValue(m_handle));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_published_date_isSet) {
        obj.insert(QString("published_date"), ::OpenAPI::toJsonValue(m_published_date));
    }
    if (m_timeline.isSet()) {
        obj.insert(QString("timeline"), ::OpenAPI::toJsonValue(m_timeline));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAICollection::getDoi() const {
    return m_doi;
}
void OAICollection::setDoi(const QString &doi) {
    m_doi = doi;
    m_doi_isSet = true;
}

bool OAICollection::is_doi_Set() const{
    return m_doi_isSet;
}

bool OAICollection::is_doi_Valid() const{
    return m_doi_isValid;
}

QString OAICollection::getHandle() const {
    return m_handle;
}
void OAICollection::setHandle(const QString &handle) {
    m_handle = handle;
    m_handle_isSet = true;
}

bool OAICollection::is_handle_Set() const{
    return m_handle_isSet;
}

bool OAICollection::is_handle_Valid() const{
    return m_handle_isValid;
}

qint64 OAICollection::getId() const {
    return m_id;
}
void OAICollection::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICollection::is_id_Set() const{
    return m_id_isSet;
}

bool OAICollection::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICollection::getPublishedDate() const {
    return m_published_date;
}
void OAICollection::setPublishedDate(const QString &published_date) {
    m_published_date = published_date;
    m_published_date_isSet = true;
}

bool OAICollection::is_published_date_Set() const{
    return m_published_date_isSet;
}

bool OAICollection::is_published_date_Valid() const{
    return m_published_date_isValid;
}

OAITimeline OAICollection::getTimeline() const {
    return m_timeline;
}
void OAICollection::setTimeline(const OAITimeline &timeline) {
    m_timeline = timeline;
    m_timeline_isSet = true;
}

bool OAICollection::is_timeline_Set() const{
    return m_timeline_isSet;
}

bool OAICollection::is_timeline_Valid() const{
    return m_timeline_isValid;
}

QString OAICollection::getTitle() const {
    return m_title;
}
void OAICollection::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICollection::is_title_Set() const{
    return m_title_isSet;
}

bool OAICollection::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICollection::getUrl() const {
    return m_url;
}
void OAICollection::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICollection::is_url_Set() const{
    return m_url_isSet;
}

bool OAICollection::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_doi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_doi_isValid && m_handle_isValid && m_id_isValid && m_published_date_isValid && m_timeline_isValid && m_title_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
