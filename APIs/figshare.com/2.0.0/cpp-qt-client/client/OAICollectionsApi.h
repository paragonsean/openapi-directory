/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICollectionsApi_H
#define OAI_OAICollectionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIArticle.h"
#include "OAIArticlesCreator.h"
#include "OAIAuthor.h"
#include "OAIAuthorsCreator.h"
#include "OAICategoriesCreator.h"
#include "OAICategory.h"
#include "OAICollection.h"
#include "OAICollectionComplete.h"
#include "OAICollectionCompletePrivate.h"
#include "OAICollectionCreate.h"
#include "OAICollectionDOI.h"
#include "OAICollectionHandle.h"
#include "OAICollectionPrivateLinkCreator.h"
#include "OAICollectionSearch.h"
#include "OAICollectionUpdate.h"
#include "OAICollectionVersions.h"
#include "OAIErrorMessage.h"
#include "OAILocation.h"
#include "OAILocationWarnings.h"
#include "OAILocationWarningsUpdate.h"
#include "OAIPrivateCollectionSearch.h"
#include "OAIPrivateLink.h"
#include "OAIPrivateLinkResponse.h"
#include "OAIResource.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICollectionsApi : public QObject {
    Q_OBJECT

public:
    OAICollectionsApi(const int timeOut = 0);
    ~OAICollectionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  collection_id qint64 [required]
    * @param[in]  page qint64 [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  offset qint64 [optional]
    */
    virtual void collectionArticles(const qint64 &collection_id, const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  collection_id qint64 [required]
    */
    virtual void collectionDetails(const qint64 &collection_id);

    /**
    * @param[in]  collection_id qint64 [required]
    * @param[in]  version_id qint64 [required]
    */
    virtual void collectionVersionDetails(const qint64 &collection_id, const qint64 &version_id);

    /**
    * @param[in]  collection_id qint64 [required]
    */
    virtual void collectionVersions(const qint64 &collection_id);

    /**
    * @param[in]  x_cursor QString [optional]
    * @param[in]  page qint64 [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  offset qint64 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  order_direction QString [optional]
    * @param[in]  institution qint64 [optional]
    * @param[in]  published_since QString [optional]
    * @param[in]  modified_since QString [optional]
    * @param[in]  group qint64 [optional]
    * @param[in]  resource_doi QString [optional]
    * @param[in]  doi QString [optional]
    * @param[in]  handle QString [optional]
    */
    virtual void collectionsList(const ::OpenAPI::OptionalParam<QString> &x_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &institution = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &published_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &group = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &resource_doi = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &doi = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &handle = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_cursor QString [optional]
    * @param[in]  oai_collection_search OAICollectionSearch [optional]
    */
    virtual void collectionsSearch(const ::OpenAPI::OptionalParam<QString> &x_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICollectionSearch> &oai_collection_search = ::OpenAPI::OptionalParam<OAICollectionSearch>());

    /**
    * @param[in]  collection_id qint64 [required]
    * @param[in]  article_id qint64 [required]
    */
    virtual void privateCollectionArticleDelete(const qint64 &collection_id, const qint64 &article_id);

    /**
    * @param[in]  collection_id qint64 [required]
    * @param[in]  oai_articles_creator OAIArticlesCreator [required]
    */
    virtual void privateCollectionArticlesAdd(const qint64 &collection_id, const OAIArticlesCreator &oai_articles_creator);

    /**
    * @param[in]  collection_id qint64 [required]
    * @param[in]  page qint64 [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  offset qint64 [optional]
    */
    virtual void privateCollectionArticlesList(const qint64 &collection_id, const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  collection_id qint64 [required]
    * @param[in]  oai_articles_creator OAIArticlesCreator [required]
    */
    virtual void privateCollectionArticlesReplace(const qint64 &collection_id, const OAIArticlesCreator &oai_articles_creator);

    /**
    * @param[in]  collection_id qint64 [required]
    * @param[in]  author_id qint64 [required]
    */
    virtual void privateCollectionAuthorDelete(const qint64 &collection_id, const qint64 &author_id);

    /**
    * @param[in]  collection_id qint64 [required]
    * @param[in]  oai_authors_creator OAIAuthorsCreator [required]
    */
    virtual void privateCollectionAuthorsAdd(const qint64 &collection_id, const OAIAuthorsCreator &oai_authors_creator);

    /**
    * @param[in]  collection_id qint64 [required]
    */
    virtual void privateCollectionAuthorsList(const qint64 &collection_id);

    /**
    * @param[in]  collection_id qint64 [required]
    * @param[in]  oai_authors_creator OAIAuthorsCreator [required]
    */
    virtual void privateCollectionAuthorsReplace(const qint64 &collection_id, const OAIAuthorsCreator &oai_authors_creator);

    /**
    * @param[in]  collection_id qint64 [required]
    * @param[in]  oai_categories_creator OAICategoriesCreator [required]
    */
    virtual void privateCollectionCategoriesAdd(const qint64 &collection_id, const OAICategoriesCreator &oai_categories_creator);

    /**
    * @param[in]  collection_id qint64 [required]
    */
    virtual void privateCollectionCategoriesList(const qint64 &collection_id);

    /**
    * @param[in]  collection_id qint64 [required]
    * @param[in]  oai_categories_creator OAICategoriesCreator [required]
    */
    virtual void privateCollectionCategoriesReplace(const qint64 &collection_id, const OAICategoriesCreator &oai_categories_creator);

    /**
    * @param[in]  collection_id qint64 [required]
    * @param[in]  category_id qint64 [required]
    */
    virtual void privateCollectionCategoryDelete(const qint64 &collection_id, const qint64 &category_id);

    /**
    * @param[in]  oai_collection_create OAICollectionCreate [required]
    */
    virtual void privateCollectionCreate(const OAICollectionCreate &oai_collection_create);

    /**
    * @param[in]  collection_id qint64 [required]
    */
    virtual void privateCollectionDelete(const qint64 &collection_id);

    /**
    * @param[in]  collection_id qint64 [required]
    */
    virtual void privateCollectionDetails(const qint64 &collection_id);

    /**
    * @param[in]  collection_id qint64 [required]
    * @param[in]  oai_collection_private_link_creator OAICollectionPrivateLinkCreator [optional]
    */
    virtual void privateCollectionPrivateLinkCreate(const qint64 &collection_id, const ::OpenAPI::OptionalParam<OAICollectionPrivateLinkCreator> &oai_collection_private_link_creator = ::OpenAPI::OptionalParam<OAICollectionPrivateLinkCreator>());

    /**
    * @param[in]  collection_id qint64 [required]
    * @param[in]  link_id QString [required]
    */
    virtual void privateCollectionPrivateLinkDelete(const qint64 &collection_id, const QString &link_id);

    /**
    * @param[in]  collection_id qint64 [required]
    * @param[in]  link_id QString [required]
    * @param[in]  oai_collection_private_link_creator OAICollectionPrivateLinkCreator [optional]
    */
    virtual void privateCollectionPrivateLinkUpdate(const qint64 &collection_id, const QString &link_id, const ::OpenAPI::OptionalParam<OAICollectionPrivateLinkCreator> &oai_collection_private_link_creator = ::OpenAPI::OptionalParam<OAICollectionPrivateLinkCreator>());

    /**
    * @param[in]  collection_id qint64 [required]
    */
    virtual void privateCollectionPrivateLinksList(const qint64 &collection_id);

    /**
    * @param[in]  collection_id qint64 [required]
    */
    virtual void privateCollectionPublish(const qint64 &collection_id);

    /**
    * @param[in]  collection_id qint64 [required]
    */
    virtual void privateCollectionReserveDoi(const qint64 &collection_id);

    /**
    * @param[in]  collection_id qint64 [required]
    */
    virtual void privateCollectionReserveHandle(const qint64 &collection_id);

    /**
    * @param[in]  collection_id qint64 [required]
    * @param[in]  oai_resource OAIResource [required]
    */
    virtual void privateCollectionResource(const qint64 &collection_id, const OAIResource &oai_resource);

    /**
    * @param[in]  collection_id qint64 [required]
    * @param[in]  oai_collection_update OAICollectionUpdate [required]
    */
    virtual void privateCollectionUpdate(const qint64 &collection_id, const OAICollectionUpdate &oai_collection_update);

    /**
    * @param[in]  page qint64 [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  offset qint64 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  order_direction QString [optional]
    */
    virtual void privateCollectionsList(const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_direction = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_private_collection_search OAIPrivateCollectionSearch [required]
    */
    virtual void privateCollectionsSearch(const OAIPrivateCollectionSearch &oai_private_collection_search);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void collectionArticlesCallback(OAIHttpRequestWorker *worker);
    void collectionDetailsCallback(OAIHttpRequestWorker *worker);
    void collectionVersionDetailsCallback(OAIHttpRequestWorker *worker);
    void collectionVersionsCallback(OAIHttpRequestWorker *worker);
    void collectionsListCallback(OAIHttpRequestWorker *worker);
    void collectionsSearchCallback(OAIHttpRequestWorker *worker);
    void privateCollectionArticleDeleteCallback(OAIHttpRequestWorker *worker);
    void privateCollectionArticlesAddCallback(OAIHttpRequestWorker *worker);
    void privateCollectionArticlesListCallback(OAIHttpRequestWorker *worker);
    void privateCollectionArticlesReplaceCallback(OAIHttpRequestWorker *worker);
    void privateCollectionAuthorDeleteCallback(OAIHttpRequestWorker *worker);
    void privateCollectionAuthorsAddCallback(OAIHttpRequestWorker *worker);
    void privateCollectionAuthorsListCallback(OAIHttpRequestWorker *worker);
    void privateCollectionAuthorsReplaceCallback(OAIHttpRequestWorker *worker);
    void privateCollectionCategoriesAddCallback(OAIHttpRequestWorker *worker);
    void privateCollectionCategoriesListCallback(OAIHttpRequestWorker *worker);
    void privateCollectionCategoriesReplaceCallback(OAIHttpRequestWorker *worker);
    void privateCollectionCategoryDeleteCallback(OAIHttpRequestWorker *worker);
    void privateCollectionCreateCallback(OAIHttpRequestWorker *worker);
    void privateCollectionDeleteCallback(OAIHttpRequestWorker *worker);
    void privateCollectionDetailsCallback(OAIHttpRequestWorker *worker);
    void privateCollectionPrivateLinkCreateCallback(OAIHttpRequestWorker *worker);
    void privateCollectionPrivateLinkDeleteCallback(OAIHttpRequestWorker *worker);
    void privateCollectionPrivateLinkUpdateCallback(OAIHttpRequestWorker *worker);
    void privateCollectionPrivateLinksListCallback(OAIHttpRequestWorker *worker);
    void privateCollectionPublishCallback(OAIHttpRequestWorker *worker);
    void privateCollectionReserveDoiCallback(OAIHttpRequestWorker *worker);
    void privateCollectionReserveHandleCallback(OAIHttpRequestWorker *worker);
    void privateCollectionResourceCallback(OAIHttpRequestWorker *worker);
    void privateCollectionUpdateCallback(OAIHttpRequestWorker *worker);
    void privateCollectionsListCallback(OAIHttpRequestWorker *worker);
    void privateCollectionsSearchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void collectionArticlesSignal(QList<OAIArticle> summary);
    void collectionDetailsSignal(OAICollectionComplete summary);
    void collectionVersionDetailsSignal(OAICollectionComplete summary);
    void collectionVersionsSignal(QList<OAICollectionVersions> summary);
    void collectionsListSignal(QList<OAICollection> summary);
    void collectionsSearchSignal(QList<OAICollection> summary);
    void privateCollectionArticleDeleteSignal();
    void privateCollectionArticlesAddSignal(OAILocation summary);
    void privateCollectionArticlesListSignal(QList<OAIArticle> summary);
    void privateCollectionArticlesReplaceSignal();
    void privateCollectionAuthorDeleteSignal();
    void privateCollectionAuthorsAddSignal(OAILocation summary);
    void privateCollectionAuthorsListSignal(QList<OAIAuthor> summary);
    void privateCollectionAuthorsReplaceSignal();
    void privateCollectionCategoriesAddSignal(OAILocation summary);
    void privateCollectionCategoriesListSignal(QList<OAICategory> summary);
    void privateCollectionCategoriesReplaceSignal();
    void privateCollectionCategoryDeleteSignal();
    void privateCollectionCreateSignal(OAILocationWarnings summary);
    void privateCollectionDeleteSignal();
    void privateCollectionDetailsSignal(OAICollectionCompletePrivate summary);
    void privateCollectionPrivateLinkCreateSignal(OAIPrivateLinkResponse summary);
    void privateCollectionPrivateLinkDeleteSignal();
    void privateCollectionPrivateLinkUpdateSignal();
    void privateCollectionPrivateLinksListSignal(QList<OAIPrivateLink> summary);
    void privateCollectionPublishSignal(OAILocation summary);
    void privateCollectionReserveDoiSignal(OAICollectionDOI summary);
    void privateCollectionReserveHandleSignal(OAICollectionHandle summary);
    void privateCollectionResourceSignal(OAILocation summary);
    void privateCollectionUpdateSignal(OAILocationWarningsUpdate summary);
    void privateCollectionsListSignal(QList<OAICollection> summary);
    void privateCollectionsSearchSignal(QList<OAICollection> summary);


    void collectionArticlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticle> summary);
    void collectionDetailsSignalFull(OAIHttpRequestWorker *worker, OAICollectionComplete summary);
    void collectionVersionDetailsSignalFull(OAIHttpRequestWorker *worker, OAICollectionComplete summary);
    void collectionVersionsSignalFull(OAIHttpRequestWorker *worker, QList<OAICollectionVersions> summary);
    void collectionsListSignalFull(OAIHttpRequestWorker *worker, QList<OAICollection> summary);
    void collectionsSearchSignalFull(OAIHttpRequestWorker *worker, QList<OAICollection> summary);
    void privateCollectionArticleDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateCollectionArticlesAddSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void privateCollectionArticlesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticle> summary);
    void privateCollectionArticlesReplaceSignalFull(OAIHttpRequestWorker *worker);
    void privateCollectionAuthorDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateCollectionAuthorsAddSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void privateCollectionAuthorsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIAuthor> summary);
    void privateCollectionAuthorsReplaceSignalFull(OAIHttpRequestWorker *worker);
    void privateCollectionCategoriesAddSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void privateCollectionCategoriesListSignalFull(OAIHttpRequestWorker *worker, QList<OAICategory> summary);
    void privateCollectionCategoriesReplaceSignalFull(OAIHttpRequestWorker *worker);
    void privateCollectionCategoryDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateCollectionCreateSignalFull(OAIHttpRequestWorker *worker, OAILocationWarnings summary);
    void privateCollectionDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateCollectionDetailsSignalFull(OAIHttpRequestWorker *worker, OAICollectionCompletePrivate summary);
    void privateCollectionPrivateLinkCreateSignalFull(OAIHttpRequestWorker *worker, OAIPrivateLinkResponse summary);
    void privateCollectionPrivateLinkDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateCollectionPrivateLinkUpdateSignalFull(OAIHttpRequestWorker *worker);
    void privateCollectionPrivateLinksListSignalFull(OAIHttpRequestWorker *worker, QList<OAIPrivateLink> summary);
    void privateCollectionPublishSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void privateCollectionReserveDoiSignalFull(OAIHttpRequestWorker *worker, OAICollectionDOI summary);
    void privateCollectionReserveHandleSignalFull(OAIHttpRequestWorker *worker, OAICollectionHandle summary);
    void privateCollectionResourceSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void privateCollectionUpdateSignalFull(OAIHttpRequestWorker *worker, OAILocationWarningsUpdate summary);
    void privateCollectionsListSignalFull(OAIHttpRequestWorker *worker, QList<OAICollection> summary);
    void privateCollectionsSearchSignalFull(OAIHttpRequestWorker *worker, QList<OAICollection> summary);

    Q_DECL_DEPRECATED_X("Use collectionArticlesSignalError() instead")
    void collectionArticlesSignalE(QList<OAIArticle> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionArticlesSignalError(QList<OAIArticle> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionDetailsSignalError() instead")
    void collectionDetailsSignalE(OAICollectionComplete summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionDetailsSignalError(OAICollectionComplete summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionVersionDetailsSignalError() instead")
    void collectionVersionDetailsSignalE(OAICollectionComplete summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionVersionDetailsSignalError(OAICollectionComplete summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionVersionsSignalError() instead")
    void collectionVersionsSignalE(QList<OAICollectionVersions> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionVersionsSignalError(QList<OAICollectionVersions> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsListSignalError() instead")
    void collectionsListSignalE(QList<OAICollection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsListSignalError(QList<OAICollection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsSearchSignalError() instead")
    void collectionsSearchSignalE(QList<OAICollection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsSearchSignalError(QList<OAICollection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionArticleDeleteSignalError() instead")
    void privateCollectionArticleDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionArticleDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionArticlesAddSignalError() instead")
    void privateCollectionArticlesAddSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionArticlesAddSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionArticlesListSignalError() instead")
    void privateCollectionArticlesListSignalE(QList<OAIArticle> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionArticlesListSignalError(QList<OAIArticle> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionArticlesReplaceSignalError() instead")
    void privateCollectionArticlesReplaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionArticlesReplaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionAuthorDeleteSignalError() instead")
    void privateCollectionAuthorDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionAuthorDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionAuthorsAddSignalError() instead")
    void privateCollectionAuthorsAddSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionAuthorsAddSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionAuthorsListSignalError() instead")
    void privateCollectionAuthorsListSignalE(QList<OAIAuthor> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionAuthorsListSignalError(QList<OAIAuthor> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionAuthorsReplaceSignalError() instead")
    void privateCollectionAuthorsReplaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionAuthorsReplaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionCategoriesAddSignalError() instead")
    void privateCollectionCategoriesAddSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionCategoriesAddSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionCategoriesListSignalError() instead")
    void privateCollectionCategoriesListSignalE(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionCategoriesListSignalError(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionCategoriesReplaceSignalError() instead")
    void privateCollectionCategoriesReplaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionCategoriesReplaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionCategoryDeleteSignalError() instead")
    void privateCollectionCategoryDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionCategoryDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionCreateSignalError() instead")
    void privateCollectionCreateSignalE(OAILocationWarnings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionCreateSignalError(OAILocationWarnings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionDeleteSignalError() instead")
    void privateCollectionDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionDetailsSignalError() instead")
    void privateCollectionDetailsSignalE(OAICollectionCompletePrivate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionDetailsSignalError(OAICollectionCompletePrivate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionPrivateLinkCreateSignalError() instead")
    void privateCollectionPrivateLinkCreateSignalE(OAIPrivateLinkResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionPrivateLinkCreateSignalError(OAIPrivateLinkResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionPrivateLinkDeleteSignalError() instead")
    void privateCollectionPrivateLinkDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionPrivateLinkDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionPrivateLinkUpdateSignalError() instead")
    void privateCollectionPrivateLinkUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionPrivateLinkUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionPrivateLinksListSignalError() instead")
    void privateCollectionPrivateLinksListSignalE(QList<OAIPrivateLink> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionPrivateLinksListSignalError(QList<OAIPrivateLink> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionPublishSignalError() instead")
    void privateCollectionPublishSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionPublishSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionReserveDoiSignalError() instead")
    void privateCollectionReserveDoiSignalE(OAICollectionDOI summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionReserveDoiSignalError(OAICollectionDOI summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionReserveHandleSignalError() instead")
    void privateCollectionReserveHandleSignalE(OAICollectionHandle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionReserveHandleSignalError(OAICollectionHandle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionResourceSignalError() instead")
    void privateCollectionResourceSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionResourceSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionUpdateSignalError() instead")
    void privateCollectionUpdateSignalE(OAILocationWarningsUpdate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionUpdateSignalError(OAILocationWarningsUpdate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionsListSignalError() instead")
    void privateCollectionsListSignalE(QList<OAICollection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionsListSignalError(QList<OAICollection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionsSearchSignalError() instead")
    void privateCollectionsSearchSignalE(QList<OAICollection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionsSearchSignalError(QList<OAICollection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use collectionArticlesSignalErrorFull() instead")
    void collectionArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionDetailsSignalErrorFull() instead")
    void collectionDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionVersionDetailsSignalErrorFull() instead")
    void collectionVersionDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionVersionDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionVersionsSignalErrorFull() instead")
    void collectionVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsListSignalErrorFull() instead")
    void collectionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use collectionsSearchSignalErrorFull() instead")
    void collectionsSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void collectionsSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionArticleDeleteSignalErrorFull() instead")
    void privateCollectionArticleDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionArticleDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionArticlesAddSignalErrorFull() instead")
    void privateCollectionArticlesAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionArticlesAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionArticlesListSignalErrorFull() instead")
    void privateCollectionArticlesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionArticlesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionArticlesReplaceSignalErrorFull() instead")
    void privateCollectionArticlesReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionArticlesReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionAuthorDeleteSignalErrorFull() instead")
    void privateCollectionAuthorDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionAuthorDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionAuthorsAddSignalErrorFull() instead")
    void privateCollectionAuthorsAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionAuthorsAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionAuthorsListSignalErrorFull() instead")
    void privateCollectionAuthorsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionAuthorsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionAuthorsReplaceSignalErrorFull() instead")
    void privateCollectionAuthorsReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionAuthorsReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionCategoriesAddSignalErrorFull() instead")
    void privateCollectionCategoriesAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionCategoriesAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionCategoriesListSignalErrorFull() instead")
    void privateCollectionCategoriesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionCategoriesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionCategoriesReplaceSignalErrorFull() instead")
    void privateCollectionCategoriesReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionCategoriesReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionCategoryDeleteSignalErrorFull() instead")
    void privateCollectionCategoryDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionCategoryDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionCreateSignalErrorFull() instead")
    void privateCollectionCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionDeleteSignalErrorFull() instead")
    void privateCollectionDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionDetailsSignalErrorFull() instead")
    void privateCollectionDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionPrivateLinkCreateSignalErrorFull() instead")
    void privateCollectionPrivateLinkCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionPrivateLinkCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionPrivateLinkDeleteSignalErrorFull() instead")
    void privateCollectionPrivateLinkDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionPrivateLinkDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionPrivateLinkUpdateSignalErrorFull() instead")
    void privateCollectionPrivateLinkUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionPrivateLinkUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionPrivateLinksListSignalErrorFull() instead")
    void privateCollectionPrivateLinksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionPrivateLinksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionPublishSignalErrorFull() instead")
    void privateCollectionPublishSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionPublishSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionReserveDoiSignalErrorFull() instead")
    void privateCollectionReserveDoiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionReserveDoiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionReserveHandleSignalErrorFull() instead")
    void privateCollectionReserveHandleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionReserveHandleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionResourceSignalErrorFull() instead")
    void privateCollectionResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionUpdateSignalErrorFull() instead")
    void privateCollectionUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionsListSignalErrorFull() instead")
    void privateCollectionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCollectionsSearchSignalErrorFull() instead")
    void privateCollectionsSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCollectionsSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
