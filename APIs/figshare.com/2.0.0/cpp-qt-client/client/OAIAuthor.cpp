/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthor::OAIAuthor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthor::OAIAuthor() {
    this->initializeModel();
}

OAIAuthor::~OAIAuthor() {}

void OAIAuthor::initializeModel() {

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_orcid_id_isSet = false;
    m_orcid_id_isValid = false;

    m_url_name_isSet = false;
    m_url_name_isValid = false;
}

void OAIAuthor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthor::fromJsonObject(QJsonObject json) {

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_orcid_id_isValid = ::OpenAPI::fromJsonValue(m_orcid_id, json[QString("orcid_id")]);
    m_orcid_id_isSet = !json[QString("orcid_id")].isNull() && m_orcid_id_isValid;

    m_url_name_isValid = ::OpenAPI::fromJsonValue(m_url_name, json[QString("url_name")]);
    m_url_name_isSet = !json[QString("url_name")].isNull() && m_url_name_isValid;
}

QString OAIAuthor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthor::asJsonObject() const {
    QJsonObject obj;
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_orcid_id_isSet) {
        obj.insert(QString("orcid_id"), ::OpenAPI::toJsonValue(m_orcid_id));
    }
    if (m_url_name_isSet) {
        obj.insert(QString("url_name"), ::OpenAPI::toJsonValue(m_url_name));
    }
    return obj;
}

QString OAIAuthor::getFullName() const {
    return m_full_name;
}
void OAIAuthor::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIAuthor::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIAuthor::is_full_name_Valid() const{
    return m_full_name_isValid;
}

qint64 OAIAuthor::getId() const {
    return m_id;
}
void OAIAuthor::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAuthor::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAuthor::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAuthor::isIsActive() const {
    return m_is_active;
}
void OAIAuthor::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIAuthor::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIAuthor::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAIAuthor::getOrcidId() const {
    return m_orcid_id;
}
void OAIAuthor::setOrcidId(const QString &orcid_id) {
    m_orcid_id = orcid_id;
    m_orcid_id_isSet = true;
}

bool OAIAuthor::is_orcid_id_Set() const{
    return m_orcid_id_isSet;
}

bool OAIAuthor::is_orcid_id_Valid() const{
    return m_orcid_id_isValid;
}

QString OAIAuthor::getUrlName() const {
    return m_url_name;
}
void OAIAuthor::setUrlName(const QString &url_name) {
    m_url_name = url_name;
    m_url_name_isSet = true;
}

bool OAIAuthor::is_url_name_Set() const{
    return m_url_name_isSet;
}

bool OAIAuthor::is_url_name_Valid() const{
    return m_url_name_isValid;
}

bool OAIAuthor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orcid_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_full_name_isValid && m_id_isValid && m_is_active_isValid && m_orcid_id_isValid && m_url_name_isValid && true;
}

} // namespace OpenAPI
