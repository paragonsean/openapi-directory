/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategory::OAICategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategory::OAICategory() {
    this->initializeModel();
}

OAICategory::~OAICategory() {}

void OAICategory::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_taxonomy_id_isSet = false;
    m_taxonomy_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAICategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategory::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("source_id")]);
    m_source_id_isSet = !json[QString("source_id")].isNull() && m_source_id_isValid;

    m_taxonomy_id_isValid = ::OpenAPI::fromJsonValue(m_taxonomy_id, json[QString("taxonomy_id")]);
    m_taxonomy_id_isSet = !json[QString("taxonomy_id")].isNull() && m_taxonomy_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAICategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategory::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("source_id"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_taxonomy_id_isSet) {
        obj.insert(QString("taxonomy_id"), ::OpenAPI::toJsonValue(m_taxonomy_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint64 OAICategory::getId() const {
    return m_id;
}
void OAICategory::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICategory::is_id_Set() const{
    return m_id_isSet;
}

bool OAICategory::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAICategory::getParentId() const {
    return m_parent_id;
}
void OAICategory::setParentId(const qint64 &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAICategory::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAICategory::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAICategory::getPath() const {
    return m_path;
}
void OAICategory::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAICategory::is_path_Set() const{
    return m_path_isSet;
}

bool OAICategory::is_path_Valid() const{
    return m_path_isValid;
}

QString OAICategory::getSourceId() const {
    return m_source_id;
}
void OAICategory::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAICategory::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAICategory::is_source_id_Valid() const{
    return m_source_id_isValid;
}

qint64 OAICategory::getTaxonomyId() const {
    return m_taxonomy_id;
}
void OAICategory::setTaxonomyId(const qint64 &taxonomy_id) {
    m_taxonomy_id = taxonomy_id;
    m_taxonomy_id_isSet = true;
}

bool OAICategory::is_taxonomy_id_Set() const{
    return m_taxonomy_id_isSet;
}

bool OAICategory::is_taxonomy_id_Valid() const{
    return m_taxonomy_id_isValid;
}

QString OAICategory::getTitle() const {
    return m_title;
}
void OAICategory::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICategory::is_title_Set() const{
    return m_title_isSet;
}

bool OAICategory::is_title_Valid() const{
    return m_title_isValid;
}

bool OAICategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxonomy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_parent_id_isValid && m_path_isValid && m_source_id_isValid && m_taxonomy_id_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
