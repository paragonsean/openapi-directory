/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectionUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectionUpdate::OAICollectionUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectionUpdate::OAICollectionUpdate() {
    this->initializeModel();
}

OAICollectionUpdate::~OAICollectionUpdate() {}

void OAICollectionUpdate::initializeModel() {

    m_articles_isSet = false;
    m_articles_isValid = false;

    m_authors_isSet = false;
    m_authors_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_categories_by_source_id_isSet = false;
    m_categories_by_source_id_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_custom_fields_list_isSet = false;
    m_custom_fields_list_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_doi_isSet = false;
    m_doi_isValid = false;

    m_funding_isSet = false;
    m_funding_isValid = false;

    m_funding_list_isSet = false;
    m_funding_list_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_handle_isSet = false;
    m_handle_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;

    m_resource_doi_isSet = false;
    m_resource_doi_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_link_isSet = false;
    m_resource_link_isValid = false;

    m_resource_title_isSet = false;
    m_resource_title_isValid = false;

    m_resource_version_isSet = false;
    m_resource_version_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_timeline_isSet = false;
    m_timeline_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAICollectionUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectionUpdate::fromJsonObject(QJsonObject json) {

    m_articles_isValid = ::OpenAPI::fromJsonValue(m_articles, json[QString("articles")]);
    m_articles_isSet = !json[QString("articles")].isNull() && m_articles_isValid;

    m_authors_isValid = ::OpenAPI::fromJsonValue(m_authors, json[QString("authors")]);
    m_authors_isSet = !json[QString("authors")].isNull() && m_authors_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_categories_by_source_id_isValid = ::OpenAPI::fromJsonValue(m_categories_by_source_id, json[QString("categories_by_source_id")]);
    m_categories_by_source_id_isSet = !json[QString("categories_by_source_id")].isNull() && m_categories_by_source_id_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_custom_fields_list_isValid = ::OpenAPI::fromJsonValue(m_custom_fields_list, json[QString("custom_fields_list")]);
    m_custom_fields_list_isSet = !json[QString("custom_fields_list")].isNull() && m_custom_fields_list_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_doi_isValid = ::OpenAPI::fromJsonValue(m_doi, json[QString("doi")]);
    m_doi_isSet = !json[QString("doi")].isNull() && m_doi_isValid;

    m_funding_isValid = ::OpenAPI::fromJsonValue(m_funding, json[QString("funding")]);
    m_funding_isSet = !json[QString("funding")].isNull() && m_funding_isValid;

    m_funding_list_isValid = ::OpenAPI::fromJsonValue(m_funding_list, json[QString("funding_list")]);
    m_funding_list_isSet = !json[QString("funding_list")].isNull() && m_funding_list_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_handle_isValid = ::OpenAPI::fromJsonValue(m_handle, json[QString("handle")]);
    m_handle_isSet = !json[QString("handle")].isNull() && m_handle_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;

    m_resource_doi_isValid = ::OpenAPI::fromJsonValue(m_resource_doi, json[QString("resource_doi")]);
    m_resource_doi_isSet = !json[QString("resource_doi")].isNull() && m_resource_doi_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resource_id")]);
    m_resource_id_isSet = !json[QString("resource_id")].isNull() && m_resource_id_isValid;

    m_resource_link_isValid = ::OpenAPI::fromJsonValue(m_resource_link, json[QString("resource_link")]);
    m_resource_link_isSet = !json[QString("resource_link")].isNull() && m_resource_link_isValid;

    m_resource_title_isValid = ::OpenAPI::fromJsonValue(m_resource_title, json[QString("resource_title")]);
    m_resource_title_isSet = !json[QString("resource_title")].isNull() && m_resource_title_isValid;

    m_resource_version_isValid = ::OpenAPI::fromJsonValue(m_resource_version, json[QString("resource_version")]);
    m_resource_version_isSet = !json[QString("resource_version")].isNull() && m_resource_version_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_timeline_isValid = ::OpenAPI::fromJsonValue(m_timeline, json[QString("timeline")]);
    m_timeline_isSet = !json[QString("timeline")].isNull() && m_timeline_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAICollectionUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectionUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_articles.size() > 0) {
        obj.insert(QString("articles"), ::OpenAPI::toJsonValue(m_articles));
    }
    if (m_authors.size() > 0) {
        obj.insert(QString("authors"), ::OpenAPI::toJsonValue(m_authors));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_categories_by_source_id.size() > 0) {
        obj.insert(QString("categories_by_source_id"), ::OpenAPI::toJsonValue(m_categories_by_source_id));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_custom_fields_list.size() > 0) {
        obj.insert(QString("custom_fields_list"), ::OpenAPI::toJsonValue(m_custom_fields_list));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_doi_isSet) {
        obj.insert(QString("doi"), ::OpenAPI::toJsonValue(m_doi));
    }
    if (m_funding_isSet) {
        obj.insert(QString("funding"), ::OpenAPI::toJsonValue(m_funding));
    }
    if (m_funding_list.size() > 0) {
        obj.insert(QString("funding_list"), ::OpenAPI::toJsonValue(m_funding_list));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_handle_isSet) {
        obj.insert(QString("handle"), ::OpenAPI::toJsonValue(m_handle));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_references.size() > 0) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(m_references));
    }
    if (m_resource_doi_isSet) {
        obj.insert(QString("resource_doi"), ::OpenAPI::toJsonValue(m_resource_doi));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resource_id"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_link_isSet) {
        obj.insert(QString("resource_link"), ::OpenAPI::toJsonValue(m_resource_link));
    }
    if (m_resource_title_isSet) {
        obj.insert(QString("resource_title"), ::OpenAPI::toJsonValue(m_resource_title));
    }
    if (m_resource_version_isSet) {
        obj.insert(QString("resource_version"), ::OpenAPI::toJsonValue(m_resource_version));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_timeline.isSet()) {
        obj.insert(QString("timeline"), ::OpenAPI::toJsonValue(m_timeline));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<qint32> OAICollectionUpdate::getArticles() const {
    return m_articles;
}
void OAICollectionUpdate::setArticles(const QList<qint32> &articles) {
    m_articles = articles;
    m_articles_isSet = true;
}

bool OAICollectionUpdate::is_articles_Set() const{
    return m_articles_isSet;
}

bool OAICollectionUpdate::is_articles_Valid() const{
    return m_articles_isValid;
}

QList<OAIObject> OAICollectionUpdate::getAuthors() const {
    return m_authors;
}
void OAICollectionUpdate::setAuthors(const QList<OAIObject> &authors) {
    m_authors = authors;
    m_authors_isSet = true;
}

bool OAICollectionUpdate::is_authors_Set() const{
    return m_authors_isSet;
}

bool OAICollectionUpdate::is_authors_Valid() const{
    return m_authors_isValid;
}

QList<qint64> OAICollectionUpdate::getCategories() const {
    return m_categories;
}
void OAICollectionUpdate::setCategories(const QList<qint64> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAICollectionUpdate::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAICollectionUpdate::is_categories_Valid() const{
    return m_categories_isValid;
}

QList<QString> OAICollectionUpdate::getCategoriesBySourceId() const {
    return m_categories_by_source_id;
}
void OAICollectionUpdate::setCategoriesBySourceId(const QList<QString> &categories_by_source_id) {
    m_categories_by_source_id = categories_by_source_id;
    m_categories_by_source_id_isSet = true;
}

bool OAICollectionUpdate::is_categories_by_source_id_Set() const{
    return m_categories_by_source_id_isSet;
}

bool OAICollectionUpdate::is_categories_by_source_id_Valid() const{
    return m_categories_by_source_id_isValid;
}

OAIObject OAICollectionUpdate::getCustomFields() const {
    return m_custom_fields;
}
void OAICollectionUpdate::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAICollectionUpdate::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAICollectionUpdate::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QList<OAICustomArticleFieldAdd> OAICollectionUpdate::getCustomFieldsList() const {
    return m_custom_fields_list;
}
void OAICollectionUpdate::setCustomFieldsList(const QList<OAICustomArticleFieldAdd> &custom_fields_list) {
    m_custom_fields_list = custom_fields_list;
    m_custom_fields_list_isSet = true;
}

bool OAICollectionUpdate::is_custom_fields_list_Set() const{
    return m_custom_fields_list_isSet;
}

bool OAICollectionUpdate::is_custom_fields_list_Valid() const{
    return m_custom_fields_list_isValid;
}

QString OAICollectionUpdate::getDescription() const {
    return m_description;
}
void OAICollectionUpdate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICollectionUpdate::is_description_Set() const{
    return m_description_isSet;
}

bool OAICollectionUpdate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICollectionUpdate::getDoi() const {
    return m_doi;
}
void OAICollectionUpdate::setDoi(const QString &doi) {
    m_doi = doi;
    m_doi_isSet = true;
}

bool OAICollectionUpdate::is_doi_Set() const{
    return m_doi_isSet;
}

bool OAICollectionUpdate::is_doi_Valid() const{
    return m_doi_isValid;
}

QString OAICollectionUpdate::getFunding() const {
    return m_funding;
}
void OAICollectionUpdate::setFunding(const QString &funding) {
    m_funding = funding;
    m_funding_isSet = true;
}

bool OAICollectionUpdate::is_funding_Set() const{
    return m_funding_isSet;
}

bool OAICollectionUpdate::is_funding_Valid() const{
    return m_funding_isValid;
}

QList<OAIFundingCreate> OAICollectionUpdate::getFundingList() const {
    return m_funding_list;
}
void OAICollectionUpdate::setFundingList(const QList<OAIFundingCreate> &funding_list) {
    m_funding_list = funding_list;
    m_funding_list_isSet = true;
}

bool OAICollectionUpdate::is_funding_list_Set() const{
    return m_funding_list_isSet;
}

bool OAICollectionUpdate::is_funding_list_Valid() const{
    return m_funding_list_isValid;
}

qint64 OAICollectionUpdate::getGroupId() const {
    return m_group_id;
}
void OAICollectionUpdate::setGroupId(const qint64 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAICollectionUpdate::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAICollectionUpdate::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAICollectionUpdate::getHandle() const {
    return m_handle;
}
void OAICollectionUpdate::setHandle(const QString &handle) {
    m_handle = handle;
    m_handle_isSet = true;
}

bool OAICollectionUpdate::is_handle_Set() const{
    return m_handle_isSet;
}

bool OAICollectionUpdate::is_handle_Valid() const{
    return m_handle_isValid;
}

QList<QString> OAICollectionUpdate::getKeywords() const {
    return m_keywords;
}
void OAICollectionUpdate::setKeywords(const QList<QString> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAICollectionUpdate::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAICollectionUpdate::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QList<QString> OAICollectionUpdate::getReferences() const {
    return m_references;
}
void OAICollectionUpdate::setReferences(const QList<QString> &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAICollectionUpdate::is_references_Set() const{
    return m_references_isSet;
}

bool OAICollectionUpdate::is_references_Valid() const{
    return m_references_isValid;
}

QString OAICollectionUpdate::getResourceDoi() const {
    return m_resource_doi;
}
void OAICollectionUpdate::setResourceDoi(const QString &resource_doi) {
    m_resource_doi = resource_doi;
    m_resource_doi_isSet = true;
}

bool OAICollectionUpdate::is_resource_doi_Set() const{
    return m_resource_doi_isSet;
}

bool OAICollectionUpdate::is_resource_doi_Valid() const{
    return m_resource_doi_isValid;
}

QString OAICollectionUpdate::getResourceId() const {
    return m_resource_id;
}
void OAICollectionUpdate::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAICollectionUpdate::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAICollectionUpdate::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAICollectionUpdate::getResourceLink() const {
    return m_resource_link;
}
void OAICollectionUpdate::setResourceLink(const QString &resource_link) {
    m_resource_link = resource_link;
    m_resource_link_isSet = true;
}

bool OAICollectionUpdate::is_resource_link_Set() const{
    return m_resource_link_isSet;
}

bool OAICollectionUpdate::is_resource_link_Valid() const{
    return m_resource_link_isValid;
}

QString OAICollectionUpdate::getResourceTitle() const {
    return m_resource_title;
}
void OAICollectionUpdate::setResourceTitle(const QString &resource_title) {
    m_resource_title = resource_title;
    m_resource_title_isSet = true;
}

bool OAICollectionUpdate::is_resource_title_Set() const{
    return m_resource_title_isSet;
}

bool OAICollectionUpdate::is_resource_title_Valid() const{
    return m_resource_title_isValid;
}

qint32 OAICollectionUpdate::getResourceVersion() const {
    return m_resource_version;
}
void OAICollectionUpdate::setResourceVersion(const qint32 &resource_version) {
    m_resource_version = resource_version;
    m_resource_version_isSet = true;
}

bool OAICollectionUpdate::is_resource_version_Set() const{
    return m_resource_version_isSet;
}

bool OAICollectionUpdate::is_resource_version_Valid() const{
    return m_resource_version_isValid;
}

QList<QString> OAICollectionUpdate::getTags() const {
    return m_tags;
}
void OAICollectionUpdate::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICollectionUpdate::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICollectionUpdate::is_tags_Valid() const{
    return m_tags_isValid;
}

OAITimelineUpdate OAICollectionUpdate::getTimeline() const {
    return m_timeline;
}
void OAICollectionUpdate::setTimeline(const OAITimelineUpdate &timeline) {
    m_timeline = timeline;
    m_timeline_isSet = true;
}

bool OAICollectionUpdate::is_timeline_Set() const{
    return m_timeline_isSet;
}

bool OAICollectionUpdate::is_timeline_Valid() const{
    return m_timeline_isValid;
}

QString OAICollectionUpdate::getTitle() const {
    return m_title;
}
void OAICollectionUpdate::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICollectionUpdate::is_title_Set() const{
    return m_title_isSet;
}

bool OAICollectionUpdate::is_title_Valid() const{
    return m_title_isValid;
}

bool OAICollectionUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_articles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_authors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_by_source_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_doi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectionUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
