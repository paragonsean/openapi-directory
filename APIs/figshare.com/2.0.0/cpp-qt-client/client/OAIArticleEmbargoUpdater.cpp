/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArticleEmbargoUpdater.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArticleEmbargoUpdater::OAIArticleEmbargoUpdater(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArticleEmbargoUpdater::OAIArticleEmbargoUpdater() {
    this->initializeModel();
}

OAIArticleEmbargoUpdater::~OAIArticleEmbargoUpdater() {}

void OAIArticleEmbargoUpdater::initializeModel() {

    m_embargo_date_isSet = false;
    m_embargo_date_isValid = false;

    m_embargo_options_isSet = false;
    m_embargo_options_isValid = false;

    m_embargo_reason_isSet = false;
    m_embargo_reason_isValid = false;

    m_embargo_title_isSet = false;
    m_embargo_title_isValid = false;

    m_embargo_type_isSet = false;
    m_embargo_type_isValid = false;

    m_is_embargoed_isSet = false;
    m_is_embargoed_isValid = false;
}

void OAIArticleEmbargoUpdater::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArticleEmbargoUpdater::fromJsonObject(QJsonObject json) {

    m_embargo_date_isValid = ::OpenAPI::fromJsonValue(m_embargo_date, json[QString("embargo_date")]);
    m_embargo_date_isSet = !json[QString("embargo_date")].isNull() && m_embargo_date_isValid;

    m_embargo_options_isValid = ::OpenAPI::fromJsonValue(m_embargo_options, json[QString("embargo_options")]);
    m_embargo_options_isSet = !json[QString("embargo_options")].isNull() && m_embargo_options_isValid;

    m_embargo_reason_isValid = ::OpenAPI::fromJsonValue(m_embargo_reason, json[QString("embargo_reason")]);
    m_embargo_reason_isSet = !json[QString("embargo_reason")].isNull() && m_embargo_reason_isValid;

    m_embargo_title_isValid = ::OpenAPI::fromJsonValue(m_embargo_title, json[QString("embargo_title")]);
    m_embargo_title_isSet = !json[QString("embargo_title")].isNull() && m_embargo_title_isValid;

    m_embargo_type_isValid = ::OpenAPI::fromJsonValue(m_embargo_type, json[QString("embargo_type")]);
    m_embargo_type_isSet = !json[QString("embargo_type")].isNull() && m_embargo_type_isValid;

    m_is_embargoed_isValid = ::OpenAPI::fromJsonValue(m_is_embargoed, json[QString("is_embargoed")]);
    m_is_embargoed_isSet = !json[QString("is_embargoed")].isNull() && m_is_embargoed_isValid;
}

QString OAIArticleEmbargoUpdater::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArticleEmbargoUpdater::asJsonObject() const {
    QJsonObject obj;
    if (m_embargo_date_isSet) {
        obj.insert(QString("embargo_date"), ::OpenAPI::toJsonValue(m_embargo_date));
    }
    if (m_embargo_options.size() > 0) {
        obj.insert(QString("embargo_options"), ::OpenAPI::toJsonValue(m_embargo_options));
    }
    if (m_embargo_reason_isSet) {
        obj.insert(QString("embargo_reason"), ::OpenAPI::toJsonValue(m_embargo_reason));
    }
    if (m_embargo_title_isSet) {
        obj.insert(QString("embargo_title"), ::OpenAPI::toJsonValue(m_embargo_title));
    }
    if (m_embargo_type_isSet) {
        obj.insert(QString("embargo_type"), ::OpenAPI::toJsonValue(m_embargo_type));
    }
    if (m_is_embargoed_isSet) {
        obj.insert(QString("is_embargoed"), ::OpenAPI::toJsonValue(m_is_embargoed));
    }
    return obj;
}

QString OAIArticleEmbargoUpdater::getEmbargoDate() const {
    return m_embargo_date;
}
void OAIArticleEmbargoUpdater::setEmbargoDate(const QString &embargo_date) {
    m_embargo_date = embargo_date;
    m_embargo_date_isSet = true;
}

bool OAIArticleEmbargoUpdater::is_embargo_date_Set() const{
    return m_embargo_date_isSet;
}

bool OAIArticleEmbargoUpdater::is_embargo_date_Valid() const{
    return m_embargo_date_isValid;
}

QList<OAIObject> OAIArticleEmbargoUpdater::getEmbargoOptions() const {
    return m_embargo_options;
}
void OAIArticleEmbargoUpdater::setEmbargoOptions(const QList<OAIObject> &embargo_options) {
    m_embargo_options = embargo_options;
    m_embargo_options_isSet = true;
}

bool OAIArticleEmbargoUpdater::is_embargo_options_Set() const{
    return m_embargo_options_isSet;
}

bool OAIArticleEmbargoUpdater::is_embargo_options_Valid() const{
    return m_embargo_options_isValid;
}

QString OAIArticleEmbargoUpdater::getEmbargoReason() const {
    return m_embargo_reason;
}
void OAIArticleEmbargoUpdater::setEmbargoReason(const QString &embargo_reason) {
    m_embargo_reason = embargo_reason;
    m_embargo_reason_isSet = true;
}

bool OAIArticleEmbargoUpdater::is_embargo_reason_Set() const{
    return m_embargo_reason_isSet;
}

bool OAIArticleEmbargoUpdater::is_embargo_reason_Valid() const{
    return m_embargo_reason_isValid;
}

QString OAIArticleEmbargoUpdater::getEmbargoTitle() const {
    return m_embargo_title;
}
void OAIArticleEmbargoUpdater::setEmbargoTitle(const QString &embargo_title) {
    m_embargo_title = embargo_title;
    m_embargo_title_isSet = true;
}

bool OAIArticleEmbargoUpdater::is_embargo_title_Set() const{
    return m_embargo_title_isSet;
}

bool OAIArticleEmbargoUpdater::is_embargo_title_Valid() const{
    return m_embargo_title_isValid;
}

QString OAIArticleEmbargoUpdater::getEmbargoType() const {
    return m_embargo_type;
}
void OAIArticleEmbargoUpdater::setEmbargoType(const QString &embargo_type) {
    m_embargo_type = embargo_type;
    m_embargo_type_isSet = true;
}

bool OAIArticleEmbargoUpdater::is_embargo_type_Set() const{
    return m_embargo_type_isSet;
}

bool OAIArticleEmbargoUpdater::is_embargo_type_Valid() const{
    return m_embargo_type_isValid;
}

bool OAIArticleEmbargoUpdater::isIsEmbargoed() const {
    return m_is_embargoed;
}
void OAIArticleEmbargoUpdater::setIsEmbargoed(const bool &is_embargoed) {
    m_is_embargoed = is_embargoed;
    m_is_embargoed_isSet = true;
}

bool OAIArticleEmbargoUpdater::is_is_embargoed_Set() const{
    return m_is_embargoed_isSet;
}

bool OAIArticleEmbargoUpdater::is_is_embargoed_Valid() const{
    return m_is_embargoed_isValid;
}

bool OAIArticleEmbargoUpdater::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_embargo_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embargo_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_embargo_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embargo_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embargo_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_embargoed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArticleEmbargoUpdater::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_embargo_date_isValid && m_embargo_type_isValid && m_is_embargoed_isValid && true;
}

} // namespace OpenAPI
