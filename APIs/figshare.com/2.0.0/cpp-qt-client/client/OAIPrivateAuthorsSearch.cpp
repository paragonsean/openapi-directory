/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateAuthorsSearch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateAuthorsSearch::OAIPrivateAuthorsSearch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateAuthorsSearch::OAIPrivateAuthorsSearch() {
    this->initializeModel();
}

OAIPrivateAuthorsSearch::~OAIPrivateAuthorsSearch() {}

void OAIPrivateAuthorsSearch::initializeModel() {

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_institution_id_isSet = false;
    m_institution_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_public_isSet = false;
    m_is_public_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_orcid_isSet = false;
    m_orcid_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_order_direction_isSet = false;
    m_order_direction_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_search_for_isSet = false;
    m_search_for_isValid = false;
}

void OAIPrivateAuthorsSearch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateAuthorsSearch::fromJsonObject(QJsonObject json) {

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_institution_id_isValid = ::OpenAPI::fromJsonValue(m_institution_id, json[QString("institution_id")]);
    m_institution_id_isSet = !json[QString("institution_id")].isNull() && m_institution_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_is_public_isValid = ::OpenAPI::fromJsonValue(m_is_public, json[QString("is_public")]);
    m_is_public_isSet = !json[QString("is_public")].isNull() && m_is_public_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_orcid_isValid = ::OpenAPI::fromJsonValue(m_orcid, json[QString("orcid")]);
    m_orcid_isSet = !json[QString("orcid")].isNull() && m_orcid_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_order_direction_isValid = ::OpenAPI::fromJsonValue(m_order_direction, json[QString("order_direction")]);
    m_order_direction_isSet = !json[QString("order_direction")].isNull() && m_order_direction_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;

    m_search_for_isValid = ::OpenAPI::fromJsonValue(m_search_for, json[QString("search_for")]);
    m_search_for_isSet = !json[QString("search_for")].isNull() && m_search_for_isValid;
}

QString OAIPrivateAuthorsSearch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateAuthorsSearch::asJsonObject() const {
    QJsonObject obj;
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_institution_id_isSet) {
        obj.insert(QString("institution_id"), ::OpenAPI::toJsonValue(m_institution_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_public_isSet) {
        obj.insert(QString("is_public"), ::OpenAPI::toJsonValue(m_is_public));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_orcid_isSet) {
        obj.insert(QString("orcid"), ::OpenAPI::toJsonValue(m_orcid));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_order_direction_isSet) {
        obj.insert(QString("order_direction"), ::OpenAPI::toJsonValue(m_order_direction));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_search_for_isSet) {
        obj.insert(QString("search_for"), ::OpenAPI::toJsonValue(m_search_for));
    }
    return obj;
}

qint64 OAIPrivateAuthorsSearch::getGroupId() const {
    return m_group_id;
}
void OAIPrivateAuthorsSearch::setGroupId(const qint64 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIPrivateAuthorsSearch::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIPrivateAuthorsSearch::is_group_id_Valid() const{
    return m_group_id_isValid;
}

qint64 OAIPrivateAuthorsSearch::getInstitutionId() const {
    return m_institution_id;
}
void OAIPrivateAuthorsSearch::setInstitutionId(const qint64 &institution_id) {
    m_institution_id = institution_id;
    m_institution_id_isSet = true;
}

bool OAIPrivateAuthorsSearch::is_institution_id_Set() const{
    return m_institution_id_isSet;
}

bool OAIPrivateAuthorsSearch::is_institution_id_Valid() const{
    return m_institution_id_isValid;
}

bool OAIPrivateAuthorsSearch::isIsActive() const {
    return m_is_active;
}
void OAIPrivateAuthorsSearch::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIPrivateAuthorsSearch::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIPrivateAuthorsSearch::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIPrivateAuthorsSearch::isIsPublic() const {
    return m_is_public;
}
void OAIPrivateAuthorsSearch::setIsPublic(const bool &is_public) {
    m_is_public = is_public;
    m_is_public_isSet = true;
}

bool OAIPrivateAuthorsSearch::is_is_public_Set() const{
    return m_is_public_isSet;
}

bool OAIPrivateAuthorsSearch::is_is_public_Valid() const{
    return m_is_public_isValid;
}

qint64 OAIPrivateAuthorsSearch::getLimit() const {
    return m_limit;
}
void OAIPrivateAuthorsSearch::setLimit(const qint64 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIPrivateAuthorsSearch::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIPrivateAuthorsSearch::is_limit_Valid() const{
    return m_limit_isValid;
}

qint64 OAIPrivateAuthorsSearch::getOffset() const {
    return m_offset;
}
void OAIPrivateAuthorsSearch::setOffset(const qint64 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIPrivateAuthorsSearch::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIPrivateAuthorsSearch::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAIPrivateAuthorsSearch::getOrcid() const {
    return m_orcid;
}
void OAIPrivateAuthorsSearch::setOrcid(const QString &orcid) {
    m_orcid = orcid;
    m_orcid_isSet = true;
}

bool OAIPrivateAuthorsSearch::is_orcid_Set() const{
    return m_orcid_isSet;
}

bool OAIPrivateAuthorsSearch::is_orcid_Valid() const{
    return m_orcid_isValid;
}

QString OAIPrivateAuthorsSearch::getOrder() const {
    return m_order;
}
void OAIPrivateAuthorsSearch::setOrder(const QString &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIPrivateAuthorsSearch::is_order_Set() const{
    return m_order_isSet;
}

bool OAIPrivateAuthorsSearch::is_order_Valid() const{
    return m_order_isValid;
}

QString OAIPrivateAuthorsSearch::getOrderDirection() const {
    return m_order_direction;
}
void OAIPrivateAuthorsSearch::setOrderDirection(const QString &order_direction) {
    m_order_direction = order_direction;
    m_order_direction_isSet = true;
}

bool OAIPrivateAuthorsSearch::is_order_direction_Set() const{
    return m_order_direction_isSet;
}

bool OAIPrivateAuthorsSearch::is_order_direction_Valid() const{
    return m_order_direction_isValid;
}

qint64 OAIPrivateAuthorsSearch::getPage() const {
    return m_page;
}
void OAIPrivateAuthorsSearch::setPage(const qint64 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIPrivateAuthorsSearch::is_page_Set() const{
    return m_page_isSet;
}

bool OAIPrivateAuthorsSearch::is_page_Valid() const{
    return m_page_isValid;
}

qint64 OAIPrivateAuthorsSearch::getPageSize() const {
    return m_page_size;
}
void OAIPrivateAuthorsSearch::setPageSize(const qint64 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIPrivateAuthorsSearch::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIPrivateAuthorsSearch::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIPrivateAuthorsSearch::getSearchFor() const {
    return m_search_for;
}
void OAIPrivateAuthorsSearch::setSearchFor(const QString &search_for) {
    m_search_for = search_for;
    m_search_for_isSet = true;
}

bool OAIPrivateAuthorsSearch::is_search_for_Set() const{
    return m_search_for_isSet;
}

bool OAIPrivateAuthorsSearch::is_search_for_Valid() const{
    return m_search_for_isValid;
}

bool OAIPrivateAuthorsSearch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orcid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_for_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateAuthorsSearch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
