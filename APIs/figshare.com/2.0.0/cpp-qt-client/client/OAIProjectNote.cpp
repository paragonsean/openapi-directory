/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectNote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectNote::OAIProjectNote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectNote::OAIProjectNote() {
    this->initializeModel();
}

OAIProjectNote::~OAIProjectNote() {}

void OAIProjectNote::initializeModel() {

    m_abstract_isSet = false;
    m_abstract_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIProjectNote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectNote::fromJsonObject(QJsonObject json) {

    m_abstract_isValid = ::OpenAPI::fromJsonValue(m_abstract, json[QString("abstract")]);
    m_abstract_isSet = !json[QString("abstract")].isNull() && m_abstract_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("created_date")]);
    m_created_date_isSet = !json[QString("created_date")].isNull() && m_created_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modified_date")]);
    m_modified_date_isSet = !json[QString("modified_date")].isNull() && m_modified_date_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("user_name")]);
    m_user_name_isSet = !json[QString("user_name")].isNull() && m_user_name_isValid;
}

QString OAIProjectNote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectNote::asJsonObject() const {
    QJsonObject obj;
    if (m_abstract_isSet) {
        obj.insert(QString("abstract"), ::OpenAPI::toJsonValue(m_abstract));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("created_date"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modified_date"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("user_name"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAIProjectNote::getAbstract() const {
    return m_abstract;
}
void OAIProjectNote::setAbstract(const QString &abstract) {
    m_abstract = abstract;
    m_abstract_isSet = true;
}

bool OAIProjectNote::is_abstract_Set() const{
    return m_abstract_isSet;
}

bool OAIProjectNote::is_abstract_Valid() const{
    return m_abstract_isValid;
}

QString OAIProjectNote::getCreatedDate() const {
    return m_created_date;
}
void OAIProjectNote::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIProjectNote::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIProjectNote::is_created_date_Valid() const{
    return m_created_date_isValid;
}

qint64 OAIProjectNote::getId() const {
    return m_id;
}
void OAIProjectNote::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProjectNote::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProjectNote::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProjectNote::getModifiedDate() const {
    return m_modified_date;
}
void OAIProjectNote::setModifiedDate(const QString &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAIProjectNote::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAIProjectNote::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

qint64 OAIProjectNote::getUserId() const {
    return m_user_id;
}
void OAIProjectNote::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIProjectNote::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIProjectNote::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIProjectNote::getUserName() const {
    return m_user_name;
}
void OAIProjectNote::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIProjectNote::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIProjectNote::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIProjectNote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abstract_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectNote::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_abstract_isValid && m_created_date_isValid && m_id_isValid && m_modified_date_isValid && m_user_id_isValid && m_user_name_isValid && true;
}

} // namespace OpenAPI
