/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArticle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArticle::OAIArticle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArticle::OAIArticle() {
    this->initializeModel();
}

OAIArticle::~OAIArticle() {}

void OAIArticle::initializeModel() {

    m_defined_type_isSet = false;
    m_defined_type_isValid = false;

    m_defined_type_name_isSet = false;
    m_defined_type_name_isValid = false;

    m_doi_isSet = false;
    m_doi_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_handle_isSet = false;
    m_handle_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_published_date_isSet = false;
    m_published_date_isValid = false;

    m_thumb_isSet = false;
    m_thumb_isValid = false;

    m_timeline_isSet = false;
    m_timeline_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_url_private_api_isSet = false;
    m_url_private_api_isValid = false;

    m_url_private_html_isSet = false;
    m_url_private_html_isValid = false;

    m_url_public_api_isSet = false;
    m_url_public_api_isValid = false;

    m_url_public_html_isSet = false;
    m_url_public_html_isValid = false;
}

void OAIArticle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArticle::fromJsonObject(QJsonObject json) {

    m_defined_type_isValid = ::OpenAPI::fromJsonValue(m_defined_type, json[QString("defined_type")]);
    m_defined_type_isSet = !json[QString("defined_type")].isNull() && m_defined_type_isValid;

    m_defined_type_name_isValid = ::OpenAPI::fromJsonValue(m_defined_type_name, json[QString("defined_type_name")]);
    m_defined_type_name_isSet = !json[QString("defined_type_name")].isNull() && m_defined_type_name_isValid;

    m_doi_isValid = ::OpenAPI::fromJsonValue(m_doi, json[QString("doi")]);
    m_doi_isSet = !json[QString("doi")].isNull() && m_doi_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_handle_isValid = ::OpenAPI::fromJsonValue(m_handle, json[QString("handle")]);
    m_handle_isSet = !json[QString("handle")].isNull() && m_handle_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_published_date_isValid = ::OpenAPI::fromJsonValue(m_published_date, json[QString("published_date")]);
    m_published_date_isSet = !json[QString("published_date")].isNull() && m_published_date_isValid;

    m_thumb_isValid = ::OpenAPI::fromJsonValue(m_thumb, json[QString("thumb")]);
    m_thumb_isSet = !json[QString("thumb")].isNull() && m_thumb_isValid;

    m_timeline_isValid = ::OpenAPI::fromJsonValue(m_timeline, json[QString("timeline")]);
    m_timeline_isSet = !json[QString("timeline")].isNull() && m_timeline_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_url_private_api_isValid = ::OpenAPI::fromJsonValue(m_url_private_api, json[QString("url_private_api")]);
    m_url_private_api_isSet = !json[QString("url_private_api")].isNull() && m_url_private_api_isValid;

    m_url_private_html_isValid = ::OpenAPI::fromJsonValue(m_url_private_html, json[QString("url_private_html")]);
    m_url_private_html_isSet = !json[QString("url_private_html")].isNull() && m_url_private_html_isValid;

    m_url_public_api_isValid = ::OpenAPI::fromJsonValue(m_url_public_api, json[QString("url_public_api")]);
    m_url_public_api_isSet = !json[QString("url_public_api")].isNull() && m_url_public_api_isValid;

    m_url_public_html_isValid = ::OpenAPI::fromJsonValue(m_url_public_html, json[QString("url_public_html")]);
    m_url_public_html_isSet = !json[QString("url_public_html")].isNull() && m_url_public_html_isValid;
}

QString OAIArticle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArticle::asJsonObject() const {
    QJsonObject obj;
    if (m_defined_type_isSet) {
        obj.insert(QString("defined_type"), ::OpenAPI::toJsonValue(m_defined_type));
    }
    if (m_defined_type_name_isSet) {
        obj.insert(QString("defined_type_name"), ::OpenAPI::toJsonValue(m_defined_type_name));
    }
    if (m_doi_isSet) {
        obj.insert(QString("doi"), ::OpenAPI::toJsonValue(m_doi));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_handle_isSet) {
        obj.insert(QString("handle"), ::OpenAPI::toJsonValue(m_handle));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_published_date_isSet) {
        obj.insert(QString("published_date"), ::OpenAPI::toJsonValue(m_published_date));
    }
    if (m_thumb_isSet) {
        obj.insert(QString("thumb"), ::OpenAPI::toJsonValue(m_thumb));
    }
    if (m_timeline.isSet()) {
        obj.insert(QString("timeline"), ::OpenAPI::toJsonValue(m_timeline));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_url_private_api_isSet) {
        obj.insert(QString("url_private_api"), ::OpenAPI::toJsonValue(m_url_private_api));
    }
    if (m_url_private_html_isSet) {
        obj.insert(QString("url_private_html"), ::OpenAPI::toJsonValue(m_url_private_html));
    }
    if (m_url_public_api_isSet) {
        obj.insert(QString("url_public_api"), ::OpenAPI::toJsonValue(m_url_public_api));
    }
    if (m_url_public_html_isSet) {
        obj.insert(QString("url_public_html"), ::OpenAPI::toJsonValue(m_url_public_html));
    }
    return obj;
}

qint64 OAIArticle::getDefinedType() const {
    return m_defined_type;
}
void OAIArticle::setDefinedType(const qint64 &defined_type) {
    m_defined_type = defined_type;
    m_defined_type_isSet = true;
}

bool OAIArticle::is_defined_type_Set() const{
    return m_defined_type_isSet;
}

bool OAIArticle::is_defined_type_Valid() const{
    return m_defined_type_isValid;
}

QString OAIArticle::getDefinedTypeName() const {
    return m_defined_type_name;
}
void OAIArticle::setDefinedTypeName(const QString &defined_type_name) {
    m_defined_type_name = defined_type_name;
    m_defined_type_name_isSet = true;
}

bool OAIArticle::is_defined_type_name_Set() const{
    return m_defined_type_name_isSet;
}

bool OAIArticle::is_defined_type_name_Valid() const{
    return m_defined_type_name_isValid;
}

QString OAIArticle::getDoi() const {
    return m_doi;
}
void OAIArticle::setDoi(const QString &doi) {
    m_doi = doi;
    m_doi_isSet = true;
}

bool OAIArticle::is_doi_Set() const{
    return m_doi_isSet;
}

bool OAIArticle::is_doi_Valid() const{
    return m_doi_isValid;
}

double OAIArticle::getGroupId() const {
    return m_group_id;
}
void OAIArticle::setGroupId(const double &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIArticle::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIArticle::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIArticle::getHandle() const {
    return m_handle;
}
void OAIArticle::setHandle(const QString &handle) {
    m_handle = handle;
    m_handle_isSet = true;
}

bool OAIArticle::is_handle_Set() const{
    return m_handle_isSet;
}

bool OAIArticle::is_handle_Valid() const{
    return m_handle_isValid;
}

qint64 OAIArticle::getId() const {
    return m_id;
}
void OAIArticle::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIArticle::is_id_Set() const{
    return m_id_isSet;
}

bool OAIArticle::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIArticle::getPublishedDate() const {
    return m_published_date;
}
void OAIArticle::setPublishedDate(const QString &published_date) {
    m_published_date = published_date;
    m_published_date_isSet = true;
}

bool OAIArticle::is_published_date_Set() const{
    return m_published_date_isSet;
}

bool OAIArticle::is_published_date_Valid() const{
    return m_published_date_isValid;
}

QString OAIArticle::getThumb() const {
    return m_thumb;
}
void OAIArticle::setThumb(const QString &thumb) {
    m_thumb = thumb;
    m_thumb_isSet = true;
}

bool OAIArticle::is_thumb_Set() const{
    return m_thumb_isSet;
}

bool OAIArticle::is_thumb_Valid() const{
    return m_thumb_isValid;
}

OAITimeline OAIArticle::getTimeline() const {
    return m_timeline;
}
void OAIArticle::setTimeline(const OAITimeline &timeline) {
    m_timeline = timeline;
    m_timeline_isSet = true;
}

bool OAIArticle::is_timeline_Set() const{
    return m_timeline_isSet;
}

bool OAIArticle::is_timeline_Valid() const{
    return m_timeline_isValid;
}

QString OAIArticle::getTitle() const {
    return m_title;
}
void OAIArticle::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIArticle::is_title_Set() const{
    return m_title_isSet;
}

bool OAIArticle::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIArticle::getUrl() const {
    return m_url;
}
void OAIArticle::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIArticle::is_url_Set() const{
    return m_url_isSet;
}

bool OAIArticle::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIArticle::getUrlPrivateApi() const {
    return m_url_private_api;
}
void OAIArticle::setUrlPrivateApi(const QString &url_private_api) {
    m_url_private_api = url_private_api;
    m_url_private_api_isSet = true;
}

bool OAIArticle::is_url_private_api_Set() const{
    return m_url_private_api_isSet;
}

bool OAIArticle::is_url_private_api_Valid() const{
    return m_url_private_api_isValid;
}

QString OAIArticle::getUrlPrivateHtml() const {
    return m_url_private_html;
}
void OAIArticle::setUrlPrivateHtml(const QString &url_private_html) {
    m_url_private_html = url_private_html;
    m_url_private_html_isSet = true;
}

bool OAIArticle::is_url_private_html_Set() const{
    return m_url_private_html_isSet;
}

bool OAIArticle::is_url_private_html_Valid() const{
    return m_url_private_html_isValid;
}

QString OAIArticle::getUrlPublicApi() const {
    return m_url_public_api;
}
void OAIArticle::setUrlPublicApi(const QString &url_public_api) {
    m_url_public_api = url_public_api;
    m_url_public_api_isSet = true;
}

bool OAIArticle::is_url_public_api_Set() const{
    return m_url_public_api_isSet;
}

bool OAIArticle::is_url_public_api_Valid() const{
    return m_url_public_api_isValid;
}

QString OAIArticle::getUrlPublicHtml() const {
    return m_url_public_html;
}
void OAIArticle::setUrlPublicHtml(const QString &url_public_html) {
    m_url_public_html = url_public_html;
    m_url_public_html_isSet = true;
}

bool OAIArticle::is_url_public_html_Set() const{
    return m_url_public_html_isSet;
}

bool OAIArticle::is_url_public_html_Valid() const{
    return m_url_public_html_isValid;
}

bool OAIArticle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_defined_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defined_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_private_api_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_private_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_public_api_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_public_html_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArticle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_defined_type_isValid && m_defined_type_name_isValid && m_doi_isValid && m_group_id_isValid && m_handle_isValid && m_id_isValid && m_published_date_isValid && m_thumb_isValid && m_timeline_isValid && m_title_isValid && m_url_isValid && m_url_private_api_isValid && m_url_private_html_isValid && m_url_public_api_isValid && m_url_public_html_isValid && true;
}

} // namespace OpenAPI
