/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectionCompletePrivate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectionCompletePrivate::OAICollectionCompletePrivate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectionCompletePrivate::OAICollectionCompletePrivate() {
    this->initializeModel();
}

OAICollectionCompletePrivate::~OAICollectionCompletePrivate() {}

void OAICollectionCompletePrivate::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_articles_count_isSet = false;
    m_articles_count_isValid = false;

    m_authors_isSet = false;
    m_authors_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_citation_isSet = false;
    m_citation_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_funding_isSet = false;
    m_funding_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_group_resource_id_isSet = false;
    m_group_resource_id_isValid = false;

    m_institution_id_isSet = false;
    m_institution_id_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_r_public_isSet = false;
    m_r_public_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;

    m_resource_doi_isSet = false;
    m_resource_doi_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_link_isSet = false;
    m_resource_link_isValid = false;

    m_resource_title_isSet = false;
    m_resource_title_isValid = false;

    m_resource_version_isSet = false;
    m_resource_version_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_timeline_isSet = false;
    m_timeline_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_doi_isSet = false;
    m_doi_isValid = false;

    m_handle_isSet = false;
    m_handle_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_published_date_isSet = false;
    m_published_date_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICollectionCompletePrivate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectionCompletePrivate::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_articles_count_isValid = ::OpenAPI::fromJsonValue(m_articles_count, json[QString("articles_count")]);
    m_articles_count_isSet = !json[QString("articles_count")].isNull() && m_articles_count_isValid;

    m_authors_isValid = ::OpenAPI::fromJsonValue(m_authors, json[QString("authors")]);
    m_authors_isSet = !json[QString("authors")].isNull() && m_authors_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_citation_isValid = ::OpenAPI::fromJsonValue(m_citation, json[QString("citation")]);
    m_citation_isSet = !json[QString("citation")].isNull() && m_citation_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("created_date")]);
    m_created_date_isSet = !json[QString("created_date")].isNull() && m_created_date_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_funding_isValid = ::OpenAPI::fromJsonValue(m_funding, json[QString("funding")]);
    m_funding_isSet = !json[QString("funding")].isNull() && m_funding_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_group_resource_id_isValid = ::OpenAPI::fromJsonValue(m_group_resource_id, json[QString("group_resource_id")]);
    m_group_resource_id_isSet = !json[QString("group_resource_id")].isNull() && m_group_resource_id_isValid;

    m_institution_id_isValid = ::OpenAPI::fromJsonValue(m_institution_id, json[QString("institution_id")]);
    m_institution_id_isSet = !json[QString("institution_id")].isNull() && m_institution_id_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modified_date")]);
    m_modified_date_isSet = !json[QString("modified_date")].isNull() && m_modified_date_isValid;

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;

    m_resource_doi_isValid = ::OpenAPI::fromJsonValue(m_resource_doi, json[QString("resource_doi")]);
    m_resource_doi_isSet = !json[QString("resource_doi")].isNull() && m_resource_doi_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resource_id")]);
    m_resource_id_isSet = !json[QString("resource_id")].isNull() && m_resource_id_isValid;

    m_resource_link_isValid = ::OpenAPI::fromJsonValue(m_resource_link, json[QString("resource_link")]);
    m_resource_link_isSet = !json[QString("resource_link")].isNull() && m_resource_link_isValid;

    m_resource_title_isValid = ::OpenAPI::fromJsonValue(m_resource_title, json[QString("resource_title")]);
    m_resource_title_isSet = !json[QString("resource_title")].isNull() && m_resource_title_isValid;

    m_resource_version_isValid = ::OpenAPI::fromJsonValue(m_resource_version, json[QString("resource_version")]);
    m_resource_version_isSet = !json[QString("resource_version")].isNull() && m_resource_version_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_timeline_isValid = ::OpenAPI::fromJsonValue(m_timeline, json[QString("timeline")]);
    m_timeline_isSet = !json[QString("timeline")].isNull() && m_timeline_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_doi_isValid = ::OpenAPI::fromJsonValue(m_doi, json[QString("doi")]);
    m_doi_isSet = !json[QString("doi")].isNull() && m_doi_isValid;

    m_handle_isValid = ::OpenAPI::fromJsonValue(m_handle, json[QString("handle")]);
    m_handle_isSet = !json[QString("handle")].isNull() && m_handle_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_published_date_isValid = ::OpenAPI::fromJsonValue(m_published_date, json[QString("published_date")]);
    m_published_date_isSet = !json[QString("published_date")].isNull() && m_published_date_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICollectionCompletePrivate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectionCompletePrivate::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_articles_count_isSet) {
        obj.insert(QString("articles_count"), ::OpenAPI::toJsonValue(m_articles_count));
    }
    if (m_authors.size() > 0) {
        obj.insert(QString("authors"), ::OpenAPI::toJsonValue(m_authors));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_citation_isSet) {
        obj.insert(QString("citation"), ::OpenAPI::toJsonValue(m_citation));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("created_date"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_funding.size() > 0) {
        obj.insert(QString("funding"), ::OpenAPI::toJsonValue(m_funding));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_group_resource_id_isSet) {
        obj.insert(QString("group_resource_id"), ::OpenAPI::toJsonValue(m_group_resource_id));
    }
    if (m_institution_id_isSet) {
        obj.insert(QString("institution_id"), ::OpenAPI::toJsonValue(m_institution_id));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modified_date"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_r_public_isSet) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    if (m_references.size() > 0) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(m_references));
    }
    if (m_resource_doi_isSet) {
        obj.insert(QString("resource_doi"), ::OpenAPI::toJsonValue(m_resource_doi));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resource_id"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_link_isSet) {
        obj.insert(QString("resource_link"), ::OpenAPI::toJsonValue(m_resource_link));
    }
    if (m_resource_title_isSet) {
        obj.insert(QString("resource_title"), ::OpenAPI::toJsonValue(m_resource_title));
    }
    if (m_resource_version_isSet) {
        obj.insert(QString("resource_version"), ::OpenAPI::toJsonValue(m_resource_version));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_timeline.isSet()) {
        obj.insert(QString("timeline"), ::OpenAPI::toJsonValue(m_timeline));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_doi_isSet) {
        obj.insert(QString("doi"), ::OpenAPI::toJsonValue(m_doi));
    }
    if (m_handle_isSet) {
        obj.insert(QString("handle"), ::OpenAPI::toJsonValue(m_handle));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_published_date_isSet) {
        obj.insert(QString("published_date"), ::OpenAPI::toJsonValue(m_published_date));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint64 OAICollectionCompletePrivate::getAccountId() const {
    return m_account_id;
}
void OAICollectionCompletePrivate::setAccountId(const qint64 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICollectionCompletePrivate::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICollectionCompletePrivate::is_account_id_Valid() const{
    return m_account_id_isValid;
}

qint64 OAICollectionCompletePrivate::getArticlesCount() const {
    return m_articles_count;
}
void OAICollectionCompletePrivate::setArticlesCount(const qint64 &articles_count) {
    m_articles_count = articles_count;
    m_articles_count_isSet = true;
}

bool OAICollectionCompletePrivate::is_articles_count_Set() const{
    return m_articles_count_isSet;
}

bool OAICollectionCompletePrivate::is_articles_count_Valid() const{
    return m_articles_count_isValid;
}

QList<OAIAuthor> OAICollectionCompletePrivate::getAuthors() const {
    return m_authors;
}
void OAICollectionCompletePrivate::setAuthors(const QList<OAIAuthor> &authors) {
    m_authors = authors;
    m_authors_isSet = true;
}

bool OAICollectionCompletePrivate::is_authors_Set() const{
    return m_authors_isSet;
}

bool OAICollectionCompletePrivate::is_authors_Valid() const{
    return m_authors_isValid;
}

QList<OAICategory> OAICollectionCompletePrivate::getCategories() const {
    return m_categories;
}
void OAICollectionCompletePrivate::setCategories(const QList<OAICategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAICollectionCompletePrivate::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAICollectionCompletePrivate::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAICollectionCompletePrivate::getCitation() const {
    return m_citation;
}
void OAICollectionCompletePrivate::setCitation(const QString &citation) {
    m_citation = citation;
    m_citation_isSet = true;
}

bool OAICollectionCompletePrivate::is_citation_Set() const{
    return m_citation_isSet;
}

bool OAICollectionCompletePrivate::is_citation_Valid() const{
    return m_citation_isValid;
}

QString OAICollectionCompletePrivate::getCreatedDate() const {
    return m_created_date;
}
void OAICollectionCompletePrivate::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAICollectionCompletePrivate::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAICollectionCompletePrivate::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QList<OAICustomArticleField> OAICollectionCompletePrivate::getCustomFields() const {
    return m_custom_fields;
}
void OAICollectionCompletePrivate::setCustomFields(const QList<OAICustomArticleField> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAICollectionCompletePrivate::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAICollectionCompletePrivate::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAICollectionCompletePrivate::getDescription() const {
    return m_description;
}
void OAICollectionCompletePrivate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICollectionCompletePrivate::is_description_Set() const{
    return m_description_isSet;
}

bool OAICollectionCompletePrivate::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIFundingInformation> OAICollectionCompletePrivate::getFunding() const {
    return m_funding;
}
void OAICollectionCompletePrivate::setFunding(const QList<OAIFundingInformation> &funding) {
    m_funding = funding;
    m_funding_isSet = true;
}

bool OAICollectionCompletePrivate::is_funding_Set() const{
    return m_funding_isSet;
}

bool OAICollectionCompletePrivate::is_funding_Valid() const{
    return m_funding_isValid;
}

qint64 OAICollectionCompletePrivate::getGroupId() const {
    return m_group_id;
}
void OAICollectionCompletePrivate::setGroupId(const qint64 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAICollectionCompletePrivate::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAICollectionCompletePrivate::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAICollectionCompletePrivate::getGroupResourceId() const {
    return m_group_resource_id;
}
void OAICollectionCompletePrivate::setGroupResourceId(const QString &group_resource_id) {
    m_group_resource_id = group_resource_id;
    m_group_resource_id_isSet = true;
}

bool OAICollectionCompletePrivate::is_group_resource_id_Set() const{
    return m_group_resource_id_isSet;
}

bool OAICollectionCompletePrivate::is_group_resource_id_Valid() const{
    return m_group_resource_id_isValid;
}

qint64 OAICollectionCompletePrivate::getInstitutionId() const {
    return m_institution_id;
}
void OAICollectionCompletePrivate::setInstitutionId(const qint64 &institution_id) {
    m_institution_id = institution_id;
    m_institution_id_isSet = true;
}

bool OAICollectionCompletePrivate::is_institution_id_Set() const{
    return m_institution_id_isSet;
}

bool OAICollectionCompletePrivate::is_institution_id_Valid() const{
    return m_institution_id_isValid;
}

QString OAICollectionCompletePrivate::getModifiedDate() const {
    return m_modified_date;
}
void OAICollectionCompletePrivate::setModifiedDate(const QString &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAICollectionCompletePrivate::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAICollectionCompletePrivate::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

bool OAICollectionCompletePrivate::isRPublic() const {
    return m_r_public;
}
void OAICollectionCompletePrivate::setRPublic(const bool &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAICollectionCompletePrivate::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAICollectionCompletePrivate::is_r_public_Valid() const{
    return m_r_public_isValid;
}

QList<QString> OAICollectionCompletePrivate::getReferences() const {
    return m_references;
}
void OAICollectionCompletePrivate::setReferences(const QList<QString> &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAICollectionCompletePrivate::is_references_Set() const{
    return m_references_isSet;
}

bool OAICollectionCompletePrivate::is_references_Valid() const{
    return m_references_isValid;
}

QString OAICollectionCompletePrivate::getResourceDoi() const {
    return m_resource_doi;
}
void OAICollectionCompletePrivate::setResourceDoi(const QString &resource_doi) {
    m_resource_doi = resource_doi;
    m_resource_doi_isSet = true;
}

bool OAICollectionCompletePrivate::is_resource_doi_Set() const{
    return m_resource_doi_isSet;
}

bool OAICollectionCompletePrivate::is_resource_doi_Valid() const{
    return m_resource_doi_isValid;
}

QString OAICollectionCompletePrivate::getResourceId() const {
    return m_resource_id;
}
void OAICollectionCompletePrivate::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAICollectionCompletePrivate::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAICollectionCompletePrivate::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAICollectionCompletePrivate::getResourceLink() const {
    return m_resource_link;
}
void OAICollectionCompletePrivate::setResourceLink(const QString &resource_link) {
    m_resource_link = resource_link;
    m_resource_link_isSet = true;
}

bool OAICollectionCompletePrivate::is_resource_link_Set() const{
    return m_resource_link_isSet;
}

bool OAICollectionCompletePrivate::is_resource_link_Valid() const{
    return m_resource_link_isValid;
}

QString OAICollectionCompletePrivate::getResourceTitle() const {
    return m_resource_title;
}
void OAICollectionCompletePrivate::setResourceTitle(const QString &resource_title) {
    m_resource_title = resource_title;
    m_resource_title_isSet = true;
}

bool OAICollectionCompletePrivate::is_resource_title_Set() const{
    return m_resource_title_isSet;
}

bool OAICollectionCompletePrivate::is_resource_title_Valid() const{
    return m_resource_title_isValid;
}

qint64 OAICollectionCompletePrivate::getResourceVersion() const {
    return m_resource_version;
}
void OAICollectionCompletePrivate::setResourceVersion(const qint64 &resource_version) {
    m_resource_version = resource_version;
    m_resource_version_isSet = true;
}

bool OAICollectionCompletePrivate::is_resource_version_Set() const{
    return m_resource_version_isSet;
}

bool OAICollectionCompletePrivate::is_resource_version_Valid() const{
    return m_resource_version_isValid;
}

QList<QString> OAICollectionCompletePrivate::getTags() const {
    return m_tags;
}
void OAICollectionCompletePrivate::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICollectionCompletePrivate::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICollectionCompletePrivate::is_tags_Valid() const{
    return m_tags_isValid;
}

OAITimeline OAICollectionCompletePrivate::getTimeline() const {
    return m_timeline;
}
void OAICollectionCompletePrivate::setTimeline(const OAITimeline &timeline) {
    m_timeline = timeline;
    m_timeline_isSet = true;
}

bool OAICollectionCompletePrivate::is_timeline_Set() const{
    return m_timeline_isSet;
}

bool OAICollectionCompletePrivate::is_timeline_Valid() const{
    return m_timeline_isValid;
}

qint64 OAICollectionCompletePrivate::getVersion() const {
    return m_version;
}
void OAICollectionCompletePrivate::setVersion(const qint64 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICollectionCompletePrivate::is_version_Set() const{
    return m_version_isSet;
}

bool OAICollectionCompletePrivate::is_version_Valid() const{
    return m_version_isValid;
}

QString OAICollectionCompletePrivate::getDoi() const {
    return m_doi;
}
void OAICollectionCompletePrivate::setDoi(const QString &doi) {
    m_doi = doi;
    m_doi_isSet = true;
}

bool OAICollectionCompletePrivate::is_doi_Set() const{
    return m_doi_isSet;
}

bool OAICollectionCompletePrivate::is_doi_Valid() const{
    return m_doi_isValid;
}

QString OAICollectionCompletePrivate::getHandle() const {
    return m_handle;
}
void OAICollectionCompletePrivate::setHandle(const QString &handle) {
    m_handle = handle;
    m_handle_isSet = true;
}

bool OAICollectionCompletePrivate::is_handle_Set() const{
    return m_handle_isSet;
}

bool OAICollectionCompletePrivate::is_handle_Valid() const{
    return m_handle_isValid;
}

qint64 OAICollectionCompletePrivate::getId() const {
    return m_id;
}
void OAICollectionCompletePrivate::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICollectionCompletePrivate::is_id_Set() const{
    return m_id_isSet;
}

bool OAICollectionCompletePrivate::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICollectionCompletePrivate::getPublishedDate() const {
    return m_published_date;
}
void OAICollectionCompletePrivate::setPublishedDate(const QString &published_date) {
    m_published_date = published_date;
    m_published_date_isSet = true;
}

bool OAICollectionCompletePrivate::is_published_date_Set() const{
    return m_published_date_isSet;
}

bool OAICollectionCompletePrivate::is_published_date_Valid() const{
    return m_published_date_isValid;
}

QString OAICollectionCompletePrivate::getTitle() const {
    return m_title;
}
void OAICollectionCompletePrivate::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICollectionCompletePrivate::is_title_Set() const{
    return m_title_isSet;
}

bool OAICollectionCompletePrivate::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICollectionCompletePrivate::getUrl() const {
    return m_url;
}
void OAICollectionCompletePrivate::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICollectionCompletePrivate::is_url_Set() const{
    return m_url_isSet;
}

bool OAICollectionCompletePrivate::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICollectionCompletePrivate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_articles_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_citation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_doi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectionCompletePrivate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_articles_count_isValid && m_authors_isValid && m_categories_isValid && m_citation_isValid && m_created_date_isValid && m_custom_fields_isValid && m_description_isValid && m_funding_isValid && m_group_id_isValid && m_group_resource_id_isValid && m_institution_id_isValid && m_modified_date_isValid && m_r_public_isValid && m_references_isValid && m_resource_doi_isValid && m_resource_id_isValid && m_resource_link_isValid && m_resource_title_isValid && m_resource_version_isValid && m_tags_isValid && m_timeline_isValid && m_version_isValid && m_doi_isValid && m_handle_isValid && m_id_isValid && m_published_date_isValid && m_title_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
