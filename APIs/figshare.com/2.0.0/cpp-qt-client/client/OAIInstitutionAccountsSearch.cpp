/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstitutionAccountsSearch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstitutionAccountsSearch::OAIInstitutionAccountsSearch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstitutionAccountsSearch::OAIInstitutionAccountsSearch() {
    this->initializeModel();
}

OAIInstitutionAccountsSearch::~OAIInstitutionAccountsSearch() {}

void OAIInstitutionAccountsSearch::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_institution_user_id_isSet = false;
    m_institution_user_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_search_for_isSet = false;
    m_search_for_isValid = false;
}

void OAIInstitutionAccountsSearch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstitutionAccountsSearch::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_institution_user_id_isValid = ::OpenAPI::fromJsonValue(m_institution_user_id, json[QString("institution_user_id")]);
    m_institution_user_id_isSet = !json[QString("institution_user_id")].isNull() && m_institution_user_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;

    m_search_for_isValid = ::OpenAPI::fromJsonValue(m_search_for, json[QString("search_for")]);
    m_search_for_isSet = !json[QString("search_for")].isNull() && m_search_for_isValid;
}

QString OAIInstitutionAccountsSearch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstitutionAccountsSearch::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_institution_user_id_isSet) {
        obj.insert(QString("institution_user_id"), ::OpenAPI::toJsonValue(m_institution_user_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_search_for_isSet) {
        obj.insert(QString("search_for"), ::OpenAPI::toJsonValue(m_search_for));
    }
    return obj;
}

QString OAIInstitutionAccountsSearch::getEmail() const {
    return m_email;
}
void OAIInstitutionAccountsSearch::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIInstitutionAccountsSearch::is_email_Set() const{
    return m_email_isSet;
}

bool OAIInstitutionAccountsSearch::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIInstitutionAccountsSearch::getInstitutionUserId() const {
    return m_institution_user_id;
}
void OAIInstitutionAccountsSearch::setInstitutionUserId(const QString &institution_user_id) {
    m_institution_user_id = institution_user_id;
    m_institution_user_id_isSet = true;
}

bool OAIInstitutionAccountsSearch::is_institution_user_id_Set() const{
    return m_institution_user_id_isSet;
}

bool OAIInstitutionAccountsSearch::is_institution_user_id_Valid() const{
    return m_institution_user_id_isValid;
}

qint64 OAIInstitutionAccountsSearch::getIsActive() const {
    return m_is_active;
}
void OAIInstitutionAccountsSearch::setIsActive(const qint64 &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIInstitutionAccountsSearch::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIInstitutionAccountsSearch::is_is_active_Valid() const{
    return m_is_active_isValid;
}

qint64 OAIInstitutionAccountsSearch::getLimit() const {
    return m_limit;
}
void OAIInstitutionAccountsSearch::setLimit(const qint64 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIInstitutionAccountsSearch::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIInstitutionAccountsSearch::is_limit_Valid() const{
    return m_limit_isValid;
}

qint64 OAIInstitutionAccountsSearch::getOffset() const {
    return m_offset;
}
void OAIInstitutionAccountsSearch::setOffset(const qint64 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIInstitutionAccountsSearch::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIInstitutionAccountsSearch::is_offset_Valid() const{
    return m_offset_isValid;
}

qint64 OAIInstitutionAccountsSearch::getPage() const {
    return m_page;
}
void OAIInstitutionAccountsSearch::setPage(const qint64 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIInstitutionAccountsSearch::is_page_Set() const{
    return m_page_isSet;
}

bool OAIInstitutionAccountsSearch::is_page_Valid() const{
    return m_page_isValid;
}

qint64 OAIInstitutionAccountsSearch::getPageSize() const {
    return m_page_size;
}
void OAIInstitutionAccountsSearch::setPageSize(const qint64 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIInstitutionAccountsSearch::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIInstitutionAccountsSearch::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIInstitutionAccountsSearch::getSearchFor() const {
    return m_search_for;
}
void OAIInstitutionAccountsSearch::setSearchFor(const QString &search_for) {
    m_search_for = search_for;
    m_search_for_isSet = true;
}

bool OAIInstitutionAccountsSearch::is_search_for_Set() const{
    return m_search_for_isSet;
}

bool OAIInstitutionAccountsSearch::is_search_for_Valid() const{
    return m_search_for_isValid;
}

bool OAIInstitutionAccountsSearch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_for_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstitutionAccountsSearch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
