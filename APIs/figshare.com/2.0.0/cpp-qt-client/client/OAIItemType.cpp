/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemType::OAIItemType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemType::OAIItemType() {
    this->initializeModel();
}

OAIItemType::~OAIItemType() {}

void OAIItemType::initializeModel() {

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_selectable_isSet = false;
    m_is_selectable_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_public_description_isSet = false;
    m_public_description_isValid = false;

    m_string_id_isSet = false;
    m_string_id_isValid = false;

    m_url_name_isSet = false;
    m_url_name_isValid = false;
}

void OAIItemType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemType::fromJsonObject(QJsonObject json) {

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_selectable_isValid = ::OpenAPI::fromJsonValue(m_is_selectable, json[QString("is_selectable")]);
    m_is_selectable_isSet = !json[QString("is_selectable")].isNull() && m_is_selectable_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_public_description_isValid = ::OpenAPI::fromJsonValue(m_public_description, json[QString("public_description")]);
    m_public_description_isSet = !json[QString("public_description")].isNull() && m_public_description_isValid;

    m_string_id_isValid = ::OpenAPI::fromJsonValue(m_string_id, json[QString("string_id")]);
    m_string_id_isSet = !json[QString("string_id")].isNull() && m_string_id_isValid;

    m_url_name_isValid = ::OpenAPI::fromJsonValue(m_url_name, json[QString("url_name")]);
    m_url_name_isSet = !json[QString("url_name")].isNull() && m_url_name_isValid;
}

QString OAIItemType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemType::asJsonObject() const {
    QJsonObject obj;
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_selectable_isSet) {
        obj.insert(QString("is_selectable"), ::OpenAPI::toJsonValue(m_is_selectable));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_public_description_isSet) {
        obj.insert(QString("public_description"), ::OpenAPI::toJsonValue(m_public_description));
    }
    if (m_string_id_isSet) {
        obj.insert(QString("string_id"), ::OpenAPI::toJsonValue(m_string_id));
    }
    if (m_url_name_isSet) {
        obj.insert(QString("url_name"), ::OpenAPI::toJsonValue(m_url_name));
    }
    return obj;
}

QString OAIItemType::getIcon() const {
    return m_icon;
}
void OAIItemType::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIItemType::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIItemType::is_icon_Valid() const{
    return m_icon_isValid;
}

qint64 OAIItemType::getId() const {
    return m_id;
}
void OAIItemType::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIItemType::is_id_Set() const{
    return m_id_isSet;
}

bool OAIItemType::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIItemType::isIsSelectable() const {
    return m_is_selectable;
}
void OAIItemType::setIsSelectable(const bool &is_selectable) {
    m_is_selectable = is_selectable;
    m_is_selectable_isSet = true;
}

bool OAIItemType::is_is_selectable_Set() const{
    return m_is_selectable_isSet;
}

bool OAIItemType::is_is_selectable_Valid() const{
    return m_is_selectable_isValid;
}

QString OAIItemType::getName() const {
    return m_name;
}
void OAIItemType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIItemType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIItemType::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIItemType::getPublicDescription() const {
    return m_public_description;
}
void OAIItemType::setPublicDescription(const QString &public_description) {
    m_public_description = public_description;
    m_public_description_isSet = true;
}

bool OAIItemType::is_public_description_Set() const{
    return m_public_description_isSet;
}

bool OAIItemType::is_public_description_Valid() const{
    return m_public_description_isValid;
}

QString OAIItemType::getStringId() const {
    return m_string_id;
}
void OAIItemType::setStringId(const QString &string_id) {
    m_string_id = string_id;
    m_string_id_isSet = true;
}

bool OAIItemType::is_string_id_Set() const{
    return m_string_id_isSet;
}

bool OAIItemType::is_string_id_Valid() const{
    return m_string_id_isValid;
}

QString OAIItemType::getUrlName() const {
    return m_url_name;
}
void OAIItemType::setUrlName(const QString &url_name) {
    m_url_name = url_name;
    m_url_name_isSet = true;
}

bool OAIItemType::is_url_name_Set() const{
    return m_url_name_isSet;
}

bool OAIItemType::is_url_name_Valid() const{
    return m_url_name_isValid;
}

bool OAIItemType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_selectable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_icon_isValid && m_id_isValid && m_is_selectable_isValid && m_name_isValid && m_public_description_isValid && m_string_id_isValid && m_url_name_isValid && true;
}

} // namespace OpenAPI
