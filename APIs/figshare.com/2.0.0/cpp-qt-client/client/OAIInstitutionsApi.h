/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInstitutionsApi_H
#define OAI_OAIInstitutionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountCreate.h"
#include "OAIAccountUpdate.h"
#include "OAIArticle.h"
#include "OAICategory.h"
#include "OAICuration.h"
#include "OAICurationComment.h"
#include "OAICurationCommentCreate.h"
#include "OAICurationDetail.h"
#include "OAIErrorMessage.h"
#include "OAIGroup.h"
#include "OAIGroupEmbargoOptions.h"
#include "OAIHttpFileElement.h"
#include "OAIInstitution.h"
#include "OAIInstitutionAccountsSearch.h"
#include "OAIObject.h"
#include "OAIResponseMessage.h"
#include "OAIRole.h"
#include "OAIShortAccount.h"
#include "OAIShortCustomField.h"
#include "OAIUser.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInstitutionsApi : public QObject {
    Q_OBJECT

public:
    OAIInstitutionsApi(const int timeOut = 0);
    ~OAIInstitutionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  curation_id qint64 [required]
    */
    virtual void accountInstitutionCuration(const qint64 &curation_id);

    /**
    * @param[in]  curation_id qint64 [required]
    * @param[in]  limit qint64 [optional]
    * @param[in]  offset qint64 [optional]
    */
    virtual void accountInstitutionCurationComments(const qint64 &curation_id, const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  group_id qint64 [optional]
    * @param[in]  article_id qint64 [optional]
    * @param[in]  status QString [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  offset qint64 [optional]
    */
    virtual void accountInstitutionCurations(const ::OpenAPI::OptionalParam<qint64> &group_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &article_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  curation_id qint64 [required]
    * @param[in]  oai_curation_comment_create OAICurationCommentCreate [required]
    */
    virtual void accountInstitutionReviewCurationIdCommentsPost(const qint64 &curation_id, const OAICurationCommentCreate &oai_curation_comment_create);

    /**
    * @param[in]  group_id qint64 [optional]
    */
    virtual void customFieldsList(const ::OpenAPI::OptionalParam<qint64> &group_id = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  custom_field_id qint64 [required]
    * @param[in]  external_file OAIHttpFileElement [optional]
    */
    virtual void customFieldsUpload(const qint64 &custom_field_id, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &external_file = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  institution_string_id QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  filename QString [required]
    */
    virtual void institutionArticles(const QString &institution_string_id, const QString &resource_id, const QString &filename);

    /**
    * @param[in]  hrfeed OAIHttpFileElement [optional]
    */
    virtual void institutionHrfeedUpload(const ::OpenAPI::OptionalParam<OAIHttpFileElement> &hrfeed = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  account_id qint64 [required]
    */
    virtual void privateAccountInstitutionUser(const qint64 &account_id);


    virtual void privateCategoriesList();

    /**
    * @param[in]  group_id qint64 [required]
    */
    virtual void privateGroupEmbargoOptionsDetails(const qint64 &group_id);

    /**
    * @param[in]  account_id qint64 [required]
    * @param[in]  group_id qint64 [required]
    * @param[in]  role_id qint64 [required]
    */
    virtual void privateInstitutionAccountGroupRoleDelete(const qint64 &account_id, const qint64 &group_id, const qint64 &role_id);

    /**
    * @param[in]  account_id qint64 [required]
    */
    virtual void privateInstitutionAccountGroupRoles(const qint64 &account_id);

    /**
    * @param[in]  account_id qint64 [required]
    * @param[in]  body OAIObject [required]
    */
    virtual void privateInstitutionAccountGroupRolesCreate(const qint64 &account_id, const OAIObject &body);

    /**
    * @param[in]  oai_account_create OAIAccountCreate [required]
    */
    virtual void privateInstitutionAccountsCreate(const OAIAccountCreate &oai_account_create);

    /**
    * @param[in]  page qint64 [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  offset qint64 [optional]
    * @param[in]  is_active qint64 [optional]
    * @param[in]  institution_user_id QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  id_lte qint64 [optional]
    * @param[in]  id_gte qint64 [optional]
    */
    virtual void privateInstitutionAccountsList(const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &is_active = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &institution_user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &id_lte = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &id_gte = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  oai_institution_accounts_search OAIInstitutionAccountsSearch [required]
    */
    virtual void privateInstitutionAccountsSearch(const OAIInstitutionAccountsSearch &oai_institution_accounts_search);

    /**
    * @param[in]  account_id qint64 [required]
    * @param[in]  oai_account_update OAIAccountUpdate [required]
    */
    virtual void privateInstitutionAccountsUpdate(const qint64 &account_id, const OAIAccountUpdate &oai_account_update);

    /**
    * @param[in]  page qint64 [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  offset qint64 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  order_direction QString [optional]
    * @param[in]  published_since QString [optional]
    * @param[in]  modified_since QString [optional]
    * @param[in]  status qint64 [optional]
    * @param[in]  resource_doi QString [optional]
    * @param[in]  item_type qint64 [optional]
    */
    virtual void privateInstitutionArticles(const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &published_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &status = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &resource_doi = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &item_type = ::OpenAPI::OptionalParam<qint64>());


    virtual void privateInstitutionDetails();


    virtual void privateInstitutionEmbargoOptionsDetails();


    virtual void privateInstitutionGroupsList();


    virtual void privateInstitutionRolesList();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountInstitutionCurationCallback(OAIHttpRequestWorker *worker);
    void accountInstitutionCurationCommentsCallback(OAIHttpRequestWorker *worker);
    void accountInstitutionCurationsCallback(OAIHttpRequestWorker *worker);
    void accountInstitutionReviewCurationIdCommentsPostCallback(OAIHttpRequestWorker *worker);
    void customFieldsListCallback(OAIHttpRequestWorker *worker);
    void customFieldsUploadCallback(OAIHttpRequestWorker *worker);
    void institutionArticlesCallback(OAIHttpRequestWorker *worker);
    void institutionHrfeedUploadCallback(OAIHttpRequestWorker *worker);
    void privateAccountInstitutionUserCallback(OAIHttpRequestWorker *worker);
    void privateCategoriesListCallback(OAIHttpRequestWorker *worker);
    void privateGroupEmbargoOptionsDetailsCallback(OAIHttpRequestWorker *worker);
    void privateInstitutionAccountGroupRoleDeleteCallback(OAIHttpRequestWorker *worker);
    void privateInstitutionAccountGroupRolesCallback(OAIHttpRequestWorker *worker);
    void privateInstitutionAccountGroupRolesCreateCallback(OAIHttpRequestWorker *worker);
    void privateInstitutionAccountsCreateCallback(OAIHttpRequestWorker *worker);
    void privateInstitutionAccountsListCallback(OAIHttpRequestWorker *worker);
    void privateInstitutionAccountsSearchCallback(OAIHttpRequestWorker *worker);
    void privateInstitutionAccountsUpdateCallback(OAIHttpRequestWorker *worker);
    void privateInstitutionArticlesCallback(OAIHttpRequestWorker *worker);
    void privateInstitutionDetailsCallback(OAIHttpRequestWorker *worker);
    void privateInstitutionEmbargoOptionsDetailsCallback(OAIHttpRequestWorker *worker);
    void privateInstitutionGroupsListCallback(OAIHttpRequestWorker *worker);
    void privateInstitutionRolesListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountInstitutionCurationSignal(OAICurationDetail summary);
    void accountInstitutionCurationCommentsSignal(OAICurationComment summary);
    void accountInstitutionCurationsSignal(OAICuration summary);
    void accountInstitutionReviewCurationIdCommentsPostSignal();
    void customFieldsListSignal(QList<OAIShortCustomField> summary);
    void customFieldsUploadSignal(OAIObject summary);
    void institutionArticlesSignal(QList<OAIArticle> summary);
    void institutionHrfeedUploadSignal(OAIResponseMessage summary);
    void privateAccountInstitutionUserSignal(OAIUser summary);
    void privateCategoriesListSignal(QList<OAICategory> summary);
    void privateGroupEmbargoOptionsDetailsSignal(QList<OAIGroupEmbargoOptions> summary);
    void privateInstitutionAccountGroupRoleDeleteSignal();
    void privateInstitutionAccountGroupRolesSignal(OAIObject summary);
    void privateInstitutionAccountGroupRolesCreateSignal();
    void privateInstitutionAccountsCreateSignal();
    void privateInstitutionAccountsListSignal(QList<OAIShortAccount> summary);
    void privateInstitutionAccountsSearchSignal(QList<OAIShortAccount> summary);
    void privateInstitutionAccountsUpdateSignal();
    void privateInstitutionArticlesSignal(QList<OAIArticle> summary);
    void privateInstitutionDetailsSignal(OAIInstitution summary);
    void privateInstitutionEmbargoOptionsDetailsSignal(QList<OAIGroupEmbargoOptions> summary);
    void privateInstitutionGroupsListSignal(QList<OAIGroup> summary);
    void privateInstitutionRolesListSignal(QList<OAIRole> summary);


    void accountInstitutionCurationSignalFull(OAIHttpRequestWorker *worker, OAICurationDetail summary);
    void accountInstitutionCurationCommentsSignalFull(OAIHttpRequestWorker *worker, OAICurationComment summary);
    void accountInstitutionCurationsSignalFull(OAIHttpRequestWorker *worker, OAICuration summary);
    void accountInstitutionReviewCurationIdCommentsPostSignalFull(OAIHttpRequestWorker *worker);
    void customFieldsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIShortCustomField> summary);
    void customFieldsUploadSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void institutionArticlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticle> summary);
    void institutionHrfeedUploadSignalFull(OAIHttpRequestWorker *worker, OAIResponseMessage summary);
    void privateAccountInstitutionUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void privateCategoriesListSignalFull(OAIHttpRequestWorker *worker, QList<OAICategory> summary);
    void privateGroupEmbargoOptionsDetailsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroupEmbargoOptions> summary);
    void privateInstitutionAccountGroupRoleDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateInstitutionAccountGroupRolesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void privateInstitutionAccountGroupRolesCreateSignalFull(OAIHttpRequestWorker *worker);
    void privateInstitutionAccountsCreateSignalFull(OAIHttpRequestWorker *worker);
    void privateInstitutionAccountsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIShortAccount> summary);
    void privateInstitutionAccountsSearchSignalFull(OAIHttpRequestWorker *worker, QList<OAIShortAccount> summary);
    void privateInstitutionAccountsUpdateSignalFull(OAIHttpRequestWorker *worker);
    void privateInstitutionArticlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticle> summary);
    void privateInstitutionDetailsSignalFull(OAIHttpRequestWorker *worker, OAIInstitution summary);
    void privateInstitutionEmbargoOptionsDetailsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroupEmbargoOptions> summary);
    void privateInstitutionGroupsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroup> summary);
    void privateInstitutionRolesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIRole> summary);

    Q_DECL_DEPRECATED_X("Use accountInstitutionCurationSignalError() instead")
    void accountInstitutionCurationSignalE(OAICurationDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountInstitutionCurationSignalError(OAICurationDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountInstitutionCurationCommentsSignalError() instead")
    void accountInstitutionCurationCommentsSignalE(OAICurationComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountInstitutionCurationCommentsSignalError(OAICurationComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountInstitutionCurationsSignalError() instead")
    void accountInstitutionCurationsSignalE(OAICuration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountInstitutionCurationsSignalError(OAICuration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountInstitutionReviewCurationIdCommentsPostSignalError() instead")
    void accountInstitutionReviewCurationIdCommentsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountInstitutionReviewCurationIdCommentsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customFieldsListSignalError() instead")
    void customFieldsListSignalE(QList<OAIShortCustomField> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customFieldsListSignalError(QList<OAIShortCustomField> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customFieldsUploadSignalError() instead")
    void customFieldsUploadSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customFieldsUploadSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use institutionArticlesSignalError() instead")
    void institutionArticlesSignalE(QList<OAIArticle> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void institutionArticlesSignalError(QList<OAIArticle> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use institutionHrfeedUploadSignalError() instead")
    void institutionHrfeedUploadSignalE(OAIResponseMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void institutionHrfeedUploadSignalError(OAIResponseMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateAccountInstitutionUserSignalError() instead")
    void privateAccountInstitutionUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateAccountInstitutionUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCategoriesListSignalError() instead")
    void privateCategoriesListSignalE(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCategoriesListSignalError(QList<OAICategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateGroupEmbargoOptionsDetailsSignalError() instead")
    void privateGroupEmbargoOptionsDetailsSignalE(QList<OAIGroupEmbargoOptions> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateGroupEmbargoOptionsDetailsSignalError(QList<OAIGroupEmbargoOptions> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionAccountGroupRoleDeleteSignalError() instead")
    void privateInstitutionAccountGroupRoleDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionAccountGroupRoleDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionAccountGroupRolesSignalError() instead")
    void privateInstitutionAccountGroupRolesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionAccountGroupRolesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionAccountGroupRolesCreateSignalError() instead")
    void privateInstitutionAccountGroupRolesCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionAccountGroupRolesCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionAccountsCreateSignalError() instead")
    void privateInstitutionAccountsCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionAccountsCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionAccountsListSignalError() instead")
    void privateInstitutionAccountsListSignalE(QList<OAIShortAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionAccountsListSignalError(QList<OAIShortAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionAccountsSearchSignalError() instead")
    void privateInstitutionAccountsSearchSignalE(QList<OAIShortAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionAccountsSearchSignalError(QList<OAIShortAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionAccountsUpdateSignalError() instead")
    void privateInstitutionAccountsUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionAccountsUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionArticlesSignalError() instead")
    void privateInstitutionArticlesSignalE(QList<OAIArticle> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionArticlesSignalError(QList<OAIArticle> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionDetailsSignalError() instead")
    void privateInstitutionDetailsSignalE(OAIInstitution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionDetailsSignalError(OAIInstitution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionEmbargoOptionsDetailsSignalError() instead")
    void privateInstitutionEmbargoOptionsDetailsSignalE(QList<OAIGroupEmbargoOptions> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionEmbargoOptionsDetailsSignalError(QList<OAIGroupEmbargoOptions> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionGroupsListSignalError() instead")
    void privateInstitutionGroupsListSignalE(QList<OAIGroup> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionGroupsListSignalError(QList<OAIGroup> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionRolesListSignalError() instead")
    void privateInstitutionRolesListSignalE(QList<OAIRole> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionRolesListSignalError(QList<OAIRole> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountInstitutionCurationSignalErrorFull() instead")
    void accountInstitutionCurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountInstitutionCurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountInstitutionCurationCommentsSignalErrorFull() instead")
    void accountInstitutionCurationCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountInstitutionCurationCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountInstitutionCurationsSignalErrorFull() instead")
    void accountInstitutionCurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountInstitutionCurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountInstitutionReviewCurationIdCommentsPostSignalErrorFull() instead")
    void accountInstitutionReviewCurationIdCommentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountInstitutionReviewCurationIdCommentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customFieldsListSignalErrorFull() instead")
    void customFieldsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customFieldsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customFieldsUploadSignalErrorFull() instead")
    void customFieldsUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customFieldsUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use institutionArticlesSignalErrorFull() instead")
    void institutionArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void institutionArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use institutionHrfeedUploadSignalErrorFull() instead")
    void institutionHrfeedUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void institutionHrfeedUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateAccountInstitutionUserSignalErrorFull() instead")
    void privateAccountInstitutionUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateAccountInstitutionUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateCategoriesListSignalErrorFull() instead")
    void privateCategoriesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateCategoriesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateGroupEmbargoOptionsDetailsSignalErrorFull() instead")
    void privateGroupEmbargoOptionsDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateGroupEmbargoOptionsDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionAccountGroupRoleDeleteSignalErrorFull() instead")
    void privateInstitutionAccountGroupRoleDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionAccountGroupRoleDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionAccountGroupRolesSignalErrorFull() instead")
    void privateInstitutionAccountGroupRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionAccountGroupRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionAccountGroupRolesCreateSignalErrorFull() instead")
    void privateInstitutionAccountGroupRolesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionAccountGroupRolesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionAccountsCreateSignalErrorFull() instead")
    void privateInstitutionAccountsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionAccountsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionAccountsListSignalErrorFull() instead")
    void privateInstitutionAccountsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionAccountsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionAccountsSearchSignalErrorFull() instead")
    void privateInstitutionAccountsSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionAccountsSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionAccountsUpdateSignalErrorFull() instead")
    void privateInstitutionAccountsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionAccountsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionArticlesSignalErrorFull() instead")
    void privateInstitutionArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionDetailsSignalErrorFull() instead")
    void privateInstitutionDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionEmbargoOptionsDetailsSignalErrorFull() instead")
    void privateInstitutionEmbargoOptionsDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionEmbargoOptionsDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionGroupsListSignalErrorFull() instead")
    void privateInstitutionGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateInstitutionRolesListSignalErrorFull() instead")
    void privateInstitutionRolesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateInstitutionRolesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
