/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectComplete.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectComplete::OAIProjectComplete(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectComplete::OAIProjectComplete() {
    this->initializeModel();
}

OAIProjectComplete::~OAIProjectComplete() {}

void OAIProjectComplete::initializeModel() {

    m_collaborators_isSet = false;
    m_collaborators_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_figshare_url_isSet = false;
    m_figshare_url_isValid = false;

    m_funding_isSet = false;
    m_funding_isValid = false;

    m_funding_list_isSet = false;
    m_funding_list_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_published_date_isSet = false;
    m_published_date_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIProjectComplete::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectComplete::fromJsonObject(QJsonObject json) {

    m_collaborators_isValid = ::OpenAPI::fromJsonValue(m_collaborators, json[QString("collaborators")]);
    m_collaborators_isSet = !json[QString("collaborators")].isNull() && m_collaborators_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_figshare_url_isValid = ::OpenAPI::fromJsonValue(m_figshare_url, json[QString("figshare_url")]);
    m_figshare_url_isSet = !json[QString("figshare_url")].isNull() && m_figshare_url_isValid;

    m_funding_isValid = ::OpenAPI::fromJsonValue(m_funding, json[QString("funding")]);
    m_funding_isSet = !json[QString("funding")].isNull() && m_funding_isValid;

    m_funding_list_isValid = ::OpenAPI::fromJsonValue(m_funding_list, json[QString("funding_list")]);
    m_funding_list_isSet = !json[QString("funding_list")].isNull() && m_funding_list_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_published_date_isValid = ::OpenAPI::fromJsonValue(m_published_date, json[QString("published_date")]);
    m_published_date_isSet = !json[QString("published_date")].isNull() && m_published_date_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIProjectComplete::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectComplete::asJsonObject() const {
    QJsonObject obj;
    if (m_collaborators.size() > 0) {
        obj.insert(QString("collaborators"), ::OpenAPI::toJsonValue(m_collaborators));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_figshare_url_isSet) {
        obj.insert(QString("figshare_url"), ::OpenAPI::toJsonValue(m_figshare_url));
    }
    if (m_funding_isSet) {
        obj.insert(QString("funding"), ::OpenAPI::toJsonValue(m_funding));
    }
    if (m_funding_list.size() > 0) {
        obj.insert(QString("funding_list"), ::OpenAPI::toJsonValue(m_funding_list));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_published_date_isSet) {
        obj.insert(QString("published_date"), ::OpenAPI::toJsonValue(m_published_date));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<OAICollaborator> OAIProjectComplete::getCollaborators() const {
    return m_collaborators;
}
void OAIProjectComplete::setCollaborators(const QList<OAICollaborator> &collaborators) {
    m_collaborators = collaborators;
    m_collaborators_isSet = true;
}

bool OAIProjectComplete::is_collaborators_Set() const{
    return m_collaborators_isSet;
}

bool OAIProjectComplete::is_collaborators_Valid() const{
    return m_collaborators_isValid;
}

QString OAIProjectComplete::getDescription() const {
    return m_description;
}
void OAIProjectComplete::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProjectComplete::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectComplete::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProjectComplete::getFigshareUrl() const {
    return m_figshare_url;
}
void OAIProjectComplete::setFigshareUrl(const QString &figshare_url) {
    m_figshare_url = figshare_url;
    m_figshare_url_isSet = true;
}

bool OAIProjectComplete::is_figshare_url_Set() const{
    return m_figshare_url_isSet;
}

bool OAIProjectComplete::is_figshare_url_Valid() const{
    return m_figshare_url_isValid;
}

QString OAIProjectComplete::getFunding() const {
    return m_funding;
}
void OAIProjectComplete::setFunding(const QString &funding) {
    m_funding = funding;
    m_funding_isSet = true;
}

bool OAIProjectComplete::is_funding_Set() const{
    return m_funding_isSet;
}

bool OAIProjectComplete::is_funding_Valid() const{
    return m_funding_isValid;
}

QList<OAIFundingInformation> OAIProjectComplete::getFundingList() const {
    return m_funding_list;
}
void OAIProjectComplete::setFundingList(const QList<OAIFundingInformation> &funding_list) {
    m_funding_list = funding_list;
    m_funding_list_isSet = true;
}

bool OAIProjectComplete::is_funding_list_Set() const{
    return m_funding_list_isSet;
}

bool OAIProjectComplete::is_funding_list_Valid() const{
    return m_funding_list_isValid;
}

qint64 OAIProjectComplete::getId() const {
    return m_id;
}
void OAIProjectComplete::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProjectComplete::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProjectComplete::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProjectComplete::getPublishedDate() const {
    return m_published_date;
}
void OAIProjectComplete::setPublishedDate(const QString &published_date) {
    m_published_date = published_date;
    m_published_date_isSet = true;
}

bool OAIProjectComplete::is_published_date_Set() const{
    return m_published_date_isSet;
}

bool OAIProjectComplete::is_published_date_Valid() const{
    return m_published_date_isValid;
}

QString OAIProjectComplete::getTitle() const {
    return m_title;
}
void OAIProjectComplete::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIProjectComplete::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProjectComplete::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIProjectComplete::getUrl() const {
    return m_url;
}
void OAIProjectComplete::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIProjectComplete::is_url_Set() const{
    return m_url_isSet;
}

bool OAIProjectComplete::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIProjectComplete::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collaborators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_figshare_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectComplete::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_collaborators_isValid && m_description_isValid && m_figshare_url_isValid && m_funding_isValid && m_funding_list_isValid && m_id_isValid && m_published_date_isValid && m_title_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
