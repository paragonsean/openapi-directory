/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectCompletePrivate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectCompletePrivate::OAIProjectCompletePrivate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectCompletePrivate::OAIProjectCompletePrivate() {
    this->initializeModel();
}

OAIProjectCompletePrivate::~OAIProjectCompletePrivate() {}

void OAIProjectCompletePrivate::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_collaborators_isSet = false;
    m_collaborators_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_figshare_url_isSet = false;
    m_figshare_url_isValid = false;

    m_funding_isSet = false;
    m_funding_isValid = false;

    m_funding_list_isSet = false;
    m_funding_list_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_quota_isSet = false;
    m_quota_isValid = false;

    m_used_quota_isSet = false;
    m_used_quota_isValid = false;

    m_used_quota_private_isSet = false;
    m_used_quota_private_isValid = false;

    m_used_quota_public_isSet = false;
    m_used_quota_public_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_storage_isSet = false;
    m_storage_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_published_date_isSet = false;
    m_published_date_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIProjectCompletePrivate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectCompletePrivate::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_collaborators_isValid = ::OpenAPI::fromJsonValue(m_collaborators, json[QString("collaborators")]);
    m_collaborators_isSet = !json[QString("collaborators")].isNull() && m_collaborators_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("created_date")]);
    m_created_date_isSet = !json[QString("created_date")].isNull() && m_created_date_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_figshare_url_isValid = ::OpenAPI::fromJsonValue(m_figshare_url, json[QString("figshare_url")]);
    m_figshare_url_isSet = !json[QString("figshare_url")].isNull() && m_figshare_url_isValid;

    m_funding_isValid = ::OpenAPI::fromJsonValue(m_funding, json[QString("funding")]);
    m_funding_isSet = !json[QString("funding")].isNull() && m_funding_isValid;

    m_funding_list_isValid = ::OpenAPI::fromJsonValue(m_funding_list, json[QString("funding_list")]);
    m_funding_list_isSet = !json[QString("funding_list")].isNull() && m_funding_list_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modified_date")]);
    m_modified_date_isSet = !json[QString("modified_date")].isNull() && m_modified_date_isValid;

    m_quota_isValid = ::OpenAPI::fromJsonValue(m_quota, json[QString("quota")]);
    m_quota_isSet = !json[QString("quota")].isNull() && m_quota_isValid;

    m_used_quota_isValid = ::OpenAPI::fromJsonValue(m_used_quota, json[QString("used_quota")]);
    m_used_quota_isSet = !json[QString("used_quota")].isNull() && m_used_quota_isValid;

    m_used_quota_private_isValid = ::OpenAPI::fromJsonValue(m_used_quota_private, json[QString("used_quota_private")]);
    m_used_quota_private_isSet = !json[QString("used_quota_private")].isNull() && m_used_quota_private_isValid;

    m_used_quota_public_isValid = ::OpenAPI::fromJsonValue(m_used_quota_public, json[QString("used_quota_public")]);
    m_used_quota_public_isSet = !json[QString("used_quota_public")].isNull() && m_used_quota_public_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_storage_isValid = ::OpenAPI::fromJsonValue(m_storage, json[QString("storage")]);
    m_storage_isSet = !json[QString("storage")].isNull() && m_storage_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_published_date_isValid = ::OpenAPI::fromJsonValue(m_published_date, json[QString("published_date")]);
    m_published_date_isSet = !json[QString("published_date")].isNull() && m_published_date_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIProjectCompletePrivate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectCompletePrivate::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_collaborators.size() > 0) {
        obj.insert(QString("collaborators"), ::OpenAPI::toJsonValue(m_collaborators));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("created_date"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_figshare_url_isSet) {
        obj.insert(QString("figshare_url"), ::OpenAPI::toJsonValue(m_figshare_url));
    }
    if (m_funding_isSet) {
        obj.insert(QString("funding"), ::OpenAPI::toJsonValue(m_funding));
    }
    if (m_funding_list.size() > 0) {
        obj.insert(QString("funding_list"), ::OpenAPI::toJsonValue(m_funding_list));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modified_date"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_quota_isSet) {
        obj.insert(QString("quota"), ::OpenAPI::toJsonValue(m_quota));
    }
    if (m_used_quota_isSet) {
        obj.insert(QString("used_quota"), ::OpenAPI::toJsonValue(m_used_quota));
    }
    if (m_used_quota_private_isSet) {
        obj.insert(QString("used_quota_private"), ::OpenAPI::toJsonValue(m_used_quota_private));
    }
    if (m_used_quota_public_isSet) {
        obj.insert(QString("used_quota_public"), ::OpenAPI::toJsonValue(m_used_quota_public));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_storage_isSet) {
        obj.insert(QString("storage"), ::OpenAPI::toJsonValue(m_storage));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_published_date_isSet) {
        obj.insert(QString("published_date"), ::OpenAPI::toJsonValue(m_published_date));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint64 OAIProjectCompletePrivate::getAccountId() const {
    return m_account_id;
}
void OAIProjectCompletePrivate::setAccountId(const qint64 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIProjectCompletePrivate::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIProjectCompletePrivate::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QList<OAICollaborator> OAIProjectCompletePrivate::getCollaborators() const {
    return m_collaborators;
}
void OAIProjectCompletePrivate::setCollaborators(const QList<OAICollaborator> &collaborators) {
    m_collaborators = collaborators;
    m_collaborators_isSet = true;
}

bool OAIProjectCompletePrivate::is_collaborators_Set() const{
    return m_collaborators_isSet;
}

bool OAIProjectCompletePrivate::is_collaborators_Valid() const{
    return m_collaborators_isValid;
}

QString OAIProjectCompletePrivate::getCreatedDate() const {
    return m_created_date;
}
void OAIProjectCompletePrivate::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIProjectCompletePrivate::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIProjectCompletePrivate::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QList<OAICustomArticleField> OAIProjectCompletePrivate::getCustomFields() const {
    return m_custom_fields;
}
void OAIProjectCompletePrivate::setCustomFields(const QList<OAICustomArticleField> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIProjectCompletePrivate::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIProjectCompletePrivate::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIProjectCompletePrivate::getDescription() const {
    return m_description;
}
void OAIProjectCompletePrivate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProjectCompletePrivate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectCompletePrivate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProjectCompletePrivate::getFigshareUrl() const {
    return m_figshare_url;
}
void OAIProjectCompletePrivate::setFigshareUrl(const QString &figshare_url) {
    m_figshare_url = figshare_url;
    m_figshare_url_isSet = true;
}

bool OAIProjectCompletePrivate::is_figshare_url_Set() const{
    return m_figshare_url_isSet;
}

bool OAIProjectCompletePrivate::is_figshare_url_Valid() const{
    return m_figshare_url_isValid;
}

QString OAIProjectCompletePrivate::getFunding() const {
    return m_funding;
}
void OAIProjectCompletePrivate::setFunding(const QString &funding) {
    m_funding = funding;
    m_funding_isSet = true;
}

bool OAIProjectCompletePrivate::is_funding_Set() const{
    return m_funding_isSet;
}

bool OAIProjectCompletePrivate::is_funding_Valid() const{
    return m_funding_isValid;
}

QList<OAIFundingInformation> OAIProjectCompletePrivate::getFundingList() const {
    return m_funding_list;
}
void OAIProjectCompletePrivate::setFundingList(const QList<OAIFundingInformation> &funding_list) {
    m_funding_list = funding_list;
    m_funding_list_isSet = true;
}

bool OAIProjectCompletePrivate::is_funding_list_Set() const{
    return m_funding_list_isSet;
}

bool OAIProjectCompletePrivate::is_funding_list_Valid() const{
    return m_funding_list_isValid;
}

qint64 OAIProjectCompletePrivate::getGroupId() const {
    return m_group_id;
}
void OAIProjectCompletePrivate::setGroupId(const qint64 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIProjectCompletePrivate::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIProjectCompletePrivate::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIProjectCompletePrivate::getModifiedDate() const {
    return m_modified_date;
}
void OAIProjectCompletePrivate::setModifiedDate(const QString &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAIProjectCompletePrivate::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAIProjectCompletePrivate::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

qint64 OAIProjectCompletePrivate::getQuota() const {
    return m_quota;
}
void OAIProjectCompletePrivate::setQuota(const qint64 &quota) {
    m_quota = quota;
    m_quota_isSet = true;
}

bool OAIProjectCompletePrivate::is_quota_Set() const{
    return m_quota_isSet;
}

bool OAIProjectCompletePrivate::is_quota_Valid() const{
    return m_quota_isValid;
}

qint64 OAIProjectCompletePrivate::getUsedQuota() const {
    return m_used_quota;
}
void OAIProjectCompletePrivate::setUsedQuota(const qint64 &used_quota) {
    m_used_quota = used_quota;
    m_used_quota_isSet = true;
}

bool OAIProjectCompletePrivate::is_used_quota_Set() const{
    return m_used_quota_isSet;
}

bool OAIProjectCompletePrivate::is_used_quota_Valid() const{
    return m_used_quota_isValid;
}

qint64 OAIProjectCompletePrivate::getUsedQuotaPrivate() const {
    return m_used_quota_private;
}
void OAIProjectCompletePrivate::setUsedQuotaPrivate(const qint64 &used_quota_private) {
    m_used_quota_private = used_quota_private;
    m_used_quota_private_isSet = true;
}

bool OAIProjectCompletePrivate::is_used_quota_private_Set() const{
    return m_used_quota_private_isSet;
}

bool OAIProjectCompletePrivate::is_used_quota_private_Valid() const{
    return m_used_quota_private_isValid;
}

qint64 OAIProjectCompletePrivate::getUsedQuotaPublic() const {
    return m_used_quota_public;
}
void OAIProjectCompletePrivate::setUsedQuotaPublic(const qint64 &used_quota_public) {
    m_used_quota_public = used_quota_public;
    m_used_quota_public_isSet = true;
}

bool OAIProjectCompletePrivate::is_used_quota_public_Set() const{
    return m_used_quota_public_isSet;
}

bool OAIProjectCompletePrivate::is_used_quota_public_Valid() const{
    return m_used_quota_public_isValid;
}

QString OAIProjectCompletePrivate::getRole() const {
    return m_role;
}
void OAIProjectCompletePrivate::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIProjectCompletePrivate::is_role_Set() const{
    return m_role_isSet;
}

bool OAIProjectCompletePrivate::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIProjectCompletePrivate::getStorage() const {
    return m_storage;
}
void OAIProjectCompletePrivate::setStorage(const QString &storage) {
    m_storage = storage;
    m_storage_isSet = true;
}

bool OAIProjectCompletePrivate::is_storage_Set() const{
    return m_storage_isSet;
}

bool OAIProjectCompletePrivate::is_storage_Valid() const{
    return m_storage_isValid;
}

qint64 OAIProjectCompletePrivate::getId() const {
    return m_id;
}
void OAIProjectCompletePrivate::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProjectCompletePrivate::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProjectCompletePrivate::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProjectCompletePrivate::getPublishedDate() const {
    return m_published_date;
}
void OAIProjectCompletePrivate::setPublishedDate(const QString &published_date) {
    m_published_date = published_date;
    m_published_date_isSet = true;
}

bool OAIProjectCompletePrivate::is_published_date_Set() const{
    return m_published_date_isSet;
}

bool OAIProjectCompletePrivate::is_published_date_Valid() const{
    return m_published_date_isValid;
}

QString OAIProjectCompletePrivate::getTitle() const {
    return m_title;
}
void OAIProjectCompletePrivate::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIProjectCompletePrivate::is_title_Set() const{
    return m_title_isSet;
}

bool OAIProjectCompletePrivate::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIProjectCompletePrivate::getUrl() const {
    return m_url;
}
void OAIProjectCompletePrivate::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIProjectCompletePrivate::is_url_Set() const{
    return m_url_isSet;
}

bool OAIProjectCompletePrivate::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIProjectCompletePrivate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaborators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_figshare_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_quota_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_quota_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectCompletePrivate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_collaborators_isValid && m_created_date_isValid && m_custom_fields_isValid && m_description_isValid && m_figshare_url_isValid && m_funding_isValid && m_funding_list_isValid && m_group_id_isValid && m_modified_date_isValid && m_quota_isValid && m_used_quota_isValid && m_used_quota_private_isValid && m_used_quota_public_isValid && m_role_isValid && m_storage_isValid && m_id_isValid && m_published_date_isValid && m_title_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
