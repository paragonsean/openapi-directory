/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeline::OAITimeline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeline::OAITimeline() {
    this->initializeModel();
}

OAITimeline::~OAITimeline() {}

void OAITimeline::initializeModel() {

    m_posted_isSet = false;
    m_posted_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_submission_isSet = false;
    m_submission_isValid = false;

    m_first_online_isSet = false;
    m_first_online_isValid = false;

    m_publisher_acceptance_isSet = false;
    m_publisher_acceptance_isValid = false;

    m_publisher_publication_isSet = false;
    m_publisher_publication_isValid = false;
}

void OAITimeline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeline::fromJsonObject(QJsonObject json) {

    m_posted_isValid = ::OpenAPI::fromJsonValue(m_posted, json[QString("posted")]);
    m_posted_isSet = !json[QString("posted")].isNull() && m_posted_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_submission_isValid = ::OpenAPI::fromJsonValue(m_submission, json[QString("submission")]);
    m_submission_isSet = !json[QString("submission")].isNull() && m_submission_isValid;

    m_first_online_isValid = ::OpenAPI::fromJsonValue(m_first_online, json[QString("firstOnline")]);
    m_first_online_isSet = !json[QString("firstOnline")].isNull() && m_first_online_isValid;

    m_publisher_acceptance_isValid = ::OpenAPI::fromJsonValue(m_publisher_acceptance, json[QString("publisherAcceptance")]);
    m_publisher_acceptance_isSet = !json[QString("publisherAcceptance")].isNull() && m_publisher_acceptance_isValid;

    m_publisher_publication_isValid = ::OpenAPI::fromJsonValue(m_publisher_publication, json[QString("publisherPublication")]);
    m_publisher_publication_isSet = !json[QString("publisherPublication")].isNull() && m_publisher_publication_isValid;
}

QString OAITimeline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeline::asJsonObject() const {
    QJsonObject obj;
    if (m_posted_isSet) {
        obj.insert(QString("posted"), ::OpenAPI::toJsonValue(m_posted));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_submission_isSet) {
        obj.insert(QString("submission"), ::OpenAPI::toJsonValue(m_submission));
    }
    if (m_first_online_isSet) {
        obj.insert(QString("firstOnline"), ::OpenAPI::toJsonValue(m_first_online));
    }
    if (m_publisher_acceptance_isSet) {
        obj.insert(QString("publisherAcceptance"), ::OpenAPI::toJsonValue(m_publisher_acceptance));
    }
    if (m_publisher_publication_isSet) {
        obj.insert(QString("publisherPublication"), ::OpenAPI::toJsonValue(m_publisher_publication));
    }
    return obj;
}

QString OAITimeline::getPosted() const {
    return m_posted;
}
void OAITimeline::setPosted(const QString &posted) {
    m_posted = posted;
    m_posted_isSet = true;
}

bool OAITimeline::is_posted_Set() const{
    return m_posted_isSet;
}

bool OAITimeline::is_posted_Valid() const{
    return m_posted_isValid;
}

QString OAITimeline::getRevision() const {
    return m_revision;
}
void OAITimeline::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAITimeline::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAITimeline::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAITimeline::getSubmission() const {
    return m_submission;
}
void OAITimeline::setSubmission(const QString &submission) {
    m_submission = submission;
    m_submission_isSet = true;
}

bool OAITimeline::is_submission_Set() const{
    return m_submission_isSet;
}

bool OAITimeline::is_submission_Valid() const{
    return m_submission_isValid;
}

QString OAITimeline::getFirstOnline() const {
    return m_first_online;
}
void OAITimeline::setFirstOnline(const QString &first_online) {
    m_first_online = first_online;
    m_first_online_isSet = true;
}

bool OAITimeline::is_first_online_Set() const{
    return m_first_online_isSet;
}

bool OAITimeline::is_first_online_Valid() const{
    return m_first_online_isValid;
}

QString OAITimeline::getPublisherAcceptance() const {
    return m_publisher_acceptance;
}
void OAITimeline::setPublisherAcceptance(const QString &publisher_acceptance) {
    m_publisher_acceptance = publisher_acceptance;
    m_publisher_acceptance_isSet = true;
}

bool OAITimeline::is_publisher_acceptance_Set() const{
    return m_publisher_acceptance_isSet;
}

bool OAITimeline::is_publisher_acceptance_Valid() const{
    return m_publisher_acceptance_isValid;
}

QString OAITimeline::getPublisherPublication() const {
    return m_publisher_publication;
}
void OAITimeline::setPublisherPublication(const QString &publisher_publication) {
    m_publisher_publication = publisher_publication;
    m_publisher_publication_isSet = true;
}

bool OAITimeline::is_publisher_publication_Set() const{
    return m_publisher_publication_isSet;
}

bool OAITimeline::is_publisher_publication_Valid() const{
    return m_publisher_publication_isValid;
}

bool OAITimeline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_posted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_online_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_acceptance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_publication_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeline::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_posted_isValid && m_revision_isValid && m_submission_isValid && m_first_online_isValid && m_publisher_acceptance_isValid && m_publisher_publication_isValid && true;
}

} // namespace OpenAPI
