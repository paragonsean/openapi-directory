/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateFile::OAIPrivateFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateFile::OAIPrivateFile() {
    this->initializeModel();
}

OAIPrivateFile::~OAIPrivateFile() {}

void OAIPrivateFile::initializeModel() {

    m_is_attached_to_public_version_isSet = false;
    m_is_attached_to_public_version_isValid = false;

    m_preview_state_isSet = false;
    m_preview_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_upload_token_isSet = false;
    m_upload_token_isValid = false;

    m_upload_url_isSet = false;
    m_upload_url_isValid = false;

    m_viewer_type_isSet = false;
    m_viewer_type_isValid = false;

    m_computed_md5_isSet = false;
    m_computed_md5_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_link_only_isSet = false;
    m_is_link_only_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_supplied_md5_isSet = false;
    m_supplied_md5_isValid = false;
}

void OAIPrivateFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateFile::fromJsonObject(QJsonObject json) {

    m_is_attached_to_public_version_isValid = ::OpenAPI::fromJsonValue(m_is_attached_to_public_version, json[QString("is_attached_to_public_version")]);
    m_is_attached_to_public_version_isSet = !json[QString("is_attached_to_public_version")].isNull() && m_is_attached_to_public_version_isValid;

    m_preview_state_isValid = ::OpenAPI::fromJsonValue(m_preview_state, json[QString("preview_state")]);
    m_preview_state_isSet = !json[QString("preview_state")].isNull() && m_preview_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_upload_token_isValid = ::OpenAPI::fromJsonValue(m_upload_token, json[QString("upload_token")]);
    m_upload_token_isSet = !json[QString("upload_token")].isNull() && m_upload_token_isValid;

    m_upload_url_isValid = ::OpenAPI::fromJsonValue(m_upload_url, json[QString("upload_url")]);
    m_upload_url_isSet = !json[QString("upload_url")].isNull() && m_upload_url_isValid;

    m_viewer_type_isValid = ::OpenAPI::fromJsonValue(m_viewer_type, json[QString("viewer_type")]);
    m_viewer_type_isSet = !json[QString("viewer_type")].isNull() && m_viewer_type_isValid;

    m_computed_md5_isValid = ::OpenAPI::fromJsonValue(m_computed_md5, json[QString("computed_md5")]);
    m_computed_md5_isSet = !json[QString("computed_md5")].isNull() && m_computed_md5_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("download_url")]);
    m_download_url_isSet = !json[QString("download_url")].isNull() && m_download_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_link_only_isValid = ::OpenAPI::fromJsonValue(m_is_link_only, json[QString("is_link_only")]);
    m_is_link_only_isSet = !json[QString("is_link_only")].isNull() && m_is_link_only_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_supplied_md5_isValid = ::OpenAPI::fromJsonValue(m_supplied_md5, json[QString("supplied_md5")]);
    m_supplied_md5_isSet = !json[QString("supplied_md5")].isNull() && m_supplied_md5_isValid;
}

QString OAIPrivateFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateFile::asJsonObject() const {
    QJsonObject obj;
    if (m_is_attached_to_public_version_isSet) {
        obj.insert(QString("is_attached_to_public_version"), ::OpenAPI::toJsonValue(m_is_attached_to_public_version));
    }
    if (m_preview_state_isSet) {
        obj.insert(QString("preview_state"), ::OpenAPI::toJsonValue(m_preview_state));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_upload_token_isSet) {
        obj.insert(QString("upload_token"), ::OpenAPI::toJsonValue(m_upload_token));
    }
    if (m_upload_url_isSet) {
        obj.insert(QString("upload_url"), ::OpenAPI::toJsonValue(m_upload_url));
    }
    if (m_viewer_type_isSet) {
        obj.insert(QString("viewer_type"), ::OpenAPI::toJsonValue(m_viewer_type));
    }
    if (m_computed_md5_isSet) {
        obj.insert(QString("computed_md5"), ::OpenAPI::toJsonValue(m_computed_md5));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("download_url"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_link_only_isSet) {
        obj.insert(QString("is_link_only"), ::OpenAPI::toJsonValue(m_is_link_only));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_supplied_md5_isSet) {
        obj.insert(QString("supplied_md5"), ::OpenAPI::toJsonValue(m_supplied_md5));
    }
    return obj;
}

bool OAIPrivateFile::isIsAttachedToPublicVersion() const {
    return m_is_attached_to_public_version;
}
void OAIPrivateFile::setIsAttachedToPublicVersion(const bool &is_attached_to_public_version) {
    m_is_attached_to_public_version = is_attached_to_public_version;
    m_is_attached_to_public_version_isSet = true;
}

bool OAIPrivateFile::is_is_attached_to_public_version_Set() const{
    return m_is_attached_to_public_version_isSet;
}

bool OAIPrivateFile::is_is_attached_to_public_version_Valid() const{
    return m_is_attached_to_public_version_isValid;
}

QString OAIPrivateFile::getPreviewState() const {
    return m_preview_state;
}
void OAIPrivateFile::setPreviewState(const QString &preview_state) {
    m_preview_state = preview_state;
    m_preview_state_isSet = true;
}

bool OAIPrivateFile::is_preview_state_Set() const{
    return m_preview_state_isSet;
}

bool OAIPrivateFile::is_preview_state_Valid() const{
    return m_preview_state_isValid;
}

QString OAIPrivateFile::getStatus() const {
    return m_status;
}
void OAIPrivateFile::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPrivateFile::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPrivateFile::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPrivateFile::getUploadToken() const {
    return m_upload_token;
}
void OAIPrivateFile::setUploadToken(const QString &upload_token) {
    m_upload_token = upload_token;
    m_upload_token_isSet = true;
}

bool OAIPrivateFile::is_upload_token_Set() const{
    return m_upload_token_isSet;
}

bool OAIPrivateFile::is_upload_token_Valid() const{
    return m_upload_token_isValid;
}

QString OAIPrivateFile::getUploadUrl() const {
    return m_upload_url;
}
void OAIPrivateFile::setUploadUrl(const QString &upload_url) {
    m_upload_url = upload_url;
    m_upload_url_isSet = true;
}

bool OAIPrivateFile::is_upload_url_Set() const{
    return m_upload_url_isSet;
}

bool OAIPrivateFile::is_upload_url_Valid() const{
    return m_upload_url_isValid;
}

QString OAIPrivateFile::getViewerType() const {
    return m_viewer_type;
}
void OAIPrivateFile::setViewerType(const QString &viewer_type) {
    m_viewer_type = viewer_type;
    m_viewer_type_isSet = true;
}

bool OAIPrivateFile::is_viewer_type_Set() const{
    return m_viewer_type_isSet;
}

bool OAIPrivateFile::is_viewer_type_Valid() const{
    return m_viewer_type_isValid;
}

QString OAIPrivateFile::getComputedMd5() const {
    return m_computed_md5;
}
void OAIPrivateFile::setComputedMd5(const QString &computed_md5) {
    m_computed_md5 = computed_md5;
    m_computed_md5_isSet = true;
}

bool OAIPrivateFile::is_computed_md5_Set() const{
    return m_computed_md5_isSet;
}

bool OAIPrivateFile::is_computed_md5_Valid() const{
    return m_computed_md5_isValid;
}

QString OAIPrivateFile::getDownloadUrl() const {
    return m_download_url;
}
void OAIPrivateFile::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIPrivateFile::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIPrivateFile::is_download_url_Valid() const{
    return m_download_url_isValid;
}

qint64 OAIPrivateFile::getId() const {
    return m_id;
}
void OAIPrivateFile::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPrivateFile::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPrivateFile::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPrivateFile::isIsLinkOnly() const {
    return m_is_link_only;
}
void OAIPrivateFile::setIsLinkOnly(const bool &is_link_only) {
    m_is_link_only = is_link_only;
    m_is_link_only_isSet = true;
}

bool OAIPrivateFile::is_is_link_only_Set() const{
    return m_is_link_only_isSet;
}

bool OAIPrivateFile::is_is_link_only_Valid() const{
    return m_is_link_only_isValid;
}

QString OAIPrivateFile::getName() const {
    return m_name;
}
void OAIPrivateFile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPrivateFile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPrivateFile::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIPrivateFile::getSize() const {
    return m_size;
}
void OAIPrivateFile::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIPrivateFile::is_size_Set() const{
    return m_size_isSet;
}

bool OAIPrivateFile::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIPrivateFile::getSuppliedMd5() const {
    return m_supplied_md5;
}
void OAIPrivateFile::setSuppliedMd5(const QString &supplied_md5) {
    m_supplied_md5 = supplied_md5;
    m_supplied_md5_isSet = true;
}

bool OAIPrivateFile::is_supplied_md5_Set() const{
    return m_supplied_md5_isSet;
}

bool OAIPrivateFile::is_supplied_md5_Valid() const{
    return m_supplied_md5_isValid;
}

bool OAIPrivateFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_attached_to_public_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_computed_md5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_link_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplied_md5_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_attached_to_public_version_isValid && m_preview_state_isValid && m_status_isValid && m_upload_token_isValid && m_upload_url_isValid && m_viewer_type_isValid && m_computed_md5_isValid && m_download_url_isValid && m_id_isValid && m_is_link_only_isValid && m_name_isValid && m_size_isValid && m_supplied_md5_isValid && true;
}

} // namespace OpenAPI
