/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShortAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShortAccount::OAIShortAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShortAccount::OAIShortAccount() {
    this->initializeModel();
}

OAIShortAccount::~OAIShortAccount() {}

void OAIShortAccount::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_institution_id_isSet = false;
    m_institution_id_isValid = false;

    m_institution_user_id_isSet = false;
    m_institution_user_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_orcid_id_isSet = false;
    m_orcid_id_isValid = false;

    m_quota_isSet = false;
    m_quota_isValid = false;

    m_used_quota_isSet = false;
    m_used_quota_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIShortAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShortAccount::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_institution_id_isValid = ::OpenAPI::fromJsonValue(m_institution_id, json[QString("institution_id")]);
    m_institution_id_isSet = !json[QString("institution_id")].isNull() && m_institution_id_isValid;

    m_institution_user_id_isValid = ::OpenAPI::fromJsonValue(m_institution_user_id, json[QString("institution_user_id")]);
    m_institution_user_id_isSet = !json[QString("institution_user_id")].isNull() && m_institution_user_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_orcid_id_isValid = ::OpenAPI::fromJsonValue(m_orcid_id, json[QString("orcid_id")]);
    m_orcid_id_isSet = !json[QString("orcid_id")].isNull() && m_orcid_id_isValid;

    m_quota_isValid = ::OpenAPI::fromJsonValue(m_quota, json[QString("quota")]);
    m_quota_isSet = !json[QString("quota")].isNull() && m_quota_isValid;

    m_used_quota_isValid = ::OpenAPI::fromJsonValue(m_used_quota, json[QString("used_quota")]);
    m_used_quota_isSet = !json[QString("used_quota")].isNull() && m_used_quota_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIShortAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShortAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_institution_id_isSet) {
        obj.insert(QString("institution_id"), ::OpenAPI::toJsonValue(m_institution_id));
    }
    if (m_institution_user_id_isSet) {
        obj.insert(QString("institution_user_id"), ::OpenAPI::toJsonValue(m_institution_user_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_orcid_id_isSet) {
        obj.insert(QString("orcid_id"), ::OpenAPI::toJsonValue(m_orcid_id));
    }
    if (m_quota_isSet) {
        obj.insert(QString("quota"), ::OpenAPI::toJsonValue(m_quota));
    }
    if (m_used_quota_isSet) {
        obj.insert(QString("used_quota"), ::OpenAPI::toJsonValue(m_used_quota));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint64 OAIShortAccount::getActive() const {
    return m_active;
}
void OAIShortAccount::setActive(const qint64 &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIShortAccount::is_active_Set() const{
    return m_active_isSet;
}

bool OAIShortAccount::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIShortAccount::getEmail() const {
    return m_email;
}
void OAIShortAccount::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIShortAccount::is_email_Set() const{
    return m_email_isSet;
}

bool OAIShortAccount::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIShortAccount::getFirstName() const {
    return m_first_name;
}
void OAIShortAccount::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIShortAccount::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIShortAccount::is_first_name_Valid() const{
    return m_first_name_isValid;
}

qint64 OAIShortAccount::getId() const {
    return m_id;
}
void OAIShortAccount::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShortAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShortAccount::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIShortAccount::getInstitutionId() const {
    return m_institution_id;
}
void OAIShortAccount::setInstitutionId(const qint64 &institution_id) {
    m_institution_id = institution_id;
    m_institution_id_isSet = true;
}

bool OAIShortAccount::is_institution_id_Set() const{
    return m_institution_id_isSet;
}

bool OAIShortAccount::is_institution_id_Valid() const{
    return m_institution_id_isValid;
}

QString OAIShortAccount::getInstitutionUserId() const {
    return m_institution_user_id;
}
void OAIShortAccount::setInstitutionUserId(const QString &institution_user_id) {
    m_institution_user_id = institution_user_id;
    m_institution_user_id_isSet = true;
}

bool OAIShortAccount::is_institution_user_id_Set() const{
    return m_institution_user_id_isSet;
}

bool OAIShortAccount::is_institution_user_id_Valid() const{
    return m_institution_user_id_isValid;
}

QString OAIShortAccount::getLastName() const {
    return m_last_name;
}
void OAIShortAccount::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIShortAccount::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIShortAccount::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIShortAccount::getOrcidId() const {
    return m_orcid_id;
}
void OAIShortAccount::setOrcidId(const QString &orcid_id) {
    m_orcid_id = orcid_id;
    m_orcid_id_isSet = true;
}

bool OAIShortAccount::is_orcid_id_Set() const{
    return m_orcid_id_isSet;
}

bool OAIShortAccount::is_orcid_id_Valid() const{
    return m_orcid_id_isValid;
}

qint64 OAIShortAccount::getQuota() const {
    return m_quota;
}
void OAIShortAccount::setQuota(const qint64 &quota) {
    m_quota = quota;
    m_quota_isSet = true;
}

bool OAIShortAccount::is_quota_Set() const{
    return m_quota_isSet;
}

bool OAIShortAccount::is_quota_Valid() const{
    return m_quota_isValid;
}

qint64 OAIShortAccount::getUsedQuota() const {
    return m_used_quota;
}
void OAIShortAccount::setUsedQuota(const qint64 &used_quota) {
    m_used_quota = used_quota;
    m_used_quota_isSet = true;
}

bool OAIShortAccount::is_used_quota_Set() const{
    return m_used_quota_isSet;
}

bool OAIShortAccount::is_used_quota_Valid() const{
    return m_used_quota_isValid;
}

qint64 OAIShortAccount::getUserId() const {
    return m_user_id;
}
void OAIShortAccount::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIShortAccount::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIShortAccount::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIShortAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orcid_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShortAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && m_email_isValid && m_first_name_isValid && m_id_isValid && m_institution_id_isValid && m_institution_user_id_isValid && m_last_name_isValid && m_orcid_id_isValid && m_quota_isValid && m_used_quota_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
