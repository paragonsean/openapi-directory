/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIArticle.h"
#include "OAIArticleProjectCreate.h"
#include "OAICreateProjectResponse.h"
#include "OAIErrorMessage.h"
#include "OAILocation.h"
#include "OAILocationWarnings.h"
#include "OAIPrivateFile.h"
#include "OAIProject.h"
#include "OAIProjectArticle.h"
#include "OAIProjectCollaborator.h"
#include "OAIProjectCollaboratorInvite.h"
#include "OAIProjectComplete.h"
#include "OAIProjectCompletePrivate.h"
#include "OAIProjectCreate.h"
#include "OAIProjectNote.h"
#include "OAIProjectNoteCreate.h"
#include "OAIProjectNotePrivate.h"
#include "OAIProjectPrivate.h"
#include "OAIProjectUpdate.h"
#include "OAIProjectsSearch.h"
#include "OAIResponseMessage.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  article_id qint64 [required]
    */
    virtual void privateProjectArticleDelete(const qint64 &project_id, const qint64 &article_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  article_id qint64 [required]
    */
    virtual void privateProjectArticleDetails(const qint64 &project_id, const qint64 &article_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  article_id qint64 [required]
    * @param[in]  file_id qint64 [required]
    */
    virtual void privateProjectArticleFile(const qint64 &project_id, const qint64 &article_id, const qint64 &file_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  article_id qint64 [required]
    */
    virtual void privateProjectArticleFiles(const qint64 &project_id, const qint64 &article_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  oai_article_project_create OAIArticleProjectCreate [required]
    * @param[in]  page qint64 [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  offset qint64 [optional]
    */
    virtual void privateProjectArticlesCreate(const qint64 &project_id, const OAIArticleProjectCreate &oai_article_project_create, const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  page qint64 [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  offset qint64 [optional]
    */
    virtual void privateProjectArticlesList(const qint64 &project_id, const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  user_id qint64 [required]
    */
    virtual void privateProjectCollaboratorDelete(const qint64 &project_id, const qint64 &user_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  oai_project_collaborator_invite OAIProjectCollaboratorInvite [required]
    */
    virtual void privateProjectCollaboratorsInvite(const qint64 &project_id, const OAIProjectCollaboratorInvite &oai_project_collaborator_invite);

    /**
    * @param[in]  project_id qint64 [required]
    */
    virtual void privateProjectCollaboratorsList(const qint64 &project_id);

    /**
    * @param[in]  oai_project_create OAIProjectCreate [required]
    */
    virtual void privateProjectCreate(const OAIProjectCreate &oai_project_create);

    /**
    * @param[in]  project_id qint64 [required]
    */
    virtual void privateProjectDelete(const qint64 &project_id);

    /**
    * @param[in]  project_id qint64 [required]
    */
    virtual void privateProjectDetails(const qint64 &project_id);

    /**
    * @param[in]  project_id qint64 [required]
    */
    virtual void privateProjectLeave(const qint64 &project_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  note_id qint64 [required]
    */
    virtual void privateProjectNote(const qint64 &project_id, const qint64 &note_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  note_id qint64 [required]
    */
    virtual void privateProjectNoteDelete(const qint64 &project_id, const qint64 &note_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  note_id qint64 [required]
    * @param[in]  oai_project_note_create OAIProjectNoteCreate [required]
    */
    virtual void privateProjectNoteUpdate(const qint64 &project_id, const qint64 &note_id, const OAIProjectNoteCreate &oai_project_note_create);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  oai_project_note_create OAIProjectNoteCreate [required]
    */
    virtual void privateProjectNotesCreate(const qint64 &project_id, const OAIProjectNoteCreate &oai_project_note_create);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  page qint64 [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  offset qint64 [optional]
    */
    virtual void privateProjectNotesList(const qint64 &project_id, const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  project_id qint64 [required]
    */
    virtual void privateProjectPublish(const qint64 &project_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  oai_project_update OAIProjectUpdate [required]
    */
    virtual void privateProjectUpdate(const qint64 &project_id, const OAIProjectUpdate &oai_project_update);

    /**
    * @param[in]  page qint64 [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  offset qint64 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  order_direction QString [optional]
    * @param[in]  storage QString [optional]
    * @param[in]  roles QString [optional]
    */
    virtual void privateProjectsList(const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &storage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &roles = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_projects_search OAIProjectsSearch [optional]
    */
    virtual void privateProjectsSearch(const ::OpenAPI::OptionalParam<OAIProjectsSearch> &oai_projects_search = ::OpenAPI::OptionalParam<OAIProjectsSearch>());

    /**
    * @param[in]  project_id qint64 [required]
    */
    virtual void projectArticles(const qint64 &project_id);

    /**
    * @param[in]  project_id qint64 [required]
    */
    virtual void projectDetails(const qint64 &project_id);

    /**
    * @param[in]  x_cursor QString [optional]
    * @param[in]  page qint64 [optional]
    * @param[in]  page_size qint64 [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  offset qint64 [optional]
    * @param[in]  order QString [optional]
    * @param[in]  order_direction QString [optional]
    * @param[in]  institution qint64 [optional]
    * @param[in]  published_since QString [optional]
    * @param[in]  group qint64 [optional]
    */
    virtual void projectsList(const ::OpenAPI::OptionalParam<QString> &x_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &page_size = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &institution = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &published_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &group = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  x_cursor QString [optional]
    * @param[in]  oai_projects_search OAIProjectsSearch [optional]
    */
    virtual void projectsSearch(const ::OpenAPI::OptionalParam<QString> &x_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIProjectsSearch> &oai_projects_search = ::OpenAPI::OptionalParam<OAIProjectsSearch>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void privateProjectArticleDeleteCallback(OAIHttpRequestWorker *worker);
    void privateProjectArticleDetailsCallback(OAIHttpRequestWorker *worker);
    void privateProjectArticleFileCallback(OAIHttpRequestWorker *worker);
    void privateProjectArticleFilesCallback(OAIHttpRequestWorker *worker);
    void privateProjectArticlesCreateCallback(OAIHttpRequestWorker *worker);
    void privateProjectArticlesListCallback(OAIHttpRequestWorker *worker);
    void privateProjectCollaboratorDeleteCallback(OAIHttpRequestWorker *worker);
    void privateProjectCollaboratorsInviteCallback(OAIHttpRequestWorker *worker);
    void privateProjectCollaboratorsListCallback(OAIHttpRequestWorker *worker);
    void privateProjectCreateCallback(OAIHttpRequestWorker *worker);
    void privateProjectDeleteCallback(OAIHttpRequestWorker *worker);
    void privateProjectDetailsCallback(OAIHttpRequestWorker *worker);
    void privateProjectLeaveCallback(OAIHttpRequestWorker *worker);
    void privateProjectNoteCallback(OAIHttpRequestWorker *worker);
    void privateProjectNoteDeleteCallback(OAIHttpRequestWorker *worker);
    void privateProjectNoteUpdateCallback(OAIHttpRequestWorker *worker);
    void privateProjectNotesCreateCallback(OAIHttpRequestWorker *worker);
    void privateProjectNotesListCallback(OAIHttpRequestWorker *worker);
    void privateProjectPublishCallback(OAIHttpRequestWorker *worker);
    void privateProjectUpdateCallback(OAIHttpRequestWorker *worker);
    void privateProjectsListCallback(OAIHttpRequestWorker *worker);
    void privateProjectsSearchCallback(OAIHttpRequestWorker *worker);
    void projectArticlesCallback(OAIHttpRequestWorker *worker);
    void projectDetailsCallback(OAIHttpRequestWorker *worker);
    void projectsListCallback(OAIHttpRequestWorker *worker);
    void projectsSearchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void privateProjectArticleDeleteSignal();
    void privateProjectArticleDetailsSignal(OAIProjectArticle summary);
    void privateProjectArticleFileSignal(OAIPrivateFile summary);
    void privateProjectArticleFilesSignal(QList<OAIPrivateFile> summary);
    void privateProjectArticlesCreateSignal(OAILocationWarnings summary);
    void privateProjectArticlesListSignal(QList<OAIArticle> summary);
    void privateProjectCollaboratorDeleteSignal();
    void privateProjectCollaboratorsInviteSignal(OAIResponseMessage summary);
    void privateProjectCollaboratorsListSignal(QList<OAIProjectCollaborator> summary);
    void privateProjectCreateSignal(OAICreateProjectResponse summary);
    void privateProjectDeleteSignal();
    void privateProjectDetailsSignal(OAIProjectCompletePrivate summary);
    void privateProjectLeaveSignal();
    void privateProjectNoteSignal(OAIProjectNotePrivate summary);
    void privateProjectNoteDeleteSignal();
    void privateProjectNoteUpdateSignal();
    void privateProjectNotesCreateSignal(OAILocation summary);
    void privateProjectNotesListSignal(QList<OAIProjectNote> summary);
    void privateProjectPublishSignal(OAIResponseMessage summary);
    void privateProjectUpdateSignal();
    void privateProjectsListSignal(QList<OAIProjectPrivate> summary);
    void privateProjectsSearchSignal(QList<OAIProjectPrivate> summary);
    void projectArticlesSignal(QList<OAIArticle> summary);
    void projectDetailsSignal(OAIProjectComplete summary);
    void projectsListSignal(QList<OAIProject> summary);
    void projectsSearchSignal(QList<OAIProject> summary);


    void privateProjectArticleDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateProjectArticleDetailsSignalFull(OAIHttpRequestWorker *worker, OAIProjectArticle summary);
    void privateProjectArticleFileSignalFull(OAIHttpRequestWorker *worker, OAIPrivateFile summary);
    void privateProjectArticleFilesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPrivateFile> summary);
    void privateProjectArticlesCreateSignalFull(OAIHttpRequestWorker *worker, OAILocationWarnings summary);
    void privateProjectArticlesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticle> summary);
    void privateProjectCollaboratorDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateProjectCollaboratorsInviteSignalFull(OAIHttpRequestWorker *worker, OAIResponseMessage summary);
    void privateProjectCollaboratorsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectCollaborator> summary);
    void privateProjectCreateSignalFull(OAIHttpRequestWorker *worker, OAICreateProjectResponse summary);
    void privateProjectDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateProjectDetailsSignalFull(OAIHttpRequestWorker *worker, OAIProjectCompletePrivate summary);
    void privateProjectLeaveSignalFull(OAIHttpRequestWorker *worker);
    void privateProjectNoteSignalFull(OAIHttpRequestWorker *worker, OAIProjectNotePrivate summary);
    void privateProjectNoteDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateProjectNoteUpdateSignalFull(OAIHttpRequestWorker *worker);
    void privateProjectNotesCreateSignalFull(OAIHttpRequestWorker *worker, OAILocation summary);
    void privateProjectNotesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectNote> summary);
    void privateProjectPublishSignalFull(OAIHttpRequestWorker *worker, OAIResponseMessage summary);
    void privateProjectUpdateSignalFull(OAIHttpRequestWorker *worker);
    void privateProjectsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectPrivate> summary);
    void privateProjectsSearchSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectPrivate> summary);
    void projectArticlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIArticle> summary);
    void projectDetailsSignalFull(OAIHttpRequestWorker *worker, OAIProjectComplete summary);
    void projectsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIProject> summary);
    void projectsSearchSignalFull(OAIHttpRequestWorker *worker, QList<OAIProject> summary);

    Q_DECL_DEPRECATED_X("Use privateProjectArticleDeleteSignalError() instead")
    void privateProjectArticleDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectArticleDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectArticleDetailsSignalError() instead")
    void privateProjectArticleDetailsSignalE(OAIProjectArticle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectArticleDetailsSignalError(OAIProjectArticle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectArticleFileSignalError() instead")
    void privateProjectArticleFileSignalE(OAIPrivateFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectArticleFileSignalError(OAIPrivateFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectArticleFilesSignalError() instead")
    void privateProjectArticleFilesSignalE(QList<OAIPrivateFile> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectArticleFilesSignalError(QList<OAIPrivateFile> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectArticlesCreateSignalError() instead")
    void privateProjectArticlesCreateSignalE(OAILocationWarnings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectArticlesCreateSignalError(OAILocationWarnings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectArticlesListSignalError() instead")
    void privateProjectArticlesListSignalE(QList<OAIArticle> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectArticlesListSignalError(QList<OAIArticle> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectCollaboratorDeleteSignalError() instead")
    void privateProjectCollaboratorDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectCollaboratorDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectCollaboratorsInviteSignalError() instead")
    void privateProjectCollaboratorsInviteSignalE(OAIResponseMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectCollaboratorsInviteSignalError(OAIResponseMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectCollaboratorsListSignalError() instead")
    void privateProjectCollaboratorsListSignalE(QList<OAIProjectCollaborator> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectCollaboratorsListSignalError(QList<OAIProjectCollaborator> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectCreateSignalError() instead")
    void privateProjectCreateSignalE(OAICreateProjectResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectCreateSignalError(OAICreateProjectResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectDeleteSignalError() instead")
    void privateProjectDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectDetailsSignalError() instead")
    void privateProjectDetailsSignalE(OAIProjectCompletePrivate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectDetailsSignalError(OAIProjectCompletePrivate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectLeaveSignalError() instead")
    void privateProjectLeaveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectLeaveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectNoteSignalError() instead")
    void privateProjectNoteSignalE(OAIProjectNotePrivate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectNoteSignalError(OAIProjectNotePrivate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectNoteDeleteSignalError() instead")
    void privateProjectNoteDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectNoteDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectNoteUpdateSignalError() instead")
    void privateProjectNoteUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectNoteUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectNotesCreateSignalError() instead")
    void privateProjectNotesCreateSignalE(OAILocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectNotesCreateSignalError(OAILocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectNotesListSignalError() instead")
    void privateProjectNotesListSignalE(QList<OAIProjectNote> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectNotesListSignalError(QList<OAIProjectNote> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectPublishSignalError() instead")
    void privateProjectPublishSignalE(OAIResponseMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectPublishSignalError(OAIResponseMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectUpdateSignalError() instead")
    void privateProjectUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectsListSignalError() instead")
    void privateProjectsListSignalE(QList<OAIProjectPrivate> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectsListSignalError(QList<OAIProjectPrivate> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectsSearchSignalError() instead")
    void privateProjectsSearchSignalE(QList<OAIProjectPrivate> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectsSearchSignalError(QList<OAIProjectPrivate> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectArticlesSignalError() instead")
    void projectArticlesSignalE(QList<OAIArticle> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectArticlesSignalError(QList<OAIArticle> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectDetailsSignalError() instead")
    void projectDetailsSignalE(OAIProjectComplete summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectDetailsSignalError(OAIProjectComplete summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsListSignalError() instead")
    void projectsListSignalE(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsListSignalError(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsSearchSignalError() instead")
    void projectsSearchSignalE(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsSearchSignalError(QList<OAIProject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use privateProjectArticleDeleteSignalErrorFull() instead")
    void privateProjectArticleDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectArticleDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectArticleDetailsSignalErrorFull() instead")
    void privateProjectArticleDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectArticleDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectArticleFileSignalErrorFull() instead")
    void privateProjectArticleFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectArticleFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectArticleFilesSignalErrorFull() instead")
    void privateProjectArticleFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectArticleFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectArticlesCreateSignalErrorFull() instead")
    void privateProjectArticlesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectArticlesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectArticlesListSignalErrorFull() instead")
    void privateProjectArticlesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectArticlesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectCollaboratorDeleteSignalErrorFull() instead")
    void privateProjectCollaboratorDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectCollaboratorDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectCollaboratorsInviteSignalErrorFull() instead")
    void privateProjectCollaboratorsInviteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectCollaboratorsInviteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectCollaboratorsListSignalErrorFull() instead")
    void privateProjectCollaboratorsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectCollaboratorsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectCreateSignalErrorFull() instead")
    void privateProjectCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectDeleteSignalErrorFull() instead")
    void privateProjectDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectDetailsSignalErrorFull() instead")
    void privateProjectDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectLeaveSignalErrorFull() instead")
    void privateProjectLeaveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectLeaveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectNoteSignalErrorFull() instead")
    void privateProjectNoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectNoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectNoteDeleteSignalErrorFull() instead")
    void privateProjectNoteDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectNoteDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectNoteUpdateSignalErrorFull() instead")
    void privateProjectNoteUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectNoteUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectNotesCreateSignalErrorFull() instead")
    void privateProjectNotesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectNotesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectNotesListSignalErrorFull() instead")
    void privateProjectNotesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectNotesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectPublishSignalErrorFull() instead")
    void privateProjectPublishSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectPublishSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectUpdateSignalErrorFull() instead")
    void privateProjectUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectsListSignalErrorFull() instead")
    void privateProjectsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateProjectsSearchSignalErrorFull() instead")
    void privateProjectsSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateProjectsSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectArticlesSignalErrorFull() instead")
    void projectArticlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectArticlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectDetailsSignalErrorFull() instead")
    void projectDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsListSignalErrorFull() instead")
    void projectsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsSearchSignalErrorFull() instead")
    void projectsSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
