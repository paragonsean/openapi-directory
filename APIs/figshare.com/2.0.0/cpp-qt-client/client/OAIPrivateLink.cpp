/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateLink::OAIPrivateLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateLink::OAIPrivateLink() {
    this->initializeModel();
}

OAIPrivateLink::~OAIPrivateLink() {}

void OAIPrivateLink::initializeModel() {

    m_expires_date_isSet = false;
    m_expires_date_isValid = false;

    m_html_location_isSet = false;
    m_html_location_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;
}

void OAIPrivateLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateLink::fromJsonObject(QJsonObject json) {

    m_expires_date_isValid = ::OpenAPI::fromJsonValue(m_expires_date, json[QString("expires_date")]);
    m_expires_date_isSet = !json[QString("expires_date")].isNull() && m_expires_date_isValid;

    m_html_location_isValid = ::OpenAPI::fromJsonValue(m_html_location, json[QString("html_location")]);
    m_html_location_isSet = !json[QString("html_location")].isNull() && m_html_location_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;
}

QString OAIPrivateLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateLink::asJsonObject() const {
    QJsonObject obj;
    if (m_expires_date_isSet) {
        obj.insert(QString("expires_date"), ::OpenAPI::toJsonValue(m_expires_date));
    }
    if (m_html_location_isSet) {
        obj.insert(QString("html_location"), ::OpenAPI::toJsonValue(m_html_location));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    return obj;
}

QString OAIPrivateLink::getExpiresDate() const {
    return m_expires_date;
}
void OAIPrivateLink::setExpiresDate(const QString &expires_date) {
    m_expires_date = expires_date;
    m_expires_date_isSet = true;
}

bool OAIPrivateLink::is_expires_date_Set() const{
    return m_expires_date_isSet;
}

bool OAIPrivateLink::is_expires_date_Valid() const{
    return m_expires_date_isValid;
}

QString OAIPrivateLink::getHtmlLocation() const {
    return m_html_location;
}
void OAIPrivateLink::setHtmlLocation(const QString &html_location) {
    m_html_location = html_location;
    m_html_location_isSet = true;
}

bool OAIPrivateLink::is_html_location_Set() const{
    return m_html_location_isSet;
}

bool OAIPrivateLink::is_html_location_Valid() const{
    return m_html_location_isValid;
}

QString OAIPrivateLink::getId() const {
    return m_id;
}
void OAIPrivateLink::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPrivateLink::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPrivateLink::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPrivateLink::isIsActive() const {
    return m_is_active;
}
void OAIPrivateLink::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIPrivateLink::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIPrivateLink::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIPrivateLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expires_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expires_date_isValid && m_html_location_isValid && m_id_isValid && m_is_active_isValid && true;
}

} // namespace OpenAPI
