/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArticleComplete.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArticleComplete::OAIArticleComplete(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArticleComplete::OAIArticleComplete() {
    this->initializeModel();
}

OAIArticleComplete::~OAIArticleComplete() {}

void OAIArticleComplete::initializeModel() {

    m_authors_isSet = false;
    m_authors_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_embargo_options_isSet = false;
    m_embargo_options_isValid = false;

    m_figshare_url_isSet = false;
    m_figshare_url_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_resource_doi_isSet = false;
    m_resource_doi_isValid = false;

    m_resource_title_isSet = false;
    m_resource_title_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_citation_isSet = false;
    m_citation_isValid = false;

    m_confidential_reason_isSet = false;
    m_confidential_reason_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_embargo_date_isSet = false;
    m_embargo_date_isValid = false;

    m_embargo_reason_isSet = false;
    m_embargo_reason_isValid = false;

    m_embargo_title_isSet = false;
    m_embargo_title_isValid = false;

    m_embargo_type_isSet = false;
    m_embargo_type_isValid = false;

    m_funding_isSet = false;
    m_funding_isValid = false;

    m_funding_list_isSet = false;
    m_funding_list_isValid = false;

    m_has_linked_file_isSet = false;
    m_has_linked_file_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_confidential_isSet = false;
    m_is_confidential_isValid = false;

    m_is_embargoed_isSet = false;
    m_is_embargoed_isValid = false;

    m_is_metadata_record_isSet = false;
    m_is_metadata_record_isValid = false;

    m_is_public_isSet = false;
    m_is_public_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_metadata_reason_isSet = false;
    m_metadata_reason_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_defined_type_isSet = false;
    m_defined_type_isValid = false;

    m_defined_type_name_isSet = false;
    m_defined_type_name_isValid = false;

    m_doi_isSet = false;
    m_doi_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_handle_isSet = false;
    m_handle_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_published_date_isSet = false;
    m_published_date_isValid = false;

    m_thumb_isSet = false;
    m_thumb_isValid = false;

    m_timeline_isSet = false;
    m_timeline_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_url_private_api_isSet = false;
    m_url_private_api_isValid = false;

    m_url_private_html_isSet = false;
    m_url_private_html_isValid = false;

    m_url_public_api_isSet = false;
    m_url_public_api_isValid = false;

    m_url_public_html_isSet = false;
    m_url_public_html_isValid = false;
}

void OAIArticleComplete::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArticleComplete::fromJsonObject(QJsonObject json) {

    m_authors_isValid = ::OpenAPI::fromJsonValue(m_authors, json[QString("authors")]);
    m_authors_isSet = !json[QString("authors")].isNull() && m_authors_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_embargo_options_isValid = ::OpenAPI::fromJsonValue(m_embargo_options, json[QString("embargo_options")]);
    m_embargo_options_isSet = !json[QString("embargo_options")].isNull() && m_embargo_options_isValid;

    m_figshare_url_isValid = ::OpenAPI::fromJsonValue(m_figshare_url, json[QString("figshare_url")]);
    m_figshare_url_isSet = !json[QString("figshare_url")].isNull() && m_figshare_url_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_resource_doi_isValid = ::OpenAPI::fromJsonValue(m_resource_doi, json[QString("resource_doi")]);
    m_resource_doi_isSet = !json[QString("resource_doi")].isNull() && m_resource_doi_isValid;

    m_resource_title_isValid = ::OpenAPI::fromJsonValue(m_resource_title, json[QString("resource_title")]);
    m_resource_title_isSet = !json[QString("resource_title")].isNull() && m_resource_title_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_citation_isValid = ::OpenAPI::fromJsonValue(m_citation, json[QString("citation")]);
    m_citation_isSet = !json[QString("citation")].isNull() && m_citation_isValid;

    m_confidential_reason_isValid = ::OpenAPI::fromJsonValue(m_confidential_reason, json[QString("confidential_reason")]);
    m_confidential_reason_isSet = !json[QString("confidential_reason")].isNull() && m_confidential_reason_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("created_date")]);
    m_created_date_isSet = !json[QString("created_date")].isNull() && m_created_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_embargo_date_isValid = ::OpenAPI::fromJsonValue(m_embargo_date, json[QString("embargo_date")]);
    m_embargo_date_isSet = !json[QString("embargo_date")].isNull() && m_embargo_date_isValid;

    m_embargo_reason_isValid = ::OpenAPI::fromJsonValue(m_embargo_reason, json[QString("embargo_reason")]);
    m_embargo_reason_isSet = !json[QString("embargo_reason")].isNull() && m_embargo_reason_isValid;

    m_embargo_title_isValid = ::OpenAPI::fromJsonValue(m_embargo_title, json[QString("embargo_title")]);
    m_embargo_title_isSet = !json[QString("embargo_title")].isNull() && m_embargo_title_isValid;

    m_embargo_type_isValid = ::OpenAPI::fromJsonValue(m_embargo_type, json[QString("embargo_type")]);
    m_embargo_type_isSet = !json[QString("embargo_type")].isNull() && m_embargo_type_isValid;

    m_funding_isValid = ::OpenAPI::fromJsonValue(m_funding, json[QString("funding")]);
    m_funding_isSet = !json[QString("funding")].isNull() && m_funding_isValid;

    m_funding_list_isValid = ::OpenAPI::fromJsonValue(m_funding_list, json[QString("funding_list")]);
    m_funding_list_isSet = !json[QString("funding_list")].isNull() && m_funding_list_isValid;

    m_has_linked_file_isValid = ::OpenAPI::fromJsonValue(m_has_linked_file, json[QString("has_linked_file")]);
    m_has_linked_file_isSet = !json[QString("has_linked_file")].isNull() && m_has_linked_file_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_is_confidential_isValid = ::OpenAPI::fromJsonValue(m_is_confidential, json[QString("is_confidential")]);
    m_is_confidential_isSet = !json[QString("is_confidential")].isNull() && m_is_confidential_isValid;

    m_is_embargoed_isValid = ::OpenAPI::fromJsonValue(m_is_embargoed, json[QString("is_embargoed")]);
    m_is_embargoed_isSet = !json[QString("is_embargoed")].isNull() && m_is_embargoed_isValid;

    m_is_metadata_record_isValid = ::OpenAPI::fromJsonValue(m_is_metadata_record, json[QString("is_metadata_record")]);
    m_is_metadata_record_isSet = !json[QString("is_metadata_record")].isNull() && m_is_metadata_record_isValid;

    m_is_public_isValid = ::OpenAPI::fromJsonValue(m_is_public, json[QString("is_public")]);
    m_is_public_isSet = !json[QString("is_public")].isNull() && m_is_public_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_metadata_reason_isValid = ::OpenAPI::fromJsonValue(m_metadata_reason, json[QString("metadata_reason")]);
    m_metadata_reason_isSet = !json[QString("metadata_reason")].isNull() && m_metadata_reason_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modified_date")]);
    m_modified_date_isSet = !json[QString("modified_date")].isNull() && m_modified_date_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_defined_type_isValid = ::OpenAPI::fromJsonValue(m_defined_type, json[QString("defined_type")]);
    m_defined_type_isSet = !json[QString("defined_type")].isNull() && m_defined_type_isValid;

    m_defined_type_name_isValid = ::OpenAPI::fromJsonValue(m_defined_type_name, json[QString("defined_type_name")]);
    m_defined_type_name_isSet = !json[QString("defined_type_name")].isNull() && m_defined_type_name_isValid;

    m_doi_isValid = ::OpenAPI::fromJsonValue(m_doi, json[QString("doi")]);
    m_doi_isSet = !json[QString("doi")].isNull() && m_doi_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_handle_isValid = ::OpenAPI::fromJsonValue(m_handle, json[QString("handle")]);
    m_handle_isSet = !json[QString("handle")].isNull() && m_handle_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_published_date_isValid = ::OpenAPI::fromJsonValue(m_published_date, json[QString("published_date")]);
    m_published_date_isSet = !json[QString("published_date")].isNull() && m_published_date_isValid;

    m_thumb_isValid = ::OpenAPI::fromJsonValue(m_thumb, json[QString("thumb")]);
    m_thumb_isSet = !json[QString("thumb")].isNull() && m_thumb_isValid;

    m_timeline_isValid = ::OpenAPI::fromJsonValue(m_timeline, json[QString("timeline")]);
    m_timeline_isSet = !json[QString("timeline")].isNull() && m_timeline_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_url_private_api_isValid = ::OpenAPI::fromJsonValue(m_url_private_api, json[QString("url_private_api")]);
    m_url_private_api_isSet = !json[QString("url_private_api")].isNull() && m_url_private_api_isValid;

    m_url_private_html_isValid = ::OpenAPI::fromJsonValue(m_url_private_html, json[QString("url_private_html")]);
    m_url_private_html_isSet = !json[QString("url_private_html")].isNull() && m_url_private_html_isValid;

    m_url_public_api_isValid = ::OpenAPI::fromJsonValue(m_url_public_api, json[QString("url_public_api")]);
    m_url_public_api_isSet = !json[QString("url_public_api")].isNull() && m_url_public_api_isValid;

    m_url_public_html_isValid = ::OpenAPI::fromJsonValue(m_url_public_html, json[QString("url_public_html")]);
    m_url_public_html_isSet = !json[QString("url_public_html")].isNull() && m_url_public_html_isValid;
}

QString OAIArticleComplete::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArticleComplete::asJsonObject() const {
    QJsonObject obj;
    if (m_authors.size() > 0) {
        obj.insert(QString("authors"), ::OpenAPI::toJsonValue(m_authors));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_embargo_options.size() > 0) {
        obj.insert(QString("embargo_options"), ::OpenAPI::toJsonValue(m_embargo_options));
    }
    if (m_figshare_url_isSet) {
        obj.insert(QString("figshare_url"), ::OpenAPI::toJsonValue(m_figshare_url));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_resource_doi_isSet) {
        obj.insert(QString("resource_doi"), ::OpenAPI::toJsonValue(m_resource_doi));
    }
    if (m_resource_title_isSet) {
        obj.insert(QString("resource_title"), ::OpenAPI::toJsonValue(m_resource_title));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_citation_isSet) {
        obj.insert(QString("citation"), ::OpenAPI::toJsonValue(m_citation));
    }
    if (m_confidential_reason_isSet) {
        obj.insert(QString("confidential_reason"), ::OpenAPI::toJsonValue(m_confidential_reason));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("created_date"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_embargo_date_isSet) {
        obj.insert(QString("embargo_date"), ::OpenAPI::toJsonValue(m_embargo_date));
    }
    if (m_embargo_reason_isSet) {
        obj.insert(QString("embargo_reason"), ::OpenAPI::toJsonValue(m_embargo_reason));
    }
    if (m_embargo_title_isSet) {
        obj.insert(QString("embargo_title"), ::OpenAPI::toJsonValue(m_embargo_title));
    }
    if (m_embargo_type_isSet) {
        obj.insert(QString("embargo_type"), ::OpenAPI::toJsonValue(m_embargo_type));
    }
    if (m_funding_isSet) {
        obj.insert(QString("funding"), ::OpenAPI::toJsonValue(m_funding));
    }
    if (m_funding_list.size() > 0) {
        obj.insert(QString("funding_list"), ::OpenAPI::toJsonValue(m_funding_list));
    }
    if (m_has_linked_file_isSet) {
        obj.insert(QString("has_linked_file"), ::OpenAPI::toJsonValue(m_has_linked_file));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_confidential_isSet) {
        obj.insert(QString("is_confidential"), ::OpenAPI::toJsonValue(m_is_confidential));
    }
    if (m_is_embargoed_isSet) {
        obj.insert(QString("is_embargoed"), ::OpenAPI::toJsonValue(m_is_embargoed));
    }
    if (m_is_metadata_record_isSet) {
        obj.insert(QString("is_metadata_record"), ::OpenAPI::toJsonValue(m_is_metadata_record));
    }
    if (m_is_public_isSet) {
        obj.insert(QString("is_public"), ::OpenAPI::toJsonValue(m_is_public));
    }
    if (m_license.isSet()) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_metadata_reason_isSet) {
        obj.insert(QString("metadata_reason"), ::OpenAPI::toJsonValue(m_metadata_reason));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modified_date"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_references.size() > 0) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(m_references));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_defined_type_isSet) {
        obj.insert(QString("defined_type"), ::OpenAPI::toJsonValue(m_defined_type));
    }
    if (m_defined_type_name_isSet) {
        obj.insert(QString("defined_type_name"), ::OpenAPI::toJsonValue(m_defined_type_name));
    }
    if (m_doi_isSet) {
        obj.insert(QString("doi"), ::OpenAPI::toJsonValue(m_doi));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_handle_isSet) {
        obj.insert(QString("handle"), ::OpenAPI::toJsonValue(m_handle));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_published_date_isSet) {
        obj.insert(QString("published_date"), ::OpenAPI::toJsonValue(m_published_date));
    }
    if (m_thumb_isSet) {
        obj.insert(QString("thumb"), ::OpenAPI::toJsonValue(m_thumb));
    }
    if (m_timeline.isSet()) {
        obj.insert(QString("timeline"), ::OpenAPI::toJsonValue(m_timeline));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_url_private_api_isSet) {
        obj.insert(QString("url_private_api"), ::OpenAPI::toJsonValue(m_url_private_api));
    }
    if (m_url_private_html_isSet) {
        obj.insert(QString("url_private_html"), ::OpenAPI::toJsonValue(m_url_private_html));
    }
    if (m_url_public_api_isSet) {
        obj.insert(QString("url_public_api"), ::OpenAPI::toJsonValue(m_url_public_api));
    }
    if (m_url_public_html_isSet) {
        obj.insert(QString("url_public_html"), ::OpenAPI::toJsonValue(m_url_public_html));
    }
    return obj;
}

QList<OAIAuthor> OAIArticleComplete::getAuthors() const {
    return m_authors;
}
void OAIArticleComplete::setAuthors(const QList<OAIAuthor> &authors) {
    m_authors = authors;
    m_authors_isSet = true;
}

bool OAIArticleComplete::is_authors_Set() const{
    return m_authors_isSet;
}

bool OAIArticleComplete::is_authors_Valid() const{
    return m_authors_isValid;
}

QList<OAICustomArticleField> OAIArticleComplete::getCustomFields() const {
    return m_custom_fields;
}
void OAIArticleComplete::setCustomFields(const QList<OAICustomArticleField> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIArticleComplete::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIArticleComplete::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QList<OAIGroupEmbargoOptions> OAIArticleComplete::getEmbargoOptions() const {
    return m_embargo_options;
}
void OAIArticleComplete::setEmbargoOptions(const QList<OAIGroupEmbargoOptions> &embargo_options) {
    m_embargo_options = embargo_options;
    m_embargo_options_isSet = true;
}

bool OAIArticleComplete::is_embargo_options_Set() const{
    return m_embargo_options_isSet;
}

bool OAIArticleComplete::is_embargo_options_Valid() const{
    return m_embargo_options_isValid;
}

QString OAIArticleComplete::getFigshareUrl() const {
    return m_figshare_url;
}
void OAIArticleComplete::setFigshareUrl(const QString &figshare_url) {
    m_figshare_url = figshare_url;
    m_figshare_url_isSet = true;
}

bool OAIArticleComplete::is_figshare_url_Set() const{
    return m_figshare_url_isSet;
}

bool OAIArticleComplete::is_figshare_url_Valid() const{
    return m_figshare_url_isValid;
}

QList<OAIPublicFile> OAIArticleComplete::getFiles() const {
    return m_files;
}
void OAIArticleComplete::setFiles(const QList<OAIPublicFile> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIArticleComplete::is_files_Set() const{
    return m_files_isSet;
}

bool OAIArticleComplete::is_files_Valid() const{
    return m_files_isValid;
}

QString OAIArticleComplete::getResourceDoi() const {
    return m_resource_doi;
}
void OAIArticleComplete::setResourceDoi(const QString &resource_doi) {
    m_resource_doi = resource_doi;
    m_resource_doi_isSet = true;
}

bool OAIArticleComplete::is_resource_doi_Set() const{
    return m_resource_doi_isSet;
}

bool OAIArticleComplete::is_resource_doi_Valid() const{
    return m_resource_doi_isValid;
}

QString OAIArticleComplete::getResourceTitle() const {
    return m_resource_title;
}
void OAIArticleComplete::setResourceTitle(const QString &resource_title) {
    m_resource_title = resource_title;
    m_resource_title_isSet = true;
}

bool OAIArticleComplete::is_resource_title_Set() const{
    return m_resource_title_isSet;
}

bool OAIArticleComplete::is_resource_title_Valid() const{
    return m_resource_title_isValid;
}

QList<OAICategory> OAIArticleComplete::getCategories() const {
    return m_categories;
}
void OAIArticleComplete::setCategories(const QList<OAICategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIArticleComplete::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIArticleComplete::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIArticleComplete::getCitation() const {
    return m_citation;
}
void OAIArticleComplete::setCitation(const QString &citation) {
    m_citation = citation;
    m_citation_isSet = true;
}

bool OAIArticleComplete::is_citation_Set() const{
    return m_citation_isSet;
}

bool OAIArticleComplete::is_citation_Valid() const{
    return m_citation_isValid;
}

QString OAIArticleComplete::getConfidentialReason() const {
    return m_confidential_reason;
}
void OAIArticleComplete::setConfidentialReason(const QString &confidential_reason) {
    m_confidential_reason = confidential_reason;
    m_confidential_reason_isSet = true;
}

bool OAIArticleComplete::is_confidential_reason_Set() const{
    return m_confidential_reason_isSet;
}

bool OAIArticleComplete::is_confidential_reason_Valid() const{
    return m_confidential_reason_isValid;
}

QString OAIArticleComplete::getCreatedDate() const {
    return m_created_date;
}
void OAIArticleComplete::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIArticleComplete::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIArticleComplete::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIArticleComplete::getDescription() const {
    return m_description;
}
void OAIArticleComplete::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIArticleComplete::is_description_Set() const{
    return m_description_isSet;
}

bool OAIArticleComplete::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIArticleComplete::getEmbargoDate() const {
    return m_embargo_date;
}
void OAIArticleComplete::setEmbargoDate(const QString &embargo_date) {
    m_embargo_date = embargo_date;
    m_embargo_date_isSet = true;
}

bool OAIArticleComplete::is_embargo_date_Set() const{
    return m_embargo_date_isSet;
}

bool OAIArticleComplete::is_embargo_date_Valid() const{
    return m_embargo_date_isValid;
}

QString OAIArticleComplete::getEmbargoReason() const {
    return m_embargo_reason;
}
void OAIArticleComplete::setEmbargoReason(const QString &embargo_reason) {
    m_embargo_reason = embargo_reason;
    m_embargo_reason_isSet = true;
}

bool OAIArticleComplete::is_embargo_reason_Set() const{
    return m_embargo_reason_isSet;
}

bool OAIArticleComplete::is_embargo_reason_Valid() const{
    return m_embargo_reason_isValid;
}

QString OAIArticleComplete::getEmbargoTitle() const {
    return m_embargo_title;
}
void OAIArticleComplete::setEmbargoTitle(const QString &embargo_title) {
    m_embargo_title = embargo_title;
    m_embargo_title_isSet = true;
}

bool OAIArticleComplete::is_embargo_title_Set() const{
    return m_embargo_title_isSet;
}

bool OAIArticleComplete::is_embargo_title_Valid() const{
    return m_embargo_title_isValid;
}

QString OAIArticleComplete::getEmbargoType() const {
    return m_embargo_type;
}
void OAIArticleComplete::setEmbargoType(const QString &embargo_type) {
    m_embargo_type = embargo_type;
    m_embargo_type_isSet = true;
}

bool OAIArticleComplete::is_embargo_type_Set() const{
    return m_embargo_type_isSet;
}

bool OAIArticleComplete::is_embargo_type_Valid() const{
    return m_embargo_type_isValid;
}

QString OAIArticleComplete::getFunding() const {
    return m_funding;
}
void OAIArticleComplete::setFunding(const QString &funding) {
    m_funding = funding;
    m_funding_isSet = true;
}

bool OAIArticleComplete::is_funding_Set() const{
    return m_funding_isSet;
}

bool OAIArticleComplete::is_funding_Valid() const{
    return m_funding_isValid;
}

QList<qint32> OAIArticleComplete::getFundingList() const {
    return m_funding_list;
}
void OAIArticleComplete::setFundingList(const QList<qint32> &funding_list) {
    m_funding_list = funding_list;
    m_funding_list_isSet = true;
}

bool OAIArticleComplete::is_funding_list_Set() const{
    return m_funding_list_isSet;
}

bool OAIArticleComplete::is_funding_list_Valid() const{
    return m_funding_list_isValid;
}

bool OAIArticleComplete::isHasLinkedFile() const {
    return m_has_linked_file;
}
void OAIArticleComplete::setHasLinkedFile(const bool &has_linked_file) {
    m_has_linked_file = has_linked_file;
    m_has_linked_file_isSet = true;
}

bool OAIArticleComplete::is_has_linked_file_Set() const{
    return m_has_linked_file_isSet;
}

bool OAIArticleComplete::is_has_linked_file_Valid() const{
    return m_has_linked_file_isValid;
}

bool OAIArticleComplete::isIsActive() const {
    return m_is_active;
}
void OAIArticleComplete::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIArticleComplete::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIArticleComplete::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIArticleComplete::isIsConfidential() const {
    return m_is_confidential;
}
void OAIArticleComplete::setIsConfidential(const bool &is_confidential) {
    m_is_confidential = is_confidential;
    m_is_confidential_isSet = true;
}

bool OAIArticleComplete::is_is_confidential_Set() const{
    return m_is_confidential_isSet;
}

bool OAIArticleComplete::is_is_confidential_Valid() const{
    return m_is_confidential_isValid;
}

bool OAIArticleComplete::isIsEmbargoed() const {
    return m_is_embargoed;
}
void OAIArticleComplete::setIsEmbargoed(const bool &is_embargoed) {
    m_is_embargoed = is_embargoed;
    m_is_embargoed_isSet = true;
}

bool OAIArticleComplete::is_is_embargoed_Set() const{
    return m_is_embargoed_isSet;
}

bool OAIArticleComplete::is_is_embargoed_Valid() const{
    return m_is_embargoed_isValid;
}

bool OAIArticleComplete::isIsMetadataRecord() const {
    return m_is_metadata_record;
}
void OAIArticleComplete::setIsMetadataRecord(const bool &is_metadata_record) {
    m_is_metadata_record = is_metadata_record;
    m_is_metadata_record_isSet = true;
}

bool OAIArticleComplete::is_is_metadata_record_Set() const{
    return m_is_metadata_record_isSet;
}

bool OAIArticleComplete::is_is_metadata_record_Valid() const{
    return m_is_metadata_record_isValid;
}

bool OAIArticleComplete::isIsPublic() const {
    return m_is_public;
}
void OAIArticleComplete::setIsPublic(const bool &is_public) {
    m_is_public = is_public;
    m_is_public_isSet = true;
}

bool OAIArticleComplete::is_is_public_Set() const{
    return m_is_public_isSet;
}

bool OAIArticleComplete::is_is_public_Valid() const{
    return m_is_public_isValid;
}

OAILicense OAIArticleComplete::getLicense() const {
    return m_license;
}
void OAIArticleComplete::setLicense(const OAILicense &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIArticleComplete::is_license_Set() const{
    return m_license_isSet;
}

bool OAIArticleComplete::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIArticleComplete::getMetadataReason() const {
    return m_metadata_reason;
}
void OAIArticleComplete::setMetadataReason(const QString &metadata_reason) {
    m_metadata_reason = metadata_reason;
    m_metadata_reason_isSet = true;
}

bool OAIArticleComplete::is_metadata_reason_Set() const{
    return m_metadata_reason_isSet;
}

bool OAIArticleComplete::is_metadata_reason_Valid() const{
    return m_metadata_reason_isValid;
}

QString OAIArticleComplete::getModifiedDate() const {
    return m_modified_date;
}
void OAIArticleComplete::setModifiedDate(const QString &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAIArticleComplete::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAIArticleComplete::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QList<QString> OAIArticleComplete::getReferences() const {
    return m_references;
}
void OAIArticleComplete::setReferences(const QList<QString> &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAIArticleComplete::is_references_Set() const{
    return m_references_isSet;
}

bool OAIArticleComplete::is_references_Valid() const{
    return m_references_isValid;
}

qint64 OAIArticleComplete::getSize() const {
    return m_size;
}
void OAIArticleComplete::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIArticleComplete::is_size_Set() const{
    return m_size_isSet;
}

bool OAIArticleComplete::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIArticleComplete::getStatus() const {
    return m_status;
}
void OAIArticleComplete::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIArticleComplete::is_status_Set() const{
    return m_status_isSet;
}

bool OAIArticleComplete::is_status_Valid() const{
    return m_status_isValid;
}

QList<QString> OAIArticleComplete::getTags() const {
    return m_tags;
}
void OAIArticleComplete::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIArticleComplete::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIArticleComplete::is_tags_Valid() const{
    return m_tags_isValid;
}

qint64 OAIArticleComplete::getVersion() const {
    return m_version;
}
void OAIArticleComplete::setVersion(const qint64 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIArticleComplete::is_version_Set() const{
    return m_version_isSet;
}

bool OAIArticleComplete::is_version_Valid() const{
    return m_version_isValid;
}

qint64 OAIArticleComplete::getDefinedType() const {
    return m_defined_type;
}
void OAIArticleComplete::setDefinedType(const qint64 &defined_type) {
    m_defined_type = defined_type;
    m_defined_type_isSet = true;
}

bool OAIArticleComplete::is_defined_type_Set() const{
    return m_defined_type_isSet;
}

bool OAIArticleComplete::is_defined_type_Valid() const{
    return m_defined_type_isValid;
}

QString OAIArticleComplete::getDefinedTypeName() const {
    return m_defined_type_name;
}
void OAIArticleComplete::setDefinedTypeName(const QString &defined_type_name) {
    m_defined_type_name = defined_type_name;
    m_defined_type_name_isSet = true;
}

bool OAIArticleComplete::is_defined_type_name_Set() const{
    return m_defined_type_name_isSet;
}

bool OAIArticleComplete::is_defined_type_name_Valid() const{
    return m_defined_type_name_isValid;
}

QString OAIArticleComplete::getDoi() const {
    return m_doi;
}
void OAIArticleComplete::setDoi(const QString &doi) {
    m_doi = doi;
    m_doi_isSet = true;
}

bool OAIArticleComplete::is_doi_Set() const{
    return m_doi_isSet;
}

bool OAIArticleComplete::is_doi_Valid() const{
    return m_doi_isValid;
}

double OAIArticleComplete::getGroupId() const {
    return m_group_id;
}
void OAIArticleComplete::setGroupId(const double &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIArticleComplete::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIArticleComplete::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIArticleComplete::getHandle() const {
    return m_handle;
}
void OAIArticleComplete::setHandle(const QString &handle) {
    m_handle = handle;
    m_handle_isSet = true;
}

bool OAIArticleComplete::is_handle_Set() const{
    return m_handle_isSet;
}

bool OAIArticleComplete::is_handle_Valid() const{
    return m_handle_isValid;
}

qint64 OAIArticleComplete::getId() const {
    return m_id;
}
void OAIArticleComplete::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIArticleComplete::is_id_Set() const{
    return m_id_isSet;
}

bool OAIArticleComplete::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIArticleComplete::getPublishedDate() const {
    return m_published_date;
}
void OAIArticleComplete::setPublishedDate(const QString &published_date) {
    m_published_date = published_date;
    m_published_date_isSet = true;
}

bool OAIArticleComplete::is_published_date_Set() const{
    return m_published_date_isSet;
}

bool OAIArticleComplete::is_published_date_Valid() const{
    return m_published_date_isValid;
}

QString OAIArticleComplete::getThumb() const {
    return m_thumb;
}
void OAIArticleComplete::setThumb(const QString &thumb) {
    m_thumb = thumb;
    m_thumb_isSet = true;
}

bool OAIArticleComplete::is_thumb_Set() const{
    return m_thumb_isSet;
}

bool OAIArticleComplete::is_thumb_Valid() const{
    return m_thumb_isValid;
}

OAITimeline OAIArticleComplete::getTimeline() const {
    return m_timeline;
}
void OAIArticleComplete::setTimeline(const OAITimeline &timeline) {
    m_timeline = timeline;
    m_timeline_isSet = true;
}

bool OAIArticleComplete::is_timeline_Set() const{
    return m_timeline_isSet;
}

bool OAIArticleComplete::is_timeline_Valid() const{
    return m_timeline_isValid;
}

QString OAIArticleComplete::getTitle() const {
    return m_title;
}
void OAIArticleComplete::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIArticleComplete::is_title_Set() const{
    return m_title_isSet;
}

bool OAIArticleComplete::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIArticleComplete::getUrl() const {
    return m_url;
}
void OAIArticleComplete::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIArticleComplete::is_url_Set() const{
    return m_url_isSet;
}

bool OAIArticleComplete::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIArticleComplete::getUrlPrivateApi() const {
    return m_url_private_api;
}
void OAIArticleComplete::setUrlPrivateApi(const QString &url_private_api) {
    m_url_private_api = url_private_api;
    m_url_private_api_isSet = true;
}

bool OAIArticleComplete::is_url_private_api_Set() const{
    return m_url_private_api_isSet;
}

bool OAIArticleComplete::is_url_private_api_Valid() const{
    return m_url_private_api_isValid;
}

QString OAIArticleComplete::getUrlPrivateHtml() const {
    return m_url_private_html;
}
void OAIArticleComplete::setUrlPrivateHtml(const QString &url_private_html) {
    m_url_private_html = url_private_html;
    m_url_private_html_isSet = true;
}

bool OAIArticleComplete::is_url_private_html_Set() const{
    return m_url_private_html_isSet;
}

bool OAIArticleComplete::is_url_private_html_Valid() const{
    return m_url_private_html_isValid;
}

QString OAIArticleComplete::getUrlPublicApi() const {
    return m_url_public_api;
}
void OAIArticleComplete::setUrlPublicApi(const QString &url_public_api) {
    m_url_public_api = url_public_api;
    m_url_public_api_isSet = true;
}

bool OAIArticleComplete::is_url_public_api_Set() const{
    return m_url_public_api_isSet;
}

bool OAIArticleComplete::is_url_public_api_Valid() const{
    return m_url_public_api_isValid;
}

QString OAIArticleComplete::getUrlPublicHtml() const {
    return m_url_public_html;
}
void OAIArticleComplete::setUrlPublicHtml(const QString &url_public_html) {
    m_url_public_html = url_public_html;
    m_url_public_html_isSet = true;
}

bool OAIArticleComplete::is_url_public_html_Set() const{
    return m_url_public_html_isSet;
}

bool OAIArticleComplete::is_url_public_html_Valid() const{
    return m_url_public_html_isValid;
}

bool OAIArticleComplete::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_embargo_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_figshare_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_doi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_citation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidential_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embargo_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embargo_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embargo_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embargo_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_linked_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_confidential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_embargoed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_metadata_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defined_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defined_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_private_api_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_private_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_public_api_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_public_html_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArticleComplete::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authors_isValid && m_custom_fields_isValid && m_embargo_options_isValid && m_figshare_url_isValid && m_files_isValid && m_resource_doi_isValid && m_resource_title_isValid && m_categories_isValid && m_citation_isValid && m_confidential_reason_isValid && m_created_date_isValid && m_description_isValid && m_embargo_date_isValid && m_embargo_reason_isValid && m_embargo_title_isValid && m_embargo_type_isValid && m_funding_isValid && m_funding_list_isValid && m_has_linked_file_isValid && m_is_active_isValid && m_is_confidential_isValid && m_is_embargoed_isValid && m_is_metadata_record_isValid && m_is_public_isValid && m_license_isValid && m_metadata_reason_isValid && m_modified_date_isValid && m_references_isValid && m_size_isValid && m_status_isValid && m_tags_isValid && m_version_isValid && m_defined_type_isValid && m_defined_type_name_isValid && m_doi_isValid && m_group_id_isValid && m_handle_isValid && m_id_isValid && m_published_date_isValid && m_thumb_isValid && m_timeline_isValid && m_title_isValid && m_url_isValid && m_url_private_api_isValid && m_url_private_html_isValid && m_url_public_api_isValid && m_url_public_html_isValid && true;
}

} // namespace OpenAPI
