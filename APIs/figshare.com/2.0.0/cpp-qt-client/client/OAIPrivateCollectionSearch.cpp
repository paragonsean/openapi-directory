/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateCollectionSearch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateCollectionSearch::OAIPrivateCollectionSearch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateCollectionSearch::OAIPrivateCollectionSearch() {
    this->initializeModel();
}

OAIPrivateCollectionSearch::~OAIPrivateCollectionSearch() {}

void OAIPrivateCollectionSearch::initializeModel() {

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_doi_isSet = false;
    m_doi_isValid = false;

    m_handle_isSet = false;
    m_handle_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_resource_doi_isSet = false;
    m_resource_doi_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_institution_isSet = false;
    m_institution_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_modified_since_isSet = false;
    m_modified_since_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_order_direction_isSet = false;
    m_order_direction_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_published_since_isSet = false;
    m_published_since_isValid = false;

    m_search_for_isSet = false;
    m_search_for_isValid = false;
}

void OAIPrivateCollectionSearch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateCollectionSearch::fromJsonObject(QJsonObject json) {

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resource_id")]);
    m_resource_id_isSet = !json[QString("resource_id")].isNull() && m_resource_id_isValid;

    m_doi_isValid = ::OpenAPI::fromJsonValue(m_doi, json[QString("doi")]);
    m_doi_isSet = !json[QString("doi")].isNull() && m_doi_isValid;

    m_handle_isValid = ::OpenAPI::fromJsonValue(m_handle, json[QString("handle")]);
    m_handle_isSet = !json[QString("handle")].isNull() && m_handle_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_resource_doi_isValid = ::OpenAPI::fromJsonValue(m_resource_doi, json[QString("resource_doi")]);
    m_resource_doi_isSet = !json[QString("resource_doi")].isNull() && m_resource_doi_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_institution_isValid = ::OpenAPI::fromJsonValue(m_institution, json[QString("institution")]);
    m_institution_isSet = !json[QString("institution")].isNull() && m_institution_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_modified_since_isValid = ::OpenAPI::fromJsonValue(m_modified_since, json[QString("modified_since")]);
    m_modified_since_isSet = !json[QString("modified_since")].isNull() && m_modified_since_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_order_direction_isValid = ::OpenAPI::fromJsonValue(m_order_direction, json[QString("order_direction")]);
    m_order_direction_isSet = !json[QString("order_direction")].isNull() && m_order_direction_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("page_size")]);
    m_page_size_isSet = !json[QString("page_size")].isNull() && m_page_size_isValid;

    m_published_since_isValid = ::OpenAPI::fromJsonValue(m_published_since, json[QString("published_since")]);
    m_published_since_isSet = !json[QString("published_since")].isNull() && m_published_since_isValid;

    m_search_for_isValid = ::OpenAPI::fromJsonValue(m_search_for, json[QString("search_for")]);
    m_search_for_isSet = !json[QString("search_for")].isNull() && m_search_for_isValid;
}

QString OAIPrivateCollectionSearch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateCollectionSearch::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_id_isSet) {
        obj.insert(QString("resource_id"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_doi_isSet) {
        obj.insert(QString("doi"), ::OpenAPI::toJsonValue(m_doi));
    }
    if (m_handle_isSet) {
        obj.insert(QString("handle"), ::OpenAPI::toJsonValue(m_handle));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_resource_doi_isSet) {
        obj.insert(QString("resource_doi"), ::OpenAPI::toJsonValue(m_resource_doi));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_institution_isSet) {
        obj.insert(QString("institution"), ::OpenAPI::toJsonValue(m_institution));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_modified_since_isSet) {
        obj.insert(QString("modified_since"), ::OpenAPI::toJsonValue(m_modified_since));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_order_direction_isSet) {
        obj.insert(QString("order_direction"), ::OpenAPI::toJsonValue(m_order_direction));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("page_size"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_published_since_isSet) {
        obj.insert(QString("published_since"), ::OpenAPI::toJsonValue(m_published_since));
    }
    if (m_search_for_isSet) {
        obj.insert(QString("search_for"), ::OpenAPI::toJsonValue(m_search_for));
    }
    return obj;
}

QString OAIPrivateCollectionSearch::getResourceId() const {
    return m_resource_id;
}
void OAIPrivateCollectionSearch::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIPrivateCollectionSearch::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIPrivateCollectionSearch::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIPrivateCollectionSearch::getDoi() const {
    return m_doi;
}
void OAIPrivateCollectionSearch::setDoi(const QString &doi) {
    m_doi = doi;
    m_doi_isSet = true;
}

bool OAIPrivateCollectionSearch::is_doi_Set() const{
    return m_doi_isSet;
}

bool OAIPrivateCollectionSearch::is_doi_Valid() const{
    return m_doi_isValid;
}

QString OAIPrivateCollectionSearch::getHandle() const {
    return m_handle;
}
void OAIPrivateCollectionSearch::setHandle(const QString &handle) {
    m_handle = handle;
    m_handle_isSet = true;
}

bool OAIPrivateCollectionSearch::is_handle_Set() const{
    return m_handle_isSet;
}

bool OAIPrivateCollectionSearch::is_handle_Valid() const{
    return m_handle_isValid;
}

QString OAIPrivateCollectionSearch::getOrder() const {
    return m_order;
}
void OAIPrivateCollectionSearch::setOrder(const QString &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIPrivateCollectionSearch::is_order_Set() const{
    return m_order_isSet;
}

bool OAIPrivateCollectionSearch::is_order_Valid() const{
    return m_order_isValid;
}

QString OAIPrivateCollectionSearch::getResourceDoi() const {
    return m_resource_doi;
}
void OAIPrivateCollectionSearch::setResourceDoi(const QString &resource_doi) {
    m_resource_doi = resource_doi;
    m_resource_doi_isSet = true;
}

bool OAIPrivateCollectionSearch::is_resource_doi_Set() const{
    return m_resource_doi_isSet;
}

bool OAIPrivateCollectionSearch::is_resource_doi_Valid() const{
    return m_resource_doi_isValid;
}

qint32 OAIPrivateCollectionSearch::getGroup() const {
    return m_group;
}
void OAIPrivateCollectionSearch::setGroup(const qint32 &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIPrivateCollectionSearch::is_group_Set() const{
    return m_group_isSet;
}

bool OAIPrivateCollectionSearch::is_group_Valid() const{
    return m_group_isValid;
}

qint32 OAIPrivateCollectionSearch::getInstitution() const {
    return m_institution;
}
void OAIPrivateCollectionSearch::setInstitution(const qint32 &institution) {
    m_institution = institution;
    m_institution_isSet = true;
}

bool OAIPrivateCollectionSearch::is_institution_Set() const{
    return m_institution_isSet;
}

bool OAIPrivateCollectionSearch::is_institution_Valid() const{
    return m_institution_isValid;
}

qint64 OAIPrivateCollectionSearch::getLimit() const {
    return m_limit;
}
void OAIPrivateCollectionSearch::setLimit(const qint64 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIPrivateCollectionSearch::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIPrivateCollectionSearch::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIPrivateCollectionSearch::getModifiedSince() const {
    return m_modified_since;
}
void OAIPrivateCollectionSearch::setModifiedSince(const QString &modified_since) {
    m_modified_since = modified_since;
    m_modified_since_isSet = true;
}

bool OAIPrivateCollectionSearch::is_modified_since_Set() const{
    return m_modified_since_isSet;
}

bool OAIPrivateCollectionSearch::is_modified_since_Valid() const{
    return m_modified_since_isValid;
}

qint64 OAIPrivateCollectionSearch::getOffset() const {
    return m_offset;
}
void OAIPrivateCollectionSearch::setOffset(const qint64 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIPrivateCollectionSearch::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIPrivateCollectionSearch::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAIPrivateCollectionSearch::getOrderDirection() const {
    return m_order_direction;
}
void OAIPrivateCollectionSearch::setOrderDirection(const QString &order_direction) {
    m_order_direction = order_direction;
    m_order_direction_isSet = true;
}

bool OAIPrivateCollectionSearch::is_order_direction_Set() const{
    return m_order_direction_isSet;
}

bool OAIPrivateCollectionSearch::is_order_direction_Valid() const{
    return m_order_direction_isValid;
}

qint64 OAIPrivateCollectionSearch::getPage() const {
    return m_page;
}
void OAIPrivateCollectionSearch::setPage(const qint64 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIPrivateCollectionSearch::is_page_Set() const{
    return m_page_isSet;
}

bool OAIPrivateCollectionSearch::is_page_Valid() const{
    return m_page_isValid;
}

qint64 OAIPrivateCollectionSearch::getPageSize() const {
    return m_page_size;
}
void OAIPrivateCollectionSearch::setPageSize(const qint64 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIPrivateCollectionSearch::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIPrivateCollectionSearch::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIPrivateCollectionSearch::getPublishedSince() const {
    return m_published_since;
}
void OAIPrivateCollectionSearch::setPublishedSince(const QString &published_since) {
    m_published_since = published_since;
    m_published_since_isSet = true;
}

bool OAIPrivateCollectionSearch::is_published_since_Set() const{
    return m_published_since_isSet;
}

bool OAIPrivateCollectionSearch::is_published_since_Valid() const{
    return m_published_since_isValid;
}

QString OAIPrivateCollectionSearch::getSearchFor() const {
    return m_search_for;
}
void OAIPrivateCollectionSearch::setSearchFor(const QString &search_for) {
    m_search_for = search_for;
    m_search_for_isSet = true;
}

bool OAIPrivateCollectionSearch::is_search_for_Set() const{
    return m_search_for_isSet;
}

bool OAIPrivateCollectionSearch::is_search_for_Valid() const{
    return m_search_for_isValid;
}

bool OAIPrivateCollectionSearch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_doi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_for_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateCollectionSearch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
