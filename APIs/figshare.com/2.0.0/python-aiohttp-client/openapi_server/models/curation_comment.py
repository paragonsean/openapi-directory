# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CurationComment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, id: int=None, text: str=None, type: str=None):
        """CurationComment - a model defined in OpenAPI

        :param account_id: The account_id of this CurationComment.
        :param id: The id of this CurationComment.
        :param text: The text of this CurationComment.
        :param type: The type of this CurationComment.
        """
        self.openapi_types = {
            'account_id': int,
            'id': int,
            'text': str,
            'type': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'id': 'id',
            'text': 'text',
            'type': 'type'
        }

        self._account_id = account_id
        self._id = id
        self._text = text
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CurationComment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CurationComment of this CurationComment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CurationComment.

        The ID of the account which generated this comment.

        :return: The account_id of this CurationComment.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CurationComment.

        The ID of the account which generated this comment.

        :param account_id: The account_id of this CurationComment.
        :type account_id: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def id(self):
        """Gets the id of this CurationComment.

        The ID of the comment.

        :return: The id of this CurationComment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CurationComment.

        The ID of the comment.

        :param id: The id of this CurationComment.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def text(self):
        """Gets the text of this CurationComment.

        The value/content of the comment.

        :return: The text of this CurationComment.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CurationComment.

        The value/content of the comment.

        :param text: The text of this CurationComment.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def type(self):
        """Gets the type of this CurationComment.

        The ID of the account which generated this comment.

        :return: The type of this CurationComment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CurationComment.

        The ID of the account which generated this comment.

        :param type: The type of this CurationComment.
        :type type: str
        """
        allowed_values = ["comment", "approved", "rejected", "closed"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
