# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.author import Author
from openapi_server.models.category import Category
from openapi_server.models.custom_article_field import CustomArticleField
from openapi_server.models.funding_information import FundingInformation
from openapi_server.models.timeline import Timeline
from openapi_server import util


class CollectionComplete(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, articles_count: int=None, authors: List[Author]=None, categories: List[Category]=None, citation: str=None, created_date: str=None, custom_fields: List[CustomArticleField]=None, description: str=None, funding: List[FundingInformation]=None, group_id: int=None, group_resource_id: str=None, institution_id: int=None, modified_date: str=None, public: bool=None, references: List[str]=None, resource_doi: str=None, resource_id: str=None, resource_link: str=None, resource_title: str=None, resource_version: int=None, tags: List[str]=None, timeline: Timeline=None, version: int=None, doi: str=None, handle: str=None, id: int=None, published_date: str=None, title: str=None, url: str=None):
        """CollectionComplete - a model defined in OpenAPI

        :param articles_count: The articles_count of this CollectionComplete.
        :param authors: The authors of this CollectionComplete.
        :param categories: The categories of this CollectionComplete.
        :param citation: The citation of this CollectionComplete.
        :param created_date: The created_date of this CollectionComplete.
        :param custom_fields: The custom_fields of this CollectionComplete.
        :param description: The description of this CollectionComplete.
        :param funding: The funding of this CollectionComplete.
        :param group_id: The group_id of this CollectionComplete.
        :param group_resource_id: The group_resource_id of this CollectionComplete.
        :param institution_id: The institution_id of this CollectionComplete.
        :param modified_date: The modified_date of this CollectionComplete.
        :param public: The public of this CollectionComplete.
        :param references: The references of this CollectionComplete.
        :param resource_doi: The resource_doi of this CollectionComplete.
        :param resource_id: The resource_id of this CollectionComplete.
        :param resource_link: The resource_link of this CollectionComplete.
        :param resource_title: The resource_title of this CollectionComplete.
        :param resource_version: The resource_version of this CollectionComplete.
        :param tags: The tags of this CollectionComplete.
        :param timeline: The timeline of this CollectionComplete.
        :param version: The version of this CollectionComplete.
        :param doi: The doi of this CollectionComplete.
        :param handle: The handle of this CollectionComplete.
        :param id: The id of this CollectionComplete.
        :param published_date: The published_date of this CollectionComplete.
        :param title: The title of this CollectionComplete.
        :param url: The url of this CollectionComplete.
        """
        self.openapi_types = {
            'articles_count': int,
            'authors': List[Author],
            'categories': List[Category],
            'citation': str,
            'created_date': str,
            'custom_fields': List[CustomArticleField],
            'description': str,
            'funding': List[FundingInformation],
            'group_id': int,
            'group_resource_id': str,
            'institution_id': int,
            'modified_date': str,
            'public': bool,
            'references': List[str],
            'resource_doi': str,
            'resource_id': str,
            'resource_link': str,
            'resource_title': str,
            'resource_version': int,
            'tags': List[str],
            'timeline': Timeline,
            'version': int,
            'doi': str,
            'handle': str,
            'id': int,
            'published_date': str,
            'title': str,
            'url': str
        }

        self.attribute_map = {
            'articles_count': 'articles_count',
            'authors': 'authors',
            'categories': 'categories',
            'citation': 'citation',
            'created_date': 'created_date',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'funding': 'funding',
            'group_id': 'group_id',
            'group_resource_id': 'group_resource_id',
            'institution_id': 'institution_id',
            'modified_date': 'modified_date',
            'public': 'public',
            'references': 'references',
            'resource_doi': 'resource_doi',
            'resource_id': 'resource_id',
            'resource_link': 'resource_link',
            'resource_title': 'resource_title',
            'resource_version': 'resource_version',
            'tags': 'tags',
            'timeline': 'timeline',
            'version': 'version',
            'doi': 'doi',
            'handle': 'handle',
            'id': 'id',
            'published_date': 'published_date',
            'title': 'title',
            'url': 'url'
        }

        self._articles_count = articles_count
        self._authors = authors
        self._categories = categories
        self._citation = citation
        self._created_date = created_date
        self._custom_fields = custom_fields
        self._description = description
        self._funding = funding
        self._group_id = group_id
        self._group_resource_id = group_resource_id
        self._institution_id = institution_id
        self._modified_date = modified_date
        self._public = public
        self._references = references
        self._resource_doi = resource_doi
        self._resource_id = resource_id
        self._resource_link = resource_link
        self._resource_title = resource_title
        self._resource_version = resource_version
        self._tags = tags
        self._timeline = timeline
        self._version = version
        self._doi = doi
        self._handle = handle
        self._id = id
        self._published_date = published_date
        self._title = title
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionComplete':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollectionComplete of this CollectionComplete.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def articles_count(self):
        """Gets the articles_count of this CollectionComplete.

        Number of articles in collection

        :return: The articles_count of this CollectionComplete.
        :rtype: int
        """
        return self._articles_count

    @articles_count.setter
    def articles_count(self, articles_count):
        """Sets the articles_count of this CollectionComplete.

        Number of articles in collection

        :param articles_count: The articles_count of this CollectionComplete.
        :type articles_count: int
        """
        if articles_count is None:
            raise ValueError("Invalid value for `articles_count`, must not be `None`")

        self._articles_count = articles_count

    @property
    def authors(self):
        """Gets the authors of this CollectionComplete.

        List of collection authors

        :return: The authors of this CollectionComplete.
        :rtype: List[Author]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this CollectionComplete.

        List of collection authors

        :param authors: The authors of this CollectionComplete.
        :type authors: List[Author]
        """
        if authors is None:
            raise ValueError("Invalid value for `authors`, must not be `None`")

        self._authors = authors

    @property
    def categories(self):
        """Gets the categories of this CollectionComplete.

        List of collection categories

        :return: The categories of this CollectionComplete.
        :rtype: List[Category]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this CollectionComplete.

        List of collection categories

        :param categories: The categories of this CollectionComplete.
        :type categories: List[Category]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def citation(self):
        """Gets the citation of this CollectionComplete.

        Collection citation

        :return: The citation of this CollectionComplete.
        :rtype: str
        """
        return self._citation

    @citation.setter
    def citation(self, citation):
        """Sets the citation of this CollectionComplete.

        Collection citation

        :param citation: The citation of this CollectionComplete.
        :type citation: str
        """
        if citation is None:
            raise ValueError("Invalid value for `citation`, must not be `None`")

        self._citation = citation

    @property
    def created_date(self):
        """Gets the created_date of this CollectionComplete.

        Date when collection was created

        :return: The created_date of this CollectionComplete.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CollectionComplete.

        Date when collection was created

        :param created_date: The created_date of this CollectionComplete.
        :type created_date: str
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")

        self._created_date = created_date

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CollectionComplete.

        Collection custom fields

        :return: The custom_fields of this CollectionComplete.
        :rtype: List[CustomArticleField]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CollectionComplete.

        Collection custom fields

        :param custom_fields: The custom_fields of this CollectionComplete.
        :type custom_fields: List[CustomArticleField]
        """
        if custom_fields is None:
            raise ValueError("Invalid value for `custom_fields`, must not be `None`")

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this CollectionComplete.

        Collection description

        :return: The description of this CollectionComplete.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CollectionComplete.

        Collection description

        :param description: The description of this CollectionComplete.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def funding(self):
        """Gets the funding of this CollectionComplete.

        Full Collection funding information

        :return: The funding of this CollectionComplete.
        :rtype: List[FundingInformation]
        """
        return self._funding

    @funding.setter
    def funding(self, funding):
        """Sets the funding of this CollectionComplete.

        Full Collection funding information

        :param funding: The funding of this CollectionComplete.
        :type funding: List[FundingInformation]
        """
        if funding is None:
            raise ValueError("Invalid value for `funding`, must not be `None`")

        self._funding = funding

    @property
    def group_id(self):
        """Gets the group_id of this CollectionComplete.

        Collection group

        :return: The group_id of this CollectionComplete.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this CollectionComplete.

        Collection group

        :param group_id: The group_id of this CollectionComplete.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def group_resource_id(self):
        """Gets the group_resource_id of this CollectionComplete.

        Collection group resource id

        :return: The group_resource_id of this CollectionComplete.
        :rtype: str
        """
        return self._group_resource_id

    @group_resource_id.setter
    def group_resource_id(self, group_resource_id):
        """Sets the group_resource_id of this CollectionComplete.

        Collection group resource id

        :param group_resource_id: The group_resource_id of this CollectionComplete.
        :type group_resource_id: str
        """
        if group_resource_id is None:
            raise ValueError("Invalid value for `group_resource_id`, must not be `None`")

        self._group_resource_id = group_resource_id

    @property
    def institution_id(self):
        """Gets the institution_id of this CollectionComplete.

        Collection institution

        :return: The institution_id of this CollectionComplete.
        :rtype: int
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """Sets the institution_id of this CollectionComplete.

        Collection institution

        :param institution_id: The institution_id of this CollectionComplete.
        :type institution_id: int
        """
        if institution_id is None:
            raise ValueError("Invalid value for `institution_id`, must not be `None`")

        self._institution_id = institution_id

    @property
    def modified_date(self):
        """Gets the modified_date of this CollectionComplete.

        Date when collection was last modified

        :return: The modified_date of this CollectionComplete.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CollectionComplete.

        Date when collection was last modified

        :param modified_date: The modified_date of this CollectionComplete.
        :type modified_date: str
        """
        if modified_date is None:
            raise ValueError("Invalid value for `modified_date`, must not be `None`")

        self._modified_date = modified_date

    @property
    def public(self):
        """Gets the public of this CollectionComplete.

        True if collection is published

        :return: The public of this CollectionComplete.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this CollectionComplete.

        True if collection is published

        :param public: The public of this CollectionComplete.
        :type public: bool
        """
        if public is None:
            raise ValueError("Invalid value for `public`, must not be `None`")

        self._public = public

    @property
    def references(self):
        """Gets the references of this CollectionComplete.

        List of collection references

        :return: The references of this CollectionComplete.
        :rtype: List[str]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this CollectionComplete.

        List of collection references

        :param references: The references of this CollectionComplete.
        :type references: List[str]
        """
        if references is None:
            raise ValueError("Invalid value for `references`, must not be `None`")

        self._references = references

    @property
    def resource_doi(self):
        """Gets the resource_doi of this CollectionComplete.

        Collection resource doi

        :return: The resource_doi of this CollectionComplete.
        :rtype: str
        """
        return self._resource_doi

    @resource_doi.setter
    def resource_doi(self, resource_doi):
        """Sets the resource_doi of this CollectionComplete.

        Collection resource doi

        :param resource_doi: The resource_doi of this CollectionComplete.
        :type resource_doi: str
        """
        if resource_doi is None:
            raise ValueError("Invalid value for `resource_doi`, must not be `None`")

        self._resource_doi = resource_doi

    @property
    def resource_id(self):
        """Gets the resource_id of this CollectionComplete.

        Collection resource id

        :return: The resource_id of this CollectionComplete.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this CollectionComplete.

        Collection resource id

        :param resource_id: The resource_id of this CollectionComplete.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def resource_link(self):
        """Gets the resource_link of this CollectionComplete.

        Collection resource link

        :return: The resource_link of this CollectionComplete.
        :rtype: str
        """
        return self._resource_link

    @resource_link.setter
    def resource_link(self, resource_link):
        """Sets the resource_link of this CollectionComplete.

        Collection resource link

        :param resource_link: The resource_link of this CollectionComplete.
        :type resource_link: str
        """
        if resource_link is None:
            raise ValueError("Invalid value for `resource_link`, must not be `None`")

        self._resource_link = resource_link

    @property
    def resource_title(self):
        """Gets the resource_title of this CollectionComplete.

        Collection resource title

        :return: The resource_title of this CollectionComplete.
        :rtype: str
        """
        return self._resource_title

    @resource_title.setter
    def resource_title(self, resource_title):
        """Sets the resource_title of this CollectionComplete.

        Collection resource title

        :param resource_title: The resource_title of this CollectionComplete.
        :type resource_title: str
        """
        if resource_title is None:
            raise ValueError("Invalid value for `resource_title`, must not be `None`")

        self._resource_title = resource_title

    @property
    def resource_version(self):
        """Gets the resource_version of this CollectionComplete.

        Collection resource version

        :return: The resource_version of this CollectionComplete.
        :rtype: int
        """
        return self._resource_version

    @resource_version.setter
    def resource_version(self, resource_version):
        """Sets the resource_version of this CollectionComplete.

        Collection resource version

        :param resource_version: The resource_version of this CollectionComplete.
        :type resource_version: int
        """
        if resource_version is None:
            raise ValueError("Invalid value for `resource_version`, must not be `None`")

        self._resource_version = resource_version

    @property
    def tags(self):
        """Gets the tags of this CollectionComplete.

        List of collection tags

        :return: The tags of this CollectionComplete.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CollectionComplete.

        List of collection tags

        :param tags: The tags of this CollectionComplete.
        :type tags: List[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags

    @property
    def timeline(self):
        """Gets the timeline of this CollectionComplete.


        :return: The timeline of this CollectionComplete.
        :rtype: Timeline
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this CollectionComplete.


        :param timeline: The timeline of this CollectionComplete.
        :type timeline: Timeline
        """
        if timeline is None:
            raise ValueError("Invalid value for `timeline`, must not be `None`")

        self._timeline = timeline

    @property
    def version(self):
        """Gets the version of this CollectionComplete.

        Collection version

        :return: The version of this CollectionComplete.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CollectionComplete.

        Collection version

        :param version: The version of this CollectionComplete.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def doi(self):
        """Gets the doi of this CollectionComplete.

        Collection DOI

        :return: The doi of this CollectionComplete.
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this CollectionComplete.

        Collection DOI

        :param doi: The doi of this CollectionComplete.
        :type doi: str
        """
        if doi is None:
            raise ValueError("Invalid value for `doi`, must not be `None`")

        self._doi = doi

    @property
    def handle(self):
        """Gets the handle of this CollectionComplete.

        Collection Handle

        :return: The handle of this CollectionComplete.
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this CollectionComplete.

        Collection Handle

        :param handle: The handle of this CollectionComplete.
        :type handle: str
        """
        if handle is None:
            raise ValueError("Invalid value for `handle`, must not be `None`")

        self._handle = handle

    @property
    def id(self):
        """Gets the id of this CollectionComplete.

        Collection id

        :return: The id of this CollectionComplete.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollectionComplete.

        Collection id

        :param id: The id of this CollectionComplete.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def published_date(self):
        """Gets the published_date of this CollectionComplete.

        Date when collection was published 

        :return: The published_date of this CollectionComplete.
        :rtype: str
        """
        return self._published_date

    @published_date.setter
    def published_date(self, published_date):
        """Sets the published_date of this CollectionComplete.

        Date when collection was published 

        :param published_date: The published_date of this CollectionComplete.
        :type published_date: str
        """
        if published_date is None:
            raise ValueError("Invalid value for `published_date`, must not be `None`")

        self._published_date = published_date

    @property
    def title(self):
        """Gets the title of this CollectionComplete.

        Collection title

        :return: The title of this CollectionComplete.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CollectionComplete.

        Collection title

        :param title: The title of this CollectionComplete.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def url(self):
        """Gets the url of this CollectionComplete.

        Api endpoint

        :return: The url of this CollectionComplete.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CollectionComplete.

        Api endpoint

        :param url: The url of this CollectionComplete.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
