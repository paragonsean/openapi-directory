# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.collaborator import Collaborator
from openapi_server.models.funding_information import FundingInformation
from openapi_server import util


class ProjectComplete(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collaborators: List[Collaborator]=None, description: str=None, figshare_url: str=None, funding: str=None, funding_list: List[FundingInformation]=None, id: int=None, published_date: str=None, title: str=None, url: str=None):
        """ProjectComplete - a model defined in OpenAPI

        :param collaborators: The collaborators of this ProjectComplete.
        :param description: The description of this ProjectComplete.
        :param figshare_url: The figshare_url of this ProjectComplete.
        :param funding: The funding of this ProjectComplete.
        :param funding_list: The funding_list of this ProjectComplete.
        :param id: The id of this ProjectComplete.
        :param published_date: The published_date of this ProjectComplete.
        :param title: The title of this ProjectComplete.
        :param url: The url of this ProjectComplete.
        """
        self.openapi_types = {
            'collaborators': List[Collaborator],
            'description': str,
            'figshare_url': str,
            'funding': str,
            'funding_list': List[FundingInformation],
            'id': int,
            'published_date': str,
            'title': str,
            'url': str
        }

        self.attribute_map = {
            'collaborators': 'collaborators',
            'description': 'description',
            'figshare_url': 'figshare_url',
            'funding': 'funding',
            'funding_list': 'funding_list',
            'id': 'id',
            'published_date': 'published_date',
            'title': 'title',
            'url': 'url'
        }

        self._collaborators = collaborators
        self._description = description
        self._figshare_url = figshare_url
        self._funding = funding
        self._funding_list = funding_list
        self._id = id
        self._published_date = published_date
        self._title = title
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectComplete':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectComplete of this ProjectComplete.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collaborators(self):
        """Gets the collaborators of this ProjectComplete.

        List of project collaborators

        :return: The collaborators of this ProjectComplete.
        :rtype: List[Collaborator]
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this ProjectComplete.

        List of project collaborators

        :param collaborators: The collaborators of this ProjectComplete.
        :type collaborators: List[Collaborator]
        """
        if collaborators is None:
            raise ValueError("Invalid value for `collaborators`, must not be `None`")

        self._collaborators = collaborators

    @property
    def description(self):
        """Gets the description of this ProjectComplete.

        Project description

        :return: The description of this ProjectComplete.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectComplete.

        Project description

        :param description: The description of this ProjectComplete.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def figshare_url(self):
        """Gets the figshare_url of this ProjectComplete.

        Project public url

        :return: The figshare_url of this ProjectComplete.
        :rtype: str
        """
        return self._figshare_url

    @figshare_url.setter
    def figshare_url(self, figshare_url):
        """Sets the figshare_url of this ProjectComplete.

        Project public url

        :param figshare_url: The figshare_url of this ProjectComplete.
        :type figshare_url: str
        """
        if figshare_url is None:
            raise ValueError("Invalid value for `figshare_url`, must not be `None`")

        self._figshare_url = figshare_url

    @property
    def funding(self):
        """Gets the funding of this ProjectComplete.

        Project funding

        :return: The funding of this ProjectComplete.
        :rtype: str
        """
        return self._funding

    @funding.setter
    def funding(self, funding):
        """Sets the funding of this ProjectComplete.

        Project funding

        :param funding: The funding of this ProjectComplete.
        :type funding: str
        """
        if funding is None:
            raise ValueError("Invalid value for `funding`, must not be `None`")

        self._funding = funding

    @property
    def funding_list(self):
        """Gets the funding_list of this ProjectComplete.

        Full Project funding information

        :return: The funding_list of this ProjectComplete.
        :rtype: List[FundingInformation]
        """
        return self._funding_list

    @funding_list.setter
    def funding_list(self, funding_list):
        """Sets the funding_list of this ProjectComplete.

        Full Project funding information

        :param funding_list: The funding_list of this ProjectComplete.
        :type funding_list: List[FundingInformation]
        """
        if funding_list is None:
            raise ValueError("Invalid value for `funding_list`, must not be `None`")

        self._funding_list = funding_list

    @property
    def id(self):
        """Gets the id of this ProjectComplete.

        Project id

        :return: The id of this ProjectComplete.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectComplete.

        Project id

        :param id: The id of this ProjectComplete.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def published_date(self):
        """Gets the published_date of this ProjectComplete.

        Date when project was published

        :return: The published_date of this ProjectComplete.
        :rtype: str
        """
        return self._published_date

    @published_date.setter
    def published_date(self, published_date):
        """Sets the published_date of this ProjectComplete.

        Date when project was published

        :param published_date: The published_date of this ProjectComplete.
        :type published_date: str
        """
        if published_date is None:
            raise ValueError("Invalid value for `published_date`, must not be `None`")

        self._published_date = published_date

    @property
    def title(self):
        """Gets the title of this ProjectComplete.

        Project title

        :return: The title of this ProjectComplete.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProjectComplete.

        Project title

        :param title: The title of this ProjectComplete.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def url(self):
        """Gets the url of this ProjectComplete.

        Api endpoint

        :return: The url of this ProjectComplete.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProjectComplete.

        Api endpoint

        :param url: The url of this ProjectComplete.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
