# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrivateLinkCreator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expires_date: str=None, read_only: bool=None):
        """PrivateLinkCreator - a model defined in OpenAPI

        :param expires_date: The expires_date of this PrivateLinkCreator.
        :param read_only: The read_only of this PrivateLinkCreator.
        """
        self.openapi_types = {
            'expires_date': str,
            'read_only': bool
        }

        self.attribute_map = {
            'expires_date': 'expires_date',
            'read_only': 'read_only'
        }

        self._expires_date = expires_date
        self._read_only = read_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateLinkCreator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateLinkCreator of this PrivateLinkCreator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expires_date(self):
        """Gets the expires_date of this PrivateLinkCreator.

        Date when this private link should expire - optional. By default private links expire in 365 days.

        :return: The expires_date of this PrivateLinkCreator.
        :rtype: str
        """
        return self._expires_date

    @expires_date.setter
    def expires_date(self, expires_date):
        """Sets the expires_date of this PrivateLinkCreator.

        Date when this private link should expire - optional. By default private links expire in 365 days.

        :param expires_date: The expires_date of this PrivateLinkCreator.
        :type expires_date: str
        """

        self._expires_date = expires_date

    @property
    def read_only(self):
        """Gets the read_only of this PrivateLinkCreator.

        Optional, default true. Set to false to give private link users editing rights for this collection.

        :return: The read_only of this PrivateLinkCreator.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this PrivateLinkCreator.

        Optional, default true. Set to false to give private link users editing rights for this collection.

        :param read_only: The read_only of this PrivateLinkCreator.
        :type read_only: bool
        """

        self._read_only = read_only
