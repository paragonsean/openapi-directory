# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArticleConfidentiality(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_confidential: bool=None, reason: str=None):
        """ArticleConfidentiality - a model defined in OpenAPI

        :param is_confidential: The is_confidential of this ArticleConfidentiality.
        :param reason: The reason of this ArticleConfidentiality.
        """
        self.openapi_types = {
            'is_confidential': bool,
            'reason': str
        }

        self.attribute_map = {
            'is_confidential': 'is_confidential',
            'reason': 'reason'
        }

        self._is_confidential = is_confidential
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArticleConfidentiality':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArticleConfidentiality of this ArticleConfidentiality.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_confidential(self):
        """Gets the is_confidential of this ArticleConfidentiality.

        True if article is confidential

        :return: The is_confidential of this ArticleConfidentiality.
        :rtype: bool
        """
        return self._is_confidential

    @is_confidential.setter
    def is_confidential(self, is_confidential):
        """Sets the is_confidential of this ArticleConfidentiality.

        True if article is confidential

        :param is_confidential: The is_confidential of this ArticleConfidentiality.
        :type is_confidential: bool
        """
        if is_confidential is None:
            raise ValueError("Invalid value for `is_confidential`, must not be `None`")

        self._is_confidential = is_confidential

    @property
    def reason(self):
        """Gets the reason of this ArticleConfidentiality.

        Reason for confidentiality

        :return: The reason of this ArticleConfidentiality.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ArticleConfidentiality.

        Reason for confidentiality

        :param reason: The reason of this ArticleConfidentiality.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason
