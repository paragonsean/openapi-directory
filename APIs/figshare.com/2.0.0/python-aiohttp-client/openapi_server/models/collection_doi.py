# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CollectionDOI(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, doi: str=None):
        """CollectionDOI - a model defined in OpenAPI

        :param doi: The doi of this CollectionDOI.
        """
        self.openapi_types = {
            'doi': str
        }

        self.attribute_map = {
            'doi': 'doi'
        }

        self._doi = doi

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionDOI':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollectionDOI of this CollectionDOI.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def doi(self):
        """Gets the doi of this CollectionDOI.

        Reserved DOI

        :return: The doi of this CollectionDOI.
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this CollectionDOI.

        Reserved DOI

        :param doi: The doi of this CollectionDOI.
        :type doi: str
        """
        if doi is None:
            raise ValueError("Invalid value for `doi`, must not be `None`")

        self._doi = doi
