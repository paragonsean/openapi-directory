# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShortAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: int=None, email: str=None, first_name: str=None, id: int=None, institution_id: int=None, institution_user_id: str=None, last_name: str=None, orcid_id: str=None, quota: int=None, used_quota: int=None, user_id: int=None):
        """ShortAccount - a model defined in OpenAPI

        :param active: The active of this ShortAccount.
        :param email: The email of this ShortAccount.
        :param first_name: The first_name of this ShortAccount.
        :param id: The id of this ShortAccount.
        :param institution_id: The institution_id of this ShortAccount.
        :param institution_user_id: The institution_user_id of this ShortAccount.
        :param last_name: The last_name of this ShortAccount.
        :param orcid_id: The orcid_id of this ShortAccount.
        :param quota: The quota of this ShortAccount.
        :param used_quota: The used_quota of this ShortAccount.
        :param user_id: The user_id of this ShortAccount.
        """
        self.openapi_types = {
            'active': int,
            'email': str,
            'first_name': str,
            'id': int,
            'institution_id': int,
            'institution_user_id': str,
            'last_name': str,
            'orcid_id': str,
            'quota': int,
            'used_quota': int,
            'user_id': int
        }

        self.attribute_map = {
            'active': 'active',
            'email': 'email',
            'first_name': 'first_name',
            'id': 'id',
            'institution_id': 'institution_id',
            'institution_user_id': 'institution_user_id',
            'last_name': 'last_name',
            'orcid_id': 'orcid_id',
            'quota': 'quota',
            'used_quota': 'used_quota',
            'user_id': 'user_id'
        }

        self._active = active
        self._email = email
        self._first_name = first_name
        self._id = id
        self._institution_id = institution_id
        self._institution_user_id = institution_user_id
        self._last_name = last_name
        self._orcid_id = orcid_id
        self._quota = quota
        self._used_quota = used_quota
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShortAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShortAccount of this ShortAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ShortAccount.

        Account activity status

        :return: The active of this ShortAccount.
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ShortAccount.

        Account activity status

        :param active: The active of this ShortAccount.
        :type active: int
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def email(self):
        """Gets the email of this ShortAccount.

        User email

        :return: The email of this ShortAccount.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ShortAccount.

        User email

        :param email: The email of this ShortAccount.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this ShortAccount.

        First Name

        :return: The first_name of this ShortAccount.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ShortAccount.

        First Name

        :param first_name: The first_name of this ShortAccount.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this ShortAccount.

        Account id

        :return: The id of this ShortAccount.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShortAccount.

        Account id

        :param id: The id of this ShortAccount.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def institution_id(self):
        """Gets the institution_id of this ShortAccount.

        Account institution

        :return: The institution_id of this ShortAccount.
        :rtype: int
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """Sets the institution_id of this ShortAccount.

        Account institution

        :param institution_id: The institution_id of this ShortAccount.
        :type institution_id: int
        """
        if institution_id is None:
            raise ValueError("Invalid value for `institution_id`, must not be `None`")

        self._institution_id = institution_id

    @property
    def institution_user_id(self):
        """Gets the institution_user_id of this ShortAccount.

        Account institution user id

        :return: The institution_user_id of this ShortAccount.
        :rtype: str
        """
        return self._institution_user_id

    @institution_user_id.setter
    def institution_user_id(self, institution_user_id):
        """Sets the institution_user_id of this ShortAccount.

        Account institution user id

        :param institution_user_id: The institution_user_id of this ShortAccount.
        :type institution_user_id: str
        """
        if institution_user_id is None:
            raise ValueError("Invalid value for `institution_user_id`, must not be `None`")

        self._institution_user_id = institution_user_id

    @property
    def last_name(self):
        """Gets the last_name of this ShortAccount.

        Last Name

        :return: The last_name of this ShortAccount.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ShortAccount.

        Last Name

        :param last_name: The last_name of this ShortAccount.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def orcid_id(self):
        """Gets the orcid_id of this ShortAccount.

        ORCID iD associated to account

        :return: The orcid_id of this ShortAccount.
        :rtype: str
        """
        return self._orcid_id

    @orcid_id.setter
    def orcid_id(self, orcid_id):
        """Sets the orcid_id of this ShortAccount.

        ORCID iD associated to account

        :param orcid_id: The orcid_id of this ShortAccount.
        :type orcid_id: str
        """
        if orcid_id is None:
            raise ValueError("Invalid value for `orcid_id`, must not be `None`")

        self._orcid_id = orcid_id

    @property
    def quota(self):
        """Gets the quota of this ShortAccount.

        Total storage available to account, in bytes

        :return: The quota of this ShortAccount.
        :rtype: int
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this ShortAccount.

        Total storage available to account, in bytes

        :param quota: The quota of this ShortAccount.
        :type quota: int
        """
        if quota is None:
            raise ValueError("Invalid value for `quota`, must not be `None`")

        self._quota = quota

    @property
    def used_quota(self):
        """Gets the used_quota of this ShortAccount.

        Storage used by the account, in bytes

        :return: The used_quota of this ShortAccount.
        :rtype: int
        """
        return self._used_quota

    @used_quota.setter
    def used_quota(self, used_quota):
        """Sets the used_quota of this ShortAccount.

        Storage used by the account, in bytes

        :param used_quota: The used_quota of this ShortAccount.
        :type used_quota: int
        """
        if used_quota is None:
            raise ValueError("Invalid value for `used_quota`, must not be `None`")

        self._used_quota = used_quota

    @property
    def user_id(self):
        """Gets the user_id of this ShortAccount.

        User id associated with account, useful for example for adding the account as an author to an item

        :return: The user_id of this ShortAccount.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ShortAccount.

        User id associated with account, useful for example for adding the account as an author to an item

        :param user_id: The user_id of this ShortAccount.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
