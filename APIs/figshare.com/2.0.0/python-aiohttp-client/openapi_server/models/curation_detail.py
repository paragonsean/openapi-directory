# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.article_complete import ArticleComplete
from openapi_server import util


class CurationDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item: ArticleComplete=None, account_id: int=None, article_id: int=None, assigned_to: int=None, comments_count: int=None, created_date: str=None, group_id: int=None, id: int=None, modified_date: str=None, review_date: str=None, status: str=None, version: int=None):
        """CurationDetail - a model defined in OpenAPI

        :param item: The item of this CurationDetail.
        :param account_id: The account_id of this CurationDetail.
        :param article_id: The article_id of this CurationDetail.
        :param assigned_to: The assigned_to of this CurationDetail.
        :param comments_count: The comments_count of this CurationDetail.
        :param created_date: The created_date of this CurationDetail.
        :param group_id: The group_id of this CurationDetail.
        :param id: The id of this CurationDetail.
        :param modified_date: The modified_date of this CurationDetail.
        :param review_date: The review_date of this CurationDetail.
        :param status: The status of this CurationDetail.
        :param version: The version of this CurationDetail.
        """
        self.openapi_types = {
            'item': ArticleComplete,
            'account_id': int,
            'article_id': int,
            'assigned_to': int,
            'comments_count': int,
            'created_date': str,
            'group_id': int,
            'id': int,
            'modified_date': str,
            'review_date': str,
            'status': str,
            'version': int
        }

        self.attribute_map = {
            'item': 'item',
            'account_id': 'account_id',
            'article_id': 'article_id',
            'assigned_to': 'assigned_to',
            'comments_count': 'comments_count',
            'created_date': 'created_date',
            'group_id': 'group_id',
            'id': 'id',
            'modified_date': 'modified_date',
            'review_date': 'review_date',
            'status': 'status',
            'version': 'version'
        }

        self._item = item
        self._account_id = account_id
        self._article_id = article_id
        self._assigned_to = assigned_to
        self._comments_count = comments_count
        self._created_date = created_date
        self._group_id = group_id
        self._id = id
        self._modified_date = modified_date
        self._review_date = review_date
        self._status = status
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CurationDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CurationDetail of this CurationDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item(self):
        """Gets the item of this CurationDetail.


        :return: The item of this CurationDetail.
        :rtype: ArticleComplete
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this CurationDetail.


        :param item: The item of this CurationDetail.
        :type item: ArticleComplete
        """
        if item is None:
            raise ValueError("Invalid value for `item`, must not be `None`")

        self._item = item

    @property
    def account_id(self):
        """Gets the account_id of this CurationDetail.

        The ID of the account of the owner of the article of this review.

        :return: The account_id of this CurationDetail.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CurationDetail.

        The ID of the account of the owner of the article of this review.

        :param account_id: The account_id of this CurationDetail.
        :type account_id: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def article_id(self):
        """Gets the article_id of this CurationDetail.

        The ID of the article of this review.

        :return: The article_id of this CurationDetail.
        :rtype: int
        """
        return self._article_id

    @article_id.setter
    def article_id(self, article_id):
        """Sets the article_id of this CurationDetail.

        The ID of the article of this review.

        :param article_id: The article_id of this CurationDetail.
        :type article_id: int
        """
        if article_id is None:
            raise ValueError("Invalid value for `article_id`, must not be `None`")

        self._article_id = article_id

    @property
    def assigned_to(self):
        """Gets the assigned_to of this CurationDetail.

        The ID of the account to which this review is assigned.

        :return: The assigned_to of this CurationDetail.
        :rtype: int
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this CurationDetail.

        The ID of the account to which this review is assigned.

        :param assigned_to: The assigned_to of this CurationDetail.
        :type assigned_to: int
        """
        if assigned_to is None:
            raise ValueError("Invalid value for `assigned_to`, must not be `None`")

        self._assigned_to = assigned_to

    @property
    def comments_count(self):
        """Gets the comments_count of this CurationDetail.

        The number of comments in the review.

        :return: The comments_count of this CurationDetail.
        :rtype: int
        """
        return self._comments_count

    @comments_count.setter
    def comments_count(self, comments_count):
        """Sets the comments_count of this CurationDetail.

        The number of comments in the review.

        :param comments_count: The comments_count of this CurationDetail.
        :type comments_count: int
        """
        if comments_count is None:
            raise ValueError("Invalid value for `comments_count`, must not be `None`")

        self._comments_count = comments_count

    @property
    def created_date(self):
        """Gets the created_date of this CurationDetail.

        The creation date of the review.

        :return: The created_date of this CurationDetail.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CurationDetail.

        The creation date of the review.

        :param created_date: The created_date of this CurationDetail.
        :type created_date: str
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")

        self._created_date = created_date

    @property
    def group_id(self):
        """Gets the group_id of this CurationDetail.

        The group in which the article is present.

        :return: The group_id of this CurationDetail.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this CurationDetail.

        The group in which the article is present.

        :param group_id: The group_id of this CurationDetail.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this CurationDetail.

        The review id

        :return: The id of this CurationDetail.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CurationDetail.

        The review id

        :param id: The id of this CurationDetail.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def modified_date(self):
        """Gets the modified_date of this CurationDetail.

        The date the review has been modified.

        :return: The modified_date of this CurationDetail.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CurationDetail.

        The date the review has been modified.

        :param modified_date: The modified_date of this CurationDetail.
        :type modified_date: str
        """
        if modified_date is None:
            raise ValueError("Invalid value for `modified_date`, must not be `None`")

        self._modified_date = modified_date

    @property
    def review_date(self):
        """Gets the review_date of this CurationDetail.

        The last time a comment has been added to the review.

        :return: The review_date of this CurationDetail.
        :rtype: str
        """
        return self._review_date

    @review_date.setter
    def review_date(self, review_date):
        """Sets the review_date of this CurationDetail.

        The last time a comment has been added to the review.

        :param review_date: The review_date of this CurationDetail.
        :type review_date: str
        """
        if review_date is None:
            raise ValueError("Invalid value for `review_date`, must not be `None`")

        self._review_date = review_date

    @property
    def status(self):
        """Gets the status of this CurationDetail.

        The status of the review.

        :return: The status of this CurationDetail.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CurationDetail.

        The status of the review.

        :param status: The status of this CurationDetail.
        :type status: str
        """
        allowed_values = ["pending", "approved", "rejected", "closed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def version(self):
        """Gets the version of this CurationDetail.

        The Version number of the article in review.

        :return: The version of this CurationDetail.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CurationDetail.

        The Version number of the article in review.

        :param version: The version of this CurationDetail.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
