# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrivateAuthorsSearch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id: int=None, institution_id: int=None, is_active: bool=None, is_public: bool=None, limit: int=None, offset: int=None, orcid: str=None, order: str='published_date', order_direction: str='desc', page: int=None, page_size: int=10, search_for: str=None):
        """PrivateAuthorsSearch - a model defined in OpenAPI

        :param group_id: The group_id of this PrivateAuthorsSearch.
        :param institution_id: The institution_id of this PrivateAuthorsSearch.
        :param is_active: The is_active of this PrivateAuthorsSearch.
        :param is_public: The is_public of this PrivateAuthorsSearch.
        :param limit: The limit of this PrivateAuthorsSearch.
        :param offset: The offset of this PrivateAuthorsSearch.
        :param orcid: The orcid of this PrivateAuthorsSearch.
        :param order: The order of this PrivateAuthorsSearch.
        :param order_direction: The order_direction of this PrivateAuthorsSearch.
        :param page: The page of this PrivateAuthorsSearch.
        :param page_size: The page_size of this PrivateAuthorsSearch.
        :param search_for: The search_for of this PrivateAuthorsSearch.
        """
        self.openapi_types = {
            'group_id': int,
            'institution_id': int,
            'is_active': bool,
            'is_public': bool,
            'limit': int,
            'offset': int,
            'orcid': str,
            'order': str,
            'order_direction': str,
            'page': int,
            'page_size': int,
            'search_for': str
        }

        self.attribute_map = {
            'group_id': 'group_id',
            'institution_id': 'institution_id',
            'is_active': 'is_active',
            'is_public': 'is_public',
            'limit': 'limit',
            'offset': 'offset',
            'orcid': 'orcid',
            'order': 'order',
            'order_direction': 'order_direction',
            'page': 'page',
            'page_size': 'page_size',
            'search_for': 'search_for'
        }

        self._group_id = group_id
        self._institution_id = institution_id
        self._is_active = is_active
        self._is_public = is_public
        self._limit = limit
        self._offset = offset
        self._orcid = orcid
        self._order = order
        self._order_direction = order_direction
        self._page = page
        self._page_size = page_size
        self._search_for = search_for

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateAuthorsSearch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateAuthorsSearch of this PrivateAuthorsSearch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self):
        """Gets the group_id of this PrivateAuthorsSearch.

        Return only authors in this group or subgroups of the group

        :return: The group_id of this PrivateAuthorsSearch.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this PrivateAuthorsSearch.

        Return only authors in this group or subgroups of the group

        :param group_id: The group_id of this PrivateAuthorsSearch.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def institution_id(self):
        """Gets the institution_id of this PrivateAuthorsSearch.

        Return only authors associated to this institution

        :return: The institution_id of this PrivateAuthorsSearch.
        :rtype: int
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """Sets the institution_id of this PrivateAuthorsSearch.

        Return only authors associated to this institution

        :param institution_id: The institution_id of this PrivateAuthorsSearch.
        :type institution_id: int
        """

        self._institution_id = institution_id

    @property
    def is_active(self):
        """Gets the is_active of this PrivateAuthorsSearch.

        Return only active authors if True

        :return: The is_active of this PrivateAuthorsSearch.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this PrivateAuthorsSearch.

        Return only active authors if True

        :param is_active: The is_active of this PrivateAuthorsSearch.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_public(self):
        """Gets the is_public of this PrivateAuthorsSearch.

        Return only authors that have published items if True

        :return: The is_public of this PrivateAuthorsSearch.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this PrivateAuthorsSearch.

        Return only authors that have published items if True

        :param is_public: The is_public of this PrivateAuthorsSearch.
        :type is_public: bool
        """

        self._is_public = is_public

    @property
    def limit(self):
        """Gets the limit of this PrivateAuthorsSearch.

        Number of results included on a page. Used for pagination with query

        :return: The limit of this PrivateAuthorsSearch.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PrivateAuthorsSearch.

        Number of results included on a page. Used for pagination with query

        :param limit: The limit of this PrivateAuthorsSearch.
        :type limit: int
        """
        if limit is not None and limit > 1000:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `1000`")
        if limit is not None and limit < 1:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this PrivateAuthorsSearch.

        Where to start the listing(the offset of the first result). Used for pagination with limit

        :return: The offset of this PrivateAuthorsSearch.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PrivateAuthorsSearch.

        Where to start the listing(the offset of the first result). Used for pagination with limit

        :param offset: The offset of this PrivateAuthorsSearch.
        :type offset: int
        """
        if offset is not None and offset > 5000:
            raise ValueError("Invalid value for `offset`, must be a value less than or equal to `5000`")
        if offset is not None and offset < 0:
            raise ValueError("Invalid value for `offset`, must be a value greater than or equal to `0`")

        self._offset = offset

    @property
    def orcid(self):
        """Gets the orcid of this PrivateAuthorsSearch.

        Orcid of author

        :return: The orcid of this PrivateAuthorsSearch.
        :rtype: str
        """
        return self._orcid

    @orcid.setter
    def orcid(self, orcid):
        """Sets the orcid of this PrivateAuthorsSearch.

        Orcid of author

        :param orcid: The orcid of this PrivateAuthorsSearch.
        :type orcid: str
        """

        self._orcid = orcid

    @property
    def order(self):
        """Gets the order of this PrivateAuthorsSearch.

        The field by which to order. Default varies by endpoint/resource.

        :return: The order of this PrivateAuthorsSearch.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PrivateAuthorsSearch.

        The field by which to order. Default varies by endpoint/resource.

        :param order: The order of this PrivateAuthorsSearch.
        :type order: str
        """
        allowed_values = ["published_date", "modified_date", "views", "shares", "downloads", "cites"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"
                .format(order, allowed_values)
            )

        self._order = order

    @property
    def order_direction(self):
        """Gets the order_direction of this PrivateAuthorsSearch.

        Direction of ordering

        :return: The order_direction of this PrivateAuthorsSearch.
        :rtype: str
        """
        return self._order_direction

    @order_direction.setter
    def order_direction(self, order_direction):
        """Sets the order_direction of this PrivateAuthorsSearch.

        Direction of ordering

        :param order_direction: The order_direction of this PrivateAuthorsSearch.
        :type order_direction: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if order_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `order_direction` ({0}), must be one of {1}"
                .format(order_direction, allowed_values)
            )

        self._order_direction = order_direction

    @property
    def page(self):
        """Gets the page of this PrivateAuthorsSearch.

        Page number. Used for pagination with page_size

        :return: The page of this PrivateAuthorsSearch.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this PrivateAuthorsSearch.

        Page number. Used for pagination with page_size

        :param page: The page of this PrivateAuthorsSearch.
        :type page: int
        """
        if page is not None and page > 5000:
            raise ValueError("Invalid value for `page`, must be a value less than or equal to `5000`")
        if page is not None and page < 1:
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `1`")

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this PrivateAuthorsSearch.

        The number of results included on a page. Used for pagination with page

        :return: The page_size of this PrivateAuthorsSearch.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this PrivateAuthorsSearch.

        The number of results included on a page. Used for pagination with page

        :param page_size: The page_size of this PrivateAuthorsSearch.
        :type page_size: int
        """
        if page_size is not None and page_size > 1000:
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `1000`")
        if page_size is not None and page_size < 1:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `1`")

        self._page_size = page_size

    @property
    def search_for(self):
        """Gets the search_for of this PrivateAuthorsSearch.

        Search term

        :return: The search_for of this PrivateAuthorsSearch.
        :rtype: str
        """
        return self._search_for

    @search_for.setter
    def search_for(self, search_for):
        """Sets the search_for of this PrivateAuthorsSearch.

        Search term

        :param search_for: The search_for of this PrivateAuthorsSearch.
        :type search_for: str
        """

        self._search_for = search_for
