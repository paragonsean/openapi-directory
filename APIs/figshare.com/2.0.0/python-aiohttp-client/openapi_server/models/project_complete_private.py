# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.collaborator import Collaborator
from openapi_server.models.custom_article_field import CustomArticleField
from openapi_server.models.funding_information import FundingInformation
from openapi_server import util


class ProjectCompletePrivate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, collaborators: List[Collaborator]=None, created_date: str=None, custom_fields: List[CustomArticleField]=None, description: str=None, figshare_url: str=None, funding: str=None, funding_list: List[FundingInformation]=None, group_id: int=None, modified_date: str=None, quota: int=None, used_quota: int=None, used_quota_private: int=None, used_quota_public: int=None, role: str=None, storage: str=None, id: int=None, published_date: str=None, title: str=None, url: str=None):
        """ProjectCompletePrivate - a model defined in OpenAPI

        :param account_id: The account_id of this ProjectCompletePrivate.
        :param collaborators: The collaborators of this ProjectCompletePrivate.
        :param created_date: The created_date of this ProjectCompletePrivate.
        :param custom_fields: The custom_fields of this ProjectCompletePrivate.
        :param description: The description of this ProjectCompletePrivate.
        :param figshare_url: The figshare_url of this ProjectCompletePrivate.
        :param funding: The funding of this ProjectCompletePrivate.
        :param funding_list: The funding_list of this ProjectCompletePrivate.
        :param group_id: The group_id of this ProjectCompletePrivate.
        :param modified_date: The modified_date of this ProjectCompletePrivate.
        :param quota: The quota of this ProjectCompletePrivate.
        :param used_quota: The used_quota of this ProjectCompletePrivate.
        :param used_quota_private: The used_quota_private of this ProjectCompletePrivate.
        :param used_quota_public: The used_quota_public of this ProjectCompletePrivate.
        :param role: The role of this ProjectCompletePrivate.
        :param storage: The storage of this ProjectCompletePrivate.
        :param id: The id of this ProjectCompletePrivate.
        :param published_date: The published_date of this ProjectCompletePrivate.
        :param title: The title of this ProjectCompletePrivate.
        :param url: The url of this ProjectCompletePrivate.
        """
        self.openapi_types = {
            'account_id': int,
            'collaborators': List[Collaborator],
            'created_date': str,
            'custom_fields': List[CustomArticleField],
            'description': str,
            'figshare_url': str,
            'funding': str,
            'funding_list': List[FundingInformation],
            'group_id': int,
            'modified_date': str,
            'quota': int,
            'used_quota': int,
            'used_quota_private': int,
            'used_quota_public': int,
            'role': str,
            'storage': str,
            'id': int,
            'published_date': str,
            'title': str,
            'url': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'collaborators': 'collaborators',
            'created_date': 'created_date',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'figshare_url': 'figshare_url',
            'funding': 'funding',
            'funding_list': 'funding_list',
            'group_id': 'group_id',
            'modified_date': 'modified_date',
            'quota': 'quota',
            'used_quota': 'used_quota',
            'used_quota_private': 'used_quota_private',
            'used_quota_public': 'used_quota_public',
            'role': 'role',
            'storage': 'storage',
            'id': 'id',
            'published_date': 'published_date',
            'title': 'title',
            'url': 'url'
        }

        self._account_id = account_id
        self._collaborators = collaborators
        self._created_date = created_date
        self._custom_fields = custom_fields
        self._description = description
        self._figshare_url = figshare_url
        self._funding = funding
        self._funding_list = funding_list
        self._group_id = group_id
        self._modified_date = modified_date
        self._quota = quota
        self._used_quota = used_quota
        self._used_quota_private = used_quota_private
        self._used_quota_public = used_quota_public
        self._role = role
        self._storage = storage
        self._id = id
        self._published_date = published_date
        self._title = title
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectCompletePrivate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectCompletePrivate of this ProjectCompletePrivate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this ProjectCompletePrivate.

        ID of the account owning the project

        :return: The account_id of this ProjectCompletePrivate.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ProjectCompletePrivate.

        ID of the account owning the project

        :param account_id: The account_id of this ProjectCompletePrivate.
        :type account_id: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def collaborators(self):
        """Gets the collaborators of this ProjectCompletePrivate.

        List of project collaborators

        :return: The collaborators of this ProjectCompletePrivate.
        :rtype: List[Collaborator]
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this ProjectCompletePrivate.

        List of project collaborators

        :param collaborators: The collaborators of this ProjectCompletePrivate.
        :type collaborators: List[Collaborator]
        """
        if collaborators is None:
            raise ValueError("Invalid value for `collaborators`, must not be `None`")

        self._collaborators = collaborators

    @property
    def created_date(self):
        """Gets the created_date of this ProjectCompletePrivate.

        Date when project was created

        :return: The created_date of this ProjectCompletePrivate.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ProjectCompletePrivate.

        Date when project was created

        :param created_date: The created_date of this ProjectCompletePrivate.
        :type created_date: str
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")

        self._created_date = created_date

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ProjectCompletePrivate.

        Collection custom fields

        :return: The custom_fields of this ProjectCompletePrivate.
        :rtype: List[CustomArticleField]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ProjectCompletePrivate.

        Collection custom fields

        :param custom_fields: The custom_fields of this ProjectCompletePrivate.
        :type custom_fields: List[CustomArticleField]
        """
        if custom_fields is None:
            raise ValueError("Invalid value for `custom_fields`, must not be `None`")

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this ProjectCompletePrivate.

        Project description

        :return: The description of this ProjectCompletePrivate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectCompletePrivate.

        Project description

        :param description: The description of this ProjectCompletePrivate.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def figshare_url(self):
        """Gets the figshare_url of this ProjectCompletePrivate.

        Project public url

        :return: The figshare_url of this ProjectCompletePrivate.
        :rtype: str
        """
        return self._figshare_url

    @figshare_url.setter
    def figshare_url(self, figshare_url):
        """Sets the figshare_url of this ProjectCompletePrivate.

        Project public url

        :param figshare_url: The figshare_url of this ProjectCompletePrivate.
        :type figshare_url: str
        """
        if figshare_url is None:
            raise ValueError("Invalid value for `figshare_url`, must not be `None`")

        self._figshare_url = figshare_url

    @property
    def funding(self):
        """Gets the funding of this ProjectCompletePrivate.

        Project funding

        :return: The funding of this ProjectCompletePrivate.
        :rtype: str
        """
        return self._funding

    @funding.setter
    def funding(self, funding):
        """Sets the funding of this ProjectCompletePrivate.

        Project funding

        :param funding: The funding of this ProjectCompletePrivate.
        :type funding: str
        """
        if funding is None:
            raise ValueError("Invalid value for `funding`, must not be `None`")

        self._funding = funding

    @property
    def funding_list(self):
        """Gets the funding_list of this ProjectCompletePrivate.

        Full Project funding information

        :return: The funding_list of this ProjectCompletePrivate.
        :rtype: List[FundingInformation]
        """
        return self._funding_list

    @funding_list.setter
    def funding_list(self, funding_list):
        """Sets the funding_list of this ProjectCompletePrivate.

        Full Project funding information

        :param funding_list: The funding_list of this ProjectCompletePrivate.
        :type funding_list: List[FundingInformation]
        """
        if funding_list is None:
            raise ValueError("Invalid value for `funding_list`, must not be `None`")

        self._funding_list = funding_list

    @property
    def group_id(self):
        """Gets the group_id of this ProjectCompletePrivate.

        Group of project if any

        :return: The group_id of this ProjectCompletePrivate.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ProjectCompletePrivate.

        Group of project if any

        :param group_id: The group_id of this ProjectCompletePrivate.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def modified_date(self):
        """Gets the modified_date of this ProjectCompletePrivate.

        Date when project was last modified

        :return: The modified_date of this ProjectCompletePrivate.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this ProjectCompletePrivate.

        Date when project was last modified

        :param modified_date: The modified_date of this ProjectCompletePrivate.
        :type modified_date: str
        """
        if modified_date is None:
            raise ValueError("Invalid value for `modified_date`, must not be `None`")

        self._modified_date = modified_date

    @property
    def quota(self):
        """Gets the quota of this ProjectCompletePrivate.

        Project quota

        :return: The quota of this ProjectCompletePrivate.
        :rtype: int
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this ProjectCompletePrivate.

        Project quota

        :param quota: The quota of this ProjectCompletePrivate.
        :type quota: int
        """
        if quota is None:
            raise ValueError("Invalid value for `quota`, must not be `None`")

        self._quota = quota

    @property
    def used_quota(self):
        """Gets the used_quota of this ProjectCompletePrivate.

        Project used quota

        :return: The used_quota of this ProjectCompletePrivate.
        :rtype: int
        """
        return self._used_quota

    @used_quota.setter
    def used_quota(self, used_quota):
        """Sets the used_quota of this ProjectCompletePrivate.

        Project used quota

        :param used_quota: The used_quota of this ProjectCompletePrivate.
        :type used_quota: int
        """
        if used_quota is None:
            raise ValueError("Invalid value for `used_quota`, must not be `None`")

        self._used_quota = used_quota

    @property
    def used_quota_private(self):
        """Gets the used_quota_private of this ProjectCompletePrivate.

        Project private quota used

        :return: The used_quota_private of this ProjectCompletePrivate.
        :rtype: int
        """
        return self._used_quota_private

    @used_quota_private.setter
    def used_quota_private(self, used_quota_private):
        """Sets the used_quota_private of this ProjectCompletePrivate.

        Project private quota used

        :param used_quota_private: The used_quota_private of this ProjectCompletePrivate.
        :type used_quota_private: int
        """
        if used_quota_private is None:
            raise ValueError("Invalid value for `used_quota_private`, must not be `None`")

        self._used_quota_private = used_quota_private

    @property
    def used_quota_public(self):
        """Gets the used_quota_public of this ProjectCompletePrivate.

        Project public quota used

        :return: The used_quota_public of this ProjectCompletePrivate.
        :rtype: int
        """
        return self._used_quota_public

    @used_quota_public.setter
    def used_quota_public(self, used_quota_public):
        """Sets the used_quota_public of this ProjectCompletePrivate.

        Project public quota used

        :param used_quota_public: The used_quota_public of this ProjectCompletePrivate.
        :type used_quota_public: int
        """
        if used_quota_public is None:
            raise ValueError("Invalid value for `used_quota_public`, must not be `None`")

        self._used_quota_public = used_quota_public

    @property
    def role(self):
        """Gets the role of this ProjectCompletePrivate.

        Role inside this project

        :return: The role of this ProjectCompletePrivate.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ProjectCompletePrivate.

        Role inside this project

        :param role: The role of this ProjectCompletePrivate.
        :type role: str
        """
        allowed_values = ["Owner", "Collaborator", "Viewer"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def storage(self):
        """Gets the storage of this ProjectCompletePrivate.

        Project storage type

        :return: The storage of this ProjectCompletePrivate.
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this ProjectCompletePrivate.

        Project storage type

        :param storage: The storage of this ProjectCompletePrivate.
        :type storage: str
        """
        allowed_values = ["individual", "group"]  # noqa: E501
        if storage not in allowed_values:
            raise ValueError(
                "Invalid value for `storage` ({0}), must be one of {1}"
                .format(storage, allowed_values)
            )

        self._storage = storage

    @property
    def id(self):
        """Gets the id of this ProjectCompletePrivate.

        Project id

        :return: The id of this ProjectCompletePrivate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectCompletePrivate.

        Project id

        :param id: The id of this ProjectCompletePrivate.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def published_date(self):
        """Gets the published_date of this ProjectCompletePrivate.

        Date when project was published

        :return: The published_date of this ProjectCompletePrivate.
        :rtype: str
        """
        return self._published_date

    @published_date.setter
    def published_date(self, published_date):
        """Sets the published_date of this ProjectCompletePrivate.

        Date when project was published

        :param published_date: The published_date of this ProjectCompletePrivate.
        :type published_date: str
        """
        if published_date is None:
            raise ValueError("Invalid value for `published_date`, must not be `None`")

        self._published_date = published_date

    @property
    def title(self):
        """Gets the title of this ProjectCompletePrivate.

        Project title

        :return: The title of this ProjectCompletePrivate.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProjectCompletePrivate.

        Project title

        :param title: The title of this ProjectCompletePrivate.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def url(self):
        """Gets the url of this ProjectCompletePrivate.

        Api endpoint

        :return: The url of this ProjectCompletePrivate.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProjectCompletePrivate.

        Api endpoint

        :param url: The url of this ProjectCompletePrivate.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
