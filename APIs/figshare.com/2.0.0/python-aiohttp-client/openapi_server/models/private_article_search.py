# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrivateArticleSearch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_id: str=None, doi: str=None, handle: str=None, item_type: int=None, order: str=created_date, project_id: int=None, resource_doi: str=None, group: int=None, institution: int=None, limit: int=None, modified_since: str=None, offset: int=None, order_direction: str='desc', page: int=None, page_size: int=10, published_since: str=None, search_for: str=None):
        """PrivateArticleSearch - a model defined in OpenAPI

        :param resource_id: The resource_id of this PrivateArticleSearch.
        :param doi: The doi of this PrivateArticleSearch.
        :param handle: The handle of this PrivateArticleSearch.
        :param item_type: The item_type of this PrivateArticleSearch.
        :param order: The order of this PrivateArticleSearch.
        :param project_id: The project_id of this PrivateArticleSearch.
        :param resource_doi: The resource_doi of this PrivateArticleSearch.
        :param group: The group of this PrivateArticleSearch.
        :param institution: The institution of this PrivateArticleSearch.
        :param limit: The limit of this PrivateArticleSearch.
        :param modified_since: The modified_since of this PrivateArticleSearch.
        :param offset: The offset of this PrivateArticleSearch.
        :param order_direction: The order_direction of this PrivateArticleSearch.
        :param page: The page of this PrivateArticleSearch.
        :param page_size: The page_size of this PrivateArticleSearch.
        :param published_since: The published_since of this PrivateArticleSearch.
        :param search_for: The search_for of this PrivateArticleSearch.
        """
        self.openapi_types = {
            'resource_id': str,
            'doi': str,
            'handle': str,
            'item_type': int,
            'order': str,
            'project_id': int,
            'resource_doi': str,
            'group': int,
            'institution': int,
            'limit': int,
            'modified_since': str,
            'offset': int,
            'order_direction': str,
            'page': int,
            'page_size': int,
            'published_since': str,
            'search_for': str
        }

        self.attribute_map = {
            'resource_id': 'resource_id',
            'doi': 'doi',
            'handle': 'handle',
            'item_type': 'item_type',
            'order': 'order',
            'project_id': 'project_id',
            'resource_doi': 'resource_doi',
            'group': 'group',
            'institution': 'institution',
            'limit': 'limit',
            'modified_since': 'modified_since',
            'offset': 'offset',
            'order_direction': 'order_direction',
            'page': 'page',
            'page_size': 'page_size',
            'published_since': 'published_since',
            'search_for': 'search_for'
        }

        self._resource_id = resource_id
        self._doi = doi
        self._handle = handle
        self._item_type = item_type
        self._order = order
        self._project_id = project_id
        self._resource_doi = resource_doi
        self._group = group
        self._institution = institution
        self._limit = limit
        self._modified_since = modified_since
        self._offset = offset
        self._order_direction = order_direction
        self._page = page
        self._page_size = page_size
        self._published_since = published_since
        self._search_for = search_for

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateArticleSearch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateArticleSearch of this PrivateArticleSearch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_id(self):
        """Gets the resource_id of this PrivateArticleSearch.

        only return collections with this resource_id

        :return: The resource_id of this PrivateArticleSearch.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this PrivateArticleSearch.

        only return collections with this resource_id

        :param resource_id: The resource_id of this PrivateArticleSearch.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def doi(self):
        """Gets the doi of this PrivateArticleSearch.

        Only return articles with this doi

        :return: The doi of this PrivateArticleSearch.
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this PrivateArticleSearch.

        Only return articles with this doi

        :param doi: The doi of this PrivateArticleSearch.
        :type doi: str
        """

        self._doi = doi

    @property
    def handle(self):
        """Gets the handle of this PrivateArticleSearch.

        Only return articles with this handle

        :return: The handle of this PrivateArticleSearch.
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this PrivateArticleSearch.

        Only return articles with this handle

        :param handle: The handle of this PrivateArticleSearch.
        :type handle: str
        """

        self._handle = handle

    @property
    def item_type(self):
        """Gets the item_type of this PrivateArticleSearch.

        Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model

        :return: The item_type of this PrivateArticleSearch.
        :rtype: int
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this PrivateArticleSearch.

        Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model

        :param item_type: The item_type of this PrivateArticleSearch.
        :type item_type: int
        """

        self._item_type = item_type

    @property
    def order(self):
        """Gets the order of this PrivateArticleSearch.

        The field by which to order

        :return: The order of this PrivateArticleSearch.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PrivateArticleSearch.

        The field by which to order

        :param order: The order of this PrivateArticleSearch.
        :type order: str
        """
        allowed_values = ["published_date", "modified_date", "views", "shares", "downloads", "cites"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"
                .format(order, allowed_values)
            )

        self._order = order

    @property
    def project_id(self):
        """Gets the project_id of this PrivateArticleSearch.

        Only return articles in this project

        :return: The project_id of this PrivateArticleSearch.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this PrivateArticleSearch.

        Only return articles in this project

        :param project_id: The project_id of this PrivateArticleSearch.
        :type project_id: int
        """

        self._project_id = project_id

    @property
    def resource_doi(self):
        """Gets the resource_doi of this PrivateArticleSearch.

        Only return articles with this resource_doi

        :return: The resource_doi of this PrivateArticleSearch.
        :rtype: str
        """
        return self._resource_doi

    @resource_doi.setter
    def resource_doi(self, resource_doi):
        """Sets the resource_doi of this PrivateArticleSearch.

        Only return articles with this resource_doi

        :param resource_doi: The resource_doi of this PrivateArticleSearch.
        :type resource_doi: str
        """

        self._resource_doi = resource_doi

    @property
    def group(self):
        """Gets the group of this PrivateArticleSearch.

        only return collections from this group

        :return: The group of this PrivateArticleSearch.
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this PrivateArticleSearch.

        only return collections from this group

        :param group: The group of this PrivateArticleSearch.
        :type group: int
        """

        self._group = group

    @property
    def institution(self):
        """Gets the institution of this PrivateArticleSearch.

        only return collections from this institution

        :return: The institution of this PrivateArticleSearch.
        :rtype: int
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this PrivateArticleSearch.

        only return collections from this institution

        :param institution: The institution of this PrivateArticleSearch.
        :type institution: int
        """

        self._institution = institution

    @property
    def limit(self):
        """Gets the limit of this PrivateArticleSearch.

        Number of results included on a page. Used for pagination with query

        :return: The limit of this PrivateArticleSearch.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PrivateArticleSearch.

        Number of results included on a page. Used for pagination with query

        :param limit: The limit of this PrivateArticleSearch.
        :type limit: int
        """
        if limit is not None and limit > 1000:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `1000`")
        if limit is not None and limit < 1:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")

        self._limit = limit

    @property
    def modified_since(self):
        """Gets the modified_since of this PrivateArticleSearch.

        Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD

        :return: The modified_since of this PrivateArticleSearch.
        :rtype: str
        """
        return self._modified_since

    @modified_since.setter
    def modified_since(self, modified_since):
        """Sets the modified_since of this PrivateArticleSearch.

        Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD

        :param modified_since: The modified_since of this PrivateArticleSearch.
        :type modified_since: str
        """

        self._modified_since = modified_since

    @property
    def offset(self):
        """Gets the offset of this PrivateArticleSearch.

        Where to start the listing(the offset of the first result). Used for pagination with limit

        :return: The offset of this PrivateArticleSearch.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PrivateArticleSearch.

        Where to start the listing(the offset of the first result). Used for pagination with limit

        :param offset: The offset of this PrivateArticleSearch.
        :type offset: int
        """
        if offset is not None and offset > 5000:
            raise ValueError("Invalid value for `offset`, must be a value less than or equal to `5000`")
        if offset is not None and offset < 0:
            raise ValueError("Invalid value for `offset`, must be a value greater than or equal to `0`")

        self._offset = offset

    @property
    def order_direction(self):
        """Gets the order_direction of this PrivateArticleSearch.

        Direction of ordering

        :return: The order_direction of this PrivateArticleSearch.
        :rtype: str
        """
        return self._order_direction

    @order_direction.setter
    def order_direction(self, order_direction):
        """Sets the order_direction of this PrivateArticleSearch.

        Direction of ordering

        :param order_direction: The order_direction of this PrivateArticleSearch.
        :type order_direction: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if order_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `order_direction` ({0}), must be one of {1}"
                .format(order_direction, allowed_values)
            )

        self._order_direction = order_direction

    @property
    def page(self):
        """Gets the page of this PrivateArticleSearch.

        Page number. Used for pagination with page_size

        :return: The page of this PrivateArticleSearch.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this PrivateArticleSearch.

        Page number. Used for pagination with page_size

        :param page: The page of this PrivateArticleSearch.
        :type page: int
        """
        if page is not None and page > 5000:
            raise ValueError("Invalid value for `page`, must be a value less than or equal to `5000`")
        if page is not None and page < 1:
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `1`")

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this PrivateArticleSearch.

        The number of results included on a page. Used for pagination with page

        :return: The page_size of this PrivateArticleSearch.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this PrivateArticleSearch.

        The number of results included on a page. Used for pagination with page

        :param page_size: The page_size of this PrivateArticleSearch.
        :type page_size: int
        """
        if page_size is not None and page_size > 1000:
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `1000`")
        if page_size is not None and page_size < 1:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `1`")

        self._page_size = page_size

    @property
    def published_since(self):
        """Gets the published_since of this PrivateArticleSearch.

        Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD

        :return: The published_since of this PrivateArticleSearch.
        :rtype: str
        """
        return self._published_since

    @published_since.setter
    def published_since(self, published_since):
        """Sets the published_since of this PrivateArticleSearch.

        Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD

        :param published_since: The published_since of this PrivateArticleSearch.
        :type published_since: str
        """

        self._published_since = published_since

    @property
    def search_for(self):
        """Gets the search_for of this PrivateArticleSearch.

        Search term

        :return: The search_for of this PrivateArticleSearch.
        :rtype: str
        """
        return self._search_for

    @search_for.setter
    def search_for(self, search_for):
        """Sets the search_for of this PrivateArticleSearch.

        Search term

        :param search_for: The search_for of this PrivateArticleSearch.
        :type search_for: str
        """

        self._search_for = search_for
