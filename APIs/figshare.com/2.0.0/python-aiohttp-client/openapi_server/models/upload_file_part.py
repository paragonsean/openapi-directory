# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UploadFilePart(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_offset: int=None, locked: bool=None, part_no: int=None, start_offset: int=None, status: str=None):
        """UploadFilePart - a model defined in OpenAPI

        :param end_offset: The end_offset of this UploadFilePart.
        :param locked: The locked of this UploadFilePart.
        :param part_no: The part_no of this UploadFilePart.
        :param start_offset: The start_offset of this UploadFilePart.
        :param status: The status of this UploadFilePart.
        """
        self.openapi_types = {
            'end_offset': int,
            'locked': bool,
            'part_no': int,
            'start_offset': int,
            'status': str
        }

        self.attribute_map = {
            'end_offset': 'endOffset',
            'locked': 'locked',
            'part_no': 'partNo',
            'start_offset': 'startOffset',
            'status': 'status'
        }

        self._end_offset = end_offset
        self._locked = locked
        self._part_no = part_no
        self._start_offset = start_offset
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadFilePart':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UploadFilePart of this UploadFilePart.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_offset(self):
        """Gets the end_offset of this UploadFilePart.

        Indexes on byte range. zero-based and inclusive

        :return: The end_offset of this UploadFilePart.
        :rtype: int
        """
        return self._end_offset

    @end_offset.setter
    def end_offset(self, end_offset):
        """Sets the end_offset of this UploadFilePart.

        Indexes on byte range. zero-based and inclusive

        :param end_offset: The end_offset of this UploadFilePart.
        :type end_offset: int
        """

        self._end_offset = end_offset

    @property
    def locked(self):
        """Gets the locked of this UploadFilePart.

        When a part is being uploaded it is being locked, by setting the locked flag to true. No changes/uploads can happen on this part from other requests.

        :return: The locked of this UploadFilePart.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this UploadFilePart.

        When a part is being uploaded it is being locked, by setting the locked flag to true. No changes/uploads can happen on this part from other requests.

        :param locked: The locked of this UploadFilePart.
        :type locked: bool
        """

        self._locked = locked

    @property
    def part_no(self):
        """Gets the part_no of this UploadFilePart.

        File part id

        :return: The part_no of this UploadFilePart.
        :rtype: int
        """
        return self._part_no

    @part_no.setter
    def part_no(self, part_no):
        """Sets the part_no of this UploadFilePart.

        File part id

        :param part_no: The part_no of this UploadFilePart.
        :type part_no: int
        """

        self._part_no = part_no

    @property
    def start_offset(self):
        """Gets the start_offset of this UploadFilePart.

        Indexes on byte range. zero-based and inclusive

        :return: The start_offset of this UploadFilePart.
        :rtype: int
        """
        return self._start_offset

    @start_offset.setter
    def start_offset(self, start_offset):
        """Sets the start_offset of this UploadFilePart.

        Indexes on byte range. zero-based and inclusive

        :param start_offset: The start_offset of this UploadFilePart.
        :type start_offset: int
        """

        self._start_offset = start_offset

    @property
    def status(self):
        """Gets the status of this UploadFilePart.

        part status

        :return: The status of this UploadFilePart.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UploadFilePart.

        part status

        :param status: The status of this UploadFilePart.
        :type status: str
        """
        allowed_values = ["PENDING", "COMPLETE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
