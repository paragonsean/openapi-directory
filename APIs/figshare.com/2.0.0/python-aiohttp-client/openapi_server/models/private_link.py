# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrivateLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expires_date: str=None, html_location: str=None, id: str=None, is_active: bool=None):
        """PrivateLink - a model defined in OpenAPI

        :param expires_date: The expires_date of this PrivateLink.
        :param html_location: The html_location of this PrivateLink.
        :param id: The id of this PrivateLink.
        :param is_active: The is_active of this PrivateLink.
        """
        self.openapi_types = {
            'expires_date': str,
            'html_location': str,
            'id': str,
            'is_active': bool
        }

        self.attribute_map = {
            'expires_date': 'expires_date',
            'html_location': 'html_location',
            'id': 'id',
            'is_active': 'is_active'
        }

        self._expires_date = expires_date
        self._html_location = html_location
        self._id = id
        self._is_active = is_active

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateLink of this PrivateLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expires_date(self):
        """Gets the expires_date of this PrivateLink.

        Date when link will expire

        :return: The expires_date of this PrivateLink.
        :rtype: str
        """
        return self._expires_date

    @expires_date.setter
    def expires_date(self, expires_date):
        """Sets the expires_date of this PrivateLink.

        Date when link will expire

        :param expires_date: The expires_date of this PrivateLink.
        :type expires_date: str
        """
        if expires_date is None:
            raise ValueError("Invalid value for `expires_date`, must not be `None`")

        self._expires_date = expires_date

    @property
    def html_location(self):
        """Gets the html_location of this PrivateLink.

        HTML url for private link

        :return: The html_location of this PrivateLink.
        :rtype: str
        """
        return self._html_location

    @html_location.setter
    def html_location(self, html_location):
        """Sets the html_location of this PrivateLink.

        HTML url for private link

        :param html_location: The html_location of this PrivateLink.
        :type html_location: str
        """
        if html_location is None:
            raise ValueError("Invalid value for `html_location`, must not be `None`")

        self._html_location = html_location

    @property
    def id(self):
        """Gets the id of this PrivateLink.

        Private link id

        :return: The id of this PrivateLink.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrivateLink.

        Private link id

        :param id: The id of this PrivateLink.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this PrivateLink.

        True if private link is active

        :return: The is_active of this PrivateLink.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this PrivateLink.

        True if private link is active

        :param is_active: The is_active of this PrivateLink.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active
