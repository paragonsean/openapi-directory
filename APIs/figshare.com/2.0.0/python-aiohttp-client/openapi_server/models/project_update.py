# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_article_field_add import CustomArticleFieldAdd
from openapi_server.models.funding_create import FundingCreate
from openapi_server import util


class ProjectUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_fields: object=None, custom_fields_list: List[CustomArticleFieldAdd]=None, description: str=None, funding: str=None, funding_list: List[FundingCreate]=None, title: str=None):
        """ProjectUpdate - a model defined in OpenAPI

        :param custom_fields: The custom_fields of this ProjectUpdate.
        :param custom_fields_list: The custom_fields_list of this ProjectUpdate.
        :param description: The description of this ProjectUpdate.
        :param funding: The funding of this ProjectUpdate.
        :param funding_list: The funding_list of this ProjectUpdate.
        :param title: The title of this ProjectUpdate.
        """
        self.openapi_types = {
            'custom_fields': object,
            'custom_fields_list': List[CustomArticleFieldAdd],
            'description': str,
            'funding': str,
            'funding_list': List[FundingCreate],
            'title': str
        }

        self.attribute_map = {
            'custom_fields': 'custom_fields',
            'custom_fields_list': 'custom_fields_list',
            'description': 'description',
            'funding': 'funding',
            'funding_list': 'funding_list',
            'title': 'title'
        }

        self._custom_fields = custom_fields
        self._custom_fields_list = custom_fields_list
        self._description = description
        self._funding = funding
        self._funding_list = funding_list
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectUpdate of this ProjectUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ProjectUpdate.

        List of key, values pairs to be associated with the project

        :return: The custom_fields of this ProjectUpdate.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ProjectUpdate.

        List of key, values pairs to be associated with the project

        :param custom_fields: The custom_fields of this ProjectUpdate.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def custom_fields_list(self):
        """Gets the custom_fields_list of this ProjectUpdate.

        List of custom fields values, supersedes custom_fields parameter

        :return: The custom_fields_list of this ProjectUpdate.
        :rtype: List[CustomArticleFieldAdd]
        """
        return self._custom_fields_list

    @custom_fields_list.setter
    def custom_fields_list(self, custom_fields_list):
        """Sets the custom_fields_list of this ProjectUpdate.

        List of custom fields values, supersedes custom_fields parameter

        :param custom_fields_list: The custom_fields_list of this ProjectUpdate.
        :type custom_fields_list: List[CustomArticleFieldAdd]
        """

        self._custom_fields_list = custom_fields_list

    @property
    def description(self):
        """Gets the description of this ProjectUpdate.

        Project description

        :return: The description of this ProjectUpdate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectUpdate.

        Project description

        :param description: The description of this ProjectUpdate.
        :type description: str
        """
        if description is not None and len(description) > 10000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `10000`")

        self._description = description

    @property
    def funding(self):
        """Gets the funding of this ProjectUpdate.

        Grant number or organization(s) that funded this project. Up to 2000 characters permitted.

        :return: The funding of this ProjectUpdate.
        :rtype: str
        """
        return self._funding

    @funding.setter
    def funding(self, funding):
        """Sets the funding of this ProjectUpdate.

        Grant number or organization(s) that funded this project. Up to 2000 characters permitted.

        :param funding: The funding of this ProjectUpdate.
        :type funding: str
        """

        self._funding = funding

    @property
    def funding_list(self):
        """Gets the funding_list of this ProjectUpdate.

        Funding creation / update items

        :return: The funding_list of this ProjectUpdate.
        :rtype: List[FundingCreate]
        """
        return self._funding_list

    @funding_list.setter
    def funding_list(self, funding_list):
        """Sets the funding_list of this ProjectUpdate.

        Funding creation / update items

        :param funding_list: The funding_list of this ProjectUpdate.
        :type funding_list: List[FundingCreate]
        """

        self._funding_list = funding_list

    @property
    def title(self):
        """Gets the title of this ProjectUpdate.

        The title for this project - mandatory. 3 - 1000 characters.

        :return: The title of this ProjectUpdate.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProjectUpdate.

        The title for this project - mandatory. 3 - 1000 characters.

        :param title: The title of this ProjectUpdate.
        :type title: str
        """
        if title is not None and len(title) > 1000:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `1000`")
        if title is not None and len(title) < 3:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `3`")

        self._title = title
