# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.author import Author
from openapi_server.models.category import Category
from openapi_server.models.custom_article_field import CustomArticleField
from openapi_server.models.group_embargo_options import GroupEmbargoOptions
from openapi_server.models.license import License
from openapi_server.models.public_file import PublicFile
from openapi_server.models.timeline import Timeline
from openapi_server import util


class ArticleComplete(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authors: List[Author]=None, custom_fields: List[CustomArticleField]=None, embargo_options: List[GroupEmbargoOptions]=None, figshare_url: str=None, files: List[PublicFile]=None, resource_doi: str=None, resource_title: str=None, categories: List[Category]=None, citation: str=None, confidential_reason: str=None, created_date: str=None, description: str=None, embargo_date: str=None, embargo_reason: str=None, embargo_title: str=None, embargo_type: str=None, funding: str=None, funding_list: List[int]=None, has_linked_file: bool=None, is_active: bool=None, is_confidential: bool=None, is_embargoed: bool=None, is_metadata_record: bool=None, is_public: bool=None, license: License=None, metadata_reason: str=None, modified_date: str=None, references: List[str]=None, size: int=None, status: str=None, tags: List[str]=None, version: int=None, defined_type: int=None, defined_type_name: str=None, doi: str=None, group_id: float=None, handle: str=None, id: int=None, published_date: str=None, thumb: str=None, timeline: Timeline=None, title: str=None, url: str=None, url_private_api: str=None, url_private_html: str=None, url_public_api: str=None, url_public_html: str=None):
        """ArticleComplete - a model defined in OpenAPI

        :param authors: The authors of this ArticleComplete.
        :param custom_fields: The custom_fields of this ArticleComplete.
        :param embargo_options: The embargo_options of this ArticleComplete.
        :param figshare_url: The figshare_url of this ArticleComplete.
        :param files: The files of this ArticleComplete.
        :param resource_doi: The resource_doi of this ArticleComplete.
        :param resource_title: The resource_title of this ArticleComplete.
        :param categories: The categories of this ArticleComplete.
        :param citation: The citation of this ArticleComplete.
        :param confidential_reason: The confidential_reason of this ArticleComplete.
        :param created_date: The created_date of this ArticleComplete.
        :param description: The description of this ArticleComplete.
        :param embargo_date: The embargo_date of this ArticleComplete.
        :param embargo_reason: The embargo_reason of this ArticleComplete.
        :param embargo_title: The embargo_title of this ArticleComplete.
        :param embargo_type: The embargo_type of this ArticleComplete.
        :param funding: The funding of this ArticleComplete.
        :param funding_list: The funding_list of this ArticleComplete.
        :param has_linked_file: The has_linked_file of this ArticleComplete.
        :param is_active: The is_active of this ArticleComplete.
        :param is_confidential: The is_confidential of this ArticleComplete.
        :param is_embargoed: The is_embargoed of this ArticleComplete.
        :param is_metadata_record: The is_metadata_record of this ArticleComplete.
        :param is_public: The is_public of this ArticleComplete.
        :param license: The license of this ArticleComplete.
        :param metadata_reason: The metadata_reason of this ArticleComplete.
        :param modified_date: The modified_date of this ArticleComplete.
        :param references: The references of this ArticleComplete.
        :param size: The size of this ArticleComplete.
        :param status: The status of this ArticleComplete.
        :param tags: The tags of this ArticleComplete.
        :param version: The version of this ArticleComplete.
        :param defined_type: The defined_type of this ArticleComplete.
        :param defined_type_name: The defined_type_name of this ArticleComplete.
        :param doi: The doi of this ArticleComplete.
        :param group_id: The group_id of this ArticleComplete.
        :param handle: The handle of this ArticleComplete.
        :param id: The id of this ArticleComplete.
        :param published_date: The published_date of this ArticleComplete.
        :param thumb: The thumb of this ArticleComplete.
        :param timeline: The timeline of this ArticleComplete.
        :param title: The title of this ArticleComplete.
        :param url: The url of this ArticleComplete.
        :param url_private_api: The url_private_api of this ArticleComplete.
        :param url_private_html: The url_private_html of this ArticleComplete.
        :param url_public_api: The url_public_api of this ArticleComplete.
        :param url_public_html: The url_public_html of this ArticleComplete.
        """
        self.openapi_types = {
            'authors': List[Author],
            'custom_fields': List[CustomArticleField],
            'embargo_options': List[GroupEmbargoOptions],
            'figshare_url': str,
            'files': List[PublicFile],
            'resource_doi': str,
            'resource_title': str,
            'categories': List[Category],
            'citation': str,
            'confidential_reason': str,
            'created_date': str,
            'description': str,
            'embargo_date': str,
            'embargo_reason': str,
            'embargo_title': str,
            'embargo_type': str,
            'funding': str,
            'funding_list': List[int],
            'has_linked_file': bool,
            'is_active': bool,
            'is_confidential': bool,
            'is_embargoed': bool,
            'is_metadata_record': bool,
            'is_public': bool,
            'license': License,
            'metadata_reason': str,
            'modified_date': str,
            'references': List[str],
            'size': int,
            'status': str,
            'tags': List[str],
            'version': int,
            'defined_type': int,
            'defined_type_name': str,
            'doi': str,
            'group_id': float,
            'handle': str,
            'id': int,
            'published_date': str,
            'thumb': str,
            'timeline': Timeline,
            'title': str,
            'url': str,
            'url_private_api': str,
            'url_private_html': str,
            'url_public_api': str,
            'url_public_html': str
        }

        self.attribute_map = {
            'authors': 'authors',
            'custom_fields': 'custom_fields',
            'embargo_options': 'embargo_options',
            'figshare_url': 'figshare_url',
            'files': 'files',
            'resource_doi': 'resource_doi',
            'resource_title': 'resource_title',
            'categories': 'categories',
            'citation': 'citation',
            'confidential_reason': 'confidential_reason',
            'created_date': 'created_date',
            'description': 'description',
            'embargo_date': 'embargo_date',
            'embargo_reason': 'embargo_reason',
            'embargo_title': 'embargo_title',
            'embargo_type': 'embargo_type',
            'funding': 'funding',
            'funding_list': 'funding_list',
            'has_linked_file': 'has_linked_file',
            'is_active': 'is_active',
            'is_confidential': 'is_confidential',
            'is_embargoed': 'is_embargoed',
            'is_metadata_record': 'is_metadata_record',
            'is_public': 'is_public',
            'license': 'license',
            'metadata_reason': 'metadata_reason',
            'modified_date': 'modified_date',
            'references': 'references',
            'size': 'size',
            'status': 'status',
            'tags': 'tags',
            'version': 'version',
            'defined_type': 'defined_type',
            'defined_type_name': 'defined_type_name',
            'doi': 'doi',
            'group_id': 'group_id',
            'handle': 'handle',
            'id': 'id',
            'published_date': 'published_date',
            'thumb': 'thumb',
            'timeline': 'timeline',
            'title': 'title',
            'url': 'url',
            'url_private_api': 'url_private_api',
            'url_private_html': 'url_private_html',
            'url_public_api': 'url_public_api',
            'url_public_html': 'url_public_html'
        }

        self._authors = authors
        self._custom_fields = custom_fields
        self._embargo_options = embargo_options
        self._figshare_url = figshare_url
        self._files = files
        self._resource_doi = resource_doi
        self._resource_title = resource_title
        self._categories = categories
        self._citation = citation
        self._confidential_reason = confidential_reason
        self._created_date = created_date
        self._description = description
        self._embargo_date = embargo_date
        self._embargo_reason = embargo_reason
        self._embargo_title = embargo_title
        self._embargo_type = embargo_type
        self._funding = funding
        self._funding_list = funding_list
        self._has_linked_file = has_linked_file
        self._is_active = is_active
        self._is_confidential = is_confidential
        self._is_embargoed = is_embargoed
        self._is_metadata_record = is_metadata_record
        self._is_public = is_public
        self._license = license
        self._metadata_reason = metadata_reason
        self._modified_date = modified_date
        self._references = references
        self._size = size
        self._status = status
        self._tags = tags
        self._version = version
        self._defined_type = defined_type
        self._defined_type_name = defined_type_name
        self._doi = doi
        self._group_id = group_id
        self._handle = handle
        self._id = id
        self._published_date = published_date
        self._thumb = thumb
        self._timeline = timeline
        self._title = title
        self._url = url
        self._url_private_api = url_private_api
        self._url_private_html = url_private_html
        self._url_public_api = url_public_api
        self._url_public_html = url_public_html

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArticleComplete':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArticleComplete of this ArticleComplete.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authors(self):
        """Gets the authors of this ArticleComplete.

        List of article authors

        :return: The authors of this ArticleComplete.
        :rtype: List[Author]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this ArticleComplete.

        List of article authors

        :param authors: The authors of this ArticleComplete.
        :type authors: List[Author]
        """
        if authors is None:
            raise ValueError("Invalid value for `authors`, must not be `None`")

        self._authors = authors

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ArticleComplete.

        List of custom fields values

        :return: The custom_fields of this ArticleComplete.
        :rtype: List[CustomArticleField]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ArticleComplete.

        List of custom fields values

        :param custom_fields: The custom_fields of this ArticleComplete.
        :type custom_fields: List[CustomArticleField]
        """
        if custom_fields is None:
            raise ValueError("Invalid value for `custom_fields`, must not be `None`")

        self._custom_fields = custom_fields

    @property
    def embargo_options(self):
        """Gets the embargo_options of this ArticleComplete.

        List of embargo options

        :return: The embargo_options of this ArticleComplete.
        :rtype: List[GroupEmbargoOptions]
        """
        return self._embargo_options

    @embargo_options.setter
    def embargo_options(self, embargo_options):
        """Sets the embargo_options of this ArticleComplete.

        List of embargo options

        :param embargo_options: The embargo_options of this ArticleComplete.
        :type embargo_options: List[GroupEmbargoOptions]
        """
        if embargo_options is None:
            raise ValueError("Invalid value for `embargo_options`, must not be `None`")

        self._embargo_options = embargo_options

    @property
    def figshare_url(self):
        """Gets the figshare_url of this ArticleComplete.

        Article public url

        :return: The figshare_url of this ArticleComplete.
        :rtype: str
        """
        return self._figshare_url

    @figshare_url.setter
    def figshare_url(self, figshare_url):
        """Sets the figshare_url of this ArticleComplete.

        Article public url

        :param figshare_url: The figshare_url of this ArticleComplete.
        :type figshare_url: str
        """
        if figshare_url is None:
            raise ValueError("Invalid value for `figshare_url`, must not be `None`")

        self._figshare_url = figshare_url

    @property
    def files(self):
        """Gets the files of this ArticleComplete.

        List of article files

        :return: The files of this ArticleComplete.
        :rtype: List[PublicFile]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ArticleComplete.

        List of article files

        :param files: The files of this ArticleComplete.
        :type files: List[PublicFile]
        """
        if files is None:
            raise ValueError("Invalid value for `files`, must not be `None`")

        self._files = files

    @property
    def resource_doi(self):
        """Gets the resource_doi of this ArticleComplete.

        Article DOI

        :return: The resource_doi of this ArticleComplete.
        :rtype: str
        """
        return self._resource_doi

    @resource_doi.setter
    def resource_doi(self, resource_doi):
        """Sets the resource_doi of this ArticleComplete.

        Article DOI

        :param resource_doi: The resource_doi of this ArticleComplete.
        :type resource_doi: str
        """
        if resource_doi is None:
            raise ValueError("Invalid value for `resource_doi`, must not be `None`")

        self._resource_doi = resource_doi

    @property
    def resource_title(self):
        """Gets the resource_title of this ArticleComplete.

        Article resource title

        :return: The resource_title of this ArticleComplete.
        :rtype: str
        """
        return self._resource_title

    @resource_title.setter
    def resource_title(self, resource_title):
        """Sets the resource_title of this ArticleComplete.

        Article resource title

        :param resource_title: The resource_title of this ArticleComplete.
        :type resource_title: str
        """
        if resource_title is None:
            raise ValueError("Invalid value for `resource_title`, must not be `None`")

        self._resource_title = resource_title

    @property
    def categories(self):
        """Gets the categories of this ArticleComplete.

        List of categories selected for the article

        :return: The categories of this ArticleComplete.
        :rtype: List[Category]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ArticleComplete.

        List of categories selected for the article

        :param categories: The categories of this ArticleComplete.
        :type categories: List[Category]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def citation(self):
        """Gets the citation of this ArticleComplete.

        Article citation

        :return: The citation of this ArticleComplete.
        :rtype: str
        """
        return self._citation

    @citation.setter
    def citation(self, citation):
        """Sets the citation of this ArticleComplete.

        Article citation

        :param citation: The citation of this ArticleComplete.
        :type citation: str
        """
        if citation is None:
            raise ValueError("Invalid value for `citation`, must not be `None`")

        self._citation = citation

    @property
    def confidential_reason(self):
        """Gets the confidential_reason of this ArticleComplete.

        Confidentiality reason

        :return: The confidential_reason of this ArticleComplete.
        :rtype: str
        """
        return self._confidential_reason

    @confidential_reason.setter
    def confidential_reason(self, confidential_reason):
        """Sets the confidential_reason of this ArticleComplete.

        Confidentiality reason

        :param confidential_reason: The confidential_reason of this ArticleComplete.
        :type confidential_reason: str
        """
        if confidential_reason is None:
            raise ValueError("Invalid value for `confidential_reason`, must not be `None`")

        self._confidential_reason = confidential_reason

    @property
    def created_date(self):
        """Gets the created_date of this ArticleComplete.

        Date when article was created

        :return: The created_date of this ArticleComplete.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ArticleComplete.

        Date when article was created

        :param created_date: The created_date of this ArticleComplete.
        :type created_date: str
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")

        self._created_date = created_date

    @property
    def description(self):
        """Gets the description of this ArticleComplete.

        Article description

        :return: The description of this ArticleComplete.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ArticleComplete.

        Article description

        :param description: The description of this ArticleComplete.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def embargo_date(self):
        """Gets the embargo_date of this ArticleComplete.

        Date when embargo lifts

        :return: The embargo_date of this ArticleComplete.
        :rtype: str
        """
        return self._embargo_date

    @embargo_date.setter
    def embargo_date(self, embargo_date):
        """Sets the embargo_date of this ArticleComplete.

        Date when embargo lifts

        :param embargo_date: The embargo_date of this ArticleComplete.
        :type embargo_date: str
        """
        if embargo_date is None:
            raise ValueError("Invalid value for `embargo_date`, must not be `None`")

        self._embargo_date = embargo_date

    @property
    def embargo_reason(self):
        """Gets the embargo_reason of this ArticleComplete.

        Reason for embargo

        :return: The embargo_reason of this ArticleComplete.
        :rtype: str
        """
        return self._embargo_reason

    @embargo_reason.setter
    def embargo_reason(self, embargo_reason):
        """Sets the embargo_reason of this ArticleComplete.

        Reason for embargo

        :param embargo_reason: The embargo_reason of this ArticleComplete.
        :type embargo_reason: str
        """
        if embargo_reason is None:
            raise ValueError("Invalid value for `embargo_reason`, must not be `None`")

        self._embargo_reason = embargo_reason

    @property
    def embargo_title(self):
        """Gets the embargo_title of this ArticleComplete.

        Title for embargo

        :return: The embargo_title of this ArticleComplete.
        :rtype: str
        """
        return self._embargo_title

    @embargo_title.setter
    def embargo_title(self, embargo_title):
        """Sets the embargo_title of this ArticleComplete.

        Title for embargo

        :param embargo_title: The embargo_title of this ArticleComplete.
        :type embargo_title: str
        """
        if embargo_title is None:
            raise ValueError("Invalid value for `embargo_title`, must not be `None`")

        self._embargo_title = embargo_title

    @property
    def embargo_type(self):
        """Gets the embargo_type of this ArticleComplete.

        Article embargo

        :return: The embargo_type of this ArticleComplete.
        :rtype: str
        """
        return self._embargo_type

    @embargo_type.setter
    def embargo_type(self, embargo_type):
        """Sets the embargo_type of this ArticleComplete.

        Article embargo

        :param embargo_type: The embargo_type of this ArticleComplete.
        :type embargo_type: str
        """
        if embargo_type is None:
            raise ValueError("Invalid value for `embargo_type`, must not be `None`")

        self._embargo_type = embargo_type

    @property
    def funding(self):
        """Gets the funding of this ArticleComplete.

        Article funding

        :return: The funding of this ArticleComplete.
        :rtype: str
        """
        return self._funding

    @funding.setter
    def funding(self, funding):
        """Sets the funding of this ArticleComplete.

        Article funding

        :param funding: The funding of this ArticleComplete.
        :type funding: str
        """
        if funding is None:
            raise ValueError("Invalid value for `funding`, must not be `None`")

        self._funding = funding

    @property
    def funding_list(self):
        """Gets the funding_list of this ArticleComplete.


        :return: The funding_list of this ArticleComplete.
        :rtype: List[int]
        """
        return self._funding_list

    @funding_list.setter
    def funding_list(self, funding_list):
        """Sets the funding_list of this ArticleComplete.


        :param funding_list: The funding_list of this ArticleComplete.
        :type funding_list: List[int]
        """
        if funding_list is None:
            raise ValueError("Invalid value for `funding_list`, must not be `None`")

        self._funding_list = funding_list

    @property
    def has_linked_file(self):
        """Gets the has_linked_file of this ArticleComplete.

        True if any files are linked to the article

        :return: The has_linked_file of this ArticleComplete.
        :rtype: bool
        """
        return self._has_linked_file

    @has_linked_file.setter
    def has_linked_file(self, has_linked_file):
        """Sets the has_linked_file of this ArticleComplete.

        True if any files are linked to the article

        :param has_linked_file: The has_linked_file of this ArticleComplete.
        :type has_linked_file: bool
        """
        if has_linked_file is None:
            raise ValueError("Invalid value for `has_linked_file`, must not be `None`")

        self._has_linked_file = has_linked_file

    @property
    def is_active(self):
        """Gets the is_active of this ArticleComplete.

        True if article is active

        :return: The is_active of this ArticleComplete.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ArticleComplete.

        True if article is active

        :param is_active: The is_active of this ArticleComplete.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def is_confidential(self):
        """Gets the is_confidential of this ArticleComplete.

        Article Confidentiality

        :return: The is_confidential of this ArticleComplete.
        :rtype: bool
        """
        return self._is_confidential

    @is_confidential.setter
    def is_confidential(self, is_confidential):
        """Sets the is_confidential of this ArticleComplete.

        Article Confidentiality

        :param is_confidential: The is_confidential of this ArticleComplete.
        :type is_confidential: bool
        """
        if is_confidential is None:
            raise ValueError("Invalid value for `is_confidential`, must not be `None`")

        self._is_confidential = is_confidential

    @property
    def is_embargoed(self):
        """Gets the is_embargoed of this ArticleComplete.

        True if article is embargoed

        :return: The is_embargoed of this ArticleComplete.
        :rtype: bool
        """
        return self._is_embargoed

    @is_embargoed.setter
    def is_embargoed(self, is_embargoed):
        """Sets the is_embargoed of this ArticleComplete.

        True if article is embargoed

        :param is_embargoed: The is_embargoed of this ArticleComplete.
        :type is_embargoed: bool
        """
        if is_embargoed is None:
            raise ValueError("Invalid value for `is_embargoed`, must not be `None`")

        self._is_embargoed = is_embargoed

    @property
    def is_metadata_record(self):
        """Gets the is_metadata_record of this ArticleComplete.

        True if article has no files

        :return: The is_metadata_record of this ArticleComplete.
        :rtype: bool
        """
        return self._is_metadata_record

    @is_metadata_record.setter
    def is_metadata_record(self, is_metadata_record):
        """Sets the is_metadata_record of this ArticleComplete.

        True if article has no files

        :param is_metadata_record: The is_metadata_record of this ArticleComplete.
        :type is_metadata_record: bool
        """
        if is_metadata_record is None:
            raise ValueError("Invalid value for `is_metadata_record`, must not be `None`")

        self._is_metadata_record = is_metadata_record

    @property
    def is_public(self):
        """Gets the is_public of this ArticleComplete.

        True if article is published

        :return: The is_public of this ArticleComplete.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this ArticleComplete.

        True if article is published

        :param is_public: The is_public of this ArticleComplete.
        :type is_public: bool
        """
        if is_public is None:
            raise ValueError("Invalid value for `is_public`, must not be `None`")

        self._is_public = is_public

    @property
    def license(self):
        """Gets the license of this ArticleComplete.


        :return: The license of this ArticleComplete.
        :rtype: License
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this ArticleComplete.


        :param license: The license of this ArticleComplete.
        :type license: License
        """
        if license is None:
            raise ValueError("Invalid value for `license`, must not be `None`")

        self._license = license

    @property
    def metadata_reason(self):
        """Gets the metadata_reason of this ArticleComplete.

        Article metadata reason

        :return: The metadata_reason of this ArticleComplete.
        :rtype: str
        """
        return self._metadata_reason

    @metadata_reason.setter
    def metadata_reason(self, metadata_reason):
        """Sets the metadata_reason of this ArticleComplete.

        Article metadata reason

        :param metadata_reason: The metadata_reason of this ArticleComplete.
        :type metadata_reason: str
        """
        if metadata_reason is None:
            raise ValueError("Invalid value for `metadata_reason`, must not be `None`")

        self._metadata_reason = metadata_reason

    @property
    def modified_date(self):
        """Gets the modified_date of this ArticleComplete.

        Date when article was last modified

        :return: The modified_date of this ArticleComplete.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this ArticleComplete.

        Date when article was last modified

        :param modified_date: The modified_date of this ArticleComplete.
        :type modified_date: str
        """
        if modified_date is None:
            raise ValueError("Invalid value for `modified_date`, must not be `None`")

        self._modified_date = modified_date

    @property
    def references(self):
        """Gets the references of this ArticleComplete.

        List of references

        :return: The references of this ArticleComplete.
        :rtype: List[str]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this ArticleComplete.

        List of references

        :param references: The references of this ArticleComplete.
        :type references: List[str]
        """
        if references is None:
            raise ValueError("Invalid value for `references`, must not be `None`")

        self._references = references

    @property
    def size(self):
        """Gets the size of this ArticleComplete.

        Article size

        :return: The size of this ArticleComplete.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ArticleComplete.

        Article size

        :param size: The size of this ArticleComplete.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def status(self):
        """Gets the status of this ArticleComplete.

        Article status

        :return: The status of this ArticleComplete.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ArticleComplete.

        Article status

        :param status: The status of this ArticleComplete.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this ArticleComplete.

        List of article tags

        :return: The tags of this ArticleComplete.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ArticleComplete.

        List of article tags

        :param tags: The tags of this ArticleComplete.
        :type tags: List[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags

    @property
    def version(self):
        """Gets the version of this ArticleComplete.

        Article version

        :return: The version of this ArticleComplete.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ArticleComplete.

        Article version

        :param version: The version of this ArticleComplete.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def defined_type(self):
        """Gets the defined_type of this ArticleComplete.

        Type of article identifier

        :return: The defined_type of this ArticleComplete.
        :rtype: int
        """
        return self._defined_type

    @defined_type.setter
    def defined_type(self, defined_type):
        """Sets the defined_type of this ArticleComplete.

        Type of article identifier

        :param defined_type: The defined_type of this ArticleComplete.
        :type defined_type: int
        """
        if defined_type is None:
            raise ValueError("Invalid value for `defined_type`, must not be `None`")

        self._defined_type = defined_type

    @property
    def defined_type_name(self):
        """Gets the defined_type_name of this ArticleComplete.

        Name of the article type identifier

        :return: The defined_type_name of this ArticleComplete.
        :rtype: str
        """
        return self._defined_type_name

    @defined_type_name.setter
    def defined_type_name(self, defined_type_name):
        """Sets the defined_type_name of this ArticleComplete.

        Name of the article type identifier

        :param defined_type_name: The defined_type_name of this ArticleComplete.
        :type defined_type_name: str
        """
        if defined_type_name is None:
            raise ValueError("Invalid value for `defined_type_name`, must not be `None`")

        self._defined_type_name = defined_type_name

    @property
    def doi(self):
        """Gets the doi of this ArticleComplete.

        DOI

        :return: The doi of this ArticleComplete.
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this ArticleComplete.

        DOI

        :param doi: The doi of this ArticleComplete.
        :type doi: str
        """
        if doi is None:
            raise ValueError("Invalid value for `doi`, must not be `None`")

        self._doi = doi

    @property
    def group_id(self):
        """Gets the group_id of this ArticleComplete.

        Group ID

        :return: The group_id of this ArticleComplete.
        :rtype: float
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ArticleComplete.

        Group ID

        :param group_id: The group_id of this ArticleComplete.
        :type group_id: float
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def handle(self):
        """Gets the handle of this ArticleComplete.

        Handle

        :return: The handle of this ArticleComplete.
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this ArticleComplete.

        Handle

        :param handle: The handle of this ArticleComplete.
        :type handle: str
        """
        if handle is None:
            raise ValueError("Invalid value for `handle`, must not be `None`")

        self._handle = handle

    @property
    def id(self):
        """Gets the id of this ArticleComplete.

        Unique identifier for article

        :return: The id of this ArticleComplete.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArticleComplete.

        Unique identifier for article

        :param id: The id of this ArticleComplete.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def published_date(self):
        """Gets the published_date of this ArticleComplete.

        Posted date

        :return: The published_date of this ArticleComplete.
        :rtype: str
        """
        return self._published_date

    @published_date.setter
    def published_date(self, published_date):
        """Sets the published_date of this ArticleComplete.

        Posted date

        :param published_date: The published_date of this ArticleComplete.
        :type published_date: str
        """
        if published_date is None:
            raise ValueError("Invalid value for `published_date`, must not be `None`")

        self._published_date = published_date

    @property
    def thumb(self):
        """Gets the thumb of this ArticleComplete.

        Thumbnail image

        :return: The thumb of this ArticleComplete.
        :rtype: str
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """Sets the thumb of this ArticleComplete.

        Thumbnail image

        :param thumb: The thumb of this ArticleComplete.
        :type thumb: str
        """
        if thumb is None:
            raise ValueError("Invalid value for `thumb`, must not be `None`")

        self._thumb = thumb

    @property
    def timeline(self):
        """Gets the timeline of this ArticleComplete.


        :return: The timeline of this ArticleComplete.
        :rtype: Timeline
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this ArticleComplete.


        :param timeline: The timeline of this ArticleComplete.
        :type timeline: Timeline
        """
        if timeline is None:
            raise ValueError("Invalid value for `timeline`, must not be `None`")

        self._timeline = timeline

    @property
    def title(self):
        """Gets the title of this ArticleComplete.

        Title of article

        :return: The title of this ArticleComplete.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ArticleComplete.

        Title of article

        :param title: The title of this ArticleComplete.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def url(self):
        """Gets the url of this ArticleComplete.

        Api endpoint for article

        :return: The url of this ArticleComplete.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ArticleComplete.

        Api endpoint for article

        :param url: The url of this ArticleComplete.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def url_private_api(self):
        """Gets the url_private_api of this ArticleComplete.

        Private Api endpoint for article

        :return: The url_private_api of this ArticleComplete.
        :rtype: str
        """
        return self._url_private_api

    @url_private_api.setter
    def url_private_api(self, url_private_api):
        """Sets the url_private_api of this ArticleComplete.

        Private Api endpoint for article

        :param url_private_api: The url_private_api of this ArticleComplete.
        :type url_private_api: str
        """
        if url_private_api is None:
            raise ValueError("Invalid value for `url_private_api`, must not be `None`")

        self._url_private_api = url_private_api

    @property
    def url_private_html(self):
        """Gets the url_private_html of this ArticleComplete.

        Private site endpoint for article

        :return: The url_private_html of this ArticleComplete.
        :rtype: str
        """
        return self._url_private_html

    @url_private_html.setter
    def url_private_html(self, url_private_html):
        """Sets the url_private_html of this ArticleComplete.

        Private site endpoint for article

        :param url_private_html: The url_private_html of this ArticleComplete.
        :type url_private_html: str
        """
        if url_private_html is None:
            raise ValueError("Invalid value for `url_private_html`, must not be `None`")

        self._url_private_html = url_private_html

    @property
    def url_public_api(self):
        """Gets the url_public_api of this ArticleComplete.

        Public Api endpoint for article

        :return: The url_public_api of this ArticleComplete.
        :rtype: str
        """
        return self._url_public_api

    @url_public_api.setter
    def url_public_api(self, url_public_api):
        """Sets the url_public_api of this ArticleComplete.

        Public Api endpoint for article

        :param url_public_api: The url_public_api of this ArticleComplete.
        :type url_public_api: str
        """
        if url_public_api is None:
            raise ValueError("Invalid value for `url_public_api`, must not be `None`")

        self._url_public_api = url_public_api

    @property
    def url_public_html(self):
        """Gets the url_public_html of this ArticleComplete.

        Public site endpoint for article

        :return: The url_public_html of this ArticleComplete.
        :rtype: str
        """
        return self._url_public_html

    @url_public_html.setter
    def url_public_html(self, url_public_html):
        """Sets the url_public_html of this ArticleComplete.

        Public site endpoint for article

        :param url_public_html: The url_public_html of this ArticleComplete.
        :type url_public_html: str
        """
        if url_public_html is None:
            raise ValueError("Invalid value for `url_public_html`, must not be `None`")

        self._url_public_html = url_public_html
