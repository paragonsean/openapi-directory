# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.timeline import Timeline
from openapi_server import util


class Article(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, defined_type: int=None, defined_type_name: str=None, doi: str=None, group_id: float=None, handle: str=None, id: int=None, published_date: str=None, thumb: str=None, timeline: Timeline=None, title: str=None, url: str=None, url_private_api: str=None, url_private_html: str=None, url_public_api: str=None, url_public_html: str=None):
        """Article - a model defined in OpenAPI

        :param defined_type: The defined_type of this Article.
        :param defined_type_name: The defined_type_name of this Article.
        :param doi: The doi of this Article.
        :param group_id: The group_id of this Article.
        :param handle: The handle of this Article.
        :param id: The id of this Article.
        :param published_date: The published_date of this Article.
        :param thumb: The thumb of this Article.
        :param timeline: The timeline of this Article.
        :param title: The title of this Article.
        :param url: The url of this Article.
        :param url_private_api: The url_private_api of this Article.
        :param url_private_html: The url_private_html of this Article.
        :param url_public_api: The url_public_api of this Article.
        :param url_public_html: The url_public_html of this Article.
        """
        self.openapi_types = {
            'defined_type': int,
            'defined_type_name': str,
            'doi': str,
            'group_id': float,
            'handle': str,
            'id': int,
            'published_date': str,
            'thumb': str,
            'timeline': Timeline,
            'title': str,
            'url': str,
            'url_private_api': str,
            'url_private_html': str,
            'url_public_api': str,
            'url_public_html': str
        }

        self.attribute_map = {
            'defined_type': 'defined_type',
            'defined_type_name': 'defined_type_name',
            'doi': 'doi',
            'group_id': 'group_id',
            'handle': 'handle',
            'id': 'id',
            'published_date': 'published_date',
            'thumb': 'thumb',
            'timeline': 'timeline',
            'title': 'title',
            'url': 'url',
            'url_private_api': 'url_private_api',
            'url_private_html': 'url_private_html',
            'url_public_api': 'url_public_api',
            'url_public_html': 'url_public_html'
        }

        self._defined_type = defined_type
        self._defined_type_name = defined_type_name
        self._doi = doi
        self._group_id = group_id
        self._handle = handle
        self._id = id
        self._published_date = published_date
        self._thumb = thumb
        self._timeline = timeline
        self._title = title
        self._url = url
        self._url_private_api = url_private_api
        self._url_private_html = url_private_html
        self._url_public_api = url_public_api
        self._url_public_html = url_public_html

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Article':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Article of this Article.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def defined_type(self):
        """Gets the defined_type of this Article.

        Type of article identifier

        :return: The defined_type of this Article.
        :rtype: int
        """
        return self._defined_type

    @defined_type.setter
    def defined_type(self, defined_type):
        """Sets the defined_type of this Article.

        Type of article identifier

        :param defined_type: The defined_type of this Article.
        :type defined_type: int
        """
        if defined_type is None:
            raise ValueError("Invalid value for `defined_type`, must not be `None`")

        self._defined_type = defined_type

    @property
    def defined_type_name(self):
        """Gets the defined_type_name of this Article.

        Name of the article type identifier

        :return: The defined_type_name of this Article.
        :rtype: str
        """
        return self._defined_type_name

    @defined_type_name.setter
    def defined_type_name(self, defined_type_name):
        """Sets the defined_type_name of this Article.

        Name of the article type identifier

        :param defined_type_name: The defined_type_name of this Article.
        :type defined_type_name: str
        """
        if defined_type_name is None:
            raise ValueError("Invalid value for `defined_type_name`, must not be `None`")

        self._defined_type_name = defined_type_name

    @property
    def doi(self):
        """Gets the doi of this Article.

        DOI

        :return: The doi of this Article.
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this Article.

        DOI

        :param doi: The doi of this Article.
        :type doi: str
        """
        if doi is None:
            raise ValueError("Invalid value for `doi`, must not be `None`")

        self._doi = doi

    @property
    def group_id(self):
        """Gets the group_id of this Article.

        Group ID

        :return: The group_id of this Article.
        :rtype: float
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Article.

        Group ID

        :param group_id: The group_id of this Article.
        :type group_id: float
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def handle(self):
        """Gets the handle of this Article.

        Handle

        :return: The handle of this Article.
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this Article.

        Handle

        :param handle: The handle of this Article.
        :type handle: str
        """
        if handle is None:
            raise ValueError("Invalid value for `handle`, must not be `None`")

        self._handle = handle

    @property
    def id(self):
        """Gets the id of this Article.

        Unique identifier for article

        :return: The id of this Article.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Article.

        Unique identifier for article

        :param id: The id of this Article.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def published_date(self):
        """Gets the published_date of this Article.

        Posted date

        :return: The published_date of this Article.
        :rtype: str
        """
        return self._published_date

    @published_date.setter
    def published_date(self, published_date):
        """Sets the published_date of this Article.

        Posted date

        :param published_date: The published_date of this Article.
        :type published_date: str
        """
        if published_date is None:
            raise ValueError("Invalid value for `published_date`, must not be `None`")

        self._published_date = published_date

    @property
    def thumb(self):
        """Gets the thumb of this Article.

        Thumbnail image

        :return: The thumb of this Article.
        :rtype: str
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """Sets the thumb of this Article.

        Thumbnail image

        :param thumb: The thumb of this Article.
        :type thumb: str
        """
        if thumb is None:
            raise ValueError("Invalid value for `thumb`, must not be `None`")

        self._thumb = thumb

    @property
    def timeline(self):
        """Gets the timeline of this Article.


        :return: The timeline of this Article.
        :rtype: Timeline
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this Article.


        :param timeline: The timeline of this Article.
        :type timeline: Timeline
        """
        if timeline is None:
            raise ValueError("Invalid value for `timeline`, must not be `None`")

        self._timeline = timeline

    @property
    def title(self):
        """Gets the title of this Article.

        Title of article

        :return: The title of this Article.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Article.

        Title of article

        :param title: The title of this Article.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def url(self):
        """Gets the url of this Article.

        Api endpoint for article

        :return: The url of this Article.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Article.

        Api endpoint for article

        :param url: The url of this Article.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def url_private_api(self):
        """Gets the url_private_api of this Article.

        Private Api endpoint for article

        :return: The url_private_api of this Article.
        :rtype: str
        """
        return self._url_private_api

    @url_private_api.setter
    def url_private_api(self, url_private_api):
        """Sets the url_private_api of this Article.

        Private Api endpoint for article

        :param url_private_api: The url_private_api of this Article.
        :type url_private_api: str
        """
        if url_private_api is None:
            raise ValueError("Invalid value for `url_private_api`, must not be `None`")

        self._url_private_api = url_private_api

    @property
    def url_private_html(self):
        """Gets the url_private_html of this Article.

        Private site endpoint for article

        :return: The url_private_html of this Article.
        :rtype: str
        """
        return self._url_private_html

    @url_private_html.setter
    def url_private_html(self, url_private_html):
        """Sets the url_private_html of this Article.

        Private site endpoint for article

        :param url_private_html: The url_private_html of this Article.
        :type url_private_html: str
        """
        if url_private_html is None:
            raise ValueError("Invalid value for `url_private_html`, must not be `None`")

        self._url_private_html = url_private_html

    @property
    def url_public_api(self):
        """Gets the url_public_api of this Article.

        Public Api endpoint for article

        :return: The url_public_api of this Article.
        :rtype: str
        """
        return self._url_public_api

    @url_public_api.setter
    def url_public_api(self, url_public_api):
        """Sets the url_public_api of this Article.

        Public Api endpoint for article

        :param url_public_api: The url_public_api of this Article.
        :type url_public_api: str
        """
        if url_public_api is None:
            raise ValueError("Invalid value for `url_public_api`, must not be `None`")

        self._url_public_api = url_public_api

    @property
    def url_public_html(self):
        """Gets the url_public_html of this Article.

        Public site endpoint for article

        :return: The url_public_html of this Article.
        :rtype: str
        """
        return self._url_public_html

    @url_public_html.setter
    def url_public_html(self, url_public_html):
        """Sets the url_public_html of this Article.

        Public site endpoint for article

        :param url_public_html: The url_public_html of this Article.
        :type url_public_html: str
        """
        if url_public_html is None:
            raise ValueError("Invalid value for `url_public_html`, must not be `None`")

        self._url_public_html = url_public_html
