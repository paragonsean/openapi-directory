# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthorComplete(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_name: str=None, group_id: int=None, institution_id: int=None, is_public: int=None, job_title: str=None, last_name: str=None, full_name: str=None, id: int=None, is_active: bool=None, orcid_id: str=None, url_name: str=None):
        """AuthorComplete - a model defined in OpenAPI

        :param first_name: The first_name of this AuthorComplete.
        :param group_id: The group_id of this AuthorComplete.
        :param institution_id: The institution_id of this AuthorComplete.
        :param is_public: The is_public of this AuthorComplete.
        :param job_title: The job_title of this AuthorComplete.
        :param last_name: The last_name of this AuthorComplete.
        :param full_name: The full_name of this AuthorComplete.
        :param id: The id of this AuthorComplete.
        :param is_active: The is_active of this AuthorComplete.
        :param orcid_id: The orcid_id of this AuthorComplete.
        :param url_name: The url_name of this AuthorComplete.
        """
        self.openapi_types = {
            'first_name': str,
            'group_id': int,
            'institution_id': int,
            'is_public': int,
            'job_title': str,
            'last_name': str,
            'full_name': str,
            'id': int,
            'is_active': bool,
            'orcid_id': str,
            'url_name': str
        }

        self.attribute_map = {
            'first_name': 'first_name',
            'group_id': 'group_id',
            'institution_id': 'institution_id',
            'is_public': 'is_public',
            'job_title': 'job_title',
            'last_name': 'last_name',
            'full_name': 'full_name',
            'id': 'id',
            'is_active': 'is_active',
            'orcid_id': 'orcid_id',
            'url_name': 'url_name'
        }

        self._first_name = first_name
        self._group_id = group_id
        self._institution_id = institution_id
        self._is_public = is_public
        self._job_title = job_title
        self._last_name = last_name
        self._full_name = full_name
        self._id = id
        self._is_active = is_active
        self._orcid_id = orcid_id
        self._url_name = url_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorComplete':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthorComplete of this AuthorComplete.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self):
        """Gets the first_name of this AuthorComplete.

        First Name

        :return: The first_name of this AuthorComplete.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AuthorComplete.

        First Name

        :param first_name: The first_name of this AuthorComplete.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def group_id(self):
        """Gets the group_id of this AuthorComplete.

        Group id

        :return: The group_id of this AuthorComplete.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this AuthorComplete.

        Group id

        :param group_id: The group_id of this AuthorComplete.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def institution_id(self):
        """Gets the institution_id of this AuthorComplete.

        Institution id

        :return: The institution_id of this AuthorComplete.
        :rtype: int
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """Sets the institution_id of this AuthorComplete.

        Institution id

        :param institution_id: The institution_id of this AuthorComplete.
        :type institution_id: int
        """
        if institution_id is None:
            raise ValueError("Invalid value for `institution_id`, must not be `None`")

        self._institution_id = institution_id

    @property
    def is_public(self):
        """Gets the is_public of this AuthorComplete.

        if 1 then the author has published items

        :return: The is_public of this AuthorComplete.
        :rtype: int
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this AuthorComplete.

        if 1 then the author has published items

        :param is_public: The is_public of this AuthorComplete.
        :type is_public: int
        """
        if is_public is None:
            raise ValueError("Invalid value for `is_public`, must not be `None`")

        self._is_public = is_public

    @property
    def job_title(self):
        """Gets the job_title of this AuthorComplete.

        Job title

        :return: The job_title of this AuthorComplete.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this AuthorComplete.

        Job title

        :param job_title: The job_title of this AuthorComplete.
        :type job_title: str
        """
        if job_title is None:
            raise ValueError("Invalid value for `job_title`, must not be `None`")

        self._job_title = job_title

    @property
    def last_name(self):
        """Gets the last_name of this AuthorComplete.

        Last Name

        :return: The last_name of this AuthorComplete.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AuthorComplete.

        Last Name

        :param last_name: The last_name of this AuthorComplete.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def full_name(self):
        """Gets the full_name of this AuthorComplete.

        Author full name

        :return: The full_name of this AuthorComplete.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this AuthorComplete.

        Author full name

        :param full_name: The full_name of this AuthorComplete.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this AuthorComplete.

        Author id

        :return: The id of this AuthorComplete.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthorComplete.

        Author id

        :param id: The id of this AuthorComplete.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this AuthorComplete.

        True if author has published items

        :return: The is_active of this AuthorComplete.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this AuthorComplete.

        True if author has published items

        :param is_active: The is_active of this AuthorComplete.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def orcid_id(self):
        """Gets the orcid_id of this AuthorComplete.

        Author Orcid

        :return: The orcid_id of this AuthorComplete.
        :rtype: str
        """
        return self._orcid_id

    @orcid_id.setter
    def orcid_id(self, orcid_id):
        """Sets the orcid_id of this AuthorComplete.

        Author Orcid

        :param orcid_id: The orcid_id of this AuthorComplete.
        :type orcid_id: str
        """
        if orcid_id is None:
            raise ValueError("Invalid value for `orcid_id`, must not be `None`")

        self._orcid_id = orcid_id

    @property
    def url_name(self):
        """Gets the url_name of this AuthorComplete.

        Author url name

        :return: The url_name of this AuthorComplete.
        :rtype: str
        """
        return self._url_name

    @url_name.setter
    def url_name(self, url_name):
        """Sets the url_name of this AuthorComplete.

        Author url name

        :param url_name: The url_name of this AuthorComplete.
        :type url_name: str
        """
        if url_name is None:
            raise ValueError("Invalid value for `url_name`, must not be `None`")

        self._url_name = url_name
