# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InstitutionAccountsSearch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, institution_user_id: str=None, is_active: int=None, limit: int=None, offset: int=None, page: int=None, page_size: int=10, search_for: str=None):
        """InstitutionAccountsSearch - a model defined in OpenAPI

        :param email: The email of this InstitutionAccountsSearch.
        :param institution_user_id: The institution_user_id of this InstitutionAccountsSearch.
        :param is_active: The is_active of this InstitutionAccountsSearch.
        :param limit: The limit of this InstitutionAccountsSearch.
        :param offset: The offset of this InstitutionAccountsSearch.
        :param page: The page of this InstitutionAccountsSearch.
        :param page_size: The page_size of this InstitutionAccountsSearch.
        :param search_for: The search_for of this InstitutionAccountsSearch.
        """
        self.openapi_types = {
            'email': str,
            'institution_user_id': str,
            'is_active': int,
            'limit': int,
            'offset': int,
            'page': int,
            'page_size': int,
            'search_for': str
        }

        self.attribute_map = {
            'email': 'email',
            'institution_user_id': 'institution_user_id',
            'is_active': 'is_active',
            'limit': 'limit',
            'offset': 'offset',
            'page': 'page',
            'page_size': 'page_size',
            'search_for': 'search_for'
        }

        self._email = email
        self._institution_user_id = institution_user_id
        self._is_active = is_active
        self._limit = limit
        self._offset = offset
        self._page = page
        self._page_size = page_size
        self._search_for = search_for

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstitutionAccountsSearch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstitutionAccountsSearch of this InstitutionAccountsSearch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this InstitutionAccountsSearch.

        filter by email

        :return: The email of this InstitutionAccountsSearch.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InstitutionAccountsSearch.

        filter by email

        :param email: The email of this InstitutionAccountsSearch.
        :type email: str
        """

        self._email = email

    @property
    def institution_user_id(self):
        """Gets the institution_user_id of this InstitutionAccountsSearch.

        filter by institution_user_id

        :return: The institution_user_id of this InstitutionAccountsSearch.
        :rtype: str
        """
        return self._institution_user_id

    @institution_user_id.setter
    def institution_user_id(self, institution_user_id):
        """Sets the institution_user_id of this InstitutionAccountsSearch.

        filter by institution_user_id

        :param institution_user_id: The institution_user_id of this InstitutionAccountsSearch.
        :type institution_user_id: str
        """

        self._institution_user_id = institution_user_id

    @property
    def is_active(self):
        """Gets the is_active of this InstitutionAccountsSearch.

        Filter by active status

        :return: The is_active of this InstitutionAccountsSearch.
        :rtype: int
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this InstitutionAccountsSearch.

        Filter by active status

        :param is_active: The is_active of this InstitutionAccountsSearch.
        :type is_active: int
        """
        if is_active is not None and is_active > 1:
            raise ValueError("Invalid value for `is_active`, must be a value less than or equal to `1`")
        if is_active is not None and is_active < 0:
            raise ValueError("Invalid value for `is_active`, must be a value greater than or equal to `0`")

        self._is_active = is_active

    @property
    def limit(self):
        """Gets the limit of this InstitutionAccountsSearch.

        Number of results included on a page. Used for pagination with query

        :return: The limit of this InstitutionAccountsSearch.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this InstitutionAccountsSearch.

        Number of results included on a page. Used for pagination with query

        :param limit: The limit of this InstitutionAccountsSearch.
        :type limit: int
        """
        if limit is not None and limit > 1000:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `1000`")
        if limit is not None and limit < 1:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this InstitutionAccountsSearch.

        Where to start the listing(the offset of the first result). Used for pagination with limit

        :return: The offset of this InstitutionAccountsSearch.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this InstitutionAccountsSearch.

        Where to start the listing(the offset of the first result). Used for pagination with limit

        :param offset: The offset of this InstitutionAccountsSearch.
        :type offset: int
        """
        if offset is not None and offset > 5000:
            raise ValueError("Invalid value for `offset`, must be a value less than or equal to `5000`")
        if offset is not None and offset < 0:
            raise ValueError("Invalid value for `offset`, must be a value greater than or equal to `0`")

        self._offset = offset

    @property
    def page(self):
        """Gets the page of this InstitutionAccountsSearch.

        Page number. Used for pagination with page_size

        :return: The page of this InstitutionAccountsSearch.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this InstitutionAccountsSearch.

        Page number. Used for pagination with page_size

        :param page: The page of this InstitutionAccountsSearch.
        :type page: int
        """
        if page is not None and page > 5000:
            raise ValueError("Invalid value for `page`, must be a value less than or equal to `5000`")
        if page is not None and page < 1:
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `1`")

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this InstitutionAccountsSearch.

        The number of results included on a page. Used for pagination with page

        :return: The page_size of this InstitutionAccountsSearch.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this InstitutionAccountsSearch.

        The number of results included on a page. Used for pagination with page

        :param page_size: The page_size of this InstitutionAccountsSearch.
        :type page_size: int
        """
        if page_size is not None and page_size > 1000:
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `1000`")
        if page_size is not None and page_size < 1:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `1`")

        self._page_size = page_size

    @property
    def search_for(self):
        """Gets the search_for of this InstitutionAccountsSearch.

        Search term

        :return: The search_for of this InstitutionAccountsSearch.
        :rtype: str
        """
        return self._search_for

    @search_for.setter
    def search_for(self, search_for):
        """Sets the search_for of this InstitutionAccountsSearch.

        Search term

        :param search_for: The search_for of this InstitutionAccountsSearch.
        :type search_for: str
        """

        self._search_for = search_for
