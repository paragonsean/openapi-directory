# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id: int=None, is_active: bool=None):
        """AccountUpdate - a model defined in OpenAPI

        :param group_id: The group_id of this AccountUpdate.
        :param is_active: The is_active of this AccountUpdate.
        """
        self.openapi_types = {
            'group_id': int,
            'is_active': bool
        }

        self.attribute_map = {
            'group_id': 'group_id',
            'is_active': 'is_active'
        }

        self._group_id = group_id
        self._is_active = is_active

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountUpdate of this AccountUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self):
        """Gets the group_id of this AccountUpdate.

        Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups

        :return: The group_id of this AccountUpdate.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this AccountUpdate.

        Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups

        :param group_id: The group_id of this AccountUpdate.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def is_active(self):
        """Gets the is_active of this AccountUpdate.

        Is account active

        :return: The is_active of this AccountUpdate.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this AccountUpdate.

        Is account active

        :param is_active: The is_active of this AccountUpdate.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active
