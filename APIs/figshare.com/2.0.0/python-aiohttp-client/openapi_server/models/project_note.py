# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectNote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abstract: str=None, created_date: str=None, id: int=None, modified_date: str=None, user_id: int=None, user_name: str=None):
        """ProjectNote - a model defined in OpenAPI

        :param abstract: The abstract of this ProjectNote.
        :param created_date: The created_date of this ProjectNote.
        :param id: The id of this ProjectNote.
        :param modified_date: The modified_date of this ProjectNote.
        :param user_id: The user_id of this ProjectNote.
        :param user_name: The user_name of this ProjectNote.
        """
        self.openapi_types = {
            'abstract': str,
            'created_date': str,
            'id': int,
            'modified_date': str,
            'user_id': int,
            'user_name': str
        }

        self.attribute_map = {
            'abstract': 'abstract',
            'created_date': 'created_date',
            'id': 'id',
            'modified_date': 'modified_date',
            'user_id': 'user_id',
            'user_name': 'user_name'
        }

        self._abstract = abstract
        self._created_date = created_date
        self._id = id
        self._modified_date = modified_date
        self._user_id = user_id
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectNote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectNote of this ProjectNote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abstract(self):
        """Gets the abstract of this ProjectNote.

        Note Abstract - short/truncated content

        :return: The abstract of this ProjectNote.
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """Sets the abstract of this ProjectNote.

        Note Abstract - short/truncated content

        :param abstract: The abstract of this ProjectNote.
        :type abstract: str
        """
        if abstract is None:
            raise ValueError("Invalid value for `abstract`, must not be `None`")

        self._abstract = abstract

    @property
    def created_date(self):
        """Gets the created_date of this ProjectNote.

        Date when note was created

        :return: The created_date of this ProjectNote.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ProjectNote.

        Date when note was created

        :param created_date: The created_date of this ProjectNote.
        :type created_date: str
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")

        self._created_date = created_date

    @property
    def id(self):
        """Gets the id of this ProjectNote.

        Project note id

        :return: The id of this ProjectNote.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectNote.

        Project note id

        :param id: The id of this ProjectNote.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def modified_date(self):
        """Gets the modified_date of this ProjectNote.

        Date when note was last modified

        :return: The modified_date of this ProjectNote.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this ProjectNote.

        Date when note was last modified

        :param modified_date: The modified_date of this ProjectNote.
        :type modified_date: str
        """
        if modified_date is None:
            raise ValueError("Invalid value for `modified_date`, must not be `None`")

        self._modified_date = modified_date

    @property
    def user_id(self):
        """Gets the user_id of this ProjectNote.

        User who wrote the note

        :return: The user_id of this ProjectNote.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ProjectNote.

        User who wrote the note

        :param user_id: The user_id of this ProjectNote.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this ProjectNote.

        Username of the one who wrote the note

        :return: The user_name of this ProjectNote.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ProjectNote.

        Username of the one who wrote the note

        :param user_name: The user_name of this ProjectNote.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")

        self._user_name = user_name
