# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocationWarningsUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: str=None, warnings: List[str]=None):
        """LocationWarningsUpdate - a model defined in OpenAPI

        :param location: The location of this LocationWarningsUpdate.
        :param warnings: The warnings of this LocationWarningsUpdate.
        """
        self.openapi_types = {
            'location': str,
            'warnings': List[str]
        }

        self.attribute_map = {
            'location': 'location',
            'warnings': 'warnings'
        }

        self._location = location
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationWarningsUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationWarningsUpdate of this LocationWarningsUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this LocationWarningsUpdate.

        Url for entity

        :return: The location of this LocationWarningsUpdate.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this LocationWarningsUpdate.

        Url for entity

        :param location: The location of this LocationWarningsUpdate.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def warnings(self):
        """Gets the warnings of this LocationWarningsUpdate.

        Issues encountered during the operation

        :return: The warnings of this LocationWarningsUpdate.
        :rtype: List[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this LocationWarningsUpdate.

        Issues encountered during the operation

        :param warnings: The warnings of this LocationWarningsUpdate.
        :type warnings: List[str]
        """
        if warnings is None:
            raise ValueError("Invalid value for `warnings`, must not be `None`")

        self._warnings = warnings
