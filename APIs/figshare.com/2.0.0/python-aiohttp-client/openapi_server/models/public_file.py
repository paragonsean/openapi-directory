# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublicFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, computed_md5: str=None, download_url: str=None, id: int=None, is_link_only: bool=None, name: str=None, size: int=None, supplied_md5: str=None):
        """PublicFile - a model defined in OpenAPI

        :param computed_md5: The computed_md5 of this PublicFile.
        :param download_url: The download_url of this PublicFile.
        :param id: The id of this PublicFile.
        :param is_link_only: The is_link_only of this PublicFile.
        :param name: The name of this PublicFile.
        :param size: The size of this PublicFile.
        :param supplied_md5: The supplied_md5 of this PublicFile.
        """
        self.openapi_types = {
            'computed_md5': str,
            'download_url': str,
            'id': int,
            'is_link_only': bool,
            'name': str,
            'size': int,
            'supplied_md5': str
        }

        self.attribute_map = {
            'computed_md5': 'computed_md5',
            'download_url': 'download_url',
            'id': 'id',
            'is_link_only': 'is_link_only',
            'name': 'name',
            'size': 'size',
            'supplied_md5': 'supplied_md5'
        }

        self._computed_md5 = computed_md5
        self._download_url = download_url
        self._id = id
        self._is_link_only = is_link_only
        self._name = name
        self._size = size
        self._supplied_md5 = supplied_md5

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicFile of this PublicFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def computed_md5(self):
        """Gets the computed_md5 of this PublicFile.

        File computed md5

        :return: The computed_md5 of this PublicFile.
        :rtype: str
        """
        return self._computed_md5

    @computed_md5.setter
    def computed_md5(self, computed_md5):
        """Sets the computed_md5 of this PublicFile.

        File computed md5

        :param computed_md5: The computed_md5 of this PublicFile.
        :type computed_md5: str
        """
        if computed_md5 is None:
            raise ValueError("Invalid value for `computed_md5`, must not be `None`")

        self._computed_md5 = computed_md5

    @property
    def download_url(self):
        """Gets the download_url of this PublicFile.

        Url for file download

        :return: The download_url of this PublicFile.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this PublicFile.

        Url for file download

        :param download_url: The download_url of this PublicFile.
        :type download_url: str
        """
        if download_url is None:
            raise ValueError("Invalid value for `download_url`, must not be `None`")

        self._download_url = download_url

    @property
    def id(self):
        """Gets the id of this PublicFile.

        File id

        :return: The id of this PublicFile.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublicFile.

        File id

        :param id: The id of this PublicFile.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_link_only(self):
        """Gets the is_link_only of this PublicFile.

        True if file is hosted somewhere else

        :return: The is_link_only of this PublicFile.
        :rtype: bool
        """
        return self._is_link_only

    @is_link_only.setter
    def is_link_only(self, is_link_only):
        """Sets the is_link_only of this PublicFile.

        True if file is hosted somewhere else

        :param is_link_only: The is_link_only of this PublicFile.
        :type is_link_only: bool
        """
        if is_link_only is None:
            raise ValueError("Invalid value for `is_link_only`, must not be `None`")

        self._is_link_only = is_link_only

    @property
    def name(self):
        """Gets the name of this PublicFile.

        File name

        :return: The name of this PublicFile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublicFile.

        File name

        :param name: The name of this PublicFile.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def size(self):
        """Gets the size of this PublicFile.

        File size

        :return: The size of this PublicFile.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PublicFile.

        File size

        :param size: The size of this PublicFile.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def supplied_md5(self):
        """Gets the supplied_md5 of this PublicFile.

        File supplied md5

        :return: The supplied_md5 of this PublicFile.
        :rtype: str
        """
        return self._supplied_md5

    @supplied_md5.setter
    def supplied_md5(self, supplied_md5):
        """Sets the supplied_md5 of this PublicFile.

        File supplied md5

        :param supplied_md5: The supplied_md5 of this PublicFile.
        :type supplied_md5: str
        """
        if supplied_md5 is None:
            raise ValueError("Invalid value for `supplied_md5`, must not be `None`")

        self._supplied_md5 = supplied_md5
