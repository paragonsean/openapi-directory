# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocationWarnings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_id: int=None, location: str=None, warnings: List[str]=None):
        """LocationWarnings - a model defined in OpenAPI

        :param entity_id: The entity_id of this LocationWarnings.
        :param location: The location of this LocationWarnings.
        :param warnings: The warnings of this LocationWarnings.
        """
        self.openapi_types = {
            'entity_id': int,
            'location': str,
            'warnings': List[str]
        }

        self.attribute_map = {
            'entity_id': 'entity_id',
            'location': 'location',
            'warnings': 'warnings'
        }

        self._entity_id = entity_id
        self._location = location
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationWarnings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationWarnings of this LocationWarnings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_id(self):
        """Gets the entity_id of this LocationWarnings.

        Figshare ID of the entity

        :return: The entity_id of this LocationWarnings.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this LocationWarnings.

        Figshare ID of the entity

        :param entity_id: The entity_id of this LocationWarnings.
        :type entity_id: int
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")

        self._entity_id = entity_id

    @property
    def location(self):
        """Gets the location of this LocationWarnings.

        Url for entity

        :return: The location of this LocationWarnings.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this LocationWarnings.

        Url for entity

        :param location: The location of this LocationWarnings.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def warnings(self):
        """Gets the warnings of this LocationWarnings.

        Issues encountered during the operation

        :return: The warnings of this LocationWarnings.
        :rtype: List[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this LocationWarnings.

        Issues encountered during the operation

        :param warnings: The warnings of this LocationWarnings.
        :type warnings: List[str]
        """
        if warnings is None:
            raise ValueError("Invalid value for `warnings`, must not be `None`")

        self._warnings = warnings
