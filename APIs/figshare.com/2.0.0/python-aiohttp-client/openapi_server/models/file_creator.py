# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FileCreator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, link: str=None, md5: str=None, name: str=None, size: int=None):
        """FileCreator - a model defined in OpenAPI

        :param link: The link of this FileCreator.
        :param md5: The md5 of this FileCreator.
        :param name: The name of this FileCreator.
        :param size: The size of this FileCreator.
        """
        self.openapi_types = {
            'link': str,
            'md5': str,
            'name': str,
            'size': int
        }

        self.attribute_map = {
            'link': 'link',
            'md5': 'md5',
            'name': 'name',
            'size': 'size'
        }

        self._link = link
        self._md5 = md5
        self._name = name
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileCreator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileCreator of this FileCreator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def link(self):
        """Gets the link of this FileCreator.

        Url for an existing file that will not be uploaded to Figshare

        :return: The link of this FileCreator.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this FileCreator.

        Url for an existing file that will not be uploaded to Figshare

        :param link: The link of this FileCreator.
        :type link: str
        """

        self._link = link

    @property
    def md5(self):
        """Gets the md5 of this FileCreator.

        MD5 sum pre-computed on client side.

        :return: The md5 of this FileCreator.
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this FileCreator.

        MD5 sum pre-computed on client side.

        :param md5: The md5 of this FileCreator.
        :type md5: str
        """

        self._md5 = md5

    @property
    def name(self):
        """Gets the name of this FileCreator.

        File name including the extension; can be omitted only for linked files.

        :return: The name of this FileCreator.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileCreator.

        File name including the extension; can be omitted only for linked files.

        :param name: The name of this FileCreator.
        :type name: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this FileCreator.

        File size in bytes; can be omitted only for linked files.

        :return: The size of this FileCreator.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FileCreator.

        File size in bytes; can be omitted only for linked files.

        :param size: The size of this FileCreator.
        :type size: int
        """

        self._size = size
