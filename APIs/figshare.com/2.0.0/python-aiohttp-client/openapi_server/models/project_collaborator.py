# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectCollaborator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, role_name: str=None, status: str=None, user_id: int=None):
        """ProjectCollaborator - a model defined in OpenAPI

        :param name: The name of this ProjectCollaborator.
        :param role_name: The role_name of this ProjectCollaborator.
        :param status: The status of this ProjectCollaborator.
        :param user_id: The user_id of this ProjectCollaborator.
        """
        self.openapi_types = {
            'name': str,
            'role_name': str,
            'status': str,
            'user_id': int
        }

        self.attribute_map = {
            'name': 'name',
            'role_name': 'role_name',
            'status': 'status',
            'user_id': 'user_id'
        }

        self._name = name
        self._role_name = role_name
        self._status = status
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectCollaborator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectCollaborator of this ProjectCollaborator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ProjectCollaborator.

        Collaborator name

        :return: The name of this ProjectCollaborator.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectCollaborator.

        Collaborator name

        :param name: The name of this ProjectCollaborator.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def role_name(self):
        """Gets the role_name of this ProjectCollaborator.

        Collaborator role

        :return: The role_name of this ProjectCollaborator.
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this ProjectCollaborator.

        Collaborator role

        :param role_name: The role_name of this ProjectCollaborator.
        :type role_name: str
        """
        if role_name is None:
            raise ValueError("Invalid value for `role_name`, must not be `None`")

        self._role_name = role_name

    @property
    def status(self):
        """Gets the status of this ProjectCollaborator.

        Status of collaborator invitation

        :return: The status of this ProjectCollaborator.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProjectCollaborator.

        Status of collaborator invitation

        :param status: The status of this ProjectCollaborator.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def user_id(self):
        """Gets the user_id of this ProjectCollaborator.

        Collaborator id

        :return: The user_id of this ProjectCollaborator.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ProjectCollaborator.

        Collaborator id

        :param user_id: The user_id of this ProjectCollaborator.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
