# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrivateFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_attached_to_public_version: bool=None, preview_state: str=None, status: str=None, upload_token: str=None, upload_url: str=None, viewer_type: str=None, computed_md5: str=None, download_url: str=None, id: int=None, is_link_only: bool=None, name: str=None, size: int=None, supplied_md5: str=None):
        """PrivateFile - a model defined in OpenAPI

        :param is_attached_to_public_version: The is_attached_to_public_version of this PrivateFile.
        :param preview_state: The preview_state of this PrivateFile.
        :param status: The status of this PrivateFile.
        :param upload_token: The upload_token of this PrivateFile.
        :param upload_url: The upload_url of this PrivateFile.
        :param viewer_type: The viewer_type of this PrivateFile.
        :param computed_md5: The computed_md5 of this PrivateFile.
        :param download_url: The download_url of this PrivateFile.
        :param id: The id of this PrivateFile.
        :param is_link_only: The is_link_only of this PrivateFile.
        :param name: The name of this PrivateFile.
        :param size: The size of this PrivateFile.
        :param supplied_md5: The supplied_md5 of this PrivateFile.
        """
        self.openapi_types = {
            'is_attached_to_public_version': bool,
            'preview_state': str,
            'status': str,
            'upload_token': str,
            'upload_url': str,
            'viewer_type': str,
            'computed_md5': str,
            'download_url': str,
            'id': int,
            'is_link_only': bool,
            'name': str,
            'size': int,
            'supplied_md5': str
        }

        self.attribute_map = {
            'is_attached_to_public_version': 'is_attached_to_public_version',
            'preview_state': 'preview_state',
            'status': 'status',
            'upload_token': 'upload_token',
            'upload_url': 'upload_url',
            'viewer_type': 'viewer_type',
            'computed_md5': 'computed_md5',
            'download_url': 'download_url',
            'id': 'id',
            'is_link_only': 'is_link_only',
            'name': 'name',
            'size': 'size',
            'supplied_md5': 'supplied_md5'
        }

        self._is_attached_to_public_version = is_attached_to_public_version
        self._preview_state = preview_state
        self._status = status
        self._upload_token = upload_token
        self._upload_url = upload_url
        self._viewer_type = viewer_type
        self._computed_md5 = computed_md5
        self._download_url = download_url
        self._id = id
        self._is_link_only = is_link_only
        self._name = name
        self._size = size
        self._supplied_md5 = supplied_md5

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateFile of this PrivateFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_attached_to_public_version(self):
        """Gets the is_attached_to_public_version of this PrivateFile.

        True if the file is attached to a public item version

        :return: The is_attached_to_public_version of this PrivateFile.
        :rtype: bool
        """
        return self._is_attached_to_public_version

    @is_attached_to_public_version.setter
    def is_attached_to_public_version(self, is_attached_to_public_version):
        """Sets the is_attached_to_public_version of this PrivateFile.

        True if the file is attached to a public item version

        :param is_attached_to_public_version: The is_attached_to_public_version of this PrivateFile.
        :type is_attached_to_public_version: bool
        """
        if is_attached_to_public_version is None:
            raise ValueError("Invalid value for `is_attached_to_public_version`, must not be `None`")

        self._is_attached_to_public_version = is_attached_to_public_version

    @property
    def preview_state(self):
        """Gets the preview_state of this PrivateFile.

        File preview state

        :return: The preview_state of this PrivateFile.
        :rtype: str
        """
        return self._preview_state

    @preview_state.setter
    def preview_state(self, preview_state):
        """Sets the preview_state of this PrivateFile.

        File preview state

        :param preview_state: The preview_state of this PrivateFile.
        :type preview_state: str
        """
        if preview_state is None:
            raise ValueError("Invalid value for `preview_state`, must not be `None`")

        self._preview_state = preview_state

    @property
    def status(self):
        """Gets the status of this PrivateFile.

        Status for file upload

        :return: The status of this PrivateFile.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PrivateFile.

        Status for file upload

        :param status: The status of this PrivateFile.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def upload_token(self):
        """Gets the upload_token of this PrivateFile.

        Token for file upload

        :return: The upload_token of this PrivateFile.
        :rtype: str
        """
        return self._upload_token

    @upload_token.setter
    def upload_token(self, upload_token):
        """Sets the upload_token of this PrivateFile.

        Token for file upload

        :param upload_token: The upload_token of this PrivateFile.
        :type upload_token: str
        """
        if upload_token is None:
            raise ValueError("Invalid value for `upload_token`, must not be `None`")

        self._upload_token = upload_token

    @property
    def upload_url(self):
        """Gets the upload_url of this PrivateFile.

        Upload url for file

        :return: The upload_url of this PrivateFile.
        :rtype: str
        """
        return self._upload_url

    @upload_url.setter
    def upload_url(self, upload_url):
        """Sets the upload_url of this PrivateFile.

        Upload url for file

        :param upload_url: The upload_url of this PrivateFile.
        :type upload_url: str
        """
        if upload_url is None:
            raise ValueError("Invalid value for `upload_url`, must not be `None`")

        self._upload_url = upload_url

    @property
    def viewer_type(self):
        """Gets the viewer_type of this PrivateFile.

        File viewer type

        :return: The viewer_type of this PrivateFile.
        :rtype: str
        """
        return self._viewer_type

    @viewer_type.setter
    def viewer_type(self, viewer_type):
        """Sets the viewer_type of this PrivateFile.

        File viewer type

        :param viewer_type: The viewer_type of this PrivateFile.
        :type viewer_type: str
        """
        if viewer_type is None:
            raise ValueError("Invalid value for `viewer_type`, must not be `None`")

        self._viewer_type = viewer_type

    @property
    def computed_md5(self):
        """Gets the computed_md5 of this PrivateFile.

        File computed md5

        :return: The computed_md5 of this PrivateFile.
        :rtype: str
        """
        return self._computed_md5

    @computed_md5.setter
    def computed_md5(self, computed_md5):
        """Sets the computed_md5 of this PrivateFile.

        File computed md5

        :param computed_md5: The computed_md5 of this PrivateFile.
        :type computed_md5: str
        """
        if computed_md5 is None:
            raise ValueError("Invalid value for `computed_md5`, must not be `None`")

        self._computed_md5 = computed_md5

    @property
    def download_url(self):
        """Gets the download_url of this PrivateFile.

        Url for file download

        :return: The download_url of this PrivateFile.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this PrivateFile.

        Url for file download

        :param download_url: The download_url of this PrivateFile.
        :type download_url: str
        """
        if download_url is None:
            raise ValueError("Invalid value for `download_url`, must not be `None`")

        self._download_url = download_url

    @property
    def id(self):
        """Gets the id of this PrivateFile.

        File id

        :return: The id of this PrivateFile.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrivateFile.

        File id

        :param id: The id of this PrivateFile.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_link_only(self):
        """Gets the is_link_only of this PrivateFile.

        True if file is hosted somewhere else

        :return: The is_link_only of this PrivateFile.
        :rtype: bool
        """
        return self._is_link_only

    @is_link_only.setter
    def is_link_only(self, is_link_only):
        """Sets the is_link_only of this PrivateFile.

        True if file is hosted somewhere else

        :param is_link_only: The is_link_only of this PrivateFile.
        :type is_link_only: bool
        """
        if is_link_only is None:
            raise ValueError("Invalid value for `is_link_only`, must not be `None`")

        self._is_link_only = is_link_only

    @property
    def name(self):
        """Gets the name of this PrivateFile.

        File name

        :return: The name of this PrivateFile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrivateFile.

        File name

        :param name: The name of this PrivateFile.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def size(self):
        """Gets the size of this PrivateFile.

        File size

        :return: The size of this PrivateFile.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PrivateFile.

        File size

        :param size: The size of this PrivateFile.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def supplied_md5(self):
        """Gets the supplied_md5 of this PrivateFile.

        File supplied md5

        :return: The supplied_md5 of this PrivateFile.
        :rtype: str
        """
        return self._supplied_md5

    @supplied_md5.setter
    def supplied_md5(self, supplied_md5):
        """Sets the supplied_md5 of this PrivateFile.

        File supplied md5

        :param supplied_md5: The supplied_md5 of this PrivateFile.
        :type supplied_md5: str
        """
        if supplied_md5 is None:
            raise ValueError("Invalid value for `supplied_md5`, must not be `None`")

        self._supplied_md5 = supplied_md5
