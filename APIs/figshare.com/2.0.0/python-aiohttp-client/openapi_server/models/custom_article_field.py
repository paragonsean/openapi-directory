# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomArticleField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_mandatory: bool=None, name: str=None, value: str=None):
        """CustomArticleField - a model defined in OpenAPI

        :param is_mandatory: The is_mandatory of this CustomArticleField.
        :param name: The name of this CustomArticleField.
        :param value: The value of this CustomArticleField.
        """
        self.openapi_types = {
            'is_mandatory': bool,
            'name': str,
            'value': str
        }

        self.attribute_map = {
            'is_mandatory': 'is_mandatory',
            'name': 'name',
            'value': 'value'
        }

        self._is_mandatory = is_mandatory
        self._name = name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomArticleField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomArticleField of this CustomArticleField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this CustomArticleField.

        True if field completion is mandatory

        :return: The is_mandatory of this CustomArticleField.
        :rtype: bool
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this CustomArticleField.

        True if field completion is mandatory

        :param is_mandatory: The is_mandatory of this CustomArticleField.
        :type is_mandatory: bool
        """
        if is_mandatory is None:
            raise ValueError("Invalid value for `is_mandatory`, must not be `None`")

        self._is_mandatory = is_mandatory

    @property
    def name(self):
        """Gets the name of this CustomArticleField.

        Custom  metadata name

        :return: The name of this CustomArticleField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomArticleField.

        Custom  metadata name

        :param name: The name of this CustomArticleField.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def value(self):
        """Gets the value of this CustomArticleField.

        Custom metadata value

        :return: The value of this CustomArticleField.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CustomArticleField.

        Custom metadata value

        :param value: The value of this CustomArticleField.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
