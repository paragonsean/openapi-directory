# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_article_field_add import CustomArticleFieldAdd
from openapi_server.models.funding_create import FundingCreate
from openapi_server.models.timeline_update import TimelineUpdate
from openapi_server import util


class CollectionUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, articles: List[int]=None, authors: List[object]=[], categories: List[int]=[], categories_by_source_id: List[str]=[], custom_fields: object=None, custom_fields_list: List[CustomArticleFieldAdd]=None, description: str='', doi: str='', funding: str='', funding_list: List[FundingCreate]=None, group_id: int=None, handle: str='', keywords: List[str]=[], references: List[str]=[], resource_doi: str='', resource_id: str=None, resource_link: str=None, resource_title: str='', resource_version: int=None, tags: List[str]=[], timeline: TimelineUpdate=None, title: str=None):
        """CollectionUpdate - a model defined in OpenAPI

        :param articles: The articles of this CollectionUpdate.
        :param authors: The authors of this CollectionUpdate.
        :param categories: The categories of this CollectionUpdate.
        :param categories_by_source_id: The categories_by_source_id of this CollectionUpdate.
        :param custom_fields: The custom_fields of this CollectionUpdate.
        :param custom_fields_list: The custom_fields_list of this CollectionUpdate.
        :param description: The description of this CollectionUpdate.
        :param doi: The doi of this CollectionUpdate.
        :param funding: The funding of this CollectionUpdate.
        :param funding_list: The funding_list of this CollectionUpdate.
        :param group_id: The group_id of this CollectionUpdate.
        :param handle: The handle of this CollectionUpdate.
        :param keywords: The keywords of this CollectionUpdate.
        :param references: The references of this CollectionUpdate.
        :param resource_doi: The resource_doi of this CollectionUpdate.
        :param resource_id: The resource_id of this CollectionUpdate.
        :param resource_link: The resource_link of this CollectionUpdate.
        :param resource_title: The resource_title of this CollectionUpdate.
        :param resource_version: The resource_version of this CollectionUpdate.
        :param tags: The tags of this CollectionUpdate.
        :param timeline: The timeline of this CollectionUpdate.
        :param title: The title of this CollectionUpdate.
        """
        self.openapi_types = {
            'articles': List[int],
            'authors': List[object],
            'categories': List[int],
            'categories_by_source_id': List[str],
            'custom_fields': object,
            'custom_fields_list': List[CustomArticleFieldAdd],
            'description': str,
            'doi': str,
            'funding': str,
            'funding_list': List[FundingCreate],
            'group_id': int,
            'handle': str,
            'keywords': List[str],
            'references': List[str],
            'resource_doi': str,
            'resource_id': str,
            'resource_link': str,
            'resource_title': str,
            'resource_version': int,
            'tags': List[str],
            'timeline': TimelineUpdate,
            'title': str
        }

        self.attribute_map = {
            'articles': 'articles',
            'authors': 'authors',
            'categories': 'categories',
            'categories_by_source_id': 'categories_by_source_id',
            'custom_fields': 'custom_fields',
            'custom_fields_list': 'custom_fields_list',
            'description': 'description',
            'doi': 'doi',
            'funding': 'funding',
            'funding_list': 'funding_list',
            'group_id': 'group_id',
            'handle': 'handle',
            'keywords': 'keywords',
            'references': 'references',
            'resource_doi': 'resource_doi',
            'resource_id': 'resource_id',
            'resource_link': 'resource_link',
            'resource_title': 'resource_title',
            'resource_version': 'resource_version',
            'tags': 'tags',
            'timeline': 'timeline',
            'title': 'title'
        }

        self._articles = articles
        self._authors = authors
        self._categories = categories
        self._categories_by_source_id = categories_by_source_id
        self._custom_fields = custom_fields
        self._custom_fields_list = custom_fields_list
        self._description = description
        self._doi = doi
        self._funding = funding
        self._funding_list = funding_list
        self._group_id = group_id
        self._handle = handle
        self._keywords = keywords
        self._references = references
        self._resource_doi = resource_doi
        self._resource_id = resource_id
        self._resource_link = resource_link
        self._resource_title = resource_title
        self._resource_version = resource_version
        self._tags = tags
        self._timeline = timeline
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollectionUpdate of this CollectionUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def articles(self):
        """Gets the articles of this CollectionUpdate.

        List of articles to be associated with the collection

        :return: The articles of this CollectionUpdate.
        :rtype: List[int]
        """
        return self._articles

    @articles.setter
    def articles(self, articles):
        """Sets the articles of this CollectionUpdate.

        List of articles to be associated with the collection

        :param articles: The articles of this CollectionUpdate.
        :type articles: List[int]
        """

        self._articles = articles

    @property
    def authors(self):
        """Gets the authors of this CollectionUpdate.

        List of authors to be associated with the collection. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.

        :return: The authors of this CollectionUpdate.
        :rtype: List[object]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this CollectionUpdate.

        List of authors to be associated with the collection. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.

        :param authors: The authors of this CollectionUpdate.
        :type authors: List[object]
        """

        self._authors = authors

    @property
    def categories(self):
        """Gets the categories of this CollectionUpdate.

        List of category ids to be associated with the collection (e.g [1, 23, 33, 66])

        :return: The categories of this CollectionUpdate.
        :rtype: List[int]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this CollectionUpdate.

        List of category ids to be associated with the collection (e.g [1, 23, 33, 66])

        :param categories: The categories of this CollectionUpdate.
        :type categories: List[int]
        """

        self._categories = categories

    @property
    def categories_by_source_id(self):
        """Gets the categories_by_source_id of this CollectionUpdate.

        List of category source ids to be associated with the article, supersedes the categories property

        :return: The categories_by_source_id of this CollectionUpdate.
        :rtype: List[str]
        """
        return self._categories_by_source_id

    @categories_by_source_id.setter
    def categories_by_source_id(self, categories_by_source_id):
        """Sets the categories_by_source_id of this CollectionUpdate.

        List of category source ids to be associated with the article, supersedes the categories property

        :param categories_by_source_id: The categories_by_source_id of this CollectionUpdate.
        :type categories_by_source_id: List[str]
        """

        self._categories_by_source_id = categories_by_source_id

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CollectionUpdate.

        List of key, values pairs to be associated with the collection

        :return: The custom_fields of this CollectionUpdate.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CollectionUpdate.

        List of key, values pairs to be associated with the collection

        :param custom_fields: The custom_fields of this CollectionUpdate.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def custom_fields_list(self):
        """Gets the custom_fields_list of this CollectionUpdate.

        List of custom fields values, supersedes custom_fields parameter

        :return: The custom_fields_list of this CollectionUpdate.
        :rtype: List[CustomArticleFieldAdd]
        """
        return self._custom_fields_list

    @custom_fields_list.setter
    def custom_fields_list(self, custom_fields_list):
        """Sets the custom_fields_list of this CollectionUpdate.

        List of custom fields values, supersedes custom_fields parameter

        :param custom_fields_list: The custom_fields_list of this CollectionUpdate.
        :type custom_fields_list: List[CustomArticleFieldAdd]
        """

        self._custom_fields_list = custom_fields_list

    @property
    def description(self):
        """Gets the description of this CollectionUpdate.

        The collection description. In a publisher case, usually this is the remote collection description

        :return: The description of this CollectionUpdate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CollectionUpdate.

        The collection description. In a publisher case, usually this is the remote collection description

        :param description: The description of this CollectionUpdate.
        :type description: str
        """
        if description is not None and len(description) > 10000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `10000`")

        self._description = description

    @property
    def doi(self):
        """Gets the doi of this CollectionUpdate.

        Not applicable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system.

        :return: The doi of this CollectionUpdate.
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this CollectionUpdate.

        Not applicable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system.

        :param doi: The doi of this CollectionUpdate.
        :type doi: str
        """

        self._doi = doi

    @property
    def funding(self):
        """Gets the funding of this CollectionUpdate.

        Grant number or funding authority

        :return: The funding of this CollectionUpdate.
        :rtype: str
        """
        return self._funding

    @funding.setter
    def funding(self, funding):
        """Sets the funding of this CollectionUpdate.

        Grant number or funding authority

        :param funding: The funding of this CollectionUpdate.
        :type funding: str
        """

        self._funding = funding

    @property
    def funding_list(self):
        """Gets the funding_list of this CollectionUpdate.

        Funding creation / update items

        :return: The funding_list of this CollectionUpdate.
        :rtype: List[FundingCreate]
        """
        return self._funding_list

    @funding_list.setter
    def funding_list(self, funding_list):
        """Sets the funding_list of this CollectionUpdate.

        Funding creation / update items

        :param funding_list: The funding_list of this CollectionUpdate.
        :type funding_list: List[FundingCreate]
        """

        self._funding_list = funding_list

    @property
    def group_id(self):
        """Gets the group_id of this CollectionUpdate.

        Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups

        :return: The group_id of this CollectionUpdate.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this CollectionUpdate.

        Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups

        :param group_id: The group_id of this CollectionUpdate.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def handle(self):
        """Gets the handle of this CollectionUpdate.

        Not applicable for regular users. In an institutional case, make sure your group supports setting Handles. This setting is applied by figshare via opening a ticket through our support/helpdesk system.

        :return: The handle of this CollectionUpdate.
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this CollectionUpdate.

        Not applicable for regular users. In an institutional case, make sure your group supports setting Handles. This setting is applied by figshare via opening a ticket through our support/helpdesk system.

        :param handle: The handle of this CollectionUpdate.
        :type handle: str
        """

        self._handle = handle

    @property
    def keywords(self):
        """Gets the keywords of this CollectionUpdate.

        List of tags to be associated with the collection. Tags can be used instead

        :return: The keywords of this CollectionUpdate.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this CollectionUpdate.

        List of tags to be associated with the collection. Tags can be used instead

        :param keywords: The keywords of this CollectionUpdate.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def references(self):
        """Gets the references of this CollectionUpdate.

        List of links to be associated with the collection (e.g [\"http://link1\", \"http://link2\", \"http://link3\"])

        :return: The references of this CollectionUpdate.
        :rtype: List[str]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this CollectionUpdate.

        List of links to be associated with the collection (e.g [\"http://link1\", \"http://link2\", \"http://link3\"])

        :param references: The references of this CollectionUpdate.
        :type references: List[str]
        """

        self._references = references

    @property
    def resource_doi(self):
        """Gets the resource_doi of this CollectionUpdate.

        Not applicable to regular users. In a publisher case, this is the publisher article DOI.

        :return: The resource_doi of this CollectionUpdate.
        :rtype: str
        """
        return self._resource_doi

    @resource_doi.setter
    def resource_doi(self, resource_doi):
        """Sets the resource_doi of this CollectionUpdate.

        Not applicable to regular users. In a publisher case, this is the publisher article DOI.

        :param resource_doi: The resource_doi of this CollectionUpdate.
        :type resource_doi: str
        """

        self._resource_doi = resource_doi

    @property
    def resource_id(self):
        """Gets the resource_id of this CollectionUpdate.

        Not applicable to regular users. In a publisher case, this is the publisher article id

        :return: The resource_id of this CollectionUpdate.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this CollectionUpdate.

        Not applicable to regular users. In a publisher case, this is the publisher article id

        :param resource_id: The resource_id of this CollectionUpdate.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def resource_link(self):
        """Gets the resource_link of this CollectionUpdate.

        Not applicable to regular users. In a publisher case, this is the publisher article link

        :return: The resource_link of this CollectionUpdate.
        :rtype: str
        """
        return self._resource_link

    @resource_link.setter
    def resource_link(self, resource_link):
        """Sets the resource_link of this CollectionUpdate.

        Not applicable to regular users. In a publisher case, this is the publisher article link

        :param resource_link: The resource_link of this CollectionUpdate.
        :type resource_link: str
        """

        self._resource_link = resource_link

    @property
    def resource_title(self):
        """Gets the resource_title of this CollectionUpdate.

        Not applicable to regular users. In a publisher case, this is the publisher article title.

        :return: The resource_title of this CollectionUpdate.
        :rtype: str
        """
        return self._resource_title

    @resource_title.setter
    def resource_title(self, resource_title):
        """Sets the resource_title of this CollectionUpdate.

        Not applicable to regular users. In a publisher case, this is the publisher article title.

        :param resource_title: The resource_title of this CollectionUpdate.
        :type resource_title: str
        """

        self._resource_title = resource_title

    @property
    def resource_version(self):
        """Gets the resource_version of this CollectionUpdate.

        Not applicable to regular users. In a publisher case, this is the publisher article version

        :return: The resource_version of this CollectionUpdate.
        :rtype: int
        """
        return self._resource_version

    @resource_version.setter
    def resource_version(self, resource_version):
        """Sets the resource_version of this CollectionUpdate.

        Not applicable to regular users. In a publisher case, this is the publisher article version

        :param resource_version: The resource_version of this CollectionUpdate.
        :type resource_version: int
        """

        self._resource_version = resource_version

    @property
    def tags(self):
        """Gets the tags of this CollectionUpdate.

        List of tags to be associated with the collection. Keywords can be used instead

        :return: The tags of this CollectionUpdate.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CollectionUpdate.

        List of tags to be associated with the collection. Keywords can be used instead

        :param tags: The tags of this CollectionUpdate.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def timeline(self):
        """Gets the timeline of this CollectionUpdate.


        :return: The timeline of this CollectionUpdate.
        :rtype: TimelineUpdate
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this CollectionUpdate.


        :param timeline: The timeline of this CollectionUpdate.
        :type timeline: TimelineUpdate
        """

        self._timeline = timeline

    @property
    def title(self):
        """Gets the title of this CollectionUpdate.

        Title of collection

        :return: The title of this CollectionUpdate.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CollectionUpdate.

        Title of collection

        :param title: The title of this CollectionUpdate.
        :type title: str
        """
        if title is not None and len(title) > 1000:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `1000`")
        if title is not None and len(title) < 3:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `3`")

        self._title = title
