# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrivateLinkResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, html_location: str=None, location: str=None, token: str=None):
        """PrivateLinkResponse - a model defined in OpenAPI

        :param html_location: The html_location of this PrivateLinkResponse.
        :param location: The location of this PrivateLinkResponse.
        :param token: The token of this PrivateLinkResponse.
        """
        self.openapi_types = {
            'html_location': str,
            'location': str,
            'token': str
        }

        self.attribute_map = {
            'html_location': 'html_location',
            'location': 'location',
            'token': 'token'
        }

        self._html_location = html_location
        self._location = location
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateLinkResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateLinkResponse of this PrivateLinkResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def html_location(self):
        """Gets the html_location of this PrivateLinkResponse.

        HTML url for private link

        :return: The html_location of this PrivateLinkResponse.
        :rtype: str
        """
        return self._html_location

    @html_location.setter
    def html_location(self, html_location):
        """Sets the html_location of this PrivateLinkResponse.

        HTML url for private link

        :param html_location: The html_location of this PrivateLinkResponse.
        :type html_location: str
        """
        if html_location is None:
            raise ValueError("Invalid value for `html_location`, must not be `None`")

        self._html_location = html_location

    @property
    def location(self):
        """Gets the location of this PrivateLinkResponse.

        Url for private link

        :return: The location of this PrivateLinkResponse.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PrivateLinkResponse.

        Url for private link

        :param location: The location of this PrivateLinkResponse.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def token(self):
        """Gets the token of this PrivateLinkResponse.

        Token for private link

        :return: The token of this PrivateLinkResponse.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PrivateLinkResponse.

        Token for private link

        :param token: The token of this PrivateLinkResponse.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
