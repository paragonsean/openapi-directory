# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItemType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, icon: str=None, id: int=None, is_selectable: bool=None, name: str=None, public_description: str=None, string_id: str=None, url_name: str=None):
        """ItemType - a model defined in OpenAPI

        :param icon: The icon of this ItemType.
        :param id: The id of this ItemType.
        :param is_selectable: The is_selectable of this ItemType.
        :param name: The name of this ItemType.
        :param public_description: The public_description of this ItemType.
        :param string_id: The string_id of this ItemType.
        :param url_name: The url_name of this ItemType.
        """
        self.openapi_types = {
            'icon': str,
            'id': int,
            'is_selectable': bool,
            'name': str,
            'public_description': str,
            'string_id': str,
            'url_name': str
        }

        self.attribute_map = {
            'icon': 'icon',
            'id': 'id',
            'is_selectable': 'is_selectable',
            'name': 'name',
            'public_description': 'public_description',
            'string_id': 'string_id',
            'url_name': 'url_name'
        }

        self._icon = icon
        self._id = id
        self._is_selectable = is_selectable
        self._name = name
        self._public_description = public_description
        self._string_id = string_id
        self._url_name = url_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemType of this ItemType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def icon(self):
        """Gets the icon of this ItemType.

        The string identifying the icon of the item type.

        :return: The icon of this ItemType.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this ItemType.

        The string identifying the icon of the item type.

        :param icon: The icon of this ItemType.
        :type icon: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")

        self._icon = icon

    @property
    def id(self):
        """Gets the id of this ItemType.

        The ID of the item type.

        :return: The id of this ItemType.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemType.

        The ID of the item type.

        :param id: The id of this ItemType.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and id < 1:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")

        self._id = id

    @property
    def is_selectable(self):
        """Gets the is_selectable of this ItemType.

        The selectable status

        :return: The is_selectable of this ItemType.
        :rtype: bool
        """
        return self._is_selectable

    @is_selectable.setter
    def is_selectable(self, is_selectable):
        """Sets the is_selectable of this ItemType.

        The selectable status

        :param is_selectable: The is_selectable of this ItemType.
        :type is_selectable: bool
        """
        if is_selectable is None:
            raise ValueError("Invalid value for `is_selectable`, must not be `None`")

        self._is_selectable = is_selectable

    @property
    def name(self):
        """Gets the name of this ItemType.

        The name of the item type

        :return: The name of this ItemType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ItemType.

        The name of the item type

        :param name: The name of this ItemType.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def public_description(self):
        """Gets the public_description of this ItemType.

        The description of the item type.

        :return: The public_description of this ItemType.
        :rtype: str
        """
        return self._public_description

    @public_description.setter
    def public_description(self, public_description):
        """Sets the public_description of this ItemType.

        The description of the item type.

        :param public_description: The public_description of this ItemType.
        :type public_description: str
        """
        if public_description is None:
            raise ValueError("Invalid value for `public_description`, must not be `None`")

        self._public_description = public_description

    @property
    def string_id(self):
        """Gets the string_id of this ItemType.

        The string identifier of the item type.

        :return: The string_id of this ItemType.
        :rtype: str
        """
        return self._string_id

    @string_id.setter
    def string_id(self, string_id):
        """Sets the string_id of this ItemType.

        The string identifier of the item type.

        :param string_id: The string_id of this ItemType.
        :type string_id: str
        """
        if string_id is None:
            raise ValueError("Invalid value for `string_id`, must not be `None`")

        self._string_id = string_id

    @property
    def url_name(self):
        """Gets the url_name of this ItemType.

        The URL name of the item type.

        :return: The url_name of this ItemType.
        :rtype: str
        """
        return self._url_name

    @url_name.setter
    def url_name(self, url_name):
        """Sets the url_name of this ItemType.

        The URL name of the item type.

        :param url_name: The url_name of this ItemType.
        :type url_name: str
        """
        if url_name is None:
            raise ValueError("Invalid value for `url_name`, must not be `None`")

        self._url_name = url_name
