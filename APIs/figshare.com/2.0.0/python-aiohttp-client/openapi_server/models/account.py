# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: int=None, created_date: str=None, email: str=None, first_name: str=None, group_id: int=None, id: int=None, institution_id: int=None, institution_user_id: str=None, last_name: str=None, maximum_file_size: int=None, modified_date: str=None, pending_quota_request: bool=None, quota: int=None, used_quota: int=None, used_quota_private: int=None, used_quota_public: int=None):
        """Account - a model defined in OpenAPI

        :param active: The active of this Account.
        :param created_date: The created_date of this Account.
        :param email: The email of this Account.
        :param first_name: The first_name of this Account.
        :param group_id: The group_id of this Account.
        :param id: The id of this Account.
        :param institution_id: The institution_id of this Account.
        :param institution_user_id: The institution_user_id of this Account.
        :param last_name: The last_name of this Account.
        :param maximum_file_size: The maximum_file_size of this Account.
        :param modified_date: The modified_date of this Account.
        :param pending_quota_request: The pending_quota_request of this Account.
        :param quota: The quota of this Account.
        :param used_quota: The used_quota of this Account.
        :param used_quota_private: The used_quota_private of this Account.
        :param used_quota_public: The used_quota_public of this Account.
        """
        self.openapi_types = {
            'active': int,
            'created_date': str,
            'email': str,
            'first_name': str,
            'group_id': int,
            'id': int,
            'institution_id': int,
            'institution_user_id': str,
            'last_name': str,
            'maximum_file_size': int,
            'modified_date': str,
            'pending_quota_request': bool,
            'quota': int,
            'used_quota': int,
            'used_quota_private': int,
            'used_quota_public': int
        }

        self.attribute_map = {
            'active': 'active',
            'created_date': 'created_date',
            'email': 'email',
            'first_name': 'first_name',
            'group_id': 'group_id',
            'id': 'id',
            'institution_id': 'institution_id',
            'institution_user_id': 'institution_user_id',
            'last_name': 'last_name',
            'maximum_file_size': 'maximum_file_size',
            'modified_date': 'modified_date',
            'pending_quota_request': 'pending_quota_request',
            'quota': 'quota',
            'used_quota': 'used_quota',
            'used_quota_private': 'used_quota_private',
            'used_quota_public': 'used_quota_public'
        }

        self._active = active
        self._created_date = created_date
        self._email = email
        self._first_name = first_name
        self._group_id = group_id
        self._id = id
        self._institution_id = institution_id
        self._institution_user_id = institution_user_id
        self._last_name = last_name
        self._maximum_file_size = maximum_file_size
        self._modified_date = modified_date
        self._pending_quota_request = pending_quota_request
        self._quota = quota
        self._used_quota = used_quota
        self._used_quota_private = used_quota_private
        self._used_quota_public = used_quota_public

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Account.

        Account activity status

        :return: The active of this Account.
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Account.

        Account activity status

        :param active: The active of this Account.
        :type active: int
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def created_date(self):
        """Gets the created_date of this Account.

        Date when account was created

        :return: The created_date of this Account.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Account.

        Date when account was created

        :param created_date: The created_date of this Account.
        :type created_date: str
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")

        self._created_date = created_date

    @property
    def email(self):
        """Gets the email of this Account.

        User email

        :return: The email of this Account.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Account.

        User email

        :param email: The email of this Account.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Account.

        First Name

        :return: The first_name of this Account.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Account.

        First Name

        :param first_name: The first_name of this Account.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def group_id(self):
        """Gets the group_id of this Account.

        Account group id

        :return: The group_id of this Account.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Account.

        Account group id

        :param group_id: The group_id of this Account.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this Account.

        Account id

        :return: The id of this Account.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        Account id

        :param id: The id of this Account.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def institution_id(self):
        """Gets the institution_id of this Account.

        Account institution

        :return: The institution_id of this Account.
        :rtype: int
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """Sets the institution_id of this Account.

        Account institution

        :param institution_id: The institution_id of this Account.
        :type institution_id: int
        """
        if institution_id is None:
            raise ValueError("Invalid value for `institution_id`, must not be `None`")

        self._institution_id = institution_id

    @property
    def institution_user_id(self):
        """Gets the institution_user_id of this Account.

        Account institution user id

        :return: The institution_user_id of this Account.
        :rtype: str
        """
        return self._institution_user_id

    @institution_user_id.setter
    def institution_user_id(self, institution_user_id):
        """Sets the institution_user_id of this Account.

        Account institution user id

        :param institution_user_id: The institution_user_id of this Account.
        :type institution_user_id: str
        """
        if institution_user_id is None:
            raise ValueError("Invalid value for `institution_user_id`, must not be `None`")

        self._institution_user_id = institution_user_id

    @property
    def last_name(self):
        """Gets the last_name of this Account.

        Last Name

        :return: The last_name of this Account.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Account.

        Last Name

        :param last_name: The last_name of this Account.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def maximum_file_size(self):
        """Gets the maximum_file_size of this Account.

        Maximum upload size for account

        :return: The maximum_file_size of this Account.
        :rtype: int
        """
        return self._maximum_file_size

    @maximum_file_size.setter
    def maximum_file_size(self, maximum_file_size):
        """Sets the maximum_file_size of this Account.

        Maximum upload size for account

        :param maximum_file_size: The maximum_file_size of this Account.
        :type maximum_file_size: int
        """
        if maximum_file_size is None:
            raise ValueError("Invalid value for `maximum_file_size`, must not be `None`")

        self._maximum_file_size = maximum_file_size

    @property
    def modified_date(self):
        """Gets the modified_date of this Account.

        Date of last account modification

        :return: The modified_date of this Account.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this Account.

        Date of last account modification

        :param modified_date: The modified_date of this Account.
        :type modified_date: str
        """
        if modified_date is None:
            raise ValueError("Invalid value for `modified_date`, must not be `None`")

        self._modified_date = modified_date

    @property
    def pending_quota_request(self):
        """Gets the pending_quota_request of this Account.

        True if a quota request is pending

        :return: The pending_quota_request of this Account.
        :rtype: bool
        """
        return self._pending_quota_request

    @pending_quota_request.setter
    def pending_quota_request(self, pending_quota_request):
        """Sets the pending_quota_request of this Account.

        True if a quota request is pending

        :param pending_quota_request: The pending_quota_request of this Account.
        :type pending_quota_request: bool
        """
        if pending_quota_request is None:
            raise ValueError("Invalid value for `pending_quota_request`, must not be `None`")

        self._pending_quota_request = pending_quota_request

    @property
    def quota(self):
        """Gets the quota of this Account.

        Account quota

        :return: The quota of this Account.
        :rtype: int
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this Account.

        Account quota

        :param quota: The quota of this Account.
        :type quota: int
        """
        if quota is None:
            raise ValueError("Invalid value for `quota`, must not be `None`")

        self._quota = quota

    @property
    def used_quota(self):
        """Gets the used_quota of this Account.

        Account total used quota

        :return: The used_quota of this Account.
        :rtype: int
        """
        return self._used_quota

    @used_quota.setter
    def used_quota(self, used_quota):
        """Sets the used_quota of this Account.

        Account total used quota

        :param used_quota: The used_quota of this Account.
        :type used_quota: int
        """
        if used_quota is None:
            raise ValueError("Invalid value for `used_quota`, must not be `None`")

        self._used_quota = used_quota

    @property
    def used_quota_private(self):
        """Gets the used_quota_private of this Account.

        Account used private quota

        :return: The used_quota_private of this Account.
        :rtype: int
        """
        return self._used_quota_private

    @used_quota_private.setter
    def used_quota_private(self, used_quota_private):
        """Sets the used_quota_private of this Account.

        Account used private quota

        :param used_quota_private: The used_quota_private of this Account.
        :type used_quota_private: int
        """
        if used_quota_private is None:
            raise ValueError("Invalid value for `used_quota_private`, must not be `None`")

        self._used_quota_private = used_quota_private

    @property
    def used_quota_public(self):
        """Gets the used_quota_public of this Account.

        Account public used quota

        :return: The used_quota_public of this Account.
        :rtype: int
        """
        return self._used_quota_public

    @used_quota_public.setter
    def used_quota_public(self, used_quota_public):
        """Sets the used_quota_public of this Account.

        Account public used quota

        :param used_quota_public: The used_quota_public of this Account.
        :type used_quota_public: int
        """
        if used_quota_public is None:
            raise ValueError("Invalid value for `used_quota_public`, must not be `None`")

        self._used_quota_public = used_quota_public
