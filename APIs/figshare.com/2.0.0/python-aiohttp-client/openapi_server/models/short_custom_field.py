# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShortCustomField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_type: str=None, id: int=None, name: str=None):
        """ShortCustomField - a model defined in OpenAPI

        :param field_type: The field_type of this ShortCustomField.
        :param id: The id of this ShortCustomField.
        :param name: The name of this ShortCustomField.
        """
        self.openapi_types = {
            'field_type': str,
            'id': int,
            'name': str
        }

        self.attribute_map = {
            'field_type': 'field_type',
            'id': 'id',
            'name': 'name'
        }

        self._field_type = field_type
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShortCustomField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShortCustomField of this ShortCustomField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_type(self):
        """Gets the field_type of this ShortCustomField.

        Custom field type

        :return: The field_type of this ShortCustomField.
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this ShortCustomField.

        Custom field type

        :param field_type: The field_type of this ShortCustomField.
        :type field_type: str
        """
        allowed_values = ["text", "textarea", "dropdown", "url", "email", "date", "dropdown_large_list"]  # noqa: E501
        if field_type not in allowed_values:
            raise ValueError(
                "Invalid value for `field_type` ({0}), must be one of {1}"
                .format(field_type, allowed_values)
            )

        self._field_type = field_type

    @property
    def id(self):
        """Gets the id of this ShortCustomField.

        Custom field id

        :return: The id of this ShortCustomField.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShortCustomField.

        Custom field id

        :param id: The id of this ShortCustomField.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this ShortCustomField.

        Custom field name

        :return: The name of this ShortCustomField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShortCustomField.

        Custom field name

        :param name: The name of this ShortCustomField.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
