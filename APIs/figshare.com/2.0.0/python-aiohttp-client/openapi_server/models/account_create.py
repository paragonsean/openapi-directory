# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, first_name: str='', group_id: int=None, institution_user_id: str='', is_active: bool=None, last_name: str='', quota: int=None, symplectic_user_id: str=''):
        """AccountCreate - a model defined in OpenAPI

        :param email: The email of this AccountCreate.
        :param first_name: The first_name of this AccountCreate.
        :param group_id: The group_id of this AccountCreate.
        :param institution_user_id: The institution_user_id of this AccountCreate.
        :param is_active: The is_active of this AccountCreate.
        :param last_name: The last_name of this AccountCreate.
        :param quota: The quota of this AccountCreate.
        :param symplectic_user_id: The symplectic_user_id of this AccountCreate.
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'group_id': int,
            'institution_user_id': str,
            'is_active': bool,
            'last_name': str,
            'quota': int,
            'symplectic_user_id': str
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'first_name',
            'group_id': 'group_id',
            'institution_user_id': 'institution_user_id',
            'is_active': 'is_active',
            'last_name': 'last_name',
            'quota': 'quota',
            'symplectic_user_id': 'symplectic_user_id'
        }

        self._email = email
        self._first_name = first_name
        self._group_id = group_id
        self._institution_user_id = institution_user_id
        self._is_active = is_active
        self._last_name = last_name
        self._quota = quota
        self._symplectic_user_id = symplectic_user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountCreate of this AccountCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this AccountCreate.

        Email of account

        :return: The email of this AccountCreate.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccountCreate.

        Email of account

        :param email: The email of this AccountCreate.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and len(email) > 150:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `150`")
        if email is not None and len(email) < 3:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `3`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this AccountCreate.

        First Name

        :return: The first_name of this AccountCreate.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AccountCreate.

        First Name

        :param first_name: The first_name of this AccountCreate.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")
        if first_name is not None and len(first_name) > 30:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `30`")

        self._first_name = first_name

    @property
    def group_id(self):
        """Gets the group_id of this AccountCreate.

        Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups

        :return: The group_id of this AccountCreate.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this AccountCreate.

        Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups

        :param group_id: The group_id of this AccountCreate.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def institution_user_id(self):
        """Gets the institution_user_id of this AccountCreate.

        Institution user id

        :return: The institution_user_id of this AccountCreate.
        :rtype: str
        """
        return self._institution_user_id

    @institution_user_id.setter
    def institution_user_id(self, institution_user_id):
        """Sets the institution_user_id of this AccountCreate.

        Institution user id

        :param institution_user_id: The institution_user_id of this AccountCreate.
        :type institution_user_id: str
        """
        if institution_user_id is not None and len(institution_user_id) > 50:
            raise ValueError("Invalid value for `institution_user_id`, length must be less than or equal to `50`")

        self._institution_user_id = institution_user_id

    @property
    def is_active(self):
        """Gets the is_active of this AccountCreate.

        Is account active

        :return: The is_active of this AccountCreate.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this AccountCreate.

        Is account active

        :param is_active: The is_active of this AccountCreate.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def last_name(self):
        """Gets the last_name of this AccountCreate.

        Last Name

        :return: The last_name of this AccountCreate.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AccountCreate.

        Last Name

        :param last_name: The last_name of this AccountCreate.
        :type last_name: str
        """
        if last_name is not None and len(last_name) > 30:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `30`")

        self._last_name = last_name

    @property
    def quota(self):
        """Gets the quota of this AccountCreate.

        Account quota

        :return: The quota of this AccountCreate.
        :rtype: int
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this AccountCreate.

        Account quota

        :param quota: The quota of this AccountCreate.
        :type quota: int
        """

        self._quota = quota

    @property
    def symplectic_user_id(self):
        """Gets the symplectic_user_id of this AccountCreate.

        Symplectic user id

        :return: The symplectic_user_id of this AccountCreate.
        :rtype: str
        """
        return self._symplectic_user_id

    @symplectic_user_id.setter
    def symplectic_user_id(self, symplectic_user_id):
        """Sets the symplectic_user_id of this AccountCreate.

        Symplectic user id

        :param symplectic_user_id: The symplectic_user_id of this AccountCreate.
        :type symplectic_user_id: str
        """
        if symplectic_user_id is not None and len(symplectic_user_id) > 50:
            raise ValueError("Invalid value for `symplectic_user_id`, length must be less than or equal to `50`")

        self._symplectic_user_id = symplectic_user_id
