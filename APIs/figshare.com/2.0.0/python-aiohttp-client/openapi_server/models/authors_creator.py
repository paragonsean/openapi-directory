# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthorsCreator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authors: List[object]=None):
        """AuthorsCreator - a model defined in OpenAPI

        :param authors: The authors of this AuthorsCreator.
        """
        self.openapi_types = {
            'authors': List[object]
        }

        self.attribute_map = {
            'authors': 'authors'
        }

        self._authors = authors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorsCreator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthorsCreator of this AuthorsCreator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authors(self):
        """Gets the authors of this AuthorsCreator.

        List of authors to be associated with the article. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.

        :return: The authors of this AuthorsCreator.
        :rtype: List[object]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this AuthorsCreator.

        List of authors to be associated with the article. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.

        :param authors: The authors of this AuthorsCreator.
        :type authors: List[object]
        """
        if authors is None:
            raise ValueError("Invalid value for `authors`, must not be `None`")

        self._authors = authors
