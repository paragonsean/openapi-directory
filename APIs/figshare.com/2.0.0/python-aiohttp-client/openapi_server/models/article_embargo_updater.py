# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArticleEmbargoUpdater(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embargo_date: str=None, embargo_options: List[object]=None, embargo_reason: str=None, embargo_title: str=None, embargo_type: str=None, is_embargoed: bool=None):
        """ArticleEmbargoUpdater - a model defined in OpenAPI

        :param embargo_date: The embargo_date of this ArticleEmbargoUpdater.
        :param embargo_options: The embargo_options of this ArticleEmbargoUpdater.
        :param embargo_reason: The embargo_reason of this ArticleEmbargoUpdater.
        :param embargo_title: The embargo_title of this ArticleEmbargoUpdater.
        :param embargo_type: The embargo_type of this ArticleEmbargoUpdater.
        :param is_embargoed: The is_embargoed of this ArticleEmbargoUpdater.
        """
        self.openapi_types = {
            'embargo_date': str,
            'embargo_options': List[object],
            'embargo_reason': str,
            'embargo_title': str,
            'embargo_type': str,
            'is_embargoed': bool
        }

        self.attribute_map = {
            'embargo_date': 'embargo_date',
            'embargo_options': 'embargo_options',
            'embargo_reason': 'embargo_reason',
            'embargo_title': 'embargo_title',
            'embargo_type': 'embargo_type',
            'is_embargoed': 'is_embargoed'
        }

        self._embargo_date = embargo_date
        self._embargo_options = embargo_options
        self._embargo_reason = embargo_reason
        self._embargo_title = embargo_title
        self._embargo_type = embargo_type
        self._is_embargoed = is_embargoed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArticleEmbargoUpdater':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArticleEmbargoUpdater of this ArticleEmbargoUpdater.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embargo_date(self):
        """Gets the embargo_date of this ArticleEmbargoUpdater.

        Date when the embargo expires and the article gets published, '0' value will set up permanent embargo

        :return: The embargo_date of this ArticleEmbargoUpdater.
        :rtype: str
        """
        return self._embargo_date

    @embargo_date.setter
    def embargo_date(self, embargo_date):
        """Sets the embargo_date of this ArticleEmbargoUpdater.

        Date when the embargo expires and the article gets published, '0' value will set up permanent embargo

        :param embargo_date: The embargo_date of this ArticleEmbargoUpdater.
        :type embargo_date: str
        """
        if embargo_date is None:
            raise ValueError("Invalid value for `embargo_date`, must not be `None`")

        self._embargo_date = embargo_date

    @property
    def embargo_options(self):
        """Gets the embargo_options of this ArticleEmbargoUpdater.

        List of embargo permissions to be associated with the article. The list must contain `id` and can also contain `group_ids`(a field that only applies to 'logged_in' permissions). The new list replaces old options in the database, and an empty list removes all permissions for this article. Administration permission has to be set up alone but logged in and IP range permissions can be set up together.

        :return: The embargo_options of this ArticleEmbargoUpdater.
        :rtype: List[object]
        """
        return self._embargo_options

    @embargo_options.setter
    def embargo_options(self, embargo_options):
        """Sets the embargo_options of this ArticleEmbargoUpdater.

        List of embargo permissions to be associated with the article. The list must contain `id` and can also contain `group_ids`(a field that only applies to 'logged_in' permissions). The new list replaces old options in the database, and an empty list removes all permissions for this article. Administration permission has to be set up alone but logged in and IP range permissions can be set up together.

        :param embargo_options: The embargo_options of this ArticleEmbargoUpdater.
        :type embargo_options: List[object]
        """

        self._embargo_options = embargo_options

    @property
    def embargo_reason(self):
        """Gets the embargo_reason of this ArticleEmbargoUpdater.

        Reason for setting embargo

        :return: The embargo_reason of this ArticleEmbargoUpdater.
        :rtype: str
        """
        return self._embargo_reason

    @embargo_reason.setter
    def embargo_reason(self, embargo_reason):
        """Sets the embargo_reason of this ArticleEmbargoUpdater.

        Reason for setting embargo

        :param embargo_reason: The embargo_reason of this ArticleEmbargoUpdater.
        :type embargo_reason: str
        """

        self._embargo_reason = embargo_reason

    @property
    def embargo_title(self):
        """Gets the embargo_title of this ArticleEmbargoUpdater.

        Title for embargo

        :return: The embargo_title of this ArticleEmbargoUpdater.
        :rtype: str
        """
        return self._embargo_title

    @embargo_title.setter
    def embargo_title(self, embargo_title):
        """Sets the embargo_title of this ArticleEmbargoUpdater.

        Title for embargo

        :param embargo_title: The embargo_title of this ArticleEmbargoUpdater.
        :type embargo_title: str
        """

        self._embargo_title = embargo_title

    @property
    def embargo_type(self):
        """Gets the embargo_type of this ArticleEmbargoUpdater.

        Embargo can be enabled at the article or the file level. Possible values: article, file

        :return: The embargo_type of this ArticleEmbargoUpdater.
        :rtype: str
        """
        return self._embargo_type

    @embargo_type.setter
    def embargo_type(self, embargo_type):
        """Sets the embargo_type of this ArticleEmbargoUpdater.

        Embargo can be enabled at the article or the file level. Possible values: article, file

        :param embargo_type: The embargo_type of this ArticleEmbargoUpdater.
        :type embargo_type: str
        """
        allowed_values = ["article", "file"]  # noqa: E501
        if embargo_type not in allowed_values:
            raise ValueError(
                "Invalid value for `embargo_type` ({0}), must be one of {1}"
                .format(embargo_type, allowed_values)
            )

        self._embargo_type = embargo_type

    @property
    def is_embargoed(self):
        """Gets the is_embargoed of this ArticleEmbargoUpdater.

        Embargo status

        :return: The is_embargoed of this ArticleEmbargoUpdater.
        :rtype: bool
        """
        return self._is_embargoed

    @is_embargoed.setter
    def is_embargoed(self, is_embargoed):
        """Sets the is_embargoed of this ArticleEmbargoUpdater.

        Embargo status

        :param is_embargoed: The is_embargoed of this ArticleEmbargoUpdater.
        :type is_embargoed: bool
        """
        if is_embargoed is None:
            raise ValueError("Invalid value for `is_embargoed`, must not be `None`")

        self._is_embargoed = is_embargoed
