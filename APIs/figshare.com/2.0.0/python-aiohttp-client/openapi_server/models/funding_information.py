# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FundingInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, funder_name: str=None, grant_code: str=None, id: int=None, is_user_defined: bool=None, title: str=None, url: str=None):
        """FundingInformation - a model defined in OpenAPI

        :param funder_name: The funder_name of this FundingInformation.
        :param grant_code: The grant_code of this FundingInformation.
        :param id: The id of this FundingInformation.
        :param is_user_defined: The is_user_defined of this FundingInformation.
        :param title: The title of this FundingInformation.
        :param url: The url of this FundingInformation.
        """
        self.openapi_types = {
            'funder_name': str,
            'grant_code': str,
            'id': int,
            'is_user_defined': bool,
            'title': str,
            'url': str
        }

        self.attribute_map = {
            'funder_name': 'funder_name',
            'grant_code': 'grant_code',
            'id': 'id',
            'is_user_defined': 'is_user_defined',
            'title': 'title',
            'url': 'url'
        }

        self._funder_name = funder_name
        self._grant_code = grant_code
        self._id = id
        self._is_user_defined = is_user_defined
        self._title = title
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FundingInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FundingInformation of this FundingInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def funder_name(self):
        """Gets the funder_name of this FundingInformation.

        Funder's name

        :return: The funder_name of this FundingInformation.
        :rtype: str
        """
        return self._funder_name

    @funder_name.setter
    def funder_name(self, funder_name):
        """Sets the funder_name of this FundingInformation.

        Funder's name

        :param funder_name: The funder_name of this FundingInformation.
        :type funder_name: str
        """
        if funder_name is None:
            raise ValueError("Invalid value for `funder_name`, must not be `None`")

        self._funder_name = funder_name

    @property
    def grant_code(self):
        """Gets the grant_code of this FundingInformation.

        The grant code

        :return: The grant_code of this FundingInformation.
        :rtype: str
        """
        return self._grant_code

    @grant_code.setter
    def grant_code(self, grant_code):
        """Sets the grant_code of this FundingInformation.

        The grant code

        :param grant_code: The grant_code of this FundingInformation.
        :type grant_code: str
        """
        if grant_code is None:
            raise ValueError("Invalid value for `grant_code`, must not be `None`")

        self._grant_code = grant_code

    @property
    def id(self):
        """Gets the id of this FundingInformation.

        Funding id

        :return: The id of this FundingInformation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FundingInformation.

        Funding id

        :param id: The id of this FundingInformation.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_user_defined(self):
        """Gets the is_user_defined of this FundingInformation.

        Return whether the grant has been introduced manually

        :return: The is_user_defined of this FundingInformation.
        :rtype: bool
        """
        return self._is_user_defined

    @is_user_defined.setter
    def is_user_defined(self, is_user_defined):
        """Sets the is_user_defined of this FundingInformation.

        Return whether the grant has been introduced manually

        :param is_user_defined: The is_user_defined of this FundingInformation.
        :type is_user_defined: bool
        """
        if is_user_defined is None:
            raise ValueError("Invalid value for `is_user_defined`, must not be `None`")

        self._is_user_defined = is_user_defined

    @property
    def title(self):
        """Gets the title of this FundingInformation.

        The funding name

        :return: The title of this FundingInformation.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FundingInformation.

        The funding name

        :param title: The title of this FundingInformation.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def url(self):
        """Gets the url of this FundingInformation.

        The grant url

        :return: The url of this FundingInformation.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FundingInformation.

        The grant url

        :param url: The url of this FundingInformation.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
