# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Category(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, parent_id: int=None, path: str=None, source_id: str=None, taxonomy_id: int=None, title: str=None):
        """Category - a model defined in OpenAPI

        :param id: The id of this Category.
        :param parent_id: The parent_id of this Category.
        :param path: The path of this Category.
        :param source_id: The source_id of this Category.
        :param taxonomy_id: The taxonomy_id of this Category.
        :param title: The title of this Category.
        """
        self.openapi_types = {
            'id': int,
            'parent_id': int,
            'path': str,
            'source_id': str,
            'taxonomy_id': int,
            'title': str
        }

        self.attribute_map = {
            'id': 'id',
            'parent_id': 'parent_id',
            'path': 'path',
            'source_id': 'source_id',
            'taxonomy_id': 'taxonomy_id',
            'title': 'title'
        }

        self._id = id
        self._parent_id = parent_id
        self._path = path
        self._source_id = source_id
        self._taxonomy_id = taxonomy_id
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Category':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Category of this Category.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Category.

        Category id

        :return: The id of this Category.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Category.

        Category id

        :param id: The id of this Category.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def parent_id(self):
        """Gets the parent_id of this Category.

        Parent category

        :return: The parent_id of this Category.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Category.

        Parent category

        :param parent_id: The parent_id of this Category.
        :type parent_id: int
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")

        self._parent_id = parent_id

    @property
    def path(self):
        """Gets the path of this Category.

        Path to all ancestor ids

        :return: The path of this Category.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Category.

        Path to all ancestor ids

        :param path: The path of this Category.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def source_id(self):
        """Gets the source_id of this Category.

        ID in original standard taxonomy

        :return: The source_id of this Category.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Category.

        ID in original standard taxonomy

        :param source_id: The source_id of this Category.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def taxonomy_id(self):
        """Gets the taxonomy_id of this Category.

        Internal id of taxonomy the category is part of

        :return: The taxonomy_id of this Category.
        :rtype: int
        """
        return self._taxonomy_id

    @taxonomy_id.setter
    def taxonomy_id(self, taxonomy_id):
        """Sets the taxonomy_id of this Category.

        Internal id of taxonomy the category is part of

        :param taxonomy_id: The taxonomy_id of this Category.
        :type taxonomy_id: int
        """
        if taxonomy_id is None:
            raise ValueError("Invalid value for `taxonomy_id`, must not be `None`")

        self._taxonomy_id = taxonomy_id

    @property
    def title(self):
        """Gets the title of this Category.

        Category title

        :return: The title of this Category.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Category.

        Category title

        :param title: The title of this Category.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
