# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Resource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, doi: str='', id: str='', link: str='', status: str='', title: str='', version: int=0):
        """Resource - a model defined in OpenAPI

        :param doi: The doi of this Resource.
        :param id: The id of this Resource.
        :param link: The link of this Resource.
        :param status: The status of this Resource.
        :param title: The title of this Resource.
        :param version: The version of this Resource.
        """
        self.openapi_types = {
            'doi': str,
            'id': str,
            'link': str,
            'status': str,
            'title': str,
            'version': int
        }

        self.attribute_map = {
            'doi': 'doi',
            'id': 'id',
            'link': 'link',
            'status': 'status',
            'title': 'title',
            'version': 'version'
        }

        self._doi = doi
        self._id = id
        self._link = link
        self._status = status
        self._title = title
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Resource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Resource of this Resource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def doi(self):
        """Gets the doi of this Resource.

        DOI of resource item

        :return: The doi of this Resource.
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this Resource.

        DOI of resource item

        :param doi: The doi of this Resource.
        :type doi: str
        """

        self._doi = doi

    @property
    def id(self):
        """Gets the id of this Resource.

        ID of resource item

        :return: The id of this Resource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Resource.

        ID of resource item

        :param id: The id of this Resource.
        :type id: str
        """
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")

        self._id = id

    @property
    def link(self):
        """Gets the link of this Resource.

        Link of resource item

        :return: The link of this Resource.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Resource.

        Link of resource item

        :param link: The link of this Resource.
        :type link: str
        """
        if link is not None and len(link) > 255:
            raise ValueError("Invalid value for `link`, length must be less than or equal to `255`")

        self._link = link

    @property
    def status(self):
        """Gets the status of this Resource.

        Status of resource item

        :return: The status of this Resource.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Resource.

        Status of resource item

        :param status: The status of this Resource.
        :type status: str
        """
        if status is not None and len(status) > 100:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `100`")

        self._status = status

    @property
    def title(self):
        """Gets the title of this Resource.

        Title of resource item

        :return: The title of this Resource.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Resource.

        Title of resource item

        :param title: The title of this Resource.
        :type title: str
        """
        if title is not None and len(title) > 1000:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `1000`")

        self._title = title

    @property
    def version(self):
        """Gets the version of this Resource.

        Version of resource item

        :return: The version of this Resource.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Resource.

        Version of resource item

        :param version: The version of this Resource.
        :type version: int
        """

        self._version = version
