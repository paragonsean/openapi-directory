# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, created_date: str=None, download_url: str=None, group_id: int=None, id: int=None, status: str=None):
        """AccountReport - a model defined in OpenAPI

        :param account_id: The account_id of this AccountReport.
        :param created_date: The created_date of this AccountReport.
        :param download_url: The download_url of this AccountReport.
        :param group_id: The group_id of this AccountReport.
        :param id: The id of this AccountReport.
        :param status: The status of this AccountReport.
        """
        self.openapi_types = {
            'account_id': int,
            'created_date': str,
            'download_url': str,
            'group_id': int,
            'id': int,
            'status': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'created_date': 'created_date',
            'download_url': 'download_url',
            'group_id': 'group_id',
            'id': 'id',
            'status': 'status'
        }

        self._account_id = account_id
        self._created_date = created_date
        self._download_url = download_url
        self._group_id = group_id
        self._id = id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountReport of this AccountReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AccountReport.

        The ID of the account which generated this report.

        :return: The account_id of this AccountReport.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountReport.

        The ID of the account which generated this report.

        :param account_id: The account_id of this AccountReport.
        :type account_id: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def created_date(self):
        """Gets the created_date of this AccountReport.

        Date when the AccountReport was requested

        :return: The created_date of this AccountReport.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this AccountReport.

        Date when the AccountReport was requested

        :param created_date: The created_date of this AccountReport.
        :type created_date: str
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")

        self._created_date = created_date

    @property
    def download_url(self):
        """Gets the download_url of this AccountReport.

        The download link for the generated XLSX

        :return: The download_url of this AccountReport.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this AccountReport.

        The download link for the generated XLSX

        :param download_url: The download_url of this AccountReport.
        :type download_url: str
        """
        if download_url is None:
            raise ValueError("Invalid value for `download_url`, must not be `None`")

        self._download_url = download_url

    @property
    def group_id(self):
        """Gets the group_id of this AccountReport.

        The group ID that was used to filter the report, if any.

        :return: The group_id of this AccountReport.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this AccountReport.

        The group ID that was used to filter the report, if any.

        :param group_id: The group_id of this AccountReport.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this AccountReport.

        A unique ID for the AccountRecord

        :return: The id of this AccountReport.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountReport.

        A unique ID for the AccountRecord

        :param id: The id of this AccountReport.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """Gets the status of this AccountReport.

        Status of the report

        :return: The status of this AccountReport.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountReport.

        Status of the report

        :param status: The status of this AccountReport.
        :type status: str
        """
        allowed_values = ["missing", "pending", "done"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
