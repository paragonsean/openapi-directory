# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, association_criteria: str=None, id: int=None, name: str=None, parent_id: int=None, resource_id: str=None):
        """Group - a model defined in OpenAPI

        :param association_criteria: The association_criteria of this Group.
        :param id: The id of this Group.
        :param name: The name of this Group.
        :param parent_id: The parent_id of this Group.
        :param resource_id: The resource_id of this Group.
        """
        self.openapi_types = {
            'association_criteria': str,
            'id': int,
            'name': str,
            'parent_id': int,
            'resource_id': str
        }

        self.attribute_map = {
            'association_criteria': 'association_criteria',
            'id': 'id',
            'name': 'name',
            'parent_id': 'parent_id',
            'resource_id': 'resource_id'
        }

        self._association_criteria = association_criteria
        self._id = id
        self._name = name
        self._parent_id = parent_id
        self._resource_id = resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def association_criteria(self):
        """Gets the association_criteria of this Group.

        HR code associated with group, if code exists

        :return: The association_criteria of this Group.
        :rtype: str
        """
        return self._association_criteria

    @association_criteria.setter
    def association_criteria(self, association_criteria):
        """Sets the association_criteria of this Group.

        HR code associated with group, if code exists

        :param association_criteria: The association_criteria of this Group.
        :type association_criteria: str
        """
        if association_criteria is None:
            raise ValueError("Invalid value for `association_criteria`, must not be `None`")

        self._association_criteria = association_criteria

    @property
    def id(self):
        """Gets the id of this Group.

        Group id

        :return: The id of this Group.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.

        Group id

        :param id: The id of this Group.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Group.

        Group name

        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.

        Group name

        :param name: The name of this Group.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this Group.

        Parent group if any

        :return: The parent_id of this Group.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Group.

        Parent group if any

        :param parent_id: The parent_id of this Group.
        :type parent_id: int
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")

        self._parent_id = parent_id

    @property
    def resource_id(self):
        """Gets the resource_id of this Group.

        Group resource id

        :return: The resource_id of this Group.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this Group.

        Group resource id

        :param resource_id: The resource_id of this Group.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id
