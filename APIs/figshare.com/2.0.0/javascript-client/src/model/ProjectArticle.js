/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Article from './Article';
import Category from './Category';
import License from './License';
import Timeline from './Timeline';

/**
 * The ProjectArticle model module.
 * @module model/ProjectArticle
 * @version 2.0.0
 */
class ProjectArticle {
    /**
     * Constructs a new <code>ProjectArticle</code>.
     * @alias module:model/ProjectArticle
     * @implements module:model/Article
     * @param definedType {Number} Type of article identifier
     * @param definedTypeName {String} Name of the article type identifier
     * @param doi {String} DOI
     * @param groupId {Number} Group ID
     * @param handle {String} Handle
     * @param id {Number} Unique identifier for article
     * @param publishedDate {String} Posted date
     * @param thumb {String} Thumbnail image
     * @param timeline {module:model/Timeline} 
     * @param title {String} Title of article
     * @param url {String} Api endpoint for article
     * @param urlPrivateApi {String} Private Api endpoint for article
     * @param urlPrivateHtml {String} Private site endpoint for article
     * @param urlPublicApi {String} Public Api endpoint for article
     * @param urlPublicHtml {String} Public site endpoint for article
     */
    constructor(definedType, definedTypeName, doi, groupId, handle, id, publishedDate, thumb, timeline, title, url, urlPrivateApi, urlPrivateHtml, urlPublicApi, urlPublicHtml) { 
        Article.initialize(this, definedType, definedTypeName, doi, groupId, handle, id, publishedDate, thumb, timeline, title, url, urlPrivateApi, urlPrivateHtml, urlPublicApi, urlPublicHtml);
        ProjectArticle.initialize(this, definedType, definedTypeName, doi, groupId, handle, id, publishedDate, thumb, timeline, title, url, urlPrivateApi, urlPrivateHtml, urlPublicApi, urlPublicHtml);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, definedType, definedTypeName, doi, groupId, handle, id, publishedDate, thumb, timeline, title, url, urlPrivateApi, urlPrivateHtml, urlPublicApi, urlPublicHtml) { 
        obj['categories'] = categories;
        obj['citation'] = citation;
        obj['confidential_reason'] = confidentialReason;
        obj['created_date'] = createdDate;
        obj['description'] = description;
        obj['embargo_date'] = embargoDate;
        obj['embargo_reason'] = embargoReason;
        obj['embargo_title'] = embargoTitle;
        obj['embargo_type'] = embargoType;
        obj['funding'] = funding;
        obj['funding_list'] = fundingList;
        obj['has_linked_file'] = hasLinkedFile;
        obj['is_active'] = isActive;
        obj['is_confidential'] = isConfidential;
        obj['is_embargoed'] = isEmbargoed;
        obj['is_metadata_record'] = isMetadataRecord;
        obj['is_public'] = isPublic;
        obj['license'] = license;
        obj['metadata_reason'] = metadataReason;
        obj['modified_date'] = modifiedDate;
        obj['references'] = references;
        obj['size'] = size;
        obj['status'] = status;
        obj['tags'] = tags;
        obj['version'] = version;
        obj['defined_type'] = definedType;
        obj['defined_type_name'] = definedTypeName;
        obj['doi'] = doi;
        obj['group_id'] = groupId;
        obj['handle'] = handle;
        obj['id'] = id;
        obj['published_date'] = publishedDate;
        obj['thumb'] = thumb;
        obj['timeline'] = timeline;
        obj['title'] = title;
        obj['url'] = url;
        obj['url_private_api'] = urlPrivateApi;
        obj['url_private_html'] = urlPrivateHtml;
        obj['url_public_api'] = urlPublicApi;
        obj['url_public_html'] = urlPublicHtml;
    }

    /**
     * Constructs a <code>ProjectArticle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectArticle} obj Optional instance to populate.
     * @return {module:model/ProjectArticle} The populated <code>ProjectArticle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectArticle();
            Article.constructFromObject(data, obj);

            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [Category]);
            }
            if (data.hasOwnProperty('citation')) {
                obj['citation'] = ApiClient.convertToType(data['citation'], 'String');
            }
            if (data.hasOwnProperty('confidential_reason')) {
                obj['confidential_reason'] = ApiClient.convertToType(data['confidential_reason'], 'String');
            }
            if (data.hasOwnProperty('created_date')) {
                obj['created_date'] = ApiClient.convertToType(data['created_date'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('embargo_date')) {
                obj['embargo_date'] = ApiClient.convertToType(data['embargo_date'], 'String');
            }
            if (data.hasOwnProperty('embargo_reason')) {
                obj['embargo_reason'] = ApiClient.convertToType(data['embargo_reason'], 'String');
            }
            if (data.hasOwnProperty('embargo_title')) {
                obj['embargo_title'] = ApiClient.convertToType(data['embargo_title'], 'String');
            }
            if (data.hasOwnProperty('embargo_type')) {
                obj['embargo_type'] = ApiClient.convertToType(data['embargo_type'], 'String');
            }
            if (data.hasOwnProperty('funding')) {
                obj['funding'] = ApiClient.convertToType(data['funding'], 'String');
            }
            if (data.hasOwnProperty('funding_list')) {
                obj['funding_list'] = ApiClient.convertToType(data['funding_list'], ['Number']);
            }
            if (data.hasOwnProperty('has_linked_file')) {
                obj['has_linked_file'] = ApiClient.convertToType(data['has_linked_file'], 'Boolean');
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
            if (data.hasOwnProperty('is_confidential')) {
                obj['is_confidential'] = ApiClient.convertToType(data['is_confidential'], 'Boolean');
            }
            if (data.hasOwnProperty('is_embargoed')) {
                obj['is_embargoed'] = ApiClient.convertToType(data['is_embargoed'], 'Boolean');
            }
            if (data.hasOwnProperty('is_metadata_record')) {
                obj['is_metadata_record'] = ApiClient.convertToType(data['is_metadata_record'], 'Boolean');
            }
            if (data.hasOwnProperty('is_public')) {
                obj['is_public'] = ApiClient.convertToType(data['is_public'], 'Boolean');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = License.constructFromObject(data['license']);
            }
            if (data.hasOwnProperty('metadata_reason')) {
                obj['metadata_reason'] = ApiClient.convertToType(data['metadata_reason'], 'String');
            }
            if (data.hasOwnProperty('modified_date')) {
                obj['modified_date'] = ApiClient.convertToType(data['modified_date'], 'String');
            }
            if (data.hasOwnProperty('references')) {
                obj['references'] = ApiClient.convertToType(data['references'], ['String']);
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('defined_type')) {
                obj['defined_type'] = ApiClient.convertToType(data['defined_type'], 'Number');
            }
            if (data.hasOwnProperty('defined_type_name')) {
                obj['defined_type_name'] = ApiClient.convertToType(data['defined_type_name'], 'String');
            }
            if (data.hasOwnProperty('doi')) {
                obj['doi'] = ApiClient.convertToType(data['doi'], 'String');
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'Number');
            }
            if (data.hasOwnProperty('handle')) {
                obj['handle'] = ApiClient.convertToType(data['handle'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('published_date')) {
                obj['published_date'] = ApiClient.convertToType(data['published_date'], 'String');
            }
            if (data.hasOwnProperty('thumb')) {
                obj['thumb'] = ApiClient.convertToType(data['thumb'], 'String');
            }
            if (data.hasOwnProperty('timeline')) {
                obj['timeline'] = Timeline.constructFromObject(data['timeline']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('url_private_api')) {
                obj['url_private_api'] = ApiClient.convertToType(data['url_private_api'], 'String');
            }
            if (data.hasOwnProperty('url_private_html')) {
                obj['url_private_html'] = ApiClient.convertToType(data['url_private_html'], 'String');
            }
            if (data.hasOwnProperty('url_public_api')) {
                obj['url_public_api'] = ApiClient.convertToType(data['url_public_api'], 'String');
            }
            if (data.hasOwnProperty('url_public_html')) {
                obj['url_public_html'] = ApiClient.convertToType(data['url_public_html'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectArticle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectArticle</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectArticle.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                Category.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['citation'] && !(typeof data['citation'] === 'string' || data['citation'] instanceof String)) {
            throw new Error("Expected the field `citation` to be a primitive type in the JSON string but got " + data['citation']);
        }
        // ensure the json data is a string
        if (data['confidential_reason'] && !(typeof data['confidential_reason'] === 'string' || data['confidential_reason'] instanceof String)) {
            throw new Error("Expected the field `confidential_reason` to be a primitive type in the JSON string but got " + data['confidential_reason']);
        }
        // ensure the json data is a string
        if (data['created_date'] && !(typeof data['created_date'] === 'string' || data['created_date'] instanceof String)) {
            throw new Error("Expected the field `created_date` to be a primitive type in the JSON string but got " + data['created_date']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['embargo_date'] && !(typeof data['embargo_date'] === 'string' || data['embargo_date'] instanceof String)) {
            throw new Error("Expected the field `embargo_date` to be a primitive type in the JSON string but got " + data['embargo_date']);
        }
        // ensure the json data is a string
        if (data['embargo_reason'] && !(typeof data['embargo_reason'] === 'string' || data['embargo_reason'] instanceof String)) {
            throw new Error("Expected the field `embargo_reason` to be a primitive type in the JSON string but got " + data['embargo_reason']);
        }
        // ensure the json data is a string
        if (data['embargo_title'] && !(typeof data['embargo_title'] === 'string' || data['embargo_title'] instanceof String)) {
            throw new Error("Expected the field `embargo_title` to be a primitive type in the JSON string but got " + data['embargo_title']);
        }
        // ensure the json data is a string
        if (data['embargo_type'] && !(typeof data['embargo_type'] === 'string' || data['embargo_type'] instanceof String)) {
            throw new Error("Expected the field `embargo_type` to be a primitive type in the JSON string but got " + data['embargo_type']);
        }
        // ensure the json data is a string
        if (data['funding'] && !(typeof data['funding'] === 'string' || data['funding'] instanceof String)) {
            throw new Error("Expected the field `funding` to be a primitive type in the JSON string but got " + data['funding']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['funding_list'])) {
            throw new Error("Expected the field `funding_list` to be an array in the JSON data but got " + data['funding_list']);
        }
        // validate the optional field `license`
        if (data['license']) { // data not null
          License.validateJSON(data['license']);
        }
        // ensure the json data is a string
        if (data['metadata_reason'] && !(typeof data['metadata_reason'] === 'string' || data['metadata_reason'] instanceof String)) {
            throw new Error("Expected the field `metadata_reason` to be a primitive type in the JSON string but got " + data['metadata_reason']);
        }
        // ensure the json data is a string
        if (data['modified_date'] && !(typeof data['modified_date'] === 'string' || data['modified_date'] instanceof String)) {
            throw new Error("Expected the field `modified_date` to be a primitive type in the JSON string but got " + data['modified_date']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['references'])) {
            throw new Error("Expected the field `references` to be an array in the JSON data but got " + data['references']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['defined_type_name'] && !(typeof data['defined_type_name'] === 'string' || data['defined_type_name'] instanceof String)) {
            throw new Error("Expected the field `defined_type_name` to be a primitive type in the JSON string but got " + data['defined_type_name']);
        }
        // ensure the json data is a string
        if (data['doi'] && !(typeof data['doi'] === 'string' || data['doi'] instanceof String)) {
            throw new Error("Expected the field `doi` to be a primitive type in the JSON string but got " + data['doi']);
        }
        // ensure the json data is a string
        if (data['handle'] && !(typeof data['handle'] === 'string' || data['handle'] instanceof String)) {
            throw new Error("Expected the field `handle` to be a primitive type in the JSON string but got " + data['handle']);
        }
        // ensure the json data is a string
        if (data['published_date'] && !(typeof data['published_date'] === 'string' || data['published_date'] instanceof String)) {
            throw new Error("Expected the field `published_date` to be a primitive type in the JSON string but got " + data['published_date']);
        }
        // ensure the json data is a string
        if (data['thumb'] && !(typeof data['thumb'] === 'string' || data['thumb'] instanceof String)) {
            throw new Error("Expected the field `thumb` to be a primitive type in the JSON string but got " + data['thumb']);
        }
        // validate the optional field `timeline`
        if (data['timeline']) { // data not null
          Timeline.validateJSON(data['timeline']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['url_private_api'] && !(typeof data['url_private_api'] === 'string' || data['url_private_api'] instanceof String)) {
            throw new Error("Expected the field `url_private_api` to be a primitive type in the JSON string but got " + data['url_private_api']);
        }
        // ensure the json data is a string
        if (data['url_private_html'] && !(typeof data['url_private_html'] === 'string' || data['url_private_html'] instanceof String)) {
            throw new Error("Expected the field `url_private_html` to be a primitive type in the JSON string but got " + data['url_private_html']);
        }
        // ensure the json data is a string
        if (data['url_public_api'] && !(typeof data['url_public_api'] === 'string' || data['url_public_api'] instanceof String)) {
            throw new Error("Expected the field `url_public_api` to be a primitive type in the JSON string but got " + data['url_public_api']);
        }
        // ensure the json data is a string
        if (data['url_public_html'] && !(typeof data['url_public_html'] === 'string' || data['url_public_html'] instanceof String)) {
            throw new Error("Expected the field `url_public_html` to be a primitive type in the JSON string but got " + data['url_public_html']);
        }

        return true;
    }


}

ProjectArticle.RequiredProperties = ["categories", "citation", "confidential_reason", "created_date", "description", "embargo_date", "embargo_reason", "embargo_title", "embargo_type", "funding", "funding_list", "has_linked_file", "is_active", "is_confidential", "is_embargoed", "is_metadata_record", "is_public", "license", "metadata_reason", "modified_date", "references", "size", "status", "tags", "version", "defined_type", "defined_type_name", "doi", "group_id", "handle", "id", "published_date", "thumb", "timeline", "title", "url", "url_private_api", "url_private_html", "url_public_api", "url_public_html"];

/**
 * List of categories selected for the article
 * @member {Array.<module:model/Category>} categories
 */
ProjectArticle.prototype['categories'] = undefined;

/**
 * Article citation
 * @member {String} citation
 */
ProjectArticle.prototype['citation'] = undefined;

/**
 * Confidentiality reason
 * @member {String} confidential_reason
 */
ProjectArticle.prototype['confidential_reason'] = undefined;

/**
 * Date when article was created
 * @member {String} created_date
 */
ProjectArticle.prototype['created_date'] = undefined;

/**
 * Article description
 * @member {String} description
 */
ProjectArticle.prototype['description'] = undefined;

/**
 * Date when embargo lifts
 * @member {String} embargo_date
 */
ProjectArticle.prototype['embargo_date'] = undefined;

/**
 * Reason for embargo
 * @member {String} embargo_reason
 */
ProjectArticle.prototype['embargo_reason'] = undefined;

/**
 * Title for embargo
 * @member {String} embargo_title
 */
ProjectArticle.prototype['embargo_title'] = undefined;

/**
 * Article embargo
 * @member {String} embargo_type
 */
ProjectArticle.prototype['embargo_type'] = undefined;

/**
 * Article funding
 * @member {String} funding
 */
ProjectArticle.prototype['funding'] = undefined;

/**
 * @member {Array.<Number>} funding_list
 */
ProjectArticle.prototype['funding_list'] = undefined;

/**
 * True if any files are linked to the article
 * @member {Boolean} has_linked_file
 */
ProjectArticle.prototype['has_linked_file'] = undefined;

/**
 * True if article is active
 * @member {Boolean} is_active
 */
ProjectArticle.prototype['is_active'] = undefined;

/**
 * Article Confidentiality
 * @member {Boolean} is_confidential
 */
ProjectArticle.prototype['is_confidential'] = undefined;

/**
 * True if article is embargoed
 * @member {Boolean} is_embargoed
 */
ProjectArticle.prototype['is_embargoed'] = undefined;

/**
 * True if article has no files
 * @member {Boolean} is_metadata_record
 */
ProjectArticle.prototype['is_metadata_record'] = undefined;

/**
 * True if article is published
 * @member {Boolean} is_public
 */
ProjectArticle.prototype['is_public'] = undefined;

/**
 * @member {module:model/License} license
 */
ProjectArticle.prototype['license'] = undefined;

/**
 * Article metadata reason
 * @member {String} metadata_reason
 */
ProjectArticle.prototype['metadata_reason'] = undefined;

/**
 * Date when article was last modified
 * @member {String} modified_date
 */
ProjectArticle.prototype['modified_date'] = undefined;

/**
 * List of references
 * @member {Array.<String>} references
 */
ProjectArticle.prototype['references'] = undefined;

/**
 * Article size
 * @member {Number} size
 */
ProjectArticle.prototype['size'] = undefined;

/**
 * Article status
 * @member {String} status
 */
ProjectArticle.prototype['status'] = undefined;

/**
 * List of article tags
 * @member {Array.<String>} tags
 */
ProjectArticle.prototype['tags'] = undefined;

/**
 * Article version
 * @member {Number} version
 */
ProjectArticle.prototype['version'] = undefined;

/**
 * Type of article identifier
 * @member {Number} defined_type
 */
ProjectArticle.prototype['defined_type'] = undefined;

/**
 * Name of the article type identifier
 * @member {String} defined_type_name
 */
ProjectArticle.prototype['defined_type_name'] = undefined;

/**
 * DOI
 * @member {String} doi
 */
ProjectArticle.prototype['doi'] = undefined;

/**
 * Group ID
 * @member {Number} group_id
 */
ProjectArticle.prototype['group_id'] = undefined;

/**
 * Handle
 * @member {String} handle
 */
ProjectArticle.prototype['handle'] = undefined;

/**
 * Unique identifier for article
 * @member {Number} id
 */
ProjectArticle.prototype['id'] = undefined;

/**
 * Posted date
 * @member {String} published_date
 */
ProjectArticle.prototype['published_date'] = undefined;

/**
 * Thumbnail image
 * @member {String} thumb
 */
ProjectArticle.prototype['thumb'] = undefined;

/**
 * @member {module:model/Timeline} timeline
 */
ProjectArticle.prototype['timeline'] = undefined;

/**
 * Title of article
 * @member {String} title
 */
ProjectArticle.prototype['title'] = undefined;

/**
 * Api endpoint for article
 * @member {String} url
 */
ProjectArticle.prototype['url'] = undefined;

/**
 * Private Api endpoint for article
 * @member {String} url_private_api
 */
ProjectArticle.prototype['url_private_api'] = undefined;

/**
 * Private site endpoint for article
 * @member {String} url_private_html
 */
ProjectArticle.prototype['url_private_html'] = undefined;

/**
 * Public Api endpoint for article
 * @member {String} url_public_api
 */
ProjectArticle.prototype['url_public_api'] = undefined;

/**
 * Public site endpoint for article
 * @member {String} url_public_html
 */
ProjectArticle.prototype['url_public_html'] = undefined;


// Implement Article interface:
/**
 * Type of article identifier
 * @member {Number} defined_type
 */
Article.prototype['defined_type'] = undefined;
/**
 * Name of the article type identifier
 * @member {String} defined_type_name
 */
Article.prototype['defined_type_name'] = undefined;
/**
 * DOI
 * @member {String} doi
 */
Article.prototype['doi'] = undefined;
/**
 * Group ID
 * @member {Number} group_id
 */
Article.prototype['group_id'] = undefined;
/**
 * Handle
 * @member {String} handle
 */
Article.prototype['handle'] = undefined;
/**
 * Unique identifier for article
 * @member {Number} id
 */
Article.prototype['id'] = undefined;
/**
 * Posted date
 * @member {String} published_date
 */
Article.prototype['published_date'] = undefined;
/**
 * Thumbnail image
 * @member {String} thumb
 */
Article.prototype['thumb'] = undefined;
/**
 * @member {module:model/Timeline} timeline
 */
Article.prototype['timeline'] = undefined;
/**
 * Title of article
 * @member {String} title
 */
Article.prototype['title'] = undefined;
/**
 * Api endpoint for article
 * @member {String} url
 */
Article.prototype['url'] = undefined;
/**
 * Private Api endpoint for article
 * @member {String} url_private_api
 */
Article.prototype['url_private_api'] = undefined;
/**
 * Private site endpoint for article
 * @member {String} url_private_html
 */
Article.prototype['url_private_html'] = undefined;
/**
 * Public Api endpoint for article
 * @member {String} url_public_api
 */
Article.prototype['url_public_api'] = undefined;
/**
 * Public site endpoint for article
 * @member {String} url_public_html
 */
Article.prototype['url_public_html'] = undefined;




export default ProjectArticle;

