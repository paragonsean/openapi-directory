/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Timeline from './Timeline';

/**
 * The Collection model module.
 * @module model/Collection
 * @version 2.0.0
 */
class Collection {
    /**
     * Constructs a new <code>Collection</code>.
     * @alias module:model/Collection
     * @param doi {String} Collection DOI
     * @param handle {String} Collection Handle
     * @param id {Number} Collection id
     * @param publishedDate {String} Date when collection was published 
     * @param timeline {module:model/Timeline} 
     * @param title {String} Collection title
     * @param url {String} Api endpoint
     */
    constructor(doi, handle, id, publishedDate, timeline, title, url) { 
        
        Collection.initialize(this, doi, handle, id, publishedDate, timeline, title, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, doi, handle, id, publishedDate, timeline, title, url) { 
        obj['doi'] = doi;
        obj['handle'] = handle;
        obj['id'] = id;
        obj['published_date'] = publishedDate;
        obj['timeline'] = timeline;
        obj['title'] = title;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Collection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Collection} obj Optional instance to populate.
     * @return {module:model/Collection} The populated <code>Collection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Collection();

            if (data.hasOwnProperty('doi')) {
                obj['doi'] = ApiClient.convertToType(data['doi'], 'String');
            }
            if (data.hasOwnProperty('handle')) {
                obj['handle'] = ApiClient.convertToType(data['handle'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('published_date')) {
                obj['published_date'] = ApiClient.convertToType(data['published_date'], 'String');
            }
            if (data.hasOwnProperty('timeline')) {
                obj['timeline'] = Timeline.constructFromObject(data['timeline']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Collection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Collection</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Collection.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['doi'] && !(typeof data['doi'] === 'string' || data['doi'] instanceof String)) {
            throw new Error("Expected the field `doi` to be a primitive type in the JSON string but got " + data['doi']);
        }
        // ensure the json data is a string
        if (data['handle'] && !(typeof data['handle'] === 'string' || data['handle'] instanceof String)) {
            throw new Error("Expected the field `handle` to be a primitive type in the JSON string but got " + data['handle']);
        }
        // ensure the json data is a string
        if (data['published_date'] && !(typeof data['published_date'] === 'string' || data['published_date'] instanceof String)) {
            throw new Error("Expected the field `published_date` to be a primitive type in the JSON string but got " + data['published_date']);
        }
        // validate the optional field `timeline`
        if (data['timeline']) { // data not null
          Timeline.validateJSON(data['timeline']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Collection.RequiredProperties = ["doi", "handle", "id", "published_date", "timeline", "title", "url"];

/**
 * Collection DOI
 * @member {String} doi
 */
Collection.prototype['doi'] = undefined;

/**
 * Collection Handle
 * @member {String} handle
 */
Collection.prototype['handle'] = undefined;

/**
 * Collection id
 * @member {Number} id
 */
Collection.prototype['id'] = undefined;

/**
 * Date when collection was published 
 * @member {String} published_date
 */
Collection.prototype['published_date'] = undefined;

/**
 * @member {module:model/Timeline} timeline
 */
Collection.prototype['timeline'] = undefined;

/**
 * Collection title
 * @member {String} title
 */
Collection.prototype['title'] = undefined;

/**
 * Api endpoint
 * @member {String} url
 */
Collection.prototype['url'] = undefined;






export default Collection;

