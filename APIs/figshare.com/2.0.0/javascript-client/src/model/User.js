/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The User model module.
 * @module model/User
 * @version 2.0.0
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     * @param firstName {String} First Name
     * @param id {Number} User id
     * @param isActive {Boolean} Account activity status
     * @param isPublic {Boolean} Account public status
     * @param jobTitle {String} User Job title
     * @param lastName {String} Last Name
     * @param name {String} Full Name
     * @param orcidId {String} Orcid associated to this User
     * @param urlName {String} Name that appears in website url
     */
    constructor(firstName, id, isActive, isPublic, jobTitle, lastName, name, orcidId, urlName) { 
        
        User.initialize(this, firstName, id, isActive, isPublic, jobTitle, lastName, name, orcidId, urlName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, firstName, id, isActive, isPublic, jobTitle, lastName, name, orcidId, urlName) { 
        obj['first_name'] = firstName;
        obj['id'] = id;
        obj['is_active'] = isActive;
        obj['is_public'] = isPublic;
        obj['job_title'] = jobTitle;
        obj['last_name'] = lastName;
        obj['name'] = name;
        obj['orcid_id'] = orcidId;
        obj['url_name'] = urlName;
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
            if (data.hasOwnProperty('is_public')) {
                obj['is_public'] = ApiClient.convertToType(data['is_public'], 'Boolean');
            }
            if (data.hasOwnProperty('job_title')) {
                obj['job_title'] = ApiClient.convertToType(data['job_title'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('orcid_id')) {
                obj['orcid_id'] = ApiClient.convertToType(data['orcid_id'], 'String');
            }
            if (data.hasOwnProperty('url_name')) {
                obj['url_name'] = ApiClient.convertToType(data['url_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of User.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['job_title'] && !(typeof data['job_title'] === 'string' || data['job_title'] instanceof String)) {
            throw new Error("Expected the field `job_title` to be a primitive type in the JSON string but got " + data['job_title']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['orcid_id'] && !(typeof data['orcid_id'] === 'string' || data['orcid_id'] instanceof String)) {
            throw new Error("Expected the field `orcid_id` to be a primitive type in the JSON string but got " + data['orcid_id']);
        }
        // ensure the json data is a string
        if (data['url_name'] && !(typeof data['url_name'] === 'string' || data['url_name'] instanceof String)) {
            throw new Error("Expected the field `url_name` to be a primitive type in the JSON string but got " + data['url_name']);
        }

        return true;
    }


}

User.RequiredProperties = ["first_name", "id", "is_active", "is_public", "job_title", "last_name", "name", "orcid_id", "url_name"];

/**
 * First Name
 * @member {String} first_name
 */
User.prototype['first_name'] = undefined;

/**
 * User id
 * @member {Number} id
 */
User.prototype['id'] = undefined;

/**
 * Account activity status
 * @member {Boolean} is_active
 */
User.prototype['is_active'] = undefined;

/**
 * Account public status
 * @member {Boolean} is_public
 */
User.prototype['is_public'] = undefined;

/**
 * User Job title
 * @member {String} job_title
 */
User.prototype['job_title'] = undefined;

/**
 * Last Name
 * @member {String} last_name
 */
User.prototype['last_name'] = undefined;

/**
 * Full Name
 * @member {String} name
 */
User.prototype['name'] = undefined;

/**
 * Orcid associated to this User
 * @member {String} orcid_id
 */
User.prototype['orcid_id'] = undefined;

/**
 * Name that appears in website url
 * @member {String} url_name
 */
User.prototype['url_name'] = undefined;






export default User;

