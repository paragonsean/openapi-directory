/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TimelineUpdate from './TimelineUpdate';

/**
 * The Timeline model module.
 * @module model/Timeline
 * @version 2.0.0
 */
class Timeline {
    /**
     * Constructs a new <code>Timeline</code>.
     * @alias module:model/Timeline
     * @implements module:model/TimelineUpdate
     * @param firstOnline {String} Online posted date
     * @param publisherAcceptance {String} Date when the item was accepted for publication
     * @param publisherPublication {String} Publish date
     */
    constructor(firstOnline, publisherAcceptance, publisherPublication) { 
        TimelineUpdate.initialize(this);
        Timeline.initialize(this, firstOnline, publisherAcceptance, publisherPublication);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, firstOnline, publisherAcceptance, publisherPublication) { 
        obj['posted'] = posted;
        obj['revision'] = revision;
        obj['submission'] = submission;
        obj['firstOnline'] = firstOnline;
        obj['publisherAcceptance'] = publisherAcceptance;
        obj['publisherPublication'] = publisherPublication;
    }

    /**
     * Constructs a <code>Timeline</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Timeline} obj Optional instance to populate.
     * @return {module:model/Timeline} The populated <code>Timeline</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Timeline();
            TimelineUpdate.constructFromObject(data, obj);

            if (data.hasOwnProperty('posted')) {
                obj['posted'] = ApiClient.convertToType(data['posted'], 'String');
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'String');
            }
            if (data.hasOwnProperty('submission')) {
                obj['submission'] = ApiClient.convertToType(data['submission'], 'String');
            }
            if (data.hasOwnProperty('firstOnline')) {
                obj['firstOnline'] = ApiClient.convertToType(data['firstOnline'], 'String');
            }
            if (data.hasOwnProperty('publisherAcceptance')) {
                obj['publisherAcceptance'] = ApiClient.convertToType(data['publisherAcceptance'], 'String');
            }
            if (data.hasOwnProperty('publisherPublication')) {
                obj['publisherPublication'] = ApiClient.convertToType(data['publisherPublication'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Timeline</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Timeline</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Timeline.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['posted'] && !(typeof data['posted'] === 'string' || data['posted'] instanceof String)) {
            throw new Error("Expected the field `posted` to be a primitive type in the JSON string but got " + data['posted']);
        }
        // ensure the json data is a string
        if (data['revision'] && !(typeof data['revision'] === 'string' || data['revision'] instanceof String)) {
            throw new Error("Expected the field `revision` to be a primitive type in the JSON string but got " + data['revision']);
        }
        // ensure the json data is a string
        if (data['submission'] && !(typeof data['submission'] === 'string' || data['submission'] instanceof String)) {
            throw new Error("Expected the field `submission` to be a primitive type in the JSON string but got " + data['submission']);
        }
        // ensure the json data is a string
        if (data['firstOnline'] && !(typeof data['firstOnline'] === 'string' || data['firstOnline'] instanceof String)) {
            throw new Error("Expected the field `firstOnline` to be a primitive type in the JSON string but got " + data['firstOnline']);
        }
        // ensure the json data is a string
        if (data['publisherAcceptance'] && !(typeof data['publisherAcceptance'] === 'string' || data['publisherAcceptance'] instanceof String)) {
            throw new Error("Expected the field `publisherAcceptance` to be a primitive type in the JSON string but got " + data['publisherAcceptance']);
        }
        // ensure the json data is a string
        if (data['publisherPublication'] && !(typeof data['publisherPublication'] === 'string' || data['publisherPublication'] instanceof String)) {
            throw new Error("Expected the field `publisherPublication` to be a primitive type in the JSON string but got " + data['publisherPublication']);
        }

        return true;
    }


}

Timeline.RequiredProperties = ["posted", "revision", "submission", "firstOnline", "publisherAcceptance", "publisherPublication"];

/**
 * Posted date
 * @member {String} posted
 */
Timeline.prototype['posted'] = undefined;

/**
 * Revision date from curation (if curated)
 * @member {String} revision
 */
Timeline.prototype['revision'] = undefined;

/**
 * Submission date in curation (if curated)
 * @member {String} submission
 */
Timeline.prototype['submission'] = undefined;

/**
 * Online posted date
 * @member {String} firstOnline
 */
Timeline.prototype['firstOnline'] = undefined;

/**
 * Date when the item was accepted for publication
 * @member {String} publisherAcceptance
 */
Timeline.prototype['publisherAcceptance'] = undefined;

/**
 * Publish date
 * @member {String} publisherPublication
 */
Timeline.prototype['publisherPublication'] = undefined;


// Implement TimelineUpdate interface:
/**
 * Online posted date
 * @member {String} firstOnline
 */
TimelineUpdate.prototype['firstOnline'] = undefined;
/**
 * Date when the item was accepted for publication
 * @member {String} publisherAcceptance
 */
TimelineUpdate.prototype['publisherAcceptance'] = undefined;
/**
 * Publish date
 * @member {String} publisherPublication
 */
TimelineUpdate.prototype['publisherPublication'] = undefined;




export default Timeline;

