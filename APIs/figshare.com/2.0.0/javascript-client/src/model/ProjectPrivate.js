/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Project from './Project';

/**
 * The ProjectPrivate model module.
 * @module model/ProjectPrivate
 * @version 2.0.0
 */
class ProjectPrivate {
    /**
     * Constructs a new <code>ProjectPrivate</code>.
     * @alias module:model/ProjectPrivate
     * @implements module:model/Project
     * @param id {Number} Project id
     * @param publishedDate {String} Date when project was published
     * @param title {String} Project title
     * @param url {String} Api endpoint
     */
    constructor(id, publishedDate, title, url) { 
        Project.initialize(this, id, publishedDate, title, url);
        ProjectPrivate.initialize(this, id, publishedDate, title, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, publishedDate, title, url) { 
        obj['role'] = role;
        obj['storage'] = storage;
        obj['id'] = id;
        obj['published_date'] = publishedDate;
        obj['title'] = title;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>ProjectPrivate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectPrivate} obj Optional instance to populate.
     * @return {module:model/ProjectPrivate} The populated <code>ProjectPrivate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectPrivate();
            Project.constructFromObject(data, obj);

            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('storage')) {
                obj['storage'] = ApiClient.convertToType(data['storage'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('published_date')) {
                obj['published_date'] = ApiClient.convertToType(data['published_date'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectPrivate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectPrivate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectPrivate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['storage'] && !(typeof data['storage'] === 'string' || data['storage'] instanceof String)) {
            throw new Error("Expected the field `storage` to be a primitive type in the JSON string but got " + data['storage']);
        }
        // ensure the json data is a string
        if (data['published_date'] && !(typeof data['published_date'] === 'string' || data['published_date'] instanceof String)) {
            throw new Error("Expected the field `published_date` to be a primitive type in the JSON string but got " + data['published_date']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

ProjectPrivate.RequiredProperties = ["role", "storage", "id", "published_date", "title", "url"];

/**
 * Role inside this project
 * @member {module:model/ProjectPrivate.RoleEnum} role
 */
ProjectPrivate.prototype['role'] = undefined;

/**
 * Project storage type
 * @member {module:model/ProjectPrivate.StorageEnum} storage
 */
ProjectPrivate.prototype['storage'] = undefined;

/**
 * Project id
 * @member {Number} id
 */
ProjectPrivate.prototype['id'] = undefined;

/**
 * Date when project was published
 * @member {String} published_date
 */
ProjectPrivate.prototype['published_date'] = undefined;

/**
 * Project title
 * @member {String} title
 */
ProjectPrivate.prototype['title'] = undefined;

/**
 * Api endpoint
 * @member {String} url
 */
ProjectPrivate.prototype['url'] = undefined;


// Implement Project interface:
/**
 * Project id
 * @member {Number} id
 */
Project.prototype['id'] = undefined;
/**
 * Date when project was published
 * @member {String} published_date
 */
Project.prototype['published_date'] = undefined;
/**
 * Project title
 * @member {String} title
 */
Project.prototype['title'] = undefined;
/**
 * Api endpoint
 * @member {String} url
 */
Project.prototype['url'] = undefined;



/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
ProjectPrivate['RoleEnum'] = {

    /**
     * value: "Owner"
     * @const
     */
    "Owner": "Owner",

    /**
     * value: "Collaborator"
     * @const
     */
    "Collaborator": "Collaborator",

    /**
     * value: "Viewer"
     * @const
     */
    "Viewer": "Viewer"
};


/**
 * Allowed values for the <code>storage</code> property.
 * @enum {String}
 * @readonly
 */
ProjectPrivate['StorageEnum'] = {

    /**
     * value: "individual"
     * @const
     */
    "individual": "individual",

    /**
     * value: "group"
     * @const
     */
    "group": "group"
};



export default ProjectPrivate;

