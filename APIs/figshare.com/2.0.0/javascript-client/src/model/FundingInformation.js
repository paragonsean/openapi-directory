/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FundingInformation model module.
 * @module model/FundingInformation
 * @version 2.0.0
 */
class FundingInformation {
    /**
     * Constructs a new <code>FundingInformation</code>.
     * @alias module:model/FundingInformation
     * @param funderName {String} Funder's name
     * @param grantCode {String} The grant code
     * @param id {Number} Funding id
     * @param isUserDefined {Boolean} Return whether the grant has been introduced manually
     * @param title {String} The funding name
     * @param url {String} The grant url
     */
    constructor(funderName, grantCode, id, isUserDefined, title, url) { 
        
        FundingInformation.initialize(this, funderName, grantCode, id, isUserDefined, title, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, funderName, grantCode, id, isUserDefined, title, url) { 
        obj['funder_name'] = funderName;
        obj['grant_code'] = grantCode;
        obj['id'] = id;
        obj['is_user_defined'] = isUserDefined;
        obj['title'] = title;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>FundingInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FundingInformation} obj Optional instance to populate.
     * @return {module:model/FundingInformation} The populated <code>FundingInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FundingInformation();

            if (data.hasOwnProperty('funder_name')) {
                obj['funder_name'] = ApiClient.convertToType(data['funder_name'], 'String');
            }
            if (data.hasOwnProperty('grant_code')) {
                obj['grant_code'] = ApiClient.convertToType(data['grant_code'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_user_defined')) {
                obj['is_user_defined'] = ApiClient.convertToType(data['is_user_defined'], 'Boolean');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FundingInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FundingInformation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FundingInformation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['funder_name'] && !(typeof data['funder_name'] === 'string' || data['funder_name'] instanceof String)) {
            throw new Error("Expected the field `funder_name` to be a primitive type in the JSON string but got " + data['funder_name']);
        }
        // ensure the json data is a string
        if (data['grant_code'] && !(typeof data['grant_code'] === 'string' || data['grant_code'] instanceof String)) {
            throw new Error("Expected the field `grant_code` to be a primitive type in the JSON string but got " + data['grant_code']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

FundingInformation.RequiredProperties = ["funder_name", "grant_code", "id", "is_user_defined", "title", "url"];

/**
 * Funder's name
 * @member {String} funder_name
 */
FundingInformation.prototype['funder_name'] = undefined;

/**
 * The grant code
 * @member {String} grant_code
 */
FundingInformation.prototype['grant_code'] = undefined;

/**
 * Funding id
 * @member {Number} id
 */
FundingInformation.prototype['id'] = undefined;

/**
 * Return whether the grant has been introduced manually
 * @member {Boolean} is_user_defined
 */
FundingInformation.prototype['is_user_defined'] = undefined;

/**
 * The funding name
 * @member {String} title
 */
FundingInformation.prototype['title'] = undefined;

/**
 * The grant url
 * @member {String} url
 */
FundingInformation.prototype['url'] = undefined;






export default FundingInformation;

