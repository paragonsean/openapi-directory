/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ArticleEmbargo model module.
 * @module model/ArticleEmbargo
 * @version 2.0.0
 */
class ArticleEmbargo {
    /**
     * Constructs a new <code>ArticleEmbargo</code>.
     * @alias module:model/ArticleEmbargo
     * @param embargoDate {String} Date when embargo lifts
     * @param embargoOptions {Array.<Object>} List of embargo permissions that are associated with the article. If the type is logged_in and the group_ids list is empty, then the whole institution can see the article; if there are multiple group_ids, then only users that are under those groups can see the article.
     * @param embargoReason {String} Reason for embargo
     * @param embargoTitle {String} Title for embargo
     * @param embargoType {String} Embargo type
     * @param isEmbargoed {Boolean} True if embargoed
     */
    constructor(embargoDate, embargoOptions, embargoReason, embargoTitle, embargoType, isEmbargoed) { 
        
        ArticleEmbargo.initialize(this, embargoDate, embargoOptions, embargoReason, embargoTitle, embargoType, isEmbargoed);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, embargoDate, embargoOptions, embargoReason, embargoTitle, embargoType, isEmbargoed) { 
        obj['embargo_date'] = embargoDate;
        obj['embargo_options'] = embargoOptions;
        obj['embargo_reason'] = embargoReason;
        obj['embargo_title'] = embargoTitle;
        obj['embargo_type'] = embargoType;
        obj['is_embargoed'] = isEmbargoed;
    }

    /**
     * Constructs a <code>ArticleEmbargo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArticleEmbargo} obj Optional instance to populate.
     * @return {module:model/ArticleEmbargo} The populated <code>ArticleEmbargo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArticleEmbargo();

            if (data.hasOwnProperty('embargo_date')) {
                obj['embargo_date'] = ApiClient.convertToType(data['embargo_date'], 'String');
            }
            if (data.hasOwnProperty('embargo_options')) {
                obj['embargo_options'] = ApiClient.convertToType(data['embargo_options'], [Object]);
            }
            if (data.hasOwnProperty('embargo_reason')) {
                obj['embargo_reason'] = ApiClient.convertToType(data['embargo_reason'], 'String');
            }
            if (data.hasOwnProperty('embargo_title')) {
                obj['embargo_title'] = ApiClient.convertToType(data['embargo_title'], 'String');
            }
            if (data.hasOwnProperty('embargo_type')) {
                obj['embargo_type'] = ApiClient.convertToType(data['embargo_type'], 'String');
            }
            if (data.hasOwnProperty('is_embargoed')) {
                obj['is_embargoed'] = ApiClient.convertToType(data['is_embargoed'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArticleEmbargo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArticleEmbargo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArticleEmbargo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['embargo_date'] && !(typeof data['embargo_date'] === 'string' || data['embargo_date'] instanceof String)) {
            throw new Error("Expected the field `embargo_date` to be a primitive type in the JSON string but got " + data['embargo_date']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['embargo_options'])) {
            throw new Error("Expected the field `embargo_options` to be an array in the JSON data but got " + data['embargo_options']);
        }
        // ensure the json data is a string
        if (data['embargo_reason'] && !(typeof data['embargo_reason'] === 'string' || data['embargo_reason'] instanceof String)) {
            throw new Error("Expected the field `embargo_reason` to be a primitive type in the JSON string but got " + data['embargo_reason']);
        }
        // ensure the json data is a string
        if (data['embargo_title'] && !(typeof data['embargo_title'] === 'string' || data['embargo_title'] instanceof String)) {
            throw new Error("Expected the field `embargo_title` to be a primitive type in the JSON string but got " + data['embargo_title']);
        }
        // ensure the json data is a string
        if (data['embargo_type'] && !(typeof data['embargo_type'] === 'string' || data['embargo_type'] instanceof String)) {
            throw new Error("Expected the field `embargo_type` to be a primitive type in the JSON string but got " + data['embargo_type']);
        }

        return true;
    }


}

ArticleEmbargo.RequiredProperties = ["embargo_date", "embargo_options", "embargo_reason", "embargo_title", "embargo_type", "is_embargoed"];

/**
 * Date when embargo lifts
 * @member {String} embargo_date
 */
ArticleEmbargo.prototype['embargo_date'] = undefined;

/**
 * List of embargo permissions that are associated with the article. If the type is logged_in and the group_ids list is empty, then the whole institution can see the article; if there are multiple group_ids, then only users that are under those groups can see the article.
 * @member {Array.<Object>} embargo_options
 */
ArticleEmbargo.prototype['embargo_options'] = undefined;

/**
 * Reason for embargo
 * @member {String} embargo_reason
 */
ArticleEmbargo.prototype['embargo_reason'] = undefined;

/**
 * Title for embargo
 * @member {String} embargo_title
 */
ArticleEmbargo.prototype['embargo_title'] = undefined;

/**
 * Embargo type
 * @member {String} embargo_type
 */
ArticleEmbargo.prototype['embargo_type'] = undefined;

/**
 * True if embargoed
 * @member {Boolean} is_embargoed
 */
ArticleEmbargo.prototype['is_embargoed'] = undefined;






export default ArticleEmbargo;

