/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Collaborator from './Collaborator';
import CustomArticleField from './CustomArticleField';
import FundingInformation from './FundingInformation';
import ProjectPrivate from './ProjectPrivate';

/**
 * The ProjectCompletePrivate model module.
 * @module model/ProjectCompletePrivate
 * @version 2.0.0
 */
class ProjectCompletePrivate {
    /**
     * Constructs a new <code>ProjectCompletePrivate</code>.
     * @alias module:model/ProjectCompletePrivate
     * @implements module:model/ProjectPrivate
     * @param role {module:model/ProjectCompletePrivate.RoleEnum} Role inside this project
     * @param storage {module:model/ProjectCompletePrivate.StorageEnum} Project storage type
     * @param id {Number} Project id
     * @param publishedDate {String} Date when project was published
     * @param title {String} Project title
     * @param url {String} Api endpoint
     */
    constructor(role, storage, id, publishedDate, title, url) { 
        ProjectPrivate.initialize(this, id, publishedDate, title, url);
        ProjectCompletePrivate.initialize(this, role, storage, id, publishedDate, title, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, role, storage, id, publishedDate, title, url) { 
        obj['account_id'] = accountId;
        obj['collaborators'] = collaborators;
        obj['created_date'] = createdDate;
        obj['custom_fields'] = customFields;
        obj['description'] = description;
        obj['figshare_url'] = figshareUrl;
        obj['funding'] = funding;
        obj['funding_list'] = fundingList;
        obj['group_id'] = groupId;
        obj['modified_date'] = modifiedDate;
        obj['quota'] = quota;
        obj['used_quota'] = usedQuota;
        obj['used_quota_private'] = usedQuotaPrivate;
        obj['used_quota_public'] = usedQuotaPublic;
        obj['role'] = role;
        obj['storage'] = storage;
        obj['id'] = id;
        obj['published_date'] = publishedDate;
        obj['title'] = title;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>ProjectCompletePrivate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectCompletePrivate} obj Optional instance to populate.
     * @return {module:model/ProjectCompletePrivate} The populated <code>ProjectCompletePrivate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectCompletePrivate();
            ProjectPrivate.constructFromObject(data, obj);

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'Number');
            }
            if (data.hasOwnProperty('collaborators')) {
                obj['collaborators'] = ApiClient.convertToType(data['collaborators'], [Collaborator]);
            }
            if (data.hasOwnProperty('created_date')) {
                obj['created_date'] = ApiClient.convertToType(data['created_date'], 'String');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], [CustomArticleField]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('figshare_url')) {
                obj['figshare_url'] = ApiClient.convertToType(data['figshare_url'], 'String');
            }
            if (data.hasOwnProperty('funding')) {
                obj['funding'] = ApiClient.convertToType(data['funding'], 'String');
            }
            if (data.hasOwnProperty('funding_list')) {
                obj['funding_list'] = ApiClient.convertToType(data['funding_list'], [FundingInformation]);
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'Number');
            }
            if (data.hasOwnProperty('modified_date')) {
                obj['modified_date'] = ApiClient.convertToType(data['modified_date'], 'String');
            }
            if (data.hasOwnProperty('quota')) {
                obj['quota'] = ApiClient.convertToType(data['quota'], 'Number');
            }
            if (data.hasOwnProperty('used_quota')) {
                obj['used_quota'] = ApiClient.convertToType(data['used_quota'], 'Number');
            }
            if (data.hasOwnProperty('used_quota_private')) {
                obj['used_quota_private'] = ApiClient.convertToType(data['used_quota_private'], 'Number');
            }
            if (data.hasOwnProperty('used_quota_public')) {
                obj['used_quota_public'] = ApiClient.convertToType(data['used_quota_public'], 'Number');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('storage')) {
                obj['storage'] = ApiClient.convertToType(data['storage'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('published_date')) {
                obj['published_date'] = ApiClient.convertToType(data['published_date'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectCompletePrivate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectCompletePrivate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectCompletePrivate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['collaborators']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['collaborators'])) {
                throw new Error("Expected the field `collaborators` to be an array in the JSON data but got " + data['collaborators']);
            }
            // validate the optional field `collaborators` (array)
            for (const item of data['collaborators']) {
                Collaborator.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['created_date'] && !(typeof data['created_date'] === 'string' || data['created_date'] instanceof String)) {
            throw new Error("Expected the field `created_date` to be a primitive type in the JSON string but got " + data['created_date']);
        }
        if (data['custom_fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['custom_fields'])) {
                throw new Error("Expected the field `custom_fields` to be an array in the JSON data but got " + data['custom_fields']);
            }
            // validate the optional field `custom_fields` (array)
            for (const item of data['custom_fields']) {
                CustomArticleField.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['figshare_url'] && !(typeof data['figshare_url'] === 'string' || data['figshare_url'] instanceof String)) {
            throw new Error("Expected the field `figshare_url` to be a primitive type in the JSON string but got " + data['figshare_url']);
        }
        // ensure the json data is a string
        if (data['funding'] && !(typeof data['funding'] === 'string' || data['funding'] instanceof String)) {
            throw new Error("Expected the field `funding` to be a primitive type in the JSON string but got " + data['funding']);
        }
        if (data['funding_list']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['funding_list'])) {
                throw new Error("Expected the field `funding_list` to be an array in the JSON data but got " + data['funding_list']);
            }
            // validate the optional field `funding_list` (array)
            for (const item of data['funding_list']) {
                FundingInformation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['modified_date'] && !(typeof data['modified_date'] === 'string' || data['modified_date'] instanceof String)) {
            throw new Error("Expected the field `modified_date` to be a primitive type in the JSON string but got " + data['modified_date']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['storage'] && !(typeof data['storage'] === 'string' || data['storage'] instanceof String)) {
            throw new Error("Expected the field `storage` to be a primitive type in the JSON string but got " + data['storage']);
        }
        // ensure the json data is a string
        if (data['published_date'] && !(typeof data['published_date'] === 'string' || data['published_date'] instanceof String)) {
            throw new Error("Expected the field `published_date` to be a primitive type in the JSON string but got " + data['published_date']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

ProjectCompletePrivate.RequiredProperties = ["account_id", "collaborators", "created_date", "custom_fields", "description", "figshare_url", "funding", "funding_list", "group_id", "modified_date", "quota", "used_quota", "used_quota_private", "used_quota_public", "role", "storage", "id", "published_date", "title", "url"];

/**
 * ID of the account owning the project
 * @member {Number} account_id
 */
ProjectCompletePrivate.prototype['account_id'] = undefined;

/**
 * List of project collaborators
 * @member {Array.<module:model/Collaborator>} collaborators
 */
ProjectCompletePrivate.prototype['collaborators'] = undefined;

/**
 * Date when project was created
 * @member {String} created_date
 */
ProjectCompletePrivate.prototype['created_date'] = undefined;

/**
 * Collection custom fields
 * @member {Array.<module:model/CustomArticleField>} custom_fields
 */
ProjectCompletePrivate.prototype['custom_fields'] = undefined;

/**
 * Project description
 * @member {String} description
 */
ProjectCompletePrivate.prototype['description'] = undefined;

/**
 * Project public url
 * @member {String} figshare_url
 */
ProjectCompletePrivate.prototype['figshare_url'] = undefined;

/**
 * Project funding
 * @member {String} funding
 */
ProjectCompletePrivate.prototype['funding'] = undefined;

/**
 * Full Project funding information
 * @member {Array.<module:model/FundingInformation>} funding_list
 */
ProjectCompletePrivate.prototype['funding_list'] = undefined;

/**
 * Group of project if any
 * @member {Number} group_id
 */
ProjectCompletePrivate.prototype['group_id'] = undefined;

/**
 * Date when project was last modified
 * @member {String} modified_date
 */
ProjectCompletePrivate.prototype['modified_date'] = undefined;

/**
 * Project quota
 * @member {Number} quota
 */
ProjectCompletePrivate.prototype['quota'] = undefined;

/**
 * Project used quota
 * @member {Number} used_quota
 */
ProjectCompletePrivate.prototype['used_quota'] = undefined;

/**
 * Project private quota used
 * @member {Number} used_quota_private
 */
ProjectCompletePrivate.prototype['used_quota_private'] = undefined;

/**
 * Project public quota used
 * @member {Number} used_quota_public
 */
ProjectCompletePrivate.prototype['used_quota_public'] = undefined;

/**
 * Role inside this project
 * @member {module:model/ProjectCompletePrivate.RoleEnum} role
 */
ProjectCompletePrivate.prototype['role'] = undefined;

/**
 * Project storage type
 * @member {module:model/ProjectCompletePrivate.StorageEnum} storage
 */
ProjectCompletePrivate.prototype['storage'] = undefined;

/**
 * Project id
 * @member {Number} id
 */
ProjectCompletePrivate.prototype['id'] = undefined;

/**
 * Date when project was published
 * @member {String} published_date
 */
ProjectCompletePrivate.prototype['published_date'] = undefined;

/**
 * Project title
 * @member {String} title
 */
ProjectCompletePrivate.prototype['title'] = undefined;

/**
 * Api endpoint
 * @member {String} url
 */
ProjectCompletePrivate.prototype['url'] = undefined;


// Implement ProjectPrivate interface:
/**
 * Project id
 * @member {Number} id
 */
ProjectPrivate.prototype['id'] = undefined;
/**
 * Date when project was published
 * @member {String} published_date
 */
ProjectPrivate.prototype['published_date'] = undefined;
/**
 * Project title
 * @member {String} title
 */
ProjectPrivate.prototype['title'] = undefined;
/**
 * Api endpoint
 * @member {String} url
 */
ProjectPrivate.prototype['url'] = undefined;



/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
ProjectCompletePrivate['RoleEnum'] = {

    /**
     * value: "Owner"
     * @const
     */
    "Owner": "Owner",

    /**
     * value: "Collaborator"
     * @const
     */
    "Collaborator": "Collaborator",

    /**
     * value: "Viewer"
     * @const
     */
    "Viewer": "Viewer"
};


/**
 * Allowed values for the <code>storage</code> property.
 * @enum {String}
 * @readonly
 */
ProjectCompletePrivate['StorageEnum'] = {

    /**
     * value: "individual"
     * @const
     */
    "individual": "individual",

    /**
     * value: "group"
     * @const
     */
    "group": "group"
};



export default ProjectCompletePrivate;

