/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccountReport model module.
 * @module model/AccountReport
 * @version 2.0.0
 */
class AccountReport {
    /**
     * Constructs a new <code>AccountReport</code>.
     * @alias module:model/AccountReport
     * @param accountId {Number} The ID of the account which generated this report.
     * @param createdDate {String} Date when the AccountReport was requested
     * @param downloadUrl {String} The download link for the generated XLSX
     * @param groupId {Number} The group ID that was used to filter the report, if any.
     * @param id {Number} A unique ID for the AccountRecord
     * @param status {module:model/AccountReport.StatusEnum} Status of the report
     */
    constructor(accountId, createdDate, downloadUrl, groupId, id, status) { 
        
        AccountReport.initialize(this, accountId, createdDate, downloadUrl, groupId, id, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, createdDate, downloadUrl, groupId, id, status) { 
        obj['account_id'] = accountId;
        obj['created_date'] = createdDate;
        obj['download_url'] = downloadUrl;
        obj['group_id'] = groupId;
        obj['id'] = id;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>AccountReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountReport} obj Optional instance to populate.
     * @return {module:model/AccountReport} The populated <code>AccountReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountReport();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'Number');
            }
            if (data.hasOwnProperty('created_date')) {
                obj['created_date'] = ApiClient.convertToType(data['created_date'], 'String');
            }
            if (data.hasOwnProperty('download_url')) {
                obj['download_url'] = ApiClient.convertToType(data['download_url'], 'String');
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountReport</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountReport.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['created_date'] && !(typeof data['created_date'] === 'string' || data['created_date'] instanceof String)) {
            throw new Error("Expected the field `created_date` to be a primitive type in the JSON string but got " + data['created_date']);
        }
        // ensure the json data is a string
        if (data['download_url'] && !(typeof data['download_url'] === 'string' || data['download_url'] instanceof String)) {
            throw new Error("Expected the field `download_url` to be a primitive type in the JSON string but got " + data['download_url']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

AccountReport.RequiredProperties = ["account_id", "created_date", "download_url", "group_id", "id", "status"];

/**
 * The ID of the account which generated this report.
 * @member {Number} account_id
 */
AccountReport.prototype['account_id'] = undefined;

/**
 * Date when the AccountReport was requested
 * @member {String} created_date
 */
AccountReport.prototype['created_date'] = undefined;

/**
 * The download link for the generated XLSX
 * @member {String} download_url
 */
AccountReport.prototype['download_url'] = undefined;

/**
 * The group ID that was used to filter the report, if any.
 * @member {Number} group_id
 */
AccountReport.prototype['group_id'] = undefined;

/**
 * A unique ID for the AccountRecord
 * @member {Number} id
 */
AccountReport.prototype['id'] = undefined;

/**
 * Status of the report
 * @member {module:model/AccountReport.StatusEnum} status
 */
AccountReport.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
AccountReport['StatusEnum'] = {

    /**
     * value: "missing"
     * @const
     */
    "missing": "missing",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "done"
     * @const
     */
    "done": "done"
};



export default AccountReport;

