/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GroupEmbargoOptions model module.
 * @module model/GroupEmbargoOptions
 * @version 2.0.0
 */
class GroupEmbargoOptions {
    /**
     * Constructs a new <code>GroupEmbargoOptions</code>.
     * @alias module:model/GroupEmbargoOptions
     * @param id {Number} Embargo option id
     * @param ipName {String} IP range name; value appears if type is ip_range
     * @param type {module:model/GroupEmbargoOptions.TypeEnum} Embargo permission type
     */
    constructor(id, ipName, type) { 
        
        GroupEmbargoOptions.initialize(this, id, ipName, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, ipName, type) { 
        obj['id'] = id;
        obj['ip_name'] = ipName;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>GroupEmbargoOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupEmbargoOptions} obj Optional instance to populate.
     * @return {module:model/GroupEmbargoOptions} The populated <code>GroupEmbargoOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupEmbargoOptions();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('ip_name')) {
                obj['ip_name'] = ApiClient.convertToType(data['ip_name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupEmbargoOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupEmbargoOptions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GroupEmbargoOptions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ip_name'] && !(typeof data['ip_name'] === 'string' || data['ip_name'] instanceof String)) {
            throw new Error("Expected the field `ip_name` to be a primitive type in the JSON string but got " + data['ip_name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

GroupEmbargoOptions.RequiredProperties = ["id", "ip_name", "type"];

/**
 * Embargo option id
 * @member {Number} id
 */
GroupEmbargoOptions.prototype['id'] = undefined;

/**
 * IP range name; value appears if type is ip_range
 * @member {String} ip_name
 */
GroupEmbargoOptions.prototype['ip_name'] = undefined;

/**
 * Embargo permission type
 * @member {module:model/GroupEmbargoOptions.TypeEnum} type
 */
GroupEmbargoOptions.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GroupEmbargoOptions['TypeEnum'] = {

    /**
     * value: "logged_in"
     * @const
     */
    "logged_in": "logged_in",

    /**
     * value: "ip_range"
     * @const
     */
    "ip_range": "ip_range",

    /**
     * value: "administrator"
     * @const
     */
    "administrator": "administrator"
};



export default GroupEmbargoOptions;

