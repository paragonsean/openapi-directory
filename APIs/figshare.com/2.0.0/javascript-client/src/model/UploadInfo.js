/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UploadFilePart from './UploadFilePart';

/**
 * The UploadInfo model module.
 * @module model/UploadInfo
 * @version 2.0.0
 */
class UploadInfo {
    /**
     * Constructs a new <code>UploadInfo</code>.
     * @alias module:model/UploadInfo
     */
    constructor() { 
        
        UploadInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UploadInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadInfo} obj Optional instance to populate.
     * @return {module:model/UploadInfo} The populated <code>UploadInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadInfo();

            if (data.hasOwnProperty('md5')) {
                obj['md5'] = ApiClient.convertToType(data['md5'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parts')) {
                obj['parts'] = ApiClient.convertToType(data['parts'], [UploadFilePart]);
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['md5'] && !(typeof data['md5'] === 'string' || data['md5'] instanceof String)) {
            throw new Error("Expected the field `md5` to be a primitive type in the JSON string but got " + data['md5']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['parts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parts'])) {
                throw new Error("Expected the field `parts` to be an array in the JSON data but got " + data['parts']);
            }
            // validate the optional field `parts` (array)
            for (const item of data['parts']) {
                UploadFilePart.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }

        return true;
    }


}



/**
 * md5 provided on upload initialization
 * @member {String} md5
 */
UploadInfo.prototype['md5'] = undefined;

/**
 * name of file on upload server
 * @member {String} name
 */
UploadInfo.prototype['name'] = undefined;

/**
 * Uploads parts
 * @member {Array.<module:model/UploadFilePart>} parts
 */
UploadInfo.prototype['parts'] = undefined;

/**
 * size of file in bytes
 * @member {Number} size
 */
UploadInfo.prototype['size'] = undefined;

/**
 * Upload status
 * @member {module:model/UploadInfo.StatusEnum} status
 */
UploadInfo.prototype['status'] = undefined;

/**
 * token received after initializing a file upload
 * @member {String} token
 */
UploadInfo.prototype['token'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
UploadInfo['StatusEnum'] = {

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "COMPLETED"
     * @const
     */
    "COMPLETED": "COMPLETED",

    /**
     * value: "ABORTED"
     * @const
     */
    "ABORTED": "ABORTED"
};



export default UploadInfo;

