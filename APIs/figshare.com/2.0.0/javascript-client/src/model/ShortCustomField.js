/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShortCustomField model module.
 * @module model/ShortCustomField
 * @version 2.0.0
 */
class ShortCustomField {
    /**
     * Constructs a new <code>ShortCustomField</code>.
     * @alias module:model/ShortCustomField
     * @param fieldType {module:model/ShortCustomField.FieldTypeEnum} Custom field type
     * @param id {Number} Custom field id
     * @param name {String} Custom field name
     */
    constructor(fieldType, id, name) { 
        
        ShortCustomField.initialize(this, fieldType, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fieldType, id, name) { 
        obj['field_type'] = fieldType;
        obj['id'] = id;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>ShortCustomField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShortCustomField} obj Optional instance to populate.
     * @return {module:model/ShortCustomField} The populated <code>ShortCustomField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShortCustomField();

            if (data.hasOwnProperty('field_type')) {
                obj['field_type'] = ApiClient.convertToType(data['field_type'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShortCustomField</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShortCustomField</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ShortCustomField.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['field_type'] && !(typeof data['field_type'] === 'string' || data['field_type'] instanceof String)) {
            throw new Error("Expected the field `field_type` to be a primitive type in the JSON string but got " + data['field_type']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

ShortCustomField.RequiredProperties = ["field_type", "id", "name"];

/**
 * Custom field type
 * @member {module:model/ShortCustomField.FieldTypeEnum} field_type
 */
ShortCustomField.prototype['field_type'] = undefined;

/**
 * Custom field id
 * @member {Number} id
 */
ShortCustomField.prototype['id'] = undefined;

/**
 * Custom field name
 * @member {String} name
 */
ShortCustomField.prototype['name'] = undefined;





/**
 * Allowed values for the <code>field_type</code> property.
 * @enum {String}
 * @readonly
 */
ShortCustomField['FieldTypeEnum'] = {

    /**
     * value: "text"
     * @const
     */
    "text": "text",

    /**
     * value: "textarea"
     * @const
     */
    "textarea": "textarea",

    /**
     * value: "dropdown"
     * @const
     */
    "dropdown": "dropdown",

    /**
     * value: "url"
     * @const
     */
    "url": "url",

    /**
     * value: "email"
     * @const
     */
    "email": "email",

    /**
     * value: "date"
     * @const
     */
    "date": "date",

    /**
     * value: "dropdown_large_list"
     * @const
     */
    "dropdown_large_list": "dropdown_large_list"
};



export default ShortCustomField;

