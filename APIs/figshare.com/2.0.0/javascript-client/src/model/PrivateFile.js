/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PublicFile from './PublicFile';

/**
 * The PrivateFile model module.
 * @module model/PrivateFile
 * @version 2.0.0
 */
class PrivateFile {
    /**
     * Constructs a new <code>PrivateFile</code>.
     * @alias module:model/PrivateFile
     * @implements module:model/PublicFile
     * @param computedMd5 {String} File computed md5
     * @param downloadUrl {String} Url for file download
     * @param id {Number} File id
     * @param isLinkOnly {Boolean} True if file is hosted somewhere else
     * @param name {String} File name
     * @param size {Number} File size
     * @param suppliedMd5 {String} File supplied md5
     */
    constructor(computedMd5, downloadUrl, id, isLinkOnly, name, size, suppliedMd5) { 
        PublicFile.initialize(this, computedMd5, downloadUrl, id, isLinkOnly, name, size, suppliedMd5);
        PrivateFile.initialize(this, computedMd5, downloadUrl, id, isLinkOnly, name, size, suppliedMd5);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, computedMd5, downloadUrl, id, isLinkOnly, name, size, suppliedMd5) { 
        obj['is_attached_to_public_version'] = isAttachedToPublicVersion;
        obj['preview_state'] = previewState;
        obj['status'] = status;
        obj['upload_token'] = uploadToken;
        obj['upload_url'] = uploadUrl;
        obj['viewer_type'] = viewerType;
        obj['computed_md5'] = computedMd5;
        obj['download_url'] = downloadUrl;
        obj['id'] = id;
        obj['is_link_only'] = isLinkOnly;
        obj['name'] = name;
        obj['size'] = size;
        obj['supplied_md5'] = suppliedMd5;
    }

    /**
     * Constructs a <code>PrivateFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrivateFile} obj Optional instance to populate.
     * @return {module:model/PrivateFile} The populated <code>PrivateFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrivateFile();
            PublicFile.constructFromObject(data, obj);

            if (data.hasOwnProperty('is_attached_to_public_version')) {
                obj['is_attached_to_public_version'] = ApiClient.convertToType(data['is_attached_to_public_version'], 'Boolean');
            }
            if (data.hasOwnProperty('preview_state')) {
                obj['preview_state'] = ApiClient.convertToType(data['preview_state'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('upload_token')) {
                obj['upload_token'] = ApiClient.convertToType(data['upload_token'], 'String');
            }
            if (data.hasOwnProperty('upload_url')) {
                obj['upload_url'] = ApiClient.convertToType(data['upload_url'], 'String');
            }
            if (data.hasOwnProperty('viewer_type')) {
                obj['viewer_type'] = ApiClient.convertToType(data['viewer_type'], 'String');
            }
            if (data.hasOwnProperty('computed_md5')) {
                obj['computed_md5'] = ApiClient.convertToType(data['computed_md5'], 'String');
            }
            if (data.hasOwnProperty('download_url')) {
                obj['download_url'] = ApiClient.convertToType(data['download_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_link_only')) {
                obj['is_link_only'] = ApiClient.convertToType(data['is_link_only'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('supplied_md5')) {
                obj['supplied_md5'] = ApiClient.convertToType(data['supplied_md5'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PrivateFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PrivateFile</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PrivateFile.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['preview_state'] && !(typeof data['preview_state'] === 'string' || data['preview_state'] instanceof String)) {
            throw new Error("Expected the field `preview_state` to be a primitive type in the JSON string but got " + data['preview_state']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['upload_token'] && !(typeof data['upload_token'] === 'string' || data['upload_token'] instanceof String)) {
            throw new Error("Expected the field `upload_token` to be a primitive type in the JSON string but got " + data['upload_token']);
        }
        // ensure the json data is a string
        if (data['upload_url'] && !(typeof data['upload_url'] === 'string' || data['upload_url'] instanceof String)) {
            throw new Error("Expected the field `upload_url` to be a primitive type in the JSON string but got " + data['upload_url']);
        }
        // ensure the json data is a string
        if (data['viewer_type'] && !(typeof data['viewer_type'] === 'string' || data['viewer_type'] instanceof String)) {
            throw new Error("Expected the field `viewer_type` to be a primitive type in the JSON string but got " + data['viewer_type']);
        }
        // ensure the json data is a string
        if (data['computed_md5'] && !(typeof data['computed_md5'] === 'string' || data['computed_md5'] instanceof String)) {
            throw new Error("Expected the field `computed_md5` to be a primitive type in the JSON string but got " + data['computed_md5']);
        }
        // ensure the json data is a string
        if (data['download_url'] && !(typeof data['download_url'] === 'string' || data['download_url'] instanceof String)) {
            throw new Error("Expected the field `download_url` to be a primitive type in the JSON string but got " + data['download_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['supplied_md5'] && !(typeof data['supplied_md5'] === 'string' || data['supplied_md5'] instanceof String)) {
            throw new Error("Expected the field `supplied_md5` to be a primitive type in the JSON string but got " + data['supplied_md5']);
        }

        return true;
    }


}

PrivateFile.RequiredProperties = ["is_attached_to_public_version", "preview_state", "status", "upload_token", "upload_url", "viewer_type", "computed_md5", "download_url", "id", "is_link_only", "name", "size", "supplied_md5"];

/**
 * True if the file is attached to a public item version
 * @member {Boolean} is_attached_to_public_version
 */
PrivateFile.prototype['is_attached_to_public_version'] = undefined;

/**
 * File preview state
 * @member {String} preview_state
 */
PrivateFile.prototype['preview_state'] = undefined;

/**
 * Status for file upload
 * @member {String} status
 */
PrivateFile.prototype['status'] = undefined;

/**
 * Token for file upload
 * @member {String} upload_token
 */
PrivateFile.prototype['upload_token'] = undefined;

/**
 * Upload url for file
 * @member {String} upload_url
 */
PrivateFile.prototype['upload_url'] = undefined;

/**
 * File viewer type
 * @member {String} viewer_type
 */
PrivateFile.prototype['viewer_type'] = undefined;

/**
 * File computed md5
 * @member {String} computed_md5
 */
PrivateFile.prototype['computed_md5'] = undefined;

/**
 * Url for file download
 * @member {String} download_url
 */
PrivateFile.prototype['download_url'] = undefined;

/**
 * File id
 * @member {Number} id
 */
PrivateFile.prototype['id'] = undefined;

/**
 * True if file is hosted somewhere else
 * @member {Boolean} is_link_only
 */
PrivateFile.prototype['is_link_only'] = undefined;

/**
 * File name
 * @member {String} name
 */
PrivateFile.prototype['name'] = undefined;

/**
 * File size
 * @member {Number} size
 */
PrivateFile.prototype['size'] = undefined;

/**
 * File supplied md5
 * @member {String} supplied_md5
 */
PrivateFile.prototype['supplied_md5'] = undefined;


// Implement PublicFile interface:
/**
 * File computed md5
 * @member {String} computed_md5
 */
PublicFile.prototype['computed_md5'] = undefined;
/**
 * Url for file download
 * @member {String} download_url
 */
PublicFile.prototype['download_url'] = undefined;
/**
 * File id
 * @member {Number} id
 */
PublicFile.prototype['id'] = undefined;
/**
 * True if file is hosted somewhere else
 * @member {Boolean} is_link_only
 */
PublicFile.prototype['is_link_only'] = undefined;
/**
 * File name
 * @member {String} name
 */
PublicFile.prototype['name'] = undefined;
/**
 * File size
 * @member {Number} size
 */
PublicFile.prototype['size'] = undefined;
/**
 * File supplied md5
 * @member {String} supplied_md5
 */
PublicFile.prototype['supplied_md5'] = undefined;




export default PrivateFile;

