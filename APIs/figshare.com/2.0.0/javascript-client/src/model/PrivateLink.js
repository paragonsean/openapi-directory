/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PrivateLink model module.
 * @module model/PrivateLink
 * @version 2.0.0
 */
class PrivateLink {
    /**
     * Constructs a new <code>PrivateLink</code>.
     * @alias module:model/PrivateLink
     * @param expiresDate {String} Date when link will expire
     * @param htmlLocation {String} HTML url for private link
     * @param id {String} Private link id
     * @param isActive {Boolean} True if private link is active
     */
    constructor(expiresDate, htmlLocation, id, isActive) { 
        
        PrivateLink.initialize(this, expiresDate, htmlLocation, id, isActive);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expiresDate, htmlLocation, id, isActive) { 
        obj['expires_date'] = expiresDate;
        obj['html_location'] = htmlLocation;
        obj['id'] = id;
        obj['is_active'] = isActive;
    }

    /**
     * Constructs a <code>PrivateLink</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrivateLink} obj Optional instance to populate.
     * @return {module:model/PrivateLink} The populated <code>PrivateLink</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrivateLink();

            if (data.hasOwnProperty('expires_date')) {
                obj['expires_date'] = ApiClient.convertToType(data['expires_date'], 'String');
            }
            if (data.hasOwnProperty('html_location')) {
                obj['html_location'] = ApiClient.convertToType(data['html_location'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PrivateLink</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PrivateLink</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PrivateLink.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['expires_date'] && !(typeof data['expires_date'] === 'string' || data['expires_date'] instanceof String)) {
            throw new Error("Expected the field `expires_date` to be a primitive type in the JSON string but got " + data['expires_date']);
        }
        // ensure the json data is a string
        if (data['html_location'] && !(typeof data['html_location'] === 'string' || data['html_location'] instanceof String)) {
            throw new Error("Expected the field `html_location` to be a primitive type in the JSON string but got " + data['html_location']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

PrivateLink.RequiredProperties = ["expires_date", "html_location", "id", "is_active"];

/**
 * Date when link will expire
 * @member {String} expires_date
 */
PrivateLink.prototype['expires_date'] = undefined;

/**
 * HTML url for private link
 * @member {String} html_location
 */
PrivateLink.prototype['html_location'] = undefined;

/**
 * Private link id
 * @member {String} id
 */
PrivateLink.prototype['id'] = undefined;

/**
 * True if private link is active
 * @member {Boolean} is_active
 */
PrivateLink.prototype['is_active'] = undefined;






export default PrivateLink;

