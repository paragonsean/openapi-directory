/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UploadFilePart model module.
 * @module model/UploadFilePart
 * @version 2.0.0
 */
class UploadFilePart {
    /**
     * Constructs a new <code>UploadFilePart</code>.
     * @alias module:model/UploadFilePart
     */
    constructor() { 
        
        UploadFilePart.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UploadFilePart</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadFilePart} obj Optional instance to populate.
     * @return {module:model/UploadFilePart} The populated <code>UploadFilePart</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadFilePart();

            if (data.hasOwnProperty('endOffset')) {
                obj['endOffset'] = ApiClient.convertToType(data['endOffset'], 'Number');
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('partNo')) {
                obj['partNo'] = ApiClient.convertToType(data['partNo'], 'Number');
            }
            if (data.hasOwnProperty('startOffset')) {
                obj['startOffset'] = ApiClient.convertToType(data['startOffset'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadFilePart</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadFilePart</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Indexes on byte range. zero-based and inclusive
 * @member {Number} endOffset
 */
UploadFilePart.prototype['endOffset'] = undefined;

/**
 * When a part is being uploaded it is being locked, by setting the locked flag to true. No changes/uploads can happen on this part from other requests.
 * @member {Boolean} locked
 */
UploadFilePart.prototype['locked'] = undefined;

/**
 * File part id
 * @member {Number} partNo
 */
UploadFilePart.prototype['partNo'] = undefined;

/**
 * Indexes on byte range. zero-based and inclusive
 * @member {Number} startOffset
 */
UploadFilePart.prototype['startOffset'] = undefined;

/**
 * part status
 * @member {module:model/UploadFilePart.StatusEnum} status
 */
UploadFilePart.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
UploadFilePart['StatusEnum'] = {

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "COMPLETE"
     * @const
     */
    "COMPLETE": "COMPLETE"
};



export default UploadFilePart;

