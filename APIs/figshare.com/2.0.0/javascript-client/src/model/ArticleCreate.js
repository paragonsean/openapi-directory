/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomArticleFieldAdd from './CustomArticleFieldAdd';
import FundingCreate from './FundingCreate';
import TimelineUpdate from './TimelineUpdate';

/**
 * The ArticleCreate model module.
 * @module model/ArticleCreate
 * @version 2.0.0
 */
class ArticleCreate {
    /**
     * Constructs a new <code>ArticleCreate</code>.
     * @alias module:model/ArticleCreate
     * @param title {String} Title of article
     */
    constructor(title) { 
        
        ArticleCreate.initialize(this, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title) { 
        obj['description'] = '';
        obj['doi'] = '';
        obj['funding'] = '';
        obj['handle'] = '';
        obj['license'] = 0;
        obj['resource_doi'] = '';
        obj['resource_title'] = '';
        obj['title'] = title;
    }

    /**
     * Constructs a <code>ArticleCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArticleCreate} obj Optional instance to populate.
     * @return {module:model/ArticleCreate} The populated <code>ArticleCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArticleCreate();

            if (data.hasOwnProperty('authors')) {
                obj['authors'] = ApiClient.convertToType(data['authors'], [Object]);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['Number']);
            }
            if (data.hasOwnProperty('categories_by_source_id')) {
                obj['categories_by_source_id'] = ApiClient.convertToType(data['categories_by_source_id'], ['String']);
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('custom_fields_list')) {
                obj['custom_fields_list'] = ApiClient.convertToType(data['custom_fields_list'], [CustomArticleFieldAdd]);
            }
            if (data.hasOwnProperty('defined_type')) {
                obj['defined_type'] = ApiClient.convertToType(data['defined_type'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('doi')) {
                obj['doi'] = ApiClient.convertToType(data['doi'], 'String');
            }
            if (data.hasOwnProperty('funding')) {
                obj['funding'] = ApiClient.convertToType(data['funding'], 'String');
            }
            if (data.hasOwnProperty('funding_list')) {
                obj['funding_list'] = ApiClient.convertToType(data['funding_list'], [FundingCreate]);
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'Number');
            }
            if (data.hasOwnProperty('handle')) {
                obj['handle'] = ApiClient.convertToType(data['handle'], 'String');
            }
            if (data.hasOwnProperty('is_metadata_record')) {
                obj['is_metadata_record'] = ApiClient.convertToType(data['is_metadata_record'], 'Boolean');
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], ['String']);
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'Number');
            }
            if (data.hasOwnProperty('metadata_reason')) {
                obj['metadata_reason'] = ApiClient.convertToType(data['metadata_reason'], 'String');
            }
            if (data.hasOwnProperty('references')) {
                obj['references'] = ApiClient.convertToType(data['references'], ['String']);
            }
            if (data.hasOwnProperty('resource_doi')) {
                obj['resource_doi'] = ApiClient.convertToType(data['resource_doi'], 'String');
            }
            if (data.hasOwnProperty('resource_title')) {
                obj['resource_title'] = ApiClient.convertToType(data['resource_title'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('timeline')) {
                obj['timeline'] = TimelineUpdate.constructFromObject(data['timeline']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArticleCreate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArticleCreate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArticleCreate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['authors'])) {
            throw new Error("Expected the field `authors` to be an array in the JSON data but got " + data['authors']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories_by_source_id'])) {
            throw new Error("Expected the field `categories_by_source_id` to be an array in the JSON data but got " + data['categories_by_source_id']);
        }
        if (data['custom_fields_list']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['custom_fields_list'])) {
                throw new Error("Expected the field `custom_fields_list` to be an array in the JSON data but got " + data['custom_fields_list']);
            }
            // validate the optional field `custom_fields_list` (array)
            for (const item of data['custom_fields_list']) {
                CustomArticleFieldAdd.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['defined_type'] && !(typeof data['defined_type'] === 'string' || data['defined_type'] instanceof String)) {
            throw new Error("Expected the field `defined_type` to be a primitive type in the JSON string but got " + data['defined_type']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['doi'] && !(typeof data['doi'] === 'string' || data['doi'] instanceof String)) {
            throw new Error("Expected the field `doi` to be a primitive type in the JSON string but got " + data['doi']);
        }
        // ensure the json data is a string
        if (data['funding'] && !(typeof data['funding'] === 'string' || data['funding'] instanceof String)) {
            throw new Error("Expected the field `funding` to be a primitive type in the JSON string but got " + data['funding']);
        }
        if (data['funding_list']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['funding_list'])) {
                throw new Error("Expected the field `funding_list` to be an array in the JSON data but got " + data['funding_list']);
            }
            // validate the optional field `funding_list` (array)
            for (const item of data['funding_list']) {
                FundingCreate.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['handle'] && !(typeof data['handle'] === 'string' || data['handle'] instanceof String)) {
            throw new Error("Expected the field `handle` to be a primitive type in the JSON string but got " + data['handle']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keywords'])) {
            throw new Error("Expected the field `keywords` to be an array in the JSON data but got " + data['keywords']);
        }
        // ensure the json data is a string
        if (data['metadata_reason'] && !(typeof data['metadata_reason'] === 'string' || data['metadata_reason'] instanceof String)) {
            throw new Error("Expected the field `metadata_reason` to be a primitive type in the JSON string but got " + data['metadata_reason']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['references'])) {
            throw new Error("Expected the field `references` to be an array in the JSON data but got " + data['references']);
        }
        // ensure the json data is a string
        if (data['resource_doi'] && !(typeof data['resource_doi'] === 'string' || data['resource_doi'] instanceof String)) {
            throw new Error("Expected the field `resource_doi` to be a primitive type in the JSON string but got " + data['resource_doi']);
        }
        // ensure the json data is a string
        if (data['resource_title'] && !(typeof data['resource_title'] === 'string' || data['resource_title'] instanceof String)) {
            throw new Error("Expected the field `resource_title` to be a primitive type in the JSON string but got " + data['resource_title']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // validate the optional field `timeline`
        if (data['timeline']) { // data not null
          TimelineUpdate.validateJSON(data['timeline']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

ArticleCreate.RequiredProperties = ["title"];

/**
 * List of authors to be associated with the article. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint.
 * @member {Array.<Object>} authors
 */
ArticleCreate.prototype['authors'] = undefined;

/**
 * List of category ids to be associated with the article(e.g [1, 23, 33, 66])
 * @member {Array.<Number>} categories
 */
ArticleCreate.prototype['categories'] = undefined;

/**
 * List of category source ids to be associated with the article, supersedes the categories property
 * @member {Array.<String>} categories_by_source_id
 */
ArticleCreate.prototype['categories_by_source_id'] = undefined;

/**
 * List of key, values pairs to be associated with the article
 * @member {Object} custom_fields
 */
ArticleCreate.prototype['custom_fields'] = undefined;

/**
 * List of custom fields values, supersedes custom_fields parameter
 * @member {Array.<module:model/CustomArticleFieldAdd>} custom_fields_list
 */
ArticleCreate.prototype['custom_fields_list'] = undefined;

/**
 * <b>One of:</b> <code>figure</code> <code>online resource</code> <code>preprint</code> <code>book</code> <code>conference contribution</code> <code>media</code> <code>dataset</code> <code>poster</code> <code>journal contribution</code> <code>presentation</code> <code>thesis</code> <code>software</code>
 * @member {String} defined_type
 */
ArticleCreate.prototype['defined_type'] = undefined;

/**
 * The article description. In a publisher case, usually this is the remote article description
 * @member {String} description
 * @default ''
 */
ArticleCreate.prototype['description'] = '';

/**
 * Not applicable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system.
 * @member {String} doi
 * @default ''
 */
ArticleCreate.prototype['doi'] = '';

/**
 * Grant number or funding authority
 * @member {String} funding
 * @default ''
 */
ArticleCreate.prototype['funding'] = '';

/**
 * Funding creation / update items
 * @member {Array.<module:model/FundingCreate>} funding_list
 */
ArticleCreate.prototype['funding_list'] = undefined;

/**
 * Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups
 * @member {Number} group_id
 */
ArticleCreate.prototype['group_id'] = undefined;

/**
 * Not applicable for regular users. In an institutional case, make sure your group supports setting Handles. This setting is applied by figshare via opening a ticket through our support/helpdesk system.
 * @member {String} handle
 * @default ''
 */
ArticleCreate.prototype['handle'] = '';

/**
 * True if article has no files
 * @member {Boolean} is_metadata_record
 */
ArticleCreate.prototype['is_metadata_record'] = undefined;

/**
 * List of tags to be associated with the article. Tags can be used instead
 * @member {Array.<String>} keywords
 */
ArticleCreate.prototype['keywords'] = undefined;

/**
 * License id for this article.
 * @member {Number} license
 * @default 0
 */
ArticleCreate.prototype['license'] = 0;

/**
 * Article metadata reason
 * @member {String} metadata_reason
 */
ArticleCreate.prototype['metadata_reason'] = undefined;

/**
 * List of links to be associated with the article (e.g [\"http://link1\", \"http://link2\", \"http://link3\"])
 * @member {Array.<String>} references
 */
ArticleCreate.prototype['references'] = undefined;

/**
 * Not applicable to regular users. In a publisher case, this is the publisher article DOI.
 * @member {String} resource_doi
 * @default ''
 */
ArticleCreate.prototype['resource_doi'] = '';

/**
 * Not applicable to regular users. In a publisher case, this is the publisher article title.
 * @member {String} resource_title
 * @default ''
 */
ArticleCreate.prototype['resource_title'] = '';

/**
 * List of tags to be associated with the article. Keywords can be used instead
 * @member {Array.<String>} tags
 */
ArticleCreate.prototype['tags'] = undefined;

/**
 * @member {module:model/TimelineUpdate} timeline
 */
ArticleCreate.prototype['timeline'] = undefined;

/**
 * Title of article
 * @member {String} title
 */
ArticleCreate.prototype['title'] = undefined;






export default ArticleCreate;

