/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Article from './Article';
import Timeline from './Timeline';

/**
 * The ArticleWithProject model module.
 * @module model/ArticleWithProject
 * @version 2.0.0
 */
class ArticleWithProject {
    /**
     * Constructs a new <code>ArticleWithProject</code>.
     * @alias module:model/ArticleWithProject
     * @implements module:model/Article
     * @param definedType {Number} Type of article identifier
     * @param definedTypeName {String} Name of the article type identifier
     * @param doi {String} DOI
     * @param groupId {Number} Group ID
     * @param handle {String} Handle
     * @param id {Number} Unique identifier for article
     * @param publishedDate {String} Posted date
     * @param thumb {String} Thumbnail image
     * @param timeline {module:model/Timeline} 
     * @param title {String} Title of article
     * @param url {String} Api endpoint for article
     * @param urlPrivateApi {String} Private Api endpoint for article
     * @param urlPrivateHtml {String} Private site endpoint for article
     * @param urlPublicApi {String} Public Api endpoint for article
     * @param urlPublicHtml {String} Public site endpoint for article
     */
    constructor(definedType, definedTypeName, doi, groupId, handle, id, publishedDate, thumb, timeline, title, url, urlPrivateApi, urlPrivateHtml, urlPublicApi, urlPublicHtml) { 
        Article.initialize(this, definedType, definedTypeName, doi, groupId, handle, id, publishedDate, thumb, timeline, title, url, urlPrivateApi, urlPrivateHtml, urlPublicApi, urlPublicHtml);
        ArticleWithProject.initialize(this, definedType, definedTypeName, doi, groupId, handle, id, publishedDate, thumb, timeline, title, url, urlPrivateApi, urlPrivateHtml, urlPublicApi, urlPublicHtml);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, definedType, definedTypeName, doi, groupId, handle, id, publishedDate, thumb, timeline, title, url, urlPrivateApi, urlPrivateHtml, urlPublicApi, urlPublicHtml) { 
        obj['project_id'] = projectId || 0;
        obj['defined_type'] = definedType;
        obj['defined_type_name'] = definedTypeName;
        obj['doi'] = doi;
        obj['group_id'] = groupId;
        obj['handle'] = handle;
        obj['id'] = id;
        obj['published_date'] = publishedDate;
        obj['thumb'] = thumb;
        obj['timeline'] = timeline;
        obj['title'] = title;
        obj['url'] = url;
        obj['url_private_api'] = urlPrivateApi;
        obj['url_private_html'] = urlPrivateHtml;
        obj['url_public_api'] = urlPublicApi;
        obj['url_public_html'] = urlPublicHtml;
    }

    /**
     * Constructs a <code>ArticleWithProject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArticleWithProject} obj Optional instance to populate.
     * @return {module:model/ArticleWithProject} The populated <code>ArticleWithProject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArticleWithProject();
            Article.constructFromObject(data, obj);

            if (data.hasOwnProperty('project_id')) {
                obj['project_id'] = ApiClient.convertToType(data['project_id'], 'Number');
            }
            if (data.hasOwnProperty('defined_type')) {
                obj['defined_type'] = ApiClient.convertToType(data['defined_type'], 'Number');
            }
            if (data.hasOwnProperty('defined_type_name')) {
                obj['defined_type_name'] = ApiClient.convertToType(data['defined_type_name'], 'String');
            }
            if (data.hasOwnProperty('doi')) {
                obj['doi'] = ApiClient.convertToType(data['doi'], 'String');
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'Number');
            }
            if (data.hasOwnProperty('handle')) {
                obj['handle'] = ApiClient.convertToType(data['handle'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('published_date')) {
                obj['published_date'] = ApiClient.convertToType(data['published_date'], 'String');
            }
            if (data.hasOwnProperty('thumb')) {
                obj['thumb'] = ApiClient.convertToType(data['thumb'], 'String');
            }
            if (data.hasOwnProperty('timeline')) {
                obj['timeline'] = Timeline.constructFromObject(data['timeline']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('url_private_api')) {
                obj['url_private_api'] = ApiClient.convertToType(data['url_private_api'], 'String');
            }
            if (data.hasOwnProperty('url_private_html')) {
                obj['url_private_html'] = ApiClient.convertToType(data['url_private_html'], 'String');
            }
            if (data.hasOwnProperty('url_public_api')) {
                obj['url_public_api'] = ApiClient.convertToType(data['url_public_api'], 'String');
            }
            if (data.hasOwnProperty('url_public_html')) {
                obj['url_public_html'] = ApiClient.convertToType(data['url_public_html'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArticleWithProject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArticleWithProject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArticleWithProject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['defined_type_name'] && !(typeof data['defined_type_name'] === 'string' || data['defined_type_name'] instanceof String)) {
            throw new Error("Expected the field `defined_type_name` to be a primitive type in the JSON string but got " + data['defined_type_name']);
        }
        // ensure the json data is a string
        if (data['doi'] && !(typeof data['doi'] === 'string' || data['doi'] instanceof String)) {
            throw new Error("Expected the field `doi` to be a primitive type in the JSON string but got " + data['doi']);
        }
        // ensure the json data is a string
        if (data['handle'] && !(typeof data['handle'] === 'string' || data['handle'] instanceof String)) {
            throw new Error("Expected the field `handle` to be a primitive type in the JSON string but got " + data['handle']);
        }
        // ensure the json data is a string
        if (data['published_date'] && !(typeof data['published_date'] === 'string' || data['published_date'] instanceof String)) {
            throw new Error("Expected the field `published_date` to be a primitive type in the JSON string but got " + data['published_date']);
        }
        // ensure the json data is a string
        if (data['thumb'] && !(typeof data['thumb'] === 'string' || data['thumb'] instanceof String)) {
            throw new Error("Expected the field `thumb` to be a primitive type in the JSON string but got " + data['thumb']);
        }
        // validate the optional field `timeline`
        if (data['timeline']) { // data not null
          Timeline.validateJSON(data['timeline']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['url_private_api'] && !(typeof data['url_private_api'] === 'string' || data['url_private_api'] instanceof String)) {
            throw new Error("Expected the field `url_private_api` to be a primitive type in the JSON string but got " + data['url_private_api']);
        }
        // ensure the json data is a string
        if (data['url_private_html'] && !(typeof data['url_private_html'] === 'string' || data['url_private_html'] instanceof String)) {
            throw new Error("Expected the field `url_private_html` to be a primitive type in the JSON string but got " + data['url_private_html']);
        }
        // ensure the json data is a string
        if (data['url_public_api'] && !(typeof data['url_public_api'] === 'string' || data['url_public_api'] instanceof String)) {
            throw new Error("Expected the field `url_public_api` to be a primitive type in the JSON string but got " + data['url_public_api']);
        }
        // ensure the json data is a string
        if (data['url_public_html'] && !(typeof data['url_public_html'] === 'string' || data['url_public_html'] instanceof String)) {
            throw new Error("Expected the field `url_public_html` to be a primitive type in the JSON string but got " + data['url_public_html']);
        }

        return true;
    }


}

ArticleWithProject.RequiredProperties = ["project_id", "defined_type", "defined_type_name", "doi", "group_id", "handle", "id", "published_date", "thumb", "timeline", "title", "url", "url_private_api", "url_private_html", "url_public_api", "url_public_html"];

/**
 * Project id for this article.
 * @member {Number} project_id
 * @default 0
 */
ArticleWithProject.prototype['project_id'] = 0;

/**
 * Type of article identifier
 * @member {Number} defined_type
 */
ArticleWithProject.prototype['defined_type'] = undefined;

/**
 * Name of the article type identifier
 * @member {String} defined_type_name
 */
ArticleWithProject.prototype['defined_type_name'] = undefined;

/**
 * DOI
 * @member {String} doi
 */
ArticleWithProject.prototype['doi'] = undefined;

/**
 * Group ID
 * @member {Number} group_id
 */
ArticleWithProject.prototype['group_id'] = undefined;

/**
 * Handle
 * @member {String} handle
 */
ArticleWithProject.prototype['handle'] = undefined;

/**
 * Unique identifier for article
 * @member {Number} id
 */
ArticleWithProject.prototype['id'] = undefined;

/**
 * Posted date
 * @member {String} published_date
 */
ArticleWithProject.prototype['published_date'] = undefined;

/**
 * Thumbnail image
 * @member {String} thumb
 */
ArticleWithProject.prototype['thumb'] = undefined;

/**
 * @member {module:model/Timeline} timeline
 */
ArticleWithProject.prototype['timeline'] = undefined;

/**
 * Title of article
 * @member {String} title
 */
ArticleWithProject.prototype['title'] = undefined;

/**
 * Api endpoint for article
 * @member {String} url
 */
ArticleWithProject.prototype['url'] = undefined;

/**
 * Private Api endpoint for article
 * @member {String} url_private_api
 */
ArticleWithProject.prototype['url_private_api'] = undefined;

/**
 * Private site endpoint for article
 * @member {String} url_private_html
 */
ArticleWithProject.prototype['url_private_html'] = undefined;

/**
 * Public Api endpoint for article
 * @member {String} url_public_api
 */
ArticleWithProject.prototype['url_public_api'] = undefined;

/**
 * Public site endpoint for article
 * @member {String} url_public_html
 */
ArticleWithProject.prototype['url_public_html'] = undefined;


// Implement Article interface:
/**
 * Type of article identifier
 * @member {Number} defined_type
 */
Article.prototype['defined_type'] = undefined;
/**
 * Name of the article type identifier
 * @member {String} defined_type_name
 */
Article.prototype['defined_type_name'] = undefined;
/**
 * DOI
 * @member {String} doi
 */
Article.prototype['doi'] = undefined;
/**
 * Group ID
 * @member {Number} group_id
 */
Article.prototype['group_id'] = undefined;
/**
 * Handle
 * @member {String} handle
 */
Article.prototype['handle'] = undefined;
/**
 * Unique identifier for article
 * @member {Number} id
 */
Article.prototype['id'] = undefined;
/**
 * Posted date
 * @member {String} published_date
 */
Article.prototype['published_date'] = undefined;
/**
 * Thumbnail image
 * @member {String} thumb
 */
Article.prototype['thumb'] = undefined;
/**
 * @member {module:model/Timeline} timeline
 */
Article.prototype['timeline'] = undefined;
/**
 * Title of article
 * @member {String} title
 */
Article.prototype['title'] = undefined;
/**
 * Api endpoint for article
 * @member {String} url
 */
Article.prototype['url'] = undefined;
/**
 * Private Api endpoint for article
 * @member {String} url_private_api
 */
Article.prototype['url_private_api'] = undefined;
/**
 * Private site endpoint for article
 * @member {String} url_private_html
 */
Article.prototype['url_private_html'] = undefined;
/**
 * Public Api endpoint for article
 * @member {String} url_public_api
 */
Article.prototype['url_public_api'] = undefined;
/**
 * Public site endpoint for article
 * @member {String} url_public_html
 */
Article.prototype['url_public_html'] = undefined;




export default ArticleWithProject;

