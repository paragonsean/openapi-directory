/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Author from './Author';
import Category from './Category';
import Collection from './Collection';
import CustomArticleField from './CustomArticleField';
import FundingInformation from './FundingInformation';
import Timeline from './Timeline';

/**
 * The CollectionCompletePrivate model module.
 * @module model/CollectionCompletePrivate
 * @version 2.0.0
 */
class CollectionCompletePrivate {
    /**
     * Constructs a new <code>CollectionCompletePrivate</code>.
     * @alias module:model/CollectionCompletePrivate
     * @implements module:model/Collection
     * @param doi {String} Collection DOI
     * @param handle {String} Collection Handle
     * @param id {Number} Collection id
     * @param publishedDate {String} Date when collection was published 
     * @param timeline {module:model/Timeline} 
     * @param title {String} Collection title
     * @param url {String} Api endpoint
     */
    constructor(doi, handle, id, publishedDate, timeline, title, url) { 
        Collection.initialize(this, doi, handle, id, publishedDate, timeline, title, url);
        CollectionCompletePrivate.initialize(this, doi, handle, id, publishedDate, timeline, title, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, doi, handle, id, publishedDate, timeline, title, url) { 
        obj['account_id'] = accountId;
        obj['articles_count'] = articlesCount;
        obj['authors'] = authors;
        obj['categories'] = categories;
        obj['citation'] = citation;
        obj['created_date'] = createdDate;
        obj['custom_fields'] = customFields;
        obj['description'] = description;
        obj['funding'] = funding;
        obj['group_id'] = groupId;
        obj['group_resource_id'] = groupResourceId;
        obj['institution_id'] = institutionId;
        obj['modified_date'] = modifiedDate;
        obj['public'] = _public;
        obj['references'] = references;
        obj['resource_doi'] = resourceDoi;
        obj['resource_id'] = resourceId;
        obj['resource_link'] = resourceLink;
        obj['resource_title'] = resourceTitle;
        obj['resource_version'] = resourceVersion;
        obj['tags'] = tags;
        obj['timeline'] = timeline;
        obj['version'] = version;
        obj['doi'] = doi;
        obj['handle'] = handle;
        obj['id'] = id;
        obj['published_date'] = publishedDate;
        obj['title'] = title;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>CollectionCompletePrivate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CollectionCompletePrivate} obj Optional instance to populate.
     * @return {module:model/CollectionCompletePrivate} The populated <code>CollectionCompletePrivate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CollectionCompletePrivate();
            Collection.constructFromObject(data, obj);

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'Number');
            }
            if (data.hasOwnProperty('articles_count')) {
                obj['articles_count'] = ApiClient.convertToType(data['articles_count'], 'Number');
            }
            if (data.hasOwnProperty('authors')) {
                obj['authors'] = ApiClient.convertToType(data['authors'], [Author]);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [Category]);
            }
            if (data.hasOwnProperty('citation')) {
                obj['citation'] = ApiClient.convertToType(data['citation'], 'String');
            }
            if (data.hasOwnProperty('created_date')) {
                obj['created_date'] = ApiClient.convertToType(data['created_date'], 'String');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], [CustomArticleField]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('funding')) {
                obj['funding'] = ApiClient.convertToType(data['funding'], [FundingInformation]);
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'Number');
            }
            if (data.hasOwnProperty('group_resource_id')) {
                obj['group_resource_id'] = ApiClient.convertToType(data['group_resource_id'], 'String');
            }
            if (data.hasOwnProperty('institution_id')) {
                obj['institution_id'] = ApiClient.convertToType(data['institution_id'], 'Number');
            }
            if (data.hasOwnProperty('modified_date')) {
                obj['modified_date'] = ApiClient.convertToType(data['modified_date'], 'String');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('references')) {
                obj['references'] = ApiClient.convertToType(data['references'], ['String']);
            }
            if (data.hasOwnProperty('resource_doi')) {
                obj['resource_doi'] = ApiClient.convertToType(data['resource_doi'], 'String');
            }
            if (data.hasOwnProperty('resource_id')) {
                obj['resource_id'] = ApiClient.convertToType(data['resource_id'], 'String');
            }
            if (data.hasOwnProperty('resource_link')) {
                obj['resource_link'] = ApiClient.convertToType(data['resource_link'], 'String');
            }
            if (data.hasOwnProperty('resource_title')) {
                obj['resource_title'] = ApiClient.convertToType(data['resource_title'], 'String');
            }
            if (data.hasOwnProperty('resource_version')) {
                obj['resource_version'] = ApiClient.convertToType(data['resource_version'], 'Number');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('timeline')) {
                obj['timeline'] = Timeline.constructFromObject(data['timeline']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('doi')) {
                obj['doi'] = ApiClient.convertToType(data['doi'], 'String');
            }
            if (data.hasOwnProperty('handle')) {
                obj['handle'] = ApiClient.convertToType(data['handle'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('published_date')) {
                obj['published_date'] = ApiClient.convertToType(data['published_date'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CollectionCompletePrivate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CollectionCompletePrivate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CollectionCompletePrivate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['authors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authors'])) {
                throw new Error("Expected the field `authors` to be an array in the JSON data but got " + data['authors']);
            }
            // validate the optional field `authors` (array)
            for (const item of data['authors']) {
                Author.validateJSON(item);
            };
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                Category.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['citation'] && !(typeof data['citation'] === 'string' || data['citation'] instanceof String)) {
            throw new Error("Expected the field `citation` to be a primitive type in the JSON string but got " + data['citation']);
        }
        // ensure the json data is a string
        if (data['created_date'] && !(typeof data['created_date'] === 'string' || data['created_date'] instanceof String)) {
            throw new Error("Expected the field `created_date` to be a primitive type in the JSON string but got " + data['created_date']);
        }
        if (data['custom_fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['custom_fields'])) {
                throw new Error("Expected the field `custom_fields` to be an array in the JSON data but got " + data['custom_fields']);
            }
            // validate the optional field `custom_fields` (array)
            for (const item of data['custom_fields']) {
                CustomArticleField.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['funding']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['funding'])) {
                throw new Error("Expected the field `funding` to be an array in the JSON data but got " + data['funding']);
            }
            // validate the optional field `funding` (array)
            for (const item of data['funding']) {
                FundingInformation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['group_resource_id'] && !(typeof data['group_resource_id'] === 'string' || data['group_resource_id'] instanceof String)) {
            throw new Error("Expected the field `group_resource_id` to be a primitive type in the JSON string but got " + data['group_resource_id']);
        }
        // ensure the json data is a string
        if (data['modified_date'] && !(typeof data['modified_date'] === 'string' || data['modified_date'] instanceof String)) {
            throw new Error("Expected the field `modified_date` to be a primitive type in the JSON string but got " + data['modified_date']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['references'])) {
            throw new Error("Expected the field `references` to be an array in the JSON data but got " + data['references']);
        }
        // ensure the json data is a string
        if (data['resource_doi'] && !(typeof data['resource_doi'] === 'string' || data['resource_doi'] instanceof String)) {
            throw new Error("Expected the field `resource_doi` to be a primitive type in the JSON string but got " + data['resource_doi']);
        }
        // ensure the json data is a string
        if (data['resource_id'] && !(typeof data['resource_id'] === 'string' || data['resource_id'] instanceof String)) {
            throw new Error("Expected the field `resource_id` to be a primitive type in the JSON string but got " + data['resource_id']);
        }
        // ensure the json data is a string
        if (data['resource_link'] && !(typeof data['resource_link'] === 'string' || data['resource_link'] instanceof String)) {
            throw new Error("Expected the field `resource_link` to be a primitive type in the JSON string but got " + data['resource_link']);
        }
        // ensure the json data is a string
        if (data['resource_title'] && !(typeof data['resource_title'] === 'string' || data['resource_title'] instanceof String)) {
            throw new Error("Expected the field `resource_title` to be a primitive type in the JSON string but got " + data['resource_title']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // validate the optional field `timeline`
        if (data['timeline']) { // data not null
          Timeline.validateJSON(data['timeline']);
        }
        // ensure the json data is a string
        if (data['doi'] && !(typeof data['doi'] === 'string' || data['doi'] instanceof String)) {
            throw new Error("Expected the field `doi` to be a primitive type in the JSON string but got " + data['doi']);
        }
        // ensure the json data is a string
        if (data['handle'] && !(typeof data['handle'] === 'string' || data['handle'] instanceof String)) {
            throw new Error("Expected the field `handle` to be a primitive type in the JSON string but got " + data['handle']);
        }
        // ensure the json data is a string
        if (data['published_date'] && !(typeof data['published_date'] === 'string' || data['published_date'] instanceof String)) {
            throw new Error("Expected the field `published_date` to be a primitive type in the JSON string but got " + data['published_date']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

CollectionCompletePrivate.RequiredProperties = ["account_id", "articles_count", "authors", "categories", "citation", "created_date", "custom_fields", "description", "funding", "group_id", "group_resource_id", "institution_id", "modified_date", "public", "references", "resource_doi", "resource_id", "resource_link", "resource_title", "resource_version", "tags", "timeline", "version", "doi", "handle", "id", "published_date", "title", "url"];

/**
 * ID of the account owning the collection
 * @member {Number} account_id
 */
CollectionCompletePrivate.prototype['account_id'] = undefined;

/**
 * Number of articles in collection
 * @member {Number} articles_count
 */
CollectionCompletePrivate.prototype['articles_count'] = undefined;

/**
 * List of collection authors
 * @member {Array.<module:model/Author>} authors
 */
CollectionCompletePrivate.prototype['authors'] = undefined;

/**
 * List of collection categories
 * @member {Array.<module:model/Category>} categories
 */
CollectionCompletePrivate.prototype['categories'] = undefined;

/**
 * Collection citation
 * @member {String} citation
 */
CollectionCompletePrivate.prototype['citation'] = undefined;

/**
 * Date when collection was created
 * @member {String} created_date
 */
CollectionCompletePrivate.prototype['created_date'] = undefined;

/**
 * Collection custom fields
 * @member {Array.<module:model/CustomArticleField>} custom_fields
 */
CollectionCompletePrivate.prototype['custom_fields'] = undefined;

/**
 * Collection description
 * @member {String} description
 */
CollectionCompletePrivate.prototype['description'] = undefined;

/**
 * Full Collection funding information
 * @member {Array.<module:model/FundingInformation>} funding
 */
CollectionCompletePrivate.prototype['funding'] = undefined;

/**
 * Collection group
 * @member {Number} group_id
 */
CollectionCompletePrivate.prototype['group_id'] = undefined;

/**
 * Collection group resource id
 * @member {String} group_resource_id
 */
CollectionCompletePrivate.prototype['group_resource_id'] = undefined;

/**
 * Collection institution
 * @member {Number} institution_id
 */
CollectionCompletePrivate.prototype['institution_id'] = undefined;

/**
 * Date when collection was last modified
 * @member {String} modified_date
 */
CollectionCompletePrivate.prototype['modified_date'] = undefined;

/**
 * True if collection is published
 * @member {Boolean} public
 */
CollectionCompletePrivate.prototype['public'] = undefined;

/**
 * List of collection references
 * @member {Array.<String>} references
 */
CollectionCompletePrivate.prototype['references'] = undefined;

/**
 * Collection resource doi
 * @member {String} resource_doi
 */
CollectionCompletePrivate.prototype['resource_doi'] = undefined;

/**
 * Collection resource id
 * @member {String} resource_id
 */
CollectionCompletePrivate.prototype['resource_id'] = undefined;

/**
 * Collection resource link
 * @member {String} resource_link
 */
CollectionCompletePrivate.prototype['resource_link'] = undefined;

/**
 * Collection resource title
 * @member {String} resource_title
 */
CollectionCompletePrivate.prototype['resource_title'] = undefined;

/**
 * Collection resource version
 * @member {Number} resource_version
 */
CollectionCompletePrivate.prototype['resource_version'] = undefined;

/**
 * List of collection tags
 * @member {Array.<String>} tags
 */
CollectionCompletePrivate.prototype['tags'] = undefined;

/**
 * @member {module:model/Timeline} timeline
 */
CollectionCompletePrivate.prototype['timeline'] = undefined;

/**
 * Collection version
 * @member {Number} version
 */
CollectionCompletePrivate.prototype['version'] = undefined;

/**
 * Collection DOI
 * @member {String} doi
 */
CollectionCompletePrivate.prototype['doi'] = undefined;

/**
 * Collection Handle
 * @member {String} handle
 */
CollectionCompletePrivate.prototype['handle'] = undefined;

/**
 * Collection id
 * @member {Number} id
 */
CollectionCompletePrivate.prototype['id'] = undefined;

/**
 * Date when collection was published 
 * @member {String} published_date
 */
CollectionCompletePrivate.prototype['published_date'] = undefined;

/**
 * Collection title
 * @member {String} title
 */
CollectionCompletePrivate.prototype['title'] = undefined;

/**
 * Api endpoint
 * @member {String} url
 */
CollectionCompletePrivate.prototype['url'] = undefined;


// Implement Collection interface:
/**
 * Collection DOI
 * @member {String} doi
 */
Collection.prototype['doi'] = undefined;
/**
 * Collection Handle
 * @member {String} handle
 */
Collection.prototype['handle'] = undefined;
/**
 * Collection id
 * @member {Number} id
 */
Collection.prototype['id'] = undefined;
/**
 * Date when collection was published 
 * @member {String} published_date
 */
Collection.prototype['published_date'] = undefined;
/**
 * @member {module:model/Timeline} timeline
 */
Collection.prototype['timeline'] = undefined;
/**
 * Collection title
 * @member {String} title
 */
Collection.prototype['title'] = undefined;
/**
 * Api endpoint
 * @member {String} url
 */
Collection.prototype['url'] = undefined;




export default CollectionCompletePrivate;

