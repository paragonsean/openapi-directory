/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProjectCollaboratorInvite model module.
 * @module model/ProjectCollaboratorInvite
 * @version 2.0.0
 */
class ProjectCollaboratorInvite {
    /**
     * Constructs a new <code>ProjectCollaboratorInvite</code>.
     * @alias module:model/ProjectCollaboratorInvite
     * @param roleName {module:model/ProjectCollaboratorInvite.RoleNameEnum} Role of the the collaborator inside the project
     */
    constructor(roleName) { 
        
        ProjectCollaboratorInvite.initialize(this, roleName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, roleName) { 
        obj['role_name'] = roleName;
    }

    /**
     * Constructs a <code>ProjectCollaboratorInvite</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectCollaboratorInvite} obj Optional instance to populate.
     * @return {module:model/ProjectCollaboratorInvite} The populated <code>ProjectCollaboratorInvite</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectCollaboratorInvite();

            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('role_name')) {
                obj['role_name'] = ApiClient.convertToType(data['role_name'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectCollaboratorInvite</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectCollaboratorInvite</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectCollaboratorInvite.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['role_name'] && !(typeof data['role_name'] === 'string' || data['role_name'] instanceof String)) {
            throw new Error("Expected the field `role_name` to be a primitive type in the JSON string but got " + data['role_name']);
        }

        return true;
    }


}

ProjectCollaboratorInvite.RequiredProperties = ["role_name"];

/**
 * Text sent when inviting the user to the project
 * @member {String} comment
 */
ProjectCollaboratorInvite.prototype['comment'] = undefined;

/**
 * Collaborator email
 * @member {String} email
 */
ProjectCollaboratorInvite.prototype['email'] = undefined;

/**
 * Role of the the collaborator inside the project
 * @member {module:model/ProjectCollaboratorInvite.RoleNameEnum} role_name
 */
ProjectCollaboratorInvite.prototype['role_name'] = undefined;

/**
 * User id of the collaborator
 * @member {Number} user_id
 */
ProjectCollaboratorInvite.prototype['user_id'] = undefined;





/**
 * Allowed values for the <code>role_name</code> property.
 * @enum {String}
 * @readonly
 */
ProjectCollaboratorInvite['RoleNameEnum'] = {

    /**
     * value: "viewer"
     * @const
     */
    "viewer": "viewer",

    /**
     * value: "collaborator"
     * @const
     */
    "collaborator": "collaborator"
};



export default ProjectCollaboratorInvite;

