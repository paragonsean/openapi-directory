/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomArticleFieldAdd from './CustomArticleFieldAdd';
import FundingCreate from './FundingCreate';

/**
 * The ProjectCreate model module.
 * @module model/ProjectCreate
 * @version 2.0.0
 */
class ProjectCreate {
    /**
     * Constructs a new <code>ProjectCreate</code>.
     * @alias module:model/ProjectCreate
     * @param title {String} The title for this project - mandatory. 3 - 1000 characters.
     */
    constructor(title) { 
        
        ProjectCreate.initialize(this, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title) { 
        obj['title'] = title;
    }

    /**
     * Constructs a <code>ProjectCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectCreate} obj Optional instance to populate.
     * @return {module:model/ProjectCreate} The populated <code>ProjectCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectCreate();

            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('custom_fields_list')) {
                obj['custom_fields_list'] = ApiClient.convertToType(data['custom_fields_list'], [CustomArticleFieldAdd]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('funding')) {
                obj['funding'] = ApiClient.convertToType(data['funding'], 'String');
            }
            if (data.hasOwnProperty('funding_list')) {
                obj['funding_list'] = ApiClient.convertToType(data['funding_list'], [FundingCreate]);
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectCreate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectCreate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectCreate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['custom_fields_list']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['custom_fields_list'])) {
                throw new Error("Expected the field `custom_fields_list` to be an array in the JSON data but got " + data['custom_fields_list']);
            }
            // validate the optional field `custom_fields_list` (array)
            for (const item of data['custom_fields_list']) {
                CustomArticleFieldAdd.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['funding'] && !(typeof data['funding'] === 'string' || data['funding'] instanceof String)) {
            throw new Error("Expected the field `funding` to be a primitive type in the JSON string but got " + data['funding']);
        }
        if (data['funding_list']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['funding_list'])) {
                throw new Error("Expected the field `funding_list` to be an array in the JSON data but got " + data['funding_list']);
            }
            // validate the optional field `funding_list` (array)
            for (const item of data['funding_list']) {
                FundingCreate.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

ProjectCreate.RequiredProperties = ["title"];

/**
 * List of key, values pairs to be associated with the project
 * @member {Object} custom_fields
 */
ProjectCreate.prototype['custom_fields'] = undefined;

/**
 * List of custom fields values, supersedes custom_fields parameter
 * @member {Array.<module:model/CustomArticleFieldAdd>} custom_fields_list
 */
ProjectCreate.prototype['custom_fields_list'] = undefined;

/**
 * Project description
 * @member {String} description
 */
ProjectCreate.prototype['description'] = undefined;

/**
 * Grant number or organization(s) that funded this project. Up to 2000 characters permitted.
 * @member {String} funding
 */
ProjectCreate.prototype['funding'] = undefined;

/**
 * Funding creation / update items
 * @member {Array.<module:model/FundingCreate>} funding_list
 */
ProjectCreate.prototype['funding_list'] = undefined;

/**
 * Only if project type is group.
 * @member {Number} group_id
 */
ProjectCreate.prototype['group_id'] = undefined;

/**
 * The title for this project - mandatory. 3 - 1000 characters.
 * @member {String} title
 */
ProjectCreate.prototype['title'] = undefined;






export default ProjectCreate;

