/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Category model module.
 * @module model/Category
 * @version 2.0.0
 */
class Category {
    /**
     * Constructs a new <code>Category</code>.
     * @alias module:model/Category
     * @param id {Number} Category id
     * @param parentId {Number} Parent category
     * @param path {String} Path to all ancestor ids
     * @param sourceId {String} ID in original standard taxonomy
     * @param taxonomyId {Number} Internal id of taxonomy the category is part of
     * @param title {String} Category title
     */
    constructor(id, parentId, path, sourceId, taxonomyId, title) { 
        
        Category.initialize(this, id, parentId, path, sourceId, taxonomyId, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, parentId, path, sourceId, taxonomyId, title) { 
        obj['id'] = id;
        obj['parent_id'] = parentId;
        obj['path'] = path;
        obj['source_id'] = sourceId;
        obj['taxonomy_id'] = taxonomyId;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>Category</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Category} obj Optional instance to populate.
     * @return {module:model/Category} The populated <code>Category</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Category();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'Number');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('source_id')) {
                obj['source_id'] = ApiClient.convertToType(data['source_id'], 'String');
            }
            if (data.hasOwnProperty('taxonomy_id')) {
                obj['taxonomy_id'] = ApiClient.convertToType(data['taxonomy_id'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Category</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Category</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Category.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['source_id'] && !(typeof data['source_id'] === 'string' || data['source_id'] instanceof String)) {
            throw new Error("Expected the field `source_id` to be a primitive type in the JSON string but got " + data['source_id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

Category.RequiredProperties = ["id", "parent_id", "path", "source_id", "taxonomy_id", "title"];

/**
 * Category id
 * @member {Number} id
 */
Category.prototype['id'] = undefined;

/**
 * Parent category
 * @member {Number} parent_id
 */
Category.prototype['parent_id'] = undefined;

/**
 * Path to all ancestor ids
 * @member {String} path
 */
Category.prototype['path'] = undefined;

/**
 * ID in original standard taxonomy
 * @member {String} source_id
 */
Category.prototype['source_id'] = undefined;

/**
 * Internal id of taxonomy the category is part of
 * @member {Number} taxonomy_id
 */
Category.prototype['taxonomy_id'] = undefined;

/**
 * Category title
 * @member {String} title
 */
Category.prototype['title'] = undefined;






export default Category;

