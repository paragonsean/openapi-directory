/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ArticleEmbargoUpdater model module.
 * @module model/ArticleEmbargoUpdater
 * @version 2.0.0
 */
class ArticleEmbargoUpdater {
    /**
     * Constructs a new <code>ArticleEmbargoUpdater</code>.
     * @alias module:model/ArticleEmbargoUpdater
     * @param embargoDate {String} Date when the embargo expires and the article gets published, '0' value will set up permanent embargo
     * @param embargoType {module:model/ArticleEmbargoUpdater.EmbargoTypeEnum} Embargo can be enabled at the article or the file level. Possible values: article, file
     * @param isEmbargoed {Boolean} Embargo status
     */
    constructor(embargoDate, embargoType, isEmbargoed) { 
        
        ArticleEmbargoUpdater.initialize(this, embargoDate, embargoType, isEmbargoed);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, embargoDate, embargoType, isEmbargoed) { 
        obj['embargo_date'] = embargoDate;
        obj['embargo_type'] = embargoType;
        obj['is_embargoed'] = isEmbargoed;
    }

    /**
     * Constructs a <code>ArticleEmbargoUpdater</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArticleEmbargoUpdater} obj Optional instance to populate.
     * @return {module:model/ArticleEmbargoUpdater} The populated <code>ArticleEmbargoUpdater</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArticleEmbargoUpdater();

            if (data.hasOwnProperty('embargo_date')) {
                obj['embargo_date'] = ApiClient.convertToType(data['embargo_date'], 'String');
            }
            if (data.hasOwnProperty('embargo_options')) {
                obj['embargo_options'] = ApiClient.convertToType(data['embargo_options'], [Object]);
            }
            if (data.hasOwnProperty('embargo_reason')) {
                obj['embargo_reason'] = ApiClient.convertToType(data['embargo_reason'], 'String');
            }
            if (data.hasOwnProperty('embargo_title')) {
                obj['embargo_title'] = ApiClient.convertToType(data['embargo_title'], 'String');
            }
            if (data.hasOwnProperty('embargo_type')) {
                obj['embargo_type'] = ApiClient.convertToType(data['embargo_type'], 'String');
            }
            if (data.hasOwnProperty('is_embargoed')) {
                obj['is_embargoed'] = ApiClient.convertToType(data['is_embargoed'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArticleEmbargoUpdater</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArticleEmbargoUpdater</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArticleEmbargoUpdater.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['embargo_date'] && !(typeof data['embargo_date'] === 'string' || data['embargo_date'] instanceof String)) {
            throw new Error("Expected the field `embargo_date` to be a primitive type in the JSON string but got " + data['embargo_date']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['embargo_options'])) {
            throw new Error("Expected the field `embargo_options` to be an array in the JSON data but got " + data['embargo_options']);
        }
        // ensure the json data is a string
        if (data['embargo_reason'] && !(typeof data['embargo_reason'] === 'string' || data['embargo_reason'] instanceof String)) {
            throw new Error("Expected the field `embargo_reason` to be a primitive type in the JSON string but got " + data['embargo_reason']);
        }
        // ensure the json data is a string
        if (data['embargo_title'] && !(typeof data['embargo_title'] === 'string' || data['embargo_title'] instanceof String)) {
            throw new Error("Expected the field `embargo_title` to be a primitive type in the JSON string but got " + data['embargo_title']);
        }
        // ensure the json data is a string
        if (data['embargo_type'] && !(typeof data['embargo_type'] === 'string' || data['embargo_type'] instanceof String)) {
            throw new Error("Expected the field `embargo_type` to be a primitive type in the JSON string but got " + data['embargo_type']);
        }

        return true;
    }


}

ArticleEmbargoUpdater.RequiredProperties = ["embargo_date", "embargo_type", "is_embargoed"];

/**
 * Date when the embargo expires and the article gets published, '0' value will set up permanent embargo
 * @member {String} embargo_date
 */
ArticleEmbargoUpdater.prototype['embargo_date'] = undefined;

/**
 * List of embargo permissions to be associated with the article. The list must contain `id` and can also contain `group_ids`(a field that only applies to 'logged_in' permissions). The new list replaces old options in the database, and an empty list removes all permissions for this article. Administration permission has to be set up alone but logged in and IP range permissions can be set up together.
 * @member {Array.<Object>} embargo_options
 */
ArticleEmbargoUpdater.prototype['embargo_options'] = undefined;

/**
 * Reason for setting embargo
 * @member {String} embargo_reason
 */
ArticleEmbargoUpdater.prototype['embargo_reason'] = undefined;

/**
 * Title for embargo
 * @member {String} embargo_title
 */
ArticleEmbargoUpdater.prototype['embargo_title'] = undefined;

/**
 * Embargo can be enabled at the article or the file level. Possible values: article, file
 * @member {module:model/ArticleEmbargoUpdater.EmbargoTypeEnum} embargo_type
 */
ArticleEmbargoUpdater.prototype['embargo_type'] = undefined;

/**
 * Embargo status
 * @member {Boolean} is_embargoed
 */
ArticleEmbargoUpdater.prototype['is_embargoed'] = undefined;





/**
 * Allowed values for the <code>embargo_type</code> property.
 * @enum {String}
 * @readonly
 */
ArticleEmbargoUpdater['EmbargoTypeEnum'] = {

    /**
     * value: "article"
     * @const
     */
    "article": "article",

    /**
     * value: "file"
     * @const
     */
    "file": "file"
};



export default ArticleEmbargoUpdater;

