/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Author from './Author';
import Category from './Category';
import CustomArticleField from './CustomArticleField';
import GroupEmbargoOptions from './GroupEmbargoOptions';
import License from './License';
import ProjectArticle from './ProjectArticle';
import PublicFile from './PublicFile';
import Timeline from './Timeline';

/**
 * The ArticleComplete model module.
 * @module model/ArticleComplete
 * @version 2.0.0
 */
class ArticleComplete {
    /**
     * Constructs a new <code>ArticleComplete</code>.
     * @alias module:model/ArticleComplete
     * @implements module:model/ProjectArticle
     * @param categories {Array.<module:model/Category>} List of categories selected for the article
     * @param citation {String} Article citation
     * @param confidentialReason {String} Confidentiality reason
     * @param createdDate {String} Date when article was created
     * @param description {String} Article description
     * @param embargoDate {String} Date when embargo lifts
     * @param embargoReason {String} Reason for embargo
     * @param embargoTitle {String} Title for embargo
     * @param embargoType {String} Article embargo
     * @param funding {String} Article funding
     * @param fundingList {Array.<Number>} 
     * @param hasLinkedFile {Boolean} True if any files are linked to the article
     * @param isActive {Boolean} True if article is active
     * @param isConfidential {Boolean} Article Confidentiality
     * @param isEmbargoed {Boolean} True if article is embargoed
     * @param isMetadataRecord {Boolean} True if article has no files
     * @param isPublic {Boolean} True if article is published
     * @param license {module:model/License} 
     * @param metadataReason {String} Article metadata reason
     * @param modifiedDate {String} Date when article was last modified
     * @param references {Array.<String>} List of references
     * @param size {Number} Article size
     * @param status {String} Article status
     * @param tags {Array.<String>} List of article tags
     * @param version {Number} Article version
     * @param definedType {Number} Type of article identifier
     * @param definedTypeName {String} Name of the article type identifier
     * @param doi {String} DOI
     * @param groupId {Number} Group ID
     * @param handle {String} Handle
     * @param id {Number} Unique identifier for article
     * @param publishedDate {String} Posted date
     * @param thumb {String} Thumbnail image
     * @param timeline {module:model/Timeline} 
     * @param title {String} Title of article
     * @param url {String} Api endpoint for article
     * @param urlPrivateApi {String} Private Api endpoint for article
     * @param urlPrivateHtml {String} Private site endpoint for article
     * @param urlPublicApi {String} Public Api endpoint for article
     * @param urlPublicHtml {String} Public site endpoint for article
     */
    constructor(categories, citation, confidentialReason, createdDate, description, embargoDate, embargoReason, embargoTitle, embargoType, funding, fundingList, hasLinkedFile, isActive, isConfidential, isEmbargoed, isMetadataRecord, isPublic, license, metadataReason, modifiedDate, references, size, status, tags, version, definedType, definedTypeName, doi, groupId, handle, id, publishedDate, thumb, timeline, title, url, urlPrivateApi, urlPrivateHtml, urlPublicApi, urlPublicHtml) { 
        ProjectArticle.initialize(this, definedType, definedTypeName, doi, groupId, handle, id, publishedDate, thumb, timeline, title, url, urlPrivateApi, urlPrivateHtml, urlPublicApi, urlPublicHtml);
        ArticleComplete.initialize(this, categories, citation, confidentialReason, createdDate, description, embargoDate, embargoReason, embargoTitle, embargoType, funding, fundingList, hasLinkedFile, isActive, isConfidential, isEmbargoed, isMetadataRecord, isPublic, license, metadataReason, modifiedDate, references, size, status, tags, version, definedType, definedTypeName, doi, groupId, handle, id, publishedDate, thumb, timeline, title, url, urlPrivateApi, urlPrivateHtml, urlPublicApi, urlPublicHtml);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, categories, citation, confidentialReason, createdDate, description, embargoDate, embargoReason, embargoTitle, embargoType, funding, fundingList, hasLinkedFile, isActive, isConfidential, isEmbargoed, isMetadataRecord, isPublic, license, metadataReason, modifiedDate, references, size, status, tags, version, definedType, definedTypeName, doi, groupId, handle, id, publishedDate, thumb, timeline, title, url, urlPrivateApi, urlPrivateHtml, urlPublicApi, urlPublicHtml) { 
        obj['authors'] = authors;
        obj['custom_fields'] = customFields;
        obj['embargo_options'] = embargoOptions;
        obj['figshare_url'] = figshareUrl;
        obj['files'] = files;
        obj['resource_doi'] = resourceDoi;
        obj['resource_title'] = resourceTitle;
        obj['categories'] = categories;
        obj['citation'] = citation;
        obj['confidential_reason'] = confidentialReason;
        obj['created_date'] = createdDate;
        obj['description'] = description;
        obj['embargo_date'] = embargoDate;
        obj['embargo_reason'] = embargoReason;
        obj['embargo_title'] = embargoTitle;
        obj['embargo_type'] = embargoType;
        obj['funding'] = funding;
        obj['funding_list'] = fundingList;
        obj['has_linked_file'] = hasLinkedFile;
        obj['is_active'] = isActive;
        obj['is_confidential'] = isConfidential;
        obj['is_embargoed'] = isEmbargoed;
        obj['is_metadata_record'] = isMetadataRecord;
        obj['is_public'] = isPublic;
        obj['license'] = license;
        obj['metadata_reason'] = metadataReason;
        obj['modified_date'] = modifiedDate;
        obj['references'] = references;
        obj['size'] = size;
        obj['status'] = status;
        obj['tags'] = tags;
        obj['version'] = version;
        obj['defined_type'] = definedType;
        obj['defined_type_name'] = definedTypeName;
        obj['doi'] = doi;
        obj['group_id'] = groupId;
        obj['handle'] = handle;
        obj['id'] = id;
        obj['published_date'] = publishedDate;
        obj['thumb'] = thumb;
        obj['timeline'] = timeline;
        obj['title'] = title;
        obj['url'] = url;
        obj['url_private_api'] = urlPrivateApi;
        obj['url_private_html'] = urlPrivateHtml;
        obj['url_public_api'] = urlPublicApi;
        obj['url_public_html'] = urlPublicHtml;
    }

    /**
     * Constructs a <code>ArticleComplete</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArticleComplete} obj Optional instance to populate.
     * @return {module:model/ArticleComplete} The populated <code>ArticleComplete</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArticleComplete();
            ProjectArticle.constructFromObject(data, obj);

            if (data.hasOwnProperty('authors')) {
                obj['authors'] = ApiClient.convertToType(data['authors'], [Author]);
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], [CustomArticleField]);
            }
            if (data.hasOwnProperty('embargo_options')) {
                obj['embargo_options'] = ApiClient.convertToType(data['embargo_options'], [GroupEmbargoOptions]);
            }
            if (data.hasOwnProperty('figshare_url')) {
                obj['figshare_url'] = ApiClient.convertToType(data['figshare_url'], 'String');
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], [PublicFile]);
            }
            if (data.hasOwnProperty('resource_doi')) {
                obj['resource_doi'] = ApiClient.convertToType(data['resource_doi'], 'String');
            }
            if (data.hasOwnProperty('resource_title')) {
                obj['resource_title'] = ApiClient.convertToType(data['resource_title'], 'String');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [Category]);
            }
            if (data.hasOwnProperty('citation')) {
                obj['citation'] = ApiClient.convertToType(data['citation'], 'String');
            }
            if (data.hasOwnProperty('confidential_reason')) {
                obj['confidential_reason'] = ApiClient.convertToType(data['confidential_reason'], 'String');
            }
            if (data.hasOwnProperty('created_date')) {
                obj['created_date'] = ApiClient.convertToType(data['created_date'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('embargo_date')) {
                obj['embargo_date'] = ApiClient.convertToType(data['embargo_date'], 'String');
            }
            if (data.hasOwnProperty('embargo_reason')) {
                obj['embargo_reason'] = ApiClient.convertToType(data['embargo_reason'], 'String');
            }
            if (data.hasOwnProperty('embargo_title')) {
                obj['embargo_title'] = ApiClient.convertToType(data['embargo_title'], 'String');
            }
            if (data.hasOwnProperty('embargo_type')) {
                obj['embargo_type'] = ApiClient.convertToType(data['embargo_type'], 'String');
            }
            if (data.hasOwnProperty('funding')) {
                obj['funding'] = ApiClient.convertToType(data['funding'], 'String');
            }
            if (data.hasOwnProperty('funding_list')) {
                obj['funding_list'] = ApiClient.convertToType(data['funding_list'], ['Number']);
            }
            if (data.hasOwnProperty('has_linked_file')) {
                obj['has_linked_file'] = ApiClient.convertToType(data['has_linked_file'], 'Boolean');
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
            if (data.hasOwnProperty('is_confidential')) {
                obj['is_confidential'] = ApiClient.convertToType(data['is_confidential'], 'Boolean');
            }
            if (data.hasOwnProperty('is_embargoed')) {
                obj['is_embargoed'] = ApiClient.convertToType(data['is_embargoed'], 'Boolean');
            }
            if (data.hasOwnProperty('is_metadata_record')) {
                obj['is_metadata_record'] = ApiClient.convertToType(data['is_metadata_record'], 'Boolean');
            }
            if (data.hasOwnProperty('is_public')) {
                obj['is_public'] = ApiClient.convertToType(data['is_public'], 'Boolean');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = License.constructFromObject(data['license']);
            }
            if (data.hasOwnProperty('metadata_reason')) {
                obj['metadata_reason'] = ApiClient.convertToType(data['metadata_reason'], 'String');
            }
            if (data.hasOwnProperty('modified_date')) {
                obj['modified_date'] = ApiClient.convertToType(data['modified_date'], 'String');
            }
            if (data.hasOwnProperty('references')) {
                obj['references'] = ApiClient.convertToType(data['references'], ['String']);
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('defined_type')) {
                obj['defined_type'] = ApiClient.convertToType(data['defined_type'], 'Number');
            }
            if (data.hasOwnProperty('defined_type_name')) {
                obj['defined_type_name'] = ApiClient.convertToType(data['defined_type_name'], 'String');
            }
            if (data.hasOwnProperty('doi')) {
                obj['doi'] = ApiClient.convertToType(data['doi'], 'String');
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'Number');
            }
            if (data.hasOwnProperty('handle')) {
                obj['handle'] = ApiClient.convertToType(data['handle'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('published_date')) {
                obj['published_date'] = ApiClient.convertToType(data['published_date'], 'String');
            }
            if (data.hasOwnProperty('thumb')) {
                obj['thumb'] = ApiClient.convertToType(data['thumb'], 'String');
            }
            if (data.hasOwnProperty('timeline')) {
                obj['timeline'] = Timeline.constructFromObject(data['timeline']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('url_private_api')) {
                obj['url_private_api'] = ApiClient.convertToType(data['url_private_api'], 'String');
            }
            if (data.hasOwnProperty('url_private_html')) {
                obj['url_private_html'] = ApiClient.convertToType(data['url_private_html'], 'String');
            }
            if (data.hasOwnProperty('url_public_api')) {
                obj['url_public_api'] = ApiClient.convertToType(data['url_public_api'], 'String');
            }
            if (data.hasOwnProperty('url_public_html')) {
                obj['url_public_html'] = ApiClient.convertToType(data['url_public_html'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArticleComplete</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArticleComplete</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArticleComplete.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['authors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authors'])) {
                throw new Error("Expected the field `authors` to be an array in the JSON data but got " + data['authors']);
            }
            // validate the optional field `authors` (array)
            for (const item of data['authors']) {
                Author.validateJSON(item);
            };
        }
        if (data['custom_fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['custom_fields'])) {
                throw new Error("Expected the field `custom_fields` to be an array in the JSON data but got " + data['custom_fields']);
            }
            // validate the optional field `custom_fields` (array)
            for (const item of data['custom_fields']) {
                CustomArticleField.validateJSON(item);
            };
        }
        if (data['embargo_options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['embargo_options'])) {
                throw new Error("Expected the field `embargo_options` to be an array in the JSON data but got " + data['embargo_options']);
            }
            // validate the optional field `embargo_options` (array)
            for (const item of data['embargo_options']) {
                GroupEmbargoOptions.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['figshare_url'] && !(typeof data['figshare_url'] === 'string' || data['figshare_url'] instanceof String)) {
            throw new Error("Expected the field `figshare_url` to be a primitive type in the JSON string but got " + data['figshare_url']);
        }
        if (data['files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['files'])) {
                throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
            }
            // validate the optional field `files` (array)
            for (const item of data['files']) {
                PublicFile.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['resource_doi'] && !(typeof data['resource_doi'] === 'string' || data['resource_doi'] instanceof String)) {
            throw new Error("Expected the field `resource_doi` to be a primitive type in the JSON string but got " + data['resource_doi']);
        }
        // ensure the json data is a string
        if (data['resource_title'] && !(typeof data['resource_title'] === 'string' || data['resource_title'] instanceof String)) {
            throw new Error("Expected the field `resource_title` to be a primitive type in the JSON string but got " + data['resource_title']);
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                Category.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['citation'] && !(typeof data['citation'] === 'string' || data['citation'] instanceof String)) {
            throw new Error("Expected the field `citation` to be a primitive type in the JSON string but got " + data['citation']);
        }
        // ensure the json data is a string
        if (data['confidential_reason'] && !(typeof data['confidential_reason'] === 'string' || data['confidential_reason'] instanceof String)) {
            throw new Error("Expected the field `confidential_reason` to be a primitive type in the JSON string but got " + data['confidential_reason']);
        }
        // ensure the json data is a string
        if (data['created_date'] && !(typeof data['created_date'] === 'string' || data['created_date'] instanceof String)) {
            throw new Error("Expected the field `created_date` to be a primitive type in the JSON string but got " + data['created_date']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['embargo_date'] && !(typeof data['embargo_date'] === 'string' || data['embargo_date'] instanceof String)) {
            throw new Error("Expected the field `embargo_date` to be a primitive type in the JSON string but got " + data['embargo_date']);
        }
        // ensure the json data is a string
        if (data['embargo_reason'] && !(typeof data['embargo_reason'] === 'string' || data['embargo_reason'] instanceof String)) {
            throw new Error("Expected the field `embargo_reason` to be a primitive type in the JSON string but got " + data['embargo_reason']);
        }
        // ensure the json data is a string
        if (data['embargo_title'] && !(typeof data['embargo_title'] === 'string' || data['embargo_title'] instanceof String)) {
            throw new Error("Expected the field `embargo_title` to be a primitive type in the JSON string but got " + data['embargo_title']);
        }
        // ensure the json data is a string
        if (data['embargo_type'] && !(typeof data['embargo_type'] === 'string' || data['embargo_type'] instanceof String)) {
            throw new Error("Expected the field `embargo_type` to be a primitive type in the JSON string but got " + data['embargo_type']);
        }
        // ensure the json data is a string
        if (data['funding'] && !(typeof data['funding'] === 'string' || data['funding'] instanceof String)) {
            throw new Error("Expected the field `funding` to be a primitive type in the JSON string but got " + data['funding']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['funding_list'])) {
            throw new Error("Expected the field `funding_list` to be an array in the JSON data but got " + data['funding_list']);
        }
        // validate the optional field `license`
        if (data['license']) { // data not null
          License.validateJSON(data['license']);
        }
        // ensure the json data is a string
        if (data['metadata_reason'] && !(typeof data['metadata_reason'] === 'string' || data['metadata_reason'] instanceof String)) {
            throw new Error("Expected the field `metadata_reason` to be a primitive type in the JSON string but got " + data['metadata_reason']);
        }
        // ensure the json data is a string
        if (data['modified_date'] && !(typeof data['modified_date'] === 'string' || data['modified_date'] instanceof String)) {
            throw new Error("Expected the field `modified_date` to be a primitive type in the JSON string but got " + data['modified_date']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['references'])) {
            throw new Error("Expected the field `references` to be an array in the JSON data but got " + data['references']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['defined_type_name'] && !(typeof data['defined_type_name'] === 'string' || data['defined_type_name'] instanceof String)) {
            throw new Error("Expected the field `defined_type_name` to be a primitive type in the JSON string but got " + data['defined_type_name']);
        }
        // ensure the json data is a string
        if (data['doi'] && !(typeof data['doi'] === 'string' || data['doi'] instanceof String)) {
            throw new Error("Expected the field `doi` to be a primitive type in the JSON string but got " + data['doi']);
        }
        // ensure the json data is a string
        if (data['handle'] && !(typeof data['handle'] === 'string' || data['handle'] instanceof String)) {
            throw new Error("Expected the field `handle` to be a primitive type in the JSON string but got " + data['handle']);
        }
        // ensure the json data is a string
        if (data['published_date'] && !(typeof data['published_date'] === 'string' || data['published_date'] instanceof String)) {
            throw new Error("Expected the field `published_date` to be a primitive type in the JSON string but got " + data['published_date']);
        }
        // ensure the json data is a string
        if (data['thumb'] && !(typeof data['thumb'] === 'string' || data['thumb'] instanceof String)) {
            throw new Error("Expected the field `thumb` to be a primitive type in the JSON string but got " + data['thumb']);
        }
        // validate the optional field `timeline`
        if (data['timeline']) { // data not null
          Timeline.validateJSON(data['timeline']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['url_private_api'] && !(typeof data['url_private_api'] === 'string' || data['url_private_api'] instanceof String)) {
            throw new Error("Expected the field `url_private_api` to be a primitive type in the JSON string but got " + data['url_private_api']);
        }
        // ensure the json data is a string
        if (data['url_private_html'] && !(typeof data['url_private_html'] === 'string' || data['url_private_html'] instanceof String)) {
            throw new Error("Expected the field `url_private_html` to be a primitive type in the JSON string but got " + data['url_private_html']);
        }
        // ensure the json data is a string
        if (data['url_public_api'] && !(typeof data['url_public_api'] === 'string' || data['url_public_api'] instanceof String)) {
            throw new Error("Expected the field `url_public_api` to be a primitive type in the JSON string but got " + data['url_public_api']);
        }
        // ensure the json data is a string
        if (data['url_public_html'] && !(typeof data['url_public_html'] === 'string' || data['url_public_html'] instanceof String)) {
            throw new Error("Expected the field `url_public_html` to be a primitive type in the JSON string but got " + data['url_public_html']);
        }

        return true;
    }


}

ArticleComplete.RequiredProperties = ["authors", "custom_fields", "embargo_options", "figshare_url", "files", "resource_doi", "resource_title", "categories", "citation", "confidential_reason", "created_date", "description", "embargo_date", "embargo_reason", "embargo_title", "embargo_type", "funding", "funding_list", "has_linked_file", "is_active", "is_confidential", "is_embargoed", "is_metadata_record", "is_public", "license", "metadata_reason", "modified_date", "references", "size", "status", "tags", "version", "defined_type", "defined_type_name", "doi", "group_id", "handle", "id", "published_date", "thumb", "timeline", "title", "url", "url_private_api", "url_private_html", "url_public_api", "url_public_html"];

/**
 * List of article authors
 * @member {Array.<module:model/Author>} authors
 */
ArticleComplete.prototype['authors'] = undefined;

/**
 * List of custom fields values
 * @member {Array.<module:model/CustomArticleField>} custom_fields
 */
ArticleComplete.prototype['custom_fields'] = undefined;

/**
 * List of embargo options
 * @member {Array.<module:model/GroupEmbargoOptions>} embargo_options
 */
ArticleComplete.prototype['embargo_options'] = undefined;

/**
 * Article public url
 * @member {String} figshare_url
 */
ArticleComplete.prototype['figshare_url'] = undefined;

/**
 * List of article files
 * @member {Array.<module:model/PublicFile>} files
 */
ArticleComplete.prototype['files'] = undefined;

/**
 * Article DOI
 * @member {String} resource_doi
 */
ArticleComplete.prototype['resource_doi'] = undefined;

/**
 * Article resource title
 * @member {String} resource_title
 */
ArticleComplete.prototype['resource_title'] = undefined;

/**
 * List of categories selected for the article
 * @member {Array.<module:model/Category>} categories
 */
ArticleComplete.prototype['categories'] = undefined;

/**
 * Article citation
 * @member {String} citation
 */
ArticleComplete.prototype['citation'] = undefined;

/**
 * Confidentiality reason
 * @member {String} confidential_reason
 */
ArticleComplete.prototype['confidential_reason'] = undefined;

/**
 * Date when article was created
 * @member {String} created_date
 */
ArticleComplete.prototype['created_date'] = undefined;

/**
 * Article description
 * @member {String} description
 */
ArticleComplete.prototype['description'] = undefined;

/**
 * Date when embargo lifts
 * @member {String} embargo_date
 */
ArticleComplete.prototype['embargo_date'] = undefined;

/**
 * Reason for embargo
 * @member {String} embargo_reason
 */
ArticleComplete.prototype['embargo_reason'] = undefined;

/**
 * Title for embargo
 * @member {String} embargo_title
 */
ArticleComplete.prototype['embargo_title'] = undefined;

/**
 * Article embargo
 * @member {String} embargo_type
 */
ArticleComplete.prototype['embargo_type'] = undefined;

/**
 * Article funding
 * @member {String} funding
 */
ArticleComplete.prototype['funding'] = undefined;

/**
 * @member {Array.<Number>} funding_list
 */
ArticleComplete.prototype['funding_list'] = undefined;

/**
 * True if any files are linked to the article
 * @member {Boolean} has_linked_file
 */
ArticleComplete.prototype['has_linked_file'] = undefined;

/**
 * True if article is active
 * @member {Boolean} is_active
 */
ArticleComplete.prototype['is_active'] = undefined;

/**
 * Article Confidentiality
 * @member {Boolean} is_confidential
 */
ArticleComplete.prototype['is_confidential'] = undefined;

/**
 * True if article is embargoed
 * @member {Boolean} is_embargoed
 */
ArticleComplete.prototype['is_embargoed'] = undefined;

/**
 * True if article has no files
 * @member {Boolean} is_metadata_record
 */
ArticleComplete.prototype['is_metadata_record'] = undefined;

/**
 * True if article is published
 * @member {Boolean} is_public
 */
ArticleComplete.prototype['is_public'] = undefined;

/**
 * @member {module:model/License} license
 */
ArticleComplete.prototype['license'] = undefined;

/**
 * Article metadata reason
 * @member {String} metadata_reason
 */
ArticleComplete.prototype['metadata_reason'] = undefined;

/**
 * Date when article was last modified
 * @member {String} modified_date
 */
ArticleComplete.prototype['modified_date'] = undefined;

/**
 * List of references
 * @member {Array.<String>} references
 */
ArticleComplete.prototype['references'] = undefined;

/**
 * Article size
 * @member {Number} size
 */
ArticleComplete.prototype['size'] = undefined;

/**
 * Article status
 * @member {String} status
 */
ArticleComplete.prototype['status'] = undefined;

/**
 * List of article tags
 * @member {Array.<String>} tags
 */
ArticleComplete.prototype['tags'] = undefined;

/**
 * Article version
 * @member {Number} version
 */
ArticleComplete.prototype['version'] = undefined;

/**
 * Type of article identifier
 * @member {Number} defined_type
 */
ArticleComplete.prototype['defined_type'] = undefined;

/**
 * Name of the article type identifier
 * @member {String} defined_type_name
 */
ArticleComplete.prototype['defined_type_name'] = undefined;

/**
 * DOI
 * @member {String} doi
 */
ArticleComplete.prototype['doi'] = undefined;

/**
 * Group ID
 * @member {Number} group_id
 */
ArticleComplete.prototype['group_id'] = undefined;

/**
 * Handle
 * @member {String} handle
 */
ArticleComplete.prototype['handle'] = undefined;

/**
 * Unique identifier for article
 * @member {Number} id
 */
ArticleComplete.prototype['id'] = undefined;

/**
 * Posted date
 * @member {String} published_date
 */
ArticleComplete.prototype['published_date'] = undefined;

/**
 * Thumbnail image
 * @member {String} thumb
 */
ArticleComplete.prototype['thumb'] = undefined;

/**
 * @member {module:model/Timeline} timeline
 */
ArticleComplete.prototype['timeline'] = undefined;

/**
 * Title of article
 * @member {String} title
 */
ArticleComplete.prototype['title'] = undefined;

/**
 * Api endpoint for article
 * @member {String} url
 */
ArticleComplete.prototype['url'] = undefined;

/**
 * Private Api endpoint for article
 * @member {String} url_private_api
 */
ArticleComplete.prototype['url_private_api'] = undefined;

/**
 * Private site endpoint for article
 * @member {String} url_private_html
 */
ArticleComplete.prototype['url_private_html'] = undefined;

/**
 * Public Api endpoint for article
 * @member {String} url_public_api
 */
ArticleComplete.prototype['url_public_api'] = undefined;

/**
 * Public site endpoint for article
 * @member {String} url_public_html
 */
ArticleComplete.prototype['url_public_html'] = undefined;


// Implement ProjectArticle interface:
/**
 * Type of article identifier
 * @member {Number} defined_type
 */
ProjectArticle.prototype['defined_type'] = undefined;
/**
 * Name of the article type identifier
 * @member {String} defined_type_name
 */
ProjectArticle.prototype['defined_type_name'] = undefined;
/**
 * DOI
 * @member {String} doi
 */
ProjectArticle.prototype['doi'] = undefined;
/**
 * Group ID
 * @member {Number} group_id
 */
ProjectArticle.prototype['group_id'] = undefined;
/**
 * Handle
 * @member {String} handle
 */
ProjectArticle.prototype['handle'] = undefined;
/**
 * Unique identifier for article
 * @member {Number} id
 */
ProjectArticle.prototype['id'] = undefined;
/**
 * Posted date
 * @member {String} published_date
 */
ProjectArticle.prototype['published_date'] = undefined;
/**
 * Thumbnail image
 * @member {String} thumb
 */
ProjectArticle.prototype['thumb'] = undefined;
/**
 * @member {module:model/Timeline} timeline
 */
ProjectArticle.prototype['timeline'] = undefined;
/**
 * Title of article
 * @member {String} title
 */
ProjectArticle.prototype['title'] = undefined;
/**
 * Api endpoint for article
 * @member {String} url
 */
ProjectArticle.prototype['url'] = undefined;
/**
 * Private Api endpoint for article
 * @member {String} url_private_api
 */
ProjectArticle.prototype['url_private_api'] = undefined;
/**
 * Private site endpoint for article
 * @member {String} url_private_html
 */
ProjectArticle.prototype['url_private_html'] = undefined;
/**
 * Public Api endpoint for article
 * @member {String} url_public_api
 */
ProjectArticle.prototype['url_public_api'] = undefined;
/**
 * Public site endpoint for article
 * @member {String} url_public_html
 */
ProjectArticle.prototype['url_public_html'] = undefined;




export default ArticleComplete;

