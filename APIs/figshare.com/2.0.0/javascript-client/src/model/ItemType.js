/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ItemType model module.
 * @module model/ItemType
 * @version 2.0.0
 */
class ItemType {
    /**
     * Constructs a new <code>ItemType</code>.
     * @alias module:model/ItemType
     * @param icon {String} The string identifying the icon of the item type.
     * @param id {Number} The ID of the item type.
     * @param isSelectable {Boolean} The selectable status
     * @param name {String} The name of the item type
     * @param publicDescription {String} The description of the item type.
     * @param stringId {String} The string identifier of the item type.
     * @param urlName {String} The URL name of the item type.
     */
    constructor(icon, id, isSelectable, name, publicDescription, stringId, urlName) { 
        
        ItemType.initialize(this, icon, id, isSelectable, name, publicDescription, stringId, urlName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, icon, id, isSelectable, name, publicDescription, stringId, urlName) { 
        obj['icon'] = icon;
        obj['id'] = id;
        obj['is_selectable'] = isSelectable;
        obj['name'] = name;
        obj['public_description'] = publicDescription;
        obj['string_id'] = stringId;
        obj['url_name'] = urlName;
    }

    /**
     * Constructs a <code>ItemType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemType} obj Optional instance to populate.
     * @return {module:model/ItemType} The populated <code>ItemType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemType();

            if (data.hasOwnProperty('icon')) {
                obj['icon'] = ApiClient.convertToType(data['icon'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_selectable')) {
                obj['is_selectable'] = ApiClient.convertToType(data['is_selectable'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('public_description')) {
                obj['public_description'] = ApiClient.convertToType(data['public_description'], 'String');
            }
            if (data.hasOwnProperty('string_id')) {
                obj['string_id'] = ApiClient.convertToType(data['string_id'], 'String');
            }
            if (data.hasOwnProperty('url_name')) {
                obj['url_name'] = ApiClient.convertToType(data['url_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemType</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ItemType.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['icon'] && !(typeof data['icon'] === 'string' || data['icon'] instanceof String)) {
            throw new Error("Expected the field `icon` to be a primitive type in the JSON string but got " + data['icon']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['public_description'] && !(typeof data['public_description'] === 'string' || data['public_description'] instanceof String)) {
            throw new Error("Expected the field `public_description` to be a primitive type in the JSON string but got " + data['public_description']);
        }
        // ensure the json data is a string
        if (data['string_id'] && !(typeof data['string_id'] === 'string' || data['string_id'] instanceof String)) {
            throw new Error("Expected the field `string_id` to be a primitive type in the JSON string but got " + data['string_id']);
        }
        // ensure the json data is a string
        if (data['url_name'] && !(typeof data['url_name'] === 'string' || data['url_name'] instanceof String)) {
            throw new Error("Expected the field `url_name` to be a primitive type in the JSON string but got " + data['url_name']);
        }

        return true;
    }


}

ItemType.RequiredProperties = ["icon", "id", "is_selectable", "name", "public_description", "string_id", "url_name"];

/**
 * The string identifying the icon of the item type.
 * @member {String} icon
 */
ItemType.prototype['icon'] = undefined;

/**
 * The ID of the item type.
 * @member {Number} id
 */
ItemType.prototype['id'] = undefined;

/**
 * The selectable status
 * @member {Boolean} is_selectable
 */
ItemType.prototype['is_selectable'] = undefined;

/**
 * The name of the item type
 * @member {String} name
 */
ItemType.prototype['name'] = undefined;

/**
 * The description of the item type.
 * @member {String} public_description
 */
ItemType.prototype['public_description'] = undefined;

/**
 * The string identifier of the item type.
 * @member {String} string_id
 */
ItemType.prototype['string_id'] = undefined;

/**
 * The URL name of the item type.
 * @member {String} url_name
 */
ItemType.prototype['url_name'] = undefined;






export default ItemType;

