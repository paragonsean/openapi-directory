/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CommonSearch model module.
 * @module model/CommonSearch
 * @version 2.0.0
 */
class CommonSearch {
    /**
     * Constructs a new <code>CommonSearch</code>.
     * @alias module:model/CommonSearch
     */
    constructor() { 
        
        CommonSearch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['order_direction'] = 'desc';
        obj['page_size'] = 10;
    }

    /**
     * Constructs a <code>CommonSearch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommonSearch} obj Optional instance to populate.
     * @return {module:model/CommonSearch} The populated <code>CommonSearch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommonSearch();

            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'Number');
            }
            if (data.hasOwnProperty('institution')) {
                obj['institution'] = ApiClient.convertToType(data['institution'], 'Number');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('modified_since')) {
                obj['modified_since'] = ApiClient.convertToType(data['modified_since'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('order_direction')) {
                obj['order_direction'] = ApiClient.convertToType(data['order_direction'], 'String');
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('page_size')) {
                obj['page_size'] = ApiClient.convertToType(data['page_size'], 'Number');
            }
            if (data.hasOwnProperty('published_since')) {
                obj['published_since'] = ApiClient.convertToType(data['published_since'], 'String');
            }
            if (data.hasOwnProperty('search_for')) {
                obj['search_for'] = ApiClient.convertToType(data['search_for'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommonSearch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommonSearch</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['modified_since'] && !(typeof data['modified_since'] === 'string' || data['modified_since'] instanceof String)) {
            throw new Error("Expected the field `modified_since` to be a primitive type in the JSON string but got " + data['modified_since']);
        }
        // ensure the json data is a string
        if (data['order_direction'] && !(typeof data['order_direction'] === 'string' || data['order_direction'] instanceof String)) {
            throw new Error("Expected the field `order_direction` to be a primitive type in the JSON string but got " + data['order_direction']);
        }
        // ensure the json data is a string
        if (data['published_since'] && !(typeof data['published_since'] === 'string' || data['published_since'] instanceof String)) {
            throw new Error("Expected the field `published_since` to be a primitive type in the JSON string but got " + data['published_since']);
        }
        // ensure the json data is a string
        if (data['search_for'] && !(typeof data['search_for'] === 'string' || data['search_for'] instanceof String)) {
            throw new Error("Expected the field `search_for` to be a primitive type in the JSON string but got " + data['search_for']);
        }

        return true;
    }


}



/**
 * only return collections from this group
 * @member {Number} group
 */
CommonSearch.prototype['group'] = undefined;

/**
 * only return collections from this institution
 * @member {Number} institution
 */
CommonSearch.prototype['institution'] = undefined;

/**
 * Number of results included on a page. Used for pagination with query
 * @member {Number} limit
 */
CommonSearch.prototype['limit'] = undefined;

/**
 * Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
 * @member {String} modified_since
 */
CommonSearch.prototype['modified_since'] = undefined;

/**
 * Where to start the listing(the offset of the first result). Used for pagination with limit
 * @member {Number} offset
 */
CommonSearch.prototype['offset'] = undefined;

/**
 * Direction of ordering
 * @member {module:model/CommonSearch.OrderDirectionEnum} order_direction
 * @default 'desc'
 */
CommonSearch.prototype['order_direction'] = 'desc';

/**
 * Page number. Used for pagination with page_size
 * @member {Number} page
 */
CommonSearch.prototype['page'] = undefined;

/**
 * The number of results included on a page. Used for pagination with page
 * @member {Number} page_size
 * @default 10
 */
CommonSearch.prototype['page_size'] = 10;

/**
 * Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
 * @member {String} published_since
 */
CommonSearch.prototype['published_since'] = undefined;

/**
 * Search term
 * @member {String} search_for
 */
CommonSearch.prototype['search_for'] = undefined;





/**
 * Allowed values for the <code>order_direction</code> property.
 * @enum {String}
 * @readonly
 */
CommonSearch['OrderDirectionEnum'] = {

    /**
     * value: "asc"
     * @const
     */
    "asc": "asc",

    /**
     * value: "desc"
     * @const
     */
    "desc": "desc"
};



export default CommonSearch;

