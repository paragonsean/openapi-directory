/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import Category from '../model/Category';
import ErrorMessage from '../model/ErrorMessage';
import FundingInformation from '../model/FundingInformation';
import FundingSearch from '../model/FundingSearch';
import ItemType from '../model/ItemType';
import License from '../model/License';

/**
* Other service.
* @module api/OtherApi
* @version 2.0.0
*/
export default class OtherApi {

    /**
    * Constructs a new OtherApi. 
    * @alias module:api/OtherApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the categoriesList operation.
     * @callback module:api/OtherApi~categoriesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Category>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Public Categories
     * Returns a list of public categories
     * @param {module:api/OtherApi~categoriesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Category>}
     */
    categoriesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Category];
      return this.apiClient.callApi(
        '/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileDownload operation.
     * @callback module:api/OtherApi~fileDownloadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Public File Download
     * Starts the download of a file
     * @param {Number} fileId 
     * @param {module:api/OtherApi~fileDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fileDownload(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling fileDownload");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/file/download/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itemTypesList operation.
     * @callback module:api/OtherApi~itemTypesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ItemType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Item Types
     * Returns the list of Item Types of the requested group. If no user is authenticated, returns the item types available for Figshare.
     * @param {Object} opts Optional parameters
     * @param {Number} [groupId = 0)] Identifier of the group for which the item types are requested
     * @param {module:api/OtherApi~itemTypesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ItemType>}
     */
    itemTypesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'group_id': opts['groupId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ItemType];
      return this.apiClient.callApi(
        '/item_types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licensesList operation.
     * @callback module:api/OtherApi~licensesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/License>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Public Licenses
     * Returns a list of public licenses
     * @param {module:api/OtherApi~licensesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/License>}
     */
    licensesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [License];
      return this.apiClient.callApi(
        '/licenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateAccount operation.
     * @callback module:api/OtherApi~privateAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Account information
     * Account information for token/personal token
     * @param {module:api/OtherApi~privateAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    privateAccount(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateFundingSearch operation.
     * @callback module:api/OtherApi~privateFundingSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FundingInformation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Funding
     * Search for fundings
     * @param {Object} opts Optional parameters
     * @param {module:model/FundingSearch} [fundingSearch] Search Parameters
     * @param {module:api/OtherApi~privateFundingSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FundingInformation>}
     */
    privateFundingSearch(opts, callback) {
      opts = opts || {};
      let postBody = opts['fundingSearch'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [FundingInformation];
      return this.apiClient.callApi(
        '/account/funding/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateLicensesList operation.
     * @callback module:api/OtherApi~privateLicensesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/License>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Account Licenses
     * This is a private endpoint that requires OAuth. It will return a list with figshare public licenses AND licenses defined for account's institution.
     * @param {module:api/OtherApi~privateLicensesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/License>}
     */
    privateLicensesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [License];
      return this.apiClient.callApi(
        '/account/licenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
