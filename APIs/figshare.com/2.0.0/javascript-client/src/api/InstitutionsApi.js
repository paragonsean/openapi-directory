/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountCreate from '../model/AccountCreate';
import AccountUpdate from '../model/AccountUpdate';
import Article from '../model/Article';
import Category from '../model/Category';
import Curation from '../model/Curation';
import CurationComment from '../model/CurationComment';
import CurationCommentCreate from '../model/CurationCommentCreate';
import CurationDetail from '../model/CurationDetail';
import ErrorMessage from '../model/ErrorMessage';
import Group from '../model/Group';
import GroupEmbargoOptions from '../model/GroupEmbargoOptions';
import Institution from '../model/Institution';
import InstitutionAccountsSearch from '../model/InstitutionAccountsSearch';
import ResponseMessage from '../model/ResponseMessage';
import Role from '../model/Role';
import ShortAccount from '../model/ShortAccount';
import ShortCustomField from '../model/ShortCustomField';
import User from '../model/User';

/**
* Institutions service.
* @module api/InstitutionsApi
* @version 2.0.0
*/
export default class InstitutionsApi {

    /**
    * Constructs a new InstitutionsApi. 
    * @alias module:api/InstitutionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountInstitutionCuration operation.
     * @callback module:api/InstitutionsApi~accountInstitutionCurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Institution Curation Review
     * Retrieve a certain curation review by its ID
     * @param {Number} curationId ID of the curation
     * @param {module:api/InstitutionsApi~accountInstitutionCurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurationDetail}
     */
    accountInstitutionCuration(curationId, callback) {
      let postBody = null;
      // verify the required parameter 'curationId' is set
      if (curationId === undefined || curationId === null) {
        throw new Error("Missing the required parameter 'curationId' when calling accountInstitutionCuration");
      }

      let pathParams = {
        'curation_id': curationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CurationDetail;
      return this.apiClient.callApi(
        '/account/institution/review/{curation_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountInstitutionCurationComments operation.
     * @callback module:api/InstitutionsApi~accountInstitutionCurationCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurationComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Institution Curation Review Comments
     * Retrieve a certain curation review's comments.
     * @param {Number} curationId ID of the curation
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of results included on a page. Used for pagination with query
     * @param {Number} [offset] Where to start the listing(the offset of the first result). Used for pagination with limit
     * @param {module:api/InstitutionsApi~accountInstitutionCurationCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurationComment}
     */
    accountInstitutionCurationComments(curationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'curationId' is set
      if (curationId === undefined || curationId === null) {
        throw new Error("Missing the required parameter 'curationId' when calling accountInstitutionCurationComments");
      }

      let pathParams = {
        'curation_id': curationId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CurationComment;
      return this.apiClient.callApi(
        '/account/institution/review/{curation_id}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountInstitutionCurations operation.
     * @callback module:api/InstitutionsApi~accountInstitutionCurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Curation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Institution Curation Reviews
     * Retrieve a list of curation reviews for this institution
     * @param {Object} opts Optional parameters
     * @param {Number} [groupId] Filter by the group ID
     * @param {Number} [articleId] Retrieve the reviews for this article
     * @param {module:model/String} [status] Filter by the status of the review
     * @param {Number} [limit] Number of results included on a page. Used for pagination with query
     * @param {Number} [offset] Where to start the listing(the offset of the first result). Used for pagination with limit
     * @param {module:api/InstitutionsApi~accountInstitutionCurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Curation}
     */
    accountInstitutionCurations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'group_id': opts['groupId'],
        'article_id': opts['articleId'],
        'status': opts['status'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Curation;
      return this.apiClient.callApi(
        '/account/institution/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountInstitutionReviewCurationIdCommentsPost operation.
     * @callback module:api/InstitutionsApi~accountInstitutionReviewCurationIdCommentsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST Institution Curation Review Comment
     * Add a new comment to the review.
     * @param {Number} curationId ID of the curation
     * @param {module:model/CurationCommentCreate} curationCommentCreate The content/value of the comment.
     * @param {module:api/InstitutionsApi~accountInstitutionReviewCurationIdCommentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    accountInstitutionReviewCurationIdCommentsPost(curationId, curationCommentCreate, callback) {
      let postBody = curationCommentCreate;
      // verify the required parameter 'curationId' is set
      if (curationId === undefined || curationId === null) {
        throw new Error("Missing the required parameter 'curationId' when calling accountInstitutionReviewCurationIdCommentsPost");
      }
      // verify the required parameter 'curationCommentCreate' is set
      if (curationCommentCreate === undefined || curationCommentCreate === null) {
        throw new Error("Missing the required parameter 'curationCommentCreate' when calling accountInstitutionReviewCurationIdCommentsPost");
      }

      let pathParams = {
        'curation_id': curationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/institution/review/{curation_id}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customFieldsList operation.
     * @callback module:api/InstitutionsApi~customFieldsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShortCustomField>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private account institution group custom fields
     * Returns the custom fields in the group the user belongs to, or the ones in the group specified, if the user has access.
     * @param {Object} opts Optional parameters
     * @param {Number} [groupId] Group_id
     * @param {module:api/InstitutionsApi~customFieldsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShortCustomField>}
     */
    customFieldsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'group_id': opts['groupId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ShortCustomField];
      return this.apiClient.callApi(
        '/account/institution/custom_fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customFieldsUpload operation.
     * @callback module:api/InstitutionsApi~customFieldsUploadCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Custom fields values files upload
     * Uploads a CSV containing values for a specific custom field of type <b>dropdown_large_list</b>. More details in the <a href=\"#custom_fields\">Custom Fields section</a>
     * @param {Number} customFieldId Custom field identifier
     * @param {Object} opts Optional parameters
     * @param {File} [externalFile] CSV file to be uploaded
     * @param {module:api/InstitutionsApi~customFieldsUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    customFieldsUpload(customFieldId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customFieldId' is set
      if (customFieldId === undefined || customFieldId === null) {
        throw new Error("Missing the required parameter 'customFieldId' when calling customFieldsUpload");
      }

      let pathParams = {
        'custom_field_id': customFieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'external_file': opts['externalFile']
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/account/institution/custom_fields/{custom_field_id}/items/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the institutionArticles operation.
     * @callback module:api/InstitutionsApi~institutionArticlesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Article>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Public Licenses
     * Returns a list of articles belonging to the institution
     * @param {String} institutionStringId 
     * @param {String} resourceId 
     * @param {String} filename 
     * @param {module:api/InstitutionsApi~institutionArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Article>}
     */
    institutionArticles(institutionStringId, resourceId, filename, callback) {
      let postBody = null;
      // verify the required parameter 'institutionStringId' is set
      if (institutionStringId === undefined || institutionStringId === null) {
        throw new Error("Missing the required parameter 'institutionStringId' when calling institutionArticles");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling institutionArticles");
      }
      // verify the required parameter 'filename' is set
      if (filename === undefined || filename === null) {
        throw new Error("Missing the required parameter 'filename' when calling institutionArticles");
      }

      let pathParams = {
        'institution_string_id': institutionStringId
      };
      let queryParams = {
        'resource_id': resourceId,
        'filename': filename
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Article];
      return this.apiClient.callApi(
        '/institutions/{institution_string_id}/articles/filter-by', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the institutionHrfeedUpload operation.
     * @callback module:api/InstitutionsApi~institutionHrfeedUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Institution HRfeed Upload
     * More info in the <a href=\"#hr_feed\">HR Feed section</a>
     * @param {Object} opts Optional parameters
     * @param {File} [hrfeed] You can find an example in the Hr Feed section
     * @param {module:api/InstitutionsApi~institutionHrfeedUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseMessage}
     */
    institutionHrfeedUpload(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'hrfeed': opts['hrfeed']
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ResponseMessage;
      return this.apiClient.callApi(
        '/institution/hrfeed/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateAccountInstitutionUser operation.
     * @callback module:api/InstitutionsApi~privateAccountInstitutionUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Account Institution User
     * Retrieve institution user information using the account_id
     * @param {Number} accountId Account identifier the user is associated to
     * @param {module:api/InstitutionsApi~privateAccountInstitutionUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    privateAccountInstitutionUser(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling privateAccountInstitutionUser");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/account/institution/users/{account_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCategoriesList operation.
     * @callback module:api/InstitutionsApi~privateCategoriesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Category>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Account Categories
     * List institution categories (including parent Categories)
     * @param {module:api/InstitutionsApi~privateCategoriesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Category>}
     */
    privateCategoriesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Category];
      return this.apiClient.callApi(
        '/account/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateGroupEmbargoOptionsDetails operation.
     * @callback module:api/InstitutionsApi~privateGroupEmbargoOptionsDetailsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupEmbargoOptions>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Account Institution Group Embargo Options
     * Account institution group embargo options details
     * @param {Number} groupId Group identifier
     * @param {module:api/InstitutionsApi~privateGroupEmbargoOptionsDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupEmbargoOptions>}
     */
    privateGroupEmbargoOptionsDetails(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling privateGroupEmbargoOptionsDetails");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GroupEmbargoOptions];
      return this.apiClient.callApi(
        '/account/institution/groups/{group_id}/embargo_options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateInstitutionAccountGroupRoleDelete operation.
     * @callback module:api/InstitutionsApi~privateInstitutionAccountGroupRoleDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Institution Account Group Role
     * Delete Institution Account Group Role
     * @param {Number} accountId Account identifier for which to remove the role
     * @param {Number} groupId Group identifier for which to remove the role
     * @param {Number} roleId Role identifier
     * @param {module:api/InstitutionsApi~privateInstitutionAccountGroupRoleDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateInstitutionAccountGroupRoleDelete(accountId, groupId, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling privateInstitutionAccountGroupRoleDelete");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling privateInstitutionAccountGroupRoleDelete");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling privateInstitutionAccountGroupRoleDelete");
      }

      let pathParams = {
        'account_id': accountId,
        'group_id': groupId,
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/institution/roles/{account_id}/{group_id}/{role_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateInstitutionAccountGroupRoles operation.
     * @callback module:api/InstitutionsApi~privateInstitutionAccountGroupRolesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Institution Account Group Roles
     * List Institution Account Group Roles
     * @param {Number} accountId Account identifier the user is associated to
     * @param {module:api/InstitutionsApi~privateInstitutionAccountGroupRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    privateInstitutionAccountGroupRoles(accountId, callback) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling privateInstitutionAccountGroupRoles");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/account/institution/roles/{account_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateInstitutionAccountGroupRolesCreate operation.
     * @callback module:api/InstitutionsApi~privateInstitutionAccountGroupRolesCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Institution Account Group Roles
     * Add Institution Account Group Roles
     * @param {Number} accountId Account identifier the user is associated to
     * @param {Object.<String, Object>} body Account description
     * @param {module:api/InstitutionsApi~privateInstitutionAccountGroupRolesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateInstitutionAccountGroupRolesCreate(accountId, body, callback) {
      let postBody = body;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling privateInstitutionAccountGroupRolesCreate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling privateInstitutionAccountGroupRolesCreate");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/institution/roles/{account_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateInstitutionAccountsCreate operation.
     * @callback module:api/InstitutionsApi~privateInstitutionAccountsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new Institution Account
     * Create a new Account by sending account information
     * @param {module:model/AccountCreate} accountCreate Account description
     * @param {module:api/InstitutionsApi~privateInstitutionAccountsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateInstitutionAccountsCreate(accountCreate, callback) {
      let postBody = accountCreate;
      // verify the required parameter 'accountCreate' is set
      if (accountCreate === undefined || accountCreate === null) {
        throw new Error("Missing the required parameter 'accountCreate' when calling privateInstitutionAccountsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/institution/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateInstitutionAccountsList operation.
     * @callback module:api/InstitutionsApi~privateInstitutionAccountsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShortAccount>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Account Institution Accounts
     * Returns the accounts for which the account has administrative privileges (assigned and inherited).
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number. Used for pagination with page_size
     * @param {Number} [pageSize = 10)] The number of results included on a page. Used for pagination with page
     * @param {Number} [limit] Number of results included on a page. Used for pagination with query
     * @param {Number} [offset] Where to start the listing(the offset of the first result). Used for pagination with limit
     * @param {Number} [isActive] Filter by active status
     * @param {String} [institutionUserId] Filter by institution_user_id
     * @param {String} [email] Filter by email
     * @param {Number} [idLte] Retrieve accounts with an ID lower or equal to the specified value
     * @param {Number} [idGte] Retrieve accounts with an ID greater or equal to the specified value
     * @param {module:api/InstitutionsApi~privateInstitutionAccountsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShortAccount>}
     */
    privateInstitutionAccountsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'is_active': opts['isActive'],
        'institution_user_id': opts['institutionUserId'],
        'email': opts['email'],
        'id_lte': opts['idLte'],
        'id_gte': opts['idGte']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ShortAccount];
      return this.apiClient.callApi(
        '/account/institution/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateInstitutionAccountsSearch operation.
     * @callback module:api/InstitutionsApi~privateInstitutionAccountsSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShortAccount>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Account Institution Accounts Search
     * Returns the accounts for which the account has administrative privileges (assigned and inherited).
     * @param {module:model/InstitutionAccountsSearch} institutionAccountsSearch Search Parameters
     * @param {module:api/InstitutionsApi~privateInstitutionAccountsSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShortAccount>}
     */
    privateInstitutionAccountsSearch(institutionAccountsSearch, callback) {
      let postBody = institutionAccountsSearch;
      // verify the required parameter 'institutionAccountsSearch' is set
      if (institutionAccountsSearch === undefined || institutionAccountsSearch === null) {
        throw new Error("Missing the required parameter 'institutionAccountsSearch' when calling privateInstitutionAccountsSearch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ShortAccount];
      return this.apiClient.callApi(
        '/account/institution/accounts/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateInstitutionAccountsUpdate operation.
     * @callback module:api/InstitutionsApi~privateInstitutionAccountsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Institution Account
     * Update Institution Account
     * @param {Number} accountId Account identifier the user is associated to
     * @param {module:model/AccountUpdate} accountUpdate Account description
     * @param {module:api/InstitutionsApi~privateInstitutionAccountsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateInstitutionAccountsUpdate(accountId, accountUpdate, callback) {
      let postBody = accountUpdate;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling privateInstitutionAccountsUpdate");
      }
      // verify the required parameter 'accountUpdate' is set
      if (accountUpdate === undefined || accountUpdate === null) {
        throw new Error("Missing the required parameter 'accountUpdate' when calling privateInstitutionAccountsUpdate");
      }

      let pathParams = {
        'account_id': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/institution/accounts/{account_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateInstitutionArticles operation.
     * @callback module:api/InstitutionsApi~privateInstitutionArticlesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Article>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Institution Articles
     * Get Articles from own institution. User must be administrator of the institution
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number. Used for pagination with page_size
     * @param {Number} [pageSize = 10)] The number of results included on a page. Used for pagination with page
     * @param {Number} [limit] Number of results included on a page. Used for pagination with query
     * @param {Number} [offset] Where to start the listing(the offset of the first result). Used for pagination with limit
     * @param {module:model/String} [order = 'published_date')] The field by which to order. Default varies by endpoint/resource.
     * @param {module:model/String} [orderDirection = 'desc')] 
     * @param {String} [publishedSince] Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
     * @param {String} [modifiedSince] Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
     * @param {Number} [status] only return collections with this status
     * @param {String} [resourceDoi] only return collections with this resource_doi
     * @param {Number} [itemType] Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model
     * @param {module:api/InstitutionsApi~privateInstitutionArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Article>}
     */
    privateInstitutionArticles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order': opts['order'],
        'order_direction': opts['orderDirection'],
        'published_since': opts['publishedSince'],
        'modified_since': opts['modifiedSince'],
        'status': opts['status'],
        'resource_doi': opts['resourceDoi'],
        'item_type': opts['itemType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Article];
      return this.apiClient.callApi(
        '/account/institution/articles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateInstitutionDetails operation.
     * @callback module:api/InstitutionsApi~privateInstitutionDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Institution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Account Institutions
     * Account institution details
     * @param {module:api/InstitutionsApi~privateInstitutionDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Institution}
     */
    privateInstitutionDetails(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Institution;
      return this.apiClient.callApi(
        '/account/institution', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateInstitutionEmbargoOptionsDetails operation.
     * @callback module:api/InstitutionsApi~privateInstitutionEmbargoOptionsDetailsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupEmbargoOptions>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Account Institution embargo options
     * Account institution embargo options details
     * @param {module:api/InstitutionsApi~privateInstitutionEmbargoOptionsDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupEmbargoOptions>}
     */
    privateInstitutionEmbargoOptionsDetails(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GroupEmbargoOptions];
      return this.apiClient.callApi(
        '/account/institution/embargo_options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateInstitutionGroupsList operation.
     * @callback module:api/InstitutionsApi~privateInstitutionGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Group>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Account Institution Groups
     * Returns the groups for which the account has administrative privileges (assigned and inherited).
     * @param {module:api/InstitutionsApi~privateInstitutionGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Group>}
     */
    privateInstitutionGroupsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Group];
      return this.apiClient.callApi(
        '/account/institution/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateInstitutionRolesList operation.
     * @callback module:api/InstitutionsApi~privateInstitutionRolesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Role>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Account Institution Roles
     * Returns the roles available for groups and the institution group.
     * @param {module:api/InstitutionsApi~privateInstitutionRolesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Role>}
     */
    privateInstitutionRolesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Role];
      return this.apiClient.callApi(
        '/account/institution/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
