/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Article from '../model/Article';
import ArticleProjectCreate from '../model/ArticleProjectCreate';
import CreateProjectResponse from '../model/CreateProjectResponse';
import ErrorMessage from '../model/ErrorMessage';
import Location from '../model/Location';
import LocationWarnings from '../model/LocationWarnings';
import PrivateFile from '../model/PrivateFile';
import Project from '../model/Project';
import ProjectArticle from '../model/ProjectArticle';
import ProjectCollaborator from '../model/ProjectCollaborator';
import ProjectCollaboratorInvite from '../model/ProjectCollaboratorInvite';
import ProjectComplete from '../model/ProjectComplete';
import ProjectCompletePrivate from '../model/ProjectCompletePrivate';
import ProjectCreate from '../model/ProjectCreate';
import ProjectNote from '../model/ProjectNote';
import ProjectNoteCreate from '../model/ProjectNoteCreate';
import ProjectNotePrivate from '../model/ProjectNotePrivate';
import ProjectPrivate from '../model/ProjectPrivate';
import ProjectUpdate from '../model/ProjectUpdate';
import ProjectsSearch from '../model/ProjectsSearch';
import ResponseMessage from '../model/ResponseMessage';

/**
* Projects service.
* @module api/ProjectsApi
* @version 2.0.0
*/
export default class ProjectsApi {

    /**
    * Constructs a new ProjectsApi. 
    * @alias module:api/ProjectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the privateProjectArticleDelete operation.
     * @callback module:api/ProjectsApi~privateProjectArticleDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project article
     * Delete project article
     * @param {Number} projectId Project unique identifier
     * @param {Number} articleId Project Article unique identifier
     * @param {module:api/ProjectsApi~privateProjectArticleDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateProjectArticleDelete(projectId, articleId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectArticleDelete");
      }
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateProjectArticleDelete");
      }

      let pathParams = {
        'project_id': projectId,
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/projects/{project_id}/articles/{article_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectArticleDetails operation.
     * @callback module:api/ProjectsApi~privateProjectArticleDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectArticle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Project article details
     * Project article details
     * @param {Number} projectId Project unique identifier
     * @param {Number} articleId Project Article unique identifier
     * @param {module:api/ProjectsApi~privateProjectArticleDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectArticle}
     */
    privateProjectArticleDetails(projectId, articleId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectArticleDetails");
      }
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateProjectArticleDetails");
      }

      let pathParams = {
        'project_id': projectId,
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectArticle;
      return this.apiClient.callApi(
        '/account/projects/{project_id}/articles/{article_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectArticleFile operation.
     * @callback module:api/ProjectsApi~privateProjectArticleFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Project article file details
     * Project article file details
     * @param {Number} projectId Project unique identifier
     * @param {Number} articleId Project Article unique identifier
     * @param {Number} fileId File unique identifier
     * @param {module:api/ProjectsApi~privateProjectArticleFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateFile}
     */
    privateProjectArticleFile(projectId, articleId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectArticleFile");
      }
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateProjectArticleFile");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling privateProjectArticleFile");
      }

      let pathParams = {
        'project_id': projectId,
        'article_id': articleId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrivateFile;
      return this.apiClient.callApi(
        '/account/projects/{project_id}/articles/{article_id}/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectArticleFiles operation.
     * @callback module:api/ProjectsApi~privateProjectArticleFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PrivateFile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Project article list files
     * List article files
     * @param {Number} projectId Project unique identifier
     * @param {Number} articleId Project Article unique identifier
     * @param {module:api/ProjectsApi~privateProjectArticleFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PrivateFile>}
     */
    privateProjectArticleFiles(projectId, articleId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectArticleFiles");
      }
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateProjectArticleFiles");
      }

      let pathParams = {
        'project_id': projectId,
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PrivateFile];
      return this.apiClient.callApi(
        '/account/projects/{project_id}/articles/{article_id}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectArticlesCreate operation.
     * @callback module:api/ProjectsApi~privateProjectArticlesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationWarnings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create project article
     * Create a new Article and associate it with this project
     * @param {Number} projectId Project unique identifier
     * @param {module:model/ArticleProjectCreate} articleProjectCreate Article description
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number. Used for pagination with page_size
     * @param {Number} [pageSize = 10)] The number of results included on a page. Used for pagination with page
     * @param {Number} [limit] Number of results included on a page. Used for pagination with query
     * @param {Number} [offset] Where to start the listing(the offset of the first result). Used for pagination with limit
     * @param {module:api/ProjectsApi~privateProjectArticlesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationWarnings}
     */
    privateProjectArticlesCreate(projectId, articleProjectCreate, opts, callback) {
      opts = opts || {};
      let postBody = articleProjectCreate;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectArticlesCreate");
      }
      // verify the required parameter 'articleProjectCreate' is set
      if (articleProjectCreate === undefined || articleProjectCreate === null) {
        throw new Error("Missing the required parameter 'articleProjectCreate' when calling privateProjectArticlesCreate");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LocationWarnings;
      return this.apiClient.callApi(
        '/account/projects/{project_id}/articles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectArticlesList operation.
     * @callback module:api/ProjectsApi~privateProjectArticlesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Article>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project articles
     * List project articles
     * @param {Number} projectId Project unique identifier
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number. Used for pagination with page_size
     * @param {Number} [pageSize = 10)] The number of results included on a page. Used for pagination with page
     * @param {Number} [limit] Number of results included on a page. Used for pagination with query
     * @param {Number} [offset] Where to start the listing(the offset of the first result). Used for pagination with limit
     * @param {module:api/ProjectsApi~privateProjectArticlesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Article>}
     */
    privateProjectArticlesList(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectArticlesList");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Article];
      return this.apiClient.callApi(
        '/account/projects/{project_id}/articles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectCollaboratorDelete operation.
     * @callback module:api/ProjectsApi~privateProjectCollaboratorDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove project collaborator
     * Remove project collaborator
     * @param {Number} projectId Project unique identifier
     * @param {Number} userId User unique identifier
     * @param {module:api/ProjectsApi~privateProjectCollaboratorDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateProjectCollaboratorDelete(projectId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectCollaboratorDelete");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling privateProjectCollaboratorDelete");
      }

      let pathParams = {
        'project_id': projectId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/projects/{project_id}/collaborators/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectCollaboratorsInvite operation.
     * @callback module:api/ProjectsApi~privateProjectCollaboratorsInviteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite project collaborators
     * Invite users to collaborate on project or view the project
     * @param {Number} projectId Project unique identifier
     * @param {module:model/ProjectCollaboratorInvite} projectCollaboratorInvite viewer or collaborator role. User user_id or email of user
     * @param {module:api/ProjectsApi~privateProjectCollaboratorsInviteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseMessage}
     */
    privateProjectCollaboratorsInvite(projectId, projectCollaboratorInvite, callback) {
      let postBody = projectCollaboratorInvite;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectCollaboratorsInvite");
      }
      // verify the required parameter 'projectCollaboratorInvite' is set
      if (projectCollaboratorInvite === undefined || projectCollaboratorInvite === null) {
        throw new Error("Missing the required parameter 'projectCollaboratorInvite' when calling privateProjectCollaboratorsInvite");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseMessage;
      return this.apiClient.callApi(
        '/account/projects/{project_id}/collaborators', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectCollaboratorsList operation.
     * @callback module:api/ProjectsApi~privateProjectCollaboratorsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectCollaborator>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project collaborators
     * List Project collaborators and invited users
     * @param {Number} projectId Project unique identifier
     * @param {module:api/ProjectsApi~privateProjectCollaboratorsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectCollaborator>}
     */
    privateProjectCollaboratorsList(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectCollaboratorsList");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectCollaborator];
      return this.apiClient.callApi(
        '/account/projects/{project_id}/collaborators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectCreate operation.
     * @callback module:api/ProjectsApi~privateProjectCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create project
     * Create a new project
     * @param {module:model/ProjectCreate} projectCreate Project  description
     * @param {module:api/ProjectsApi~privateProjectCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProjectResponse}
     */
    privateProjectCreate(projectCreate, callback) {
      let postBody = projectCreate;
      // verify the required parameter 'projectCreate' is set
      if (projectCreate === undefined || projectCreate === null) {
        throw new Error("Missing the required parameter 'projectCreate' when calling privateProjectCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProjectResponse;
      return this.apiClient.callApi(
        '/account/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectDelete operation.
     * @callback module:api/ProjectsApi~privateProjectDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project
     * A project can be deleted only if: - it is not public - it does not have public articles.  When an individual project is deleted, all the articles are moved to my data of each owner.  When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project. 
     * @param {Number} projectId Project unique identifier
     * @param {module:api/ProjectsApi~privateProjectDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateProjectDelete(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectDelete");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/projects/{project_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectDetails operation.
     * @callback module:api/ProjectsApi~privateProjectDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectCompletePrivate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View project details
     * View a private project
     * @param {Number} projectId Project unique identifier
     * @param {module:api/ProjectsApi~privateProjectDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectCompletePrivate}
     */
    privateProjectDetails(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectDetails");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectCompletePrivate;
      return this.apiClient.callApi(
        '/account/projects/{project_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectLeave operation.
     * @callback module:api/ProjectsApi~privateProjectLeaveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Project Leave
     * Please note: project's owner cannot leave the project.
     * @param {Number} projectId Project unique identifier
     * @param {module:api/ProjectsApi~privateProjectLeaveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateProjectLeave(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectLeave");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/projects/{project_id}/leave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectNote operation.
     * @callback module:api/ProjectsApi~privateProjectNoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectNotePrivate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Project note details
     * @param {Number} projectId Project unique identifier
     * @param {Number} noteId Note unique identifier
     * @param {module:api/ProjectsApi~privateProjectNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectNotePrivate}
     */
    privateProjectNote(projectId, noteId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectNote");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling privateProjectNote");
      }

      let pathParams = {
        'project_id': projectId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectNotePrivate;
      return this.apiClient.callApi(
        '/account/projects/{project_id}/notes/{note_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectNoteDelete operation.
     * @callback module:api/ProjectsApi~privateProjectNoteDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project note
     * @param {Number} projectId Project unique identifier
     * @param {Number} noteId Note unique identifier
     * @param {module:api/ProjectsApi~privateProjectNoteDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateProjectNoteDelete(projectId, noteId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectNoteDelete");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling privateProjectNoteDelete");
      }

      let pathParams = {
        'project_id': projectId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/projects/{project_id}/notes/{note_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectNoteUpdate operation.
     * @callback module:api/ProjectsApi~privateProjectNoteUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project note
     * @param {Number} projectId Project unique identifier
     * @param {Number} noteId Note unique identifier
     * @param {module:model/ProjectNoteCreate} projectNoteCreate Note message
     * @param {module:api/ProjectsApi~privateProjectNoteUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateProjectNoteUpdate(projectId, noteId, projectNoteCreate, callback) {
      let postBody = projectNoteCreate;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectNoteUpdate");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling privateProjectNoteUpdate");
      }
      // verify the required parameter 'projectNoteCreate' is set
      if (projectNoteCreate === undefined || projectNoteCreate === null) {
        throw new Error("Missing the required parameter 'projectNoteCreate' when calling privateProjectNoteUpdate");
      }

      let pathParams = {
        'project_id': projectId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/projects/{project_id}/notes/{note_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectNotesCreate operation.
     * @callback module:api/ProjectsApi~privateProjectNotesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Location} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create project note
     * Create a new project note
     * @param {Number} projectId Project unique identifier
     * @param {module:model/ProjectNoteCreate} projectNoteCreate Note message
     * @param {module:api/ProjectsApi~privateProjectNotesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Location}
     */
    privateProjectNotesCreate(projectId, projectNoteCreate, callback) {
      let postBody = projectNoteCreate;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectNotesCreate");
      }
      // verify the required parameter 'projectNoteCreate' is set
      if (projectNoteCreate === undefined || projectNoteCreate === null) {
        throw new Error("Missing the required parameter 'projectNoteCreate' when calling privateProjectNotesCreate");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Location;
      return this.apiClient.callApi(
        '/account/projects/{project_id}/notes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectNotesList operation.
     * @callback module:api/ProjectsApi~privateProjectNotesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectNote>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project notes
     * List project notes
     * @param {Number} projectId Project unique identifier
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number. Used for pagination with page_size
     * @param {Number} [pageSize = 10)] The number of results included on a page. Used for pagination with page
     * @param {Number} [limit] Number of results included on a page. Used for pagination with query
     * @param {Number} [offset] Where to start the listing(the offset of the first result). Used for pagination with limit
     * @param {module:api/ProjectsApi~privateProjectNotesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectNote>}
     */
    privateProjectNotesList(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectNotesList");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectNote];
      return this.apiClient.callApi(
        '/account/projects/{project_id}/notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectPublish operation.
     * @callback module:api/ProjectsApi~privateProjectPublishCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Project Publish
     * Publish a project. Possible after all items inside it are public
     * @param {Number} projectId Project unique identifier
     * @param {module:api/ProjectsApi~privateProjectPublishCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseMessage}
     */
    privateProjectPublish(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectPublish");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseMessage;
      return this.apiClient.callApi(
        '/account/projects/{project_id}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectUpdate operation.
     * @callback module:api/ProjectsApi~privateProjectUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project
     * Updating an project by passing body parameters; request can also be made with the PATCH method.
     * @param {Number} projectId Project unique identifier
     * @param {module:model/ProjectUpdate} projectUpdate Project description
     * @param {module:api/ProjectsApi~privateProjectUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateProjectUpdate(projectId, projectUpdate, callback) {
      let postBody = projectUpdate;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling privateProjectUpdate");
      }
      // verify the required parameter 'projectUpdate' is set
      if (projectUpdate === undefined || projectUpdate === null) {
        throw new Error("Missing the required parameter 'projectUpdate' when calling privateProjectUpdate");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/projects/{project_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectsList operation.
     * @callback module:api/ProjectsApi~privateProjectsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectPrivate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Projects
     * List private projects
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number. Used for pagination with page_size
     * @param {Number} [pageSize = 10)] The number of results included on a page. Used for pagination with page
     * @param {Number} [limit] Number of results included on a page. Used for pagination with query
     * @param {Number} [offset] Where to start the listing(the offset of the first result). Used for pagination with limit
     * @param {module:model/String} [order = 'published_date')] The field by which to order.
     * @param {module:model/String} [orderDirection = 'desc')] 
     * @param {module:model/String} [storage] only return collections from this institution
     * @param {String} [roles] Any combination of owner, collaborator, viewer separated by comma. Examples: \"owner\" or \"owner,collaborator\".
     * @param {module:api/ProjectsApi~privateProjectsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectPrivate>}
     */
    privateProjectsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order': opts['order'],
        'order_direction': opts['orderDirection'],
        'storage': opts['storage'],
        'roles': opts['roles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectPrivate];
      return this.apiClient.callApi(
        '/account/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateProjectsSearch operation.
     * @callback module:api/ProjectsApi~privateProjectsSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectPrivate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Projects search
     * Search inside the private projects
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectsSearch} [projectsSearch] Search Parameters
     * @param {module:api/ProjectsApi~privateProjectsSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectPrivate>}
     */
    privateProjectsSearch(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectsSearch'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProjectPrivate];
      return this.apiClient.callApi(
        '/account/projects/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectArticles operation.
     * @callback module:api/ProjectsApi~projectArticlesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Article>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Public Project Articles
     * List articles in project
     * @param {Number} projectId Project Unique identifier
     * @param {module:api/ProjectsApi~projectArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Article>}
     */
    projectArticles(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectArticles");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Article];
      return this.apiClient.callApi(
        '/projects/{project_id}/articles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDetails operation.
     * @callback module:api/ProjectsApi~projectDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectComplete} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Public Project
     * View a project
     * @param {Number} projectId Project Unique identifier
     * @param {module:api/ProjectsApi~projectDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectComplete}
     */
    projectDetails(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectDetails");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectComplete;
      return this.apiClient.callApi(
        '/projects/{project_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsList operation.
     * @callback module:api/ProjectsApi~projectsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Public Projects
     * Returns a list of public projects
     * @param {Object} opts Optional parameters
     * @param {String} [xCursor] Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
     * @param {Number} [page] Page number. Used for pagination with page_size
     * @param {Number} [pageSize = 10)] The number of results included on a page. Used for pagination with page
     * @param {Number} [limit] Number of results included on a page. Used for pagination with query
     * @param {Number} [offset] Where to start the listing(the offset of the first result). Used for pagination with limit
     * @param {module:model/String} [order = 'published_date')] The field by which to order. Default varies by endpoint/resource.
     * @param {module:model/String} [orderDirection = 'desc')] 
     * @param {Number} [institution] only return collections from this institution
     * @param {String} [publishedSince] Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
     * @param {Number} [group] only return collections from this group
     * @param {module:api/ProjectsApi~projectsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    projectsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order': opts['order'],
        'order_direction': opts['orderDirection'],
        'institution': opts['institution'],
        'published_since': opts['publishedSince'],
        'group': opts['group']
      };
      let headerParams = {
        'X-Cursor': opts['xCursor']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsSearch operation.
     * @callback module:api/ProjectsApi~projectsSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Public Projects Search
     * Returns a list of public articles
     * @param {Object} opts Optional parameters
     * @param {String} [xCursor] Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
     * @param {module:model/ProjectsSearch} [projectsSearch] Search Parameters
     * @param {module:api/ProjectsApi~projectsSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    projectsSearch(opts, callback) {
      opts = opts || {};
      let postBody = opts['projectsSearch'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Cursor': opts['xCursor']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/projects/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
