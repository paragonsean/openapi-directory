/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Article from '../model/Article';
import ArticlesCreator from '../model/ArticlesCreator';
import Author from '../model/Author';
import AuthorsCreator from '../model/AuthorsCreator';
import CategoriesCreator from '../model/CategoriesCreator';
import Category from '../model/Category';
import Collection from '../model/Collection';
import CollectionComplete from '../model/CollectionComplete';
import CollectionCompletePrivate from '../model/CollectionCompletePrivate';
import CollectionCreate from '../model/CollectionCreate';
import CollectionDOI from '../model/CollectionDOI';
import CollectionHandle from '../model/CollectionHandle';
import CollectionPrivateLinkCreator from '../model/CollectionPrivateLinkCreator';
import CollectionSearch from '../model/CollectionSearch';
import CollectionUpdate from '../model/CollectionUpdate';
import CollectionVersions from '../model/CollectionVersions';
import ErrorMessage from '../model/ErrorMessage';
import Location from '../model/Location';
import LocationWarnings from '../model/LocationWarnings';
import LocationWarningsUpdate from '../model/LocationWarningsUpdate';
import PrivateCollectionSearch from '../model/PrivateCollectionSearch';
import PrivateLink from '../model/PrivateLink';
import PrivateLinkResponse from '../model/PrivateLinkResponse';
import Resource from '../model/Resource';

/**
* Collections service.
* @module api/CollectionsApi
* @version 2.0.0
*/
export default class CollectionsApi {

    /**
    * Constructs a new CollectionsApi. 
    * @alias module:api/CollectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the collectionArticles operation.
     * @callback module:api/CollectionsApi~collectionArticlesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Article>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Public Collection Articles
     * Returns a list of public collection articles
     * @param {Number} collectionId Collection Unique identifier
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number. Used for pagination with page_size
     * @param {Number} [pageSize = 10)] The number of results included on a page. Used for pagination with page
     * @param {Number} [limit] Number of results included on a page. Used for pagination with query
     * @param {Number} [offset] Where to start the listing(the offset of the first result). Used for pagination with limit
     * @param {module:api/CollectionsApi~collectionArticlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Article>}
     */
    collectionArticles(collectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionArticles");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Article];
      return this.apiClient.callApi(
        '/collections/{collection_id}/articles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionDetails operation.
     * @callback module:api/CollectionsApi~collectionDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionComplete} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collection details
     * View a collection
     * @param {Number} collectionId Collection Unique identifier
     * @param {module:api/CollectionsApi~collectionDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionComplete}
     */
    collectionDetails(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionDetails");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollectionComplete;
      return this.apiClient.callApi(
        '/collections/{collection_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionVersionDetails operation.
     * @callback module:api/CollectionsApi~collectionVersionDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionComplete} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collection Version details
     * View details for a certain version of a collection
     * @param {Number} collectionId Collection Unique identifier
     * @param {Number} versionId Version Number
     * @param {module:api/CollectionsApi~collectionVersionDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionComplete}
     */
    collectionVersionDetails(collectionId, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionVersionDetails");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling collectionVersionDetails");
      }

      let pathParams = {
        'collection_id': collectionId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollectionComplete;
      return this.apiClient.callApi(
        '/collections/{collection_id}/versions/{version_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionVersions operation.
     * @callback module:api/CollectionsApi~collectionVersionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CollectionVersions>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collection Versions list
     * Returns a list of public collection Versions
     * @param {Number} collectionId Collection Unique identifier
     * @param {module:api/CollectionsApi~collectionVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CollectionVersions>}
     */
    collectionVersions(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling collectionVersions");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CollectionVersions];
      return this.apiClient.callApi(
        '/collections/{collection_id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsList operation.
     * @callback module:api/CollectionsApi~collectionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Collection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Public Collections
     * Returns a list of public collections
     * @param {Object} opts Optional parameters
     * @param {String} [xCursor] Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
     * @param {Number} [page] Page number. Used for pagination with page_size
     * @param {Number} [pageSize = 10)] The number of results included on a page. Used for pagination with page
     * @param {Number} [limit] Number of results included on a page. Used for pagination with query
     * @param {Number} [offset] Where to start the listing(the offset of the first result). Used for pagination with limit
     * @param {module:model/String} [order = 'published_date')] The field by which to order. Default varies by endpoint/resource.
     * @param {module:model/String} [orderDirection = 'desc')] 
     * @param {Number} [institution] only return collections from this institution
     * @param {String} [publishedSince] Filter by collection publishing date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD
     * @param {String} [modifiedSince] Filter by collection modified date. Will only return collections published after the date. date(ISO 8601) YYYY-MM-DD
     * @param {Number} [group] only return collections from this group
     * @param {String} [resourceDoi] only return collections with this resource_doi
     * @param {String} [doi] only return collections with this doi
     * @param {String} [handle] only return collections with this handle
     * @param {module:api/CollectionsApi~collectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Collection>}
     */
    collectionsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order': opts['order'],
        'order_direction': opts['orderDirection'],
        'institution': opts['institution'],
        'published_since': opts['publishedSince'],
        'modified_since': opts['modifiedSince'],
        'group': opts['group'],
        'resource_doi': opts['resourceDoi'],
        'doi': opts['doi'],
        'handle': opts['handle']
      };
      let headerParams = {
        'X-Cursor': opts['xCursor']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Collection];
      return this.apiClient.callApi(
        '/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionsSearch operation.
     * @callback module:api/CollectionsApi~collectionsSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Collection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Public Collections Search
     * Returns a list of public collections
     * @param {Object} opts Optional parameters
     * @param {String} [xCursor] Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
     * @param {module:model/CollectionSearch} [collectionSearch] Search Parameters
     * @param {module:api/CollectionsApi~collectionsSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Collection>}
     */
    collectionsSearch(opts, callback) {
      opts = opts || {};
      let postBody = opts['collectionSearch'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Cursor': opts['xCursor']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Collection];
      return this.apiClient.callApi(
        '/collections/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionArticleDelete operation.
     * @callback module:api/CollectionsApi~privateCollectionArticleDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete collection article
     * De-associate article from collection
     * @param {Number} collectionId Collection unique identifier
     * @param {Number} articleId Collection article unique identifier
     * @param {module:api/CollectionsApi~privateCollectionArticleDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateCollectionArticleDelete(collectionId, articleId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionArticleDelete");
      }
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateCollectionArticleDelete");
      }

      let pathParams = {
        'collection_id': collectionId,
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/articles/{article_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionArticlesAdd operation.
     * @callback module:api/CollectionsApi~privateCollectionArticlesAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Location} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add collection articles
     * Associate new articles with the collection. This will add new articles to the list of already associated articles
     * @param {Number} collectionId Collection unique identifier
     * @param {module:model/ArticlesCreator} articlesCreator Articles list
     * @param {module:api/CollectionsApi~privateCollectionArticlesAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Location}
     */
    privateCollectionArticlesAdd(collectionId, articlesCreator, callback) {
      let postBody = articlesCreator;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionArticlesAdd");
      }
      // verify the required parameter 'articlesCreator' is set
      if (articlesCreator === undefined || articlesCreator === null) {
        throw new Error("Missing the required parameter 'articlesCreator' when calling privateCollectionArticlesAdd");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Location;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/articles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionArticlesList operation.
     * @callback module:api/CollectionsApi~privateCollectionArticlesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Article>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List collection articles
     * List collection articles
     * @param {Number} collectionId Collection unique identifier
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number. Used for pagination with page_size
     * @param {Number} [pageSize = 10)] The number of results included on a page. Used for pagination with page
     * @param {Number} [limit] Number of results included on a page. Used for pagination with query
     * @param {Number} [offset] Where to start the listing(the offset of the first result). Used for pagination with limit
     * @param {module:api/CollectionsApi~privateCollectionArticlesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Article>}
     */
    privateCollectionArticlesList(collectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionArticlesList");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Article];
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/articles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionArticlesReplace operation.
     * @callback module:api/CollectionsApi~privateCollectionArticlesReplaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace collection articles
     * Associate new articles with the collection. This will remove all already associated articles and add these new ones
     * @param {Number} collectionId Collection unique identifier
     * @param {module:model/ArticlesCreator} articlesCreator Articles List
     * @param {module:api/CollectionsApi~privateCollectionArticlesReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateCollectionArticlesReplace(collectionId, articlesCreator, callback) {
      let postBody = articlesCreator;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionArticlesReplace");
      }
      // verify the required parameter 'articlesCreator' is set
      if (articlesCreator === undefined || articlesCreator === null) {
        throw new Error("Missing the required parameter 'articlesCreator' when calling privateCollectionArticlesReplace");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/articles', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionAuthorDelete operation.
     * @callback module:api/CollectionsApi~privateCollectionAuthorDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete collection author
     * Delete collection author
     * @param {Number} collectionId Collection unique identifier
     * @param {Number} authorId Collection Author unique identifier
     * @param {module:api/CollectionsApi~privateCollectionAuthorDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateCollectionAuthorDelete(collectionId, authorId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionAuthorDelete");
      }
      // verify the required parameter 'authorId' is set
      if (authorId === undefined || authorId === null) {
        throw new Error("Missing the required parameter 'authorId' when calling privateCollectionAuthorDelete");
      }

      let pathParams = {
        'collection_id': collectionId,
        'author_id': authorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/authors/{author_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionAuthorsAdd operation.
     * @callback module:api/CollectionsApi~privateCollectionAuthorsAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Location} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add collection authors
     * Associate new authors with the collection. This will add new authors to the list of already associated authors
     * @param {Number} collectionId Collection unique identifier
     * @param {module:model/AuthorsCreator} authorsCreator List of authors
     * @param {module:api/CollectionsApi~privateCollectionAuthorsAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Location}
     */
    privateCollectionAuthorsAdd(collectionId, authorsCreator, callback) {
      let postBody = authorsCreator;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionAuthorsAdd");
      }
      // verify the required parameter 'authorsCreator' is set
      if (authorsCreator === undefined || authorsCreator === null) {
        throw new Error("Missing the required parameter 'authorsCreator' when calling privateCollectionAuthorsAdd");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Location;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/authors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionAuthorsList operation.
     * @callback module:api/CollectionsApi~privateCollectionAuthorsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Author>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List collection authors
     * List collection authors
     * @param {Number} collectionId Collection unique identifier
     * @param {module:api/CollectionsApi~privateCollectionAuthorsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Author>}
     */
    privateCollectionAuthorsList(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionAuthorsList");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Author];
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/authors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionAuthorsReplace operation.
     * @callback module:api/CollectionsApi~privateCollectionAuthorsReplaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace collection authors
     * Associate new authors with the collection. This will remove all already associated authors and add these new ones
     * @param {Number} collectionId Collection unique identifier
     * @param {module:model/AuthorsCreator} authorsCreator List of authors
     * @param {module:api/CollectionsApi~privateCollectionAuthorsReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateCollectionAuthorsReplace(collectionId, authorsCreator, callback) {
      let postBody = authorsCreator;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionAuthorsReplace");
      }
      // verify the required parameter 'authorsCreator' is set
      if (authorsCreator === undefined || authorsCreator === null) {
        throw new Error("Missing the required parameter 'authorsCreator' when calling privateCollectionAuthorsReplace");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/authors', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionCategoriesAdd operation.
     * @callback module:api/CollectionsApi~privateCollectionCategoriesAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Location} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add collection categories
     * Associate new categories with the collection. This will add new categories to the list of already associated categories
     * @param {Number} collectionId Collection unique identifier
     * @param {module:model/CategoriesCreator} categoriesCreator Categories list
     * @param {module:api/CollectionsApi~privateCollectionCategoriesAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Location}
     */
    privateCollectionCategoriesAdd(collectionId, categoriesCreator, callback) {
      let postBody = categoriesCreator;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionCategoriesAdd");
      }
      // verify the required parameter 'categoriesCreator' is set
      if (categoriesCreator === undefined || categoriesCreator === null) {
        throw new Error("Missing the required parameter 'categoriesCreator' when calling privateCollectionCategoriesAdd");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Location;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionCategoriesList operation.
     * @callback module:api/CollectionsApi~privateCollectionCategoriesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Category>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List collection categories
     * List collection categories
     * @param {Number} collectionId Collection unique identifier
     * @param {module:api/CollectionsApi~privateCollectionCategoriesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Category>}
     */
    privateCollectionCategoriesList(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionCategoriesList");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Category];
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionCategoriesReplace operation.
     * @callback module:api/CollectionsApi~privateCollectionCategoriesReplaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace collection categories
     * Associate new categories with the collection. This will remove all already associated categories and add these new ones
     * @param {Number} collectionId Collection unique identifier
     * @param {module:model/CategoriesCreator} categoriesCreator Categories list
     * @param {module:api/CollectionsApi~privateCollectionCategoriesReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateCollectionCategoriesReplace(collectionId, categoriesCreator, callback) {
      let postBody = categoriesCreator;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionCategoriesReplace");
      }
      // verify the required parameter 'categoriesCreator' is set
      if (categoriesCreator === undefined || categoriesCreator === null) {
        throw new Error("Missing the required parameter 'categoriesCreator' when calling privateCollectionCategoriesReplace");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/categories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionCategoryDelete operation.
     * @callback module:api/CollectionsApi~privateCollectionCategoryDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete collection category
     * De-associate category from collection
     * @param {Number} collectionId Collection unique identifier
     * @param {Number} categoryId Collection category unique identifier
     * @param {module:api/CollectionsApi~privateCollectionCategoryDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateCollectionCategoryDelete(collectionId, categoryId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionCategoryDelete");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling privateCollectionCategoryDelete");
      }

      let pathParams = {
        'collection_id': collectionId,
        'category_id': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/categories/{category_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionCreate operation.
     * @callback module:api/CollectionsApi~privateCollectionCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationWarnings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create collection
     * Create a new Collection by sending collection information
     * @param {module:model/CollectionCreate} collectionCreate Collection description
     * @param {module:api/CollectionsApi~privateCollectionCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationWarnings}
     */
    privateCollectionCreate(collectionCreate, callback) {
      let postBody = collectionCreate;
      // verify the required parameter 'collectionCreate' is set
      if (collectionCreate === undefined || collectionCreate === null) {
        throw new Error("Missing the required parameter 'collectionCreate' when calling privateCollectionCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LocationWarnings;
      return this.apiClient.callApi(
        '/account/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionDelete operation.
     * @callback module:api/CollectionsApi~privateCollectionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete collection
     * Delete n collection
     * @param {Number} collectionId Collection Unique identifier
     * @param {module:api/CollectionsApi~privateCollectionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateCollectionDelete(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionDelete");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionDetails operation.
     * @callback module:api/CollectionsApi~privateCollectionDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionCompletePrivate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collection details
     * View a collection
     * @param {Number} collectionId Collection Unique identifier
     * @param {module:api/CollectionsApi~privateCollectionDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionCompletePrivate}
     */
    privateCollectionDetails(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionDetails");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollectionCompletePrivate;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionPrivateLinkCreate operation.
     * @callback module:api/CollectionsApi~privateCollectionPrivateLinkCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateLinkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create collection private link
     * Create new private link
     * @param {Number} collectionId Collection unique identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/CollectionPrivateLinkCreator} [collectionPrivateLinkCreator] 
     * @param {module:api/CollectionsApi~privateCollectionPrivateLinkCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateLinkResponse}
     */
    privateCollectionPrivateLinkCreate(collectionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['collectionPrivateLinkCreator'];
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionPrivateLinkCreate");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrivateLinkResponse;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/private_links', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionPrivateLinkDelete operation.
     * @callback module:api/CollectionsApi~privateCollectionPrivateLinkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable private link
     * Disable/delete private link for this collection
     * @param {Number} collectionId Collection unique identifier
     * @param {String} linkId Private link token
     * @param {module:api/CollectionsApi~privateCollectionPrivateLinkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateCollectionPrivateLinkDelete(collectionId, linkId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionPrivateLinkDelete");
      }
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling privateCollectionPrivateLinkDelete");
      }

      let pathParams = {
        'collection_id': collectionId,
        'link_id': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/private_links/{link_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionPrivateLinkUpdate operation.
     * @callback module:api/CollectionsApi~privateCollectionPrivateLinkUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update collection private link
     * Update existing private link for this collection
     * @param {Number} collectionId Collection unique identifier
     * @param {String} linkId Private link token
     * @param {Object} opts Optional parameters
     * @param {module:model/CollectionPrivateLinkCreator} [collectionPrivateLinkCreator] 
     * @param {module:api/CollectionsApi~privateCollectionPrivateLinkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateCollectionPrivateLinkUpdate(collectionId, linkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['collectionPrivateLinkCreator'];
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionPrivateLinkUpdate");
      }
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling privateCollectionPrivateLinkUpdate");
      }

      let pathParams = {
        'collection_id': collectionId,
        'link_id': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/private_links/{link_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionPrivateLinksList operation.
     * @callback module:api/CollectionsApi~privateCollectionPrivateLinksListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PrivateLink>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List collection private links
     * List article private links
     * @param {Number} collectionId Collection unique identifier
     * @param {module:api/CollectionsApi~privateCollectionPrivateLinksListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PrivateLink>}
     */
    privateCollectionPrivateLinksList(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionPrivateLinksList");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PrivateLink];
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/private_links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionPublish operation.
     * @callback module:api/CollectionsApi~privateCollectionPublishCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Location} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Collection Publish
     * When a collection is published, a new public version will be generated. Any further updates to the collection will affect the private collection data. In order to make these changes publicly visible, an explicit publish operation is needed.
     * @param {Number} collectionId Collection Unique identifier
     * @param {module:api/CollectionsApi~privateCollectionPublishCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Location}
     */
    privateCollectionPublish(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionPublish");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Location;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionReserveDoi operation.
     * @callback module:api/CollectionsApi~privateCollectionReserveDoiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionDOI} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Collection Reserve DOI
     * Reserve DOI for collection
     * @param {Number} collectionId Collection Unique identifier
     * @param {module:api/CollectionsApi~privateCollectionReserveDoiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionDOI}
     */
    privateCollectionReserveDoi(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionReserveDoi");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollectionDOI;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/reserve_doi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionReserveHandle operation.
     * @callback module:api/CollectionsApi~privateCollectionReserveHandleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionHandle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Collection Reserve Handle
     * Reserve Handle for collection
     * @param {Number} collectionId Collection Unique identifier
     * @param {module:api/CollectionsApi~privateCollectionReserveHandleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionHandle}
     */
    privateCollectionReserveHandle(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionReserveHandle");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollectionHandle;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/reserve_handle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionResource operation.
     * @callback module:api/CollectionsApi~privateCollectionResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Location} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Collection Resource
     * Edit collection resource data.
     * @param {Number} collectionId Collection unique identifier
     * @param {module:model/Resource} resource Resource data
     * @param {module:api/CollectionsApi~privateCollectionResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Location}
     */
    privateCollectionResource(collectionId, resource, callback) {
      let postBody = resource;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionResource");
      }
      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling privateCollectionResource");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Location;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}/resource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionUpdate operation.
     * @callback module:api/CollectionsApi~privateCollectionUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationWarningsUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update collection
     * Update collection details; request can also be made with the PATCH method.
     * @param {Number} collectionId Collection Unique identifier
     * @param {module:model/CollectionUpdate} collectionUpdate Collection description
     * @param {module:api/CollectionsApi~privateCollectionUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationWarningsUpdate}
     */
    privateCollectionUpdate(collectionId, collectionUpdate, callback) {
      let postBody = collectionUpdate;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling privateCollectionUpdate");
      }
      // verify the required parameter 'collectionUpdate' is set
      if (collectionUpdate === undefined || collectionUpdate === null) {
        throw new Error("Missing the required parameter 'collectionUpdate' when calling privateCollectionUpdate");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LocationWarningsUpdate;
      return this.apiClient.callApi(
        '/account/collections/{collection_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionsList operation.
     * @callback module:api/CollectionsApi~privateCollectionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Collection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Collections List
     * List private collections
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number. Used for pagination with page_size
     * @param {Number} [pageSize = 10)] The number of results included on a page. Used for pagination with page
     * @param {Number} [limit] Number of results included on a page. Used for pagination with query
     * @param {Number} [offset] Where to start the listing(the offset of the first result). Used for pagination with limit
     * @param {module:model/String} [order = 'published_date')] The field by which to order. Default varies by endpoint/resource.
     * @param {module:model/String} [orderDirection = 'desc')] 
     * @param {module:api/CollectionsApi~privateCollectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Collection>}
     */
    privateCollectionsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order': opts['order'],
        'order_direction': opts['orderDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Collection];
      return this.apiClient.callApi(
        '/account/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateCollectionsSearch operation.
     * @callback module:api/CollectionsApi~privateCollectionsSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Collection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Collections Search
     * Returns a list of private Collections
     * @param {module:model/PrivateCollectionSearch} privateCollectionSearch Search Parameters
     * @param {module:api/CollectionsApi~privateCollectionsSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Collection>}
     */
    privateCollectionsSearch(privateCollectionSearch, callback) {
      let postBody = privateCollectionSearch;
      // verify the required parameter 'privateCollectionSearch' is set
      if (privateCollectionSearch === undefined || privateCollectionSearch === null) {
        throw new Error("Missing the required parameter 'privateCollectionSearch' when calling privateCollectionsSearch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Collection];
      return this.apiClient.callApi(
        '/account/collections/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
