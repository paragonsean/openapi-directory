/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountReport from '../model/AccountReport';
import Article from '../model/Article';
import ArticleComplete from '../model/ArticleComplete';
import ArticleCompletePrivate from '../model/ArticleCompletePrivate';
import ArticleConfidentiality from '../model/ArticleConfidentiality';
import ArticleCreate from '../model/ArticleCreate';
import ArticleDOI from '../model/ArticleDOI';
import ArticleEmbargo from '../model/ArticleEmbargo';
import ArticleEmbargoUpdater from '../model/ArticleEmbargoUpdater';
import ArticleHandle from '../model/ArticleHandle';
import ArticleSearch from '../model/ArticleSearch';
import ArticleUpdate from '../model/ArticleUpdate';
import ArticleVersions from '../model/ArticleVersions';
import ArticleWithProject from '../model/ArticleWithProject';
import Author from '../model/Author';
import AuthorsCreator from '../model/AuthorsCreator';
import CategoriesCreator from '../model/CategoriesCreator';
import Category from '../model/Category';
import ConfidentialityCreator from '../model/ConfidentialityCreator';
import ErrorMessage from '../model/ErrorMessage';
import FileCreator from '../model/FileCreator';
import FileId from '../model/FileId';
import Location from '../model/Location';
import LocationWarnings from '../model/LocationWarnings';
import LocationWarningsUpdate from '../model/LocationWarningsUpdate';
import PrivateArticleSearch from '../model/PrivateArticleSearch';
import PrivateFile from '../model/PrivateFile';
import PrivateLink from '../model/PrivateLink';
import PrivateLinkCreator from '../model/PrivateLinkCreator';
import PrivateLinkResponse from '../model/PrivateLinkResponse';
import PublicFile from '../model/PublicFile';
import Resource from '../model/Resource';

/**
* Articles service.
* @module api/ArticlesApi
* @version 2.0.0
*/
export default class ArticlesApi {

    /**
    * Constructs a new ArticlesApi. 
    * @alias module:api/ArticlesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountArticleReport operation.
     * @callback module:api/ArticlesApi~accountArticleReportCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccountReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Account Article Report
     * Return status on all reports generated for the account from the oauth credentials
     * @param {Object} opts Optional parameters
     * @param {Number} [groupId] A group ID to filter by
     * @param {module:api/ArticlesApi~accountArticleReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccountReport>}
     */
    accountArticleReport(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'group_id': opts['groupId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AccountReport];
      return this.apiClient.callApi(
        '/account/articles/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountArticleReportGenerate operation.
     * @callback module:api/ArticlesApi~accountArticleReportGenerateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate a new Report
     * Initiate a new Article Report for this Account. There is a limit of 1 report per day.
     * @param {module:api/ArticlesApi~accountArticleReportGenerateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountReport}
     */
    accountArticleReportGenerate(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountReport;
      return this.apiClient.callApi(
        '/account/articles/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleDetails operation.
     * @callback module:api/ArticlesApi~articleDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleComplete} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View article details
     * View an article
     * @param {Number} articleId Article Unique identifier
     * @param {module:api/ArticlesApi~articleDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleComplete}
     */
    articleDetails(articleId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling articleDetails");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleComplete;
      return this.apiClient.callApi(
        '/articles/{article_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleFileDetails operation.
     * @callback module:api/ArticlesApi~articleFileDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Article file details
     * File by id
     * @param {Number} articleId Article Unique identifier
     * @param {Number} fileId File Unique identifier
     * @param {module:api/ArticlesApi~articleFileDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicFile}
     */
    articleFileDetails(articleId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling articleFileDetails");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling articleFileDetails");
      }

      let pathParams = {
        'article_id': articleId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicFile;
      return this.apiClient.callApi(
        '/articles/{article_id}/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleFiles operation.
     * @callback module:api/ArticlesApi~articleFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PublicFile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List article files
     * Files list for article
     * @param {Number} articleId Article Unique identifier
     * @param {module:api/ArticlesApi~articleFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PublicFile>}
     */
    articleFiles(articleId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling articleFiles");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PublicFile];
      return this.apiClient.callApi(
        '/articles/{article_id}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleVersionConfidentiality operation.
     * @callback module:api/ArticlesApi~articleVersionConfidentialityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleConfidentiality} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Public Article Confidentiality for article version
     * Confidentiality for article version. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * @param {Number} articleId Article Unique identifier
     * @param {Number} vNumber Version Number
     * @param {module:api/ArticlesApi~articleVersionConfidentialityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleConfidentiality}
     */
    articleVersionConfidentiality(articleId, vNumber, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling articleVersionConfidentiality");
      }
      // verify the required parameter 'vNumber' is set
      if (vNumber === undefined || vNumber === null) {
        throw new Error("Missing the required parameter 'vNumber' when calling articleVersionConfidentiality");
      }

      let pathParams = {
        'article_id': articleId,
        'v_number': vNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleConfidentiality;
      return this.apiClient.callApi(
        '/articles/{article_id}/versions/{v_number}/confidentiality', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleVersionDetails operation.
     * @callback module:api/ArticlesApi~articleVersionDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleComplete} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Article details for version
     * Article with specified version
     * @param {Number} articleId Article Unique identifier
     * @param {Number} vNumber Article Version Number
     * @param {module:api/ArticlesApi~articleVersionDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleComplete}
     */
    articleVersionDetails(articleId, vNumber, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling articleVersionDetails");
      }
      // verify the required parameter 'vNumber' is set
      if (vNumber === undefined || vNumber === null) {
        throw new Error("Missing the required parameter 'vNumber' when calling articleVersionDetails");
      }

      let pathParams = {
        'article_id': articleId,
        'v_number': vNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleComplete;
      return this.apiClient.callApi(
        '/articles/{article_id}/versions/{v_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleVersionEmbargo operation.
     * @callback module:api/ArticlesApi~articleVersionEmbargoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleEmbargo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Public Article Embargo for article version
     * Embargo for article version
     * @param {Number} articleId Article Unique identifier
     * @param {Number} vNumber Version Number
     * @param {module:api/ArticlesApi~articleVersionEmbargoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleEmbargo}
     */
    articleVersionEmbargo(articleId, vNumber, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling articleVersionEmbargo");
      }
      // verify the required parameter 'vNumber' is set
      if (vNumber === undefined || vNumber === null) {
        throw new Error("Missing the required parameter 'vNumber' when calling articleVersionEmbargo");
      }

      let pathParams = {
        'article_id': articleId,
        'v_number': vNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleEmbargo;
      return this.apiClient.callApi(
        '/articles/{article_id}/versions/{v_number}/embargo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleVersionUpdate operation.
     * @callback module:api/ArticlesApi~articleVersionUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationWarningsUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update article version
     * Updating an article version by passing body parameters; request can also be made with the PATCH method.
     * @param {Number} articleId Article unique identifier
     * @param {Number} versionId Article version identifier
     * @param {module:model/ArticleUpdate} articleUpdate Article description
     * @param {module:api/ArticlesApi~articleVersionUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationWarningsUpdate}
     */
    articleVersionUpdate(articleId, versionId, articleUpdate, callback) {
      let postBody = articleUpdate;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling articleVersionUpdate");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling articleVersionUpdate");
      }
      // verify the required parameter 'articleUpdate' is set
      if (articleUpdate === undefined || articleUpdate === null) {
        throw new Error("Missing the required parameter 'articleUpdate' when calling articleVersionUpdate");
      }

      let pathParams = {
        'article_id': articleId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LocationWarningsUpdate;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/versions/{version_id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleVersionUpdateThumb operation.
     * @callback module:api/ArticlesApi~articleVersionUpdateThumbCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update article version thumbnail
     * For a given public article version update the article thumbnail by choosing one of the associated files
     * @param {Number} articleId Article unique identifier
     * @param {Number} versionId Article version identifier
     * @param {module:model/FileId} fileId File ID
     * @param {module:api/ArticlesApi~articleVersionUpdateThumbCallback} callback The callback function, accepting three arguments: error, data, response
     */
    articleVersionUpdateThumb(articleId, versionId, fileId, callback) {
      let postBody = fileId;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling articleVersionUpdateThumb");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling articleVersionUpdateThumb");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling articleVersionUpdateThumb");
      }

      let pathParams = {
        'article_id': articleId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/versions/{version_id}/update_thumb', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleVersions operation.
     * @callback module:api/ArticlesApi~articleVersionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArticleVersions>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List article versions
     * List public article versions
     * @param {Number} articleId Article Unique identifier
     * @param {module:api/ArticlesApi~articleVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArticleVersions>}
     */
    articleVersions(articleId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling articleVersions");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ArticleVersions];
      return this.apiClient.callApi(
        '/articles/{article_id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesList operation.
     * @callback module:api/ArticlesApi~articlesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Article>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Public Articles
     * Returns a list of public articles
     * @param {Object} opts Optional parameters
     * @param {String} [xCursor] Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
     * @param {Number} [page] Page number. Used for pagination with page_size
     * @param {Number} [pageSize = 10)] The number of results included on a page. Used for pagination with page
     * @param {Number} [limit] Number of results included on a page. Used for pagination with query
     * @param {Number} [offset] Where to start the listing(the offset of the first result). Used for pagination with limit
     * @param {module:model/String} [order = 'published_date')] The field by which to order. Default varies by endpoint/resource.
     * @param {module:model/String} [orderDirection = 'desc')] 
     * @param {Number} [institution] only return articles from this institution
     * @param {String} [publishedSince] Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
     * @param {String} [modifiedSince] Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
     * @param {Number} [group] only return articles from this group
     * @param {String} [resourceDoi] only return articles with this resource_doi
     * @param {Number} [itemType] Only return articles with the respective type. Mapping for item_type is: 1 - Figure, 2 - Media, 3 - Dataset, 5 - Poster, 6 - Journal contribution, 7 - Presentation, 8 - Thesis, 9 - Software, 11 - Online resource, 12 - Preprint, 13 - Book, 14 - Conference contribution, 15 - Chapter, 16 - Peer review, 17 - Educational resource, 18 - Report, 19 - Standard, 20 - Composition, 21 - Funding, 22 - Physical object, 23 - Data management plan, 24 - Workflow, 25 - Monograph, 26 - Performance, 27 - Event, 28 - Service, 29 - Model
     * @param {String} [doi] only return articles with this doi
     * @param {String} [handle] only return articles with this handle
     * @param {module:api/ArticlesApi~articlesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Article>}
     */
    articlesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order': opts['order'],
        'order_direction': opts['orderDirection'],
        'institution': opts['institution'],
        'published_since': opts['publishedSince'],
        'modified_since': opts['modifiedSince'],
        'group': opts['group'],
        'resource_doi': opts['resourceDoi'],
        'item_type': opts['itemType'],
        'doi': opts['doi'],
        'handle': opts['handle']
      };
      let headerParams = {
        'X-Cursor': opts['xCursor']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Article];
      return this.apiClient.callApi(
        '/articles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlesSearch operation.
     * @callback module:api/ArticlesApi~articlesSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArticleWithProject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Public Articles Search
     * Returns a list of public articles, filtered by the search parameters
     * @param {Object} opts Optional parameters
     * @param {String} [xCursor] Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected.
     * @param {module:model/ArticleSearch} [articleSearch] Search Parameters
     * @param {module:api/ArticlesApi~articlesSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArticleWithProject>}
     */
    articlesSearch(opts, callback) {
      opts = opts || {};
      let postBody = opts['articleSearch'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Cursor': opts['xCursor']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ArticleWithProject];
      return this.apiClient.callApi(
        '/articles/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleAuthorDelete operation.
     * @callback module:api/ArticlesApi~privateArticleAuthorDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete article author
     * De-associate author from article
     * @param {Number} articleId Article unique identifier
     * @param {Number} authorId Article Author unique identifier
     * @param {module:api/ArticlesApi~privateArticleAuthorDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateArticleAuthorDelete(articleId, authorId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleAuthorDelete");
      }
      // verify the required parameter 'authorId' is set
      if (authorId === undefined || authorId === null) {
        throw new Error("Missing the required parameter 'authorId' when calling privateArticleAuthorDelete");
      }

      let pathParams = {
        'article_id': articleId,
        'author_id': authorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/authors/{author_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleAuthorsAdd operation.
     * @callback module:api/ArticlesApi~privateArticleAuthorsAddCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add article authors
     * Associate new authors with the article. This will add new authors to the list of already associated authors
     * @param {Number} articleId Article unique identifier
     * @param {module:model/AuthorsCreator} authorsCreator Authors description
     * @param {module:api/ArticlesApi~privateArticleAuthorsAddCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateArticleAuthorsAdd(articleId, authorsCreator, callback) {
      let postBody = authorsCreator;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleAuthorsAdd");
      }
      // verify the required parameter 'authorsCreator' is set
      if (authorsCreator === undefined || authorsCreator === null) {
        throw new Error("Missing the required parameter 'authorsCreator' when calling privateArticleAuthorsAdd");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/authors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleAuthorsList operation.
     * @callback module:api/ArticlesApi~privateArticleAuthorsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Author>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List article authors
     * List article authors
     * @param {Number} articleId Article unique identifier
     * @param {module:api/ArticlesApi~privateArticleAuthorsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Author>}
     */
    privateArticleAuthorsList(articleId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleAuthorsList");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Author];
      return this.apiClient.callApi(
        '/account/articles/{article_id}/authors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleAuthorsReplace operation.
     * @callback module:api/ArticlesApi~privateArticleAuthorsReplaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace article authors
     * Associate new authors with the article. This will remove all already associated authors and add these new ones
     * @param {Number} articleId Article unique identifier
     * @param {module:model/AuthorsCreator} authorsCreator Authors description
     * @param {module:api/ArticlesApi~privateArticleAuthorsReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateArticleAuthorsReplace(articleId, authorsCreator, callback) {
      let postBody = authorsCreator;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleAuthorsReplace");
      }
      // verify the required parameter 'authorsCreator' is set
      if (authorsCreator === undefined || authorsCreator === null) {
        throw new Error("Missing the required parameter 'authorsCreator' when calling privateArticleAuthorsReplace");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/authors', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleCategoriesAdd operation.
     * @callback module:api/ArticlesApi~privateArticleCategoriesAddCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add article categories
     * Associate new categories with the article. This will add new categories to the list of already associated categories
     * @param {Number} articleId Article unique identifier
     * @param {module:model/CategoriesCreator} categoriesCreator 
     * @param {module:api/ArticlesApi~privateArticleCategoriesAddCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateArticleCategoriesAdd(articleId, categoriesCreator, callback) {
      let postBody = categoriesCreator;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleCategoriesAdd");
      }
      // verify the required parameter 'categoriesCreator' is set
      if (categoriesCreator === undefined || categoriesCreator === null) {
        throw new Error("Missing the required parameter 'categoriesCreator' when calling privateArticleCategoriesAdd");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleCategoriesList operation.
     * @callback module:api/ArticlesApi~privateArticleCategoriesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Category>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List article categories
     * List article categories
     * @param {Number} articleId Article unique identifier
     * @param {module:api/ArticlesApi~privateArticleCategoriesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Category>}
     */
    privateArticleCategoriesList(articleId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleCategoriesList");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Category];
      return this.apiClient.callApi(
        '/account/articles/{article_id}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleCategoriesReplace operation.
     * @callback module:api/ArticlesApi~privateArticleCategoriesReplaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace article categories
     * Associate new categories with the article. This will remove all already associated categories and add these new ones
     * @param {Number} articleId Article unique identifier
     * @param {module:model/CategoriesCreator} categoriesCreator 
     * @param {module:api/ArticlesApi~privateArticleCategoriesReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateArticleCategoriesReplace(articleId, categoriesCreator, callback) {
      let postBody = categoriesCreator;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleCategoriesReplace");
      }
      // verify the required parameter 'categoriesCreator' is set
      if (categoriesCreator === undefined || categoriesCreator === null) {
        throw new Error("Missing the required parameter 'categoriesCreator' when calling privateArticleCategoriesReplace");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/categories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleCategoryDelete operation.
     * @callback module:api/ArticlesApi~privateArticleCategoryDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete article category
     * De-associate category from article
     * @param {Number} articleId Article unique identifier
     * @param {Number} categoryId Category unique identifier
     * @param {module:api/ArticlesApi~privateArticleCategoryDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateArticleCategoryDelete(articleId, categoryId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleCategoryDelete");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling privateArticleCategoryDelete");
      }

      let pathParams = {
        'article_id': articleId,
        'category_id': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/categories/{category_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleConfidentialityDelete operation.
     * @callback module:api/ArticlesApi~privateArticleConfidentialityDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete article confidentiality
     * Delete confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * @param {Number} articleId Article unique identifier
     * @param {module:api/ArticlesApi~privateArticleConfidentialityDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateArticleConfidentialityDelete(articleId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleConfidentialityDelete");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/confidentiality', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleConfidentialityDetails operation.
     * @callback module:api/ArticlesApi~privateArticleConfidentialityDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleConfidentiality} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Article confidentiality details
     * View confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * @param {Number} articleId Article unique identifier
     * @param {module:api/ArticlesApi~privateArticleConfidentialityDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleConfidentiality}
     */
    privateArticleConfidentialityDetails(articleId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleConfidentialityDetails");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleConfidentiality;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/confidentiality', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleConfidentialityUpdate operation.
     * @callback module:api/ArticlesApi~privateArticleConfidentialityUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update article confidentiality
     * Update confidentiality settings. The confidentiality feature is now deprecated. This has been replaced by the new extended embargo functionality and all items that used to be confidential have now been migrated to items with a permanent embargo on files. All API endpoints related to this functionality will remain for backwards compatibility, but will now be attached to the new extended embargo workflows.
     * @param {Number} articleId Article unique identifier
     * @param {module:model/ConfidentialityCreator} confidentialityCreator 
     * @param {module:api/ArticlesApi~privateArticleConfidentialityUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateArticleConfidentialityUpdate(articleId, confidentialityCreator, callback) {
      let postBody = confidentialityCreator;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleConfidentialityUpdate");
      }
      // verify the required parameter 'confidentialityCreator' is set
      if (confidentialityCreator === undefined || confidentialityCreator === null) {
        throw new Error("Missing the required parameter 'confidentialityCreator' when calling privateArticleConfidentialityUpdate");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/confidentiality', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleCreate operation.
     * @callback module:api/ArticlesApi~privateArticleCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationWarnings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new Article
     * Create a new Article by sending article information
     * @param {module:model/ArticleCreate} articleCreate Article description
     * @param {module:api/ArticlesApi~privateArticleCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationWarnings}
     */
    privateArticleCreate(articleCreate, callback) {
      let postBody = articleCreate;
      // verify the required parameter 'articleCreate' is set
      if (articleCreate === undefined || articleCreate === null) {
        throw new Error("Missing the required parameter 'articleCreate' when calling privateArticleCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LocationWarnings;
      return this.apiClient.callApi(
        '/account/articles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleDelete operation.
     * @callback module:api/ArticlesApi~privateArticleDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete article
     * Delete an article
     * @param {Number} articleId Article unique identifier
     * @param {module:api/ArticlesApi~privateArticleDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateArticleDelete(articleId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleDelete");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/articles/{article_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleDetails operation.
     * @callback module:api/ArticlesApi~privateArticleDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleCompletePrivate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Article details
     * View a private article
     * @param {Number} articleId Article unique identifier
     * @param {module:api/ArticlesApi~privateArticleDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleCompletePrivate}
     */
    privateArticleDetails(articleId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleDetails");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleCompletePrivate;
      return this.apiClient.callApi(
        '/account/articles/{article_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleEmbargoDelete operation.
     * @callback module:api/ArticlesApi~privateArticleEmbargoDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Article Embargo
     * Will lift the embargo for the specified article
     * @param {Number} articleId Article unique identifier
     * @param {module:api/ArticlesApi~privateArticleEmbargoDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateArticleEmbargoDelete(articleId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleEmbargoDelete");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/embargo', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleEmbargoDetails operation.
     * @callback module:api/ArticlesApi~privateArticleEmbargoDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleEmbargo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Article Embargo Details
     * View a private article embargo details
     * @param {Number} articleId Article unique identifier
     * @param {module:api/ArticlesApi~privateArticleEmbargoDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleEmbargo}
     */
    privateArticleEmbargoDetails(articleId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleEmbargoDetails");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleEmbargo;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/embargo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleEmbargoUpdate operation.
     * @callback module:api/ArticlesApi~privateArticleEmbargoUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Article Embargo
     * Note: setting an article under whole embargo does not imply that the article will be published when the embargo will expire. You must explicitly call the publish endpoint to enable this functionality.
     * @param {Number} articleId Article unique identifier
     * @param {module:model/ArticleEmbargoUpdater} articleEmbargoUpdater Embargo description
     * @param {module:api/ArticlesApi~privateArticleEmbargoUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateArticleEmbargoUpdate(articleId, articleEmbargoUpdater, callback) {
      let postBody = articleEmbargoUpdater;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleEmbargoUpdate");
      }
      // verify the required parameter 'articleEmbargoUpdater' is set
      if (articleEmbargoUpdater === undefined || articleEmbargoUpdater === null) {
        throw new Error("Missing the required parameter 'articleEmbargoUpdater' when calling privateArticleEmbargoUpdate");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/embargo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleFile operation.
     * @callback module:api/ArticlesApi~privateArticleFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Single File
     * View details of file for specified article
     * @param {Number} articleId Article unique identifier
     * @param {Number} fileId File unique identifier
     * @param {module:api/ArticlesApi~privateArticleFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateFile}
     */
    privateArticleFile(articleId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleFile");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling privateArticleFile");
      }

      let pathParams = {
        'article_id': articleId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrivateFile;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleFileDelete operation.
     * @callback module:api/ArticlesApi~privateArticleFileDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * File Delete
     * Complete file upload
     * @param {Number} articleId Article unique identifier
     * @param {Number} fileId File unique identifier
     * @param {module:api/ArticlesApi~privateArticleFileDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateArticleFileDelete(articleId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleFileDelete");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling privateArticleFileDelete");
      }

      let pathParams = {
        'article_id': articleId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/files/{file_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleFilesList operation.
     * @callback module:api/ArticlesApi~privateArticleFilesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PrivateFile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List article files
     * List private files
     * @param {Number} articleId Article unique identifier
     * @param {module:api/ArticlesApi~privateArticleFilesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PrivateFile>}
     */
    privateArticleFilesList(articleId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleFilesList");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PrivateFile];
      return this.apiClient.callApi(
        '/account/articles/{article_id}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticlePrivateLink operation.
     * @callback module:api/ArticlesApi~privateArticlePrivateLinkCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PrivateLink>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List private links
     * List private links
     * @param {Number} articleId Article unique identifier
     * @param {module:api/ArticlesApi~privateArticlePrivateLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PrivateLink>}
     */
    privateArticlePrivateLink(articleId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticlePrivateLink");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PrivateLink];
      return this.apiClient.callApi(
        '/account/articles/{article_id}/private_links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticlePrivateLinkCreate operation.
     * @callback module:api/ArticlesApi~privateArticlePrivateLinkCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateLinkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create private link
     * Create new private link for this article
     * @param {Number} articleId Article unique identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/PrivateLinkCreator} [privateLinkCreator] 
     * @param {module:api/ArticlesApi~privateArticlePrivateLinkCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateLinkResponse}
     */
    privateArticlePrivateLinkCreate(articleId, opts, callback) {
      opts = opts || {};
      let postBody = opts['privateLinkCreator'];
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticlePrivateLinkCreate");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrivateLinkResponse;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/private_links', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticlePrivateLinkDelete operation.
     * @callback module:api/ArticlesApi~privateArticlePrivateLinkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable private link
     * Disable/delete private link for this article
     * @param {Number} articleId Article unique identifier
     * @param {String} linkId Private link token
     * @param {module:api/ArticlesApi~privateArticlePrivateLinkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateArticlePrivateLinkDelete(articleId, linkId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticlePrivateLinkDelete");
      }
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling privateArticlePrivateLinkDelete");
      }

      let pathParams = {
        'article_id': articleId,
        'link_id': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/private_links/{link_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticlePrivateLinkUpdate operation.
     * @callback module:api/ArticlesApi~privateArticlePrivateLinkUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update private link
     * Update existing private link for this article
     * @param {Number} articleId Article unique identifier
     * @param {String} linkId Private link token
     * @param {Object} opts Optional parameters
     * @param {module:model/PrivateLinkCreator} [privateLinkCreator] 
     * @param {module:api/ArticlesApi~privateArticlePrivateLinkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateArticlePrivateLinkUpdate(articleId, linkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['privateLinkCreator'];
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticlePrivateLinkUpdate");
      }
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling privateArticlePrivateLinkUpdate");
      }

      let pathParams = {
        'article_id': articleId,
        'link_id': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/private_links/{link_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticlePublish operation.
     * @callback module:api/ArticlesApi~privateArticlePublishCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Location} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Article Publish
     * - If the whole article is under embargo, it will not be published immediately, but when the embargo expires or is lifted. - When an article is published, a new public version will be generated. Any further updates to the article will affect the private article data. In order to make these changes publicly visible, an explicit publish operation is needed.
     * @param {Number} articleId Article unique identifier
     * @param {module:api/ArticlesApi~privateArticlePublishCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Location}
     */
    privateArticlePublish(articleId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticlePublish");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Location;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleReserveDoi operation.
     * @callback module:api/ArticlesApi~privateArticleReserveDoiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleDOI} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Article Reserve DOI
     * Reserve DOI for article
     * @param {Number} articleId Article unique identifier
     * @param {module:api/ArticlesApi~privateArticleReserveDoiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleDOI}
     */
    privateArticleReserveDoi(articleId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleReserveDoi");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleDOI;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/reserve_doi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleReserveHandle operation.
     * @callback module:api/ArticlesApi~privateArticleReserveHandleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArticleHandle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Article Reserve Handle
     * Reserve Handle for article
     * @param {Number} articleId Article unique identifier
     * @param {module:api/ArticlesApi~privateArticleReserveHandleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArticleHandle}
     */
    privateArticleReserveHandle(articleId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleReserveHandle");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArticleHandle;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/reserve_handle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleResource operation.
     * @callback module:api/ArticlesApi~privateArticleResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Location} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Article Resource
     * Edit article resource data.
     * @param {Number} articleId Article unique identifier
     * @param {module:model/Resource} resource Resource data
     * @param {module:api/ArticlesApi~privateArticleResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Location}
     */
    privateArticleResource(articleId, resource, callback) {
      let postBody = resource;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleResource");
      }
      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling privateArticleResource");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Location;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/resource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleUpdate operation.
     * @callback module:api/ArticlesApi~privateArticleUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationWarningsUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update article
     * Updating an article by passing body parameters; request can also be made with the PATCH method.
     * @param {Number} articleId Article unique identifier
     * @param {module:model/ArticleUpdate} articleUpdate Article description
     * @param {module:api/ArticlesApi~privateArticleUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationWarningsUpdate}
     */
    privateArticleUpdate(articleId, articleUpdate, callback) {
      let postBody = articleUpdate;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleUpdate");
      }
      // verify the required parameter 'articleUpdate' is set
      if (articleUpdate === undefined || articleUpdate === null) {
        throw new Error("Missing the required parameter 'articleUpdate' when calling privateArticleUpdate");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LocationWarningsUpdate;
      return this.apiClient.callApi(
        '/account/articles/{article_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleUploadComplete operation.
     * @callback module:api/ArticlesApi~privateArticleUploadCompleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete Upload
     * Complete file upload
     * @param {Number} articleId Article unique identifier
     * @param {Number} fileId File unique identifier
     * @param {module:api/ArticlesApi~privateArticleUploadCompleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateArticleUploadComplete(articleId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleUploadComplete");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling privateArticleUploadComplete");
      }

      let pathParams = {
        'article_id': articleId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/files/{file_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticleUploadInitiate operation.
     * @callback module:api/ArticlesApi~privateArticleUploadInitiateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Location} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate Upload
     * Initiate a new file upload within the article. Either use the link property to point to an existing file that resides elsewhere and will not be uploaded to Figshare or use the other 3 parameters (md5, name, size).
     * @param {Number} articleId Article unique identifier
     * @param {module:model/FileCreator} fileCreator 
     * @param {module:api/ArticlesApi~privateArticleUploadInitiateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Location}
     */
    privateArticleUploadInitiate(articleId, fileCreator, callback) {
      let postBody = fileCreator;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling privateArticleUploadInitiate");
      }
      // verify the required parameter 'fileCreator' is set
      if (fileCreator === undefined || fileCreator === null) {
        throw new Error("Missing the required parameter 'fileCreator' when calling privateArticleUploadInitiate");
      }

      let pathParams = {
        'article_id': articleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Location;
      return this.apiClient.callApi(
        '/account/articles/{article_id}/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticlesList operation.
     * @callback module:api/ArticlesApi~privateArticlesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Article>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Articles
     * Get Own Articles
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number. Used for pagination with page_size
     * @param {Number} [pageSize = 10)] The number of results included on a page. Used for pagination with page
     * @param {Number} [limit] Number of results included on a page. Used for pagination with query
     * @param {Number} [offset] Where to start the listing(the offset of the first result). Used for pagination with limit
     * @param {module:api/ArticlesApi~privateArticlesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Article>}
     */
    privateArticlesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Article];
      return this.apiClient.callApi(
        '/account/articles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateArticlesSearch operation.
     * @callback module:api/ArticlesApi~privateArticlesSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ArticleWithProject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Private Articles search
     * Returns a list of private articles filtered by the search parameters
     * @param {module:model/PrivateArticleSearch} privateArticleSearch Search Parameters
     * @param {module:api/ArticlesApi~privateArticlesSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ArticleWithProject>}
     */
    privateArticlesSearch(privateArticleSearch, callback) {
      let postBody = privateArticleSearch;
      // verify the required parameter 'privateArticleSearch' is set
      if (privateArticleSearch === undefined || privateArticleSearch === null) {
        throw new Error("Missing the required parameter 'privateArticleSearch' when calling privateArticlesSearch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ArticleWithProject];
      return this.apiClient.callApi(
        '/account/articles/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
