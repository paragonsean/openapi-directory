/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FigshareApi);
  }
}(this, function(expect, FigshareApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FigshareApi.CollectionsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CollectionsApi', function() {
    describe('collectionArticles', function() {
      it('should call collectionArticles successfully', function(done) {
        //uncomment below and update the code to test collectionArticles
        //instance.collectionArticles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionDetails', function() {
      it('should call collectionDetails successfully', function(done) {
        //uncomment below and update the code to test collectionDetails
        //instance.collectionDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionVersionDetails', function() {
      it('should call collectionVersionDetails successfully', function(done) {
        //uncomment below and update the code to test collectionVersionDetails
        //instance.collectionVersionDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionVersions', function() {
      it('should call collectionVersions successfully', function(done) {
        //uncomment below and update the code to test collectionVersions
        //instance.collectionVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsList', function() {
      it('should call collectionsList successfully', function(done) {
        //uncomment below and update the code to test collectionsList
        //instance.collectionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionsSearch', function() {
      it('should call collectionsSearch successfully', function(done) {
        //uncomment below and update the code to test collectionsSearch
        //instance.collectionsSearch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionArticleDelete', function() {
      it('should call privateCollectionArticleDelete successfully', function(done) {
        //uncomment below and update the code to test privateCollectionArticleDelete
        //instance.privateCollectionArticleDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionArticlesAdd', function() {
      it('should call privateCollectionArticlesAdd successfully', function(done) {
        //uncomment below and update the code to test privateCollectionArticlesAdd
        //instance.privateCollectionArticlesAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionArticlesList', function() {
      it('should call privateCollectionArticlesList successfully', function(done) {
        //uncomment below and update the code to test privateCollectionArticlesList
        //instance.privateCollectionArticlesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionArticlesReplace', function() {
      it('should call privateCollectionArticlesReplace successfully', function(done) {
        //uncomment below and update the code to test privateCollectionArticlesReplace
        //instance.privateCollectionArticlesReplace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionAuthorDelete', function() {
      it('should call privateCollectionAuthorDelete successfully', function(done) {
        //uncomment below and update the code to test privateCollectionAuthorDelete
        //instance.privateCollectionAuthorDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionAuthorsAdd', function() {
      it('should call privateCollectionAuthorsAdd successfully', function(done) {
        //uncomment below and update the code to test privateCollectionAuthorsAdd
        //instance.privateCollectionAuthorsAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionAuthorsList', function() {
      it('should call privateCollectionAuthorsList successfully', function(done) {
        //uncomment below and update the code to test privateCollectionAuthorsList
        //instance.privateCollectionAuthorsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionAuthorsReplace', function() {
      it('should call privateCollectionAuthorsReplace successfully', function(done) {
        //uncomment below and update the code to test privateCollectionAuthorsReplace
        //instance.privateCollectionAuthorsReplace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionCategoriesAdd', function() {
      it('should call privateCollectionCategoriesAdd successfully', function(done) {
        //uncomment below and update the code to test privateCollectionCategoriesAdd
        //instance.privateCollectionCategoriesAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionCategoriesList', function() {
      it('should call privateCollectionCategoriesList successfully', function(done) {
        //uncomment below and update the code to test privateCollectionCategoriesList
        //instance.privateCollectionCategoriesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionCategoriesReplace', function() {
      it('should call privateCollectionCategoriesReplace successfully', function(done) {
        //uncomment below and update the code to test privateCollectionCategoriesReplace
        //instance.privateCollectionCategoriesReplace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionCategoryDelete', function() {
      it('should call privateCollectionCategoryDelete successfully', function(done) {
        //uncomment below and update the code to test privateCollectionCategoryDelete
        //instance.privateCollectionCategoryDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionCreate', function() {
      it('should call privateCollectionCreate successfully', function(done) {
        //uncomment below and update the code to test privateCollectionCreate
        //instance.privateCollectionCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionDelete', function() {
      it('should call privateCollectionDelete successfully', function(done) {
        //uncomment below and update the code to test privateCollectionDelete
        //instance.privateCollectionDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionDetails', function() {
      it('should call privateCollectionDetails successfully', function(done) {
        //uncomment below and update the code to test privateCollectionDetails
        //instance.privateCollectionDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionPrivateLinkCreate', function() {
      it('should call privateCollectionPrivateLinkCreate successfully', function(done) {
        //uncomment below and update the code to test privateCollectionPrivateLinkCreate
        //instance.privateCollectionPrivateLinkCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionPrivateLinkDelete', function() {
      it('should call privateCollectionPrivateLinkDelete successfully', function(done) {
        //uncomment below and update the code to test privateCollectionPrivateLinkDelete
        //instance.privateCollectionPrivateLinkDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionPrivateLinkUpdate', function() {
      it('should call privateCollectionPrivateLinkUpdate successfully', function(done) {
        //uncomment below and update the code to test privateCollectionPrivateLinkUpdate
        //instance.privateCollectionPrivateLinkUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionPrivateLinksList', function() {
      it('should call privateCollectionPrivateLinksList successfully', function(done) {
        //uncomment below and update the code to test privateCollectionPrivateLinksList
        //instance.privateCollectionPrivateLinksList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionPublish', function() {
      it('should call privateCollectionPublish successfully', function(done) {
        //uncomment below and update the code to test privateCollectionPublish
        //instance.privateCollectionPublish(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionReserveDoi', function() {
      it('should call privateCollectionReserveDoi successfully', function(done) {
        //uncomment below and update the code to test privateCollectionReserveDoi
        //instance.privateCollectionReserveDoi(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionReserveHandle', function() {
      it('should call privateCollectionReserveHandle successfully', function(done) {
        //uncomment below and update the code to test privateCollectionReserveHandle
        //instance.privateCollectionReserveHandle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionResource', function() {
      it('should call privateCollectionResource successfully', function(done) {
        //uncomment below and update the code to test privateCollectionResource
        //instance.privateCollectionResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionUpdate', function() {
      it('should call privateCollectionUpdate successfully', function(done) {
        //uncomment below and update the code to test privateCollectionUpdate
        //instance.privateCollectionUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionsList', function() {
      it('should call privateCollectionsList successfully', function(done) {
        //uncomment below and update the code to test privateCollectionsList
        //instance.privateCollectionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('privateCollectionsSearch', function() {
      it('should call privateCollectionsSearch successfully', function(done) {
        //uncomment below and update the code to test privateCollectionsSearch
        //instance.privateCollectionsSearch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
