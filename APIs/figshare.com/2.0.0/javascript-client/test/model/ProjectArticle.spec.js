/**
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FigshareApi);
  }
}(this, function(expect, FigshareApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FigshareApi.ProjectArticle();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectArticle', function() {
    it('should create an instance of ProjectArticle', function() {
      // uncomment below and update the code to test ProjectArticle
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be.a(FigshareApi.ProjectArticle);
    });

    it('should have the property categories (base name: "categories")', function() {
      // uncomment below and update the code to test the property categories
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property citation (base name: "citation")', function() {
      // uncomment below and update the code to test the property citation
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property confidentialReason (base name: "confidential_reason")', function() {
      // uncomment below and update the code to test the property confidentialReason
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property createdDate (base name: "created_date")', function() {
      // uncomment below and update the code to test the property createdDate
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property embargoDate (base name: "embargo_date")', function() {
      // uncomment below and update the code to test the property embargoDate
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property embargoReason (base name: "embargo_reason")', function() {
      // uncomment below and update the code to test the property embargoReason
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property embargoTitle (base name: "embargo_title")', function() {
      // uncomment below and update the code to test the property embargoTitle
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property embargoType (base name: "embargo_type")', function() {
      // uncomment below and update the code to test the property embargoType
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property funding (base name: "funding")', function() {
      // uncomment below and update the code to test the property funding
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property fundingList (base name: "funding_list")', function() {
      // uncomment below and update the code to test the property fundingList
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property hasLinkedFile (base name: "has_linked_file")', function() {
      // uncomment below and update the code to test the property hasLinkedFile
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property isActive (base name: "is_active")', function() {
      // uncomment below and update the code to test the property isActive
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property isConfidential (base name: "is_confidential")', function() {
      // uncomment below and update the code to test the property isConfidential
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property isEmbargoed (base name: "is_embargoed")', function() {
      // uncomment below and update the code to test the property isEmbargoed
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property isMetadataRecord (base name: "is_metadata_record")', function() {
      // uncomment below and update the code to test the property isMetadataRecord
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property isPublic (base name: "is_public")', function() {
      // uncomment below and update the code to test the property isPublic
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property license (base name: "license")', function() {
      // uncomment below and update the code to test the property license
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property metadataReason (base name: "metadata_reason")', function() {
      // uncomment below and update the code to test the property metadataReason
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property modifiedDate (base name: "modified_date")', function() {
      // uncomment below and update the code to test the property modifiedDate
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property references (base name: "references")', function() {
      // uncomment below and update the code to test the property references
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "size")', function() {
      // uncomment below and update the code to test the property size
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property definedType (base name: "defined_type")', function() {
      // uncomment below and update the code to test the property definedType
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property definedTypeName (base name: "defined_type_name")', function() {
      // uncomment below and update the code to test the property definedTypeName
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property doi (base name: "doi")', function() {
      // uncomment below and update the code to test the property doi
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property groupId (base name: "group_id")', function() {
      // uncomment below and update the code to test the property groupId
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property handle (base name: "handle")', function() {
      // uncomment below and update the code to test the property handle
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property publishedDate (base name: "published_date")', function() {
      // uncomment below and update the code to test the property publishedDate
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property thumb (base name: "thumb")', function() {
      // uncomment below and update the code to test the property thumb
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property timeline (base name: "timeline")', function() {
      // uncomment below and update the code to test the property timeline
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property urlPrivateApi (base name: "url_private_api")', function() {
      // uncomment below and update the code to test the property urlPrivateApi
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property urlPrivateHtml (base name: "url_private_html")', function() {
      // uncomment below and update the code to test the property urlPrivateHtml
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property urlPublicApi (base name: "url_public_api")', function() {
      // uncomment below and update the code to test the property urlPublicApi
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

    it('should have the property urlPublicHtml (base name: "url_public_html")', function() {
      // uncomment below and update the code to test the property urlPublicHtml
      //var instance = new FigshareApi.ProjectArticle();
      //expect(instance).to.be();
    });

  });

}));
