/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Article;
import org.openapitools.client.model.ArticleProjectCreate;
import org.openapitools.client.model.CreateProjectResponse;
import org.openapitools.client.model.ErrorMessage;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.LocationWarnings;
import org.openapitools.client.model.PrivateFile;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectArticle;
import org.openapitools.client.model.ProjectCollaborator;
import org.openapitools.client.model.ProjectCollaboratorInvite;
import org.openapitools.client.model.ProjectComplete;
import org.openapitools.client.model.ProjectCompletePrivate;
import org.openapitools.client.model.ProjectCreate;
import org.openapitools.client.model.ProjectNote;
import org.openapitools.client.model.ProjectNoteCreate;
import org.openapitools.client.model.ProjectNotePrivate;
import org.openapitools.client.model.ProjectPrivate;
import org.openapitools.client.model.ProjectUpdate;
import org.openapitools.client.model.ProjectsSearch;
import org.openapitools.client.model.ResponseMessage;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Delete project article
     *
     * Delete project article
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectArticleDeleteTest() throws ApiException {
        Long projectId = null;
        Long articleId = null;
        api.privateProjectArticleDelete(projectId, articleId);
        // TODO: test validations
    }

    /**
     * Project article details
     *
     * Project article details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectArticleDetailsTest() throws ApiException {
        Long projectId = null;
        Long articleId = null;
        ProjectArticle response = api.privateProjectArticleDetails(projectId, articleId);
        // TODO: test validations
    }

    /**
     * Project article file details
     *
     * Project article file details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectArticleFileTest() throws ApiException {
        Long projectId = null;
        Long articleId = null;
        Long fileId = null;
        PrivateFile response = api.privateProjectArticleFile(projectId, articleId, fileId);
        // TODO: test validations
    }

    /**
     * Project article list files
     *
     * List article files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectArticleFilesTest() throws ApiException {
        Long projectId = null;
        Long articleId = null;
        List<PrivateFile> response = api.privateProjectArticleFiles(projectId, articleId);
        // TODO: test validations
    }

    /**
     * Create project article
     *
     * Create a new Article and associate it with this project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectArticlesCreateTest() throws ApiException {
        Long projectId = null;
        ArticleProjectCreate articleProjectCreate = null;
        Long page = null;
        Long pageSize = null;
        Long limit = null;
        Long offset = null;
        LocationWarnings response = api.privateProjectArticlesCreate(projectId, articleProjectCreate, page, pageSize, limit, offset);
        // TODO: test validations
    }

    /**
     * List project articles
     *
     * List project articles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectArticlesListTest() throws ApiException {
        Long projectId = null;
        Long page = null;
        Long pageSize = null;
        Long limit = null;
        Long offset = null;
        List<Article> response = api.privateProjectArticlesList(projectId, page, pageSize, limit, offset);
        // TODO: test validations
    }

    /**
     * Remove project collaborator
     *
     * Remove project collaborator
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectCollaboratorDeleteTest() throws ApiException {
        Long projectId = null;
        Long userId = null;
        api.privateProjectCollaboratorDelete(projectId, userId);
        // TODO: test validations
    }

    /**
     * Invite project collaborators
     *
     * Invite users to collaborate on project or view the project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectCollaboratorsInviteTest() throws ApiException {
        Long projectId = null;
        ProjectCollaboratorInvite projectCollaboratorInvite = null;
        ResponseMessage response = api.privateProjectCollaboratorsInvite(projectId, projectCollaboratorInvite);
        // TODO: test validations
    }

    /**
     * List project collaborators
     *
     * List Project collaborators and invited users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectCollaboratorsListTest() throws ApiException {
        Long projectId = null;
        List<ProjectCollaborator> response = api.privateProjectCollaboratorsList(projectId);
        // TODO: test validations
    }

    /**
     * Create project
     *
     * Create a new project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectCreateTest() throws ApiException {
        ProjectCreate projectCreate = null;
        CreateProjectResponse response = api.privateProjectCreate(projectCreate);
        // TODO: test validations
    }

    /**
     * Delete project
     *
     * A project can be deleted only if: - it is not public - it does not have public articles.  When an individual project is deleted, all the articles are moved to my data of each owner.  When a group project is deleted, all the articles and files are deleted as well. Only project owner, group admin and above can delete a project. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectDeleteTest() throws ApiException {
        Long projectId = null;
        api.privateProjectDelete(projectId);
        // TODO: test validations
    }

    /**
     * View project details
     *
     * View a private project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectDetailsTest() throws ApiException {
        Long projectId = null;
        ProjectCompletePrivate response = api.privateProjectDetails(projectId);
        // TODO: test validations
    }

    /**
     * Private Project Leave
     *
     * Please note: project&#39;s owner cannot leave the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectLeaveTest() throws ApiException {
        Long projectId = null;
        api.privateProjectLeave(projectId);
        // TODO: test validations
    }

    /**
     * Project note details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectNoteTest() throws ApiException {
        Long projectId = null;
        Long noteId = null;
        ProjectNotePrivate response = api.privateProjectNote(projectId, noteId);
        // TODO: test validations
    }

    /**
     * Delete project note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectNoteDeleteTest() throws ApiException {
        Long projectId = null;
        Long noteId = null;
        api.privateProjectNoteDelete(projectId, noteId);
        // TODO: test validations
    }

    /**
     * Update project note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectNoteUpdateTest() throws ApiException {
        Long projectId = null;
        Long noteId = null;
        ProjectNoteCreate projectNoteCreate = null;
        api.privateProjectNoteUpdate(projectId, noteId, projectNoteCreate);
        // TODO: test validations
    }

    /**
     * Create project note
     *
     * Create a new project note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectNotesCreateTest() throws ApiException {
        Long projectId = null;
        ProjectNoteCreate projectNoteCreate = null;
        Location response = api.privateProjectNotesCreate(projectId, projectNoteCreate);
        // TODO: test validations
    }

    /**
     * List project notes
     *
     * List project notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectNotesListTest() throws ApiException {
        Long projectId = null;
        Long page = null;
        Long pageSize = null;
        Long limit = null;
        Long offset = null;
        List<ProjectNote> response = api.privateProjectNotesList(projectId, page, pageSize, limit, offset);
        // TODO: test validations
    }

    /**
     * Private Project Publish
     *
     * Publish a project. Possible after all items inside it are public
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectPublishTest() throws ApiException {
        Long projectId = null;
        ResponseMessage response = api.privateProjectPublish(projectId);
        // TODO: test validations
    }

    /**
     * Update project
     *
     * Updating an project by passing body parameters; request can also be made with the PATCH method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectUpdateTest() throws ApiException {
        Long projectId = null;
        ProjectUpdate projectUpdate = null;
        api.privateProjectUpdate(projectId, projectUpdate);
        // TODO: test validations
    }

    /**
     * Private Projects
     *
     * List private projects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectsListTest() throws ApiException {
        Long page = null;
        Long pageSize = null;
        Long limit = null;
        Long offset = null;
        String order = null;
        String orderDirection = null;
        String storage = null;
        String roles = null;
        List<ProjectPrivate> response = api.privateProjectsList(page, pageSize, limit, offset, order, orderDirection, storage, roles);
        // TODO: test validations
    }

    /**
     * Private Projects search
     *
     * Search inside the private projects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateProjectsSearchTest() throws ApiException {
        ProjectsSearch projectsSearch = null;
        List<ProjectPrivate> response = api.privateProjectsSearch(projectsSearch);
        // TODO: test validations
    }

    /**
     * Public Project Articles
     *
     * List articles in project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectArticlesTest() throws ApiException {
        Long projectId = null;
        List<Article> response = api.projectArticles(projectId);
        // TODO: test validations
    }

    /**
     * Public Project
     *
     * View a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectDetailsTest() throws ApiException {
        Long projectId = null;
        ProjectComplete response = api.projectDetails(projectId);
        // TODO: test validations
    }

    /**
     * Public Projects
     *
     * Returns a list of public projects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsListTest() throws ApiException {
        UUID xCursor = null;
        Long page = null;
        Long pageSize = null;
        Long limit = null;
        Long offset = null;
        String order = null;
        String orderDirection = null;
        Long institution = null;
        String publishedSince = null;
        Long group = null;
        List<Project> response = api.projectsList(xCursor, page, pageSize, limit, offset, order, orderDirection, institution, publishedSince, group);
        // TODO: test validations
    }

    /**
     * Public Projects Search
     *
     * Returns a list of public articles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsSearchTest() throws ApiException {
        UUID xCursor = null;
        ProjectsSearch projectsSearch = null;
        List<Project> response = api.projectsSearch(xCursor, projectsSearch);
        // TODO: test validations
    }

}
