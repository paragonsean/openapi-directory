/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomArticleFieldAdd;
import org.openapitools.client.model.FundingCreate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:45.951625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectUpdate {
  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS_LIST = "custom_fields_list";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS_LIST)
  private List<CustomArticleFieldAdd> customFieldsList = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FUNDING = "funding";
  @SerializedName(SERIALIZED_NAME_FUNDING)
  private String funding;

  public static final String SERIALIZED_NAME_FUNDING_LIST = "funding_list";
  @SerializedName(SERIALIZED_NAME_FUNDING_LIST)
  private List<FundingCreate> fundingList = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public ProjectUpdate() {
  }

  public ProjectUpdate customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * List of key, values pairs to be associated with the project
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public ProjectUpdate customFieldsList(List<CustomArticleFieldAdd> customFieldsList) {
    this.customFieldsList = customFieldsList;
    return this;
  }

  public ProjectUpdate addCustomFieldsListItem(CustomArticleFieldAdd customFieldsListItem) {
    if (this.customFieldsList == null) {
      this.customFieldsList = new ArrayList<>();
    }
    this.customFieldsList.add(customFieldsListItem);
    return this;
  }

  /**
   * List of custom fields values, supersedes custom_fields parameter
   * @return customFieldsList
   */
  @javax.annotation.Nullable
  public List<CustomArticleFieldAdd> getCustomFieldsList() {
    return customFieldsList;
  }

  public void setCustomFieldsList(List<CustomArticleFieldAdd> customFieldsList) {
    this.customFieldsList = customFieldsList;
  }


  public ProjectUpdate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Project description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProjectUpdate funding(String funding) {
    this.funding = funding;
    return this;
  }

  /**
   * Grant number or organization(s) that funded this project. Up to 2000 characters permitted.
   * @return funding
   */
  @javax.annotation.Nullable
  public String getFunding() {
    return funding;
  }

  public void setFunding(String funding) {
    this.funding = funding;
  }


  public ProjectUpdate fundingList(List<FundingCreate> fundingList) {
    this.fundingList = fundingList;
    return this;
  }

  public ProjectUpdate addFundingListItem(FundingCreate fundingListItem) {
    if (this.fundingList == null) {
      this.fundingList = new ArrayList<>();
    }
    this.fundingList.add(fundingListItem);
    return this;
  }

  /**
   * Funding creation / update items
   * @return fundingList
   */
  @javax.annotation.Nullable
  public List<FundingCreate> getFundingList() {
    return fundingList;
  }

  public void setFundingList(List<FundingCreate> fundingList) {
    this.fundingList = fundingList;
  }


  public ProjectUpdate title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title for this project - mandatory. 3 - 1000 characters.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectUpdate projectUpdate = (ProjectUpdate) o;
    return Objects.equals(this.customFields, projectUpdate.customFields) &&
        Objects.equals(this.customFieldsList, projectUpdate.customFieldsList) &&
        Objects.equals(this.description, projectUpdate.description) &&
        Objects.equals(this.funding, projectUpdate.funding) &&
        Objects.equals(this.fundingList, projectUpdate.fundingList) &&
        Objects.equals(this.title, projectUpdate.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customFields, customFieldsList, description, funding, fundingList, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectUpdate {\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    customFieldsList: ").append(toIndentedString(customFieldsList)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    funding: ").append(toIndentedString(funding)).append("\n");
    sb.append("    fundingList: ").append(toIndentedString(fundingList)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("custom_fields");
    openapiFields.add("custom_fields_list");
    openapiFields.add("description");
    openapiFields.add("funding");
    openapiFields.add("funding_list");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectUpdate is not found in the empty JSON string", ProjectUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("custom_fields_list") != null && !jsonObj.get("custom_fields_list").isJsonNull()) {
        JsonArray jsonArraycustomFieldsList = jsonObj.getAsJsonArray("custom_fields_list");
        if (jsonArraycustomFieldsList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_fields_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_fields_list` to be an array in the JSON string but got `%s`", jsonObj.get("custom_fields_list").toString()));
          }

          // validate the optional field `custom_fields_list` (array)
          for (int i = 0; i < jsonArraycustomFieldsList.size(); i++) {
            CustomArticleFieldAdd.validateJsonElement(jsonArraycustomFieldsList.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("funding") != null && !jsonObj.get("funding").isJsonNull()) && !jsonObj.get("funding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funding").toString()));
      }
      if (jsonObj.get("funding_list") != null && !jsonObj.get("funding_list").isJsonNull()) {
        JsonArray jsonArrayfundingList = jsonObj.getAsJsonArray("funding_list");
        if (jsonArrayfundingList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("funding_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `funding_list` to be an array in the JSON string but got `%s`", jsonObj.get("funding_list").toString()));
          }

          // validate the optional field `funding_list` (array)
          for (int i = 0; i < jsonArrayfundingList.size(); i++) {
            FundingCreate.validateJsonElement(jsonArrayfundingList.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectUpdate>() {
           @Override
           public void write(JsonWriter out, ProjectUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectUpdate
   * @throws IOException if the JSON string is invalid with respect to ProjectUpdate
   */
  public static ProjectUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectUpdate.class);
  }

  /**
   * Convert an instance of ProjectUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

