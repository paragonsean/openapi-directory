/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:45.951625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Account {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Long active;

  public static final String SERIALIZED_NAME_CREATED_DATE = "created_date";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Long groupId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_INSTITUTION_ID = "institution_id";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_ID)
  private Long institutionId;

  public static final String SERIALIZED_NAME_INSTITUTION_USER_ID = "institution_user_id";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_USER_ID)
  private String institutionUserId;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MAXIMUM_FILE_SIZE = "maximum_file_size";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_FILE_SIZE)
  private Long maximumFileSize;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modified_date";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private String modifiedDate;

  public static final String SERIALIZED_NAME_PENDING_QUOTA_REQUEST = "pending_quota_request";
  @SerializedName(SERIALIZED_NAME_PENDING_QUOTA_REQUEST)
  private Boolean pendingQuotaRequest;

  public static final String SERIALIZED_NAME_QUOTA = "quota";
  @SerializedName(SERIALIZED_NAME_QUOTA)
  private Long quota;

  public static final String SERIALIZED_NAME_USED_QUOTA = "used_quota";
  @SerializedName(SERIALIZED_NAME_USED_QUOTA)
  private Long usedQuota;

  public static final String SERIALIZED_NAME_USED_QUOTA_PRIVATE = "used_quota_private";
  @SerializedName(SERIALIZED_NAME_USED_QUOTA_PRIVATE)
  private Long usedQuotaPrivate;

  public static final String SERIALIZED_NAME_USED_QUOTA_PUBLIC = "used_quota_public";
  @SerializedName(SERIALIZED_NAME_USED_QUOTA_PUBLIC)
  private Long usedQuotaPublic;

  public Account() {
  }

  public Account active(Long active) {
    this.active = active;
    return this;
  }

  /**
   * Account activity status
   * @return active
   */
  @javax.annotation.Nonnull
  public Long getActive() {
    return active;
  }

  public void setActive(Long active) {
    this.active = active;
  }


  public Account createdDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Date when account was created
   * @return createdDate
   */
  @javax.annotation.Nonnull
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  public Account email(String email) {
    this.email = email;
    return this;
  }

  /**
   * User email
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Account firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First Name
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Account groupId(Long groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * Account group id
   * @return groupId
   */
  @javax.annotation.Nonnull
  public Long getGroupId() {
    return groupId;
  }

  public void setGroupId(Long groupId) {
    this.groupId = groupId;
  }


  public Account id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Account id
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Account institutionId(Long institutionId) {
    this.institutionId = institutionId;
    return this;
  }

  /**
   * Account institution
   * @return institutionId
   */
  @javax.annotation.Nonnull
  public Long getInstitutionId() {
    return institutionId;
  }

  public void setInstitutionId(Long institutionId) {
    this.institutionId = institutionId;
  }


  public Account institutionUserId(String institutionUserId) {
    this.institutionUserId = institutionUserId;
    return this;
  }

  /**
   * Account institution user id
   * @return institutionUserId
   */
  @javax.annotation.Nonnull
  public String getInstitutionUserId() {
    return institutionUserId;
  }

  public void setInstitutionUserId(String institutionUserId) {
    this.institutionUserId = institutionUserId;
  }


  public Account lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last Name
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Account maximumFileSize(Long maximumFileSize) {
    this.maximumFileSize = maximumFileSize;
    return this;
  }

  /**
   * Maximum upload size for account
   * @return maximumFileSize
   */
  @javax.annotation.Nonnull
  public Long getMaximumFileSize() {
    return maximumFileSize;
  }

  public void setMaximumFileSize(Long maximumFileSize) {
    this.maximumFileSize = maximumFileSize;
  }


  public Account modifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Date of last account modification
   * @return modifiedDate
   */
  @javax.annotation.Nonnull
  public String getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public Account pendingQuotaRequest(Boolean pendingQuotaRequest) {
    this.pendingQuotaRequest = pendingQuotaRequest;
    return this;
  }

  /**
   * True if a quota request is pending
   * @return pendingQuotaRequest
   */
  @javax.annotation.Nonnull
  public Boolean getPendingQuotaRequest() {
    return pendingQuotaRequest;
  }

  public void setPendingQuotaRequest(Boolean pendingQuotaRequest) {
    this.pendingQuotaRequest = pendingQuotaRequest;
  }


  public Account quota(Long quota) {
    this.quota = quota;
    return this;
  }

  /**
   * Account quota
   * @return quota
   */
  @javax.annotation.Nonnull
  public Long getQuota() {
    return quota;
  }

  public void setQuota(Long quota) {
    this.quota = quota;
  }


  public Account usedQuota(Long usedQuota) {
    this.usedQuota = usedQuota;
    return this;
  }

  /**
   * Account total used quota
   * @return usedQuota
   */
  @javax.annotation.Nonnull
  public Long getUsedQuota() {
    return usedQuota;
  }

  public void setUsedQuota(Long usedQuota) {
    this.usedQuota = usedQuota;
  }


  public Account usedQuotaPrivate(Long usedQuotaPrivate) {
    this.usedQuotaPrivate = usedQuotaPrivate;
    return this;
  }

  /**
   * Account used private quota
   * @return usedQuotaPrivate
   */
  @javax.annotation.Nonnull
  public Long getUsedQuotaPrivate() {
    return usedQuotaPrivate;
  }

  public void setUsedQuotaPrivate(Long usedQuotaPrivate) {
    this.usedQuotaPrivate = usedQuotaPrivate;
  }


  public Account usedQuotaPublic(Long usedQuotaPublic) {
    this.usedQuotaPublic = usedQuotaPublic;
    return this;
  }

  /**
   * Account public used quota
   * @return usedQuotaPublic
   */
  @javax.annotation.Nonnull
  public Long getUsedQuotaPublic() {
    return usedQuotaPublic;
  }

  public void setUsedQuotaPublic(Long usedQuotaPublic) {
    this.usedQuotaPublic = usedQuotaPublic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.active, account.active) &&
        Objects.equals(this.createdDate, account.createdDate) &&
        Objects.equals(this.email, account.email) &&
        Objects.equals(this.firstName, account.firstName) &&
        Objects.equals(this.groupId, account.groupId) &&
        Objects.equals(this.id, account.id) &&
        Objects.equals(this.institutionId, account.institutionId) &&
        Objects.equals(this.institutionUserId, account.institutionUserId) &&
        Objects.equals(this.lastName, account.lastName) &&
        Objects.equals(this.maximumFileSize, account.maximumFileSize) &&
        Objects.equals(this.modifiedDate, account.modifiedDate) &&
        Objects.equals(this.pendingQuotaRequest, account.pendingQuotaRequest) &&
        Objects.equals(this.quota, account.quota) &&
        Objects.equals(this.usedQuota, account.usedQuota) &&
        Objects.equals(this.usedQuotaPrivate, account.usedQuotaPrivate) &&
        Objects.equals(this.usedQuotaPublic, account.usedQuotaPublic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, createdDate, email, firstName, groupId, id, institutionId, institutionUserId, lastName, maximumFileSize, modifiedDate, pendingQuotaRequest, quota, usedQuota, usedQuotaPrivate, usedQuotaPublic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    institutionId: ").append(toIndentedString(institutionId)).append("\n");
    sb.append("    institutionUserId: ").append(toIndentedString(institutionUserId)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    maximumFileSize: ").append(toIndentedString(maximumFileSize)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    pendingQuotaRequest: ").append(toIndentedString(pendingQuotaRequest)).append("\n");
    sb.append("    quota: ").append(toIndentedString(quota)).append("\n");
    sb.append("    usedQuota: ").append(toIndentedString(usedQuota)).append("\n");
    sb.append("    usedQuotaPrivate: ").append(toIndentedString(usedQuotaPrivate)).append("\n");
    sb.append("    usedQuotaPublic: ").append(toIndentedString(usedQuotaPublic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("created_date");
    openapiFields.add("email");
    openapiFields.add("first_name");
    openapiFields.add("group_id");
    openapiFields.add("id");
    openapiFields.add("institution_id");
    openapiFields.add("institution_user_id");
    openapiFields.add("last_name");
    openapiFields.add("maximum_file_size");
    openapiFields.add("modified_date");
    openapiFields.add("pending_quota_request");
    openapiFields.add("quota");
    openapiFields.add("used_quota");
    openapiFields.add("used_quota_private");
    openapiFields.add("used_quota_public");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("active");
    openapiRequiredFields.add("created_date");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("first_name");
    openapiRequiredFields.add("group_id");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("institution_id");
    openapiRequiredFields.add("institution_user_id");
    openapiRequiredFields.add("last_name");
    openapiRequiredFields.add("maximum_file_size");
    openapiRequiredFields.add("modified_date");
    openapiRequiredFields.add("pending_quota_request");
    openapiRequiredFields.add("quota");
    openapiRequiredFields.add("used_quota");
    openapiRequiredFields.add("used_quota_private");
    openapiRequiredFields.add("used_quota_public");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Account.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("created_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_date").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if (!jsonObj.get("institution_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `institution_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("institution_user_id").toString()));
      }
      if (!jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if (!jsonObj.get("modified_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

