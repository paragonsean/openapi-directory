/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.Timeline;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ArticleWithProject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:45.951625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArticleWithProject {
  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Long projectId = 0l;

  public static final String SERIALIZED_NAME_DEFINED_TYPE = "defined_type";
  @SerializedName(SERIALIZED_NAME_DEFINED_TYPE)
  private Long definedType;

  public static final String SERIALIZED_NAME_DEFINED_TYPE_NAME = "defined_type_name";
  @SerializedName(SERIALIZED_NAME_DEFINED_TYPE_NAME)
  private String definedTypeName;

  public static final String SERIALIZED_NAME_DOI = "doi";
  @SerializedName(SERIALIZED_NAME_DOI)
  private String doi;

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private BigDecimal groupId;

  public static final String SERIALIZED_NAME_HANDLE = "handle";
  @SerializedName(SERIALIZED_NAME_HANDLE)
  private String handle;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_PUBLISHED_DATE = "published_date";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_DATE)
  private String publishedDate;

  public static final String SERIALIZED_NAME_THUMB = "thumb";
  @SerializedName(SERIALIZED_NAME_THUMB)
  private String thumb;

  public static final String SERIALIZED_NAME_TIMELINE = "timeline";
  @SerializedName(SERIALIZED_NAME_TIMELINE)
  private Timeline timeline;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_URL_PRIVATE_API = "url_private_api";
  @SerializedName(SERIALIZED_NAME_URL_PRIVATE_API)
  private String urlPrivateApi;

  public static final String SERIALIZED_NAME_URL_PRIVATE_HTML = "url_private_html";
  @SerializedName(SERIALIZED_NAME_URL_PRIVATE_HTML)
  private String urlPrivateHtml;

  public static final String SERIALIZED_NAME_URL_PUBLIC_API = "url_public_api";
  @SerializedName(SERIALIZED_NAME_URL_PUBLIC_API)
  private String urlPublicApi;

  public static final String SERIALIZED_NAME_URL_PUBLIC_HTML = "url_public_html";
  @SerializedName(SERIALIZED_NAME_URL_PUBLIC_HTML)
  private String urlPublicHtml;

  public ArticleWithProject() {
  }

  public ArticleWithProject projectId(Long projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Project id for this article.
   * @return projectId
   */
  @javax.annotation.Nonnull
  public Long getProjectId() {
    return projectId;
  }

  public void setProjectId(Long projectId) {
    this.projectId = projectId;
  }


  public ArticleWithProject definedType(Long definedType) {
    this.definedType = definedType;
    return this;
  }

  /**
   * Type of article identifier
   * @return definedType
   */
  @javax.annotation.Nonnull
  public Long getDefinedType() {
    return definedType;
  }

  public void setDefinedType(Long definedType) {
    this.definedType = definedType;
  }


  public ArticleWithProject definedTypeName(String definedTypeName) {
    this.definedTypeName = definedTypeName;
    return this;
  }

  /**
   * Name of the article type identifier
   * @return definedTypeName
   */
  @javax.annotation.Nonnull
  public String getDefinedTypeName() {
    return definedTypeName;
  }

  public void setDefinedTypeName(String definedTypeName) {
    this.definedTypeName = definedTypeName;
  }


  public ArticleWithProject doi(String doi) {
    this.doi = doi;
    return this;
  }

  /**
   * DOI
   * @return doi
   */
  @javax.annotation.Nonnull
  public String getDoi() {
    return doi;
  }

  public void setDoi(String doi) {
    this.doi = doi;
  }


  public ArticleWithProject groupId(BigDecimal groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * Group ID
   * @return groupId
   */
  @javax.annotation.Nullable
  public BigDecimal getGroupId() {
    return groupId;
  }

  public void setGroupId(BigDecimal groupId) {
    this.groupId = groupId;
  }


  public ArticleWithProject handle(String handle) {
    this.handle = handle;
    return this;
  }

  /**
   * Handle
   * @return handle
   */
  @javax.annotation.Nonnull
  public String getHandle() {
    return handle;
  }

  public void setHandle(String handle) {
    this.handle = handle;
  }


  public ArticleWithProject id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for article
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public ArticleWithProject publishedDate(String publishedDate) {
    this.publishedDate = publishedDate;
    return this;
  }

  /**
   * Posted date
   * @return publishedDate
   */
  @javax.annotation.Nullable
  public String getPublishedDate() {
    return publishedDate;
  }

  public void setPublishedDate(String publishedDate) {
    this.publishedDate = publishedDate;
  }


  public ArticleWithProject thumb(String thumb) {
    this.thumb = thumb;
    return this;
  }

  /**
   * Thumbnail image
   * @return thumb
   */
  @javax.annotation.Nonnull
  public String getThumb() {
    return thumb;
  }

  public void setThumb(String thumb) {
    this.thumb = thumb;
  }


  public ArticleWithProject timeline(Timeline timeline) {
    this.timeline = timeline;
    return this;
  }

  /**
   * Get timeline
   * @return timeline
   */
  @javax.annotation.Nonnull
  public Timeline getTimeline() {
    return timeline;
  }

  public void setTimeline(Timeline timeline) {
    this.timeline = timeline;
  }


  public ArticleWithProject title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of article
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ArticleWithProject url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Api endpoint for article
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public ArticleWithProject urlPrivateApi(String urlPrivateApi) {
    this.urlPrivateApi = urlPrivateApi;
    return this;
  }

  /**
   * Private Api endpoint for article
   * @return urlPrivateApi
   */
  @javax.annotation.Nonnull
  public String getUrlPrivateApi() {
    return urlPrivateApi;
  }

  public void setUrlPrivateApi(String urlPrivateApi) {
    this.urlPrivateApi = urlPrivateApi;
  }


  public ArticleWithProject urlPrivateHtml(String urlPrivateHtml) {
    this.urlPrivateHtml = urlPrivateHtml;
    return this;
  }

  /**
   * Private site endpoint for article
   * @return urlPrivateHtml
   */
  @javax.annotation.Nonnull
  public String getUrlPrivateHtml() {
    return urlPrivateHtml;
  }

  public void setUrlPrivateHtml(String urlPrivateHtml) {
    this.urlPrivateHtml = urlPrivateHtml;
  }


  public ArticleWithProject urlPublicApi(String urlPublicApi) {
    this.urlPublicApi = urlPublicApi;
    return this;
  }

  /**
   * Public Api endpoint for article
   * @return urlPublicApi
   */
  @javax.annotation.Nonnull
  public String getUrlPublicApi() {
    return urlPublicApi;
  }

  public void setUrlPublicApi(String urlPublicApi) {
    this.urlPublicApi = urlPublicApi;
  }


  public ArticleWithProject urlPublicHtml(String urlPublicHtml) {
    this.urlPublicHtml = urlPublicHtml;
    return this;
  }

  /**
   * Public site endpoint for article
   * @return urlPublicHtml
   */
  @javax.annotation.Nonnull
  public String getUrlPublicHtml() {
    return urlPublicHtml;
  }

  public void setUrlPublicHtml(String urlPublicHtml) {
    this.urlPublicHtml = urlPublicHtml;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArticleWithProject articleWithProject = (ArticleWithProject) o;
    return Objects.equals(this.projectId, articleWithProject.projectId) &&
        Objects.equals(this.definedType, articleWithProject.definedType) &&
        Objects.equals(this.definedTypeName, articleWithProject.definedTypeName) &&
        Objects.equals(this.doi, articleWithProject.doi) &&
        Objects.equals(this.groupId, articleWithProject.groupId) &&
        Objects.equals(this.handle, articleWithProject.handle) &&
        Objects.equals(this.id, articleWithProject.id) &&
        Objects.equals(this.publishedDate, articleWithProject.publishedDate) &&
        Objects.equals(this.thumb, articleWithProject.thumb) &&
        Objects.equals(this.timeline, articleWithProject.timeline) &&
        Objects.equals(this.title, articleWithProject.title) &&
        Objects.equals(this.url, articleWithProject.url) &&
        Objects.equals(this.urlPrivateApi, articleWithProject.urlPrivateApi) &&
        Objects.equals(this.urlPrivateHtml, articleWithProject.urlPrivateHtml) &&
        Objects.equals(this.urlPublicApi, articleWithProject.urlPublicApi) &&
        Objects.equals(this.urlPublicHtml, articleWithProject.urlPublicHtml);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectId, definedType, definedTypeName, doi, groupId, handle, id, publishedDate, thumb, timeline, title, url, urlPrivateApi, urlPrivateHtml, urlPublicApi, urlPublicHtml);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArticleWithProject {\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    definedType: ").append(toIndentedString(definedType)).append("\n");
    sb.append("    definedTypeName: ").append(toIndentedString(definedTypeName)).append("\n");
    sb.append("    doi: ").append(toIndentedString(doi)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    handle: ").append(toIndentedString(handle)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    publishedDate: ").append(toIndentedString(publishedDate)).append("\n");
    sb.append("    thumb: ").append(toIndentedString(thumb)).append("\n");
    sb.append("    timeline: ").append(toIndentedString(timeline)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlPrivateApi: ").append(toIndentedString(urlPrivateApi)).append("\n");
    sb.append("    urlPrivateHtml: ").append(toIndentedString(urlPrivateHtml)).append("\n");
    sb.append("    urlPublicApi: ").append(toIndentedString(urlPublicApi)).append("\n");
    sb.append("    urlPublicHtml: ").append(toIndentedString(urlPublicHtml)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defined_type");
    openapiFields.add("defined_type_name");
    openapiFields.add("doi");
    openapiFields.add("group_id");
    openapiFields.add("handle");
    openapiFields.add("id");
    openapiFields.add("published_date");
    openapiFields.add("thumb");
    openapiFields.add("timeline");
    openapiFields.add("title");
    openapiFields.add("url");
    openapiFields.add("url_private_api");
    openapiFields.add("url_private_html");
    openapiFields.add("url_public_api");
    openapiFields.add("url_public_html");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("project_id");
    openapiRequiredFields.add("defined_type");
    openapiRequiredFields.add("defined_type_name");
    openapiRequiredFields.add("doi");
    openapiRequiredFields.add("group_id");
    openapiRequiredFields.add("handle");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("published_date");
    openapiRequiredFields.add("thumb");
    openapiRequiredFields.add("timeline");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("url_private_api");
    openapiRequiredFields.add("url_private_html");
    openapiRequiredFields.add("url_public_api");
    openapiRequiredFields.add("url_public_html");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArticleWithProject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArticleWithProject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArticleWithProject is not found in the empty JSON string", ArticleWithProject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArticleWithProject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArticleWithProject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ArticleWithProject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("defined_type_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defined_type_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defined_type_name").toString()));
      }
      if (!jsonObj.get("doi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doi").toString()));
      }
      if (!jsonObj.get("handle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handle").toString()));
      }
      if ((jsonObj.get("published_date") != null && !jsonObj.get("published_date").isJsonNull()) && !jsonObj.get("published_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published_date").toString()));
      }
      if (!jsonObj.get("thumb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumb").toString()));
      }
      // validate the required field `timeline`
      Timeline.validateJsonElement(jsonObj.get("timeline"));
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("url_private_api").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_private_api` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_private_api").toString()));
      }
      if (!jsonObj.get("url_private_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_private_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_private_html").toString()));
      }
      if (!jsonObj.get("url_public_api").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_public_api` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_public_api").toString()));
      }
      if (!jsonObj.get("url_public_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_public_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_public_html").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArticleWithProject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArticleWithProject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArticleWithProject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArticleWithProject.class));

       return (TypeAdapter<T>) new TypeAdapter<ArticleWithProject>() {
           @Override
           public void write(JsonWriter out, ArticleWithProject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArticleWithProject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArticleWithProject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArticleWithProject
   * @throws IOException if the JSON string is invalid with respect to ArticleWithProject
   */
  public static ArticleWithProject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArticleWithProject.class);
  }

  /**
   * Convert an instance of ArticleWithProject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

