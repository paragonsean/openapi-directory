/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Timeline
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:45.951625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Timeline {
  public static final String SERIALIZED_NAME_POSTED = "posted";
  @SerializedName(SERIALIZED_NAME_POSTED)
  private String posted;

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private String revision;

  public static final String SERIALIZED_NAME_SUBMISSION = "submission";
  @SerializedName(SERIALIZED_NAME_SUBMISSION)
  private String submission;

  public static final String SERIALIZED_NAME_FIRST_ONLINE = "firstOnline";
  @SerializedName(SERIALIZED_NAME_FIRST_ONLINE)
  private String firstOnline;

  public static final String SERIALIZED_NAME_PUBLISHER_ACCEPTANCE = "publisherAcceptance";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_ACCEPTANCE)
  private String publisherAcceptance;

  public static final String SERIALIZED_NAME_PUBLISHER_PUBLICATION = "publisherPublication";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_PUBLICATION)
  private String publisherPublication;

  public Timeline() {
  }

  public Timeline posted(String posted) {
    this.posted = posted;
    return this;
  }

  /**
   * Posted date
   * @return posted
   */
  @javax.annotation.Nullable
  public String getPosted() {
    return posted;
  }

  public void setPosted(String posted) {
    this.posted = posted;
  }


  public Timeline revision(String revision) {
    this.revision = revision;
    return this;
  }

  /**
   * Revision date from curation (if curated)
   * @return revision
   */
  @javax.annotation.Nullable
  public String getRevision() {
    return revision;
  }

  public void setRevision(String revision) {
    this.revision = revision;
  }


  public Timeline submission(String submission) {
    this.submission = submission;
    return this;
  }

  /**
   * Submission date in curation (if curated)
   * @return submission
   */
  @javax.annotation.Nullable
  public String getSubmission() {
    return submission;
  }

  public void setSubmission(String submission) {
    this.submission = submission;
  }


  public Timeline firstOnline(String firstOnline) {
    this.firstOnline = firstOnline;
    return this;
  }

  /**
   * Online posted date
   * @return firstOnline
   */
  @javax.annotation.Nonnull
  public String getFirstOnline() {
    return firstOnline;
  }

  public void setFirstOnline(String firstOnline) {
    this.firstOnline = firstOnline;
  }


  public Timeline publisherAcceptance(String publisherAcceptance) {
    this.publisherAcceptance = publisherAcceptance;
    return this;
  }

  /**
   * Date when the item was accepted for publication
   * @return publisherAcceptance
   */
  @javax.annotation.Nonnull
  public String getPublisherAcceptance() {
    return publisherAcceptance;
  }

  public void setPublisherAcceptance(String publisherAcceptance) {
    this.publisherAcceptance = publisherAcceptance;
  }


  public Timeline publisherPublication(String publisherPublication) {
    this.publisherPublication = publisherPublication;
    return this;
  }

  /**
   * Publish date
   * @return publisherPublication
   */
  @javax.annotation.Nonnull
  public String getPublisherPublication() {
    return publisherPublication;
  }

  public void setPublisherPublication(String publisherPublication) {
    this.publisherPublication = publisherPublication;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Timeline timeline = (Timeline) o;
    return Objects.equals(this.posted, timeline.posted) &&
        Objects.equals(this.revision, timeline.revision) &&
        Objects.equals(this.submission, timeline.submission) &&
        Objects.equals(this.firstOnline, timeline.firstOnline) &&
        Objects.equals(this.publisherAcceptance, timeline.publisherAcceptance) &&
        Objects.equals(this.publisherPublication, timeline.publisherPublication);
  }

  @Override
  public int hashCode() {
    return Objects.hash(posted, revision, submission, firstOnline, publisherAcceptance, publisherPublication);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Timeline {\n");
    sb.append("    posted: ").append(toIndentedString(posted)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    submission: ").append(toIndentedString(submission)).append("\n");
    sb.append("    firstOnline: ").append(toIndentedString(firstOnline)).append("\n");
    sb.append("    publisherAcceptance: ").append(toIndentedString(publisherAcceptance)).append("\n");
    sb.append("    publisherPublication: ").append(toIndentedString(publisherPublication)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstOnline");
    openapiFields.add("publisherAcceptance");
    openapiFields.add("publisherPublication");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("posted");
    openapiRequiredFields.add("revision");
    openapiRequiredFields.add("submission");
    openapiRequiredFields.add("firstOnline");
    openapiRequiredFields.add("publisherAcceptance");
    openapiRequiredFields.add("publisherPublication");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Timeline
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Timeline.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Timeline is not found in the empty JSON string", Timeline.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Timeline.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Timeline` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Timeline.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("posted") != null && !jsonObj.get("posted").isJsonNull()) && !jsonObj.get("posted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `posted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("posted").toString()));
      }
      if ((jsonObj.get("revision") != null && !jsonObj.get("revision").isJsonNull()) && !jsonObj.get("revision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revision").toString()));
      }
      if ((jsonObj.get("submission") != null && !jsonObj.get("submission").isJsonNull()) && !jsonObj.get("submission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submission").toString()));
      }
      if (!jsonObj.get("firstOnline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstOnline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstOnline").toString()));
      }
      if (!jsonObj.get("publisherAcceptance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherAcceptance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherAcceptance").toString()));
      }
      if (!jsonObj.get("publisherPublication").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherPublication` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherPublication").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Timeline.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Timeline' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Timeline> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Timeline.class));

       return (TypeAdapter<T>) new TypeAdapter<Timeline>() {
           @Override
           public void write(JsonWriter out, Timeline value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Timeline read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Timeline given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Timeline
   * @throws IOException if the JSON string is invalid with respect to Timeline
   */
  public static Timeline fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Timeline.class);
  }

  /**
   * Convert an instance of Timeline to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

