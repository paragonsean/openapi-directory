/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ArticleEmbargoUpdater
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:45.951625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArticleEmbargoUpdater {
  public static final String SERIALIZED_NAME_EMBARGO_DATE = "embargo_date";
  @SerializedName(SERIALIZED_NAME_EMBARGO_DATE)
  private String embargoDate;

  public static final String SERIALIZED_NAME_EMBARGO_OPTIONS = "embargo_options";
  @SerializedName(SERIALIZED_NAME_EMBARGO_OPTIONS)
  private List<Object> embargoOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMBARGO_REASON = "embargo_reason";
  @SerializedName(SERIALIZED_NAME_EMBARGO_REASON)
  private String embargoReason;

  public static final String SERIALIZED_NAME_EMBARGO_TITLE = "embargo_title";
  @SerializedName(SERIALIZED_NAME_EMBARGO_TITLE)
  private String embargoTitle;

  /**
   * Embargo can be enabled at the article or the file level. Possible values: article, file
   */
  @JsonAdapter(EmbargoTypeEnum.Adapter.class)
  public enum EmbargoTypeEnum {
    ARTICLE("article"),
    
    FILE("file");

    private String value;

    EmbargoTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmbargoTypeEnum fromValue(String value) {
      for (EmbargoTypeEnum b : EmbargoTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmbargoTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmbargoTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmbargoTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmbargoTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EmbargoTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EMBARGO_TYPE = "embargo_type";
  @SerializedName(SERIALIZED_NAME_EMBARGO_TYPE)
  private EmbargoTypeEnum embargoType;

  public static final String SERIALIZED_NAME_IS_EMBARGOED = "is_embargoed";
  @SerializedName(SERIALIZED_NAME_IS_EMBARGOED)
  private Boolean isEmbargoed;

  public ArticleEmbargoUpdater() {
  }

  public ArticleEmbargoUpdater embargoDate(String embargoDate) {
    this.embargoDate = embargoDate;
    return this;
  }

  /**
   * Date when the embargo expires and the article gets published, &#39;0&#39; value will set up permanent embargo
   * @return embargoDate
   */
  @javax.annotation.Nonnull
  public String getEmbargoDate() {
    return embargoDate;
  }

  public void setEmbargoDate(String embargoDate) {
    this.embargoDate = embargoDate;
  }


  public ArticleEmbargoUpdater embargoOptions(List<Object> embargoOptions) {
    this.embargoOptions = embargoOptions;
    return this;
  }

  public ArticleEmbargoUpdater addEmbargoOptionsItem(Object embargoOptionsItem) {
    if (this.embargoOptions == null) {
      this.embargoOptions = new ArrayList<>();
    }
    this.embargoOptions.add(embargoOptionsItem);
    return this;
  }

  /**
   * List of embargo permissions to be associated with the article. The list must contain &#x60;id&#x60; and can also contain &#x60;group_ids&#x60;(a field that only applies to &#39;logged_in&#39; permissions). The new list replaces old options in the database, and an empty list removes all permissions for this article. Administration permission has to be set up alone but logged in and IP range permissions can be set up together.
   * @return embargoOptions
   */
  @javax.annotation.Nullable
  public List<Object> getEmbargoOptions() {
    return embargoOptions;
  }

  public void setEmbargoOptions(List<Object> embargoOptions) {
    this.embargoOptions = embargoOptions;
  }


  public ArticleEmbargoUpdater embargoReason(String embargoReason) {
    this.embargoReason = embargoReason;
    return this;
  }

  /**
   * Reason for setting embargo
   * @return embargoReason
   */
  @javax.annotation.Nullable
  public String getEmbargoReason() {
    return embargoReason;
  }

  public void setEmbargoReason(String embargoReason) {
    this.embargoReason = embargoReason;
  }


  public ArticleEmbargoUpdater embargoTitle(String embargoTitle) {
    this.embargoTitle = embargoTitle;
    return this;
  }

  /**
   * Title for embargo
   * @return embargoTitle
   */
  @javax.annotation.Nullable
  public String getEmbargoTitle() {
    return embargoTitle;
  }

  public void setEmbargoTitle(String embargoTitle) {
    this.embargoTitle = embargoTitle;
  }


  public ArticleEmbargoUpdater embargoType(EmbargoTypeEnum embargoType) {
    this.embargoType = embargoType;
    return this;
  }

  /**
   * Embargo can be enabled at the article or the file level. Possible values: article, file
   * @return embargoType
   */
  @javax.annotation.Nonnull
  public EmbargoTypeEnum getEmbargoType() {
    return embargoType;
  }

  public void setEmbargoType(EmbargoTypeEnum embargoType) {
    this.embargoType = embargoType;
  }


  public ArticleEmbargoUpdater isEmbargoed(Boolean isEmbargoed) {
    this.isEmbargoed = isEmbargoed;
    return this;
  }

  /**
   * Embargo status
   * @return isEmbargoed
   */
  @javax.annotation.Nonnull
  public Boolean getIsEmbargoed() {
    return isEmbargoed;
  }

  public void setIsEmbargoed(Boolean isEmbargoed) {
    this.isEmbargoed = isEmbargoed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArticleEmbargoUpdater articleEmbargoUpdater = (ArticleEmbargoUpdater) o;
    return Objects.equals(this.embargoDate, articleEmbargoUpdater.embargoDate) &&
        Objects.equals(this.embargoOptions, articleEmbargoUpdater.embargoOptions) &&
        Objects.equals(this.embargoReason, articleEmbargoUpdater.embargoReason) &&
        Objects.equals(this.embargoTitle, articleEmbargoUpdater.embargoTitle) &&
        Objects.equals(this.embargoType, articleEmbargoUpdater.embargoType) &&
        Objects.equals(this.isEmbargoed, articleEmbargoUpdater.isEmbargoed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(embargoDate, embargoOptions, embargoReason, embargoTitle, embargoType, isEmbargoed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArticleEmbargoUpdater {\n");
    sb.append("    embargoDate: ").append(toIndentedString(embargoDate)).append("\n");
    sb.append("    embargoOptions: ").append(toIndentedString(embargoOptions)).append("\n");
    sb.append("    embargoReason: ").append(toIndentedString(embargoReason)).append("\n");
    sb.append("    embargoTitle: ").append(toIndentedString(embargoTitle)).append("\n");
    sb.append("    embargoType: ").append(toIndentedString(embargoType)).append("\n");
    sb.append("    isEmbargoed: ").append(toIndentedString(isEmbargoed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("embargo_date");
    openapiFields.add("embargo_options");
    openapiFields.add("embargo_reason");
    openapiFields.add("embargo_title");
    openapiFields.add("embargo_type");
    openapiFields.add("is_embargoed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("embargo_date");
    openapiRequiredFields.add("embargo_type");
    openapiRequiredFields.add("is_embargoed");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArticleEmbargoUpdater
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArticleEmbargoUpdater.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArticleEmbargoUpdater is not found in the empty JSON string", ArticleEmbargoUpdater.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArticleEmbargoUpdater.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArticleEmbargoUpdater` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ArticleEmbargoUpdater.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("embargo_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embargo_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embargo_date").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("embargo_options") != null && !jsonObj.get("embargo_options").isJsonNull() && !jsonObj.get("embargo_options").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `embargo_options` to be an array in the JSON string but got `%s`", jsonObj.get("embargo_options").toString()));
      }
      if ((jsonObj.get("embargo_reason") != null && !jsonObj.get("embargo_reason").isJsonNull()) && !jsonObj.get("embargo_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embargo_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embargo_reason").toString()));
      }
      if ((jsonObj.get("embargo_title") != null && !jsonObj.get("embargo_title").isJsonNull()) && !jsonObj.get("embargo_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embargo_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embargo_title").toString()));
      }
      if (!jsonObj.get("embargo_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embargo_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embargo_type").toString()));
      }
      // validate the required field `embargo_type`
      EmbargoTypeEnum.validateJsonElement(jsonObj.get("embargo_type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArticleEmbargoUpdater.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArticleEmbargoUpdater' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArticleEmbargoUpdater> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArticleEmbargoUpdater.class));

       return (TypeAdapter<T>) new TypeAdapter<ArticleEmbargoUpdater>() {
           @Override
           public void write(JsonWriter out, ArticleEmbargoUpdater value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArticleEmbargoUpdater read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArticleEmbargoUpdater given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArticleEmbargoUpdater
   * @throws IOException if the JSON string is invalid with respect to ArticleEmbargoUpdater
   */
  public static ArticleEmbargoUpdater fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArticleEmbargoUpdater.class);
  }

  /**
   * Convert an instance of ArticleEmbargoUpdater to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

