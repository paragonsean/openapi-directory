/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Collaborator;
import org.openapitools.client.model.CustomArticleField;
import org.openapitools.client.model.FundingInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectCompletePrivate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:45.951625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectCompletePrivate {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Long accountId;

  public static final String SERIALIZED_NAME_COLLABORATORS = "collaborators";
  @SerializedName(SERIALIZED_NAME_COLLABORATORS)
  private List<Collaborator> collaborators = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_DATE = "created_date";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<CustomArticleField> customFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FIGSHARE_URL = "figshare_url";
  @SerializedName(SERIALIZED_NAME_FIGSHARE_URL)
  private String figshareUrl;

  public static final String SERIALIZED_NAME_FUNDING = "funding";
  @SerializedName(SERIALIZED_NAME_FUNDING)
  private String funding;

  public static final String SERIALIZED_NAME_FUNDING_LIST = "funding_list";
  @SerializedName(SERIALIZED_NAME_FUNDING_LIST)
  private List<FundingInformation> fundingList = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Long groupId;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modified_date";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private String modifiedDate;

  public static final String SERIALIZED_NAME_QUOTA = "quota";
  @SerializedName(SERIALIZED_NAME_QUOTA)
  private Long quota;

  public static final String SERIALIZED_NAME_USED_QUOTA = "used_quota";
  @SerializedName(SERIALIZED_NAME_USED_QUOTA)
  private Long usedQuota;

  public static final String SERIALIZED_NAME_USED_QUOTA_PRIVATE = "used_quota_private";
  @SerializedName(SERIALIZED_NAME_USED_QUOTA_PRIVATE)
  private Long usedQuotaPrivate;

  public static final String SERIALIZED_NAME_USED_QUOTA_PUBLIC = "used_quota_public";
  @SerializedName(SERIALIZED_NAME_USED_QUOTA_PUBLIC)
  private Long usedQuotaPublic;

  /**
   * Role inside this project
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    OWNER("Owner"),
    
    COLLABORATOR("Collaborator"),
    
    VIEWER("Viewer");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  /**
   * Project storage type
   */
  @JsonAdapter(StorageEnum.Adapter.class)
  public enum StorageEnum {
    INDIVIDUAL("individual"),
    
    GROUP("group");

    private String value;

    StorageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StorageEnum fromValue(String value) {
      for (StorageEnum b : StorageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StorageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StorageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StorageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StorageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STORAGE = "storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private StorageEnum storage;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_PUBLISHED_DATE = "published_date";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_DATE)
  private String publishedDate;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ProjectCompletePrivate() {
  }

  public ProjectCompletePrivate accountId(Long accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * ID of the account owning the project
   * @return accountId
   */
  @javax.annotation.Nonnull
  public Long getAccountId() {
    return accountId;
  }

  public void setAccountId(Long accountId) {
    this.accountId = accountId;
  }


  public ProjectCompletePrivate collaborators(List<Collaborator> collaborators) {
    this.collaborators = collaborators;
    return this;
  }

  public ProjectCompletePrivate addCollaboratorsItem(Collaborator collaboratorsItem) {
    if (this.collaborators == null) {
      this.collaborators = new ArrayList<>();
    }
    this.collaborators.add(collaboratorsItem);
    return this;
  }

  /**
   * List of project collaborators
   * @return collaborators
   */
  @javax.annotation.Nonnull
  public List<Collaborator> getCollaborators() {
    return collaborators;
  }

  public void setCollaborators(List<Collaborator> collaborators) {
    this.collaborators = collaborators;
  }


  public ProjectCompletePrivate createdDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Date when project was created
   * @return createdDate
   */
  @javax.annotation.Nonnull
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  public ProjectCompletePrivate customFields(List<CustomArticleField> customFields) {
    this.customFields = customFields;
    return this;
  }

  public ProjectCompletePrivate addCustomFieldsItem(CustomArticleField customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

  /**
   * Collection custom fields
   * @return customFields
   */
  @javax.annotation.Nonnull
  public List<CustomArticleField> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(List<CustomArticleField> customFields) {
    this.customFields = customFields;
  }


  public ProjectCompletePrivate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Project description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProjectCompletePrivate figshareUrl(String figshareUrl) {
    this.figshareUrl = figshareUrl;
    return this;
  }

  /**
   * Project public url
   * @return figshareUrl
   */
  @javax.annotation.Nullable
  public String getFigshareUrl() {
    return figshareUrl;
  }

  public void setFigshareUrl(String figshareUrl) {
    this.figshareUrl = figshareUrl;
  }


  public ProjectCompletePrivate funding(String funding) {
    this.funding = funding;
    return this;
  }

  /**
   * Project funding
   * @return funding
   */
  @javax.annotation.Nonnull
  public String getFunding() {
    return funding;
  }

  public void setFunding(String funding) {
    this.funding = funding;
  }


  public ProjectCompletePrivate fundingList(List<FundingInformation> fundingList) {
    this.fundingList = fundingList;
    return this;
  }

  public ProjectCompletePrivate addFundingListItem(FundingInformation fundingListItem) {
    if (this.fundingList == null) {
      this.fundingList = new ArrayList<>();
    }
    this.fundingList.add(fundingListItem);
    return this;
  }

  /**
   * Full Project funding information
   * @return fundingList
   */
  @javax.annotation.Nonnull
  public List<FundingInformation> getFundingList() {
    return fundingList;
  }

  public void setFundingList(List<FundingInformation> fundingList) {
    this.fundingList = fundingList;
  }


  public ProjectCompletePrivate groupId(Long groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * Group of project if any
   * @return groupId
   */
  @javax.annotation.Nonnull
  public Long getGroupId() {
    return groupId;
  }

  public void setGroupId(Long groupId) {
    this.groupId = groupId;
  }


  public ProjectCompletePrivate modifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Date when project was last modified
   * @return modifiedDate
   */
  @javax.annotation.Nonnull
  public String getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public ProjectCompletePrivate quota(Long quota) {
    this.quota = quota;
    return this;
  }

  /**
   * Project quota
   * @return quota
   */
  @javax.annotation.Nonnull
  public Long getQuota() {
    return quota;
  }

  public void setQuota(Long quota) {
    this.quota = quota;
  }


  public ProjectCompletePrivate usedQuota(Long usedQuota) {
    this.usedQuota = usedQuota;
    return this;
  }

  /**
   * Project used quota
   * @return usedQuota
   */
  @javax.annotation.Nonnull
  public Long getUsedQuota() {
    return usedQuota;
  }

  public void setUsedQuota(Long usedQuota) {
    this.usedQuota = usedQuota;
  }


  public ProjectCompletePrivate usedQuotaPrivate(Long usedQuotaPrivate) {
    this.usedQuotaPrivate = usedQuotaPrivate;
    return this;
  }

  /**
   * Project private quota used
   * @return usedQuotaPrivate
   */
  @javax.annotation.Nonnull
  public Long getUsedQuotaPrivate() {
    return usedQuotaPrivate;
  }

  public void setUsedQuotaPrivate(Long usedQuotaPrivate) {
    this.usedQuotaPrivate = usedQuotaPrivate;
  }


  public ProjectCompletePrivate usedQuotaPublic(Long usedQuotaPublic) {
    this.usedQuotaPublic = usedQuotaPublic;
    return this;
  }

  /**
   * Project public quota used
   * @return usedQuotaPublic
   */
  @javax.annotation.Nonnull
  public Long getUsedQuotaPublic() {
    return usedQuotaPublic;
  }

  public void setUsedQuotaPublic(Long usedQuotaPublic) {
    this.usedQuotaPublic = usedQuotaPublic;
  }


  public ProjectCompletePrivate role(RoleEnum role) {
    this.role = role;
    return this;
  }

  /**
   * Role inside this project
   * @return role
   */
  @javax.annotation.Nonnull
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }


  public ProjectCompletePrivate storage(StorageEnum storage) {
    this.storage = storage;
    return this;
  }

  /**
   * Project storage type
   * @return storage
   */
  @javax.annotation.Nonnull
  public StorageEnum getStorage() {
    return storage;
  }

  public void setStorage(StorageEnum storage) {
    this.storage = storage;
  }


  public ProjectCompletePrivate id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Project id
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public ProjectCompletePrivate publishedDate(String publishedDate) {
    this.publishedDate = publishedDate;
    return this;
  }

  /**
   * Date when project was published
   * @return publishedDate
   */
  @javax.annotation.Nullable
  public String getPublishedDate() {
    return publishedDate;
  }

  public void setPublishedDate(String publishedDate) {
    this.publishedDate = publishedDate;
  }


  public ProjectCompletePrivate title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Project title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ProjectCompletePrivate url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Api endpoint
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectCompletePrivate projectCompletePrivate = (ProjectCompletePrivate) o;
    return Objects.equals(this.accountId, projectCompletePrivate.accountId) &&
        Objects.equals(this.collaborators, projectCompletePrivate.collaborators) &&
        Objects.equals(this.createdDate, projectCompletePrivate.createdDate) &&
        Objects.equals(this.customFields, projectCompletePrivate.customFields) &&
        Objects.equals(this.description, projectCompletePrivate.description) &&
        Objects.equals(this.figshareUrl, projectCompletePrivate.figshareUrl) &&
        Objects.equals(this.funding, projectCompletePrivate.funding) &&
        Objects.equals(this.fundingList, projectCompletePrivate.fundingList) &&
        Objects.equals(this.groupId, projectCompletePrivate.groupId) &&
        Objects.equals(this.modifiedDate, projectCompletePrivate.modifiedDate) &&
        Objects.equals(this.quota, projectCompletePrivate.quota) &&
        Objects.equals(this.usedQuota, projectCompletePrivate.usedQuota) &&
        Objects.equals(this.usedQuotaPrivate, projectCompletePrivate.usedQuotaPrivate) &&
        Objects.equals(this.usedQuotaPublic, projectCompletePrivate.usedQuotaPublic) &&
        Objects.equals(this.role, projectCompletePrivate.role) &&
        Objects.equals(this.storage, projectCompletePrivate.storage) &&
        Objects.equals(this.id, projectCompletePrivate.id) &&
        Objects.equals(this.publishedDate, projectCompletePrivate.publishedDate) &&
        Objects.equals(this.title, projectCompletePrivate.title) &&
        Objects.equals(this.url, projectCompletePrivate.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, collaborators, createdDate, customFields, description, figshareUrl, funding, fundingList, groupId, modifiedDate, quota, usedQuota, usedQuotaPrivate, usedQuotaPublic, role, storage, id, publishedDate, title, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectCompletePrivate {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    collaborators: ").append(toIndentedString(collaborators)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    figshareUrl: ").append(toIndentedString(figshareUrl)).append("\n");
    sb.append("    funding: ").append(toIndentedString(funding)).append("\n");
    sb.append("    fundingList: ").append(toIndentedString(fundingList)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    quota: ").append(toIndentedString(quota)).append("\n");
    sb.append("    usedQuota: ").append(toIndentedString(usedQuota)).append("\n");
    sb.append("    usedQuotaPrivate: ").append(toIndentedString(usedQuotaPrivate)).append("\n");
    sb.append("    usedQuotaPublic: ").append(toIndentedString(usedQuotaPublic)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    publishedDate: ").append(toIndentedString(publishedDate)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("role");
    openapiFields.add("storage");
    openapiFields.add("id");
    openapiFields.add("published_date");
    openapiFields.add("title");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_id");
    openapiRequiredFields.add("collaborators");
    openapiRequiredFields.add("created_date");
    openapiRequiredFields.add("custom_fields");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("figshare_url");
    openapiRequiredFields.add("funding");
    openapiRequiredFields.add("funding_list");
    openapiRequiredFields.add("group_id");
    openapiRequiredFields.add("modified_date");
    openapiRequiredFields.add("quota");
    openapiRequiredFields.add("used_quota");
    openapiRequiredFields.add("used_quota_private");
    openapiRequiredFields.add("used_quota_public");
    openapiRequiredFields.add("role");
    openapiRequiredFields.add("storage");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("published_date");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectCompletePrivate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectCompletePrivate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectCompletePrivate is not found in the empty JSON string", ProjectCompletePrivate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectCompletePrivate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectCompletePrivate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectCompletePrivate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("collaborators").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `collaborators` to be an array in the JSON string but got `%s`", jsonObj.get("collaborators").toString()));
      }

      JsonArray jsonArraycollaborators = jsonObj.getAsJsonArray("collaborators");
      // validate the required field `collaborators` (array)
      for (int i = 0; i < jsonArraycollaborators.size(); i++) {
        Collaborator.validateJsonElement(jsonArraycollaborators.get(i));
      };
      if (!jsonObj.get("created_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_date").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("custom_fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_fields` to be an array in the JSON string but got `%s`", jsonObj.get("custom_fields").toString()));
      }

      JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("custom_fields");
      // validate the required field `custom_fields` (array)
      for (int i = 0; i < jsonArraycustomFields.size(); i++) {
        CustomArticleField.validateJsonElement(jsonArraycustomFields.get(i));
      };
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("figshare_url") != null && !jsonObj.get("figshare_url").isJsonNull()) && !jsonObj.get("figshare_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `figshare_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("figshare_url").toString()));
      }
      if (!jsonObj.get("funding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funding").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("funding_list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `funding_list` to be an array in the JSON string but got `%s`", jsonObj.get("funding_list").toString()));
      }

      JsonArray jsonArrayfundingList = jsonObj.getAsJsonArray("funding_list");
      // validate the required field `funding_list` (array)
      for (int i = 0; i < jsonArrayfundingList.size(); i++) {
        FundingInformation.validateJsonElement(jsonArrayfundingList.get(i));
      };
      if (!jsonObj.get("modified_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_date").toString()));
      }
      if (!jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the required field `role`
      RoleEnum.validateJsonElement(jsonObj.get("role"));
      if (!jsonObj.get("storage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storage").toString()));
      }
      // validate the required field `storage`
      StorageEnum.validateJsonElement(jsonObj.get("storage"));
      if ((jsonObj.get("published_date") != null && !jsonObj.get("published_date").isJsonNull()) && !jsonObj.get("published_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published_date").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectCompletePrivate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectCompletePrivate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectCompletePrivate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectCompletePrivate.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectCompletePrivate>() {
           @Override
           public void write(JsonWriter out, ProjectCompletePrivate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectCompletePrivate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectCompletePrivate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectCompletePrivate
   * @throws IOException if the JSON string is invalid with respect to ProjectCompletePrivate
   */
  public static ProjectCompletePrivate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectCompletePrivate.class);
  }

  /**
   * Convert an instance of ProjectCompletePrivate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

