/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.License;
import org.openapitools.client.model.Timeline;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectArticle
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:45.951625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectArticle {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<Category> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CITATION = "citation";
  @SerializedName(SERIALIZED_NAME_CITATION)
  private String citation;

  public static final String SERIALIZED_NAME_CONFIDENTIAL_REASON = "confidential_reason";
  @SerializedName(SERIALIZED_NAME_CONFIDENTIAL_REASON)
  private String confidentialReason;

  public static final String SERIALIZED_NAME_CREATED_DATE = "created_date";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMBARGO_DATE = "embargo_date";
  @SerializedName(SERIALIZED_NAME_EMBARGO_DATE)
  private String embargoDate;

  public static final String SERIALIZED_NAME_EMBARGO_REASON = "embargo_reason";
  @SerializedName(SERIALIZED_NAME_EMBARGO_REASON)
  private String embargoReason;

  public static final String SERIALIZED_NAME_EMBARGO_TITLE = "embargo_title";
  @SerializedName(SERIALIZED_NAME_EMBARGO_TITLE)
  private String embargoTitle;

  public static final String SERIALIZED_NAME_EMBARGO_TYPE = "embargo_type";
  @SerializedName(SERIALIZED_NAME_EMBARGO_TYPE)
  private String embargoType;

  public static final String SERIALIZED_NAME_FUNDING = "funding";
  @SerializedName(SERIALIZED_NAME_FUNDING)
  private String funding;

  public static final String SERIALIZED_NAME_FUNDING_LIST = "funding_list";
  @SerializedName(SERIALIZED_NAME_FUNDING_LIST)
  private List<Integer> fundingList = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_LINKED_FILE = "has_linked_file";
  @SerializedName(SERIALIZED_NAME_HAS_LINKED_FILE)
  private Boolean hasLinkedFile;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_CONFIDENTIAL = "is_confidential";
  @SerializedName(SERIALIZED_NAME_IS_CONFIDENTIAL)
  private Boolean isConfidential;

  public static final String SERIALIZED_NAME_IS_EMBARGOED = "is_embargoed";
  @SerializedName(SERIALIZED_NAME_IS_EMBARGOED)
  private Boolean isEmbargoed;

  public static final String SERIALIZED_NAME_IS_METADATA_RECORD = "is_metadata_record";
  @SerializedName(SERIALIZED_NAME_IS_METADATA_RECORD)
  private Boolean isMetadataRecord;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "is_public";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private License license;

  public static final String SERIALIZED_NAME_METADATA_REASON = "metadata_reason";
  @SerializedName(SERIALIZED_NAME_METADATA_REASON)
  private String metadataReason;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modified_date";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private String modifiedDate;

  public static final String SERIALIZED_NAME_REFERENCES = "references";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  private List<String> references = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Long version;

  public static final String SERIALIZED_NAME_DEFINED_TYPE = "defined_type";
  @SerializedName(SERIALIZED_NAME_DEFINED_TYPE)
  private Long definedType;

  public static final String SERIALIZED_NAME_DEFINED_TYPE_NAME = "defined_type_name";
  @SerializedName(SERIALIZED_NAME_DEFINED_TYPE_NAME)
  private String definedTypeName;

  public static final String SERIALIZED_NAME_DOI = "doi";
  @SerializedName(SERIALIZED_NAME_DOI)
  private String doi;

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private BigDecimal groupId;

  public static final String SERIALIZED_NAME_HANDLE = "handle";
  @SerializedName(SERIALIZED_NAME_HANDLE)
  private String handle;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_PUBLISHED_DATE = "published_date";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_DATE)
  private String publishedDate;

  public static final String SERIALIZED_NAME_THUMB = "thumb";
  @SerializedName(SERIALIZED_NAME_THUMB)
  private String thumb;

  public static final String SERIALIZED_NAME_TIMELINE = "timeline";
  @SerializedName(SERIALIZED_NAME_TIMELINE)
  private Timeline timeline;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_URL_PRIVATE_API = "url_private_api";
  @SerializedName(SERIALIZED_NAME_URL_PRIVATE_API)
  private String urlPrivateApi;

  public static final String SERIALIZED_NAME_URL_PRIVATE_HTML = "url_private_html";
  @SerializedName(SERIALIZED_NAME_URL_PRIVATE_HTML)
  private String urlPrivateHtml;

  public static final String SERIALIZED_NAME_URL_PUBLIC_API = "url_public_api";
  @SerializedName(SERIALIZED_NAME_URL_PUBLIC_API)
  private String urlPublicApi;

  public static final String SERIALIZED_NAME_URL_PUBLIC_HTML = "url_public_html";
  @SerializedName(SERIALIZED_NAME_URL_PUBLIC_HTML)
  private String urlPublicHtml;

  public ProjectArticle() {
  }

  public ProjectArticle categories(List<Category> categories) {
    this.categories = categories;
    return this;
  }

  public ProjectArticle addCategoriesItem(Category categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * List of categories selected for the article
   * @return categories
   */
  @javax.annotation.Nonnull
  public List<Category> getCategories() {
    return categories;
  }

  public void setCategories(List<Category> categories) {
    this.categories = categories;
  }


  public ProjectArticle citation(String citation) {
    this.citation = citation;
    return this;
  }

  /**
   * Article citation
   * @return citation
   */
  @javax.annotation.Nonnull
  public String getCitation() {
    return citation;
  }

  public void setCitation(String citation) {
    this.citation = citation;
  }


  public ProjectArticle confidentialReason(String confidentialReason) {
    this.confidentialReason = confidentialReason;
    return this;
  }

  /**
   * Confidentiality reason
   * @return confidentialReason
   */
  @javax.annotation.Nonnull
  public String getConfidentialReason() {
    return confidentialReason;
  }

  public void setConfidentialReason(String confidentialReason) {
    this.confidentialReason = confidentialReason;
  }


  public ProjectArticle createdDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Date when article was created
   * @return createdDate
   */
  @javax.annotation.Nonnull
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  public ProjectArticle description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Article description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProjectArticle embargoDate(String embargoDate) {
    this.embargoDate = embargoDate;
    return this;
  }

  /**
   * Date when embargo lifts
   * @return embargoDate
   */
  @javax.annotation.Nullable
  public String getEmbargoDate() {
    return embargoDate;
  }

  public void setEmbargoDate(String embargoDate) {
    this.embargoDate = embargoDate;
  }


  public ProjectArticle embargoReason(String embargoReason) {
    this.embargoReason = embargoReason;
    return this;
  }

  /**
   * Reason for embargo
   * @return embargoReason
   */
  @javax.annotation.Nonnull
  public String getEmbargoReason() {
    return embargoReason;
  }

  public void setEmbargoReason(String embargoReason) {
    this.embargoReason = embargoReason;
  }


  public ProjectArticle embargoTitle(String embargoTitle) {
    this.embargoTitle = embargoTitle;
    return this;
  }

  /**
   * Title for embargo
   * @return embargoTitle
   */
  @javax.annotation.Nonnull
  public String getEmbargoTitle() {
    return embargoTitle;
  }

  public void setEmbargoTitle(String embargoTitle) {
    this.embargoTitle = embargoTitle;
  }


  public ProjectArticle embargoType(String embargoType) {
    this.embargoType = embargoType;
    return this;
  }

  /**
   * Article embargo
   * @return embargoType
   */
  @javax.annotation.Nullable
  public String getEmbargoType() {
    return embargoType;
  }

  public void setEmbargoType(String embargoType) {
    this.embargoType = embargoType;
  }


  public ProjectArticle funding(String funding) {
    this.funding = funding;
    return this;
  }

  /**
   * Article funding
   * @return funding
   */
  @javax.annotation.Nonnull
  public String getFunding() {
    return funding;
  }

  public void setFunding(String funding) {
    this.funding = funding;
  }


  public ProjectArticle fundingList(List<Integer> fundingList) {
    this.fundingList = fundingList;
    return this;
  }

  public ProjectArticle addFundingListItem(Integer fundingListItem) {
    if (this.fundingList == null) {
      this.fundingList = new ArrayList<>();
    }
    this.fundingList.add(fundingListItem);
    return this;
  }

  /**
   * Get fundingList
   * @return fundingList
   */
  @javax.annotation.Nonnull
  public List<Integer> getFundingList() {
    return fundingList;
  }

  public void setFundingList(List<Integer> fundingList) {
    this.fundingList = fundingList;
  }


  public ProjectArticle hasLinkedFile(Boolean hasLinkedFile) {
    this.hasLinkedFile = hasLinkedFile;
    return this;
  }

  /**
   * True if any files are linked to the article
   * @return hasLinkedFile
   */
  @javax.annotation.Nonnull
  public Boolean getHasLinkedFile() {
    return hasLinkedFile;
  }

  public void setHasLinkedFile(Boolean hasLinkedFile) {
    this.hasLinkedFile = hasLinkedFile;
  }


  public ProjectArticle isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * True if article is active
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public ProjectArticle isConfidential(Boolean isConfidential) {
    this.isConfidential = isConfidential;
    return this;
  }

  /**
   * Article Confidentiality
   * @return isConfidential
   */
  @javax.annotation.Nonnull
  public Boolean getIsConfidential() {
    return isConfidential;
  }

  public void setIsConfidential(Boolean isConfidential) {
    this.isConfidential = isConfidential;
  }


  public ProjectArticle isEmbargoed(Boolean isEmbargoed) {
    this.isEmbargoed = isEmbargoed;
    return this;
  }

  /**
   * True if article is embargoed
   * @return isEmbargoed
   */
  @javax.annotation.Nonnull
  public Boolean getIsEmbargoed() {
    return isEmbargoed;
  }

  public void setIsEmbargoed(Boolean isEmbargoed) {
    this.isEmbargoed = isEmbargoed;
  }


  public ProjectArticle isMetadataRecord(Boolean isMetadataRecord) {
    this.isMetadataRecord = isMetadataRecord;
    return this;
  }

  /**
   * True if article has no files
   * @return isMetadataRecord
   */
  @javax.annotation.Nonnull
  public Boolean getIsMetadataRecord() {
    return isMetadataRecord;
  }

  public void setIsMetadataRecord(Boolean isMetadataRecord) {
    this.isMetadataRecord = isMetadataRecord;
  }


  public ProjectArticle isPublic(Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

  /**
   * True if article is published
   * @return isPublic
   */
  @javax.annotation.Nonnull
  public Boolean getIsPublic() {
    return isPublic;
  }

  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public ProjectArticle license(License license) {
    this.license = license;
    return this;
  }

  /**
   * Get license
   * @return license
   */
  @javax.annotation.Nonnull
  public License getLicense() {
    return license;
  }

  public void setLicense(License license) {
    this.license = license;
  }


  public ProjectArticle metadataReason(String metadataReason) {
    this.metadataReason = metadataReason;
    return this;
  }

  /**
   * Article metadata reason
   * @return metadataReason
   */
  @javax.annotation.Nonnull
  public String getMetadataReason() {
    return metadataReason;
  }

  public void setMetadataReason(String metadataReason) {
    this.metadataReason = metadataReason;
  }


  public ProjectArticle modifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Date when article was last modified
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public String getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public ProjectArticle references(List<String> references) {
    this.references = references;
    return this;
  }

  public ProjectArticle addReferencesItem(String referencesItem) {
    if (this.references == null) {
      this.references = new ArrayList<>();
    }
    this.references.add(referencesItem);
    return this;
  }

  /**
   * List of references
   * @return references
   */
  @javax.annotation.Nonnull
  public List<String> getReferences() {
    return references;
  }

  public void setReferences(List<String> references) {
    this.references = references;
  }


  public ProjectArticle size(Long size) {
    this.size = size;
    return this;
  }

  /**
   * Article size
   * @return size
   */
  @javax.annotation.Nonnull
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  public ProjectArticle status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Article status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ProjectArticle tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public ProjectArticle addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * List of article tags
   * @return tags
   */
  @javax.annotation.Nonnull
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public ProjectArticle version(Long version) {
    this.version = version;
    return this;
  }

  /**
   * Article version
   * @return version
   */
  @javax.annotation.Nonnull
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }


  public ProjectArticle definedType(Long definedType) {
    this.definedType = definedType;
    return this;
  }

  /**
   * Type of article identifier
   * @return definedType
   */
  @javax.annotation.Nonnull
  public Long getDefinedType() {
    return definedType;
  }

  public void setDefinedType(Long definedType) {
    this.definedType = definedType;
  }


  public ProjectArticle definedTypeName(String definedTypeName) {
    this.definedTypeName = definedTypeName;
    return this;
  }

  /**
   * Name of the article type identifier
   * @return definedTypeName
   */
  @javax.annotation.Nonnull
  public String getDefinedTypeName() {
    return definedTypeName;
  }

  public void setDefinedTypeName(String definedTypeName) {
    this.definedTypeName = definedTypeName;
  }


  public ProjectArticle doi(String doi) {
    this.doi = doi;
    return this;
  }

  /**
   * DOI
   * @return doi
   */
  @javax.annotation.Nonnull
  public String getDoi() {
    return doi;
  }

  public void setDoi(String doi) {
    this.doi = doi;
  }


  public ProjectArticle groupId(BigDecimal groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * Group ID
   * @return groupId
   */
  @javax.annotation.Nullable
  public BigDecimal getGroupId() {
    return groupId;
  }

  public void setGroupId(BigDecimal groupId) {
    this.groupId = groupId;
  }


  public ProjectArticle handle(String handle) {
    this.handle = handle;
    return this;
  }

  /**
   * Handle
   * @return handle
   */
  @javax.annotation.Nonnull
  public String getHandle() {
    return handle;
  }

  public void setHandle(String handle) {
    this.handle = handle;
  }


  public ProjectArticle id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for article
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public ProjectArticle publishedDate(String publishedDate) {
    this.publishedDate = publishedDate;
    return this;
  }

  /**
   * Posted date
   * @return publishedDate
   */
  @javax.annotation.Nullable
  public String getPublishedDate() {
    return publishedDate;
  }

  public void setPublishedDate(String publishedDate) {
    this.publishedDate = publishedDate;
  }


  public ProjectArticle thumb(String thumb) {
    this.thumb = thumb;
    return this;
  }

  /**
   * Thumbnail image
   * @return thumb
   */
  @javax.annotation.Nonnull
  public String getThumb() {
    return thumb;
  }

  public void setThumb(String thumb) {
    this.thumb = thumb;
  }


  public ProjectArticle timeline(Timeline timeline) {
    this.timeline = timeline;
    return this;
  }

  /**
   * Get timeline
   * @return timeline
   */
  @javax.annotation.Nonnull
  public Timeline getTimeline() {
    return timeline;
  }

  public void setTimeline(Timeline timeline) {
    this.timeline = timeline;
  }


  public ProjectArticle title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of article
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ProjectArticle url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Api endpoint for article
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public ProjectArticle urlPrivateApi(String urlPrivateApi) {
    this.urlPrivateApi = urlPrivateApi;
    return this;
  }

  /**
   * Private Api endpoint for article
   * @return urlPrivateApi
   */
  @javax.annotation.Nonnull
  public String getUrlPrivateApi() {
    return urlPrivateApi;
  }

  public void setUrlPrivateApi(String urlPrivateApi) {
    this.urlPrivateApi = urlPrivateApi;
  }


  public ProjectArticle urlPrivateHtml(String urlPrivateHtml) {
    this.urlPrivateHtml = urlPrivateHtml;
    return this;
  }

  /**
   * Private site endpoint for article
   * @return urlPrivateHtml
   */
  @javax.annotation.Nonnull
  public String getUrlPrivateHtml() {
    return urlPrivateHtml;
  }

  public void setUrlPrivateHtml(String urlPrivateHtml) {
    this.urlPrivateHtml = urlPrivateHtml;
  }


  public ProjectArticle urlPublicApi(String urlPublicApi) {
    this.urlPublicApi = urlPublicApi;
    return this;
  }

  /**
   * Public Api endpoint for article
   * @return urlPublicApi
   */
  @javax.annotation.Nonnull
  public String getUrlPublicApi() {
    return urlPublicApi;
  }

  public void setUrlPublicApi(String urlPublicApi) {
    this.urlPublicApi = urlPublicApi;
  }


  public ProjectArticle urlPublicHtml(String urlPublicHtml) {
    this.urlPublicHtml = urlPublicHtml;
    return this;
  }

  /**
   * Public site endpoint for article
   * @return urlPublicHtml
   */
  @javax.annotation.Nonnull
  public String getUrlPublicHtml() {
    return urlPublicHtml;
  }

  public void setUrlPublicHtml(String urlPublicHtml) {
    this.urlPublicHtml = urlPublicHtml;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectArticle projectArticle = (ProjectArticle) o;
    return Objects.equals(this.categories, projectArticle.categories) &&
        Objects.equals(this.citation, projectArticle.citation) &&
        Objects.equals(this.confidentialReason, projectArticle.confidentialReason) &&
        Objects.equals(this.createdDate, projectArticle.createdDate) &&
        Objects.equals(this.description, projectArticle.description) &&
        Objects.equals(this.embargoDate, projectArticle.embargoDate) &&
        Objects.equals(this.embargoReason, projectArticle.embargoReason) &&
        Objects.equals(this.embargoTitle, projectArticle.embargoTitle) &&
        Objects.equals(this.embargoType, projectArticle.embargoType) &&
        Objects.equals(this.funding, projectArticle.funding) &&
        Objects.equals(this.fundingList, projectArticle.fundingList) &&
        Objects.equals(this.hasLinkedFile, projectArticle.hasLinkedFile) &&
        Objects.equals(this.isActive, projectArticle.isActive) &&
        Objects.equals(this.isConfidential, projectArticle.isConfidential) &&
        Objects.equals(this.isEmbargoed, projectArticle.isEmbargoed) &&
        Objects.equals(this.isMetadataRecord, projectArticle.isMetadataRecord) &&
        Objects.equals(this.isPublic, projectArticle.isPublic) &&
        Objects.equals(this.license, projectArticle.license) &&
        Objects.equals(this.metadataReason, projectArticle.metadataReason) &&
        Objects.equals(this.modifiedDate, projectArticle.modifiedDate) &&
        Objects.equals(this.references, projectArticle.references) &&
        Objects.equals(this.size, projectArticle.size) &&
        Objects.equals(this.status, projectArticle.status) &&
        Objects.equals(this.tags, projectArticle.tags) &&
        Objects.equals(this.version, projectArticle.version) &&
        Objects.equals(this.definedType, projectArticle.definedType) &&
        Objects.equals(this.definedTypeName, projectArticle.definedTypeName) &&
        Objects.equals(this.doi, projectArticle.doi) &&
        Objects.equals(this.groupId, projectArticle.groupId) &&
        Objects.equals(this.handle, projectArticle.handle) &&
        Objects.equals(this.id, projectArticle.id) &&
        Objects.equals(this.publishedDate, projectArticle.publishedDate) &&
        Objects.equals(this.thumb, projectArticle.thumb) &&
        Objects.equals(this.timeline, projectArticle.timeline) &&
        Objects.equals(this.title, projectArticle.title) &&
        Objects.equals(this.url, projectArticle.url) &&
        Objects.equals(this.urlPrivateApi, projectArticle.urlPrivateApi) &&
        Objects.equals(this.urlPrivateHtml, projectArticle.urlPrivateHtml) &&
        Objects.equals(this.urlPublicApi, projectArticle.urlPublicApi) &&
        Objects.equals(this.urlPublicHtml, projectArticle.urlPublicHtml);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, citation, confidentialReason, createdDate, description, embargoDate, embargoReason, embargoTitle, embargoType, funding, fundingList, hasLinkedFile, isActive, isConfidential, isEmbargoed, isMetadataRecord, isPublic, license, metadataReason, modifiedDate, references, size, status, tags, version, definedType, definedTypeName, doi, groupId, handle, id, publishedDate, thumb, timeline, title, url, urlPrivateApi, urlPrivateHtml, urlPublicApi, urlPublicHtml);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectArticle {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    citation: ").append(toIndentedString(citation)).append("\n");
    sb.append("    confidentialReason: ").append(toIndentedString(confidentialReason)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    embargoDate: ").append(toIndentedString(embargoDate)).append("\n");
    sb.append("    embargoReason: ").append(toIndentedString(embargoReason)).append("\n");
    sb.append("    embargoTitle: ").append(toIndentedString(embargoTitle)).append("\n");
    sb.append("    embargoType: ").append(toIndentedString(embargoType)).append("\n");
    sb.append("    funding: ").append(toIndentedString(funding)).append("\n");
    sb.append("    fundingList: ").append(toIndentedString(fundingList)).append("\n");
    sb.append("    hasLinkedFile: ").append(toIndentedString(hasLinkedFile)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isConfidential: ").append(toIndentedString(isConfidential)).append("\n");
    sb.append("    isEmbargoed: ").append(toIndentedString(isEmbargoed)).append("\n");
    sb.append("    isMetadataRecord: ").append(toIndentedString(isMetadataRecord)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    metadataReason: ").append(toIndentedString(metadataReason)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    definedType: ").append(toIndentedString(definedType)).append("\n");
    sb.append("    definedTypeName: ").append(toIndentedString(definedTypeName)).append("\n");
    sb.append("    doi: ").append(toIndentedString(doi)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    handle: ").append(toIndentedString(handle)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    publishedDate: ").append(toIndentedString(publishedDate)).append("\n");
    sb.append("    thumb: ").append(toIndentedString(thumb)).append("\n");
    sb.append("    timeline: ").append(toIndentedString(timeline)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlPrivateApi: ").append(toIndentedString(urlPrivateApi)).append("\n");
    sb.append("    urlPrivateHtml: ").append(toIndentedString(urlPrivateHtml)).append("\n");
    sb.append("    urlPublicApi: ").append(toIndentedString(urlPublicApi)).append("\n");
    sb.append("    urlPublicHtml: ").append(toIndentedString(urlPublicHtml)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defined_type");
    openapiFields.add("defined_type_name");
    openapiFields.add("doi");
    openapiFields.add("group_id");
    openapiFields.add("handle");
    openapiFields.add("id");
    openapiFields.add("published_date");
    openapiFields.add("thumb");
    openapiFields.add("timeline");
    openapiFields.add("title");
    openapiFields.add("url");
    openapiFields.add("url_private_api");
    openapiFields.add("url_private_html");
    openapiFields.add("url_public_api");
    openapiFields.add("url_public_html");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("citation");
    openapiRequiredFields.add("confidential_reason");
    openapiRequiredFields.add("created_date");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("embargo_date");
    openapiRequiredFields.add("embargo_reason");
    openapiRequiredFields.add("embargo_title");
    openapiRequiredFields.add("embargo_type");
    openapiRequiredFields.add("funding");
    openapiRequiredFields.add("funding_list");
    openapiRequiredFields.add("has_linked_file");
    openapiRequiredFields.add("is_active");
    openapiRequiredFields.add("is_confidential");
    openapiRequiredFields.add("is_embargoed");
    openapiRequiredFields.add("is_metadata_record");
    openapiRequiredFields.add("is_public");
    openapiRequiredFields.add("license");
    openapiRequiredFields.add("metadata_reason");
    openapiRequiredFields.add("modified_date");
    openapiRequiredFields.add("references");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("defined_type");
    openapiRequiredFields.add("defined_type_name");
    openapiRequiredFields.add("doi");
    openapiRequiredFields.add("group_id");
    openapiRequiredFields.add("handle");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("published_date");
    openapiRequiredFields.add("thumb");
    openapiRequiredFields.add("timeline");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("url_private_api");
    openapiRequiredFields.add("url_private_html");
    openapiRequiredFields.add("url_public_api");
    openapiRequiredFields.add("url_public_html");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectArticle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectArticle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectArticle is not found in the empty JSON string", ProjectArticle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectArticle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectArticle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectArticle.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }

      JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
      // validate the required field `categories` (array)
      for (int i = 0; i < jsonArraycategories.size(); i++) {
        Category.validateJsonElement(jsonArraycategories.get(i));
      };
      if (!jsonObj.get("citation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `citation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("citation").toString()));
      }
      if (!jsonObj.get("confidential_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confidential_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confidential_reason").toString()));
      }
      if (!jsonObj.get("created_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_date").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("embargo_date") != null && !jsonObj.get("embargo_date").isJsonNull()) && !jsonObj.get("embargo_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embargo_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embargo_date").toString()));
      }
      if (!jsonObj.get("embargo_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embargo_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embargo_reason").toString()));
      }
      if (!jsonObj.get("embargo_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embargo_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embargo_title").toString()));
      }
      if ((jsonObj.get("embargo_type") != null && !jsonObj.get("embargo_type").isJsonNull()) && !jsonObj.get("embargo_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embargo_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embargo_type").toString()));
      }
      if (!jsonObj.get("funding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funding").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("funding_list") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("funding_list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `funding_list` to be an array in the JSON string but got `%s`", jsonObj.get("funding_list").toString()));
      }
      // validate the required field `license`
      License.validateJsonElement(jsonObj.get("license"));
      if (!jsonObj.get("metadata_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata_reason").toString()));
      }
      if ((jsonObj.get("modified_date") != null && !jsonObj.get("modified_date").isJsonNull()) && !jsonObj.get("modified_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_date").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("references") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("references").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `references` to be an array in the JSON string but got `%s`", jsonObj.get("references").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("defined_type_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defined_type_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defined_type_name").toString()));
      }
      if (!jsonObj.get("doi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doi").toString()));
      }
      if (!jsonObj.get("handle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handle").toString()));
      }
      if ((jsonObj.get("published_date") != null && !jsonObj.get("published_date").isJsonNull()) && !jsonObj.get("published_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published_date").toString()));
      }
      if (!jsonObj.get("thumb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumb").toString()));
      }
      // validate the required field `timeline`
      Timeline.validateJsonElement(jsonObj.get("timeline"));
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("url_private_api").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_private_api` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_private_api").toString()));
      }
      if (!jsonObj.get("url_private_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_private_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_private_html").toString()));
      }
      if (!jsonObj.get("url_public_api").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_public_api` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_public_api").toString()));
      }
      if (!jsonObj.get("url_public_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_public_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_public_html").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectArticle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectArticle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectArticle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectArticle.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectArticle>() {
           @Override
           public void write(JsonWriter out, ProjectArticle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectArticle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectArticle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectArticle
   * @throws IOException if the JSON string is invalid with respect to ProjectArticle
   */
  public static ProjectArticle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectArticle.class);
  }

  /**
   * Convert an instance of ProjectArticle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

