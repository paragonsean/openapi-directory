/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FundingInformation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:45.951625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FundingInformation {
  public static final String SERIALIZED_NAME_FUNDER_NAME = "funder_name";
  @SerializedName(SERIALIZED_NAME_FUNDER_NAME)
  private String funderName;

  public static final String SERIALIZED_NAME_GRANT_CODE = "grant_code";
  @SerializedName(SERIALIZED_NAME_GRANT_CODE)
  private String grantCode;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IS_USER_DEFINED = "is_user_defined";
  @SerializedName(SERIALIZED_NAME_IS_USER_DEFINED)
  private Boolean isUserDefined;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public FundingInformation() {
  }

  public FundingInformation funderName(String funderName) {
    this.funderName = funderName;
    return this;
  }

  /**
   * Funder&#39;s name
   * @return funderName
   */
  @javax.annotation.Nonnull
  public String getFunderName() {
    return funderName;
  }

  public void setFunderName(String funderName) {
    this.funderName = funderName;
  }


  public FundingInformation grantCode(String grantCode) {
    this.grantCode = grantCode;
    return this;
  }

  /**
   * The grant code
   * @return grantCode
   */
  @javax.annotation.Nonnull
  public String getGrantCode() {
    return grantCode;
  }

  public void setGrantCode(String grantCode) {
    this.grantCode = grantCode;
  }


  public FundingInformation id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Funding id
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public FundingInformation isUserDefined(Boolean isUserDefined) {
    this.isUserDefined = isUserDefined;
    return this;
  }

  /**
   * Return whether the grant has been introduced manually
   * @return isUserDefined
   */
  @javax.annotation.Nonnull
  public Boolean getIsUserDefined() {
    return isUserDefined;
  }

  public void setIsUserDefined(Boolean isUserDefined) {
    this.isUserDefined = isUserDefined;
  }


  public FundingInformation title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The funding name
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public FundingInformation url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The grant url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundingInformation fundingInformation = (FundingInformation) o;
    return Objects.equals(this.funderName, fundingInformation.funderName) &&
        Objects.equals(this.grantCode, fundingInformation.grantCode) &&
        Objects.equals(this.id, fundingInformation.id) &&
        Objects.equals(this.isUserDefined, fundingInformation.isUserDefined) &&
        Objects.equals(this.title, fundingInformation.title) &&
        Objects.equals(this.url, fundingInformation.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(funderName, grantCode, id, isUserDefined, title, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundingInformation {\n");
    sb.append("    funderName: ").append(toIndentedString(funderName)).append("\n");
    sb.append("    grantCode: ").append(toIndentedString(grantCode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isUserDefined: ").append(toIndentedString(isUserDefined)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("funder_name");
    openapiFields.add("grant_code");
    openapiFields.add("id");
    openapiFields.add("is_user_defined");
    openapiFields.add("title");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("funder_name");
    openapiRequiredFields.add("grant_code");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("is_user_defined");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FundingInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FundingInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FundingInformation is not found in the empty JSON string", FundingInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FundingInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FundingInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FundingInformation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("funder_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `funder_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("funder_name").toString()));
      }
      if (!jsonObj.get("grant_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grant_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grant_code").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FundingInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FundingInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FundingInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FundingInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<FundingInformation>() {
           @Override
           public void write(JsonWriter out, FundingInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FundingInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FundingInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FundingInformation
   * @throws IOException if the JSON string is invalid with respect to FundingInformation
   */
  public static FundingInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FundingInformation.class);
  }

  /**
   * Convert an instance of FundingInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

