/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ArticleComplete;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CurationDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:45.951625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CurationDetail {
  public static final String SERIALIZED_NAME_ITEM = "item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private ArticleComplete item;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Long accountId;

  public static final String SERIALIZED_NAME_ARTICLE_ID = "article_id";
  @SerializedName(SERIALIZED_NAME_ARTICLE_ID)
  private Long articleId;

  public static final String SERIALIZED_NAME_ASSIGNED_TO = "assigned_to";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_TO)
  private Long assignedTo;

  public static final String SERIALIZED_NAME_COMMENTS_COUNT = "comments_count";
  @SerializedName(SERIALIZED_NAME_COMMENTS_COUNT)
  private Long commentsCount;

  public static final String SERIALIZED_NAME_CREATED_DATE = "created_date";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Long groupId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modified_date";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private String modifiedDate;

  public static final String SERIALIZED_NAME_REVIEW_DATE = "review_date";
  @SerializedName(SERIALIZED_NAME_REVIEW_DATE)
  private String reviewDate;

  /**
   * The status of the review.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("pending"),
    
    APPROVED("approved"),
    
    REJECTED("rejected"),
    
    CLOSED("closed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Long version;

  public CurationDetail() {
  }

  public CurationDetail item(ArticleComplete item) {
    this.item = item;
    return this;
  }

  /**
   * Get item
   * @return item
   */
  @javax.annotation.Nonnull
  public ArticleComplete getItem() {
    return item;
  }

  public void setItem(ArticleComplete item) {
    this.item = item;
  }


  public CurationDetail accountId(Long accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The ID of the account of the owner of the article of this review.
   * @return accountId
   */
  @javax.annotation.Nonnull
  public Long getAccountId() {
    return accountId;
  }

  public void setAccountId(Long accountId) {
    this.accountId = accountId;
  }


  public CurationDetail articleId(Long articleId) {
    this.articleId = articleId;
    return this;
  }

  /**
   * The ID of the article of this review.
   * @return articleId
   */
  @javax.annotation.Nonnull
  public Long getArticleId() {
    return articleId;
  }

  public void setArticleId(Long articleId) {
    this.articleId = articleId;
  }


  public CurationDetail assignedTo(Long assignedTo) {
    this.assignedTo = assignedTo;
    return this;
  }

  /**
   * The ID of the account to which this review is assigned.
   * @return assignedTo
   */
  @javax.annotation.Nonnull
  public Long getAssignedTo() {
    return assignedTo;
  }

  public void setAssignedTo(Long assignedTo) {
    this.assignedTo = assignedTo;
  }


  public CurationDetail commentsCount(Long commentsCount) {
    this.commentsCount = commentsCount;
    return this;
  }

  /**
   * The number of comments in the review.
   * @return commentsCount
   */
  @javax.annotation.Nonnull
  public Long getCommentsCount() {
    return commentsCount;
  }

  public void setCommentsCount(Long commentsCount) {
    this.commentsCount = commentsCount;
  }


  public CurationDetail createdDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The creation date of the review.
   * @return createdDate
   */
  @javax.annotation.Nonnull
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  public CurationDetail groupId(Long groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * The group in which the article is present.
   * @return groupId
   */
  @javax.annotation.Nonnull
  public Long getGroupId() {
    return groupId;
  }

  public void setGroupId(Long groupId) {
    this.groupId = groupId;
  }


  public CurationDetail id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * The review id
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public CurationDetail modifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * The date the review has been modified.
   * @return modifiedDate
   */
  @javax.annotation.Nonnull
  public String getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public CurationDetail reviewDate(String reviewDate) {
    this.reviewDate = reviewDate;
    return this;
  }

  /**
   * The last time a comment has been added to the review.
   * @return reviewDate
   */
  @javax.annotation.Nullable
  public String getReviewDate() {
    return reviewDate;
  }

  public void setReviewDate(String reviewDate) {
    this.reviewDate = reviewDate;
  }


  public CurationDetail status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the review.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CurationDetail version(Long version) {
    this.version = version;
    return this;
  }

  /**
   * The Version number of the article in review.
   * @return version
   */
  @javax.annotation.Nonnull
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurationDetail curationDetail = (CurationDetail) o;
    return Objects.equals(this.item, curationDetail.item) &&
        Objects.equals(this.accountId, curationDetail.accountId) &&
        Objects.equals(this.articleId, curationDetail.articleId) &&
        Objects.equals(this.assignedTo, curationDetail.assignedTo) &&
        Objects.equals(this.commentsCount, curationDetail.commentsCount) &&
        Objects.equals(this.createdDate, curationDetail.createdDate) &&
        Objects.equals(this.groupId, curationDetail.groupId) &&
        Objects.equals(this.id, curationDetail.id) &&
        Objects.equals(this.modifiedDate, curationDetail.modifiedDate) &&
        Objects.equals(this.reviewDate, curationDetail.reviewDate) &&
        Objects.equals(this.status, curationDetail.status) &&
        Objects.equals(this.version, curationDetail.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(item, accountId, articleId, assignedTo, commentsCount, createdDate, groupId, id, modifiedDate, reviewDate, status, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurationDetail {\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    articleId: ").append(toIndentedString(articleId)).append("\n");
    sb.append("    assignedTo: ").append(toIndentedString(assignedTo)).append("\n");
    sb.append("    commentsCount: ").append(toIndentedString(commentsCount)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    reviewDate: ").append(toIndentedString(reviewDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("article_id");
    openapiFields.add("assigned_to");
    openapiFields.add("comments_count");
    openapiFields.add("created_date");
    openapiFields.add("group_id");
    openapiFields.add("id");
    openapiFields.add("modified_date");
    openapiFields.add("review_date");
    openapiFields.add("status");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("item");
    openapiRequiredFields.add("account_id");
    openapiRequiredFields.add("article_id");
    openapiRequiredFields.add("assigned_to");
    openapiRequiredFields.add("comments_count");
    openapiRequiredFields.add("created_date");
    openapiRequiredFields.add("group_id");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("modified_date");
    openapiRequiredFields.add("review_date");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CurationDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CurationDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CurationDetail is not found in the empty JSON string", CurationDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CurationDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CurationDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CurationDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `item`
      ArticleComplete.validateJsonElement(jsonObj.get("item"));
      if (!jsonObj.get("created_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_date").toString()));
      }
      if (!jsonObj.get("modified_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_date").toString()));
      }
      if ((jsonObj.get("review_date") != null && !jsonObj.get("review_date").isJsonNull()) && !jsonObj.get("review_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `review_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("review_date").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CurationDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CurationDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CurationDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CurationDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<CurationDetail>() {
           @Override
           public void write(JsonWriter out, CurationDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CurationDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CurationDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CurationDetail
   * @throws IOException if the JSON string is invalid with respect to CurationDetail
   */
  public static CurationDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CurationDetail.class);
  }

  /**
   * Convert an instance of CurationDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

