/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PrivateCollectionSearch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:45.951625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrivateCollectionSearch {
  public static final String SERIALIZED_NAME_RESOURCE_ID = "resource_id";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_DOI = "doi";
  @SerializedName(SERIALIZED_NAME_DOI)
  private String doi;

  public static final String SERIALIZED_NAME_HANDLE = "handle";
  @SerializedName(SERIALIZED_NAME_HANDLE)
  private String handle;

  /**
   * The field by which to order.
   */
  @JsonAdapter(OrderEnum.Adapter.class)
  public enum OrderEnum {
    PUBLISHED_DATE("published_date"),
    
    MODIFIED_DATE("modified_date"),
    
    VIEWS("views"),
    
    SHARES("shares"),
    
    CITES("cites");

    private String value;

    OrderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderEnum fromValue(String value) {
      for (OrderEnum b : OrderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private OrderEnum order = created_date;

  public static final String SERIALIZED_NAME_RESOURCE_DOI = "resource_doi";
  @SerializedName(SERIALIZED_NAME_RESOURCE_DOI)
  private String resourceDoi;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private Integer group;

  public static final String SERIALIZED_NAME_INSTITUTION = "institution";
  @SerializedName(SERIALIZED_NAME_INSTITUTION)
  private Integer institution;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Long limit;

  public static final String SERIALIZED_NAME_MODIFIED_SINCE = "modified_since";
  @SerializedName(SERIALIZED_NAME_MODIFIED_SINCE)
  private String modifiedSince;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Long offset;

  /**
   * Direction of ordering
   */
  @JsonAdapter(OrderDirectionEnum.Adapter.class)
  public enum OrderDirectionEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    OrderDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderDirectionEnum fromValue(String value) {
      for (OrderDirectionEnum b : OrderDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrderDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrderDirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrderDirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORDER_DIRECTION = "order_direction";
  @SerializedName(SERIALIZED_NAME_ORDER_DIRECTION)
  private OrderDirectionEnum orderDirection = OrderDirectionEnum.DESC;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Long page;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "page_size";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Long pageSize = 10l;

  public static final String SERIALIZED_NAME_PUBLISHED_SINCE = "published_since";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_SINCE)
  private String publishedSince;

  public static final String SERIALIZED_NAME_SEARCH_FOR = "search_for";
  @SerializedName(SERIALIZED_NAME_SEARCH_FOR)
  private String searchFor;

  public PrivateCollectionSearch() {
  }

  public PrivateCollectionSearch resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * only return collections with this resource_id
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public PrivateCollectionSearch doi(String doi) {
    this.doi = doi;
    return this;
  }

  /**
   * Only return collections with this doi
   * @return doi
   */
  @javax.annotation.Nullable
  public String getDoi() {
    return doi;
  }

  public void setDoi(String doi) {
    this.doi = doi;
  }


  public PrivateCollectionSearch handle(String handle) {
    this.handle = handle;
    return this;
  }

  /**
   * Only return collections with this handle
   * @return handle
   */
  @javax.annotation.Nullable
  public String getHandle() {
    return handle;
  }

  public void setHandle(String handle) {
    this.handle = handle;
  }


  public PrivateCollectionSearch order(OrderEnum order) {
    this.order = order;
    return this;
  }

  /**
   * The field by which to order.
   * @return order
   */
  @javax.annotation.Nullable
  public OrderEnum getOrder() {
    return order;
  }

  public void setOrder(OrderEnum order) {
    this.order = order;
  }


  public PrivateCollectionSearch resourceDoi(String resourceDoi) {
    this.resourceDoi = resourceDoi;
    return this;
  }

  /**
   * Only return collections with this resource_doi
   * @return resourceDoi
   */
  @javax.annotation.Nullable
  public String getResourceDoi() {
    return resourceDoi;
  }

  public void setResourceDoi(String resourceDoi) {
    this.resourceDoi = resourceDoi;
  }


  public PrivateCollectionSearch group(Integer group) {
    this.group = group;
    return this;
  }

  /**
   * only return collections from this group
   * @return group
   */
  @javax.annotation.Nullable
  public Integer getGroup() {
    return group;
  }

  public void setGroup(Integer group) {
    this.group = group;
  }


  public PrivateCollectionSearch institution(Integer institution) {
    this.institution = institution;
    return this;
  }

  /**
   * only return collections from this institution
   * @return institution
   */
  @javax.annotation.Nullable
  public Integer getInstitution() {
    return institution;
  }

  public void setInstitution(Integer institution) {
    this.institution = institution;
  }


  public PrivateCollectionSearch limit(Long limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Number of results included on a page. Used for pagination with query
   * minimum: 1
   * maximum: 1000
   * @return limit
   */
  @javax.annotation.Nullable
  public Long getLimit() {
    return limit;
  }

  public void setLimit(Long limit) {
    this.limit = limit;
  }


  public PrivateCollectionSearch modifiedSince(String modifiedSince) {
    this.modifiedSince = modifiedSince;
    return this;
  }

  /**
   * Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
   * @return modifiedSince
   */
  @javax.annotation.Nullable
  public String getModifiedSince() {
    return modifiedSince;
  }

  public void setModifiedSince(String modifiedSince) {
    this.modifiedSince = modifiedSince;
  }


  public PrivateCollectionSearch offset(Long offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Where to start the listing(the offset of the first result). Used for pagination with limit
   * minimum: 0
   * maximum: 5000
   * @return offset
   */
  @javax.annotation.Nullable
  public Long getOffset() {
    return offset;
  }

  public void setOffset(Long offset) {
    this.offset = offset;
  }


  public PrivateCollectionSearch orderDirection(OrderDirectionEnum orderDirection) {
    this.orderDirection = orderDirection;
    return this;
  }

  /**
   * Direction of ordering
   * @return orderDirection
   */
  @javax.annotation.Nullable
  public OrderDirectionEnum getOrderDirection() {
    return orderDirection;
  }

  public void setOrderDirection(OrderDirectionEnum orderDirection) {
    this.orderDirection = orderDirection;
  }


  public PrivateCollectionSearch page(Long page) {
    this.page = page;
    return this;
  }

  /**
   * Page number. Used for pagination with page_size
   * minimum: 1
   * maximum: 5000
   * @return page
   */
  @javax.annotation.Nullable
  public Long getPage() {
    return page;
  }

  public void setPage(Long page) {
    this.page = page;
  }


  public PrivateCollectionSearch pageSize(Long pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * The number of results included on a page. Used for pagination with page
   * minimum: 1
   * maximum: 1000
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Long getPageSize() {
    return pageSize;
  }

  public void setPageSize(Long pageSize) {
    this.pageSize = pageSize;
  }


  public PrivateCollectionSearch publishedSince(String publishedSince) {
    this.publishedSince = publishedSince;
    return this;
  }

  /**
   * Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
   * @return publishedSince
   */
  @javax.annotation.Nullable
  public String getPublishedSince() {
    return publishedSince;
  }

  public void setPublishedSince(String publishedSince) {
    this.publishedSince = publishedSince;
  }


  public PrivateCollectionSearch searchFor(String searchFor) {
    this.searchFor = searchFor;
    return this;
  }

  /**
   * Search term
   * @return searchFor
   */
  @javax.annotation.Nullable
  public String getSearchFor() {
    return searchFor;
  }

  public void setSearchFor(String searchFor) {
    this.searchFor = searchFor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrivateCollectionSearch privateCollectionSearch = (PrivateCollectionSearch) o;
    return Objects.equals(this.resourceId, privateCollectionSearch.resourceId) &&
        Objects.equals(this.doi, privateCollectionSearch.doi) &&
        Objects.equals(this.handle, privateCollectionSearch.handle) &&
        Objects.equals(this.order, privateCollectionSearch.order) &&
        Objects.equals(this.resourceDoi, privateCollectionSearch.resourceDoi) &&
        Objects.equals(this.group, privateCollectionSearch.group) &&
        Objects.equals(this.institution, privateCollectionSearch.institution) &&
        Objects.equals(this.limit, privateCollectionSearch.limit) &&
        Objects.equals(this.modifiedSince, privateCollectionSearch.modifiedSince) &&
        Objects.equals(this.offset, privateCollectionSearch.offset) &&
        Objects.equals(this.orderDirection, privateCollectionSearch.orderDirection) &&
        Objects.equals(this.page, privateCollectionSearch.page) &&
        Objects.equals(this.pageSize, privateCollectionSearch.pageSize) &&
        Objects.equals(this.publishedSince, privateCollectionSearch.publishedSince) &&
        Objects.equals(this.searchFor, privateCollectionSearch.searchFor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceId, doi, handle, order, resourceDoi, group, institution, limit, modifiedSince, offset, orderDirection, page, pageSize, publishedSince, searchFor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrivateCollectionSearch {\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    doi: ").append(toIndentedString(doi)).append("\n");
    sb.append("    handle: ").append(toIndentedString(handle)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    resourceDoi: ").append(toIndentedString(resourceDoi)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    institution: ").append(toIndentedString(institution)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    modifiedSince: ").append(toIndentedString(modifiedSince)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    orderDirection: ").append(toIndentedString(orderDirection)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    publishedSince: ").append(toIndentedString(publishedSince)).append("\n");
    sb.append("    searchFor: ").append(toIndentedString(searchFor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("doi");
    openapiFields.add("handle");
    openapiFields.add("order");
    openapiFields.add("resource_doi");
    openapiFields.add("group");
    openapiFields.add("institution");
    openapiFields.add("limit");
    openapiFields.add("modified_since");
    openapiFields.add("offset");
    openapiFields.add("order_direction");
    openapiFields.add("page");
    openapiFields.add("page_size");
    openapiFields.add("published_since");
    openapiFields.add("search_for");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrivateCollectionSearch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrivateCollectionSearch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrivateCollectionSearch is not found in the empty JSON string", PrivateCollectionSearch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrivateCollectionSearch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrivateCollectionSearch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("resource_id") != null && !jsonObj.get("resource_id").isJsonNull()) && !jsonObj.get("resource_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_id").toString()));
      }
      if ((jsonObj.get("doi") != null && !jsonObj.get("doi").isJsonNull()) && !jsonObj.get("doi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doi").toString()));
      }
      if ((jsonObj.get("handle") != null && !jsonObj.get("handle").isJsonNull()) && !jsonObj.get("handle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handle").toString()));
      }
      if ((jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) && !jsonObj.get("order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order").toString()));
      }
      // validate the optional field `order`
      if (jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) {
        OrderEnum.validateJsonElement(jsonObj.get("order"));
      }
      if ((jsonObj.get("resource_doi") != null && !jsonObj.get("resource_doi").isJsonNull()) && !jsonObj.get("resource_doi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_doi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_doi").toString()));
      }
      if ((jsonObj.get("modified_since") != null && !jsonObj.get("modified_since").isJsonNull()) && !jsonObj.get("modified_since").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_since` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_since").toString()));
      }
      if ((jsonObj.get("order_direction") != null && !jsonObj.get("order_direction").isJsonNull()) && !jsonObj.get("order_direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_direction").toString()));
      }
      // validate the optional field `order_direction`
      if (jsonObj.get("order_direction") != null && !jsonObj.get("order_direction").isJsonNull()) {
        OrderDirectionEnum.validateJsonElement(jsonObj.get("order_direction"));
      }
      if ((jsonObj.get("published_since") != null && !jsonObj.get("published_since").isJsonNull()) && !jsonObj.get("published_since").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published_since` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published_since").toString()));
      }
      if ((jsonObj.get("search_for") != null && !jsonObj.get("search_for").isJsonNull()) && !jsonObj.get("search_for").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_for` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_for").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrivateCollectionSearch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrivateCollectionSearch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrivateCollectionSearch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrivateCollectionSearch.class));

       return (TypeAdapter<T>) new TypeAdapter<PrivateCollectionSearch>() {
           @Override
           public void write(JsonWriter out, PrivateCollectionSearch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrivateCollectionSearch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrivateCollectionSearch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrivateCollectionSearch
   * @throws IOException if the JSON string is invalid with respect to PrivateCollectionSearch
   */
  public static PrivateCollectionSearch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrivateCollectionSearch.class);
  }

  /**
   * Convert an instance of PrivateCollectionSearch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

