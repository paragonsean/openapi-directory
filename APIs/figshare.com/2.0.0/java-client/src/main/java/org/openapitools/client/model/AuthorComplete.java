/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AuthorComplete
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:45.951625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuthorComplete {
  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Long groupId;

  public static final String SERIALIZED_NAME_INSTITUTION_ID = "institution_id";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_ID)
  private Long institutionId;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "is_public";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Long isPublic;

  public static final String SERIALIZED_NAME_JOB_TITLE = "job_title";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_ORCID_ID = "orcid_id";
  @SerializedName(SERIALIZED_NAME_ORCID_ID)
  private String orcidId;

  public static final String SERIALIZED_NAME_URL_NAME = "url_name";
  @SerializedName(SERIALIZED_NAME_URL_NAME)
  private String urlName;

  public AuthorComplete() {
  }

  public AuthorComplete firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First Name
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public AuthorComplete groupId(Long groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * Group id
   * @return groupId
   */
  @javax.annotation.Nonnull
  public Long getGroupId() {
    return groupId;
  }

  public void setGroupId(Long groupId) {
    this.groupId = groupId;
  }


  public AuthorComplete institutionId(Long institutionId) {
    this.institutionId = institutionId;
    return this;
  }

  /**
   * Institution id
   * @return institutionId
   */
  @javax.annotation.Nonnull
  public Long getInstitutionId() {
    return institutionId;
  }

  public void setInstitutionId(Long institutionId) {
    this.institutionId = institutionId;
  }


  public AuthorComplete isPublic(Long isPublic) {
    this.isPublic = isPublic;
    return this;
  }

  /**
   * if 1 then the author has published items
   * @return isPublic
   */
  @javax.annotation.Nonnull
  public Long getIsPublic() {
    return isPublic;
  }

  public void setIsPublic(Long isPublic) {
    this.isPublic = isPublic;
  }


  public AuthorComplete jobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  /**
   * Job title
   * @return jobTitle
   */
  @javax.annotation.Nonnull
  public String getJobTitle() {
    return jobTitle;
  }

  public void setJobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
  }


  public AuthorComplete lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last Name
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public AuthorComplete fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Author full name
   * @return fullName
   */
  @javax.annotation.Nonnull
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public AuthorComplete id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Author id
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public AuthorComplete isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * True if author has published items
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public AuthorComplete orcidId(String orcidId) {
    this.orcidId = orcidId;
    return this;
  }

  /**
   * Author Orcid
   * @return orcidId
   */
  @javax.annotation.Nonnull
  public String getOrcidId() {
    return orcidId;
  }

  public void setOrcidId(String orcidId) {
    this.orcidId = orcidId;
  }


  public AuthorComplete urlName(String urlName) {
    this.urlName = urlName;
    return this;
  }

  /**
   * Author url name
   * @return urlName
   */
  @javax.annotation.Nonnull
  public String getUrlName() {
    return urlName;
  }

  public void setUrlName(String urlName) {
    this.urlName = urlName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthorComplete authorComplete = (AuthorComplete) o;
    return Objects.equals(this.firstName, authorComplete.firstName) &&
        Objects.equals(this.groupId, authorComplete.groupId) &&
        Objects.equals(this.institutionId, authorComplete.institutionId) &&
        Objects.equals(this.isPublic, authorComplete.isPublic) &&
        Objects.equals(this.jobTitle, authorComplete.jobTitle) &&
        Objects.equals(this.lastName, authorComplete.lastName) &&
        Objects.equals(this.fullName, authorComplete.fullName) &&
        Objects.equals(this.id, authorComplete.id) &&
        Objects.equals(this.isActive, authorComplete.isActive) &&
        Objects.equals(this.orcidId, authorComplete.orcidId) &&
        Objects.equals(this.urlName, authorComplete.urlName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstName, groupId, institutionId, isPublic, jobTitle, lastName, fullName, id, isActive, orcidId, urlName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthorComplete {\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    institutionId: ").append(toIndentedString(institutionId)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    orcidId: ").append(toIndentedString(orcidId)).append("\n");
    sb.append("    urlName: ").append(toIndentedString(urlName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("full_name");
    openapiFields.add("id");
    openapiFields.add("is_active");
    openapiFields.add("orcid_id");
    openapiFields.add("url_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("first_name");
    openapiRequiredFields.add("group_id");
    openapiRequiredFields.add("institution_id");
    openapiRequiredFields.add("is_public");
    openapiRequiredFields.add("job_title");
    openapiRequiredFields.add("last_name");
    openapiRequiredFields.add("full_name");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("is_active");
    openapiRequiredFields.add("orcid_id");
    openapiRequiredFields.add("url_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthorComplete
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthorComplete.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthorComplete is not found in the empty JSON string", AuthorComplete.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthorComplete.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthorComplete` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthorComplete.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if (!jsonObj.get("job_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_title").toString()));
      }
      if (!jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if (!jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if (!jsonObj.get("orcid_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orcid_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orcid_id").toString()));
      }
      if (!jsonObj.get("url_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthorComplete.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthorComplete' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthorComplete> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthorComplete.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthorComplete>() {
           @Override
           public void write(JsonWriter out, AuthorComplete value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthorComplete read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthorComplete given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthorComplete
   * @throws IOException if the JSON string is invalid with respect to AuthorComplete
   */
  public static AuthorComplete fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthorComplete.class);
  }

  /**
   * Convert an instance of AuthorComplete to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

