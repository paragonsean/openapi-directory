/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Author;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.CustomArticleField;
import org.openapitools.client.model.FundingInformation;
import org.openapitools.client.model.Timeline;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CollectionComplete
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:45.951625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CollectionComplete {
  public static final String SERIALIZED_NAME_ARTICLES_COUNT = "articles_count";
  @SerializedName(SERIALIZED_NAME_ARTICLES_COUNT)
  private Long articlesCount;

  public static final String SERIALIZED_NAME_AUTHORS = "authors";
  @SerializedName(SERIALIZED_NAME_AUTHORS)
  private List<Author> authors = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<Category> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CITATION = "citation";
  @SerializedName(SERIALIZED_NAME_CITATION)
  private String citation;

  public static final String SERIALIZED_NAME_CREATED_DATE = "created_date";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<CustomArticleField> customFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FUNDING = "funding";
  @SerializedName(SERIALIZED_NAME_FUNDING)
  private List<FundingInformation> funding = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Long groupId;

  public static final String SERIALIZED_NAME_GROUP_RESOURCE_ID = "group_resource_id";
  @SerializedName(SERIALIZED_NAME_GROUP_RESOURCE_ID)
  private String groupResourceId;

  public static final String SERIALIZED_NAME_INSTITUTION_ID = "institution_id";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_ID)
  private Long institutionId;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modified_date";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private String modifiedDate;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  public static final String SERIALIZED_NAME_REFERENCES = "references";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  private List<String> references = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_DOI = "resource_doi";
  @SerializedName(SERIALIZED_NAME_RESOURCE_DOI)
  private String resourceDoi;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resource_id";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_LINK = "resource_link";
  @SerializedName(SERIALIZED_NAME_RESOURCE_LINK)
  private String resourceLink;

  public static final String SERIALIZED_NAME_RESOURCE_TITLE = "resource_title";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TITLE)
  private String resourceTitle;

  public static final String SERIALIZED_NAME_RESOURCE_VERSION = "resource_version";
  @SerializedName(SERIALIZED_NAME_RESOURCE_VERSION)
  private Long resourceVersion;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMELINE = "timeline";
  @SerializedName(SERIALIZED_NAME_TIMELINE)
  private Timeline timeline;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Long version;

  public static final String SERIALIZED_NAME_DOI = "doi";
  @SerializedName(SERIALIZED_NAME_DOI)
  private String doi;

  public static final String SERIALIZED_NAME_HANDLE = "handle";
  @SerializedName(SERIALIZED_NAME_HANDLE)
  private String handle;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_PUBLISHED_DATE = "published_date";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_DATE)
  private String publishedDate;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public CollectionComplete() {
  }

  public CollectionComplete articlesCount(Long articlesCount) {
    this.articlesCount = articlesCount;
    return this;
  }

  /**
   * Number of articles in collection
   * @return articlesCount
   */
  @javax.annotation.Nonnull
  public Long getArticlesCount() {
    return articlesCount;
  }

  public void setArticlesCount(Long articlesCount) {
    this.articlesCount = articlesCount;
  }


  public CollectionComplete authors(List<Author> authors) {
    this.authors = authors;
    return this;
  }

  public CollectionComplete addAuthorsItem(Author authorsItem) {
    if (this.authors == null) {
      this.authors = new ArrayList<>();
    }
    this.authors.add(authorsItem);
    return this;
  }

  /**
   * List of collection authors
   * @return authors
   */
  @javax.annotation.Nonnull
  public List<Author> getAuthors() {
    return authors;
  }

  public void setAuthors(List<Author> authors) {
    this.authors = authors;
  }


  public CollectionComplete categories(List<Category> categories) {
    this.categories = categories;
    return this;
  }

  public CollectionComplete addCategoriesItem(Category categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * List of collection categories
   * @return categories
   */
  @javax.annotation.Nonnull
  public List<Category> getCategories() {
    return categories;
  }

  public void setCategories(List<Category> categories) {
    this.categories = categories;
  }


  public CollectionComplete citation(String citation) {
    this.citation = citation;
    return this;
  }

  /**
   * Collection citation
   * @return citation
   */
  @javax.annotation.Nonnull
  public String getCitation() {
    return citation;
  }

  public void setCitation(String citation) {
    this.citation = citation;
  }


  public CollectionComplete createdDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Date when collection was created
   * @return createdDate
   */
  @javax.annotation.Nonnull
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  public CollectionComplete customFields(List<CustomArticleField> customFields) {
    this.customFields = customFields;
    return this;
  }

  public CollectionComplete addCustomFieldsItem(CustomArticleField customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

  /**
   * Collection custom fields
   * @return customFields
   */
  @javax.annotation.Nonnull
  public List<CustomArticleField> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(List<CustomArticleField> customFields) {
    this.customFields = customFields;
  }


  public CollectionComplete description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Collection description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CollectionComplete funding(List<FundingInformation> funding) {
    this.funding = funding;
    return this;
  }

  public CollectionComplete addFundingItem(FundingInformation fundingItem) {
    if (this.funding == null) {
      this.funding = new ArrayList<>();
    }
    this.funding.add(fundingItem);
    return this;
  }

  /**
   * Full Collection funding information
   * @return funding
   */
  @javax.annotation.Nonnull
  public List<FundingInformation> getFunding() {
    return funding;
  }

  public void setFunding(List<FundingInformation> funding) {
    this.funding = funding;
  }


  public CollectionComplete groupId(Long groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * Collection group
   * @return groupId
   */
  @javax.annotation.Nonnull
  public Long getGroupId() {
    return groupId;
  }

  public void setGroupId(Long groupId) {
    this.groupId = groupId;
  }


  public CollectionComplete groupResourceId(String groupResourceId) {
    this.groupResourceId = groupResourceId;
    return this;
  }

  /**
   * Collection group resource id
   * @return groupResourceId
   */
  @javax.annotation.Nullable
  public String getGroupResourceId() {
    return groupResourceId;
  }

  public void setGroupResourceId(String groupResourceId) {
    this.groupResourceId = groupResourceId;
  }


  public CollectionComplete institutionId(Long institutionId) {
    this.institutionId = institutionId;
    return this;
  }

  /**
   * Collection institution
   * @return institutionId
   */
  @javax.annotation.Nonnull
  public Long getInstitutionId() {
    return institutionId;
  }

  public void setInstitutionId(Long institutionId) {
    this.institutionId = institutionId;
  }


  public CollectionComplete modifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Date when collection was last modified
   * @return modifiedDate
   */
  @javax.annotation.Nonnull
  public String getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public CollectionComplete _public(Boolean _public) {
    this._public = _public;
    return this;
  }

  /**
   * True if collection is published
   * @return _public
   */
  @javax.annotation.Nonnull
  public Boolean getPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  public CollectionComplete references(List<String> references) {
    this.references = references;
    return this;
  }

  public CollectionComplete addReferencesItem(String referencesItem) {
    if (this.references == null) {
      this.references = new ArrayList<>();
    }
    this.references.add(referencesItem);
    return this;
  }

  /**
   * List of collection references
   * @return references
   */
  @javax.annotation.Nonnull
  public List<String> getReferences() {
    return references;
  }

  public void setReferences(List<String> references) {
    this.references = references;
  }


  public CollectionComplete resourceDoi(String resourceDoi) {
    this.resourceDoi = resourceDoi;
    return this;
  }

  /**
   * Collection resource doi
   * @return resourceDoi
   */
  @javax.annotation.Nonnull
  public String getResourceDoi() {
    return resourceDoi;
  }

  public void setResourceDoi(String resourceDoi) {
    this.resourceDoi = resourceDoi;
  }


  public CollectionComplete resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Collection resource id
   * @return resourceId
   */
  @javax.annotation.Nonnull
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public CollectionComplete resourceLink(String resourceLink) {
    this.resourceLink = resourceLink;
    return this;
  }

  /**
   * Collection resource link
   * @return resourceLink
   */
  @javax.annotation.Nonnull
  public String getResourceLink() {
    return resourceLink;
  }

  public void setResourceLink(String resourceLink) {
    this.resourceLink = resourceLink;
  }


  public CollectionComplete resourceTitle(String resourceTitle) {
    this.resourceTitle = resourceTitle;
    return this;
  }

  /**
   * Collection resource title
   * @return resourceTitle
   */
  @javax.annotation.Nonnull
  public String getResourceTitle() {
    return resourceTitle;
  }

  public void setResourceTitle(String resourceTitle) {
    this.resourceTitle = resourceTitle;
  }


  public CollectionComplete resourceVersion(Long resourceVersion) {
    this.resourceVersion = resourceVersion;
    return this;
  }

  /**
   * Collection resource version
   * @return resourceVersion
   */
  @javax.annotation.Nonnull
  public Long getResourceVersion() {
    return resourceVersion;
  }

  public void setResourceVersion(Long resourceVersion) {
    this.resourceVersion = resourceVersion;
  }


  public CollectionComplete tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public CollectionComplete addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * List of collection tags
   * @return tags
   */
  @javax.annotation.Nonnull
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public CollectionComplete timeline(Timeline timeline) {
    this.timeline = timeline;
    return this;
  }

  /**
   * Get timeline
   * @return timeline
   */
  @javax.annotation.Nonnull
  public Timeline getTimeline() {
    return timeline;
  }

  public void setTimeline(Timeline timeline) {
    this.timeline = timeline;
  }


  public CollectionComplete version(Long version) {
    this.version = version;
    return this;
  }

  /**
   * Collection version
   * @return version
   */
  @javax.annotation.Nonnull
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }


  public CollectionComplete doi(String doi) {
    this.doi = doi;
    return this;
  }

  /**
   * Collection DOI
   * @return doi
   */
  @javax.annotation.Nonnull
  public String getDoi() {
    return doi;
  }

  public void setDoi(String doi) {
    this.doi = doi;
  }


  public CollectionComplete handle(String handle) {
    this.handle = handle;
    return this;
  }

  /**
   * Collection Handle
   * @return handle
   */
  @javax.annotation.Nonnull
  public String getHandle() {
    return handle;
  }

  public void setHandle(String handle) {
    this.handle = handle;
  }


  public CollectionComplete id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Collection id
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public CollectionComplete publishedDate(String publishedDate) {
    this.publishedDate = publishedDate;
    return this;
  }

  /**
   * Date when collection was published 
   * @return publishedDate
   */
  @javax.annotation.Nullable
  public String getPublishedDate() {
    return publishedDate;
  }

  public void setPublishedDate(String publishedDate) {
    this.publishedDate = publishedDate;
  }


  public CollectionComplete title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Collection title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CollectionComplete url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Api endpoint
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectionComplete collectionComplete = (CollectionComplete) o;
    return Objects.equals(this.articlesCount, collectionComplete.articlesCount) &&
        Objects.equals(this.authors, collectionComplete.authors) &&
        Objects.equals(this.categories, collectionComplete.categories) &&
        Objects.equals(this.citation, collectionComplete.citation) &&
        Objects.equals(this.createdDate, collectionComplete.createdDate) &&
        Objects.equals(this.customFields, collectionComplete.customFields) &&
        Objects.equals(this.description, collectionComplete.description) &&
        Objects.equals(this.funding, collectionComplete.funding) &&
        Objects.equals(this.groupId, collectionComplete.groupId) &&
        Objects.equals(this.groupResourceId, collectionComplete.groupResourceId) &&
        Objects.equals(this.institutionId, collectionComplete.institutionId) &&
        Objects.equals(this.modifiedDate, collectionComplete.modifiedDate) &&
        Objects.equals(this._public, collectionComplete._public) &&
        Objects.equals(this.references, collectionComplete.references) &&
        Objects.equals(this.resourceDoi, collectionComplete.resourceDoi) &&
        Objects.equals(this.resourceId, collectionComplete.resourceId) &&
        Objects.equals(this.resourceLink, collectionComplete.resourceLink) &&
        Objects.equals(this.resourceTitle, collectionComplete.resourceTitle) &&
        Objects.equals(this.resourceVersion, collectionComplete.resourceVersion) &&
        Objects.equals(this.tags, collectionComplete.tags) &&
        Objects.equals(this.timeline, collectionComplete.timeline) &&
        Objects.equals(this.version, collectionComplete.version) &&
        Objects.equals(this.doi, collectionComplete.doi) &&
        Objects.equals(this.handle, collectionComplete.handle) &&
        Objects.equals(this.id, collectionComplete.id) &&
        Objects.equals(this.publishedDate, collectionComplete.publishedDate) &&
        Objects.equals(this.title, collectionComplete.title) &&
        Objects.equals(this.url, collectionComplete.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(articlesCount, authors, categories, citation, createdDate, customFields, description, funding, groupId, groupResourceId, institutionId, modifiedDate, _public, references, resourceDoi, resourceId, resourceLink, resourceTitle, resourceVersion, tags, timeline, version, doi, handle, id, publishedDate, title, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectionComplete {\n");
    sb.append("    articlesCount: ").append(toIndentedString(articlesCount)).append("\n");
    sb.append("    authors: ").append(toIndentedString(authors)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    citation: ").append(toIndentedString(citation)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    funding: ").append(toIndentedString(funding)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    groupResourceId: ").append(toIndentedString(groupResourceId)).append("\n");
    sb.append("    institutionId: ").append(toIndentedString(institutionId)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    resourceDoi: ").append(toIndentedString(resourceDoi)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceLink: ").append(toIndentedString(resourceLink)).append("\n");
    sb.append("    resourceTitle: ").append(toIndentedString(resourceTitle)).append("\n");
    sb.append("    resourceVersion: ").append(toIndentedString(resourceVersion)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    timeline: ").append(toIndentedString(timeline)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    doi: ").append(toIndentedString(doi)).append("\n");
    sb.append("    handle: ").append(toIndentedString(handle)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    publishedDate: ").append(toIndentedString(publishedDate)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("doi");
    openapiFields.add("handle");
    openapiFields.add("id");
    openapiFields.add("published_date");
    openapiFields.add("timeline");
    openapiFields.add("title");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("articles_count");
    openapiRequiredFields.add("authors");
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("citation");
    openapiRequiredFields.add("created_date");
    openapiRequiredFields.add("custom_fields");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("funding");
    openapiRequiredFields.add("group_id");
    openapiRequiredFields.add("group_resource_id");
    openapiRequiredFields.add("institution_id");
    openapiRequiredFields.add("modified_date");
    openapiRequiredFields.add("public");
    openapiRequiredFields.add("references");
    openapiRequiredFields.add("resource_doi");
    openapiRequiredFields.add("resource_id");
    openapiRequiredFields.add("resource_link");
    openapiRequiredFields.add("resource_title");
    openapiRequiredFields.add("resource_version");
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("timeline");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("doi");
    openapiRequiredFields.add("handle");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("published_date");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CollectionComplete
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CollectionComplete.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CollectionComplete is not found in the empty JSON string", CollectionComplete.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CollectionComplete.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CollectionComplete` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CollectionComplete.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("authors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authors` to be an array in the JSON string but got `%s`", jsonObj.get("authors").toString()));
      }

      JsonArray jsonArrayauthors = jsonObj.getAsJsonArray("authors");
      // validate the required field `authors` (array)
      for (int i = 0; i < jsonArrayauthors.size(); i++) {
        Author.validateJsonElement(jsonArrayauthors.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }

      JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
      // validate the required field `categories` (array)
      for (int i = 0; i < jsonArraycategories.size(); i++) {
        Category.validateJsonElement(jsonArraycategories.get(i));
      };
      if (!jsonObj.get("citation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `citation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("citation").toString()));
      }
      if (!jsonObj.get("created_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_date").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("custom_fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_fields` to be an array in the JSON string but got `%s`", jsonObj.get("custom_fields").toString()));
      }

      JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("custom_fields");
      // validate the required field `custom_fields` (array)
      for (int i = 0; i < jsonArraycustomFields.size(); i++) {
        CustomArticleField.validateJsonElement(jsonArraycustomFields.get(i));
      };
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("funding").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `funding` to be an array in the JSON string but got `%s`", jsonObj.get("funding").toString()));
      }

      JsonArray jsonArrayfunding = jsonObj.getAsJsonArray("funding");
      // validate the required field `funding` (array)
      for (int i = 0; i < jsonArrayfunding.size(); i++) {
        FundingInformation.validateJsonElement(jsonArrayfunding.get(i));
      };
      if ((jsonObj.get("group_resource_id") != null && !jsonObj.get("group_resource_id").isJsonNull()) && !jsonObj.get("group_resource_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_resource_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_resource_id").toString()));
      }
      if (!jsonObj.get("modified_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_date").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("references") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("references").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `references` to be an array in the JSON string but got `%s`", jsonObj.get("references").toString()));
      }
      if (!jsonObj.get("resource_doi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_doi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_doi").toString()));
      }
      if (!jsonObj.get("resource_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_id").toString()));
      }
      if (!jsonObj.get("resource_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_link").toString()));
      }
      if (!jsonObj.get("resource_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_title").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // validate the required field `timeline`
      Timeline.validateJsonElement(jsonObj.get("timeline"));
      if (!jsonObj.get("doi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doi").toString()));
      }
      if (!jsonObj.get("handle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handle").toString()));
      }
      if ((jsonObj.get("published_date") != null && !jsonObj.get("published_date").isJsonNull()) && !jsonObj.get("published_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published_date").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CollectionComplete.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CollectionComplete' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CollectionComplete> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CollectionComplete.class));

       return (TypeAdapter<T>) new TypeAdapter<CollectionComplete>() {
           @Override
           public void write(JsonWriter out, CollectionComplete value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CollectionComplete read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CollectionComplete given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CollectionComplete
   * @throws IOException if the JSON string is invalid with respect to CollectionComplete
   */
  public static CollectionComplete fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CollectionComplete.class);
  }

  /**
   * Convert an instance of CollectionComplete to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

