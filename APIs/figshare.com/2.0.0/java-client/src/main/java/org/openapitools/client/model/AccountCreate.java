/*
 * Figshare API
 * Figshare apiv2. Using Swagger 2.0
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountCreate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:45.951625-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountCreate {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName = "";

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Long groupId;

  public static final String SERIALIZED_NAME_INSTITUTION_USER_ID = "institution_user_id";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_USER_ID)
  private String institutionUserId = "";

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName = "";

  public static final String SERIALIZED_NAME_QUOTA = "quota";
  @SerializedName(SERIALIZED_NAME_QUOTA)
  private Long quota;

  public static final String SERIALIZED_NAME_SYMPLECTIC_USER_ID = "symplectic_user_id";
  @SerializedName(SERIALIZED_NAME_SYMPLECTIC_USER_ID)
  private String symplecticUserId = "";

  public AccountCreate() {
  }

  public AccountCreate email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Email of account
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public AccountCreate firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First Name
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public AccountCreate groupId(Long groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups
   * @return groupId
   */
  @javax.annotation.Nullable
  public Long getGroupId() {
    return groupId;
  }

  public void setGroupId(Long groupId) {
    this.groupId = groupId;
  }


  public AccountCreate institutionUserId(String institutionUserId) {
    this.institutionUserId = institutionUserId;
    return this;
  }

  /**
   * Institution user id
   * @return institutionUserId
   */
  @javax.annotation.Nullable
  public String getInstitutionUserId() {
    return institutionUserId;
  }

  public void setInstitutionUserId(String institutionUserId) {
    this.institutionUserId = institutionUserId;
  }


  public AccountCreate isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Is account active
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public AccountCreate lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last Name
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public AccountCreate quota(Long quota) {
    this.quota = quota;
    return this;
  }

  /**
   * Account quota
   * @return quota
   */
  @javax.annotation.Nullable
  public Long getQuota() {
    return quota;
  }

  public void setQuota(Long quota) {
    this.quota = quota;
  }


  public AccountCreate symplecticUserId(String symplecticUserId) {
    this.symplecticUserId = symplecticUserId;
    return this;
  }

  /**
   * Symplectic user id
   * @return symplecticUserId
   */
  @javax.annotation.Nullable
  public String getSymplecticUserId() {
    return symplecticUserId;
  }

  public void setSymplecticUserId(String symplecticUserId) {
    this.symplecticUserId = symplecticUserId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountCreate accountCreate = (AccountCreate) o;
    return Objects.equals(this.email, accountCreate.email) &&
        Objects.equals(this.firstName, accountCreate.firstName) &&
        Objects.equals(this.groupId, accountCreate.groupId) &&
        Objects.equals(this.institutionUserId, accountCreate.institutionUserId) &&
        Objects.equals(this.isActive, accountCreate.isActive) &&
        Objects.equals(this.lastName, accountCreate.lastName) &&
        Objects.equals(this.quota, accountCreate.quota) &&
        Objects.equals(this.symplecticUserId, accountCreate.symplecticUserId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, firstName, groupId, institutionUserId, isActive, lastName, quota, symplecticUserId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountCreate {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    institutionUserId: ").append(toIndentedString(institutionUserId)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    quota: ").append(toIndentedString(quota)).append("\n");
    sb.append("    symplecticUserId: ").append(toIndentedString(symplecticUserId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("first_name");
    openapiFields.add("group_id");
    openapiFields.add("institution_user_id");
    openapiFields.add("is_active");
    openapiFields.add("last_name");
    openapiFields.add("quota");
    openapiFields.add("symplectic_user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("first_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountCreate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountCreate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountCreate is not found in the empty JSON string", AccountCreate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountCreate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountCreate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountCreate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("institution_user_id") != null && !jsonObj.get("institution_user_id").isJsonNull()) && !jsonObj.get("institution_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `institution_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("institution_user_id").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("symplectic_user_id") != null && !jsonObj.get("symplectic_user_id").isJsonNull()) && !jsonObj.get("symplectic_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symplectic_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symplectic_user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountCreate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountCreate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountCreate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountCreate.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountCreate>() {
           @Override
           public void write(JsonWriter out, AccountCreate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountCreate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountCreate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountCreate
   * @throws IOException if the JSON string is invalid with respect to AccountCreate
   */
  public static AccountCreate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountCreate.class);
  }

  /**
   * Convert an instance of AccountCreate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

