/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CorpusKeySemantics from './CorpusKeySemantics';
import VectaraservingCustomDimension from './VectaraservingCustomDimension';

/**
 * The ServingCorpusKey model module.
 * @module model/ServingCorpusKey
 * @version 1.0.0
 */
class ServingCorpusKey {
    /**
     * Constructs a new <code>ServingCorpusKey</code>.
     * @alias module:model/ServingCorpusKey
     */
    constructor() { 
        
        ServingCorpusKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServingCorpusKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServingCorpusKey} obj Optional instance to populate.
     * @return {module:model/ServingCorpusKey} The populated <code>ServingCorpusKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServingCorpusKey();

            if (data.hasOwnProperty('corpusId')) {
                obj['corpusId'] = ApiClient.convertToType(data['corpusId'], 'Number');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'Number');
            }
            if (data.hasOwnProperty('dim')) {
                obj['dim'] = ApiClient.convertToType(data['dim'], [VectaraservingCustomDimension]);
            }
            if (data.hasOwnProperty('metadataFilter')) {
                obj['metadataFilter'] = ApiClient.convertToType(data['metadataFilter'], 'String');
            }
            if (data.hasOwnProperty('semantics')) {
                obj['semantics'] = CorpusKeySemantics.constructFromObject(data['semantics']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServingCorpusKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServingCorpusKey</code>.
     */
    static validateJSON(data) {
        if (data['dim']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dim'])) {
                throw new Error("Expected the field `dim` to be an array in the JSON data but got " + data['dim']);
            }
            // validate the optional field `dim` (array)
            for (const item of data['dim']) {
                VectaraservingCustomDimension.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['metadataFilter'] && !(typeof data['metadataFilter'] === 'string' || data['metadataFilter'] instanceof String)) {
            throw new Error("Expected the field `metadataFilter` to be a primitive type in the JSON string but got " + data['metadataFilter']);
        }

        return true;
    }


}



/**
 * The Corpus ID.
 * @member {Number} corpusId
 */
ServingCorpusKey.prototype['corpusId'] = undefined;

/**
 * The Customer ID.
 * @member {Number} customerId
 */
ServingCorpusKey.prototype['customerId'] = undefined;

/**
 * Weights on custom dimensions for the corpus.
 * @member {Array.<module:model/VectaraservingCustomDimension>} dim
 */
ServingCorpusKey.prototype['dim'] = undefined;

/**
 * @member {String} metadataFilter
 */
ServingCorpusKey.prototype['metadataFilter'] = undefined;

/**
 * @member {module:model/CorpusKeySemantics} semantics
 */
ServingCorpusKey.prototype['semantics'] = undefined;






export default ServingCorpusKey;

