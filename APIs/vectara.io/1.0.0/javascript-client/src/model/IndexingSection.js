/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VectaraindexingCustomDimension from './VectaraindexingCustomDimension';

/**
 * The IndexingSection model module.
 * @module model/IndexingSection
 * @version 1.0.0
 */
class IndexingSection {
    /**
     * Constructs a new <code>IndexingSection</code>.
     * A section within a structured document.
     * @alias module:model/IndexingSection
     */
    constructor() { 
        
        IndexingSection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IndexingSection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IndexingSection} obj Optional instance to populate.
     * @return {module:model/IndexingSection} The populated <code>IndexingSection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IndexingSection();

            if (data.hasOwnProperty('customDims')) {
                obj['customDims'] = ApiClient.convertToType(data['customDims'], [VectaraindexingCustomDimension]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('metadataJson')) {
                obj['metadataJson'] = ApiClient.convertToType(data['metadataJson'], 'String');
            }
            if (data.hasOwnProperty('section')) {
                obj['section'] = ApiClient.convertToType(data['section'], [IndexingSection]);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IndexingSection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IndexingSection</code>.
     */
    static validateJSON(data) {
        if (data['customDims']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customDims'])) {
                throw new Error("Expected the field `customDims` to be an array in the JSON data but got " + data['customDims']);
            }
            // validate the optional field `customDims` (array)
            for (const item of data['customDims']) {
                VectaraindexingCustomDimension.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['metadataJson'] && !(typeof data['metadataJson'] === 'string' || data['metadataJson'] instanceof String)) {
            throw new Error("Expected the field `metadataJson` to be a primitive type in the JSON string but got " + data['metadataJson']);
        }
        if (data['section']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['section'])) {
                throw new Error("Expected the field `section` to be an array in the JSON data but got " + data['section']);
            }
            // validate the optional field `section` (array)
            for (const item of data['section']) {
                IndexingSection.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * A list of custom dimension values that are included in the generated representation of all subsections (i.e. sections contains by this section).
 * @member {Array.<module:model/VectaraindexingCustomDimension>} customDims
 */
IndexingSection.prototype['customDims'] = undefined;

/**
 * Optionally, the unique ID of this section. If set, it will be returned as metadata in query results.
 * @member {Number} id
 */
IndexingSection.prototype['id'] = undefined;

/**
 * Metadata about this section. This should be a json string. It is passed through the system, without being used at indexing time. It can be retrieved at query time.
 * @member {String} metadataJson
 */
IndexingSection.prototype['metadataJson'] = undefined;

/**
 * A list of subsections.
 * @member {Array.<module:model/IndexingSection>} section
 */
IndexingSection.prototype['section'] = undefined;

/**
 * The text of the section. This should never be empty.
 * @member {String} text
 */
IndexingSection.prototype['text'] = undefined;

/**
 * Optionally, the title of the section. This may be empty.
 * @member {String} title
 */
IndexingSection.prototype['title'] = undefined;






export default IndexingSection;

