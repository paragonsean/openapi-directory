/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServingAttribute from './ServingAttribute';
import ServingCorpusKey from './ServingCorpusKey';

/**
 * The ServingResponse model module.
 * @module model/ServingResponse
 * @version 1.0.0
 */
class ServingResponse {
    /**
     * Constructs a new <code>ServingResponse</code>.
     * @alias module:model/ServingResponse
     */
    constructor() { 
        
        ServingResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServingResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServingResponse} obj Optional instance to populate.
     * @return {module:model/ServingResponse} The populated <code>ServingResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServingResponse();

            if (data.hasOwnProperty('corpusKey')) {
                obj['corpusKey'] = ServingCorpusKey.constructFromObject(data['corpusKey']);
            }
            if (data.hasOwnProperty('documentIndex')) {
                obj['documentIndex'] = ApiClient.convertToType(data['documentIndex'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [ServingAttribute]);
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServingResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServingResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `corpusKey`
        if (data['corpusKey']) { // data not null
          ServingCorpusKey.validateJSON(data['corpusKey']);
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                ServingAttribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}



/**
 * @member {module:model/ServingCorpusKey} corpusKey
 */
ServingResponse.prototype['corpusKey'] = undefined;

/**
 * Use this ID to find the document in the ResponseSet.
 * @member {Number} documentIndex
 */
ServingResponse.prototype['documentIndex'] = undefined;

/**
 * @member {Array.<module:model/ServingAttribute>} metadata
 */
ServingResponse.prototype['metadata'] = undefined;

/**
 * The score used for ranking results.  The higher the score, the better the match.
 * @member {Number} score
 */
ServingResponse.prototype['score'] = undefined;

/**
 * @member {String} text
 */
ServingResponse.prototype['text'] = undefined;






export default ServingResponse;

