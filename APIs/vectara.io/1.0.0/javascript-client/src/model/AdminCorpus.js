/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdminDimension from './AdminDimension';
import AdminFilterAttribute from './AdminFilterAttribute';

/**
 * The AdminCorpus model module.
 * @module model/AdminCorpus
 * @version 1.0.0
 */
class AdminCorpus {
    /**
     * Constructs a new <code>AdminCorpus</code>.
     * @alias module:model/AdminCorpus
     */
    constructor() { 
        
        AdminCorpus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdminCorpus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdminCorpus} obj Optional instance to populate.
     * @return {module:model/AdminCorpus} The populated <code>AdminCorpus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdminCorpus();

            if (data.hasOwnProperty('customDimensions')) {
                obj['customDimensions'] = ApiClient.convertToType(data['customDimensions'], [AdminDimension]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dtProvision')) {
                obj['dtProvision'] = ApiClient.convertToType(data['dtProvision'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('encoderId')) {
                obj['encoderId'] = ApiClient.convertToType(data['encoderId'], 'String');
            }
            if (data.hasOwnProperty('encrypted')) {
                obj['encrypted'] = ApiClient.convertToType(data['encrypted'], 'Boolean');
            }
            if (data.hasOwnProperty('filterAttributes')) {
                obj['filterAttributes'] = ApiClient.convertToType(data['filterAttributes'], [AdminFilterAttribute]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('metadataMaxBytes')) {
                obj['metadataMaxBytes'] = ApiClient.convertToType(data['metadataMaxBytes'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('swapIenc')) {
                obj['swapIenc'] = ApiClient.convertToType(data['swapIenc'], 'Boolean');
            }
            if (data.hasOwnProperty('swapQenc')) {
                obj['swapQenc'] = ApiClient.convertToType(data['swapQenc'], 'Boolean');
            }
            if (data.hasOwnProperty('textless')) {
                obj['textless'] = ApiClient.convertToType(data['textless'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdminCorpus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdminCorpus</code>.
     */
    static validateJSON(data) {
        if (data['customDimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customDimensions'])) {
                throw new Error("Expected the field `customDimensions` to be an array in the JSON data but got " + data['customDimensions']);
            }
            // validate the optional field `customDimensions` (array)
            for (const item of data['customDimensions']) {
                AdminDimension.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['dtProvision'] && !(typeof data['dtProvision'] === 'string' || data['dtProvision'] instanceof String)) {
            throw new Error("Expected the field `dtProvision` to be a primitive type in the JSON string but got " + data['dtProvision']);
        }
        // ensure the json data is a string
        if (data['encoderId'] && !(typeof data['encoderId'] === 'string' || data['encoderId'] instanceof String)) {
            throw new Error("Expected the field `encoderId` to be a primitive type in the JSON string but got " + data['encoderId']);
        }
        if (data['filterAttributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filterAttributes'])) {
                throw new Error("Expected the field `filterAttributes` to be an array in the JSON data but got " + data['filterAttributes']);
            }
            // validate the optional field `filterAttributes` (array)
            for (const item of data['filterAttributes']) {
                AdminFilterAttribute.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/AdminDimension>} customDimensions
 */
AdminCorpus.prototype['customDimensions'] = undefined;

/**
 * A description for the corpus.
 * @member {String} description
 */
AdminCorpus.prototype['description'] = undefined;

/**
 * The time at which the corpus was provisioned.
 * @member {String} dtProvision
 */
AdminCorpus.prototype['dtProvision'] = undefined;

/**
 * Whether the corpus is enabled for use or not.
 * @member {Boolean} enabled
 */
AdminCorpus.prototype['enabled'] = undefined;

/**
 * This is an advanced setting for changing the underlying model type.  The default value is \"1\", which is Vectara's high-performing global model. Underlying models may be swapped for some paying customers by contacting our support team.
 * @member {String} encoderId
 */
AdminCorpus.prototype['encoderId'] = undefined;

/**
 * Encryption is on by default and cannot be turned off.
 * @member {Boolean} encrypted
 */
AdminCorpus.prototype['encrypted'] = undefined;

/**
 * @member {Array.<module:model/AdminFilterAttribute>} filterAttributes
 */
AdminCorpus.prototype['filterAttributes'] = undefined;

/**
 * The Corpus ID.
 * @member {Number} id
 */
AdminCorpus.prototype['id'] = undefined;

/**
 * An optional maximum size of the metadata that each document can contain.
 * @member {Number} metadataMaxBytes
 */
AdminCorpus.prototype['metadataMaxBytes'] = undefined;

/**
 * The name of the corpus.
 * @member {String} name
 */
AdminCorpus.prototype['name'] = undefined;

/**
 * The default query encoder is designed for normal question-answering types of queries when the text contains the answer.  Swapping the index encoder is generally rare, but can be used to help directly match questions to questions.  This can be useful if you have a FAQ dataset and you want to directly match the user question to the question in the FAQ.
 * @member {Boolean} swapIenc
 */
AdminCorpus.prototype['swapIenc'] = undefined;

/**
 * @member {Boolean} swapQenc
 */
AdminCorpus.prototype['swapQenc'] = undefined;

/**
 * When a corpus is \"textless\", Vectara does not store the original text. Instead, Vectara converts the text to vectors and only retains metadata.
 * @member {Boolean} textless
 */
AdminCorpus.prototype['textless'] = undefined;






export default AdminCorpus;

