/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FileUpload200Response from '../model/FileUpload200Response';
import FileUpload400Response from '../model/FileUpload400Response';
import GooglerpcStatus from '../model/GooglerpcStatus';
import VectaraDeleteDocumentRequest from '../model/VectaraDeleteDocumentRequest';
import VectaraIndexDocumentRequest from '../model/VectaraIndexDocumentRequest';
import VectaraIndexDocumentResponse from '../model/VectaraIndexDocumentResponse';

/**
* IndexService service.
* @module api/IndexServiceApi
* @version 1.0.0
*/
export default class IndexServiceApi {

    /**
    * Constructs a new IndexServiceApi. 
    * @alias module:api/IndexServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/IndexServiceApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * @param {Number} customerId The Customer ID to use for the request.
     * @param {module:model/VectaraDeleteDocumentRequest} vectaraDeleteDocumentRequest 
     * @param {module:api/IndexServiceApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    callDelete(customerId, vectaraDeleteDocumentRequest, callback) {
      let postBody = vectaraDeleteDocumentRequest;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling callDelete");
      }
      // verify the required parameter 'vectaraDeleteDocumentRequest' is set
      if (vectaraDeleteDocumentRequest === undefined || vectaraDeleteDocumentRequest === null) {
        throw new Error("Missing the required parameter 'vectaraDeleteDocumentRequest' when calling callDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'customer-id': customerId
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'oAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/delete-doc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileUpload operation.
     * @callback module:api/IndexServiceApi~fileUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileUpload200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * File Upload
     * @param {Number} c Customer ID
     * @param {Number} o Corpus ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} [d] If true, the server returns the extracted document that was indexed
     * @param {String} [docMetadata] A JSON string of any additional metadata you want attached to the file.
     * @param {File} [file] The file to be indexed into Vectara.
     * @param {module:api/IndexServiceApi~fileUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileUpload200Response}
     */
    fileUpload(c, o, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'c' is set
      if (c === undefined || c === null) {
        throw new Error("Missing the required parameter 'c' when calling fileUpload");
      }
      // verify the required parameter 'o' is set
      if (o === undefined || o === null) {
        throw new Error("Missing the required parameter 'o' when calling fileUpload");
      }

      let pathParams = {
      };
      let queryParams = {
        'c': c,
        'o': o,
        'd': opts['d']
      };
      let headerParams = {
      };
      let formParams = {
        'doc_metadata': opts['docMetadata'],
        'file': opts['file']
      };

      let authNames = ['ApiKeyAuth', 'oAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FileUpload200Response;
      return this.apiClient.callApi(
        '/v1/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the index operation.
     * @callback module:api/IndexServiceApi~indexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VectaraIndexDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Index
     * @param {Number} customerId The Customer ID to use for the request.
     * @param {module:model/VectaraIndexDocumentRequest} vectaraIndexDocumentRequest 
     * @param {module:api/IndexServiceApi~indexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VectaraIndexDocumentResponse}
     */
    index(customerId, vectaraIndexDocumentRequest, callback) {
      let postBody = vectaraIndexDocumentRequest;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling index");
      }
      // verify the required parameter 'vectaraIndexDocumentRequest' is set
      if (vectaraIndexDocumentRequest === undefined || vectaraIndexDocumentRequest === null) {
        throw new Error("Missing the required parameter 'vectaraIndexDocumentRequest' when calling index");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'customer-id': customerId
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'oAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VectaraIndexDocumentResponse;
      return this.apiClient.callApi(
        '/v1/index', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
