/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GooglerpcStatus from '../model/GooglerpcStatus';
import ServingBatchQueryRequest from '../model/ServingBatchQueryRequest';
import ServingBatchQueryResponse from '../model/ServingBatchQueryResponse';
import StreamResultOfServingResponseSet from '../model/StreamResultOfServingResponseSet';

/**
* QueryService service.
* @module api/QueryServiceApi
* @version 1.0.0
*/
export default class QueryServiceApi {

    /**
    * Constructs a new QueryServiceApi. 
    * @alias module:api/QueryServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the query operation.
     * @callback module:api/QueryServiceApi~queryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServingBatchQueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query
     * @param {Number} customerId The Customer ID to use for the request.
     * @param {module:model/ServingBatchQueryRequest} servingBatchQueryRequest 
     * @param {module:api/QueryServiceApi~queryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServingBatchQueryResponse}
     */
    query(customerId, servingBatchQueryRequest, callback) {
      let postBody = servingBatchQueryRequest;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling query");
      }
      // verify the required parameter 'servingBatchQueryRequest' is set
      if (servingBatchQueryRequest === undefined || servingBatchQueryRequest === null) {
        throw new Error("Missing the required parameter 'servingBatchQueryRequest' when calling query");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'customer-id': customerId
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'oAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServingBatchQueryResponse;
      return this.apiClient.callApi(
        '/v1/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the streamQuery operation.
     * @callback module:api/QueryServiceApi~streamQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamResultOfServingResponseSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stream Query
     * @param {Number} customerId The Customer ID to use for the request.
     * @param {module:model/ServingBatchQueryRequest} servingBatchQueryRequest 
     * @param {module:api/QueryServiceApi~streamQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamResultOfServingResponseSet}
     */
    streamQuery(customerId, servingBatchQueryRequest, callback) {
      let postBody = servingBatchQueryRequest;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling streamQuery");
      }
      // verify the required parameter 'servingBatchQueryRequest' is set
      if (servingBatchQueryRequest === undefined || servingBatchQueryRequest === null) {
        throw new Error("Missing the required parameter 'servingBatchQueryRequest' when calling streamQuery");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'customer-id': customerId
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'oAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StreamResultOfServingResponseSet;
      return this.apiClient.callApi(
        '/v1/stream-query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
