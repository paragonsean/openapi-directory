# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comvectara_status import ComvectaraStatus
from openapi_server.models.serving_response import ServingResponse
from openapi_server.models.serving_response_set_document import ServingResponseSetDocument
from openapi_server import util


class ServingResponseSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document: List[ServingResponseSetDocument]=None, response: List[ServingResponse]=None, status: List[ComvectaraStatus]=None):
        """ServingResponseSet - a model defined in OpenAPI

        :param document: The document of this ServingResponseSet.
        :param response: The response of this ServingResponseSet.
        :param status: The status of this ServingResponseSet.
        """
        self.openapi_types = {
            'document': List[ServingResponseSetDocument],
            'response': List[ServingResponse],
            'status': List[ComvectaraStatus]
        }

        self.attribute_map = {
            'document': 'document',
            'response': 'response',
            'status': 'status'
        }

        self._document = document
        self._response = response
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServingResponseSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The servingResponseSet of this ServingResponseSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document(self):
        """Gets the document of this ServingResponseSet.


        :return: The document of this ServingResponseSet.
        :rtype: List[ServingResponseSetDocument]
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this ServingResponseSet.


        :param document: The document of this ServingResponseSet.
        :type document: List[ServingResponseSetDocument]
        """

        self._document = document

    @property
    def response(self):
        """Gets the response of this ServingResponseSet.


        :return: The response of this ServingResponseSet.
        :rtype: List[ServingResponse]
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this ServingResponseSet.


        :param response: The response of this ServingResponseSet.
        :type response: List[ServingResponse]
        """

        self._response = response

    @property
    def status(self):
        """Gets the status of this ServingResponseSet.

        Potentially multiple warnings.

        :return: The status of this ServingResponseSet.
        :rtype: List[ComvectaraStatus]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServingResponseSet.

        Potentially multiple warnings.

        :param status: The status of this ServingResponseSet.
        :type status: List[ComvectaraStatus]
        """

        self._status = status
