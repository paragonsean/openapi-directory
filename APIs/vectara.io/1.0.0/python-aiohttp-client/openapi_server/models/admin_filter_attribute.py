# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.admin_filter_attribute_level import AdminFilterAttributeLevel
from openapi_server.models.admin_filter_attribute_type import AdminFilterAttributeType
from openapi_server import util


class AdminFilterAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, indexed: bool=None, level: AdminFilterAttributeLevel=AdminFilterAttributeLevel.UNDEFINED, name: str=None, type: AdminFilterAttributeType=AdminFilterAttributeType.UNDEFINED):
        """AdminFilterAttribute - a model defined in OpenAPI

        :param description: The description of this AdminFilterAttribute.
        :param indexed: The indexed of this AdminFilterAttribute.
        :param level: The level of this AdminFilterAttribute.
        :param name: The name of this AdminFilterAttribute.
        :param type: The type of this AdminFilterAttribute.
        """
        self.openapi_types = {
            'description': str,
            'indexed': bool,
            'level': AdminFilterAttributeLevel,
            'name': str,
            'type': AdminFilterAttributeType
        }

        self.attribute_map = {
            'description': 'description',
            'indexed': 'indexed',
            'level': 'level',
            'name': 'name',
            'type': 'type'
        }

        self._description = description
        self._indexed = indexed
        self._level = level
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminFilterAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The adminFilterAttribute of this AdminFilterAttribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this AdminFilterAttribute.

        An optional description.

        :return: The description of this AdminFilterAttribute.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AdminFilterAttribute.

        An optional description.

        :param description: The description of this AdminFilterAttribute.
        :type description: str
        """

        self._description = description

    @property
    def indexed(self):
        """Gets the indexed of this AdminFilterAttribute.

        Whether the field is indexed for maximum query speed.

        :return: The indexed of this AdminFilterAttribute.
        :rtype: bool
        """
        return self._indexed

    @indexed.setter
    def indexed(self, indexed):
        """Sets the indexed of this AdminFilterAttribute.

        Whether the field is indexed for maximum query speed.

        :param indexed: The indexed of this AdminFilterAttribute.
        :type indexed: bool
        """

        self._indexed = indexed

    @property
    def level(self):
        """Gets the level of this AdminFilterAttribute.


        :return: The level of this AdminFilterAttribute.
        :rtype: AdminFilterAttributeLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this AdminFilterAttribute.


        :param level: The level of this AdminFilterAttribute.
        :type level: AdminFilterAttributeLevel
        """

        self._level = level

    @property
    def name(self):
        """Gets the name of this AdminFilterAttribute.

        Name of the field, as seen in metadata.

        :return: The name of this AdminFilterAttribute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdminFilterAttribute.

        Name of the field, as seen in metadata.

        :param name: The name of this AdminFilterAttribute.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this AdminFilterAttribute.


        :return: The type of this AdminFilterAttribute.
        :rtype: AdminFilterAttributeType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AdminFilterAttribute.


        :param type: The type of this AdminFilterAttribute.
        :type type: AdminFilterAttributeType
        """

        self._type = type
