# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comvectara_status import ComvectaraStatus
from openapi_server.models.serving_performance_metrics import ServingPerformanceMetrics
from openapi_server.models.serving_response_set import ServingResponseSet
from openapi_server import util


class ServingBatchQueryResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metrics: ServingPerformanceMetrics=None, response_set: List[ServingResponseSet]=None, status: List[ComvectaraStatus]=None):
        """ServingBatchQueryResponse - a model defined in OpenAPI

        :param metrics: The metrics of this ServingBatchQueryResponse.
        :param response_set: The response_set of this ServingBatchQueryResponse.
        :param status: The status of this ServingBatchQueryResponse.
        """
        self.openapi_types = {
            'metrics': ServingPerformanceMetrics,
            'response_set': List[ServingResponseSet],
            'status': List[ComvectaraStatus]
        }

        self.attribute_map = {
            'metrics': 'metrics',
            'response_set': 'responseSet',
            'status': 'status'
        }

        self._metrics = metrics
        self._response_set = response_set
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServingBatchQueryResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The servingBatchQueryResponse of this ServingBatchQueryResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metrics(self):
        """Gets the metrics of this ServingBatchQueryResponse.


        :return: The metrics of this ServingBatchQueryResponse.
        :rtype: ServingPerformanceMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ServingBatchQueryResponse.


        :param metrics: The metrics of this ServingBatchQueryResponse.
        :type metrics: ServingPerformanceMetrics
        """

        self._metrics = metrics

    @property
    def response_set(self):
        """Gets the response_set of this ServingBatchQueryResponse.


        :return: The response_set of this ServingBatchQueryResponse.
        :rtype: List[ServingResponseSet]
        """
        return self._response_set

    @response_set.setter
    def response_set(self, response_set):
        """Sets the response_set of this ServingBatchQueryResponse.


        :param response_set: The response_set of this ServingBatchQueryResponse.
        :type response_set: List[ServingResponseSet]
        """

        self._response_set = response_set

    @property
    def status(self):
        """Gets the status of this ServingBatchQueryResponse.


        :return: The status of this ServingBatchQueryResponse.
        :rtype: List[ComvectaraStatus]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServingBatchQueryResponse.


        :param status: The status of this ServingBatchQueryResponse.
        :type status: List[ComvectaraStatus]
        """

        self._status = status
