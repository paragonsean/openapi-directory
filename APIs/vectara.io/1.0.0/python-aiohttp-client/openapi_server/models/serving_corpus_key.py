# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.corpus_key_semantics import CorpusKeySemantics
from openapi_server.models.vectaraserving_custom_dimension import VectaraservingCustomDimension
from openapi_server import util


class ServingCorpusKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, corpus_id: int=None, customer_id: int=None, dim: List[VectaraservingCustomDimension]=None, metadata_filter: str=None, semantics: CorpusKeySemantics=CorpusKeySemantics.DEFAULT):
        """ServingCorpusKey - a model defined in OpenAPI

        :param corpus_id: The corpus_id of this ServingCorpusKey.
        :param customer_id: The customer_id of this ServingCorpusKey.
        :param dim: The dim of this ServingCorpusKey.
        :param metadata_filter: The metadata_filter of this ServingCorpusKey.
        :param semantics: The semantics of this ServingCorpusKey.
        """
        self.openapi_types = {
            'corpus_id': int,
            'customer_id': int,
            'dim': List[VectaraservingCustomDimension],
            'metadata_filter': str,
            'semantics': CorpusKeySemantics
        }

        self.attribute_map = {
            'corpus_id': 'corpusId',
            'customer_id': 'customerId',
            'dim': 'dim',
            'metadata_filter': 'metadataFilter',
            'semantics': 'semantics'
        }

        self._corpus_id = corpus_id
        self._customer_id = customer_id
        self._dim = dim
        self._metadata_filter = metadata_filter
        self._semantics = semantics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServingCorpusKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The servingCorpusKey of this ServingCorpusKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def corpus_id(self):
        """Gets the corpus_id of this ServingCorpusKey.

        The Corpus ID.

        :return: The corpus_id of this ServingCorpusKey.
        :rtype: int
        """
        return self._corpus_id

    @corpus_id.setter
    def corpus_id(self, corpus_id):
        """Sets the corpus_id of this ServingCorpusKey.

        The Corpus ID.

        :param corpus_id: The corpus_id of this ServingCorpusKey.
        :type corpus_id: int
        """

        self._corpus_id = corpus_id

    @property
    def customer_id(self):
        """Gets the customer_id of this ServingCorpusKey.

        The Customer ID.

        :return: The customer_id of this ServingCorpusKey.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ServingCorpusKey.

        The Customer ID.

        :param customer_id: The customer_id of this ServingCorpusKey.
        :type customer_id: int
        """

        self._customer_id = customer_id

    @property
    def dim(self):
        """Gets the dim of this ServingCorpusKey.

        Weights on custom dimensions for the corpus.

        :return: The dim of this ServingCorpusKey.
        :rtype: List[VectaraservingCustomDimension]
        """
        return self._dim

    @dim.setter
    def dim(self, dim):
        """Sets the dim of this ServingCorpusKey.

        Weights on custom dimensions for the corpus.

        :param dim: The dim of this ServingCorpusKey.
        :type dim: List[VectaraservingCustomDimension]
        """

        self._dim = dim

    @property
    def metadata_filter(self):
        """Gets the metadata_filter of this ServingCorpusKey.


        :return: The metadata_filter of this ServingCorpusKey.
        :rtype: str
        """
        return self._metadata_filter

    @metadata_filter.setter
    def metadata_filter(self, metadata_filter):
        """Sets the metadata_filter of this ServingCorpusKey.


        :param metadata_filter: The metadata_filter of this ServingCorpusKey.
        :type metadata_filter: str
        """

        self._metadata_filter = metadata_filter

    @property
    def semantics(self):
        """Gets the semantics of this ServingCorpusKey.


        :return: The semantics of this ServingCorpusKey.
        :rtype: CorpusKeySemantics
        """
        return self._semantics

    @semantics.setter
    def semantics(self, semantics):
        """Sets the semantics of this ServingCorpusKey.


        :param semantics: The semantics of this ServingCorpusKey.
        :type semantics: CorpusKeySemantics
        """

        self._semantics = semantics
