# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.serving_attribute import ServingAttribute
from openapi_server.models.serving_corpus_key import ServingCorpusKey
from openapi_server import util


class ServingResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, corpus_key: ServingCorpusKey=None, document_index: int=None, metadata: List[ServingAttribute]=None, score: float=None, text: str=None):
        """ServingResponse - a model defined in OpenAPI

        :param corpus_key: The corpus_key of this ServingResponse.
        :param document_index: The document_index of this ServingResponse.
        :param metadata: The metadata of this ServingResponse.
        :param score: The score of this ServingResponse.
        :param text: The text of this ServingResponse.
        """
        self.openapi_types = {
            'corpus_key': ServingCorpusKey,
            'document_index': int,
            'metadata': List[ServingAttribute],
            'score': float,
            'text': str
        }

        self.attribute_map = {
            'corpus_key': 'corpusKey',
            'document_index': 'documentIndex',
            'metadata': 'metadata',
            'score': 'score',
            'text': 'text'
        }

        self._corpus_key = corpus_key
        self._document_index = document_index
        self._metadata = metadata
        self._score = score
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServingResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The servingResponse of this ServingResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def corpus_key(self):
        """Gets the corpus_key of this ServingResponse.


        :return: The corpus_key of this ServingResponse.
        :rtype: ServingCorpusKey
        """
        return self._corpus_key

    @corpus_key.setter
    def corpus_key(self, corpus_key):
        """Sets the corpus_key of this ServingResponse.


        :param corpus_key: The corpus_key of this ServingResponse.
        :type corpus_key: ServingCorpusKey
        """

        self._corpus_key = corpus_key

    @property
    def document_index(self):
        """Gets the document_index of this ServingResponse.

        Use this ID to find the document in the ResponseSet.

        :return: The document_index of this ServingResponse.
        :rtype: int
        """
        return self._document_index

    @document_index.setter
    def document_index(self, document_index):
        """Sets the document_index of this ServingResponse.

        Use this ID to find the document in the ResponseSet.

        :param document_index: The document_index of this ServingResponse.
        :type document_index: int
        """

        self._document_index = document_index

    @property
    def metadata(self):
        """Gets the metadata of this ServingResponse.


        :return: The metadata of this ServingResponse.
        :rtype: List[ServingAttribute]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ServingResponse.


        :param metadata: The metadata of this ServingResponse.
        :type metadata: List[ServingAttribute]
        """

        self._metadata = metadata

    @property
    def score(self):
        """Gets the score of this ServingResponse.

        The score used for ranking results.  The higher the score, the better the match.

        :return: The score of this ServingResponse.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ServingResponse.

        The score used for ranking results.  The higher the score, the better the match.

        :param score: The score of this ServingResponse.
        :type score: float
        """

        self._score = score

    @property
    def text(self):
        """Gets the text of this ServingResponse.


        :return: The text of this ServingResponse.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ServingResponse.


        :param text: The text of this ServingResponse.
        :type text: str
        """

        self._text = text
