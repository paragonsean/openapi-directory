# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.admin_dimension import AdminDimension
from openapi_server.models.admin_filter_attribute import AdminFilterAttribute
from openapi_server import util


class AdminCorpus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_dimensions: List[AdminDimension]=None, description: str=None, dt_provision: str=None, enabled: bool=None, encoder_id: str=None, encrypted: bool=None, filter_attributes: List[AdminFilterAttribute]=None, id: int=None, metadata_max_bytes: int=None, name: str=None, swap_ienc: bool=None, swap_qenc: bool=None, textless: bool=None):
        """AdminCorpus - a model defined in OpenAPI

        :param custom_dimensions: The custom_dimensions of this AdminCorpus.
        :param description: The description of this AdminCorpus.
        :param dt_provision: The dt_provision of this AdminCorpus.
        :param enabled: The enabled of this AdminCorpus.
        :param encoder_id: The encoder_id of this AdminCorpus.
        :param encrypted: The encrypted of this AdminCorpus.
        :param filter_attributes: The filter_attributes of this AdminCorpus.
        :param id: The id of this AdminCorpus.
        :param metadata_max_bytes: The metadata_max_bytes of this AdminCorpus.
        :param name: The name of this AdminCorpus.
        :param swap_ienc: The swap_ienc of this AdminCorpus.
        :param swap_qenc: The swap_qenc of this AdminCorpus.
        :param textless: The textless of this AdminCorpus.
        """
        self.openapi_types = {
            'custom_dimensions': List[AdminDimension],
            'description': str,
            'dt_provision': str,
            'enabled': bool,
            'encoder_id': str,
            'encrypted': bool,
            'filter_attributes': List[AdminFilterAttribute],
            'id': int,
            'metadata_max_bytes': int,
            'name': str,
            'swap_ienc': bool,
            'swap_qenc': bool,
            'textless': bool
        }

        self.attribute_map = {
            'custom_dimensions': 'customDimensions',
            'description': 'description',
            'dt_provision': 'dtProvision',
            'enabled': 'enabled',
            'encoder_id': 'encoderId',
            'encrypted': 'encrypted',
            'filter_attributes': 'filterAttributes',
            'id': 'id',
            'metadata_max_bytes': 'metadataMaxBytes',
            'name': 'name',
            'swap_ienc': 'swapIenc',
            'swap_qenc': 'swapQenc',
            'textless': 'textless'
        }

        self._custom_dimensions = custom_dimensions
        self._description = description
        self._dt_provision = dt_provision
        self._enabled = enabled
        self._encoder_id = encoder_id
        self._encrypted = encrypted
        self._filter_attributes = filter_attributes
        self._id = id
        self._metadata_max_bytes = metadata_max_bytes
        self._name = name
        self._swap_ienc = swap_ienc
        self._swap_qenc = swap_qenc
        self._textless = textless

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminCorpus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The adminCorpus of this AdminCorpus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_dimensions(self):
        """Gets the custom_dimensions of this AdminCorpus.


        :return: The custom_dimensions of this AdminCorpus.
        :rtype: List[AdminDimension]
        """
        return self._custom_dimensions

    @custom_dimensions.setter
    def custom_dimensions(self, custom_dimensions):
        """Sets the custom_dimensions of this AdminCorpus.


        :param custom_dimensions: The custom_dimensions of this AdminCorpus.
        :type custom_dimensions: List[AdminDimension]
        """

        self._custom_dimensions = custom_dimensions

    @property
    def description(self):
        """Gets the description of this AdminCorpus.

        A description for the corpus.

        :return: The description of this AdminCorpus.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AdminCorpus.

        A description for the corpus.

        :param description: The description of this AdminCorpus.
        :type description: str
        """

        self._description = description

    @property
    def dt_provision(self):
        """Gets the dt_provision of this AdminCorpus.

        The time at which the corpus was provisioned.

        :return: The dt_provision of this AdminCorpus.
        :rtype: str
        """
        return self._dt_provision

    @dt_provision.setter
    def dt_provision(self, dt_provision):
        """Sets the dt_provision of this AdminCorpus.

        The time at which the corpus was provisioned.

        :param dt_provision: The dt_provision of this AdminCorpus.
        :type dt_provision: str
        """

        self._dt_provision = dt_provision

    @property
    def enabled(self):
        """Gets the enabled of this AdminCorpus.

        Whether the corpus is enabled for use or not.

        :return: The enabled of this AdminCorpus.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AdminCorpus.

        Whether the corpus is enabled for use or not.

        :param enabled: The enabled of this AdminCorpus.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def encoder_id(self):
        """Gets the encoder_id of this AdminCorpus.

        This is an advanced setting for changing the underlying model type.  The default value is \"1\", which is Vectara's high-performing global model. Underlying models may be swapped for some paying customers by contacting our support team.

        :return: The encoder_id of this AdminCorpus.
        :rtype: str
        """
        return self._encoder_id

    @encoder_id.setter
    def encoder_id(self, encoder_id):
        """Sets the encoder_id of this AdminCorpus.

        This is an advanced setting for changing the underlying model type.  The default value is \"1\", which is Vectara's high-performing global model. Underlying models may be swapped for some paying customers by contacting our support team.

        :param encoder_id: The encoder_id of this AdminCorpus.
        :type encoder_id: str
        """

        self._encoder_id = encoder_id

    @property
    def encrypted(self):
        """Gets the encrypted of this AdminCorpus.

        Encryption is on by default and cannot be turned off.

        :return: The encrypted of this AdminCorpus.
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this AdminCorpus.

        Encryption is on by default and cannot be turned off.

        :param encrypted: The encrypted of this AdminCorpus.
        :type encrypted: bool
        """

        self._encrypted = encrypted

    @property
    def filter_attributes(self):
        """Gets the filter_attributes of this AdminCorpus.


        :return: The filter_attributes of this AdminCorpus.
        :rtype: List[AdminFilterAttribute]
        """
        return self._filter_attributes

    @filter_attributes.setter
    def filter_attributes(self, filter_attributes):
        """Sets the filter_attributes of this AdminCorpus.


        :param filter_attributes: The filter_attributes of this AdminCorpus.
        :type filter_attributes: List[AdminFilterAttribute]
        """

        self._filter_attributes = filter_attributes

    @property
    def id(self):
        """Gets the id of this AdminCorpus.

        The Corpus ID.

        :return: The id of this AdminCorpus.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AdminCorpus.

        The Corpus ID.

        :param id: The id of this AdminCorpus.
        :type id: int
        """

        self._id = id

    @property
    def metadata_max_bytes(self):
        """Gets the metadata_max_bytes of this AdminCorpus.

        An optional maximum size of the metadata that each document can contain.

        :return: The metadata_max_bytes of this AdminCorpus.
        :rtype: int
        """
        return self._metadata_max_bytes

    @metadata_max_bytes.setter
    def metadata_max_bytes(self, metadata_max_bytes):
        """Sets the metadata_max_bytes of this AdminCorpus.

        An optional maximum size of the metadata that each document can contain.

        :param metadata_max_bytes: The metadata_max_bytes of this AdminCorpus.
        :type metadata_max_bytes: int
        """

        self._metadata_max_bytes = metadata_max_bytes

    @property
    def name(self):
        """Gets the name of this AdminCorpus.

        The name of the corpus.

        :return: The name of this AdminCorpus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdminCorpus.

        The name of the corpus.

        :param name: The name of this AdminCorpus.
        :type name: str
        """

        self._name = name

    @property
    def swap_ienc(self):
        """Gets the swap_ienc of this AdminCorpus.

        The default query encoder is designed for normal question-answering types of queries when the text contains the answer.  Swapping the index encoder is generally rare, but can be used to help directly match questions to questions.  This can be useful if you have a FAQ dataset and you want to directly match the user question to the question in the FAQ.

        :return: The swap_ienc of this AdminCorpus.
        :rtype: bool
        """
        return self._swap_ienc

    @swap_ienc.setter
    def swap_ienc(self, swap_ienc):
        """Sets the swap_ienc of this AdminCorpus.

        The default query encoder is designed for normal question-answering types of queries when the text contains the answer.  Swapping the index encoder is generally rare, but can be used to help directly match questions to questions.  This can be useful if you have a FAQ dataset and you want to directly match the user question to the question in the FAQ.

        :param swap_ienc: The swap_ienc of this AdminCorpus.
        :type swap_ienc: bool
        """

        self._swap_ienc = swap_ienc

    @property
    def swap_qenc(self):
        """Gets the swap_qenc of this AdminCorpus.


        :return: The swap_qenc of this AdminCorpus.
        :rtype: bool
        """
        return self._swap_qenc

    @swap_qenc.setter
    def swap_qenc(self, swap_qenc):
        """Sets the swap_qenc of this AdminCorpus.


        :param swap_qenc: The swap_qenc of this AdminCorpus.
        :type swap_qenc: bool
        """

        self._swap_qenc = swap_qenc

    @property
    def textless(self):
        """Gets the textless of this AdminCorpus.

        When a corpus is \"textless\", Vectara does not store the original text. Instead, Vectara converts the text to vectors and only retains metadata.

        :return: The textless of this AdminCorpus.
        :rtype: bool
        """
        return self._textless

    @textless.setter
    def textless(self, textless):
        """Sets the textless of this AdminCorpus.

        When a corpus is \"textless\", Vectara does not store the original text. Instead, Vectara converts the text to vectors and only retains metadata.

        :param textless: The textless of this AdminCorpus.
        :type textless: bool
        """

        self._textless = textless
