/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdminCorpus.h
 *
 * 
 */

#ifndef OAIAdminCorpus_H
#define OAIAdminCorpus_H

#include <QJsonObject>

#include "OAIAdminDimension.h"
#include "OAIAdminFilterAttribute.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAdminDimension;
class OAIAdminFilterAttribute;

class OAIAdminCorpus : public OAIObject {
public:
    OAIAdminCorpus();
    OAIAdminCorpus(QString json);
    ~OAIAdminCorpus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAdminDimension> getCustomDimensions() const;
    void setCustomDimensions(const QList<OAIAdminDimension> &custom_dimensions);
    bool is_custom_dimensions_Set() const;
    bool is_custom_dimensions_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDtProvision() const;
    void setDtProvision(const QString &dt_provision);
    bool is_dt_provision_Set() const;
    bool is_dt_provision_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QString getEncoderId() const;
    void setEncoderId(const QString &encoder_id);
    bool is_encoder_id_Set() const;
    bool is_encoder_id_Valid() const;

    bool isEncrypted() const;
    void setEncrypted(const bool &encrypted);
    bool is_encrypted_Set() const;
    bool is_encrypted_Valid() const;

    QList<OAIAdminFilterAttribute> getFilterAttributes() const;
    void setFilterAttributes(const QList<OAIAdminFilterAttribute> &filter_attributes);
    bool is_filter_attributes_Set() const;
    bool is_filter_attributes_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint64 getMetadataMaxBytes() const;
    void setMetadataMaxBytes(const qint64 &metadata_max_bytes);
    bool is_metadata_max_bytes_Set() const;
    bool is_metadata_max_bytes_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isSwapIenc() const;
    void setSwapIenc(const bool &swap_ienc);
    bool is_swap_ienc_Set() const;
    bool is_swap_ienc_Valid() const;

    bool isSwapQenc() const;
    void setSwapQenc(const bool &swap_qenc);
    bool is_swap_qenc_Set() const;
    bool is_swap_qenc_Valid() const;

    bool isTextless() const;
    void setTextless(const bool &textless);
    bool is_textless_Set() const;
    bool is_textless_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAdminDimension> m_custom_dimensions;
    bool m_custom_dimensions_isSet;
    bool m_custom_dimensions_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_dt_provision;
    bool m_dt_provision_isSet;
    bool m_dt_provision_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QString m_encoder_id;
    bool m_encoder_id_isSet;
    bool m_encoder_id_isValid;

    bool m_encrypted;
    bool m_encrypted_isSet;
    bool m_encrypted_isValid;

    QList<OAIAdminFilterAttribute> m_filter_attributes;
    bool m_filter_attributes_isSet;
    bool m_filter_attributes_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint64 m_metadata_max_bytes;
    bool m_metadata_max_bytes_isSet;
    bool m_metadata_max_bytes_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_swap_ienc;
    bool m_swap_ienc_isSet;
    bool m_swap_ienc_isValid;

    bool m_swap_qenc;
    bool m_swap_qenc_isSet;
    bool m_swap_qenc_isValid;

    bool m_textless;
    bool m_textless_isSet;
    bool m_textless_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdminCorpus)

#endif // OAIAdminCorpus_H
