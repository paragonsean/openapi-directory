/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVectaraStatusCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVectaraStatusCode::OAIVectaraStatusCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVectaraStatusCode::OAIVectaraStatusCode() {
    this->initializeModel();
}

OAIVectaraStatusCode::~OAIVectaraStatusCode() {}

void OAIVectaraStatusCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIVectaraStatusCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIVectaraStatusCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("OK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::OK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_ARGUMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::INVALID_ARGUMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEADLINE_EXCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::DEADLINE_EXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ALREADY_EXISTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ALREADY_EXISTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PERMISSION_DENIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::PERMISSION_DENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESOURCE_EXHAUSTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::RESOURCE_EXHAUSTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED_PRECONDITION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::FAILED_PRECONDITION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ABORTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ABORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OUT_OF_RANGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::OUT_OF_RANGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNIMPLEMENTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::UNIMPLEMENTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTERNAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::INTERNAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNAVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::UNAVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATA_LOSS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::DATA_LOSS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNAUTHENTICATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::UNAUTHENTICATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BAD_REQUEST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::BAD_REQUEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNAUTHORIZED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::UNAUTHORIZED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FORBIDDEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::FORBIDDEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METHOD_NOT_ALLOWED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::METHOD_NOT_ALLOWED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONFLICT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::CONFLICT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSUPPORTED_MEDIA_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::UNSUPPORTED_MEDIA_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TOO_MANY_REQUESTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::TOO_MANY_REQUESTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTERNAL_SERVER_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::INTERNAL_SERVER_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_IMPLEMENTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::NOT_IMPLEMENTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SERVICE_UNAVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::SERVICE_UNAVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSUFFICIENT_STORAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::INSUFFICIENT_STORAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNPARSEABLE_RESPONSE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::UNPARSEABLE_RESPONSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISABLED_CUSTOMER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::DISABLED_CUSTOMER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_CUSTOMER_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::INVALID_CUSTOMER_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISABLED_CORPUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::DISABLED_CORPUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_CORPUS_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::INVALID_CORPUS_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISABLED_API_KEY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::DISABLED_API_KEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPIRED_API_KEY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::EXPIRED_API_KEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_API_KEY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::INVALID_API_KEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CMK_INACCESSIBLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::CMK_INACCESSIBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__DISABLED_CORPUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__DISABLED_CORPUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__DOCUMENT_DB_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__DOCUMENT_DB_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__ENCODER_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__ENCODER_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__INTERRUPTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__INTERRUPTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__INVALID_CORPUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__INVALID_CORPUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__INVALID_START", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__INVALID_START;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__INVALID_NUM_RESULTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__INVALID_NUM_RESULTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__INVALID_CONTEXT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__INVALID_CONTEXT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__MISSING_QUERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__MISSING_QUERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__MISSING_CORPUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__MISSING_CORPUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__TIMEOUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__TIMEOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__TOO_MANY_CORPORA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__TOO_MANY_CORPORA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__TOO_MANY_QUERIES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__TOO_MANY_QUERIES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__VECTOR_INDEX_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__VECTOR_INDEX_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__INVALID_DIMENSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__INVALID_DIMENSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__INVALID_CLIENTKEY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__INVALID_CLIENTKEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__DECRYPTION_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__DECRYPTION_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__INVALID_RERANKER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__INVALID_RERANKER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__PARTIAL_RERANK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__PARTIAL_RERANK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__RERANK_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__RERANK_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__TOO_MANY_RESULT_ROWS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__TOO_MANY_RESULT_ROWS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QRY__PARTIAL_RETRIEVAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::QRY__PARTIAL_RETRIEVAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CX_SPECS__INVALID_JSON", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::CX_SPECS__INVALID_JSON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CX_SPECS__UNREGISTERED_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::CX_SPECS__UNREGISTERED_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CX_SPECS__MISSING_SPEC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::CX_SPECS__MISSING_SPEC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CX_SPECS__MISSING_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::CX_SPECS__MISSING_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CX_SPECS__UNPARSEABLE_SPEC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::CX_SPECS__UNPARSEABLE_SPEC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__INVALID_CUSTOMER_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__INVALID_CUSTOMER_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__INVALID_CORPUS_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__INVALID_CORPUS_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__INVALID_ENCODER_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__INVALID_ENCODER_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__INVALID_ROLE_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__INVALID_ROLE_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__ROLE_ALREADY_EXISTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__ROLE_ALREADY_EXISTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__ONLY_ONE_OWNER_SUPPORTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__ONLY_ONE_OWNER_SUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__INVALID_PERMISSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__INVALID_PERMISSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__ROLECREATION_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__ROLECREATION_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__USER_EMAIL_NOT_AVAIALBLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__USER_EMAIL_NOT_AVAIALBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__USERNAME_NOT_AVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__USERNAME_NOT_AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__SIGNUP_MISSING_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__SIGNUP_MISSING_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__SIGNUP_MISSING_ORG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__SIGNUP_MISSING_ORG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__SIGNUP_MISSING_EMAIL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__SIGNUP_MISSING_EMAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__SIGNUP_MISSING_PAYMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__SIGNUP_MISSING_PAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__SIGNUP_MISSING_PLAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__SIGNUP_MISSING_PLAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__SIGNUP_MISSING_PASSWORD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__SIGNUP_MISSING_PASSWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__SIGNUP_INVALID_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__SIGNUP_INVALID_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__SIGNUP_INVALID_ORG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__SIGNUP_INVALID_ORG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__SIGNUP_INVALID_EMAIL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__SIGNUP_INVALID_EMAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__SIGNUP_INVALID_PAYMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__SIGNUP_INVALID_PAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__SIGNUP_INVALID_PLAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__SIGNUP_INVALID_PLAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__SIGNUP_INVALID_PASSWORD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__SIGNUP_INVALID_PASSWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__SIGNUP_INVALID_ACCOUNT_ALIAS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__SIGNUP_INVALID_ACCOUNT_ALIAS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__SIGNUP_INVALID_EMAIL_VALIDATION_CODE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__SIGNUP_INVALID_EMAIL_VALIDATION_CODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__SIGNUP_MISSING_COUNTRY_CODE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__SIGNUP_MISSING_COUNTRY_CODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__SIGNUP_ROOT_EMAIL_NOT_AVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__SIGNUP_ROOT_EMAIL_NOT_AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__CUST_MARK_DELETE_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__CUST_MARK_DELETE_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__CUST_FAISS_DEALLOC_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__CUST_FAISS_DEALLOC_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__CORPUS_LIMIT_REACHED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__CORPUS_LIMIT_REACHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__STRIPE_CARD_DECLINED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__STRIPE_CARD_DECLINED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__STRIPE_PROCESSING_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__STRIPE_PROCESSING_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__EMAIL_VALIDATION_REQUEST_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__EMAIL_VALIDATION_REQUEST_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__EMAIL_NOT_VALIDATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__EMAIL_NOT_VALIDATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__CHANGE_PLAN__NO_CURRENT_PLAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__CHANGE_PLAN__NO_CURRENT_PLAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__CHANGE_PLAN__REQUIRES_MANUAL_CHANGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__CHANGE_PLAN__REQUIRES_MANUAL_CHANGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__CHANGE_PLAN__INVALID_PLAN_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__CHANGE_PLAN__INVALID_PLAN_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__CHANGE_PLAN__NO_PAYMENT_SOURCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__CHANGE_PLAN__NO_PAYMENT_SOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__CHANGE_PLAN__INVALID_EFFECTIVE_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__CHANGE_PLAN__INVALID_EFFECTIVE_DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADM__CHANGE_PLAN__CONFLICTING_CHANGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::ADM__CHANGE_PLAN__CONFLICTING_CHANGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCM__MISCONFIGURED_CONNECTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::SCM__MISCONFIGURED_CONNECTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STATS_DB_READ_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::STATS_DB_READ_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VDB__TEXT_READ_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::VDB__TEXT_READ_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REBUILD__LOW_RECALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::REBUILD__LOW_RECALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REBUILD__INDEX_UPLOAD_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::REBUILD__INDEX_UPLOAD_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REBUILD__UPDATE_JOURNAL_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::REBUILD__UPDATE_JOURNAL_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REBUILD__UPDATE_FAISSPARAMS_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::REBUILD__UPDATE_FAISSPARAMS_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REBUILD__NO_DATA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::REBUILD__NO_DATA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REBUILD__EVALUATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::REBUILD__EVALUATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IDX__TRANSIENT_PARTIAL_DELETION_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::IDX__TRANSIENT_PARTIAL_DELETION_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IDX__PERMANENT_PARTIAL_DELETION_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVectaraStatusCode::IDX__PERMANENT_PARTIAL_DELETION_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIVectaraStatusCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIVectaraStatusCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIVectaraStatusCode::OK:
            val = "OK";
            break;
        case eOAIVectaraStatusCode::FAILURE:
            val = "FAILURE";
            break;
        case eOAIVectaraStatusCode::UNKNOWN:
            val = "UNKNOWN";
            break;
        case eOAIVectaraStatusCode::INVALID_ARGUMENT:
            val = "INVALID_ARGUMENT";
            break;
        case eOAIVectaraStatusCode::DEADLINE_EXCEEDED:
            val = "DEADLINE_EXCEEDED";
            break;
        case eOAIVectaraStatusCode::ALREADY_EXISTS:
            val = "ALREADY_EXISTS";
            break;
        case eOAIVectaraStatusCode::PERMISSION_DENIED:
            val = "PERMISSION_DENIED";
            break;
        case eOAIVectaraStatusCode::RESOURCE_EXHAUSTED:
            val = "RESOURCE_EXHAUSTED";
            break;
        case eOAIVectaraStatusCode::FAILED_PRECONDITION:
            val = "FAILED_PRECONDITION";
            break;
        case eOAIVectaraStatusCode::ABORTED:
            val = "ABORTED";
            break;
        case eOAIVectaraStatusCode::OUT_OF_RANGE:
            val = "OUT_OF_RANGE";
            break;
        case eOAIVectaraStatusCode::UNIMPLEMENTED:
            val = "UNIMPLEMENTED";
            break;
        case eOAIVectaraStatusCode::INTERNAL:
            val = "INTERNAL";
            break;
        case eOAIVectaraStatusCode::UNAVAILABLE:
            val = "UNAVAILABLE";
            break;
        case eOAIVectaraStatusCode::DATA_LOSS:
            val = "DATA_LOSS";
            break;
        case eOAIVectaraStatusCode::UNAUTHENTICATED:
            val = "UNAUTHENTICATED";
            break;
        case eOAIVectaraStatusCode::BAD_REQUEST:
            val = "BAD_REQUEST";
            break;
        case eOAIVectaraStatusCode::UNAUTHORIZED:
            val = "UNAUTHORIZED";
            break;
        case eOAIVectaraStatusCode::FORBIDDEN:
            val = "FORBIDDEN";
            break;
        case eOAIVectaraStatusCode::NOT_FOUND:
            val = "NOT_FOUND";
            break;
        case eOAIVectaraStatusCode::METHOD_NOT_ALLOWED:
            val = "METHOD_NOT_ALLOWED";
            break;
        case eOAIVectaraStatusCode::CONFLICT:
            val = "CONFLICT";
            break;
        case eOAIVectaraStatusCode::UNSUPPORTED_MEDIA_TYPE:
            val = "UNSUPPORTED_MEDIA_TYPE";
            break;
        case eOAIVectaraStatusCode::TOO_MANY_REQUESTS:
            val = "TOO_MANY_REQUESTS";
            break;
        case eOAIVectaraStatusCode::INTERNAL_SERVER_ERROR:
            val = "INTERNAL_SERVER_ERROR";
            break;
        case eOAIVectaraStatusCode::NOT_IMPLEMENTED:
            val = "NOT_IMPLEMENTED";
            break;
        case eOAIVectaraStatusCode::SERVICE_UNAVAILABLE:
            val = "SERVICE_UNAVAILABLE";
            break;
        case eOAIVectaraStatusCode::INSUFFICIENT_STORAGE:
            val = "INSUFFICIENT_STORAGE";
            break;
        case eOAIVectaraStatusCode::UNPARSEABLE_RESPONSE:
            val = "UNPARSEABLE_RESPONSE";
            break;
        case eOAIVectaraStatusCode::DISABLED_CUSTOMER:
            val = "DISABLED_CUSTOMER";
            break;
        case eOAIVectaraStatusCode::INVALID_CUSTOMER_ID:
            val = "INVALID_CUSTOMER_ID";
            break;
        case eOAIVectaraStatusCode::DISABLED_CORPUS:
            val = "DISABLED_CORPUS";
            break;
        case eOAIVectaraStatusCode::INVALID_CORPUS_ID:
            val = "INVALID_CORPUS_ID";
            break;
        case eOAIVectaraStatusCode::DISABLED_API_KEY:
            val = "DISABLED_API_KEY";
            break;
        case eOAIVectaraStatusCode::EXPIRED_API_KEY:
            val = "EXPIRED_API_KEY";
            break;
        case eOAIVectaraStatusCode::INVALID_API_KEY:
            val = "INVALID_API_KEY";
            break;
        case eOAIVectaraStatusCode::CMK_INACCESSIBLE:
            val = "CMK_INACCESSIBLE";
            break;
        case eOAIVectaraStatusCode::QRY__DISABLED_CORPUS:
            val = "QRY__DISABLED_CORPUS";
            break;
        case eOAIVectaraStatusCode::QRY__DOCUMENT_DB_FAILURE:
            val = "QRY__DOCUMENT_DB_FAILURE";
            break;
        case eOAIVectaraStatusCode::QRY__ENCODER_FAILURE:
            val = "QRY__ENCODER_FAILURE";
            break;
        case eOAIVectaraStatusCode::QRY__INTERRUPTED:
            val = "QRY__INTERRUPTED";
            break;
        case eOAIVectaraStatusCode::QRY__INVALID_CORPUS:
            val = "QRY__INVALID_CORPUS";
            break;
        case eOAIVectaraStatusCode::QRY__INVALID_START:
            val = "QRY__INVALID_START";
            break;
        case eOAIVectaraStatusCode::QRY__INVALID_NUM_RESULTS:
            val = "QRY__INVALID_NUM_RESULTS";
            break;
        case eOAIVectaraStatusCode::QRY__INVALID_CONTEXT:
            val = "QRY__INVALID_CONTEXT";
            break;
        case eOAIVectaraStatusCode::QRY__MISSING_QUERY:
            val = "QRY__MISSING_QUERY";
            break;
        case eOAIVectaraStatusCode::QRY__MISSING_CORPUS:
            val = "QRY__MISSING_CORPUS";
            break;
        case eOAIVectaraStatusCode::QRY__TIMEOUT:
            val = "QRY__TIMEOUT";
            break;
        case eOAIVectaraStatusCode::QRY__TOO_MANY_CORPORA:
            val = "QRY__TOO_MANY_CORPORA";
            break;
        case eOAIVectaraStatusCode::QRY__TOO_MANY_QUERIES:
            val = "QRY__TOO_MANY_QUERIES";
            break;
        case eOAIVectaraStatusCode::QRY__VECTOR_INDEX_FAILURE:
            val = "QRY__VECTOR_INDEX_FAILURE";
            break;
        case eOAIVectaraStatusCode::QRY__INVALID_DIMENSION:
            val = "QRY__INVALID_DIMENSION";
            break;
        case eOAIVectaraStatusCode::QRY__INVALID_CLIENTKEY:
            val = "QRY__INVALID_CLIENTKEY";
            break;
        case eOAIVectaraStatusCode::QRY__DECRYPTION_FAILURE:
            val = "QRY__DECRYPTION_FAILURE";
            break;
        case eOAIVectaraStatusCode::QRY__INVALID_RERANKER:
            val = "QRY__INVALID_RERANKER";
            break;
        case eOAIVectaraStatusCode::QRY__PARTIAL_RERANK:
            val = "QRY__PARTIAL_RERANK";
            break;
        case eOAIVectaraStatusCode::QRY__RERANK_FAILURE:
            val = "QRY__RERANK_FAILURE";
            break;
        case eOAIVectaraStatusCode::QRY__TOO_MANY_RESULT_ROWS:
            val = "QRY__TOO_MANY_RESULT_ROWS";
            break;
        case eOAIVectaraStatusCode::QRY__PARTIAL_RETRIEVAL:
            val = "QRY__PARTIAL_RETRIEVAL";
            break;
        case eOAIVectaraStatusCode::CX_SPECS__INVALID_JSON:
            val = "CX_SPECS__INVALID_JSON";
            break;
        case eOAIVectaraStatusCode::CX_SPECS__UNREGISTERED_TYPE:
            val = "CX_SPECS__UNREGISTERED_TYPE";
            break;
        case eOAIVectaraStatusCode::CX_SPECS__MISSING_SPEC:
            val = "CX_SPECS__MISSING_SPEC";
            break;
        case eOAIVectaraStatusCode::CX_SPECS__MISSING_TYPE:
            val = "CX_SPECS__MISSING_TYPE";
            break;
        case eOAIVectaraStatusCode::CX_SPECS__UNPARSEABLE_SPEC:
            val = "CX_SPECS__UNPARSEABLE_SPEC";
            break;
        case eOAIVectaraStatusCode::ADM__INVALID_CUSTOMER_ID:
            val = "ADM__INVALID_CUSTOMER_ID";
            break;
        case eOAIVectaraStatusCode::ADM__INVALID_CORPUS_ID:
            val = "ADM__INVALID_CORPUS_ID";
            break;
        case eOAIVectaraStatusCode::ADM__INVALID_ENCODER_ID:
            val = "ADM__INVALID_ENCODER_ID";
            break;
        case eOAIVectaraStatusCode::ADM__INVALID_ROLE_ID:
            val = "ADM__INVALID_ROLE_ID";
            break;
        case eOAIVectaraStatusCode::ADM__ROLE_ALREADY_EXISTS:
            val = "ADM__ROLE_ALREADY_EXISTS";
            break;
        case eOAIVectaraStatusCode::ADM__ONLY_ONE_OWNER_SUPPORTED:
            val = "ADM__ONLY_ONE_OWNER_SUPPORTED";
            break;
        case eOAIVectaraStatusCode::ADM__INVALID_PERMISSION:
            val = "ADM__INVALID_PERMISSION";
            break;
        case eOAIVectaraStatusCode::ADM__ROLECREATION_FAILURE:
            val = "ADM__ROLECREATION_FAILURE";
            break;
        case eOAIVectaraStatusCode::ADM__USER_EMAIL_NOT_AVAIALBLE:
            val = "ADM__USER_EMAIL_NOT_AVAIALBLE";
            break;
        case eOAIVectaraStatusCode::ADM__USERNAME_NOT_AVAILABLE:
            val = "ADM__USERNAME_NOT_AVAILABLE";
            break;
        case eOAIVectaraStatusCode::ADM__SIGNUP_MISSING_NAME:
            val = "ADM__SIGNUP_MISSING_NAME";
            break;
        case eOAIVectaraStatusCode::ADM__SIGNUP_MISSING_ORG:
            val = "ADM__SIGNUP_MISSING_ORG";
            break;
        case eOAIVectaraStatusCode::ADM__SIGNUP_MISSING_EMAIL:
            val = "ADM__SIGNUP_MISSING_EMAIL";
            break;
        case eOAIVectaraStatusCode::ADM__SIGNUP_MISSING_PAYMENT:
            val = "ADM__SIGNUP_MISSING_PAYMENT";
            break;
        case eOAIVectaraStatusCode::ADM__SIGNUP_MISSING_PLAN:
            val = "ADM__SIGNUP_MISSING_PLAN";
            break;
        case eOAIVectaraStatusCode::ADM__SIGNUP_MISSING_PASSWORD:
            val = "ADM__SIGNUP_MISSING_PASSWORD";
            break;
        case eOAIVectaraStatusCode::ADM__SIGNUP_INVALID_NAME:
            val = "ADM__SIGNUP_INVALID_NAME";
            break;
        case eOAIVectaraStatusCode::ADM__SIGNUP_INVALID_ORG:
            val = "ADM__SIGNUP_INVALID_ORG";
            break;
        case eOAIVectaraStatusCode::ADM__SIGNUP_INVALID_EMAIL:
            val = "ADM__SIGNUP_INVALID_EMAIL";
            break;
        case eOAIVectaraStatusCode::ADM__SIGNUP_INVALID_PAYMENT:
            val = "ADM__SIGNUP_INVALID_PAYMENT";
            break;
        case eOAIVectaraStatusCode::ADM__SIGNUP_INVALID_PLAN:
            val = "ADM__SIGNUP_INVALID_PLAN";
            break;
        case eOAIVectaraStatusCode::ADM__SIGNUP_INVALID_PASSWORD:
            val = "ADM__SIGNUP_INVALID_PASSWORD";
            break;
        case eOAIVectaraStatusCode::ADM__SIGNUP_INVALID_ACCOUNT_ALIAS:
            val = "ADM__SIGNUP_INVALID_ACCOUNT_ALIAS";
            break;
        case eOAIVectaraStatusCode::ADM__SIGNUP_INVALID_EMAIL_VALIDATION_CODE:
            val = "ADM__SIGNUP_INVALID_EMAIL_VALIDATION_CODE";
            break;
        case eOAIVectaraStatusCode::ADM__SIGNUP_MISSING_COUNTRY_CODE:
            val = "ADM__SIGNUP_MISSING_COUNTRY_CODE";
            break;
        case eOAIVectaraStatusCode::ADM__SIGNUP_ROOT_EMAIL_NOT_AVAILABLE:
            val = "ADM__SIGNUP_ROOT_EMAIL_NOT_AVAILABLE";
            break;
        case eOAIVectaraStatusCode::ADM__CUST_MARK_DELETE_FAILED:
            val = "ADM__CUST_MARK_DELETE_FAILED";
            break;
        case eOAIVectaraStatusCode::ADM__CUST_FAISS_DEALLOC_FAILED:
            val = "ADM__CUST_FAISS_DEALLOC_FAILED";
            break;
        case eOAIVectaraStatusCode::ADM__CORPUS_LIMIT_REACHED:
            val = "ADM__CORPUS_LIMIT_REACHED";
            break;
        case eOAIVectaraStatusCode::ADM__STRIPE_CARD_DECLINED:
            val = "ADM__STRIPE_CARD_DECLINED";
            break;
        case eOAIVectaraStatusCode::ADM__STRIPE_PROCESSING_ERROR:
            val = "ADM__STRIPE_PROCESSING_ERROR";
            break;
        case eOAIVectaraStatusCode::ADM__EMAIL_VALIDATION_REQUEST_NOT_FOUND:
            val = "ADM__EMAIL_VALIDATION_REQUEST_NOT_FOUND";
            break;
        case eOAIVectaraStatusCode::ADM__EMAIL_NOT_VALIDATED:
            val = "ADM__EMAIL_NOT_VALIDATED";
            break;
        case eOAIVectaraStatusCode::ADM__CHANGE_PLAN__NO_CURRENT_PLAN:
            val = "ADM__CHANGE_PLAN__NO_CURRENT_PLAN";
            break;
        case eOAIVectaraStatusCode::ADM__CHANGE_PLAN__REQUIRES_MANUAL_CHANGE:
            val = "ADM__CHANGE_PLAN__REQUIRES_MANUAL_CHANGE";
            break;
        case eOAIVectaraStatusCode::ADM__CHANGE_PLAN__INVALID_PLAN_ID:
            val = "ADM__CHANGE_PLAN__INVALID_PLAN_ID";
            break;
        case eOAIVectaraStatusCode::ADM__CHANGE_PLAN__NO_PAYMENT_SOURCE:
            val = "ADM__CHANGE_PLAN__NO_PAYMENT_SOURCE";
            break;
        case eOAIVectaraStatusCode::ADM__CHANGE_PLAN__INVALID_EFFECTIVE_DATE:
            val = "ADM__CHANGE_PLAN__INVALID_EFFECTIVE_DATE";
            break;
        case eOAIVectaraStatusCode::ADM__CHANGE_PLAN__CONFLICTING_CHANGE:
            val = "ADM__CHANGE_PLAN__CONFLICTING_CHANGE";
            break;
        case eOAIVectaraStatusCode::SCM__MISCONFIGURED_CONNECTION:
            val = "SCM__MISCONFIGURED_CONNECTION";
            break;
        case eOAIVectaraStatusCode::STATS_DB_READ_FAILURE:
            val = "STATS_DB_READ_FAILURE";
            break;
        case eOAIVectaraStatusCode::VDB__TEXT_READ_FAILURE:
            val = "VDB__TEXT_READ_FAILURE";
            break;
        case eOAIVectaraStatusCode::REBUILD__LOW_RECALL:
            val = "REBUILD__LOW_RECALL";
            break;
        case eOAIVectaraStatusCode::REBUILD__INDEX_UPLOAD_FAILURE:
            val = "REBUILD__INDEX_UPLOAD_FAILURE";
            break;
        case eOAIVectaraStatusCode::REBUILD__UPDATE_JOURNAL_FAILURE:
            val = "REBUILD__UPDATE_JOURNAL_FAILURE";
            break;
        case eOAIVectaraStatusCode::REBUILD__UPDATE_FAISSPARAMS_FAILURE:
            val = "REBUILD__UPDATE_FAISSPARAMS_FAILURE";
            break;
        case eOAIVectaraStatusCode::REBUILD__NO_DATA:
            val = "REBUILD__NO_DATA";
            break;
        case eOAIVectaraStatusCode::REBUILD__EVALUATION:
            val = "REBUILD__EVALUATION";
            break;
        case eOAIVectaraStatusCode::IDX__TRANSIENT_PARTIAL_DELETION_FAILURE:
            val = "IDX__TRANSIENT_PARTIAL_DELETION_FAILURE";
            break;
        case eOAIVectaraStatusCode::IDX__PERMANENT_PARTIAL_DELETION_FAILURE:
            val = "IDX__PERMANENT_PARTIAL_DELETION_FAILURE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIVectaraStatusCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIVectaraStatusCode::eOAIVectaraStatusCode OAIVectaraStatusCode::getValue() const {
    return m_value;
}

void OAIVectaraStatusCode::setValue(const OAIVectaraStatusCode::eOAIVectaraStatusCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIVectaraStatusCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIVectaraStatusCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
