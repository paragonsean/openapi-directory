/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServingQueryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServingQueryRequest::OAIServingQueryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServingQueryRequest::OAIServingQueryRequest() {
    this->initializeModel();
}

OAIServingQueryRequest::~OAIServingQueryRequest() {}

void OAIServingQueryRequest::initializeModel() {

    m_corpus_key_isSet = false;
    m_corpus_key_isValid = false;

    m_num_results_isSet = false;
    m_num_results_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_reranking_config_isSet = false;
    m_reranking_config_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAIServingQueryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServingQueryRequest::fromJsonObject(QJsonObject json) {

    m_corpus_key_isValid = ::OpenAPI::fromJsonValue(m_corpus_key, json[QString("corpusKey")]);
    m_corpus_key_isSet = !json[QString("corpusKey")].isNull() && m_corpus_key_isValid;

    m_num_results_isValid = ::OpenAPI::fromJsonValue(m_num_results, json[QString("numResults")]);
    m_num_results_isSet = !json[QString("numResults")].isNull() && m_num_results_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_reranking_config_isValid = ::OpenAPI::fromJsonValue(m_reranking_config, json[QString("rerankingConfig")]);
    m_reranking_config_isSet = !json[QString("rerankingConfig")].isNull() && m_reranking_config_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAIServingQueryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServingQueryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_corpus_key.size() > 0) {
        obj.insert(QString("corpusKey"), ::OpenAPI::toJsonValue(m_corpus_key));
    }
    if (m_num_results_isSet) {
        obj.insert(QString("numResults"), ::OpenAPI::toJsonValue(m_num_results));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_reranking_config.isSet()) {
        obj.insert(QString("rerankingConfig"), ::OpenAPI::toJsonValue(m_reranking_config));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

QList<OAIServingCorpusKey> OAIServingQueryRequest::getCorpusKey() const {
    return m_corpus_key;
}
void OAIServingQueryRequest::setCorpusKey(const QList<OAIServingCorpusKey> &corpus_key) {
    m_corpus_key = corpus_key;
    m_corpus_key_isSet = true;
}

bool OAIServingQueryRequest::is_corpus_key_Set() const{
    return m_corpus_key_isSet;
}

bool OAIServingQueryRequest::is_corpus_key_Valid() const{
    return m_corpus_key_isValid;
}

qint64 OAIServingQueryRequest::getNumResults() const {
    return m_num_results;
}
void OAIServingQueryRequest::setNumResults(const qint64 &num_results) {
    m_num_results = num_results;
    m_num_results_isSet = true;
}

bool OAIServingQueryRequest::is_num_results_Set() const{
    return m_num_results_isSet;
}

bool OAIServingQueryRequest::is_num_results_Valid() const{
    return m_num_results_isValid;
}

QString OAIServingQueryRequest::getQuery() const {
    return m_query;
}
void OAIServingQueryRequest::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIServingQueryRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAIServingQueryRequest::is_query_Valid() const{
    return m_query_isValid;
}

OAIQueryRequestRerankingConfig OAIServingQueryRequest::getRerankingConfig() const {
    return m_reranking_config;
}
void OAIServingQueryRequest::setRerankingConfig(const OAIQueryRequestRerankingConfig &reranking_config) {
    m_reranking_config = reranking_config;
    m_reranking_config_isSet = true;
}

bool OAIServingQueryRequest::is_reranking_config_Set() const{
    return m_reranking_config_isSet;
}

bool OAIServingQueryRequest::is_reranking_config_Valid() const{
    return m_reranking_config_isValid;
}

qint64 OAIServingQueryRequest::getStart() const {
    return m_start;
}
void OAIServingQueryRequest::setStart(const qint64 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIServingQueryRequest::is_start_Set() const{
    return m_start_isSet;
}

bool OAIServingQueryRequest::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIServingQueryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_corpus_key.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reranking_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServingQueryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
