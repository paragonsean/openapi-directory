/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComvectaraStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComvectaraStatus::OAIComvectaraStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComvectaraStatus::OAIComvectaraStatus() {
    this->initializeModel();
}

OAIComvectaraStatus::~OAIComvectaraStatus() {}

void OAIComvectaraStatus::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_status_detail_isSet = false;
    m_status_detail_isValid = false;
}

void OAIComvectaraStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComvectaraStatus::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_status_detail_isValid = ::OpenAPI::fromJsonValue(m_status_detail, json[QString("statusDetail")]);
    m_status_detail_isSet = !json[QString("statusDetail")].isNull() && m_status_detail_isValid;
}

QString OAIComvectaraStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComvectaraStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_code.isSet()) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_status_detail_isSet) {
        obj.insert(QString("statusDetail"), ::OpenAPI::toJsonValue(m_status_detail));
    }
    return obj;
}

OAIVectaraStatusCode OAIComvectaraStatus::getCode() const {
    return m_code;
}
void OAIComvectaraStatus::setCode(const OAIVectaraStatusCode &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIComvectaraStatus::is_code_Set() const{
    return m_code_isSet;
}

bool OAIComvectaraStatus::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIComvectaraStatus::getStatusDetail() const {
    return m_status_detail;
}
void OAIComvectaraStatus::setStatusDetail(const QString &status_detail) {
    m_status_detail = status_detail;
    m_status_detail_isSet = true;
}

bool OAIComvectaraStatus::is_status_detail_Set() const{
    return m_status_detail_isSet;
}

bool OAIComvectaraStatus::is_status_detail_Valid() const{
    return m_status_detail_isValid;
}

bool OAIComvectaraStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_detail_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComvectaraStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
