/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIndexingSection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIndexingSection::OAIIndexingSection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIndexingSection::OAIIndexingSection() {
    this->initializeModel();
}

OAIIndexingSection::~OAIIndexingSection() {}

void OAIIndexingSection::initializeModel() {

    m_custom_dims_isSet = false;
    m_custom_dims_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_json_isSet = false;
    m_metadata_json_isValid = false;

    m_section_isSet = false;
    m_section_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIIndexingSection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIndexingSection::fromJsonObject(QJsonObject json) {

    m_custom_dims_isValid = ::OpenAPI::fromJsonValue(m_custom_dims, json[QString("customDims")]);
    m_custom_dims_isSet = !json[QString("customDims")].isNull() && m_custom_dims_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_json_isValid = ::OpenAPI::fromJsonValue(m_metadata_json, json[QString("metadataJson")]);
    m_metadata_json_isSet = !json[QString("metadataJson")].isNull() && m_metadata_json_isValid;

    m_section_isValid = ::OpenAPI::fromJsonValue(m_section, json[QString("section")]);
    m_section_isSet = !json[QString("section")].isNull() && m_section_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIIndexingSection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIndexingSection::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_dims.size() > 0) {
        obj.insert(QString("customDims"), ::OpenAPI::toJsonValue(m_custom_dims));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata_json_isSet) {
        obj.insert(QString("metadataJson"), ::OpenAPI::toJsonValue(m_metadata_json));
    }
    if (m_section.size() > 0) {
        obj.insert(QString("section"), ::OpenAPI::toJsonValue(m_section));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAIVectaraindexingCustomDimension> OAIIndexingSection::getCustomDims() const {
    return m_custom_dims;
}
void OAIIndexingSection::setCustomDims(const QList<OAIVectaraindexingCustomDimension> &custom_dims) {
    m_custom_dims = custom_dims;
    m_custom_dims_isSet = true;
}

bool OAIIndexingSection::is_custom_dims_Set() const{
    return m_custom_dims_isSet;
}

bool OAIIndexingSection::is_custom_dims_Valid() const{
    return m_custom_dims_isValid;
}

qint32 OAIIndexingSection::getId() const {
    return m_id;
}
void OAIIndexingSection::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIndexingSection::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIndexingSection::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIIndexingSection::getMetadataJson() const {
    return m_metadata_json;
}
void OAIIndexingSection::setMetadataJson(const QString &metadata_json) {
    m_metadata_json = metadata_json;
    m_metadata_json_isSet = true;
}

bool OAIIndexingSection::is_metadata_json_Set() const{
    return m_metadata_json_isSet;
}

bool OAIIndexingSection::is_metadata_json_Valid() const{
    return m_metadata_json_isValid;
}

QList<OAIIndexingSection> OAIIndexingSection::getSection() const {
    return m_section;
}
void OAIIndexingSection::setSection(const QList<OAIIndexingSection> &section) {
    m_section = section;
    m_section_isSet = true;
}

bool OAIIndexingSection::is_section_Set() const{
    return m_section_isSet;
}

bool OAIIndexingSection::is_section_Valid() const{
    return m_section_isValid;
}

QString OAIIndexingSection::getText() const {
    return m_text;
}
void OAIIndexingSection::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIIndexingSection::is_text_Set() const{
    return m_text_isSet;
}

bool OAIIndexingSection::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIIndexingSection::getTitle() const {
    return m_title;
}
void OAIIndexingSection::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIIndexingSection::is_title_Set() const{
    return m_title_isSet;
}

bool OAIIndexingSection::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIIndexingSection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_dims.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIndexingSection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
