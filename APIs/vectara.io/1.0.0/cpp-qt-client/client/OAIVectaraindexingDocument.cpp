/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVectaraindexingDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVectaraindexingDocument::OAIVectaraindexingDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVectaraindexingDocument::OAIVectaraindexingDocument() {
    this->initializeModel();
}

OAIVectaraindexingDocument::~OAIVectaraindexingDocument() {}

void OAIVectaraindexingDocument::initializeModel() {

    m_custom_dims_isSet = false;
    m_custom_dims_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_metadata_json_isSet = false;
    m_metadata_json_isValid = false;

    m_section_isSet = false;
    m_section_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIVectaraindexingDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVectaraindexingDocument::fromJsonObject(QJsonObject json) {

    m_custom_dims_isValid = ::OpenAPI::fromJsonValue(m_custom_dims, json[QString("customDims")]);
    m_custom_dims_isSet = !json[QString("customDims")].isNull() && m_custom_dims_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("documentId")]);
    m_document_id_isSet = !json[QString("documentId")].isNull() && m_document_id_isValid;

    m_metadata_json_isValid = ::OpenAPI::fromJsonValue(m_metadata_json, json[QString("metadataJson")]);
    m_metadata_json_isSet = !json[QString("metadataJson")].isNull() && m_metadata_json_isValid;

    m_section_isValid = ::OpenAPI::fromJsonValue(m_section, json[QString("section")]);
    m_section_isSet = !json[QString("section")].isNull() && m_section_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIVectaraindexingDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVectaraindexingDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_dims.size() > 0) {
        obj.insert(QString("customDims"), ::OpenAPI::toJsonValue(m_custom_dims));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_document_id_isSet) {
        obj.insert(QString("documentId"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_metadata_json_isSet) {
        obj.insert(QString("metadataJson"), ::OpenAPI::toJsonValue(m_metadata_json));
    }
    if (m_section.size() > 0) {
        obj.insert(QString("section"), ::OpenAPI::toJsonValue(m_section));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAIVectaraindexingCustomDimension> OAIVectaraindexingDocument::getCustomDims() const {
    return m_custom_dims;
}
void OAIVectaraindexingDocument::setCustomDims(const QList<OAIVectaraindexingCustomDimension> &custom_dims) {
    m_custom_dims = custom_dims;
    m_custom_dims_isSet = true;
}

bool OAIVectaraindexingDocument::is_custom_dims_Set() const{
    return m_custom_dims_isSet;
}

bool OAIVectaraindexingDocument::is_custom_dims_Valid() const{
    return m_custom_dims_isValid;
}

QString OAIVectaraindexingDocument::getDescription() const {
    return m_description;
}
void OAIVectaraindexingDocument::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVectaraindexingDocument::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVectaraindexingDocument::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIVectaraindexingDocument::getDocumentId() const {
    return m_document_id;
}
void OAIVectaraindexingDocument::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAIVectaraindexingDocument::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAIVectaraindexingDocument::is_document_id_Valid() const{
    return m_document_id_isValid;
}

QString OAIVectaraindexingDocument::getMetadataJson() const {
    return m_metadata_json;
}
void OAIVectaraindexingDocument::setMetadataJson(const QString &metadata_json) {
    m_metadata_json = metadata_json;
    m_metadata_json_isSet = true;
}

bool OAIVectaraindexingDocument::is_metadata_json_Set() const{
    return m_metadata_json_isSet;
}

bool OAIVectaraindexingDocument::is_metadata_json_Valid() const{
    return m_metadata_json_isValid;
}

QList<OAIIndexingSection> OAIVectaraindexingDocument::getSection() const {
    return m_section;
}
void OAIVectaraindexingDocument::setSection(const QList<OAIIndexingSection> &section) {
    m_section = section;
    m_section_isSet = true;
}

bool OAIVectaraindexingDocument::is_section_Set() const{
    return m_section_isSet;
}

bool OAIVectaraindexingDocument::is_section_Valid() const{
    return m_section_isValid;
}

QString OAIVectaraindexingDocument::getTitle() const {
    return m_title;
}
void OAIVectaraindexingDocument::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIVectaraindexingDocument::is_title_Set() const{
    return m_title_isSet;
}

bool OAIVectaraindexingDocument::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIVectaraindexingDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_dims.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVectaraindexingDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
