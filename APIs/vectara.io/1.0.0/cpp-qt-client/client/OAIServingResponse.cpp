/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServingResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServingResponse::OAIServingResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServingResponse::OAIServingResponse() {
    this->initializeModel();
}

OAIServingResponse::~OAIServingResponse() {}

void OAIServingResponse::initializeModel() {

    m_corpus_key_isSet = false;
    m_corpus_key_isValid = false;

    m_document_index_isSet = false;
    m_document_index_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIServingResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServingResponse::fromJsonObject(QJsonObject json) {

    m_corpus_key_isValid = ::OpenAPI::fromJsonValue(m_corpus_key, json[QString("corpusKey")]);
    m_corpus_key_isSet = !json[QString("corpusKey")].isNull() && m_corpus_key_isValid;

    m_document_index_isValid = ::OpenAPI::fromJsonValue(m_document_index, json[QString("documentIndex")]);
    m_document_index_isSet = !json[QString("documentIndex")].isNull() && m_document_index_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIServingResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServingResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_corpus_key.isSet()) {
        obj.insert(QString("corpusKey"), ::OpenAPI::toJsonValue(m_corpus_key));
    }
    if (m_document_index_isSet) {
        obj.insert(QString("documentIndex"), ::OpenAPI::toJsonValue(m_document_index));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

OAIServingCorpusKey OAIServingResponse::getCorpusKey() const {
    return m_corpus_key;
}
void OAIServingResponse::setCorpusKey(const OAIServingCorpusKey &corpus_key) {
    m_corpus_key = corpus_key;
    m_corpus_key_isSet = true;
}

bool OAIServingResponse::is_corpus_key_Set() const{
    return m_corpus_key_isSet;
}

bool OAIServingResponse::is_corpus_key_Valid() const{
    return m_corpus_key_isValid;
}

qint64 OAIServingResponse::getDocumentIndex() const {
    return m_document_index;
}
void OAIServingResponse::setDocumentIndex(const qint64 &document_index) {
    m_document_index = document_index;
    m_document_index_isSet = true;
}

bool OAIServingResponse::is_document_index_Set() const{
    return m_document_index_isSet;
}

bool OAIServingResponse::is_document_index_Valid() const{
    return m_document_index_isValid;
}

QList<OAIServingAttribute> OAIServingResponse::getMetadata() const {
    return m_metadata;
}
void OAIServingResponse::setMetadata(const QList<OAIServingAttribute> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIServingResponse::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIServingResponse::is_metadata_Valid() const{
    return m_metadata_isValid;
}

float OAIServingResponse::getScore() const {
    return m_score;
}
void OAIServingResponse::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIServingResponse::is_score_Set() const{
    return m_score_isSet;
}

bool OAIServingResponse::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIServingResponse::getText() const {
    return m_text;
}
void OAIServingResponse::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIServingResponse::is_text_Set() const{
    return m_text_isSet;
}

bool OAIServingResponse::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIServingResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_corpus_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServingResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
