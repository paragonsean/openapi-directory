/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdminCorpus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdminCorpus::OAIAdminCorpus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdminCorpus::OAIAdminCorpus() {
    this->initializeModel();
}

OAIAdminCorpus::~OAIAdminCorpus() {}

void OAIAdminCorpus::initializeModel() {

    m_custom_dimensions_isSet = false;
    m_custom_dimensions_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_dt_provision_isSet = false;
    m_dt_provision_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_encoder_id_isSet = false;
    m_encoder_id_isValid = false;

    m_encrypted_isSet = false;
    m_encrypted_isValid = false;

    m_filter_attributes_isSet = false;
    m_filter_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_max_bytes_isSet = false;
    m_metadata_max_bytes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_swap_ienc_isSet = false;
    m_swap_ienc_isValid = false;

    m_swap_qenc_isSet = false;
    m_swap_qenc_isValid = false;

    m_textless_isSet = false;
    m_textless_isValid = false;
}

void OAIAdminCorpus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdminCorpus::fromJsonObject(QJsonObject json) {

    m_custom_dimensions_isValid = ::OpenAPI::fromJsonValue(m_custom_dimensions, json[QString("customDimensions")]);
    m_custom_dimensions_isSet = !json[QString("customDimensions")].isNull() && m_custom_dimensions_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_dt_provision_isValid = ::OpenAPI::fromJsonValue(m_dt_provision, json[QString("dtProvision")]);
    m_dt_provision_isSet = !json[QString("dtProvision")].isNull() && m_dt_provision_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_encoder_id_isValid = ::OpenAPI::fromJsonValue(m_encoder_id, json[QString("encoderId")]);
    m_encoder_id_isSet = !json[QString("encoderId")].isNull() && m_encoder_id_isValid;

    m_encrypted_isValid = ::OpenAPI::fromJsonValue(m_encrypted, json[QString("encrypted")]);
    m_encrypted_isSet = !json[QString("encrypted")].isNull() && m_encrypted_isValid;

    m_filter_attributes_isValid = ::OpenAPI::fromJsonValue(m_filter_attributes, json[QString("filterAttributes")]);
    m_filter_attributes_isSet = !json[QString("filterAttributes")].isNull() && m_filter_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_max_bytes_isValid = ::OpenAPI::fromJsonValue(m_metadata_max_bytes, json[QString("metadataMaxBytes")]);
    m_metadata_max_bytes_isSet = !json[QString("metadataMaxBytes")].isNull() && m_metadata_max_bytes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_swap_ienc_isValid = ::OpenAPI::fromJsonValue(m_swap_ienc, json[QString("swapIenc")]);
    m_swap_ienc_isSet = !json[QString("swapIenc")].isNull() && m_swap_ienc_isValid;

    m_swap_qenc_isValid = ::OpenAPI::fromJsonValue(m_swap_qenc, json[QString("swapQenc")]);
    m_swap_qenc_isSet = !json[QString("swapQenc")].isNull() && m_swap_qenc_isValid;

    m_textless_isValid = ::OpenAPI::fromJsonValue(m_textless, json[QString("textless")]);
    m_textless_isSet = !json[QString("textless")].isNull() && m_textless_isValid;
}

QString OAIAdminCorpus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdminCorpus::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_dimensions.size() > 0) {
        obj.insert(QString("customDimensions"), ::OpenAPI::toJsonValue(m_custom_dimensions));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dt_provision_isSet) {
        obj.insert(QString("dtProvision"), ::OpenAPI::toJsonValue(m_dt_provision));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_encoder_id_isSet) {
        obj.insert(QString("encoderId"), ::OpenAPI::toJsonValue(m_encoder_id));
    }
    if (m_encrypted_isSet) {
        obj.insert(QString("encrypted"), ::OpenAPI::toJsonValue(m_encrypted));
    }
    if (m_filter_attributes.size() > 0) {
        obj.insert(QString("filterAttributes"), ::OpenAPI::toJsonValue(m_filter_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata_max_bytes_isSet) {
        obj.insert(QString("metadataMaxBytes"), ::OpenAPI::toJsonValue(m_metadata_max_bytes));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_swap_ienc_isSet) {
        obj.insert(QString("swapIenc"), ::OpenAPI::toJsonValue(m_swap_ienc));
    }
    if (m_swap_qenc_isSet) {
        obj.insert(QString("swapQenc"), ::OpenAPI::toJsonValue(m_swap_qenc));
    }
    if (m_textless_isSet) {
        obj.insert(QString("textless"), ::OpenAPI::toJsonValue(m_textless));
    }
    return obj;
}

QList<OAIAdminDimension> OAIAdminCorpus::getCustomDimensions() const {
    return m_custom_dimensions;
}
void OAIAdminCorpus::setCustomDimensions(const QList<OAIAdminDimension> &custom_dimensions) {
    m_custom_dimensions = custom_dimensions;
    m_custom_dimensions_isSet = true;
}

bool OAIAdminCorpus::is_custom_dimensions_Set() const{
    return m_custom_dimensions_isSet;
}

bool OAIAdminCorpus::is_custom_dimensions_Valid() const{
    return m_custom_dimensions_isValid;
}

QString OAIAdminCorpus::getDescription() const {
    return m_description;
}
void OAIAdminCorpus::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAdminCorpus::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAdminCorpus::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAdminCorpus::getDtProvision() const {
    return m_dt_provision;
}
void OAIAdminCorpus::setDtProvision(const QString &dt_provision) {
    m_dt_provision = dt_provision;
    m_dt_provision_isSet = true;
}

bool OAIAdminCorpus::is_dt_provision_Set() const{
    return m_dt_provision_isSet;
}

bool OAIAdminCorpus::is_dt_provision_Valid() const{
    return m_dt_provision_isValid;
}

bool OAIAdminCorpus::isEnabled() const {
    return m_enabled;
}
void OAIAdminCorpus::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIAdminCorpus::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIAdminCorpus::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIAdminCorpus::getEncoderId() const {
    return m_encoder_id;
}
void OAIAdminCorpus::setEncoderId(const QString &encoder_id) {
    m_encoder_id = encoder_id;
    m_encoder_id_isSet = true;
}

bool OAIAdminCorpus::is_encoder_id_Set() const{
    return m_encoder_id_isSet;
}

bool OAIAdminCorpus::is_encoder_id_Valid() const{
    return m_encoder_id_isValid;
}

bool OAIAdminCorpus::isEncrypted() const {
    return m_encrypted;
}
void OAIAdminCorpus::setEncrypted(const bool &encrypted) {
    m_encrypted = encrypted;
    m_encrypted_isSet = true;
}

bool OAIAdminCorpus::is_encrypted_Set() const{
    return m_encrypted_isSet;
}

bool OAIAdminCorpus::is_encrypted_Valid() const{
    return m_encrypted_isValid;
}

QList<OAIAdminFilterAttribute> OAIAdminCorpus::getFilterAttributes() const {
    return m_filter_attributes;
}
void OAIAdminCorpus::setFilterAttributes(const QList<OAIAdminFilterAttribute> &filter_attributes) {
    m_filter_attributes = filter_attributes;
    m_filter_attributes_isSet = true;
}

bool OAIAdminCorpus::is_filter_attributes_Set() const{
    return m_filter_attributes_isSet;
}

bool OAIAdminCorpus::is_filter_attributes_Valid() const{
    return m_filter_attributes_isValid;
}

qint64 OAIAdminCorpus::getId() const {
    return m_id;
}
void OAIAdminCorpus::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAdminCorpus::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAdminCorpus::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIAdminCorpus::getMetadataMaxBytes() const {
    return m_metadata_max_bytes;
}
void OAIAdminCorpus::setMetadataMaxBytes(const qint64 &metadata_max_bytes) {
    m_metadata_max_bytes = metadata_max_bytes;
    m_metadata_max_bytes_isSet = true;
}

bool OAIAdminCorpus::is_metadata_max_bytes_Set() const{
    return m_metadata_max_bytes_isSet;
}

bool OAIAdminCorpus::is_metadata_max_bytes_Valid() const{
    return m_metadata_max_bytes_isValid;
}

QString OAIAdminCorpus::getName() const {
    return m_name;
}
void OAIAdminCorpus::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdminCorpus::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdminCorpus::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAdminCorpus::isSwapIenc() const {
    return m_swap_ienc;
}
void OAIAdminCorpus::setSwapIenc(const bool &swap_ienc) {
    m_swap_ienc = swap_ienc;
    m_swap_ienc_isSet = true;
}

bool OAIAdminCorpus::is_swap_ienc_Set() const{
    return m_swap_ienc_isSet;
}

bool OAIAdminCorpus::is_swap_ienc_Valid() const{
    return m_swap_ienc_isValid;
}

bool OAIAdminCorpus::isSwapQenc() const {
    return m_swap_qenc;
}
void OAIAdminCorpus::setSwapQenc(const bool &swap_qenc) {
    m_swap_qenc = swap_qenc;
    m_swap_qenc_isSet = true;
}

bool OAIAdminCorpus::is_swap_qenc_Set() const{
    return m_swap_qenc_isSet;
}

bool OAIAdminCorpus::is_swap_qenc_Valid() const{
    return m_swap_qenc_isValid;
}

bool OAIAdminCorpus::isTextless() const {
    return m_textless;
}
void OAIAdminCorpus::setTextless(const bool &textless) {
    m_textless = textless;
    m_textless_isSet = true;
}

bool OAIAdminCorpus::is_textless_Set() const{
    return m_textless_isSet;
}

bool OAIAdminCorpus::is_textless_Valid() const{
    return m_textless_isValid;
}

bool OAIAdminCorpus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dt_provision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_max_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_swap_ienc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_swap_qenc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_textless_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdminCorpus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
