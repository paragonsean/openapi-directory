/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdminServiceApi_H
#define OAI_OAIAdminServiceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdminCreateCorpusRequest.h"
#include "OAIAdminCreateCorpusResponse.h"
#include "OAIAdminDeleteCorpusRequest.h"
#include "OAIAdminDeleteCorpusResponse.h"
#include "OAIAdminListCorporaRequest.h"
#include "OAIAdminListCorporaResponse.h"
#include "OAIAdminResetCorpusRequest.h"
#include "OAIAdminResetCorpusResponse.h"
#include "OAIGooglerpcStatus.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAdminServiceApi : public QObject {
    Q_OBJECT

public:
    OAIAdminServiceApi(const int timeOut = 0);
    ~OAIAdminServiceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  customer_id qint32 [required]
    * @param[in]  oai_admin_create_corpus_request OAIAdminCreateCorpusRequest [required]
    */
    virtual void createCorpus(const qint32 &customer_id, const OAIAdminCreateCorpusRequest &oai_admin_create_corpus_request);

    /**
    * @param[in]  customer_id qint32 [required]
    * @param[in]  oai_admin_delete_corpus_request OAIAdminDeleteCorpusRequest [required]
    */
    virtual void deleteCorpus(const qint32 &customer_id, const OAIAdminDeleteCorpusRequest &oai_admin_delete_corpus_request);

    /**
    * @param[in]  customer_id qint32 [required]
    * @param[in]  oai_admin_list_corpora_request OAIAdminListCorporaRequest [required]
    */
    virtual void listCorpora(const qint32 &customer_id, const OAIAdminListCorporaRequest &oai_admin_list_corpora_request);

    /**
    * @param[in]  customer_id qint32 [required]
    * @param[in]  oai_admin_reset_corpus_request OAIAdminResetCorpusRequest [required]
    */
    virtual void resetCorpus(const qint32 &customer_id, const OAIAdminResetCorpusRequest &oai_admin_reset_corpus_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCorpusCallback(OAIHttpRequestWorker *worker);
    void deleteCorpusCallback(OAIHttpRequestWorker *worker);
    void listCorporaCallback(OAIHttpRequestWorker *worker);
    void resetCorpusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCorpusSignal(OAIAdminCreateCorpusResponse summary);
    void deleteCorpusSignal(OAIAdminDeleteCorpusResponse summary);
    void listCorporaSignal(OAIAdminListCorporaResponse summary);
    void resetCorpusSignal(OAIAdminResetCorpusResponse summary);


    void createCorpusSignalFull(OAIHttpRequestWorker *worker, OAIAdminCreateCorpusResponse summary);
    void deleteCorpusSignalFull(OAIHttpRequestWorker *worker, OAIAdminDeleteCorpusResponse summary);
    void listCorporaSignalFull(OAIHttpRequestWorker *worker, OAIAdminListCorporaResponse summary);
    void resetCorpusSignalFull(OAIHttpRequestWorker *worker, OAIAdminResetCorpusResponse summary);

    Q_DECL_DEPRECATED_X("Use createCorpusSignalError() instead")
    void createCorpusSignalE(OAIAdminCreateCorpusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCorpusSignalError(OAIAdminCreateCorpusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCorpusSignalError() instead")
    void deleteCorpusSignalE(OAIAdminDeleteCorpusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCorpusSignalError(OAIAdminDeleteCorpusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCorporaSignalError() instead")
    void listCorporaSignalE(OAIAdminListCorporaResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCorporaSignalError(OAIAdminListCorporaResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetCorpusSignalError() instead")
    void resetCorpusSignalE(OAIAdminResetCorpusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resetCorpusSignalError(OAIAdminResetCorpusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCorpusSignalErrorFull() instead")
    void createCorpusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCorpusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCorpusSignalErrorFull() instead")
    void deleteCorpusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCorpusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCorporaSignalErrorFull() instead")
    void listCorporaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCorporaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetCorpusSignalErrorFull() instead")
    void resetCorpusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetCorpusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
