/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServingBatchQueryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServingBatchQueryResponse::OAIServingBatchQueryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServingBatchQueryResponse::OAIServingBatchQueryResponse() {
    this->initializeModel();
}

OAIServingBatchQueryResponse::~OAIServingBatchQueryResponse() {}

void OAIServingBatchQueryResponse::initializeModel() {

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_response_set_isSet = false;
    m_response_set_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIServingBatchQueryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServingBatchQueryResponse::fromJsonObject(QJsonObject json) {

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_response_set_isValid = ::OpenAPI::fromJsonValue(m_response_set, json[QString("responseSet")]);
    m_response_set_isSet = !json[QString("responseSet")].isNull() && m_response_set_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIServingBatchQueryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServingBatchQueryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_metrics.isSet()) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_response_set.size() > 0) {
        obj.insert(QString("responseSet"), ::OpenAPI::toJsonValue(m_response_set));
    }
    if (m_status.size() > 0) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIServingPerformanceMetrics OAIServingBatchQueryResponse::getMetrics() const {
    return m_metrics;
}
void OAIServingBatchQueryResponse::setMetrics(const OAIServingPerformanceMetrics &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIServingBatchQueryResponse::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIServingBatchQueryResponse::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QList<OAIServingResponseSet> OAIServingBatchQueryResponse::getResponseSet() const {
    return m_response_set;
}
void OAIServingBatchQueryResponse::setResponseSet(const QList<OAIServingResponseSet> &response_set) {
    m_response_set = response_set;
    m_response_set_isSet = true;
}

bool OAIServingBatchQueryResponse::is_response_set_Set() const{
    return m_response_set_isSet;
}

bool OAIServingBatchQueryResponse::is_response_set_Valid() const{
    return m_response_set_isValid;
}

QList<OAIComvectaraStatus> OAIServingBatchQueryResponse::getStatus() const {
    return m_status;
}
void OAIServingBatchQueryResponse::setStatus(const QList<OAIComvectaraStatus> &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIServingBatchQueryResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIServingBatchQueryResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIServingBatchQueryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_set.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServingBatchQueryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
