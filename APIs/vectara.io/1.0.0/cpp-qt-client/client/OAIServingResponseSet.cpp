/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServingResponseSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServingResponseSet::OAIServingResponseSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServingResponseSet::OAIServingResponseSet() {
    this->initializeModel();
}

OAIServingResponseSet::~OAIServingResponseSet() {}

void OAIServingResponseSet::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIServingResponseSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServingResponseSet::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIServingResponseSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServingResponseSet::asJsonObject() const {
    QJsonObject obj;
    if (m_document.size() > 0) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_response.size() > 0) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_status.size() > 0) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<OAIServingResponseSetDocument> OAIServingResponseSet::getDocument() const {
    return m_document;
}
void OAIServingResponseSet::setDocument(const QList<OAIServingResponseSetDocument> &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIServingResponseSet::is_document_Set() const{
    return m_document_isSet;
}

bool OAIServingResponseSet::is_document_Valid() const{
    return m_document_isValid;
}

QList<OAIServingResponse> OAIServingResponseSet::getResponse() const {
    return m_response;
}
void OAIServingResponseSet::setResponse(const QList<OAIServingResponse> &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIServingResponseSet::is_response_Set() const{
    return m_response_isSet;
}

bool OAIServingResponseSet::is_response_Valid() const{
    return m_response_isValid;
}

QList<OAIComvectaraStatus> OAIServingResponseSet::getStatus() const {
    return m_status;
}
void OAIServingResponseSet::setStatus(const QList<OAIComvectaraStatus> &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIServingResponseSet::is_status_Set() const{
    return m_status_isSet;
}

bool OAIServingResponseSet::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIServingResponseSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServingResponseSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
