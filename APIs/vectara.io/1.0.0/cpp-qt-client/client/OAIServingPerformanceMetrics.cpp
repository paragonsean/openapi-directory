/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServingPerformanceMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServingPerformanceMetrics::OAIServingPerformanceMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServingPerformanceMetrics::OAIServingPerformanceMetrics() {
    this->initializeModel();
}

OAIServingPerformanceMetrics::~OAIServingPerformanceMetrics() {}

void OAIServingPerformanceMetrics::initializeModel() {

    m_query_encode_ms_isSet = false;
    m_query_encode_ms_isValid = false;

    m_rerank_ms_isSet = false;
    m_rerank_ms_isValid = false;

    m_retrieval_ms_isSet = false;
    m_retrieval_ms_isValid = false;

    m_userdata_retrieval_ms_isSet = false;
    m_userdata_retrieval_ms_isValid = false;
}

void OAIServingPerformanceMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServingPerformanceMetrics::fromJsonObject(QJsonObject json) {

    m_query_encode_ms_isValid = ::OpenAPI::fromJsonValue(m_query_encode_ms, json[QString("queryEncodeMs")]);
    m_query_encode_ms_isSet = !json[QString("queryEncodeMs")].isNull() && m_query_encode_ms_isValid;

    m_rerank_ms_isValid = ::OpenAPI::fromJsonValue(m_rerank_ms, json[QString("rerankMs")]);
    m_rerank_ms_isSet = !json[QString("rerankMs")].isNull() && m_rerank_ms_isValid;

    m_retrieval_ms_isValid = ::OpenAPI::fromJsonValue(m_retrieval_ms, json[QString("retrievalMs")]);
    m_retrieval_ms_isSet = !json[QString("retrievalMs")].isNull() && m_retrieval_ms_isValid;

    m_userdata_retrieval_ms_isValid = ::OpenAPI::fromJsonValue(m_userdata_retrieval_ms, json[QString("userdataRetrievalMs")]);
    m_userdata_retrieval_ms_isSet = !json[QString("userdataRetrievalMs")].isNull() && m_userdata_retrieval_ms_isValid;
}

QString OAIServingPerformanceMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServingPerformanceMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_query_encode_ms_isSet) {
        obj.insert(QString("queryEncodeMs"), ::OpenAPI::toJsonValue(m_query_encode_ms));
    }
    if (m_rerank_ms_isSet) {
        obj.insert(QString("rerankMs"), ::OpenAPI::toJsonValue(m_rerank_ms));
    }
    if (m_retrieval_ms_isSet) {
        obj.insert(QString("retrievalMs"), ::OpenAPI::toJsonValue(m_retrieval_ms));
    }
    if (m_userdata_retrieval_ms_isSet) {
        obj.insert(QString("userdataRetrievalMs"), ::OpenAPI::toJsonValue(m_userdata_retrieval_ms));
    }
    return obj;
}

qint64 OAIServingPerformanceMetrics::getQueryEncodeMs() const {
    return m_query_encode_ms;
}
void OAIServingPerformanceMetrics::setQueryEncodeMs(const qint64 &query_encode_ms) {
    m_query_encode_ms = query_encode_ms;
    m_query_encode_ms_isSet = true;
}

bool OAIServingPerformanceMetrics::is_query_encode_ms_Set() const{
    return m_query_encode_ms_isSet;
}

bool OAIServingPerformanceMetrics::is_query_encode_ms_Valid() const{
    return m_query_encode_ms_isValid;
}

qint64 OAIServingPerformanceMetrics::getRerankMs() const {
    return m_rerank_ms;
}
void OAIServingPerformanceMetrics::setRerankMs(const qint64 &rerank_ms) {
    m_rerank_ms = rerank_ms;
    m_rerank_ms_isSet = true;
}

bool OAIServingPerformanceMetrics::is_rerank_ms_Set() const{
    return m_rerank_ms_isSet;
}

bool OAIServingPerformanceMetrics::is_rerank_ms_Valid() const{
    return m_rerank_ms_isValid;
}

qint64 OAIServingPerformanceMetrics::getRetrievalMs() const {
    return m_retrieval_ms;
}
void OAIServingPerformanceMetrics::setRetrievalMs(const qint64 &retrieval_ms) {
    m_retrieval_ms = retrieval_ms;
    m_retrieval_ms_isSet = true;
}

bool OAIServingPerformanceMetrics::is_retrieval_ms_Set() const{
    return m_retrieval_ms_isSet;
}

bool OAIServingPerformanceMetrics::is_retrieval_ms_Valid() const{
    return m_retrieval_ms_isValid;
}

qint64 OAIServingPerformanceMetrics::getUserdataRetrievalMs() const {
    return m_userdata_retrieval_ms;
}
void OAIServingPerformanceMetrics::setUserdataRetrievalMs(const qint64 &userdata_retrieval_ms) {
    m_userdata_retrieval_ms = userdata_retrieval_ms;
    m_userdata_retrieval_ms_isSet = true;
}

bool OAIServingPerformanceMetrics::is_userdata_retrieval_ms_Set() const{
    return m_userdata_retrieval_ms_isSet;
}

bool OAIServingPerformanceMetrics::is_userdata_retrieval_ms_Valid() const{
    return m_userdata_retrieval_ms_isValid;
}

bool OAIServingPerformanceMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_encode_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rerank_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retrieval_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_userdata_retrieval_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServingPerformanceMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
