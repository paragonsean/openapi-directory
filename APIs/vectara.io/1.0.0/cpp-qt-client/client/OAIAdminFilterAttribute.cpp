/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdminFilterAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdminFilterAttribute::OAIAdminFilterAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdminFilterAttribute::OAIAdminFilterAttribute() {
    this->initializeModel();
}

OAIAdminFilterAttribute::~OAIAdminFilterAttribute() {}

void OAIAdminFilterAttribute::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_indexed_isSet = false;
    m_indexed_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAdminFilterAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdminFilterAttribute::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_indexed_isValid = ::OpenAPI::fromJsonValue(m_indexed, json[QString("indexed")]);
    m_indexed_isSet = !json[QString("indexed")].isNull() && m_indexed_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAdminFilterAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdminFilterAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_indexed_isSet) {
        obj.insert(QString("indexed"), ::OpenAPI::toJsonValue(m_indexed));
    }
    if (m_level.isSet()) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAdminFilterAttribute::getDescription() const {
    return m_description;
}
void OAIAdminFilterAttribute::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAdminFilterAttribute::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAdminFilterAttribute::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIAdminFilterAttribute::isIndexed() const {
    return m_indexed;
}
void OAIAdminFilterAttribute::setIndexed(const bool &indexed) {
    m_indexed = indexed;
    m_indexed_isSet = true;
}

bool OAIAdminFilterAttribute::is_indexed_Set() const{
    return m_indexed_isSet;
}

bool OAIAdminFilterAttribute::is_indexed_Valid() const{
    return m_indexed_isValid;
}

OAIAdminFilterAttributeLevel OAIAdminFilterAttribute::getLevel() const {
    return m_level;
}
void OAIAdminFilterAttribute::setLevel(const OAIAdminFilterAttributeLevel &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIAdminFilterAttribute::is_level_Set() const{
    return m_level_isSet;
}

bool OAIAdminFilterAttribute::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIAdminFilterAttribute::getName() const {
    return m_name;
}
void OAIAdminFilterAttribute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdminFilterAttribute::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdminFilterAttribute::is_name_Valid() const{
    return m_name_isValid;
}

OAIAdminFilterAttributeType OAIAdminFilterAttribute::getType() const {
    return m_type;
}
void OAIAdminFilterAttribute::setType(const OAIAdminFilterAttributeType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAdminFilterAttribute::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAdminFilterAttribute::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAdminFilterAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indexed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdminFilterAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
