/**
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIndexServiceApi_H
#define OAI_OAIIndexServiceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFileUpload_200_response.h"
#include "OAIFileUpload_400_response.h"
#include "OAIGooglerpcStatus.h"
#include "OAIHttpFileElement.h"
#include "OAIObject.h"
#include "OAIVectaraDeleteDocumentRequest.h"
#include "OAIVectaraIndexDocumentRequest.h"
#include "OAIVectaraIndexDocumentResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIndexServiceApi : public QObject {
    Q_OBJECT

public:
    OAIIndexServiceApi(const int timeOut = 0);
    ~OAIIndexServiceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  c qint32 [required]
    * @param[in]  o qint32 [required]
    * @param[in]  d bool [optional]
    * @param[in]  doc_metadata QString [optional]
    * @param[in]  file OAIHttpFileElement [optional]
    */
    virtual void fileUpload(const qint32 &c, const qint32 &o, const ::OpenAPI::OptionalParam<bool> &d = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &doc_metadata = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  customer_id qint32 [required]
    * @param[in]  oai_vectara_index_document_request OAIVectaraIndexDocumentRequest [required]
    */
    virtual void index(const qint32 &customer_id, const OAIVectaraIndexDocumentRequest &oai_vectara_index_document_request);

    /**
    * @param[in]  customer_id qint32 [required]
    * @param[in]  oai_vectara_delete_document_request OAIVectaraDeleteDocumentRequest [required]
    */
    virtual void r_delete(const qint32 &customer_id, const OAIVectaraDeleteDocumentRequest &oai_vectara_delete_document_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void fileUploadCallback(OAIHttpRequestWorker *worker);
    void indexCallback(OAIHttpRequestWorker *worker);
    void r_deleteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void fileUploadSignal(OAIFileUpload_200_response summary);
    void indexSignal(OAIVectaraIndexDocumentResponse summary);
    void r_deleteSignal(OAIObject summary);


    void fileUploadSignalFull(OAIHttpRequestWorker *worker, OAIFileUpload_200_response summary);
    void indexSignalFull(OAIHttpRequestWorker *worker, OAIVectaraIndexDocumentResponse summary);
    void r_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use fileUploadSignalError() instead")
    void fileUploadSignalE(OAIFileUpload_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fileUploadSignalError(OAIFileUpload_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use indexSignalError() instead")
    void indexSignalE(OAIVectaraIndexDocumentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void indexSignalError(OAIVectaraIndexDocumentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_deleteSignalError() instead")
    void r_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void r_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use fileUploadSignalErrorFull() instead")
    void fileUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use indexSignalErrorFull() instead")
    void indexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void indexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_deleteSignalErrorFull() instead")
    void r_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void r_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
