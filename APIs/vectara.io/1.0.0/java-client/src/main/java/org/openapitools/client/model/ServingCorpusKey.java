/*
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CorpusKeySemantics;
import org.openapitools.client.model.VectaraservingCustomDimension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServingCorpusKey
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:56.835144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServingCorpusKey {
  public static final String SERIALIZED_NAME_CORPUS_ID = "corpusId";
  @SerializedName(SERIALIZED_NAME_CORPUS_ID)
  private Long corpusId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private Long customerId;

  public static final String SERIALIZED_NAME_DIM = "dim";
  @SerializedName(SERIALIZED_NAME_DIM)
  private List<VectaraservingCustomDimension> dim = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA_FILTER = "metadataFilter";
  @SerializedName(SERIALIZED_NAME_METADATA_FILTER)
  private String metadataFilter;

  public static final String SERIALIZED_NAME_SEMANTICS = "semantics";
  @SerializedName(SERIALIZED_NAME_SEMANTICS)
  private CorpusKeySemantics semantics = CorpusKeySemantics.DEFAULT;

  public ServingCorpusKey() {
  }

  public ServingCorpusKey corpusId(Long corpusId) {
    this.corpusId = corpusId;
    return this;
  }

  /**
   * The Corpus ID.
   * @return corpusId
   */
  @javax.annotation.Nullable
  public Long getCorpusId() {
    return corpusId;
  }

  public void setCorpusId(Long corpusId) {
    this.corpusId = corpusId;
  }


  public ServingCorpusKey customerId(Long customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * The Customer ID.
   * @return customerId
   */
  @javax.annotation.Nullable
  public Long getCustomerId() {
    return customerId;
  }

  public void setCustomerId(Long customerId) {
    this.customerId = customerId;
  }


  public ServingCorpusKey dim(List<VectaraservingCustomDimension> dim) {
    this.dim = dim;
    return this;
  }

  public ServingCorpusKey addDimItem(VectaraservingCustomDimension dimItem) {
    if (this.dim == null) {
      this.dim = new ArrayList<>();
    }
    this.dim.add(dimItem);
    return this;
  }

  /**
   * Weights on custom dimensions for the corpus.
   * @return dim
   */
  @javax.annotation.Nullable
  public List<VectaraservingCustomDimension> getDim() {
    return dim;
  }

  public void setDim(List<VectaraservingCustomDimension> dim) {
    this.dim = dim;
  }


  public ServingCorpusKey metadataFilter(String metadataFilter) {
    this.metadataFilter = metadataFilter;
    return this;
  }

  /**
   * Get metadataFilter
   * @return metadataFilter
   */
  @javax.annotation.Nullable
  public String getMetadataFilter() {
    return metadataFilter;
  }

  public void setMetadataFilter(String metadataFilter) {
    this.metadataFilter = metadataFilter;
  }


  public ServingCorpusKey semantics(CorpusKeySemantics semantics) {
    this.semantics = semantics;
    return this;
  }

  /**
   * Get semantics
   * @return semantics
   */
  @javax.annotation.Nullable
  public CorpusKeySemantics getSemantics() {
    return semantics;
  }

  public void setSemantics(CorpusKeySemantics semantics) {
    this.semantics = semantics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServingCorpusKey servingCorpusKey = (ServingCorpusKey) o;
    return Objects.equals(this.corpusId, servingCorpusKey.corpusId) &&
        Objects.equals(this.customerId, servingCorpusKey.customerId) &&
        Objects.equals(this.dim, servingCorpusKey.dim) &&
        Objects.equals(this.metadataFilter, servingCorpusKey.metadataFilter) &&
        Objects.equals(this.semantics, servingCorpusKey.semantics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(corpusId, customerId, dim, metadataFilter, semantics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServingCorpusKey {\n");
    sb.append("    corpusId: ").append(toIndentedString(corpusId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    dim: ").append(toIndentedString(dim)).append("\n");
    sb.append("    metadataFilter: ").append(toIndentedString(metadataFilter)).append("\n");
    sb.append("    semantics: ").append(toIndentedString(semantics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("corpusId");
    openapiFields.add("customerId");
    openapiFields.add("dim");
    openapiFields.add("metadataFilter");
    openapiFields.add("semantics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServingCorpusKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServingCorpusKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServingCorpusKey is not found in the empty JSON string", ServingCorpusKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServingCorpusKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServingCorpusKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dim") != null && !jsonObj.get("dim").isJsonNull()) {
        JsonArray jsonArraydim = jsonObj.getAsJsonArray("dim");
        if (jsonArraydim != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dim").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dim` to be an array in the JSON string but got `%s`", jsonObj.get("dim").toString()));
          }

          // validate the optional field `dim` (array)
          for (int i = 0; i < jsonArraydim.size(); i++) {
            VectaraservingCustomDimension.validateJsonElement(jsonArraydim.get(i));
          };
        }
      }
      if ((jsonObj.get("metadataFilter") != null && !jsonObj.get("metadataFilter").isJsonNull()) && !jsonObj.get("metadataFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataFilter").toString()));
      }
      // validate the optional field `semantics`
      if (jsonObj.get("semantics") != null && !jsonObj.get("semantics").isJsonNull()) {
        CorpusKeySemantics.validateJsonElement(jsonObj.get("semantics"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServingCorpusKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServingCorpusKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServingCorpusKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServingCorpusKey.class));

       return (TypeAdapter<T>) new TypeAdapter<ServingCorpusKey>() {
           @Override
           public void write(JsonWriter out, ServingCorpusKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServingCorpusKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServingCorpusKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServingCorpusKey
   * @throws IOException if the JSON string is invalid with respect to ServingCorpusKey
   */
  public static ServingCorpusKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServingCorpusKey.class);
  }

  /**
   * Convert an instance of ServingCorpusKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

