/*
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VectaraindexingCustomDimension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A section within a structured document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:56.835144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IndexingSection {
  public static final String SERIALIZED_NAME_CUSTOM_DIMS = "customDims";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DIMS)
  private List<VectaraindexingCustomDimension> customDims = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_METADATA_JSON = "metadataJson";
  @SerializedName(SERIALIZED_NAME_METADATA_JSON)
  private String metadataJson;

  public static final String SERIALIZED_NAME_SECTION = "section";
  @SerializedName(SERIALIZED_NAME_SECTION)
  private List<IndexingSection> section = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public IndexingSection() {
  }

  public IndexingSection customDims(List<VectaraindexingCustomDimension> customDims) {
    this.customDims = customDims;
    return this;
  }

  public IndexingSection addCustomDimsItem(VectaraindexingCustomDimension customDimsItem) {
    if (this.customDims == null) {
      this.customDims = new ArrayList<>();
    }
    this.customDims.add(customDimsItem);
    return this;
  }

  /**
   * A list of custom dimension values that are included in the generated representation of all subsections (i.e. sections contains by this section).
   * @return customDims
   */
  @javax.annotation.Nullable
  public List<VectaraindexingCustomDimension> getCustomDims() {
    return customDims;
  }

  public void setCustomDims(List<VectaraindexingCustomDimension> customDims) {
    this.customDims = customDims;
  }


  public IndexingSection id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Optionally, the unique ID of this section. If set, it will be returned as metadata in query results.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public IndexingSection metadataJson(String metadataJson) {
    this.metadataJson = metadataJson;
    return this;
  }

  /**
   * Metadata about this section. This should be a json string. It is passed through the system, without being used at indexing time. It can be retrieved at query time.
   * @return metadataJson
   */
  @javax.annotation.Nullable
  public String getMetadataJson() {
    return metadataJson;
  }

  public void setMetadataJson(String metadataJson) {
    this.metadataJson = metadataJson;
  }


  public IndexingSection section(List<IndexingSection> section) {
    this.section = section;
    return this;
  }

  public IndexingSection addSectionItem(IndexingSection sectionItem) {
    if (this.section == null) {
      this.section = new ArrayList<>();
    }
    this.section.add(sectionItem);
    return this;
  }

  /**
   * A list of subsections.
   * @return section
   */
  @javax.annotation.Nullable
  public List<IndexingSection> getSection() {
    return section;
  }

  public void setSection(List<IndexingSection> section) {
    this.section = section;
  }


  public IndexingSection text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The text of the section. This should never be empty.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public IndexingSection title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Optionally, the title of the section. This may be empty.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndexingSection indexingSection = (IndexingSection) o;
    return Objects.equals(this.customDims, indexingSection.customDims) &&
        Objects.equals(this.id, indexingSection.id) &&
        Objects.equals(this.metadataJson, indexingSection.metadataJson) &&
        Objects.equals(this.section, indexingSection.section) &&
        Objects.equals(this.text, indexingSection.text) &&
        Objects.equals(this.title, indexingSection.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customDims, id, metadataJson, section, text, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndexingSection {\n");
    sb.append("    customDims: ").append(toIndentedString(customDims)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metadataJson: ").append(toIndentedString(metadataJson)).append("\n");
    sb.append("    section: ").append(toIndentedString(section)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customDims");
    openapiFields.add("id");
    openapiFields.add("metadataJson");
    openapiFields.add("section");
    openapiFields.add("text");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IndexingSection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IndexingSection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndexingSection is not found in the empty JSON string", IndexingSection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IndexingSection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IndexingSection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("customDims") != null && !jsonObj.get("customDims").isJsonNull()) {
        JsonArray jsonArraycustomDims = jsonObj.getAsJsonArray("customDims");
        if (jsonArraycustomDims != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customDims").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customDims` to be an array in the JSON string but got `%s`", jsonObj.get("customDims").toString()));
          }

          // validate the optional field `customDims` (array)
          for (int i = 0; i < jsonArraycustomDims.size(); i++) {
            VectaraindexingCustomDimension.validateJsonElement(jsonArraycustomDims.get(i));
          };
        }
      }
      if ((jsonObj.get("metadataJson") != null && !jsonObj.get("metadataJson").isJsonNull()) && !jsonObj.get("metadataJson").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataJson` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataJson").toString()));
      }
      if (jsonObj.get("section") != null && !jsonObj.get("section").isJsonNull()) {
        JsonArray jsonArraysection = jsonObj.getAsJsonArray("section");
        if (jsonArraysection != null) {
          // ensure the json data is an array
          if (!jsonObj.get("section").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `section` to be an array in the JSON string but got `%s`", jsonObj.get("section").toString()));
          }

          // validate the optional field `section` (array)
          for (int i = 0; i < jsonArraysection.size(); i++) {
            IndexingSection.validateJsonElement(jsonArraysection.get(i));
          };
        }
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndexingSection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndexingSection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndexingSection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndexingSection.class));

       return (TypeAdapter<T>) new TypeAdapter<IndexingSection>() {
           @Override
           public void write(JsonWriter out, IndexingSection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndexingSection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IndexingSection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IndexingSection
   * @throws IOException if the JSON string is invalid with respect to IndexingSection
   */
  public static IndexingSection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndexingSection.class);
  }

  /**
   * Convert an instance of IndexingSection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

