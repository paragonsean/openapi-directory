/*
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdminCreateCorpusRequest;
import org.openapitools.client.model.AdminCreateCorpusResponse;
import org.openapitools.client.model.AdminDeleteCorpusRequest;
import org.openapitools.client.model.AdminDeleteCorpusResponse;
import org.openapitools.client.model.AdminListCorporaRequest;
import org.openapitools.client.model.AdminListCorporaResponse;
import org.openapitools.client.model.AdminResetCorpusRequest;
import org.openapitools.client.model.AdminResetCorpusResponse;
import org.openapitools.client.model.GooglerpcStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdminServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCorpus
     * @param customerId The Customer ID to use for the request. (required)
     * @param adminCreateCorpusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCorpusCall(Integer customerId, AdminCreateCorpusRequest adminCreateCorpusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminCreateCorpusRequest;

        // create path and map variables
        String localVarPath = "/v1/create-corpus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerId != null) {
            localVarHeaderParams.put("customer-id", localVarApiClient.parameterToString(customerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCorpusValidateBeforeCall(Integer customerId, AdminCreateCorpusRequest adminCreateCorpusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling createCorpus(Async)");
        }

        // verify the required parameter 'adminCreateCorpusRequest' is set
        if (adminCreateCorpusRequest == null) {
            throw new ApiException("Missing the required parameter 'adminCreateCorpusRequest' when calling createCorpus(Async)");
        }

        return createCorpusCall(customerId, adminCreateCorpusRequest, _callback);

    }

    /**
     * 
     * Create Corpus
     * @param customerId The Customer ID to use for the request. (required)
     * @param adminCreateCorpusRequest  (required)
     * @return AdminCreateCorpusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public AdminCreateCorpusResponse createCorpus(Integer customerId, AdminCreateCorpusRequest adminCreateCorpusRequest) throws ApiException {
        ApiResponse<AdminCreateCorpusResponse> localVarResp = createCorpusWithHttpInfo(customerId, adminCreateCorpusRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create Corpus
     * @param customerId The Customer ID to use for the request. (required)
     * @param adminCreateCorpusRequest  (required)
     * @return ApiResponse&lt;AdminCreateCorpusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminCreateCorpusResponse> createCorpusWithHttpInfo(Integer customerId, AdminCreateCorpusRequest adminCreateCorpusRequest) throws ApiException {
        okhttp3.Call localVarCall = createCorpusValidateBeforeCall(customerId, adminCreateCorpusRequest, null);
        Type localVarReturnType = new TypeToken<AdminCreateCorpusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create Corpus
     * @param customerId The Customer ID to use for the request. (required)
     * @param adminCreateCorpusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCorpusAsync(Integer customerId, AdminCreateCorpusRequest adminCreateCorpusRequest, final ApiCallback<AdminCreateCorpusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCorpusValidateBeforeCall(customerId, adminCreateCorpusRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminCreateCorpusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCorpus
     * @param customerId The Customer ID to use for the request. (required)
     * @param adminDeleteCorpusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCorpusCall(Integer customerId, AdminDeleteCorpusRequest adminDeleteCorpusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminDeleteCorpusRequest;

        // create path and map variables
        String localVarPath = "/v1/delete-corpus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerId != null) {
            localVarHeaderParams.put("customer-id", localVarApiClient.parameterToString(customerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCorpusValidateBeforeCall(Integer customerId, AdminDeleteCorpusRequest adminDeleteCorpusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling deleteCorpus(Async)");
        }

        // verify the required parameter 'adminDeleteCorpusRequest' is set
        if (adminDeleteCorpusRequest == null) {
            throw new ApiException("Missing the required parameter 'adminDeleteCorpusRequest' when calling deleteCorpus(Async)");
        }

        return deleteCorpusCall(customerId, adminDeleteCorpusRequest, _callback);

    }

    /**
     * 
     * Delete Corpus
     * @param customerId The Customer ID to use for the request. (required)
     * @param adminDeleteCorpusRequest  (required)
     * @return AdminDeleteCorpusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public AdminDeleteCorpusResponse deleteCorpus(Integer customerId, AdminDeleteCorpusRequest adminDeleteCorpusRequest) throws ApiException {
        ApiResponse<AdminDeleteCorpusResponse> localVarResp = deleteCorpusWithHttpInfo(customerId, adminDeleteCorpusRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete Corpus
     * @param customerId The Customer ID to use for the request. (required)
     * @param adminDeleteCorpusRequest  (required)
     * @return ApiResponse&lt;AdminDeleteCorpusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminDeleteCorpusResponse> deleteCorpusWithHttpInfo(Integer customerId, AdminDeleteCorpusRequest adminDeleteCorpusRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteCorpusValidateBeforeCall(customerId, adminDeleteCorpusRequest, null);
        Type localVarReturnType = new TypeToken<AdminDeleteCorpusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete Corpus
     * @param customerId The Customer ID to use for the request. (required)
     * @param adminDeleteCorpusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCorpusAsync(Integer customerId, AdminDeleteCorpusRequest adminDeleteCorpusRequest, final ApiCallback<AdminDeleteCorpusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCorpusValidateBeforeCall(customerId, adminDeleteCorpusRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminDeleteCorpusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCorpora
     * @param customerId The Customer ID to use for the request. (required)
     * @param adminListCorporaRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCorporaCall(Integer customerId, AdminListCorporaRequest adminListCorporaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminListCorporaRequest;

        // create path and map variables
        String localVarPath = "/v1/list-corpora";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerId != null) {
            localVarHeaderParams.put("customer-id", localVarApiClient.parameterToString(customerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCorporaValidateBeforeCall(Integer customerId, AdminListCorporaRequest adminListCorporaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling listCorpora(Async)");
        }

        // verify the required parameter 'adminListCorporaRequest' is set
        if (adminListCorporaRequest == null) {
            throw new ApiException("Missing the required parameter 'adminListCorporaRequest' when calling listCorpora(Async)");
        }

        return listCorporaCall(customerId, adminListCorporaRequest, _callback);

    }

    /**
     * 
     * List Corpora
     * @param customerId The Customer ID to use for the request. (required)
     * @param adminListCorporaRequest  (required)
     * @return AdminListCorporaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public AdminListCorporaResponse listCorpora(Integer customerId, AdminListCorporaRequest adminListCorporaRequest) throws ApiException {
        ApiResponse<AdminListCorporaResponse> localVarResp = listCorporaWithHttpInfo(customerId, adminListCorporaRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * List Corpora
     * @param customerId The Customer ID to use for the request. (required)
     * @param adminListCorporaRequest  (required)
     * @return ApiResponse&lt;AdminListCorporaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminListCorporaResponse> listCorporaWithHttpInfo(Integer customerId, AdminListCorporaRequest adminListCorporaRequest) throws ApiException {
        okhttp3.Call localVarCall = listCorporaValidateBeforeCall(customerId, adminListCorporaRequest, null);
        Type localVarReturnType = new TypeToken<AdminListCorporaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List Corpora
     * @param customerId The Customer ID to use for the request. (required)
     * @param adminListCorporaRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCorporaAsync(Integer customerId, AdminListCorporaRequest adminListCorporaRequest, final ApiCallback<AdminListCorporaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCorporaValidateBeforeCall(customerId, adminListCorporaRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminListCorporaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetCorpus
     * @param customerId The Customer ID to use for the request. (required)
     * @param adminResetCorpusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetCorpusCall(Integer customerId, AdminResetCorpusRequest adminResetCorpusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminResetCorpusRequest;

        // create path and map variables
        String localVarPath = "/v1/reset-corpus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerId != null) {
            localVarHeaderParams.put("customer-id", localVarApiClient.parameterToString(customerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetCorpusValidateBeforeCall(Integer customerId, AdminResetCorpusRequest adminResetCorpusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling resetCorpus(Async)");
        }

        // verify the required parameter 'adminResetCorpusRequest' is set
        if (adminResetCorpusRequest == null) {
            throw new ApiException("Missing the required parameter 'adminResetCorpusRequest' when calling resetCorpus(Async)");
        }

        return resetCorpusCall(customerId, adminResetCorpusRequest, _callback);

    }

    /**
     * 
     * Reset Corpus
     * @param customerId The Customer ID to use for the request. (required)
     * @param adminResetCorpusRequest  (required)
     * @return AdminResetCorpusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public AdminResetCorpusResponse resetCorpus(Integer customerId, AdminResetCorpusRequest adminResetCorpusRequest) throws ApiException {
        ApiResponse<AdminResetCorpusResponse> localVarResp = resetCorpusWithHttpInfo(customerId, adminResetCorpusRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Reset Corpus
     * @param customerId The Customer ID to use for the request. (required)
     * @param adminResetCorpusRequest  (required)
     * @return ApiResponse&lt;AdminResetCorpusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminResetCorpusResponse> resetCorpusWithHttpInfo(Integer customerId, AdminResetCorpusRequest adminResetCorpusRequest) throws ApiException {
        okhttp3.Call localVarCall = resetCorpusValidateBeforeCall(customerId, adminResetCorpusRequest, null);
        Type localVarReturnType = new TypeToken<AdminResetCorpusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reset Corpus
     * @param customerId The Customer ID to use for the request. (required)
     * @param adminResetCorpusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetCorpusAsync(Integer customerId, AdminResetCorpusRequest adminResetCorpusRequest, final ApiCallback<AdminResetCorpusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetCorpusValidateBeforeCall(customerId, adminResetCorpusRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminResetCorpusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
