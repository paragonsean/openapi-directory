/*
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.QueryRequestRerankingConfig;
import org.openapitools.client.model.ServingCorpusKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServingQueryRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:56.835144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServingQueryRequest {
  public static final String SERIALIZED_NAME_CORPUS_KEY = "corpusKey";
  @SerializedName(SERIALIZED_NAME_CORPUS_KEY)
  private List<ServingCorpusKey> corpusKey = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUM_RESULTS = "numResults";
  @SerializedName(SERIALIZED_NAME_NUM_RESULTS)
  private Long numResults;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_RERANKING_CONFIG = "rerankingConfig";
  @SerializedName(SERIALIZED_NAME_RERANKING_CONFIG)
  private QueryRequestRerankingConfig rerankingConfig;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Long start;

  public ServingQueryRequest() {
  }

  public ServingQueryRequest corpusKey(List<ServingCorpusKey> corpusKey) {
    this.corpusKey = corpusKey;
    return this;
  }

  public ServingQueryRequest addCorpusKeyItem(ServingCorpusKey corpusKeyItem) {
    if (this.corpusKey == null) {
      this.corpusKey = new ArrayList<>();
    }
    this.corpusKey.add(corpusKeyItem);
    return this;
  }

  /**
   * Get corpusKey
   * @return corpusKey
   */
  @javax.annotation.Nullable
  public List<ServingCorpusKey> getCorpusKey() {
    return corpusKey;
  }

  public void setCorpusKey(List<ServingCorpusKey> corpusKey) {
    this.corpusKey = corpusKey;
  }


  public ServingQueryRequest numResults(Long numResults) {
    this.numResults = numResults;
    return this;
  }

  /**
   * The number of results to return.
   * @return numResults
   */
  @javax.annotation.Nullable
  public Long getNumResults() {
    return numResults;
  }

  public void setNumResults(Long numResults) {
    this.numResults = numResults;
  }


  public ServingQueryRequest query(String query) {
    this.query = query;
    return this;
  }

  /**
   * The query text to use from the end user.
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public ServingQueryRequest rerankingConfig(QueryRequestRerankingConfig rerankingConfig) {
    this.rerankingConfig = rerankingConfig;
    return this;
  }

  /**
   * Get rerankingConfig
   * @return rerankingConfig
   */
  @javax.annotation.Nullable
  public QueryRequestRerankingConfig getRerankingConfig() {
    return rerankingConfig;
  }

  public void setRerankingConfig(QueryRequestRerankingConfig rerankingConfig) {
    this.rerankingConfig = rerankingConfig;
  }


  public ServingQueryRequest start(Long start) {
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nullable
  public Long getStart() {
    return start;
  }

  public void setStart(Long start) {
    this.start = start;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServingQueryRequest servingQueryRequest = (ServingQueryRequest) o;
    return Objects.equals(this.corpusKey, servingQueryRequest.corpusKey) &&
        Objects.equals(this.numResults, servingQueryRequest.numResults) &&
        Objects.equals(this.query, servingQueryRequest.query) &&
        Objects.equals(this.rerankingConfig, servingQueryRequest.rerankingConfig) &&
        Objects.equals(this.start, servingQueryRequest.start);
  }

  @Override
  public int hashCode() {
    return Objects.hash(corpusKey, numResults, query, rerankingConfig, start);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServingQueryRequest {\n");
    sb.append("    corpusKey: ").append(toIndentedString(corpusKey)).append("\n");
    sb.append("    numResults: ").append(toIndentedString(numResults)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    rerankingConfig: ").append(toIndentedString(rerankingConfig)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("corpusKey");
    openapiFields.add("numResults");
    openapiFields.add("query");
    openapiFields.add("rerankingConfig");
    openapiFields.add("start");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServingQueryRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServingQueryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServingQueryRequest is not found in the empty JSON string", ServingQueryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServingQueryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServingQueryRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("corpusKey") != null && !jsonObj.get("corpusKey").isJsonNull()) {
        JsonArray jsonArraycorpusKey = jsonObj.getAsJsonArray("corpusKey");
        if (jsonArraycorpusKey != null) {
          // ensure the json data is an array
          if (!jsonObj.get("corpusKey").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `corpusKey` to be an array in the JSON string but got `%s`", jsonObj.get("corpusKey").toString()));
          }

          // validate the optional field `corpusKey` (array)
          for (int i = 0; i < jsonArraycorpusKey.size(); i++) {
            ServingCorpusKey.validateJsonElement(jsonArraycorpusKey.get(i));
          };
        }
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      // validate the optional field `rerankingConfig`
      if (jsonObj.get("rerankingConfig") != null && !jsonObj.get("rerankingConfig").isJsonNull()) {
        QueryRequestRerankingConfig.validateJsonElement(jsonObj.get("rerankingConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServingQueryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServingQueryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServingQueryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServingQueryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ServingQueryRequest>() {
           @Override
           public void write(JsonWriter out, ServingQueryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServingQueryRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServingQueryRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServingQueryRequest
   * @throws IOException if the JSON string is invalid with respect to ServingQueryRequest
   */
  public static ServingQueryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServingQueryRequest.class);
  }

  /**
   * Convert an instance of ServingQueryRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

