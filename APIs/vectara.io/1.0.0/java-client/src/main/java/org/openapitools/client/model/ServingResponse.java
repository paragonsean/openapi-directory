/*
 * Vectara REST API
 * Vectara is a neural search platform, built for developers to get the most out of their data.  You can sign up for an account at [https://vectara.com](https://vectara.com).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@vectara.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ServingAttribute;
import org.openapitools.client.model.ServingCorpusKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServingResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:56.835144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServingResponse {
  public static final String SERIALIZED_NAME_CORPUS_KEY = "corpusKey";
  @SerializedName(SERIALIZED_NAME_CORPUS_KEY)
  private ServingCorpusKey corpusKey;

  public static final String SERIALIZED_NAME_DOCUMENT_INDEX = "documentIndex";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_INDEX)
  private Long documentIndex;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<ServingAttribute> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Float score;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public ServingResponse() {
  }

  public ServingResponse corpusKey(ServingCorpusKey corpusKey) {
    this.corpusKey = corpusKey;
    return this;
  }

  /**
   * Get corpusKey
   * @return corpusKey
   */
  @javax.annotation.Nullable
  public ServingCorpusKey getCorpusKey() {
    return corpusKey;
  }

  public void setCorpusKey(ServingCorpusKey corpusKey) {
    this.corpusKey = corpusKey;
  }


  public ServingResponse documentIndex(Long documentIndex) {
    this.documentIndex = documentIndex;
    return this;
  }

  /**
   * Use this ID to find the document in the ResponseSet.
   * @return documentIndex
   */
  @javax.annotation.Nullable
  public Long getDocumentIndex() {
    return documentIndex;
  }

  public void setDocumentIndex(Long documentIndex) {
    this.documentIndex = documentIndex;
  }


  public ServingResponse metadata(List<ServingAttribute> metadata) {
    this.metadata = metadata;
    return this;
  }

  public ServingResponse addMetadataItem(ServingAttribute metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public List<ServingAttribute> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<ServingAttribute> metadata) {
    this.metadata = metadata;
  }


  public ServingResponse score(Float score) {
    this.score = score;
    return this;
  }

  /**
   * The score used for ranking results.  The higher the score, the better the match.
   * @return score
   */
  @javax.annotation.Nullable
  public Float getScore() {
    return score;
  }

  public void setScore(Float score) {
    this.score = score;
  }


  public ServingResponse text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServingResponse servingResponse = (ServingResponse) o;
    return Objects.equals(this.corpusKey, servingResponse.corpusKey) &&
        Objects.equals(this.documentIndex, servingResponse.documentIndex) &&
        Objects.equals(this.metadata, servingResponse.metadata) &&
        Objects.equals(this.score, servingResponse.score) &&
        Objects.equals(this.text, servingResponse.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(corpusKey, documentIndex, metadata, score, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServingResponse {\n");
    sb.append("    corpusKey: ").append(toIndentedString(corpusKey)).append("\n");
    sb.append("    documentIndex: ").append(toIndentedString(documentIndex)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("corpusKey");
    openapiFields.add("documentIndex");
    openapiFields.add("metadata");
    openapiFields.add("score");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServingResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServingResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServingResponse is not found in the empty JSON string", ServingResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServingResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServingResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `corpusKey`
      if (jsonObj.get("corpusKey") != null && !jsonObj.get("corpusKey").isJsonNull()) {
        ServingCorpusKey.validateJsonElement(jsonObj.get("corpusKey"));
      }
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
          }

          // validate the optional field `metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            ServingAttribute.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServingResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServingResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServingResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServingResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ServingResponse>() {
           @Override
           public void write(JsonWriter out, ServingResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServingResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServingResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServingResponse
   * @throws IOException if the JSON string is invalid with respect to ServingResponse
   */
  public static ServingResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServingResponse.class);
  }

  /**
   * Convert an instance of ServingResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

