/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentInsert.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentInsert::OAIDocumentInsert(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentInsert::OAIDocumentInsert() {
    this->initializeModel();
}

OAIDocumentInsert::~OAIDocumentInsert() {}

void OAIDocumentInsert::initializeModel() {

    m_bank_account_id_isSet = false;
    m_bank_account_id_isValid = false;

    m_block_id_isSet = false;
    m_block_id_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_conversion_rate_isSet = false;
    m_conversion_rate_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_electronic_isSet = false;
    m_electronic_isValid = false;

    m_fulfillment_date_isSet = false;
    m_fulfillment_date_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_paid_isSet = false;
    m_paid_isValid = false;

    m_partner_id_isSet = false;
    m_partner_id_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vendor_id_isSet = false;
    m_vendor_id_isValid = false;
}

void OAIDocumentInsert::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentInsert::fromJsonObject(QJsonObject json) {

    m_bank_account_id_isValid = ::OpenAPI::fromJsonValue(m_bank_account_id, json[QString("bank_account_id")]);
    m_bank_account_id_isSet = !json[QString("bank_account_id")].isNull() && m_bank_account_id_isValid;

    m_block_id_isValid = ::OpenAPI::fromJsonValue(m_block_id, json[QString("block_id")]);
    m_block_id_isSet = !json[QString("block_id")].isNull() && m_block_id_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_conversion_rate_isValid = ::OpenAPI::fromJsonValue(m_conversion_rate, json[QString("conversion_rate")]);
    m_conversion_rate_isSet = !json[QString("conversion_rate")].isNull() && m_conversion_rate_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("due_date")]);
    m_due_date_isSet = !json[QString("due_date")].isNull() && m_due_date_isValid;

    m_electronic_isValid = ::OpenAPI::fromJsonValue(m_electronic, json[QString("electronic")]);
    m_electronic_isSet = !json[QString("electronic")].isNull() && m_electronic_isValid;

    m_fulfillment_date_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_date, json[QString("fulfillment_date")]);
    m_fulfillment_date_isSet = !json[QString("fulfillment_date")].isNull() && m_fulfillment_date_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_paid_isValid = ::OpenAPI::fromJsonValue(m_paid, json[QString("paid")]);
    m_paid_isSet = !json[QString("paid")].isNull() && m_paid_isValid;

    m_partner_id_isValid = ::OpenAPI::fromJsonValue(m_partner_id, json[QString("partner_id")]);
    m_partner_id_isSet = !json[QString("partner_id")].isNull() && m_partner_id_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("payment_method")]);
    m_payment_method_isSet = !json[QString("payment_method")].isNull() && m_payment_method_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vendor_id_isValid = ::OpenAPI::fromJsonValue(m_vendor_id, json[QString("vendor_id")]);
    m_vendor_id_isSet = !json[QString("vendor_id")].isNull() && m_vendor_id_isValid;
}

QString OAIDocumentInsert::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentInsert::asJsonObject() const {
    QJsonObject obj;
    if (m_bank_account_id_isSet) {
        obj.insert(QString("bank_account_id"), ::OpenAPI::toJsonValue(m_bank_account_id));
    }
    if (m_block_id_isSet) {
        obj.insert(QString("block_id"), ::OpenAPI::toJsonValue(m_block_id));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_conversion_rate_isSet) {
        obj.insert(QString("conversion_rate"), ::OpenAPI::toJsonValue(m_conversion_rate));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("due_date"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_electronic_isSet) {
        obj.insert(QString("electronic"), ::OpenAPI::toJsonValue(m_electronic));
    }
    if (m_fulfillment_date_isSet) {
        obj.insert(QString("fulfillment_date"), ::OpenAPI::toJsonValue(m_fulfillment_date));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_paid_isSet) {
        obj.insert(QString("paid"), ::OpenAPI::toJsonValue(m_paid));
    }
    if (m_partner_id_isSet) {
        obj.insert(QString("partner_id"), ::OpenAPI::toJsonValue(m_partner_id));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("payment_method"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vendor_id_isSet) {
        obj.insert(QString("vendor_id"), ::OpenAPI::toJsonValue(m_vendor_id));
    }
    return obj;
}

qint32 OAIDocumentInsert::getBankAccountId() const {
    return m_bank_account_id;
}
void OAIDocumentInsert::setBankAccountId(const qint32 &bank_account_id) {
    m_bank_account_id = bank_account_id;
    m_bank_account_id_isSet = true;
}

bool OAIDocumentInsert::is_bank_account_id_Set() const{
    return m_bank_account_id_isSet;
}

bool OAIDocumentInsert::is_bank_account_id_Valid() const{
    return m_bank_account_id_isValid;
}

qint32 OAIDocumentInsert::getBlockId() const {
    return m_block_id;
}
void OAIDocumentInsert::setBlockId(const qint32 &block_id) {
    m_block_id = block_id;
    m_block_id_isSet = true;
}

bool OAIDocumentInsert::is_block_id_Set() const{
    return m_block_id_isSet;
}

bool OAIDocumentInsert::is_block_id_Valid() const{
    return m_block_id_isValid;
}

QString OAIDocumentInsert::getComment() const {
    return m_comment;
}
void OAIDocumentInsert::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIDocumentInsert::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIDocumentInsert::is_comment_Valid() const{
    return m_comment_isValid;
}

float OAIDocumentInsert::getConversionRate() const {
    return m_conversion_rate;
}
void OAIDocumentInsert::setConversionRate(const float &conversion_rate) {
    m_conversion_rate = conversion_rate;
    m_conversion_rate_isSet = true;
}

bool OAIDocumentInsert::is_conversion_rate_Set() const{
    return m_conversion_rate_isSet;
}

bool OAIDocumentInsert::is_conversion_rate_Valid() const{
    return m_conversion_rate_isValid;
}

OAICurrency OAIDocumentInsert::getCurrency() const {
    return m_currency;
}
void OAIDocumentInsert::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIDocumentInsert::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIDocumentInsert::is_currency_Valid() const{
    return m_currency_isValid;
}

QDate OAIDocumentInsert::getDueDate() const {
    return m_due_date;
}
void OAIDocumentInsert::setDueDate(const QDate &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIDocumentInsert::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIDocumentInsert::is_due_date_Valid() const{
    return m_due_date_isValid;
}

bool OAIDocumentInsert::isElectronic() const {
    return m_electronic;
}
void OAIDocumentInsert::setElectronic(const bool &electronic) {
    m_electronic = electronic;
    m_electronic_isSet = true;
}

bool OAIDocumentInsert::is_electronic_Set() const{
    return m_electronic_isSet;
}

bool OAIDocumentInsert::is_electronic_Valid() const{
    return m_electronic_isValid;
}

QDate OAIDocumentInsert::getFulfillmentDate() const {
    return m_fulfillment_date;
}
void OAIDocumentInsert::setFulfillmentDate(const QDate &fulfillment_date) {
    m_fulfillment_date = fulfillment_date;
    m_fulfillment_date_isSet = true;
}

bool OAIDocumentInsert::is_fulfillment_date_Set() const{
    return m_fulfillment_date_isSet;
}

bool OAIDocumentInsert::is_fulfillment_date_Valid() const{
    return m_fulfillment_date_isValid;
}

QList<OAIDocumentInsert_items_inner> OAIDocumentInsert::getItems() const {
    return m_items;
}
void OAIDocumentInsert::setItems(const QList<OAIDocumentInsert_items_inner> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIDocumentInsert::is_items_Set() const{
    return m_items_isSet;
}

bool OAIDocumentInsert::is_items_Valid() const{
    return m_items_isValid;
}

OAIDocumentLanguage OAIDocumentInsert::getLanguage() const {
    return m_language;
}
void OAIDocumentInsert::setLanguage(const OAIDocumentLanguage &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIDocumentInsert::is_language_Set() const{
    return m_language_isSet;
}

bool OAIDocumentInsert::is_language_Valid() const{
    return m_language_isValid;
}

bool OAIDocumentInsert::isPaid() const {
    return m_paid;
}
void OAIDocumentInsert::setPaid(const bool &paid) {
    m_paid = paid;
    m_paid_isSet = true;
}

bool OAIDocumentInsert::is_paid_Set() const{
    return m_paid_isSet;
}

bool OAIDocumentInsert::is_paid_Valid() const{
    return m_paid_isValid;
}

qint32 OAIDocumentInsert::getPartnerId() const {
    return m_partner_id;
}
void OAIDocumentInsert::setPartnerId(const qint32 &partner_id) {
    m_partner_id = partner_id;
    m_partner_id_isSet = true;
}

bool OAIDocumentInsert::is_partner_id_Set() const{
    return m_partner_id_isSet;
}

bool OAIDocumentInsert::is_partner_id_Valid() const{
    return m_partner_id_isValid;
}

OAIPaymentMethod OAIDocumentInsert::getPaymentMethod() const {
    return m_payment_method;
}
void OAIDocumentInsert::setPaymentMethod(const OAIPaymentMethod &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIDocumentInsert::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIDocumentInsert::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

OAIDocumentSettings OAIDocumentInsert::getSettings() const {
    return m_settings;
}
void OAIDocumentInsert::setSettings(const OAIDocumentSettings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIDocumentInsert::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIDocumentInsert::is_settings_Valid() const{
    return m_settings_isValid;
}

OAIDocumentInsertType OAIDocumentInsert::getType() const {
    return m_type;
}
void OAIDocumentInsert::setType(const OAIDocumentInsertType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDocumentInsert::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDocumentInsert::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDocumentInsert::getVendorId() const {
    return m_vendor_id;
}
void OAIDocumentInsert::setVendorId(const QString &vendor_id) {
    m_vendor_id = vendor_id;
    m_vendor_id_isSet = true;
}

bool OAIDocumentInsert::is_vendor_id_Set() const{
    return m_vendor_id_isSet;
}

bool OAIDocumentInsert::is_vendor_id_Valid() const{
    return m_vendor_id_isValid;
}

bool OAIDocumentInsert::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bank_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_electronic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentInsert::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_block_id_isValid && m_currency_isValid && m_due_date_isValid && m_fulfillment_date_isValid && m_language_isValid && m_partner_id_isValid && m_payment_method_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
