/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRound.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRound::OAIRound(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRound::OAIRound() {
    this->initializeModel();
}

OAIRound::~OAIRound() {}

void OAIRound::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRound::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRound::fromJson(QString jsonString) {
    
    if ( jsonString.compare("five", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRound::FIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("none", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRound::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("one", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRound::ONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ten", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRound::TEN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRound::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRound::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRound::FIVE:
            val = "five";
            break;
        case eOAIRound::NONE:
            val = "none";
            break;
        case eOAIRound::ONE:
            val = "one";
            break;
        case eOAIRound::TEN:
            val = "ten";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRound::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRound::eOAIRound OAIRound::getValue() const {
    return m_value;
}

void OAIRound::setValue(const OAIRound::eOAIRound& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRound::isSet() const {
    
    return m_value_isSet;
}

bool OAIRound::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
