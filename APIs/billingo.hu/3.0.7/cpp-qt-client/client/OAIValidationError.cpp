/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidationError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidationError::OAIValidationError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidationError::OAIValidationError() {
    this->initializeModel();
}

OAIValidationError::~OAIValidationError() {}

void OAIValidationError::initializeModel() {

    m_field_isSet = false;
    m_field_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIValidationError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidationError::fromJsonObject(QJsonObject json) {

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIValidationError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidationError::asJsonObject() const {
    QJsonObject obj;
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIValidationError::getField() const {
    return m_field;
}
void OAIValidationError::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIValidationError::is_field_Set() const{
    return m_field_isSet;
}

bool OAIValidationError::is_field_Valid() const{
    return m_field_isValid;
}

QString OAIValidationError::getMessage() const {
    return m_message;
}
void OAIValidationError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIValidationError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIValidationError::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIValidationError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidationError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
