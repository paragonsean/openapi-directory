/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPartnerList.h
 *
 * A object with a data property that contains an array of up to limit partners. Each entry in the array is a separate partner object. If no more partners are available, the resulting array will be empty.
 */

#ifndef OAIPartnerList_H
#define OAIPartnerList_H

#include <QJsonObject>

#include "OAIPartner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPartner;

class OAIPartnerList : public OAIObject {
public:
    OAIPartnerList();
    OAIPartnerList(QString json);
    ~OAIPartnerList() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCurrentPage() const;
    void setCurrentPage(const qint32 &current_page);
    bool is_current_page_Set() const;
    bool is_current_page_Valid() const;

    QList<OAIPartner> getData() const;
    void setData(const QList<OAIPartner> &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    qint32 getLastPage() const;
    void setLastPage(const qint32 &last_page);
    bool is_last_page_Set() const;
    bool is_last_page_Valid() const;

    QString getNextPageUrl() const;
    void setNextPageUrl(const QString &next_page_url);
    bool is_next_page_url_Set() const;
    bool is_next_page_url_Valid() const;

    qint32 getPerPage() const;
    void setPerPage(const qint32 &per_page);
    bool is_per_page_Set() const;
    bool is_per_page_Valid() const;

    QString getPrevPageUrl() const;
    void setPrevPageUrl(const QString &prev_page_url);
    bool is_prev_page_url_Set() const;
    bool is_prev_page_url_Valid() const;

    qint32 getTotal() const;
    void setTotal(const qint32 &total);
    bool is_total_Set() const;
    bool is_total_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_current_page;
    bool m_current_page_isSet;
    bool m_current_page_isValid;

    QList<OAIPartner> m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    qint32 m_last_page;
    bool m_last_page_isSet;
    bool m_last_page_isValid;

    QString m_next_page_url;
    bool m_next_page_url_isSet;
    bool m_next_page_url_isValid;

    qint32 m_per_page;
    bool m_per_page_isSet;
    bool m_per_page_isValid;

    QString m_prev_page_url;
    bool m_prev_page_url_isSet;
    bool m_prev_page_url_isValid;

    qint32 m_total;
    bool m_total_isSet;
    bool m_total_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPartnerList)

#endif // OAIPartnerList_H
