/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddress::OAIAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddress::OAIAddress() {
    this->initializeModel();
}

OAIAddress::~OAIAddress() {}

void OAIAddress::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_post_code_isSet = false;
    m_post_code_isValid = false;
}

void OAIAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddress::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_post_code_isValid = ::OpenAPI::fromJsonValue(m_post_code, json[QString("post_code")]);
    m_post_code_isSet = !json[QString("post_code")].isNull() && m_post_code_isValid;
}

QString OAIAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_code.isSet()) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_post_code_isSet) {
        obj.insert(QString("post_code"), ::OpenAPI::toJsonValue(m_post_code));
    }
    return obj;
}

QString OAIAddress::getAddress() const {
    return m_address;
}
void OAIAddress::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAddress::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAddress::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIAddress::getCity() const {
    return m_city;
}
void OAIAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAddress::is_city_Valid() const{
    return m_city_isValid;
}

OAICountry OAIAddress::getCountryCode() const {
    return m_country_code;
}
void OAIAddress::setCountryCode(const OAICountry &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIAddress::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIAddress::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIAddress::getPostCode() const {
    return m_post_code;
}
void OAIAddress::setPostCode(const QString &post_code) {
    m_post_code = post_code;
    m_post_code_isSet = true;
}

bool OAIAddress::is_post_code_Set() const{
    return m_post_code_isSet;
}

bool OAIAddress::is_post_code_Valid() const{
    return m_post_code_isValid;
}

bool OAIAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_city_isValid && m_country_code_isValid && m_post_code_isValid && true;
}

} // namespace OpenAPI
