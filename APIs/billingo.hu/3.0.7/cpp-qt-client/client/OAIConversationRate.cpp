/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversationRate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversationRate::OAIConversationRate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversationRate::OAIConversationRate() {
    this->initializeModel();
}

OAIConversationRate::~OAIConversationRate() {}

void OAIConversationRate::initializeModel() {

    m_conversation_rate_isSet = false;
    m_conversation_rate_isValid = false;

    m_from_currency_isSet = false;
    m_from_currency_isValid = false;

    m_to_currency_isSet = false;
    m_to_currency_isValid = false;
}

void OAIConversationRate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversationRate::fromJsonObject(QJsonObject json) {

    m_conversation_rate_isValid = ::OpenAPI::fromJsonValue(m_conversation_rate, json[QString("conversation_rate")]);
    m_conversation_rate_isSet = !json[QString("conversation_rate")].isNull() && m_conversation_rate_isValid;

    m_from_currency_isValid = ::OpenAPI::fromJsonValue(m_from_currency, json[QString("from_currency")]);
    m_from_currency_isSet = !json[QString("from_currency")].isNull() && m_from_currency_isValid;

    m_to_currency_isValid = ::OpenAPI::fromJsonValue(m_to_currency, json[QString("to_currency")]);
    m_to_currency_isSet = !json[QString("to_currency")].isNull() && m_to_currency_isValid;
}

QString OAIConversationRate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversationRate::asJsonObject() const {
    QJsonObject obj;
    if (m_conversation_rate_isSet) {
        obj.insert(QString("conversation_rate"), ::OpenAPI::toJsonValue(m_conversation_rate));
    }
    if (m_from_currency.isSet()) {
        obj.insert(QString("from_currency"), ::OpenAPI::toJsonValue(m_from_currency));
    }
    if (m_to_currency.isSet()) {
        obj.insert(QString("to_currency"), ::OpenAPI::toJsonValue(m_to_currency));
    }
    return obj;
}

float OAIConversationRate::getConversationRate() const {
    return m_conversation_rate;
}
void OAIConversationRate::setConversationRate(const float &conversation_rate) {
    m_conversation_rate = conversation_rate;
    m_conversation_rate_isSet = true;
}

bool OAIConversationRate::is_conversation_rate_Set() const{
    return m_conversation_rate_isSet;
}

bool OAIConversationRate::is_conversation_rate_Valid() const{
    return m_conversation_rate_isValid;
}

OAICurrency OAIConversationRate::getFromCurrency() const {
    return m_from_currency;
}
void OAIConversationRate::setFromCurrency(const OAICurrency &from_currency) {
    m_from_currency = from_currency;
    m_from_currency_isSet = true;
}

bool OAIConversationRate::is_from_currency_Set() const{
    return m_from_currency_isSet;
}

bool OAIConversationRate::is_from_currency_Valid() const{
    return m_from_currency_isValid;
}

OAICurrency OAIConversationRate::getToCurrency() const {
    return m_to_currency;
}
void OAIConversationRate::setToCurrency(const OAICurrency &to_currency) {
    m_to_currency = to_currency;
    m_to_currency_isSet = true;
}

bool OAIConversationRate::is_to_currency_Set() const{
    return m_to_currency_isSet;
}

bool OAIConversationRate::is_to_currency_Valid() const{
    return m_to_currency_isValid;
}

bool OAIConversationRate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conversation_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversationRate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
