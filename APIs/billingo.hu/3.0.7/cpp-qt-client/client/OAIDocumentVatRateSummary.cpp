/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentVatRateSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentVatRateSummary::OAIDocumentVatRateSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentVatRateSummary::OAIDocumentVatRateSummary() {
    this->initializeModel();
}

OAIDocumentVatRateSummary::~OAIDocumentVatRateSummary() {}

void OAIDocumentVatRateSummary::initializeModel() {

    m_vat_name_isSet = false;
    m_vat_name_isValid = false;

    m_vat_percentage_isSet = false;
    m_vat_percentage_isValid = false;

    m_vat_rate_gross_amount_isSet = false;
    m_vat_rate_gross_amount_isValid = false;

    m_vat_rate_net_amount_isSet = false;
    m_vat_rate_net_amount_isValid = false;

    m_vat_rate_vat_amount_isSet = false;
    m_vat_rate_vat_amount_isValid = false;

    m_vat_rate_vat_amount_local_isSet = false;
    m_vat_rate_vat_amount_local_isValid = false;
}

void OAIDocumentVatRateSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentVatRateSummary::fromJsonObject(QJsonObject json) {

    m_vat_name_isValid = ::OpenAPI::fromJsonValue(m_vat_name, json[QString("vat_name")]);
    m_vat_name_isSet = !json[QString("vat_name")].isNull() && m_vat_name_isValid;

    m_vat_percentage_isValid = ::OpenAPI::fromJsonValue(m_vat_percentage, json[QString("vat_percentage")]);
    m_vat_percentage_isSet = !json[QString("vat_percentage")].isNull() && m_vat_percentage_isValid;

    m_vat_rate_gross_amount_isValid = ::OpenAPI::fromJsonValue(m_vat_rate_gross_amount, json[QString("vat_rate_gross_amount")]);
    m_vat_rate_gross_amount_isSet = !json[QString("vat_rate_gross_amount")].isNull() && m_vat_rate_gross_amount_isValid;

    m_vat_rate_net_amount_isValid = ::OpenAPI::fromJsonValue(m_vat_rate_net_amount, json[QString("vat_rate_net_amount")]);
    m_vat_rate_net_amount_isSet = !json[QString("vat_rate_net_amount")].isNull() && m_vat_rate_net_amount_isValid;

    m_vat_rate_vat_amount_isValid = ::OpenAPI::fromJsonValue(m_vat_rate_vat_amount, json[QString("vat_rate_vat_amount")]);
    m_vat_rate_vat_amount_isSet = !json[QString("vat_rate_vat_amount")].isNull() && m_vat_rate_vat_amount_isValid;

    m_vat_rate_vat_amount_local_isValid = ::OpenAPI::fromJsonValue(m_vat_rate_vat_amount_local, json[QString("vat_rate_vat_amount_local")]);
    m_vat_rate_vat_amount_local_isSet = !json[QString("vat_rate_vat_amount_local")].isNull() && m_vat_rate_vat_amount_local_isValid;
}

QString OAIDocumentVatRateSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentVatRateSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_vat_name_isSet) {
        obj.insert(QString("vat_name"), ::OpenAPI::toJsonValue(m_vat_name));
    }
    if (m_vat_percentage_isSet) {
        obj.insert(QString("vat_percentage"), ::OpenAPI::toJsonValue(m_vat_percentage));
    }
    if (m_vat_rate_gross_amount_isSet) {
        obj.insert(QString("vat_rate_gross_amount"), ::OpenAPI::toJsonValue(m_vat_rate_gross_amount));
    }
    if (m_vat_rate_net_amount_isSet) {
        obj.insert(QString("vat_rate_net_amount"), ::OpenAPI::toJsonValue(m_vat_rate_net_amount));
    }
    if (m_vat_rate_vat_amount_isSet) {
        obj.insert(QString("vat_rate_vat_amount"), ::OpenAPI::toJsonValue(m_vat_rate_vat_amount));
    }
    if (m_vat_rate_vat_amount_local_isSet) {
        obj.insert(QString("vat_rate_vat_amount_local"), ::OpenAPI::toJsonValue(m_vat_rate_vat_amount_local));
    }
    return obj;
}

QString OAIDocumentVatRateSummary::getVatName() const {
    return m_vat_name;
}
void OAIDocumentVatRateSummary::setVatName(const QString &vat_name) {
    m_vat_name = vat_name;
    m_vat_name_isSet = true;
}

bool OAIDocumentVatRateSummary::is_vat_name_Set() const{
    return m_vat_name_isSet;
}

bool OAIDocumentVatRateSummary::is_vat_name_Valid() const{
    return m_vat_name_isValid;
}

float OAIDocumentVatRateSummary::getVatPercentage() const {
    return m_vat_percentage;
}
void OAIDocumentVatRateSummary::setVatPercentage(const float &vat_percentage) {
    m_vat_percentage = vat_percentage;
    m_vat_percentage_isSet = true;
}

bool OAIDocumentVatRateSummary::is_vat_percentage_Set() const{
    return m_vat_percentage_isSet;
}

bool OAIDocumentVatRateSummary::is_vat_percentage_Valid() const{
    return m_vat_percentage_isValid;
}

float OAIDocumentVatRateSummary::getVatRateGrossAmount() const {
    return m_vat_rate_gross_amount;
}
void OAIDocumentVatRateSummary::setVatRateGrossAmount(const float &vat_rate_gross_amount) {
    m_vat_rate_gross_amount = vat_rate_gross_amount;
    m_vat_rate_gross_amount_isSet = true;
}

bool OAIDocumentVatRateSummary::is_vat_rate_gross_amount_Set() const{
    return m_vat_rate_gross_amount_isSet;
}

bool OAIDocumentVatRateSummary::is_vat_rate_gross_amount_Valid() const{
    return m_vat_rate_gross_amount_isValid;
}

float OAIDocumentVatRateSummary::getVatRateNetAmount() const {
    return m_vat_rate_net_amount;
}
void OAIDocumentVatRateSummary::setVatRateNetAmount(const float &vat_rate_net_amount) {
    m_vat_rate_net_amount = vat_rate_net_amount;
    m_vat_rate_net_amount_isSet = true;
}

bool OAIDocumentVatRateSummary::is_vat_rate_net_amount_Set() const{
    return m_vat_rate_net_amount_isSet;
}

bool OAIDocumentVatRateSummary::is_vat_rate_net_amount_Valid() const{
    return m_vat_rate_net_amount_isValid;
}

float OAIDocumentVatRateSummary::getVatRateVatAmount() const {
    return m_vat_rate_vat_amount;
}
void OAIDocumentVatRateSummary::setVatRateVatAmount(const float &vat_rate_vat_amount) {
    m_vat_rate_vat_amount = vat_rate_vat_amount;
    m_vat_rate_vat_amount_isSet = true;
}

bool OAIDocumentVatRateSummary::is_vat_rate_vat_amount_Set() const{
    return m_vat_rate_vat_amount_isSet;
}

bool OAIDocumentVatRateSummary::is_vat_rate_vat_amount_Valid() const{
    return m_vat_rate_vat_amount_isValid;
}

float OAIDocumentVatRateSummary::getVatRateVatAmountLocal() const {
    return m_vat_rate_vat_amount_local;
}
void OAIDocumentVatRateSummary::setVatRateVatAmountLocal(const float &vat_rate_vat_amount_local) {
    m_vat_rate_vat_amount_local = vat_rate_vat_amount_local;
    m_vat_rate_vat_amount_local_isSet = true;
}

bool OAIDocumentVatRateSummary::is_vat_rate_vat_amount_local_Set() const{
    return m_vat_rate_vat_amount_local_isSet;
}

bool OAIDocumentVatRateSummary::is_vat_rate_vat_amount_local_Valid() const{
    return m_vat_rate_vat_amount_local_isValid;
}

bool OAIDocumentVatRateSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vat_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_gross_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_net_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_vat_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_vat_amount_local_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentVatRateSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
