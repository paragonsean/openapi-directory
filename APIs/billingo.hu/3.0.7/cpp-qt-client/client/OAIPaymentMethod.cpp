/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentMethod::OAIPaymentMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentMethod::OAIPaymentMethod() {
    this->initializeModel();
}

OAIPaymentMethod::~OAIPaymentMethod() {}

void OAIPaymentMethod::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPaymentMethod::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPaymentMethod::fromJson(QString jsonString) {
    
    if ( jsonString.compare("aruhitel", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::ARUHITEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("bankcard", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::BANKCARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("barion", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::BARION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("barter", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::BARTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cash", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::CASH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cash_on_delivery", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::CASH_ON_DELIVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("coupon", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::COUPON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("elore_utalas", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::ELORE_UTALAS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ep_kartya", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::EP_KARTYA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("kompenzacio", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::KOMPENZACIO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("levonas", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::LEVONAS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("online_bankcard", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::ONLINE_BANKCARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("payoneer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::PAYONEER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("paypal", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::PAYPAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("paypal_utolag", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::PAYPAL_UTOLAG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("payu", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::PAYU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pick_pack_pont", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::PICK_PACK_PONT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("postai_csekk", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::POSTAI_CSEKK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("postautalvany", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::POSTAUTALVANY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("skrill", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::SKRILL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("szep_card", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::SZEP_CARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("transferwise", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::TRANSFERWISE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("upwork", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::UPWORK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("utalvany", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::UTALVANY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("valto", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::VALTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("wire_transfer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentMethod::WIRE_TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPaymentMethod::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPaymentMethod::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPaymentMethod::ARUHITEL:
            val = "aruhitel";
            break;
        case eOAIPaymentMethod::BANKCARD:
            val = "bankcard";
            break;
        case eOAIPaymentMethod::BARION:
            val = "barion";
            break;
        case eOAIPaymentMethod::BARTER:
            val = "barter";
            break;
        case eOAIPaymentMethod::CASH:
            val = "cash";
            break;
        case eOAIPaymentMethod::CASH_ON_DELIVERY:
            val = "cash_on_delivery";
            break;
        case eOAIPaymentMethod::COUPON:
            val = "coupon";
            break;
        case eOAIPaymentMethod::ELORE_UTALAS:
            val = "elore_utalas";
            break;
        case eOAIPaymentMethod::EP_KARTYA:
            val = "ep_kartya";
            break;
        case eOAIPaymentMethod::KOMPENZACIO:
            val = "kompenzacio";
            break;
        case eOAIPaymentMethod::LEVONAS:
            val = "levonas";
            break;
        case eOAIPaymentMethod::ONLINE_BANKCARD:
            val = "online_bankcard";
            break;
        case eOAIPaymentMethod::PAYONEER:
            val = "payoneer";
            break;
        case eOAIPaymentMethod::PAYPAL:
            val = "paypal";
            break;
        case eOAIPaymentMethod::PAYPAL_UTOLAG:
            val = "paypal_utolag";
            break;
        case eOAIPaymentMethod::PAYU:
            val = "payu";
            break;
        case eOAIPaymentMethod::PICK_PACK_PONT:
            val = "pick_pack_pont";
            break;
        case eOAIPaymentMethod::POSTAI_CSEKK:
            val = "postai_csekk";
            break;
        case eOAIPaymentMethod::POSTAUTALVANY:
            val = "postautalvany";
            break;
        case eOAIPaymentMethod::SKRILL:
            val = "skrill";
            break;
        case eOAIPaymentMethod::SZEP_CARD:
            val = "szep_card";
            break;
        case eOAIPaymentMethod::TRANSFERWISE:
            val = "transferwise";
            break;
        case eOAIPaymentMethod::UPWORK:
            val = "upwork";
            break;
        case eOAIPaymentMethod::UTALVANY:
            val = "utalvany";
            break;
        case eOAIPaymentMethod::VALTO:
            val = "valto";
            break;
        case eOAIPaymentMethod::WIRE_TRANSFER:
            val = "wire_transfer";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPaymentMethod::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPaymentMethod::eOAIPaymentMethod OAIPaymentMethod::getValue() const {
    return m_value;
}

void OAIPaymentMethod::setValue(const OAIPaymentMethod::eOAIPaymentMethod& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPaymentMethod::isSet() const {
    
    return m_value_isSet;
}

bool OAIPaymentMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
