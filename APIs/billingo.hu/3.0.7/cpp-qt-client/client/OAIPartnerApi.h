/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPartnerApi_H
#define OAI_OAIPartnerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIClientErrorResponse.h"
#include "OAIPartner.h"
#include "OAIPartnerList.h"
#include "OAIPartnerUpsert.h"
#include "OAIServerErrorResponse.h"
#include "OAIValidationErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPartnerApi : public QObject {
    Q_OBJECT

public:
    OAIPartnerApi(const int timeOut = 0);
    ~OAIPartnerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_partner_upsert OAIPartnerUpsert [required]
    */
    virtual void createPartner(const OAIPartnerUpsert &oai_partner_upsert);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deletePartner(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getPartner(const qint32 &id);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void listPartner(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_partner_upsert OAIPartnerUpsert [required]
    */
    virtual void updatePartner(const qint32 &id, const OAIPartnerUpsert &oai_partner_upsert);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createPartnerCallback(OAIHttpRequestWorker *worker);
    void deletePartnerCallback(OAIHttpRequestWorker *worker);
    void getPartnerCallback(OAIHttpRequestWorker *worker);
    void listPartnerCallback(OAIHttpRequestWorker *worker);
    void updatePartnerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createPartnerSignal(OAIPartner summary);
    void deletePartnerSignal();
    void getPartnerSignal(OAIPartner summary);
    void listPartnerSignal(OAIPartnerList summary);
    void updatePartnerSignal(OAIPartner summary);


    void createPartnerSignalFull(OAIHttpRequestWorker *worker, OAIPartner summary);
    void deletePartnerSignalFull(OAIHttpRequestWorker *worker);
    void getPartnerSignalFull(OAIHttpRequestWorker *worker, OAIPartner summary);
    void listPartnerSignalFull(OAIHttpRequestWorker *worker, OAIPartnerList summary);
    void updatePartnerSignalFull(OAIHttpRequestWorker *worker, OAIPartner summary);

    Q_DECL_DEPRECATED_X("Use createPartnerSignalError() instead")
    void createPartnerSignalE(OAIPartner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPartnerSignalError(OAIPartner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePartnerSignalError() instead")
    void deletePartnerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePartnerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartnerSignalError() instead")
    void getPartnerSignalE(OAIPartner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartnerSignalError(OAIPartner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPartnerSignalError() instead")
    void listPartnerSignalE(OAIPartnerList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPartnerSignalError(OAIPartnerList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePartnerSignalError() instead")
    void updatePartnerSignalE(OAIPartner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePartnerSignalError(OAIPartner summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createPartnerSignalErrorFull() instead")
    void createPartnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPartnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePartnerSignalErrorFull() instead")
    void deletePartnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePartnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartnerSignalErrorFull() instead")
    void getPartnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPartnerSignalErrorFull() instead")
    void listPartnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPartnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePartnerSignalErrorFull() instead")
    void updatePartnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePartnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
