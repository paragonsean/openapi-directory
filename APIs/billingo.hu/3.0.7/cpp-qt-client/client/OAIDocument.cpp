/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocument::OAIDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocument::OAIDocument() {
    this->initializeModel();
}

OAIDocument::~OAIDocument() {}

void OAIDocument::initializeModel() {

    m_block_id_isSet = false;
    m_block_id_isValid = false;

    m_cancelled_isSet = false;
    m_cancelled_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_conversion_rate_isSet = false;
    m_conversion_rate_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_electronic_isSet = false;
    m_electronic_isValid = false;

    m_fulfillment_date_isSet = false;
    m_fulfillment_date_isValid = false;

    m_gross_total_isSet = false;
    m_gross_total_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invoice_date_isSet = false;
    m_invoice_date_isValid = false;

    m_invoice_number_isSet = false;
    m_invoice_number_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_notification_status_isSet = false;
    m_notification_status_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_paid_date_isSet = false;
    m_paid_date_isValid = false;

    m_partner_isSet = false;
    m_partner_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_payment_status_isSet = false;
    m_payment_status_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocument::fromJsonObject(QJsonObject json) {

    m_block_id_isValid = ::OpenAPI::fromJsonValue(m_block_id, json[QString("block_id")]);
    m_block_id_isSet = !json[QString("block_id")].isNull() && m_block_id_isValid;

    m_cancelled_isValid = ::OpenAPI::fromJsonValue(m_cancelled, json[QString("cancelled")]);
    m_cancelled_isSet = !json[QString("cancelled")].isNull() && m_cancelled_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_conversion_rate_isValid = ::OpenAPI::fromJsonValue(m_conversion_rate, json[QString("conversion_rate")]);
    m_conversion_rate_isSet = !json[QString("conversion_rate")].isNull() && m_conversion_rate_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("due_date")]);
    m_due_date_isSet = !json[QString("due_date")].isNull() && m_due_date_isValid;

    m_electronic_isValid = ::OpenAPI::fromJsonValue(m_electronic, json[QString("electronic")]);
    m_electronic_isSet = !json[QString("electronic")].isNull() && m_electronic_isValid;

    m_fulfillment_date_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_date, json[QString("fulfillment_date")]);
    m_fulfillment_date_isSet = !json[QString("fulfillment_date")].isNull() && m_fulfillment_date_isValid;

    m_gross_total_isValid = ::OpenAPI::fromJsonValue(m_gross_total, json[QString("gross_total")]);
    m_gross_total_isSet = !json[QString("gross_total")].isNull() && m_gross_total_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invoice_date_isValid = ::OpenAPI::fromJsonValue(m_invoice_date, json[QString("invoice_date")]);
    m_invoice_date_isSet = !json[QString("invoice_date")].isNull() && m_invoice_date_isValid;

    m_invoice_number_isValid = ::OpenAPI::fromJsonValue(m_invoice_number, json[QString("invoice_number")]);
    m_invoice_number_isSet = !json[QString("invoice_number")].isNull() && m_invoice_number_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_notification_status_isValid = ::OpenAPI::fromJsonValue(m_notification_status, json[QString("notification_status")]);
    m_notification_status_isSet = !json[QString("notification_status")].isNull() && m_notification_status_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_paid_date_isValid = ::OpenAPI::fromJsonValue(m_paid_date, json[QString("paid_date")]);
    m_paid_date_isSet = !json[QString("paid_date")].isNull() && m_paid_date_isValid;

    m_partner_isValid = ::OpenAPI::fromJsonValue(m_partner, json[QString("partner")]);
    m_partner_isSet = !json[QString("partner")].isNull() && m_partner_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("payment_method")]);
    m_payment_method_isSet = !json[QString("payment_method")].isNull() && m_payment_method_isValid;

    m_payment_status_isValid = ::OpenAPI::fromJsonValue(m_payment_status, json[QString("payment_status")]);
    m_payment_status_isSet = !json[QString("payment_status")].isNull() && m_payment_status_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_block_id_isSet) {
        obj.insert(QString("block_id"), ::OpenAPI::toJsonValue(m_block_id));
    }
    if (m_cancelled_isSet) {
        obj.insert(QString("cancelled"), ::OpenAPI::toJsonValue(m_cancelled));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_conversion_rate_isSet) {
        obj.insert(QString("conversion_rate"), ::OpenAPI::toJsonValue(m_conversion_rate));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("due_date"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_electronic_isSet) {
        obj.insert(QString("electronic"), ::OpenAPI::toJsonValue(m_electronic));
    }
    if (m_fulfillment_date_isSet) {
        obj.insert(QString("fulfillment_date"), ::OpenAPI::toJsonValue(m_fulfillment_date));
    }
    if (m_gross_total_isSet) {
        obj.insert(QString("gross_total"), ::OpenAPI::toJsonValue(m_gross_total));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invoice_date_isSet) {
        obj.insert(QString("invoice_date"), ::OpenAPI::toJsonValue(m_invoice_date));
    }
    if (m_invoice_number_isSet) {
        obj.insert(QString("invoice_number"), ::OpenAPI::toJsonValue(m_invoice_number));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_notification_status.isSet()) {
        obj.insert(QString("notification_status"), ::OpenAPI::toJsonValue(m_notification_status));
    }
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_paid_date_isSet) {
        obj.insert(QString("paid_date"), ::OpenAPI::toJsonValue(m_paid_date));
    }
    if (m_partner.isSet()) {
        obj.insert(QString("partner"), ::OpenAPI::toJsonValue(m_partner));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("payment_method"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_payment_status.isSet()) {
        obj.insert(QString("payment_status"), ::OpenAPI::toJsonValue(m_payment_status));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_summary.isSet()) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIDocument::getBlockId() const {
    return m_block_id;
}
void OAIDocument::setBlockId(const qint32 &block_id) {
    m_block_id = block_id;
    m_block_id_isSet = true;
}

bool OAIDocument::is_block_id_Set() const{
    return m_block_id_isSet;
}

bool OAIDocument::is_block_id_Valid() const{
    return m_block_id_isValid;
}

bool OAIDocument::isCancelled() const {
    return m_cancelled;
}
void OAIDocument::setCancelled(const bool &cancelled) {
    m_cancelled = cancelled;
    m_cancelled_isSet = true;
}

bool OAIDocument::is_cancelled_Set() const{
    return m_cancelled_isSet;
}

bool OAIDocument::is_cancelled_Valid() const{
    return m_cancelled_isValid;
}

QString OAIDocument::getComment() const {
    return m_comment;
}
void OAIDocument::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIDocument::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIDocument::is_comment_Valid() const{
    return m_comment_isValid;
}

float OAIDocument::getConversionRate() const {
    return m_conversion_rate;
}
void OAIDocument::setConversionRate(const float &conversion_rate) {
    m_conversion_rate = conversion_rate;
    m_conversion_rate_isSet = true;
}

bool OAIDocument::is_conversion_rate_Set() const{
    return m_conversion_rate_isSet;
}

bool OAIDocument::is_conversion_rate_Valid() const{
    return m_conversion_rate_isValid;
}

OAICurrency OAIDocument::getCurrency() const {
    return m_currency;
}
void OAIDocument::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIDocument::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIDocument::is_currency_Valid() const{
    return m_currency_isValid;
}

QDate OAIDocument::getDueDate() const {
    return m_due_date;
}
void OAIDocument::setDueDate(const QDate &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIDocument::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIDocument::is_due_date_Valid() const{
    return m_due_date_isValid;
}

bool OAIDocument::isElectronic() const {
    return m_electronic;
}
void OAIDocument::setElectronic(const bool &electronic) {
    m_electronic = electronic;
    m_electronic_isSet = true;
}

bool OAIDocument::is_electronic_Set() const{
    return m_electronic_isSet;
}

bool OAIDocument::is_electronic_Valid() const{
    return m_electronic_isValid;
}

QDate OAIDocument::getFulfillmentDate() const {
    return m_fulfillment_date;
}
void OAIDocument::setFulfillmentDate(const QDate &fulfillment_date) {
    m_fulfillment_date = fulfillment_date;
    m_fulfillment_date_isSet = true;
}

bool OAIDocument::is_fulfillment_date_Set() const{
    return m_fulfillment_date_isSet;
}

bool OAIDocument::is_fulfillment_date_Valid() const{
    return m_fulfillment_date_isValid;
}

float OAIDocument::getGrossTotal() const {
    return m_gross_total;
}
void OAIDocument::setGrossTotal(const float &gross_total) {
    m_gross_total = gross_total;
    m_gross_total_isSet = true;
}

bool OAIDocument::is_gross_total_Set() const{
    return m_gross_total_isSet;
}

bool OAIDocument::is_gross_total_Valid() const{
    return m_gross_total_isValid;
}

qint32 OAIDocument::getId() const {
    return m_id;
}
void OAIDocument::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocument::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocument::is_id_Valid() const{
    return m_id_isValid;
}

QDate OAIDocument::getInvoiceDate() const {
    return m_invoice_date;
}
void OAIDocument::setInvoiceDate(const QDate &invoice_date) {
    m_invoice_date = invoice_date;
    m_invoice_date_isSet = true;
}

bool OAIDocument::is_invoice_date_Set() const{
    return m_invoice_date_isSet;
}

bool OAIDocument::is_invoice_date_Valid() const{
    return m_invoice_date_isValid;
}

QString OAIDocument::getInvoiceNumber() const {
    return m_invoice_number;
}
void OAIDocument::setInvoiceNumber(const QString &invoice_number) {
    m_invoice_number = invoice_number;
    m_invoice_number_isSet = true;
}

bool OAIDocument::is_invoice_number_Set() const{
    return m_invoice_number_isSet;
}

bool OAIDocument::is_invoice_number_Valid() const{
    return m_invoice_number_isValid;
}

QList<OAIDocumentItem> OAIDocument::getItems() const {
    return m_items;
}
void OAIDocument::setItems(const QList<OAIDocumentItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIDocument::is_items_Set() const{
    return m_items_isSet;
}

bool OAIDocument::is_items_Valid() const{
    return m_items_isValid;
}

OAIDocumentLanguage OAIDocument::getLanguage() const {
    return m_language;
}
void OAIDocument::setLanguage(const OAIDocumentLanguage &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIDocument::is_language_Set() const{
    return m_language_isSet;
}

bool OAIDocument::is_language_Valid() const{
    return m_language_isValid;
}

OAIDocumentNotificationStatus OAIDocument::getNotificationStatus() const {
    return m_notification_status;
}
void OAIDocument::setNotificationStatus(const OAIDocumentNotificationStatus &notification_status) {
    m_notification_status = notification_status;
    m_notification_status_isSet = true;
}

bool OAIDocument::is_notification_status_Set() const{
    return m_notification_status_isSet;
}

bool OAIDocument::is_notification_status_Valid() const{
    return m_notification_status_isValid;
}

OAIDocumentOrganization OAIDocument::getOrganization() const {
    return m_organization;
}
void OAIDocument::setOrganization(const OAIDocumentOrganization &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIDocument::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIDocument::is_organization_Valid() const{
    return m_organization_isValid;
}

QDate OAIDocument::getPaidDate() const {
    return m_paid_date;
}
void OAIDocument::setPaidDate(const QDate &paid_date) {
    m_paid_date = paid_date;
    m_paid_date_isSet = true;
}

bool OAIDocument::is_paid_date_Set() const{
    return m_paid_date_isSet;
}

bool OAIDocument::is_paid_date_Valid() const{
    return m_paid_date_isValid;
}

OAIPartner OAIDocument::getPartner() const {
    return m_partner;
}
void OAIDocument::setPartner(const OAIPartner &partner) {
    m_partner = partner;
    m_partner_isSet = true;
}

bool OAIDocument::is_partner_Set() const{
    return m_partner_isSet;
}

bool OAIDocument::is_partner_Valid() const{
    return m_partner_isValid;
}

OAIPaymentMethod OAIDocument::getPaymentMethod() const {
    return m_payment_method;
}
void OAIDocument::setPaymentMethod(const OAIPaymentMethod &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIDocument::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIDocument::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

OAIPaymentStatus OAIDocument::getPaymentStatus() const {
    return m_payment_status;
}
void OAIDocument::setPaymentStatus(const OAIPaymentStatus &payment_status) {
    m_payment_status = payment_status;
    m_payment_status_isSet = true;
}

bool OAIDocument::is_payment_status_Set() const{
    return m_payment_status_isSet;
}

bool OAIDocument::is_payment_status_Valid() const{
    return m_payment_status_isValid;
}

OAIDocumentSettings OAIDocument::getSettings() const {
    return m_settings;
}
void OAIDocument::setSettings(const OAIDocumentSettings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIDocument::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIDocument::is_settings_Valid() const{
    return m_settings_isValid;
}

OAIDocumentSummary OAIDocument::getSummary() const {
    return m_summary;
}
void OAIDocument::setSummary(const OAIDocumentSummary &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIDocument::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIDocument::is_summary_Valid() const{
    return m_summary_isValid;
}

QList<QString> OAIDocument::getTags() const {
    return m_tags;
}
void OAIDocument::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDocument::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDocument::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIDocumentType OAIDocument::getType() const {
    return m_type;
}
void OAIDocument::setType(const OAIDocumentType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDocument::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDocument::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_block_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancelled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversion_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_electronic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gross_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_paid_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
