/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartnerUpsert.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartnerUpsert::OAIPartnerUpsert(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartnerUpsert::OAIPartnerUpsert() {
    this->initializeModel();
}

OAIPartnerUpsert::~OAIPartnerUpsert() {}

void OAIPartnerUpsert::initializeModel() {

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_general_ledger_number_isSet = false;
    m_general_ledger_number_isValid = false;

    m_iban_isSet = false;
    m_iban_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_swift_isSet = false;
    m_swift_isValid = false;

    m_taxcode_isSet = false;
    m_taxcode_isValid = false;
}

void OAIPartnerUpsert::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartnerUpsert::fromJsonObject(QJsonObject json) {

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("account_number")]);
    m_account_number_isSet = !json[QString("account_number")].isNull() && m_account_number_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_general_ledger_number_isValid = ::OpenAPI::fromJsonValue(m_general_ledger_number, json[QString("general_ledger_number")]);
    m_general_ledger_number_isSet = !json[QString("general_ledger_number")].isNull() && m_general_ledger_number_isValid;

    m_iban_isValid = ::OpenAPI::fromJsonValue(m_iban, json[QString("iban")]);
    m_iban_isSet = !json[QString("iban")].isNull() && m_iban_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_swift_isValid = ::OpenAPI::fromJsonValue(m_swift, json[QString("swift")]);
    m_swift_isSet = !json[QString("swift")].isNull() && m_swift_isValid;

    m_taxcode_isValid = ::OpenAPI::fromJsonValue(m_taxcode, json[QString("taxcode")]);
    m_taxcode_isSet = !json[QString("taxcode")].isNull() && m_taxcode_isValid;
}

QString OAIPartnerUpsert::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartnerUpsert::asJsonObject() const {
    QJsonObject obj;
    if (m_account_number_isSet) {
        obj.insert(QString("account_number"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_general_ledger_number_isSet) {
        obj.insert(QString("general_ledger_number"), ::OpenAPI::toJsonValue(m_general_ledger_number));
    }
    if (m_iban_isSet) {
        obj.insert(QString("iban"), ::OpenAPI::toJsonValue(m_iban));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_swift_isSet) {
        obj.insert(QString("swift"), ::OpenAPI::toJsonValue(m_swift));
    }
    if (m_taxcode_isSet) {
        obj.insert(QString("taxcode"), ::OpenAPI::toJsonValue(m_taxcode));
    }
    return obj;
}

QString OAIPartnerUpsert::getAccountNumber() const {
    return m_account_number;
}
void OAIPartnerUpsert::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIPartnerUpsert::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIPartnerUpsert::is_account_number_Valid() const{
    return m_account_number_isValid;
}

OAIAddress OAIPartnerUpsert::getAddress() const {
    return m_address;
}
void OAIPartnerUpsert::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPartnerUpsert::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPartnerUpsert::is_address_Valid() const{
    return m_address_isValid;
}

QList<QString> OAIPartnerUpsert::getEmails() const {
    return m_emails;
}
void OAIPartnerUpsert::setEmails(const QList<QString> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIPartnerUpsert::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIPartnerUpsert::is_emails_Valid() const{
    return m_emails_isValid;
}

QString OAIPartnerUpsert::getGeneralLedgerNumber() const {
    return m_general_ledger_number;
}
void OAIPartnerUpsert::setGeneralLedgerNumber(const QString &general_ledger_number) {
    m_general_ledger_number = general_ledger_number;
    m_general_ledger_number_isSet = true;
}

bool OAIPartnerUpsert::is_general_ledger_number_Set() const{
    return m_general_ledger_number_isSet;
}

bool OAIPartnerUpsert::is_general_ledger_number_Valid() const{
    return m_general_ledger_number_isValid;
}

QString OAIPartnerUpsert::getIban() const {
    return m_iban;
}
void OAIPartnerUpsert::setIban(const QString &iban) {
    m_iban = iban;
    m_iban_isSet = true;
}

bool OAIPartnerUpsert::is_iban_Set() const{
    return m_iban_isSet;
}

bool OAIPartnerUpsert::is_iban_Valid() const{
    return m_iban_isValid;
}

QString OAIPartnerUpsert::getName() const {
    return m_name;
}
void OAIPartnerUpsert::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPartnerUpsert::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPartnerUpsert::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPartnerUpsert::getPhone() const {
    return m_phone;
}
void OAIPartnerUpsert::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIPartnerUpsert::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIPartnerUpsert::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIPartnerUpsert::getSwift() const {
    return m_swift;
}
void OAIPartnerUpsert::setSwift(const QString &swift) {
    m_swift = swift;
    m_swift_isSet = true;
}

bool OAIPartnerUpsert::is_swift_Set() const{
    return m_swift_isSet;
}

bool OAIPartnerUpsert::is_swift_Valid() const{
    return m_swift_isValid;
}

QString OAIPartnerUpsert::getTaxcode() const {
    return m_taxcode;
}
void OAIPartnerUpsert::setTaxcode(const QString &taxcode) {
    m_taxcode = taxcode;
    m_taxcode_isSet = true;
}

bool OAIPartnerUpsert::is_taxcode_Set() const{
    return m_taxcode_isSet;
}

bool OAIPartnerUpsert::is_taxcode_Valid() const{
    return m_taxcode_isValid;
}

bool OAIPartnerUpsert::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_ledger_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_swift_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxcode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartnerUpsert::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
