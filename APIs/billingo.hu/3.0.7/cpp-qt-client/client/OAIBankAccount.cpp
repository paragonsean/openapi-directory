/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBankAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBankAccount::OAIBankAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBankAccount::OAIBankAccount() {
    this->initializeModel();
}

OAIBankAccount::~OAIBankAccount() {}

void OAIBankAccount::initializeModel() {

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_account_number_iban_isSet = false;
    m_account_number_iban_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_need_qr_isSet = false;
    m_need_qr_isValid = false;

    m_swift_isSet = false;
    m_swift_isValid = false;
}

void OAIBankAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBankAccount::fromJsonObject(QJsonObject json) {

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("account_number")]);
    m_account_number_isSet = !json[QString("account_number")].isNull() && m_account_number_isValid;

    m_account_number_iban_isValid = ::OpenAPI::fromJsonValue(m_account_number_iban, json[QString("account_number_iban")]);
    m_account_number_iban_isSet = !json[QString("account_number_iban")].isNull() && m_account_number_iban_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_need_qr_isValid = ::OpenAPI::fromJsonValue(m_need_qr, json[QString("need_qr")]);
    m_need_qr_isSet = !json[QString("need_qr")].isNull() && m_need_qr_isValid;

    m_swift_isValid = ::OpenAPI::fromJsonValue(m_swift, json[QString("swift")]);
    m_swift_isSet = !json[QString("swift")].isNull() && m_swift_isValid;
}

QString OAIBankAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBankAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account_number_isSet) {
        obj.insert(QString("account_number"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_account_number_iban_isSet) {
        obj.insert(QString("account_number_iban"), ::OpenAPI::toJsonValue(m_account_number_iban));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_need_qr_isSet) {
        obj.insert(QString("need_qr"), ::OpenAPI::toJsonValue(m_need_qr));
    }
    if (m_swift_isSet) {
        obj.insert(QString("swift"), ::OpenAPI::toJsonValue(m_swift));
    }
    return obj;
}

QString OAIBankAccount::getAccountNumber() const {
    return m_account_number;
}
void OAIBankAccount::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIBankAccount::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIBankAccount::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAIBankAccount::getAccountNumberIban() const {
    return m_account_number_iban;
}
void OAIBankAccount::setAccountNumberIban(const QString &account_number_iban) {
    m_account_number_iban = account_number_iban;
    m_account_number_iban_isSet = true;
}

bool OAIBankAccount::is_account_number_iban_Set() const{
    return m_account_number_iban_isSet;
}

bool OAIBankAccount::is_account_number_iban_Valid() const{
    return m_account_number_iban_isValid;
}

OAICurrency OAIBankAccount::getCurrency() const {
    return m_currency;
}
void OAIBankAccount::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIBankAccount::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIBankAccount::is_currency_Valid() const{
    return m_currency_isValid;
}

qint32 OAIBankAccount::getId() const {
    return m_id;
}
void OAIBankAccount::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBankAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBankAccount::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBankAccount::getName() const {
    return m_name;
}
void OAIBankAccount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBankAccount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBankAccount::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIBankAccount::isNeedQr() const {
    return m_need_qr;
}
void OAIBankAccount::setNeedQr(const bool &need_qr) {
    m_need_qr = need_qr;
    m_need_qr_isSet = true;
}

bool OAIBankAccount::is_need_qr_Set() const{
    return m_need_qr_isSet;
}

bool OAIBankAccount::is_need_qr_Valid() const{
    return m_need_qr_isValid;
}

QString OAIBankAccount::getSwift() const {
    return m_swift;
}
void OAIBankAccount::setSwift(const QString &swift) {
    m_swift = swift;
    m_swift_isSet = true;
}

bool OAIBankAccount::is_swift_Set() const{
    return m_swift_isSet;
}

bool OAIBankAccount::is_swift_Valid() const{
    return m_swift_isValid;
}

bool OAIBankAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_number_iban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_need_qr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_swift_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBankAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_number_isValid && m_currency_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
