/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentSettings::OAIDocumentSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentSettings::OAIDocumentSettings() {
    this->initializeModel();
}

OAIDocumentSettings::~OAIDocumentSettings() {}

void OAIDocumentSettings::initializeModel() {

    m_mediated_service_isSet = false;
    m_mediated_service_isValid = false;

    m_online_payment_isSet = false;
    m_online_payment_isValid = false;

    m_place_id_isSet = false;
    m_place_id_isValid = false;

    m_round_isSet = false;
    m_round_isValid = false;

    m_without_financial_fulfillment_isSet = false;
    m_without_financial_fulfillment_isValid = false;
}

void OAIDocumentSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentSettings::fromJsonObject(QJsonObject json) {

    m_mediated_service_isValid = ::OpenAPI::fromJsonValue(m_mediated_service, json[QString("mediated_service")]);
    m_mediated_service_isSet = !json[QString("mediated_service")].isNull() && m_mediated_service_isValid;

    m_online_payment_isValid = ::OpenAPI::fromJsonValue(m_online_payment, json[QString("online_payment")]);
    m_online_payment_isSet = !json[QString("online_payment")].isNull() && m_online_payment_isValid;

    m_place_id_isValid = ::OpenAPI::fromJsonValue(m_place_id, json[QString("place_id")]);
    m_place_id_isSet = !json[QString("place_id")].isNull() && m_place_id_isValid;

    m_round_isValid = ::OpenAPI::fromJsonValue(m_round, json[QString("round")]);
    m_round_isSet = !json[QString("round")].isNull() && m_round_isValid;

    m_without_financial_fulfillment_isValid = ::OpenAPI::fromJsonValue(m_without_financial_fulfillment, json[QString("without_financial_fulfillment")]);
    m_without_financial_fulfillment_isSet = !json[QString("without_financial_fulfillment")].isNull() && m_without_financial_fulfillment_isValid;
}

QString OAIDocumentSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_mediated_service_isSet) {
        obj.insert(QString("mediated_service"), ::OpenAPI::toJsonValue(m_mediated_service));
    }
    if (m_online_payment.isSet()) {
        obj.insert(QString("online_payment"), ::OpenAPI::toJsonValue(m_online_payment));
    }
    if (m_place_id_isSet) {
        obj.insert(QString("place_id"), ::OpenAPI::toJsonValue(m_place_id));
    }
    if (m_round.isSet()) {
        obj.insert(QString("round"), ::OpenAPI::toJsonValue(m_round));
    }
    if (m_without_financial_fulfillment_isSet) {
        obj.insert(QString("without_financial_fulfillment"), ::OpenAPI::toJsonValue(m_without_financial_fulfillment));
    }
    return obj;
}

bool OAIDocumentSettings::isMediatedService() const {
    return m_mediated_service;
}
void OAIDocumentSettings::setMediatedService(const bool &mediated_service) {
    m_mediated_service = mediated_service;
    m_mediated_service_isSet = true;
}

bool OAIDocumentSettings::is_mediated_service_Set() const{
    return m_mediated_service_isSet;
}

bool OAIDocumentSettings::is_mediated_service_Valid() const{
    return m_mediated_service_isValid;
}

OAIOnlinePayment OAIDocumentSettings::getOnlinePayment() const {
    return m_online_payment;
}
void OAIDocumentSettings::setOnlinePayment(const OAIOnlinePayment &online_payment) {
    m_online_payment = online_payment;
    m_online_payment_isSet = true;
}

bool OAIDocumentSettings::is_online_payment_Set() const{
    return m_online_payment_isSet;
}

bool OAIDocumentSettings::is_online_payment_Valid() const{
    return m_online_payment_isValid;
}

qint32 OAIDocumentSettings::getPlaceId() const {
    return m_place_id;
}
void OAIDocumentSettings::setPlaceId(const qint32 &place_id) {
    m_place_id = place_id;
    m_place_id_isSet = true;
}

bool OAIDocumentSettings::is_place_id_Set() const{
    return m_place_id_isSet;
}

bool OAIDocumentSettings::is_place_id_Valid() const{
    return m_place_id_isValid;
}

OAIRound OAIDocumentSettings::getRound() const {
    return m_round;
}
void OAIDocumentSettings::setRound(const OAIRound &round) {
    m_round = round;
    m_round_isSet = true;
}

bool OAIDocumentSettings::is_round_Set() const{
    return m_round_isSet;
}

bool OAIDocumentSettings::is_round_Valid() const{
    return m_round_isValid;
}

bool OAIDocumentSettings::isWithoutFinancialFulfillment() const {
    return m_without_financial_fulfillment;
}
void OAIDocumentSettings::setWithoutFinancialFulfillment(const bool &without_financial_fulfillment) {
    m_without_financial_fulfillment = without_financial_fulfillment;
    m_without_financial_fulfillment_isSet = true;
}

bool OAIDocumentSettings::is_without_financial_fulfillment_Set() const{
    return m_without_financial_fulfillment_isSet;
}

bool OAIDocumentSettings::is_without_financial_fulfillment_Valid() const{
    return m_without_financial_fulfillment_isValid;
}

bool OAIDocumentSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mediated_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_round.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_without_financial_fulfillment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
