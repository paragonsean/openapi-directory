/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentBlockList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentBlockList::OAIDocumentBlockList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentBlockList::OAIDocumentBlockList() {
    this->initializeModel();
}

OAIDocumentBlockList::~OAIDocumentBlockList() {}

void OAIDocumentBlockList::initializeModel() {

    m_current_page_isSet = false;
    m_current_page_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_last_page_isSet = false;
    m_last_page_isValid = false;

    m_next_page_url_isSet = false;
    m_next_page_url_isValid = false;

    m_per_page_isSet = false;
    m_per_page_isValid = false;

    m_prev_page_url_isSet = false;
    m_prev_page_url_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIDocumentBlockList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentBlockList::fromJsonObject(QJsonObject json) {

    m_current_page_isValid = ::OpenAPI::fromJsonValue(m_current_page, json[QString("current_page")]);
    m_current_page_isSet = !json[QString("current_page")].isNull() && m_current_page_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_last_page_isValid = ::OpenAPI::fromJsonValue(m_last_page, json[QString("last_page")]);
    m_last_page_isSet = !json[QString("last_page")].isNull() && m_last_page_isValid;

    m_next_page_url_isValid = ::OpenAPI::fromJsonValue(m_next_page_url, json[QString("next_page_url")]);
    m_next_page_url_isSet = !json[QString("next_page_url")].isNull() && m_next_page_url_isValid;

    m_per_page_isValid = ::OpenAPI::fromJsonValue(m_per_page, json[QString("per_page")]);
    m_per_page_isSet = !json[QString("per_page")].isNull() && m_per_page_isValid;

    m_prev_page_url_isValid = ::OpenAPI::fromJsonValue(m_prev_page_url, json[QString("prev_page_url")]);
    m_prev_page_url_isSet = !json[QString("prev_page_url")].isNull() && m_prev_page_url_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIDocumentBlockList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentBlockList::asJsonObject() const {
    QJsonObject obj;
    if (m_current_page_isSet) {
        obj.insert(QString("current_page"), ::OpenAPI::toJsonValue(m_current_page));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_last_page_isSet) {
        obj.insert(QString("last_page"), ::OpenAPI::toJsonValue(m_last_page));
    }
    if (m_next_page_url_isSet) {
        obj.insert(QString("next_page_url"), ::OpenAPI::toJsonValue(m_next_page_url));
    }
    if (m_per_page_isSet) {
        obj.insert(QString("per_page"), ::OpenAPI::toJsonValue(m_per_page));
    }
    if (m_prev_page_url_isSet) {
        obj.insert(QString("prev_page_url"), ::OpenAPI::toJsonValue(m_prev_page_url));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAIDocumentBlockList::getCurrentPage() const {
    return m_current_page;
}
void OAIDocumentBlockList::setCurrentPage(const qint32 &current_page) {
    m_current_page = current_page;
    m_current_page_isSet = true;
}

bool OAIDocumentBlockList::is_current_page_Set() const{
    return m_current_page_isSet;
}

bool OAIDocumentBlockList::is_current_page_Valid() const{
    return m_current_page_isValid;
}

QList<OAIDocumentBlock> OAIDocumentBlockList::getData() const {
    return m_data;
}
void OAIDocumentBlockList::setData(const QList<OAIDocumentBlock> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIDocumentBlockList::is_data_Set() const{
    return m_data_isSet;
}

bool OAIDocumentBlockList::is_data_Valid() const{
    return m_data_isValid;
}

qint32 OAIDocumentBlockList::getLastPage() const {
    return m_last_page;
}
void OAIDocumentBlockList::setLastPage(const qint32 &last_page) {
    m_last_page = last_page;
    m_last_page_isSet = true;
}

bool OAIDocumentBlockList::is_last_page_Set() const{
    return m_last_page_isSet;
}

bool OAIDocumentBlockList::is_last_page_Valid() const{
    return m_last_page_isValid;
}

QString OAIDocumentBlockList::getNextPageUrl() const {
    return m_next_page_url;
}
void OAIDocumentBlockList::setNextPageUrl(const QString &next_page_url) {
    m_next_page_url = next_page_url;
    m_next_page_url_isSet = true;
}

bool OAIDocumentBlockList::is_next_page_url_Set() const{
    return m_next_page_url_isSet;
}

bool OAIDocumentBlockList::is_next_page_url_Valid() const{
    return m_next_page_url_isValid;
}

qint32 OAIDocumentBlockList::getPerPage() const {
    return m_per_page;
}
void OAIDocumentBlockList::setPerPage(const qint32 &per_page) {
    m_per_page = per_page;
    m_per_page_isSet = true;
}

bool OAIDocumentBlockList::is_per_page_Set() const{
    return m_per_page_isSet;
}

bool OAIDocumentBlockList::is_per_page_Valid() const{
    return m_per_page_isValid;
}

QString OAIDocumentBlockList::getPrevPageUrl() const {
    return m_prev_page_url;
}
void OAIDocumentBlockList::setPrevPageUrl(const QString &prev_page_url) {
    m_prev_page_url = prev_page_url;
    m_prev_page_url_isSet = true;
}

bool OAIDocumentBlockList::is_prev_page_url_Set() const{
    return m_prev_page_url_isSet;
}

bool OAIDocumentBlockList::is_prev_page_url_Valid() const{
    return m_prev_page_url_isValid;
}

qint32 OAIDocumentBlockList::getTotal() const {
    return m_total;
}
void OAIDocumentBlockList::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIDocumentBlockList::is_total_Set() const{
    return m_total_isSet;
}

bool OAIDocumentBlockList::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIDocumentBlockList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentBlockList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
