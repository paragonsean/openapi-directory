/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentOrganization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentOrganization::OAIDocumentOrganization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentOrganization::OAIDocumentOrganization() {
    this->initializeModel();
}

OAIDocumentOrganization::~OAIDocumentOrganization() {}

void OAIDocumentOrganization::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_bank_account_isSet = false;
    m_bank_account_isValid = false;

    m_cash_settled_isSet = false;
    m_cash_settled_isValid = false;

    m_eu_tax_number_isSet = false;
    m_eu_tax_number_isValid = false;

    m_ev_number_isSet = false;
    m_ev_number_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_small_taxpayer_isSet = false;
    m_small_taxpayer_isValid = false;

    m_tax_number_isSet = false;
    m_tax_number_isValid = false;
}

void OAIDocumentOrganization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentOrganization::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_bank_account_isValid = ::OpenAPI::fromJsonValue(m_bank_account, json[QString("bank_account")]);
    m_bank_account_isSet = !json[QString("bank_account")].isNull() && m_bank_account_isValid;

    m_cash_settled_isValid = ::OpenAPI::fromJsonValue(m_cash_settled, json[QString("cash_settled")]);
    m_cash_settled_isSet = !json[QString("cash_settled")].isNull() && m_cash_settled_isValid;

    m_eu_tax_number_isValid = ::OpenAPI::fromJsonValue(m_eu_tax_number, json[QString("eu_tax_number")]);
    m_eu_tax_number_isSet = !json[QString("eu_tax_number")].isNull() && m_eu_tax_number_isValid;

    m_ev_number_isValid = ::OpenAPI::fromJsonValue(m_ev_number, json[QString("ev_number")]);
    m_ev_number_isSet = !json[QString("ev_number")].isNull() && m_ev_number_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_small_taxpayer_isValid = ::OpenAPI::fromJsonValue(m_small_taxpayer, json[QString("small_taxpayer")]);
    m_small_taxpayer_isSet = !json[QString("small_taxpayer")].isNull() && m_small_taxpayer_isValid;

    m_tax_number_isValid = ::OpenAPI::fromJsonValue(m_tax_number, json[QString("tax_number")]);
    m_tax_number_isSet = !json[QString("tax_number")].isNull() && m_tax_number_isValid;
}

QString OAIDocumentOrganization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentOrganization::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_bank_account.isSet()) {
        obj.insert(QString("bank_account"), ::OpenAPI::toJsonValue(m_bank_account));
    }
    if (m_cash_settled_isSet) {
        obj.insert(QString("cash_settled"), ::OpenAPI::toJsonValue(m_cash_settled));
    }
    if (m_eu_tax_number_isSet) {
        obj.insert(QString("eu_tax_number"), ::OpenAPI::toJsonValue(m_eu_tax_number));
    }
    if (m_ev_number_isSet) {
        obj.insert(QString("ev_number"), ::OpenAPI::toJsonValue(m_ev_number));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_small_taxpayer_isSet) {
        obj.insert(QString("small_taxpayer"), ::OpenAPI::toJsonValue(m_small_taxpayer));
    }
    if (m_tax_number_isSet) {
        obj.insert(QString("tax_number"), ::OpenAPI::toJsonValue(m_tax_number));
    }
    return obj;
}

OAIAddress OAIDocumentOrganization::getAddress() const {
    return m_address;
}
void OAIDocumentOrganization::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIDocumentOrganization::is_address_Set() const{
    return m_address_isSet;
}

bool OAIDocumentOrganization::is_address_Valid() const{
    return m_address_isValid;
}

OAIDocumentBankAccount OAIDocumentOrganization::getBankAccount() const {
    return m_bank_account;
}
void OAIDocumentOrganization::setBankAccount(const OAIDocumentBankAccount &bank_account) {
    m_bank_account = bank_account;
    m_bank_account_isSet = true;
}

bool OAIDocumentOrganization::is_bank_account_Set() const{
    return m_bank_account_isSet;
}

bool OAIDocumentOrganization::is_bank_account_Valid() const{
    return m_bank_account_isValid;
}

bool OAIDocumentOrganization::isCashSettled() const {
    return m_cash_settled;
}
void OAIDocumentOrganization::setCashSettled(const bool &cash_settled) {
    m_cash_settled = cash_settled;
    m_cash_settled_isSet = true;
}

bool OAIDocumentOrganization::is_cash_settled_Set() const{
    return m_cash_settled_isSet;
}

bool OAIDocumentOrganization::is_cash_settled_Valid() const{
    return m_cash_settled_isValid;
}

QString OAIDocumentOrganization::getEuTaxNumber() const {
    return m_eu_tax_number;
}
void OAIDocumentOrganization::setEuTaxNumber(const QString &eu_tax_number) {
    m_eu_tax_number = eu_tax_number;
    m_eu_tax_number_isSet = true;
}

bool OAIDocumentOrganization::is_eu_tax_number_Set() const{
    return m_eu_tax_number_isSet;
}

bool OAIDocumentOrganization::is_eu_tax_number_Valid() const{
    return m_eu_tax_number_isValid;
}

QString OAIDocumentOrganization::getEvNumber() const {
    return m_ev_number;
}
void OAIDocumentOrganization::setEvNumber(const QString &ev_number) {
    m_ev_number = ev_number;
    m_ev_number_isSet = true;
}

bool OAIDocumentOrganization::is_ev_number_Set() const{
    return m_ev_number_isSet;
}

bool OAIDocumentOrganization::is_ev_number_Valid() const{
    return m_ev_number_isValid;
}

QString OAIDocumentOrganization::getName() const {
    return m_name;
}
void OAIDocumentOrganization::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDocumentOrganization::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDocumentOrganization::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIDocumentOrganization::isSmallTaxpayer() const {
    return m_small_taxpayer;
}
void OAIDocumentOrganization::setSmallTaxpayer(const bool &small_taxpayer) {
    m_small_taxpayer = small_taxpayer;
    m_small_taxpayer_isSet = true;
}

bool OAIDocumentOrganization::is_small_taxpayer_Set() const{
    return m_small_taxpayer_isSet;
}

bool OAIDocumentOrganization::is_small_taxpayer_Valid() const{
    return m_small_taxpayer_isValid;
}

QString OAIDocumentOrganization::getTaxNumber() const {
    return m_tax_number;
}
void OAIDocumentOrganization::setTaxNumber(const QString &tax_number) {
    m_tax_number = tax_number;
    m_tax_number_isSet = true;
}

bool OAIDocumentOrganization::is_tax_number_Set() const{
    return m_tax_number_isSet;
}

bool OAIDocumentOrganization::is_tax_number_Valid() const{
    return m_tax_number_isValid;
}

bool OAIDocumentOrganization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_settled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eu_tax_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ev_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_taxpayer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentOrganization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
