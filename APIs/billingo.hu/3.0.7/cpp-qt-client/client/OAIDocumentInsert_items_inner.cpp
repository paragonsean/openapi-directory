/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentInsert_items_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentInsert_items_inner::OAIDocumentInsert_items_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentInsert_items_inner::OAIDocumentInsert_items_inner() {
    this->initializeModel();
}

OAIDocumentInsert_items_inner::~OAIDocumentInsert_items_inner() {}

void OAIDocumentInsert_items_inner::initializeModel() {

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;

    m_unit_price_type_isSet = false;
    m_unit_price_type_isValid = false;

    m_vat_isSet = false;
    m_vat_isValid = false;
}

void OAIDocumentInsert_items_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentInsert_items_inner::fromJsonObject(QJsonObject json) {

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("product_id")]);
    m_product_id_isSet = !json[QString("product_id")].isNull() && m_product_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unit_price")]);
    m_unit_price_isSet = !json[QString("unit_price")].isNull() && m_unit_price_isValid;

    m_unit_price_type_isValid = ::OpenAPI::fromJsonValue(m_unit_price_type, json[QString("unit_price_type")]);
    m_unit_price_type_isSet = !json[QString("unit_price_type")].isNull() && m_unit_price_type_isValid;

    m_vat_isValid = ::OpenAPI::fromJsonValue(m_vat, json[QString("vat")]);
    m_vat_isSet = !json[QString("vat")].isNull() && m_vat_isValid;
}

QString OAIDocumentInsert_items_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentInsert_items_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_product_id_isSet) {
        obj.insert(QString("product_id"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_unit_price_isSet) {
        obj.insert(QString("unit_price"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    if (m_unit_price_type.isSet()) {
        obj.insert(QString("unit_price_type"), ::OpenAPI::toJsonValue(m_unit_price_type));
    }
    if (m_vat.isSet()) {
        obj.insert(QString("vat"), ::OpenAPI::toJsonValue(m_vat));
    }
    return obj;
}

qint32 OAIDocumentInsert_items_inner::getProductId() const {
    return m_product_id;
}
void OAIDocumentInsert_items_inner::setProductId(const qint32 &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIDocumentInsert_items_inner::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIDocumentInsert_items_inner::is_product_id_Valid() const{
    return m_product_id_isValid;
}

float OAIDocumentInsert_items_inner::getQuantity() const {
    return m_quantity;
}
void OAIDocumentInsert_items_inner::setQuantity(const float &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIDocumentInsert_items_inner::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIDocumentInsert_items_inner::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIDocumentInsert_items_inner::getComment() const {
    return m_comment;
}
void OAIDocumentInsert_items_inner::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIDocumentInsert_items_inner::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIDocumentInsert_items_inner::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIDocumentInsert_items_inner::getName() const {
    return m_name;
}
void OAIDocumentInsert_items_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDocumentInsert_items_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDocumentInsert_items_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDocumentInsert_items_inner::getUnit() const {
    return m_unit;
}
void OAIDocumentInsert_items_inner::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIDocumentInsert_items_inner::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIDocumentInsert_items_inner::is_unit_Valid() const{
    return m_unit_isValid;
}

float OAIDocumentInsert_items_inner::getUnitPrice() const {
    return m_unit_price;
}
void OAIDocumentInsert_items_inner::setUnitPrice(const float &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIDocumentInsert_items_inner::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIDocumentInsert_items_inner::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

OAIUnitPriceType OAIDocumentInsert_items_inner::getUnitPriceType() const {
    return m_unit_price_type;
}
void OAIDocumentInsert_items_inner::setUnitPriceType(const OAIUnitPriceType &unit_price_type) {
    m_unit_price_type = unit_price_type;
    m_unit_price_type_isSet = true;
}

bool OAIDocumentInsert_items_inner::is_unit_price_type_Set() const{
    return m_unit_price_type_isSet;
}

bool OAIDocumentInsert_items_inner::is_unit_price_type_Valid() const{
    return m_unit_price_type_isValid;
}

OAIVat OAIDocumentInsert_items_inner::getVat() const {
    return m_vat;
}
void OAIDocumentInsert_items_inner::setVat(const OAIVat &vat) {
    m_vat = vat;
    m_vat_isSet = true;
}

bool OAIDocumentInsert_items_inner::is_vat_Set() const{
    return m_vat_isSet;
}

bool OAIDocumentInsert_items_inner::is_vat_Valid() const{
    return m_vat_isValid;
}

bool OAIDocumentInsert_items_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentInsert_items_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_product_id_isValid && m_quantity_isValid && m_name_isValid && m_unit_isValid && m_unit_price_isValid && m_unit_price_type_isValid && m_vat_isValid && true;
}

} // namespace OpenAPI
