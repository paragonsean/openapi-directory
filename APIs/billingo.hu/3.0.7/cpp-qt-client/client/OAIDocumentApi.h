/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDocumentApi_H
#define OAI_OAIDocumentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIClientError.h"
#include "OAIClientErrorResponse.h"
#include "OAIDocument.h"
#include "OAIDocumentInsert.h"
#include "OAIDocumentList.h"
#include "OAIDocumentPublicUrl.h"
#include "OAIHttpFileElement.h"
#include "OAIOnlineSzamlaStatus.h"
#include "OAIPaymentHistory.h"
#include "OAIPaymentMethod.h"
#include "OAIPaymentStatus.h"
#include "OAISendDocument.h"
#include "OAIServerErrorResponse.h"
#include "OAIValidationErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDocumentApi : public QObject {
    Q_OBJECT

public:
    OAIDocumentApi(const int timeOut = 0);
    ~OAIDocumentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void cancelDocument(const qint32 &id);

    /**
    * @param[in]  oai_document_insert OAIDocumentInsert [required]
    */
    virtual void createDocument(const OAIDocumentInsert &oai_document_insert);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void createDocumentFromProforma(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deletePayment(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void downloadDocument(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getDocument(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getOnlineSzamlaStatus(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getPayment(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getPublicUrl(const qint32 &id);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  block_id qint32 [optional]
    * @param[in]  partner_id qint32 [optional]
    * @param[in]  payment_method OAIPaymentMethod [optional]
    * @param[in]  payment_status OAIPaymentStatus [optional]
    * @param[in]  start_date QDate [optional]
    * @param[in]  end_date QDate [optional]
    * @param[in]  start_number qint32 [optional]
    * @param[in]  end_number qint32 [optional]
    * @param[in]  start_year qint32 [optional]
    * @param[in]  end_year qint32 [optional]
    */
    virtual void listDocument(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &block_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &partner_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIPaymentMethod> &payment_method = ::OpenAPI::OptionalParam<OAIPaymentMethod>(), const ::OpenAPI::OptionalParam<OAIPaymentStatus> &payment_status = ::OpenAPI::OptionalParam<OAIPaymentStatus>(), const ::OpenAPI::OptionalParam<QDate> &start_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &end_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &start_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &end_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &end_year = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_send_document OAISendDocument [optional]
    */
    virtual void sendDocument(const qint32 &id, const ::OpenAPI::OptionalParam<OAISendDocument> &oai_send_document = ::OpenAPI::OptionalParam<OAISendDocument>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_payment_history QList<OAIPaymentHistory> [required]
    */
    virtual void updatePayment(const qint32 &id, const QList<OAIPaymentHistory> &oai_payment_history);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelDocumentCallback(OAIHttpRequestWorker *worker);
    void createDocumentCallback(OAIHttpRequestWorker *worker);
    void createDocumentFromProformaCallback(OAIHttpRequestWorker *worker);
    void deletePaymentCallback(OAIHttpRequestWorker *worker);
    void downloadDocumentCallback(OAIHttpRequestWorker *worker);
    void getDocumentCallback(OAIHttpRequestWorker *worker);
    void getOnlineSzamlaStatusCallback(OAIHttpRequestWorker *worker);
    void getPaymentCallback(OAIHttpRequestWorker *worker);
    void getPublicUrlCallback(OAIHttpRequestWorker *worker);
    void listDocumentCallback(OAIHttpRequestWorker *worker);
    void sendDocumentCallback(OAIHttpRequestWorker *worker);
    void updatePaymentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelDocumentSignal(OAIDocument summary);
    void createDocumentSignal(OAIDocument summary);
    void createDocumentFromProformaSignal(OAIDocument summary);
    void deletePaymentSignal(QList<OAIPaymentHistory> summary);
    void downloadDocumentSignal(OAIHttpFileElement summary);
    void getDocumentSignal(OAIDocument summary);
    void getOnlineSzamlaStatusSignal(OAIOnlineSzamlaStatus summary);
    void getPaymentSignal(QList<OAIPaymentHistory> summary);
    void getPublicUrlSignal(OAIDocumentPublicUrl summary);
    void listDocumentSignal(OAIDocumentList summary);
    void sendDocumentSignal(OAISendDocument summary);
    void updatePaymentSignal(QList<OAIPaymentHistory> summary);


    void cancelDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void createDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void createDocumentFromProformaSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void deletePaymentSignalFull(OAIHttpRequestWorker *worker, QList<OAIPaymentHistory> summary);
    void downloadDocumentSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void getOnlineSzamlaStatusSignalFull(OAIHttpRequestWorker *worker, OAIOnlineSzamlaStatus summary);
    void getPaymentSignalFull(OAIHttpRequestWorker *worker, QList<OAIPaymentHistory> summary);
    void getPublicUrlSignalFull(OAIHttpRequestWorker *worker, OAIDocumentPublicUrl summary);
    void listDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocumentList summary);
    void sendDocumentSignalFull(OAIHttpRequestWorker *worker, OAISendDocument summary);
    void updatePaymentSignalFull(OAIHttpRequestWorker *worker, QList<OAIPaymentHistory> summary);

    Q_DECL_DEPRECATED_X("Use cancelDocumentSignalError() instead")
    void cancelDocumentSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelDocumentSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDocumentSignalError() instead")
    void createDocumentSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDocumentSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDocumentFromProformaSignalError() instead")
    void createDocumentFromProformaSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDocumentFromProformaSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePaymentSignalError() instead")
    void deletePaymentSignalE(QList<OAIPaymentHistory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePaymentSignalError(QList<OAIPaymentHistory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadDocumentSignalError() instead")
    void downloadDocumentSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadDocumentSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentSignalError() instead")
    void getDocumentSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOnlineSzamlaStatusSignalError() instead")
    void getOnlineSzamlaStatusSignalE(OAIOnlineSzamlaStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOnlineSzamlaStatusSignalError(OAIOnlineSzamlaStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentSignalError() instead")
    void getPaymentSignalE(QList<OAIPaymentHistory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentSignalError(QList<OAIPaymentHistory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicUrlSignalError() instead")
    void getPublicUrlSignalE(OAIDocumentPublicUrl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicUrlSignalError(OAIDocumentPublicUrl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDocumentSignalError() instead")
    void listDocumentSignalE(OAIDocumentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDocumentSignalError(OAIDocumentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendDocumentSignalError() instead")
    void sendDocumentSignalE(OAISendDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendDocumentSignalError(OAISendDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaymentSignalError() instead")
    void updatePaymentSignalE(QList<OAIPaymentHistory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaymentSignalError(QList<OAIPaymentHistory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelDocumentSignalErrorFull() instead")
    void cancelDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDocumentSignalErrorFull() instead")
    void createDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDocumentFromProformaSignalErrorFull() instead")
    void createDocumentFromProformaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDocumentFromProformaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePaymentSignalErrorFull() instead")
    void deletePaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadDocumentSignalErrorFull() instead")
    void downloadDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentSignalErrorFull() instead")
    void getDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOnlineSzamlaStatusSignalErrorFull() instead")
    void getOnlineSzamlaStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOnlineSzamlaStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPaymentSignalErrorFull() instead")
    void getPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicUrlSignalErrorFull() instead")
    void getPublicUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDocumentSignalErrorFull() instead")
    void listDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendDocumentSignalErrorFull() instead")
    void sendDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePaymentSignalErrorFull() instead")
    void updatePaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
