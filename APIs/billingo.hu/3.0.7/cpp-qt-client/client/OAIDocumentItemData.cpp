/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentItemData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentItemData::OAIDocumentItemData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentItemData::OAIDocumentItemData() {
    this->initializeModel();
}

OAIDocumentItemData::~OAIDocumentItemData() {}

void OAIDocumentItemData::initializeModel() {

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;
}

void OAIDocumentItemData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentItemData::fromJsonObject(QJsonObject json) {

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("product_id")]);
    m_product_id_isSet = !json[QString("product_id")].isNull() && m_product_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;
}

QString OAIDocumentItemData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentItemData::asJsonObject() const {
    QJsonObject obj;
    if (m_product_id_isSet) {
        obj.insert(QString("product_id"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    return obj;
}

qint32 OAIDocumentItemData::getProductId() const {
    return m_product_id;
}
void OAIDocumentItemData::setProductId(const qint32 &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIDocumentItemData::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIDocumentItemData::is_product_id_Valid() const{
    return m_product_id_isValid;
}

float OAIDocumentItemData::getQuantity() const {
    return m_quantity;
}
void OAIDocumentItemData::setQuantity(const float &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIDocumentItemData::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIDocumentItemData::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAIDocumentItemData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentItemData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_product_id_isValid && m_quantity_isValid && true;
}

} // namespace OpenAPI
