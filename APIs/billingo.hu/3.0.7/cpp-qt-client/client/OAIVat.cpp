/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVat::OAIVat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVat::OAIVat() {
    this->initializeModel();
}

OAIVat::~OAIVat() {}

void OAIVat::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIVat::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIVat::fromJson(QString jsonString) {
    
    if ( jsonString.compare("0%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_0_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("1%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_1_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("10%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_10_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("11%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_11_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("12%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_12_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("13%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_13_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("14%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_14_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("15%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_15_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("16%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_16_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("17%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_17_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("18%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_18_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("19%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_19_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("2%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_2_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("20%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_20_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("21%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_21_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("22%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_22_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("23%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_23_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("24%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_24_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("25%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_25_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("26%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_26_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("27%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_27_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("3%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_3_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("4%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_4_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("5%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_5_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("6%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_6_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("7%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_7_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("8%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_8_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("9%", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_9_;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AAM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::AAM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::AM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EU", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::EU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EUK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::EUK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("F.AFA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::F_AFA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::FAD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("K.AFA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::K_AFA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::MAA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::TAM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ÁKK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_KK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ÁTHK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVat::_THK;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIVat::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIVat::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIVat::_0_:
            val = "0%";
            break;
        case eOAIVat::_1_:
            val = "1%";
            break;
        case eOAIVat::_10_:
            val = "10%";
            break;
        case eOAIVat::_11_:
            val = "11%";
            break;
        case eOAIVat::_12_:
            val = "12%";
            break;
        case eOAIVat::_13_:
            val = "13%";
            break;
        case eOAIVat::_14_:
            val = "14%";
            break;
        case eOAIVat::_15_:
            val = "15%";
            break;
        case eOAIVat::_16_:
            val = "16%";
            break;
        case eOAIVat::_17_:
            val = "17%";
            break;
        case eOAIVat::_18_:
            val = "18%";
            break;
        case eOAIVat::_19_:
            val = "19%";
            break;
        case eOAIVat::_2_:
            val = "2%";
            break;
        case eOAIVat::_20_:
            val = "20%";
            break;
        case eOAIVat::_21_:
            val = "21%";
            break;
        case eOAIVat::_22_:
            val = "22%";
            break;
        case eOAIVat::_23_:
            val = "23%";
            break;
        case eOAIVat::_24_:
            val = "24%";
            break;
        case eOAIVat::_25_:
            val = "25%";
            break;
        case eOAIVat::_26_:
            val = "26%";
            break;
        case eOAIVat::_27_:
            val = "27%";
            break;
        case eOAIVat::_3_:
            val = "3%";
            break;
        case eOAIVat::_4_:
            val = "4%";
            break;
        case eOAIVat::_5_:
            val = "5%";
            break;
        case eOAIVat::_6_:
            val = "6%";
            break;
        case eOAIVat::_7_:
            val = "7%";
            break;
        case eOAIVat::_8_:
            val = "8%";
            break;
        case eOAIVat::_9_:
            val = "9%";
            break;
        case eOAIVat::AAM:
            val = "AAM";
            break;
        case eOAIVat::AM:
            val = "AM";
            break;
        case eOAIVat::EU:
            val = "EU";
            break;
        case eOAIVat::EUK:
            val = "EUK";
            break;
        case eOAIVat::F_AFA:
            val = "F.AFA";
            break;
        case eOAIVat::FAD:
            val = "FAD";
            break;
        case eOAIVat::K_AFA:
            val = "K.AFA";
            break;
        case eOAIVat::MAA:
            val = "MAA";
            break;
        case eOAIVat::TAM:
            val = "TAM";
            break;
        case eOAIVat::_KK:
            val = "ÁKK";
            break;
        case eOAIVat::_THK:
            val = "ÁTHK";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIVat::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIVat::eOAIVat OAIVat::getValue() const {
    return m_value;
}

void OAIVat::setValue(const OAIVat::eOAIVat& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIVat::isSet() const {
    
    return m_value_isSet;
}

bool OAIVat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
