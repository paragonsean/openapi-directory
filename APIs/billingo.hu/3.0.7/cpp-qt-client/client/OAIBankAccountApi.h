/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBankAccountApi_H
#define OAI_OAIBankAccountApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBankAccount.h"
#include "OAIBankAccountList.h"
#include "OAIClientErrorResponse.h"
#include "OAIServerErrorResponse.h"
#include "OAIValidationErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBankAccountApi : public QObject {
    Q_OBJECT

public:
    OAIBankAccountApi(const int timeOut = 0);
    ~OAIBankAccountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_bank_account OAIBankAccount [required]
    */
    virtual void createBankAccount(const OAIBankAccount &oai_bank_account);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteBankAccount(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getBankAccount(const qint32 &id);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void listBankAccount(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_bank_account OAIBankAccount [required]
    */
    virtual void updateBankAccount(const qint32 &id, const OAIBankAccount &oai_bank_account);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createBankAccountCallback(OAIHttpRequestWorker *worker);
    void deleteBankAccountCallback(OAIHttpRequestWorker *worker);
    void getBankAccountCallback(OAIHttpRequestWorker *worker);
    void listBankAccountCallback(OAIHttpRequestWorker *worker);
    void updateBankAccountCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createBankAccountSignal(OAIBankAccount summary);
    void deleteBankAccountSignal();
    void getBankAccountSignal(OAIBankAccount summary);
    void listBankAccountSignal(OAIBankAccountList summary);
    void updateBankAccountSignal(OAIBankAccount summary);


    void createBankAccountSignalFull(OAIHttpRequestWorker *worker, OAIBankAccount summary);
    void deleteBankAccountSignalFull(OAIHttpRequestWorker *worker);
    void getBankAccountSignalFull(OAIHttpRequestWorker *worker, OAIBankAccount summary);
    void listBankAccountSignalFull(OAIHttpRequestWorker *worker, OAIBankAccountList summary);
    void updateBankAccountSignalFull(OAIHttpRequestWorker *worker, OAIBankAccount summary);

    Q_DECL_DEPRECATED_X("Use createBankAccountSignalError() instead")
    void createBankAccountSignalE(OAIBankAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBankAccountSignalError(OAIBankAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBankAccountSignalError() instead")
    void deleteBankAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBankAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankAccountSignalError() instead")
    void getBankAccountSignalE(OAIBankAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankAccountSignalError(OAIBankAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBankAccountSignalError() instead")
    void listBankAccountSignalE(OAIBankAccountList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBankAccountSignalError(OAIBankAccountList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBankAccountSignalError() instead")
    void updateBankAccountSignalE(OAIBankAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBankAccountSignalError(OAIBankAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createBankAccountSignalErrorFull() instead")
    void createBankAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBankAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBankAccountSignalErrorFull() instead")
    void deleteBankAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBankAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBankAccountSignalErrorFull() instead")
    void getBankAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBankAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBankAccountSignalErrorFull() instead")
    void listBankAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBankAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBankAccountSignalErrorFull() instead")
    void updateBankAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBankAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
