/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentItem::OAIDocumentItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentItem::OAIDocumentItem() {
    this->initializeModel();
}

OAIDocumentItem::~OAIDocumentItem() {}

void OAIDocumentItem::initializeModel() {

    m_gross_amount_isSet = false;
    m_gross_amount_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_net_amount_isSet = false;
    m_net_amount_isValid = false;

    m_net_unit_amount_isSet = false;
    m_net_unit_amount_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_vat_isSet = false;
    m_vat_isValid = false;

    m_vat_amount_isSet = false;
    m_vat_amount_isValid = false;
}

void OAIDocumentItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentItem::fromJsonObject(QJsonObject json) {

    m_gross_amount_isValid = ::OpenAPI::fromJsonValue(m_gross_amount, json[QString("gross_amount")]);
    m_gross_amount_isSet = !json[QString("gross_amount")].isNull() && m_gross_amount_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_net_amount_isValid = ::OpenAPI::fromJsonValue(m_net_amount, json[QString("net_amount")]);
    m_net_amount_isSet = !json[QString("net_amount")].isNull() && m_net_amount_isValid;

    m_net_unit_amount_isValid = ::OpenAPI::fromJsonValue(m_net_unit_amount, json[QString("net_unit_amount")]);
    m_net_unit_amount_isSet = !json[QString("net_unit_amount")].isNull() && m_net_unit_amount_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("product_id")]);
    m_product_id_isSet = !json[QString("product_id")].isNull() && m_product_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_vat_isValid = ::OpenAPI::fromJsonValue(m_vat, json[QString("vat")]);
    m_vat_isSet = !json[QString("vat")].isNull() && m_vat_isValid;

    m_vat_amount_isValid = ::OpenAPI::fromJsonValue(m_vat_amount, json[QString("vat_amount")]);
    m_vat_amount_isSet = !json[QString("vat_amount")].isNull() && m_vat_amount_isValid;
}

QString OAIDocumentItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentItem::asJsonObject() const {
    QJsonObject obj;
    if (m_gross_amount_isSet) {
        obj.insert(QString("gross_amount"), ::OpenAPI::toJsonValue(m_gross_amount));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_net_amount_isSet) {
        obj.insert(QString("net_amount"), ::OpenAPI::toJsonValue(m_net_amount));
    }
    if (m_net_unit_amount_isSet) {
        obj.insert(QString("net_unit_amount"), ::OpenAPI::toJsonValue(m_net_unit_amount));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("product_id"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_vat.isSet()) {
        obj.insert(QString("vat"), ::OpenAPI::toJsonValue(m_vat));
    }
    if (m_vat_amount_isSet) {
        obj.insert(QString("vat_amount"), ::OpenAPI::toJsonValue(m_vat_amount));
    }
    return obj;
}

float OAIDocumentItem::getGrossAmount() const {
    return m_gross_amount;
}
void OAIDocumentItem::setGrossAmount(const float &gross_amount) {
    m_gross_amount = gross_amount;
    m_gross_amount_isSet = true;
}

bool OAIDocumentItem::is_gross_amount_Set() const{
    return m_gross_amount_isSet;
}

bool OAIDocumentItem::is_gross_amount_Valid() const{
    return m_gross_amount_isValid;
}

QString OAIDocumentItem::getName() const {
    return m_name;
}
void OAIDocumentItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDocumentItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDocumentItem::is_name_Valid() const{
    return m_name_isValid;
}

float OAIDocumentItem::getNetAmount() const {
    return m_net_amount;
}
void OAIDocumentItem::setNetAmount(const float &net_amount) {
    m_net_amount = net_amount;
    m_net_amount_isSet = true;
}

bool OAIDocumentItem::is_net_amount_Set() const{
    return m_net_amount_isSet;
}

bool OAIDocumentItem::is_net_amount_Valid() const{
    return m_net_amount_isValid;
}

float OAIDocumentItem::getNetUnitAmount() const {
    return m_net_unit_amount;
}
void OAIDocumentItem::setNetUnitAmount(const float &net_unit_amount) {
    m_net_unit_amount = net_unit_amount;
    m_net_unit_amount_isSet = true;
}

bool OAIDocumentItem::is_net_unit_amount_Set() const{
    return m_net_unit_amount_isSet;
}

bool OAIDocumentItem::is_net_unit_amount_Valid() const{
    return m_net_unit_amount_isValid;
}

qint32 OAIDocumentItem::getProductId() const {
    return m_product_id;
}
void OAIDocumentItem::setProductId(const qint32 &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIDocumentItem::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIDocumentItem::is_product_id_Valid() const{
    return m_product_id_isValid;
}

float OAIDocumentItem::getQuantity() const {
    return m_quantity;
}
void OAIDocumentItem::setQuantity(const float &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIDocumentItem::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIDocumentItem::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIVat OAIDocumentItem::getVat() const {
    return m_vat;
}
void OAIDocumentItem::setVat(const OAIVat &vat) {
    m_vat = vat;
    m_vat_isSet = true;
}

bool OAIDocumentItem::is_vat_Set() const{
    return m_vat_isSet;
}

bool OAIDocumentItem::is_vat_Valid() const{
    return m_vat_isValid;
}

float OAIDocumentItem::getVatAmount() const {
    return m_vat_amount;
}
void OAIDocumentItem::setVatAmount(const float &vat_amount) {
    m_vat_amount = vat_amount;
    m_vat_amount_isSet = true;
}

bool OAIDocumentItem::is_vat_amount_Set() const{
    return m_vat_amount_isSet;
}

bool OAIDocumentItem::is_vat_amount_Valid() const{
    return m_vat_amount_isValid;
}

bool OAIDocumentItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gross_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_unit_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
