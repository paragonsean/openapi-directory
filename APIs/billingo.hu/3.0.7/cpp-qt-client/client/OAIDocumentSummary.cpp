/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentSummary::OAIDocumentSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentSummary::OAIDocumentSummary() {
    this->initializeModel();
}

OAIDocumentSummary::~OAIDocumentSummary() {}

void OAIDocumentSummary::initializeModel() {

    m_gross_amount_local_isSet = false;
    m_gross_amount_local_isValid = false;

    m_net_amount_isSet = false;
    m_net_amount_isValid = false;

    m_net_amount_local_isSet = false;
    m_net_amount_local_isValid = false;

    m_vat_amount_isSet = false;
    m_vat_amount_isValid = false;

    m_vat_amount_local_isSet = false;
    m_vat_amount_local_isValid = false;

    m_vat_rate_summary_isSet = false;
    m_vat_rate_summary_isValid = false;
}

void OAIDocumentSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentSummary::fromJsonObject(QJsonObject json) {

    m_gross_amount_local_isValid = ::OpenAPI::fromJsonValue(m_gross_amount_local, json[QString("gross_amount_local")]);
    m_gross_amount_local_isSet = !json[QString("gross_amount_local")].isNull() && m_gross_amount_local_isValid;

    m_net_amount_isValid = ::OpenAPI::fromJsonValue(m_net_amount, json[QString("net_amount")]);
    m_net_amount_isSet = !json[QString("net_amount")].isNull() && m_net_amount_isValid;

    m_net_amount_local_isValid = ::OpenAPI::fromJsonValue(m_net_amount_local, json[QString("net_amount_local")]);
    m_net_amount_local_isSet = !json[QString("net_amount_local")].isNull() && m_net_amount_local_isValid;

    m_vat_amount_isValid = ::OpenAPI::fromJsonValue(m_vat_amount, json[QString("vat_amount")]);
    m_vat_amount_isSet = !json[QString("vat_amount")].isNull() && m_vat_amount_isValid;

    m_vat_amount_local_isValid = ::OpenAPI::fromJsonValue(m_vat_amount_local, json[QString("vat_amount_local")]);
    m_vat_amount_local_isSet = !json[QString("vat_amount_local")].isNull() && m_vat_amount_local_isValid;

    m_vat_rate_summary_isValid = ::OpenAPI::fromJsonValue(m_vat_rate_summary, json[QString("vat_rate_summary")]);
    m_vat_rate_summary_isSet = !json[QString("vat_rate_summary")].isNull() && m_vat_rate_summary_isValid;
}

QString OAIDocumentSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_gross_amount_local_isSet) {
        obj.insert(QString("gross_amount_local"), ::OpenAPI::toJsonValue(m_gross_amount_local));
    }
    if (m_net_amount_isSet) {
        obj.insert(QString("net_amount"), ::OpenAPI::toJsonValue(m_net_amount));
    }
    if (m_net_amount_local_isSet) {
        obj.insert(QString("net_amount_local"), ::OpenAPI::toJsonValue(m_net_amount_local));
    }
    if (m_vat_amount_isSet) {
        obj.insert(QString("vat_amount"), ::OpenAPI::toJsonValue(m_vat_amount));
    }
    if (m_vat_amount_local_isSet) {
        obj.insert(QString("vat_amount_local"), ::OpenAPI::toJsonValue(m_vat_amount_local));
    }
    if (m_vat_rate_summary.size() > 0) {
        obj.insert(QString("vat_rate_summary"), ::OpenAPI::toJsonValue(m_vat_rate_summary));
    }
    return obj;
}

float OAIDocumentSummary::getGrossAmountLocal() const {
    return m_gross_amount_local;
}
void OAIDocumentSummary::setGrossAmountLocal(const float &gross_amount_local) {
    m_gross_amount_local = gross_amount_local;
    m_gross_amount_local_isSet = true;
}

bool OAIDocumentSummary::is_gross_amount_local_Set() const{
    return m_gross_amount_local_isSet;
}

bool OAIDocumentSummary::is_gross_amount_local_Valid() const{
    return m_gross_amount_local_isValid;
}

float OAIDocumentSummary::getNetAmount() const {
    return m_net_amount;
}
void OAIDocumentSummary::setNetAmount(const float &net_amount) {
    m_net_amount = net_amount;
    m_net_amount_isSet = true;
}

bool OAIDocumentSummary::is_net_amount_Set() const{
    return m_net_amount_isSet;
}

bool OAIDocumentSummary::is_net_amount_Valid() const{
    return m_net_amount_isValid;
}

float OAIDocumentSummary::getNetAmountLocal() const {
    return m_net_amount_local;
}
void OAIDocumentSummary::setNetAmountLocal(const float &net_amount_local) {
    m_net_amount_local = net_amount_local;
    m_net_amount_local_isSet = true;
}

bool OAIDocumentSummary::is_net_amount_local_Set() const{
    return m_net_amount_local_isSet;
}

bool OAIDocumentSummary::is_net_amount_local_Valid() const{
    return m_net_amount_local_isValid;
}

float OAIDocumentSummary::getVatAmount() const {
    return m_vat_amount;
}
void OAIDocumentSummary::setVatAmount(const float &vat_amount) {
    m_vat_amount = vat_amount;
    m_vat_amount_isSet = true;
}

bool OAIDocumentSummary::is_vat_amount_Set() const{
    return m_vat_amount_isSet;
}

bool OAIDocumentSummary::is_vat_amount_Valid() const{
    return m_vat_amount_isValid;
}

float OAIDocumentSummary::getVatAmountLocal() const {
    return m_vat_amount_local;
}
void OAIDocumentSummary::setVatAmountLocal(const float &vat_amount_local) {
    m_vat_amount_local = vat_amount_local;
    m_vat_amount_local_isSet = true;
}

bool OAIDocumentSummary::is_vat_amount_local_Set() const{
    return m_vat_amount_local_isSet;
}

bool OAIDocumentSummary::is_vat_amount_local_Valid() const{
    return m_vat_amount_local_isValid;
}

QList<OAIDocumentVatRateSummary> OAIDocumentSummary::getVatRateSummary() const {
    return m_vat_rate_summary;
}
void OAIDocumentSummary::setVatRateSummary(const QList<OAIDocumentVatRateSummary> &vat_rate_summary) {
    m_vat_rate_summary = vat_rate_summary;
    m_vat_rate_summary_isSet = true;
}

bool OAIDocumentSummary::is_vat_rate_summary_Set() const{
    return m_vat_rate_summary_isSet;
}

bool OAIDocumentSummary::is_vat_rate_summary_Valid() const{
    return m_vat_rate_summary_isValid;
}

bool OAIDocumentSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gross_amount_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_amount_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_amount_local_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_summary.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
