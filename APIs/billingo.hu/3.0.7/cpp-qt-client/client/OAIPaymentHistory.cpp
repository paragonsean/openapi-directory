/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentHistory::OAIPaymentHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentHistory::OAIPaymentHistory() {
    this->initializeModel();
}

OAIPaymentHistory::~OAIPaymentHistory() {}

void OAIPaymentHistory::initializeModel() {

    m_conversion_rate_isSet = false;
    m_conversion_rate_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_voucher_number_isSet = false;
    m_voucher_number_isValid = false;
}

void OAIPaymentHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentHistory::fromJsonObject(QJsonObject json) {

    m_conversion_rate_isValid = ::OpenAPI::fromJsonValue(m_conversion_rate, json[QString("conversion_rate")]);
    m_conversion_rate_isSet = !json[QString("conversion_rate")].isNull() && m_conversion_rate_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("payment_method")]);
    m_payment_method_isSet = !json[QString("payment_method")].isNull() && m_payment_method_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_voucher_number_isValid = ::OpenAPI::fromJsonValue(m_voucher_number, json[QString("voucher_number")]);
    m_voucher_number_isSet = !json[QString("voucher_number")].isNull() && m_voucher_number_isValid;
}

QString OAIPaymentHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_conversion_rate_isSet) {
        obj.insert(QString("conversion_rate"), ::OpenAPI::toJsonValue(m_conversion_rate));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("payment_method"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_voucher_number_isSet) {
        obj.insert(QString("voucher_number"), ::OpenAPI::toJsonValue(m_voucher_number));
    }
    return obj;
}

float OAIPaymentHistory::getConversionRate() const {
    return m_conversion_rate;
}
void OAIPaymentHistory::setConversionRate(const float &conversion_rate) {
    m_conversion_rate = conversion_rate;
    m_conversion_rate_isSet = true;
}

bool OAIPaymentHistory::is_conversion_rate_Set() const{
    return m_conversion_rate_isSet;
}

bool OAIPaymentHistory::is_conversion_rate_Valid() const{
    return m_conversion_rate_isValid;
}

QDate OAIPaymentHistory::getDate() const {
    return m_date;
}
void OAIPaymentHistory::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIPaymentHistory::is_date_Set() const{
    return m_date_isSet;
}

bool OAIPaymentHistory::is_date_Valid() const{
    return m_date_isValid;
}

OAIPaymentMethod OAIPaymentHistory::getPaymentMethod() const {
    return m_payment_method;
}
void OAIPaymentHistory::setPaymentMethod(const OAIPaymentMethod &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIPaymentHistory::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIPaymentHistory::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

float OAIPaymentHistory::getPrice() const {
    return m_price;
}
void OAIPaymentHistory::setPrice(const float &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIPaymentHistory::is_price_Set() const{
    return m_price_isSet;
}

bool OAIPaymentHistory::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIPaymentHistory::getVoucherNumber() const {
    return m_voucher_number;
}
void OAIPaymentHistory::setVoucherNumber(const QString &voucher_number) {
    m_voucher_number = voucher_number;
    m_voucher_number_isSet = true;
}

bool OAIPaymentHistory::is_voucher_number_Set() const{
    return m_voucher_number_isSet;
}

bool OAIPaymentHistory::is_voucher_number_Valid() const{
    return m_voucher_number_isValid;
}

bool OAIPaymentHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conversion_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voucher_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_isValid && m_payment_method_isValid && m_price_isValid && true;
}

} // namespace OpenAPI
