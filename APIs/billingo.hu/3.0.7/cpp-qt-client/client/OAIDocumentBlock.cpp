/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentBlock.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentBlock::OAIDocumentBlock(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentBlock::OAIDocumentBlock() {
    this->initializeModel();
}

OAIDocumentBlock::~OAIDocumentBlock() {}

void OAIDocumentBlock::initializeModel() {

    m_custom_field1_isSet = false;
    m_custom_field1_isValid = false;

    m_custom_field2_isSet = false;
    m_custom_field2_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;
}

void OAIDocumentBlock::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentBlock::fromJsonObject(QJsonObject json) {

    m_custom_field1_isValid = ::OpenAPI::fromJsonValue(m_custom_field1, json[QString("custom_field1")]);
    m_custom_field1_isSet = !json[QString("custom_field1")].isNull() && m_custom_field1_isValid;

    m_custom_field2_isValid = ::OpenAPI::fromJsonValue(m_custom_field2, json[QString("custom_field2")]);
    m_custom_field2_isSet = !json[QString("custom_field2")].isNull() && m_custom_field2_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;
}

QString OAIDocumentBlock::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentBlock::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_field1_isSet) {
        obj.insert(QString("custom_field1"), ::OpenAPI::toJsonValue(m_custom_field1));
    }
    if (m_custom_field2_isSet) {
        obj.insert(QString("custom_field2"), ::OpenAPI::toJsonValue(m_custom_field2));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    return obj;
}

QString OAIDocumentBlock::getCustomField1() const {
    return m_custom_field1;
}
void OAIDocumentBlock::setCustomField1(const QString &custom_field1) {
    m_custom_field1 = custom_field1;
    m_custom_field1_isSet = true;
}

bool OAIDocumentBlock::is_custom_field1_Set() const{
    return m_custom_field1_isSet;
}

bool OAIDocumentBlock::is_custom_field1_Valid() const{
    return m_custom_field1_isValid;
}

QString OAIDocumentBlock::getCustomField2() const {
    return m_custom_field2;
}
void OAIDocumentBlock::setCustomField2(const QString &custom_field2) {
    m_custom_field2 = custom_field2;
    m_custom_field2_isSet = true;
}

bool OAIDocumentBlock::is_custom_field2_Set() const{
    return m_custom_field2_isSet;
}

bool OAIDocumentBlock::is_custom_field2_Valid() const{
    return m_custom_field2_isValid;
}

qint32 OAIDocumentBlock::getId() const {
    return m_id;
}
void OAIDocumentBlock::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocumentBlock::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocumentBlock::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDocumentBlock::getName() const {
    return m_name;
}
void OAIDocumentBlock::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDocumentBlock::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDocumentBlock::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDocumentBlock::getPrefix() const {
    return m_prefix;
}
void OAIDocumentBlock::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIDocumentBlock::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIDocumentBlock::is_prefix_Valid() const{
    return m_prefix_isValid;
}

bool OAIDocumentBlock::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_field1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_field2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentBlock::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
