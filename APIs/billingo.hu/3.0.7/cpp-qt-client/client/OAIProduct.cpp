/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct::OAIProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct::OAIProduct() {
    this->initializeModel();
}

OAIProduct::~OAIProduct() {}

void OAIProduct::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_general_ledger_number_isSet = false;
    m_general_ledger_number_isValid = false;

    m_general_ledger_taxcode_isSet = false;
    m_general_ledger_taxcode_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_net_unit_price_isSet = false;
    m_net_unit_price_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_vat_isSet = false;
    m_vat_isValid = false;
}

void OAIProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_general_ledger_number_isValid = ::OpenAPI::fromJsonValue(m_general_ledger_number, json[QString("general_ledger_number")]);
    m_general_ledger_number_isSet = !json[QString("general_ledger_number")].isNull() && m_general_ledger_number_isValid;

    m_general_ledger_taxcode_isValid = ::OpenAPI::fromJsonValue(m_general_ledger_taxcode, json[QString("general_ledger_taxcode")]);
    m_general_ledger_taxcode_isSet = !json[QString("general_ledger_taxcode")].isNull() && m_general_ledger_taxcode_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_net_unit_price_isValid = ::OpenAPI::fromJsonValue(m_net_unit_price, json[QString("net_unit_price")]);
    m_net_unit_price_isSet = !json[QString("net_unit_price")].isNull() && m_net_unit_price_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_vat_isValid = ::OpenAPI::fromJsonValue(m_vat, json[QString("vat")]);
    m_vat_isSet = !json[QString("vat")].isNull() && m_vat_isValid;
}

QString OAIProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_general_ledger_number_isSet) {
        obj.insert(QString("general_ledger_number"), ::OpenAPI::toJsonValue(m_general_ledger_number));
    }
    if (m_general_ledger_taxcode_isSet) {
        obj.insert(QString("general_ledger_taxcode"), ::OpenAPI::toJsonValue(m_general_ledger_taxcode));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_net_unit_price_isSet) {
        obj.insert(QString("net_unit_price"), ::OpenAPI::toJsonValue(m_net_unit_price));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_vat.isSet()) {
        obj.insert(QString("vat"), ::OpenAPI::toJsonValue(m_vat));
    }
    return obj;
}

QString OAIProduct::getComment() const {
    return m_comment;
}
void OAIProduct::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIProduct::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIProduct::is_comment_Valid() const{
    return m_comment_isValid;
}

OAICurrency OAIProduct::getCurrency() const {
    return m_currency;
}
void OAIProduct::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIProduct::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIProduct::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIProduct::getGeneralLedgerNumber() const {
    return m_general_ledger_number;
}
void OAIProduct::setGeneralLedgerNumber(const QString &general_ledger_number) {
    m_general_ledger_number = general_ledger_number;
    m_general_ledger_number_isSet = true;
}

bool OAIProduct::is_general_ledger_number_Set() const{
    return m_general_ledger_number_isSet;
}

bool OAIProduct::is_general_ledger_number_Valid() const{
    return m_general_ledger_number_isValid;
}

QString OAIProduct::getGeneralLedgerTaxcode() const {
    return m_general_ledger_taxcode;
}
void OAIProduct::setGeneralLedgerTaxcode(const QString &general_ledger_taxcode) {
    m_general_ledger_taxcode = general_ledger_taxcode;
    m_general_ledger_taxcode_isSet = true;
}

bool OAIProduct::is_general_ledger_taxcode_Set() const{
    return m_general_ledger_taxcode_isSet;
}

bool OAIProduct::is_general_ledger_taxcode_Valid() const{
    return m_general_ledger_taxcode_isValid;
}

qint32 OAIProduct::getId() const {
    return m_id;
}
void OAIProduct::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProduct::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProduct::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProduct::getName() const {
    return m_name;
}
void OAIProduct::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProduct::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProduct::is_name_Valid() const{
    return m_name_isValid;
}

float OAIProduct::getNetUnitPrice() const {
    return m_net_unit_price;
}
void OAIProduct::setNetUnitPrice(const float &net_unit_price) {
    m_net_unit_price = net_unit_price;
    m_net_unit_price_isSet = true;
}

bool OAIProduct::is_net_unit_price_Set() const{
    return m_net_unit_price_isSet;
}

bool OAIProduct::is_net_unit_price_Valid() const{
    return m_net_unit_price_isValid;
}

QString OAIProduct::getUnit() const {
    return m_unit;
}
void OAIProduct::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIProduct::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIProduct::is_unit_Valid() const{
    return m_unit_isValid;
}

OAIVat OAIProduct::getVat() const {
    return m_vat;
}
void OAIProduct::setVat(const OAIVat &vat) {
    m_vat = vat;
    m_vat_isSet = true;
}

bool OAIProduct::is_vat_Set() const{
    return m_vat_isSet;
}

bool OAIProduct::is_vat_Valid() const{
    return m_vat_isValid;
}

bool OAIProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_ledger_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_ledger_taxcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_isValid && m_name_isValid && m_unit_isValid && m_vat_isValid && true;
}

} // namespace OpenAPI
