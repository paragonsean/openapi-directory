/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BillingoApiV3);
  }
}(this, function(expect, BillingoApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BillingoApiV3.DocumentApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DocumentApi', function() {
    describe('cancelDocument', function() {
      it('should call cancelDocument successfully', function(done) {
        //uncomment below and update the code to test cancelDocument
        //instance.cancelDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDocument', function() {
      it('should call createDocument successfully', function(done) {
        //uncomment below and update the code to test createDocument
        //instance.createDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDocumentFromProforma', function() {
      it('should call createDocumentFromProforma successfully', function(done) {
        //uncomment below and update the code to test createDocumentFromProforma
        //instance.createDocumentFromProforma(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePayment', function() {
      it('should call deletePayment successfully', function(done) {
        //uncomment below and update the code to test deletePayment
        //instance.deletePayment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadDocument', function() {
      it('should call downloadDocument successfully', function(done) {
        //uncomment below and update the code to test downloadDocument
        //instance.downloadDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDocument', function() {
      it('should call getDocument successfully', function(done) {
        //uncomment below and update the code to test getDocument
        //instance.getDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOnlineSzamlaStatus', function() {
      it('should call getOnlineSzamlaStatus successfully', function(done) {
        //uncomment below and update the code to test getOnlineSzamlaStatus
        //instance.getOnlineSzamlaStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPayment', function() {
      it('should call getPayment successfully', function(done) {
        //uncomment below and update the code to test getPayment
        //instance.getPayment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPublicUrl', function() {
      it('should call getPublicUrl successfully', function(done) {
        //uncomment below and update the code to test getPublicUrl
        //instance.getPublicUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDocument', function() {
      it('should call listDocument successfully', function(done) {
        //uncomment below and update the code to test listDocument
        //instance.listDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendDocument', function() {
      it('should call sendDocument successfully', function(done) {
        //uncomment below and update the code to test sendDocument
        //instance.sendDocument(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePayment', function() {
      it('should call updatePayment successfully', function(done) {
        //uncomment below and update the code to test updatePayment
        //instance.updatePayment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
