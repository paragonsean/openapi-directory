/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BillingoApiV3);
  }
}(this, function(expect, BillingoApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BillingoApiV3.DocumentVatRateSummary();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DocumentVatRateSummary', function() {
    it('should create an instance of DocumentVatRateSummary', function() {
      // uncomment below and update the code to test DocumentVatRateSummary
      //var instance = new BillingoApiV3.DocumentVatRateSummary();
      //expect(instance).to.be.a(BillingoApiV3.DocumentVatRateSummary);
    });

    it('should have the property vatName (base name: "vat_name")', function() {
      // uncomment below and update the code to test the property vatName
      //var instance = new BillingoApiV3.DocumentVatRateSummary();
      //expect(instance).to.be();
    });

    it('should have the property vatPercentage (base name: "vat_percentage")', function() {
      // uncomment below and update the code to test the property vatPercentage
      //var instance = new BillingoApiV3.DocumentVatRateSummary();
      //expect(instance).to.be();
    });

    it('should have the property vatRateGrossAmount (base name: "vat_rate_gross_amount")', function() {
      // uncomment below and update the code to test the property vatRateGrossAmount
      //var instance = new BillingoApiV3.DocumentVatRateSummary();
      //expect(instance).to.be();
    });

    it('should have the property vatRateNetAmount (base name: "vat_rate_net_amount")', function() {
      // uncomment below and update the code to test the property vatRateNetAmount
      //var instance = new BillingoApiV3.DocumentVatRateSummary();
      //expect(instance).to.be();
    });

    it('should have the property vatRateVatAmount (base name: "vat_rate_vat_amount")', function() {
      // uncomment below and update the code to test the property vatRateVatAmount
      //var instance = new BillingoApiV3.DocumentVatRateSummary();
      //expect(instance).to.be();
    });

    it('should have the property vatRateVatAmountLocal (base name: "vat_rate_vat_amount_local")', function() {
      // uncomment below and update the code to test the property vatRateVatAmountLocal
      //var instance = new BillingoApiV3.DocumentVatRateSummary();
      //expect(instance).to.be();
    });

  });

}));
