/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BillingoApiV3);
  }
}(this, function(expect, BillingoApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BillingoApiV3.Document();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Document', function() {
    it('should create an instance of Document', function() {
      // uncomment below and update the code to test Document
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be.a(BillingoApiV3.Document);
    });

    it('should have the property blockId (base name: "block_id")', function() {
      // uncomment below and update the code to test the property blockId
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property cancelled (base name: "cancelled")', function() {
      // uncomment below and update the code to test the property cancelled
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property comment (base name: "comment")', function() {
      // uncomment below and update the code to test the property comment
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property conversionRate (base name: "conversion_rate")', function() {
      // uncomment below and update the code to test the property conversionRate
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property dueDate (base name: "due_date")', function() {
      // uncomment below and update the code to test the property dueDate
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property electronic (base name: "electronic")', function() {
      // uncomment below and update the code to test the property electronic
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property fulfillmentDate (base name: "fulfillment_date")', function() {
      // uncomment below and update the code to test the property fulfillmentDate
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property grossTotal (base name: "gross_total")', function() {
      // uncomment below and update the code to test the property grossTotal
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property invoiceDate (base name: "invoice_date")', function() {
      // uncomment below and update the code to test the property invoiceDate
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property invoiceNumber (base name: "invoice_number")', function() {
      // uncomment below and update the code to test the property invoiceNumber
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property items (base name: "items")', function() {
      // uncomment below and update the code to test the property items
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property language (base name: "language")', function() {
      // uncomment below and update the code to test the property language
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property notificationStatus (base name: "notification_status")', function() {
      // uncomment below and update the code to test the property notificationStatus
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property organization (base name: "organization")', function() {
      // uncomment below and update the code to test the property organization
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property paidDate (base name: "paid_date")', function() {
      // uncomment below and update the code to test the property paidDate
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property partner (base name: "partner")', function() {
      // uncomment below and update the code to test the property partner
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property paymentMethod (base name: "payment_method")', function() {
      // uncomment below and update the code to test the property paymentMethod
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property paymentStatus (base name: "payment_status")', function() {
      // uncomment below and update the code to test the property paymentStatus
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property settings (base name: "settings")', function() {
      // uncomment below and update the code to test the property settings
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property summary (base name: "summary")', function() {
      // uncomment below and update the code to test the property summary
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new BillingoApiV3.Document();
      //expect(instance).to.be();
    });

  });

}));
