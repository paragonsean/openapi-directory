/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Product from './Product';

/**
 * The ProductList model module.
 * @module model/ProductList
 * @version 3.0.7
 */
class ProductList {
    /**
     * Constructs a new <code>ProductList</code>.
     * A object with a data property that contains an array of up to limit products. Each entry in the array is a separate product object. If no more products are available, the resulting array will be empty.
     * @alias module:model/ProductList
     */
    constructor() { 
        
        ProductList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductList} obj Optional instance to populate.
     * @return {module:model/ProductList} The populated <code>ProductList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductList();

            if (data.hasOwnProperty('current_page')) {
                obj['current_page'] = ApiClient.convertToType(data['current_page'], 'Number');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [Product]);
            }
            if (data.hasOwnProperty('last_page')) {
                obj['last_page'] = ApiClient.convertToType(data['last_page'], 'Number');
            }
            if (data.hasOwnProperty('next_page_url')) {
                obj['next_page_url'] = ApiClient.convertToType(data['next_page_url'], 'String');
            }
            if (data.hasOwnProperty('per_page')) {
                obj['per_page'] = ApiClient.convertToType(data['per_page'], 'Number');
            }
            if (data.hasOwnProperty('prev_page_url')) {
                obj['prev_page_url'] = ApiClient.convertToType(data['prev_page_url'], 'String');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductList</code>.
     */
    static validateJSON(data) {
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                Product.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['next_page_url'] && !(typeof data['next_page_url'] === 'string' || data['next_page_url'] instanceof String)) {
            throw new Error("Expected the field `next_page_url` to be a primitive type in the JSON string but got " + data['next_page_url']);
        }
        // ensure the json data is a string
        if (data['prev_page_url'] && !(typeof data['prev_page_url'] === 'string' || data['prev_page_url'] instanceof String)) {
            throw new Error("Expected the field `prev_page_url` to be a primitive type in the JSON string but got " + data['prev_page_url']);
        }

        return true;
    }


}



/**
 * @member {Number} current_page
 */
ProductList.prototype['current_page'] = undefined;

/**
 * @member {Array.<module:model/Product>} data
 */
ProductList.prototype['data'] = undefined;

/**
 * @member {Number} last_page
 */
ProductList.prototype['last_page'] = undefined;

/**
 * @member {String} next_page_url
 */
ProductList.prototype['next_page_url'] = undefined;

/**
 * @member {Number} per_page
 */
ProductList.prototype['per_page'] = undefined;

/**
 * @member {String} prev_page_url
 */
ProductList.prototype['prev_page_url'] = undefined;

/**
 * @member {Number} total
 */
ProductList.prototype['total'] = undefined;






export default ProductList;

