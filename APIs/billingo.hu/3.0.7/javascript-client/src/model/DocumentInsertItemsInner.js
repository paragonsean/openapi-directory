/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentItemData from './DocumentItemData';
import DocumentProductData from './DocumentProductData';
import UnitPriceType from './UnitPriceType';
import Vat from './Vat';

/**
 * The DocumentInsertItemsInner model module.
 * @module model/DocumentInsertItemsInner
 * @version 3.0.7
 */
class DocumentInsertItemsInner {
    /**
     * Constructs a new <code>DocumentInsertItemsInner</code>.
     * @alias module:model/DocumentInsertItemsInner
     * @param {(module:model/DocumentItemData|module:model/DocumentProductData)} instance The actual instance to initialize DocumentInsertItemsInner.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "DocumentItemData") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                DocumentItemData.validateJSON(instance); // throw an exception if no match
                // create DocumentItemData from JS object
                this.actualInstance = DocumentItemData.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into DocumentItemData
            errorMessages.push("Failed to construct DocumentItemData: " + err)
        }

        try {
            if (typeof instance === "DocumentProductData") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                DocumentProductData.validateJSON(instance); // throw an exception if no match
                // create DocumentProductData from JS object
                this.actualInstance = DocumentProductData.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into DocumentProductData
            errorMessages.push("Failed to construct DocumentProductData: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `DocumentInsertItemsInner` with oneOf schemas DocumentItemData, DocumentProductData. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `DocumentInsertItemsInner` with oneOf schemas DocumentItemData, DocumentProductData. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>DocumentInsertItemsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentInsertItemsInner} obj Optional instance to populate.
     * @return {module:model/DocumentInsertItemsInner} The populated <code>DocumentInsertItemsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        return new DocumentInsertItemsInner(data);
    }

    /**
     * Gets the actual instance, which can be <code>DocumentItemData</code>, <code>DocumentProductData</code>.
     * @return {(module:model/DocumentItemData|module:model/DocumentProductData)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>DocumentItemData</code>, <code>DocumentProductData</code>.
     * @param {(module:model/DocumentItemData|module:model/DocumentProductData)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = DocumentInsertItemsInner.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of DocumentInsertItemsInner from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/DocumentInsertItemsInner} An instance of DocumentInsertItemsInner.
     */
    static fromJSON = function(json_string){
        return DocumentInsertItemsInner.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {Number} product_id
 */
DocumentInsertItemsInner.prototype['product_id'] = undefined;

/**
 * @member {Number} quantity
 */
DocumentInsertItemsInner.prototype['quantity'] = undefined;

/**
 * @member {String} comment
 */
DocumentInsertItemsInner.prototype['comment'] = undefined;

/**
 * @member {String} name
 */
DocumentInsertItemsInner.prototype['name'] = undefined;

/**
 * @member {String} unit
 */
DocumentInsertItemsInner.prototype['unit'] = undefined;

/**
 * @member {Number} unit_price
 */
DocumentInsertItemsInner.prototype['unit_price'] = undefined;

/**
 * @member {module:model/UnitPriceType} unit_price_type
 */
DocumentInsertItemsInner.prototype['unit_price_type'] = undefined;

/**
 * @member {module:model/Vat} vat
 */
DocumentInsertItemsInner.prototype['vat'] = undefined;


DocumentInsertItemsInner.OneOf = ["DocumentItemData", "DocumentProductData"];

export default DocumentInsertItemsInner;

