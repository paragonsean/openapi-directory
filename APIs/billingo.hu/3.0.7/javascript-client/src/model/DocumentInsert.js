/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import DocumentInsertItemsInner from './DocumentInsertItemsInner';
import DocumentInsertType from './DocumentInsertType';
import DocumentLanguage from './DocumentLanguage';
import DocumentSettings from './DocumentSettings';
import PaymentMethod from './PaymentMethod';

/**
 * The DocumentInsert model module.
 * @module model/DocumentInsert
 * @version 3.0.7
 */
class DocumentInsert {
    /**
     * Constructs a new <code>DocumentInsert</code>.
     * @alias module:model/DocumentInsert
     * @param blockId {Number} 
     * @param currency {module:model/Currency} 
     * @param dueDate {Date} 
     * @param fulfillmentDate {Date} 
     * @param language {module:model/DocumentLanguage} 
     * @param partnerId {Number} 
     * @param paymentMethod {module:model/PaymentMethod} 
     * @param type {module:model/DocumentInsertType} 
     */
    constructor(blockId, currency, dueDate, fulfillmentDate, language, partnerId, paymentMethod, type) { 
        
        DocumentInsert.initialize(this, blockId, currency, dueDate, fulfillmentDate, language, partnerId, paymentMethod, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, blockId, currency, dueDate, fulfillmentDate, language, partnerId, paymentMethod, type) { 
        obj['block_id'] = blockId;
        obj['currency'] = currency;
        obj['due_date'] = dueDate;
        obj['electronic'] = false;
        obj['fulfillment_date'] = fulfillmentDate;
        obj['language'] = language;
        obj['paid'] = false;
        obj['partner_id'] = partnerId;
        obj['payment_method'] = paymentMethod;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>DocumentInsert</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentInsert} obj Optional instance to populate.
     * @return {module:model/DocumentInsert} The populated <code>DocumentInsert</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentInsert();

            if (data.hasOwnProperty('bank_account_id')) {
                obj['bank_account_id'] = ApiClient.convertToType(data['bank_account_id'], 'Number');
            }
            if (data.hasOwnProperty('block_id')) {
                obj['block_id'] = ApiClient.convertToType(data['block_id'], 'Number');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('conversion_rate')) {
                obj['conversion_rate'] = ApiClient.convertToType(data['conversion_rate'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = Currency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('due_date')) {
                obj['due_date'] = ApiClient.convertToType(data['due_date'], 'Date');
            }
            if (data.hasOwnProperty('electronic')) {
                obj['electronic'] = ApiClient.convertToType(data['electronic'], 'Boolean');
            }
            if (data.hasOwnProperty('fulfillment_date')) {
                obj['fulfillment_date'] = ApiClient.convertToType(data['fulfillment_date'], 'Date');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [DocumentInsertItemsInner]);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = DocumentLanguage.constructFromObject(data['language']);
            }
            if (data.hasOwnProperty('paid')) {
                obj['paid'] = ApiClient.convertToType(data['paid'], 'Boolean');
            }
            if (data.hasOwnProperty('partner_id')) {
                obj['partner_id'] = ApiClient.convertToType(data['partner_id'], 'Number');
            }
            if (data.hasOwnProperty('payment_method')) {
                obj['payment_method'] = PaymentMethod.constructFromObject(data['payment_method']);
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = DocumentSettings.constructFromObject(data['settings']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = DocumentInsertType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('vendor_id')) {
                obj['vendor_id'] = ApiClient.convertToType(data['vendor_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentInsert</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentInsert</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentInsert.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                DocumentInsertItemsInner.validateJSON(item);
            };
        }
        // validate the optional field `settings`
        if (data['settings']) { // data not null
          DocumentSettings.validateJSON(data['settings']);
        }
        // ensure the json data is a string
        if (data['vendor_id'] && !(typeof data['vendor_id'] === 'string' || data['vendor_id'] instanceof String)) {
            throw new Error("Expected the field `vendor_id` to be a primitive type in the JSON string but got " + data['vendor_id']);
        }

        return true;
    }


}

DocumentInsert.RequiredProperties = ["block_id", "currency", "due_date", "fulfillment_date", "language", "partner_id", "payment_method", "type"];

/**
 * @member {Number} bank_account_id
 */
DocumentInsert.prototype['bank_account_id'] = undefined;

/**
 * @member {Number} block_id
 */
DocumentInsert.prototype['block_id'] = undefined;

/**
 * @member {String} comment
 */
DocumentInsert.prototype['comment'] = undefined;

/**
 * @member {Number} conversion_rate
 */
DocumentInsert.prototype['conversion_rate'] = undefined;

/**
 * @member {module:model/Currency} currency
 */
DocumentInsert.prototype['currency'] = undefined;

/**
 * @member {Date} due_date
 */
DocumentInsert.prototype['due_date'] = undefined;

/**
 * @member {Boolean} electronic
 * @default false
 */
DocumentInsert.prototype['electronic'] = false;

/**
 * @member {Date} fulfillment_date
 */
DocumentInsert.prototype['fulfillment_date'] = undefined;

/**
 * @member {Array.<module:model/DocumentInsertItemsInner>} items
 */
DocumentInsert.prototype['items'] = undefined;

/**
 * @member {module:model/DocumentLanguage} language
 */
DocumentInsert.prototype['language'] = undefined;

/**
 * @member {Boolean} paid
 * @default false
 */
DocumentInsert.prototype['paid'] = false;

/**
 * @member {Number} partner_id
 */
DocumentInsert.prototype['partner_id'] = undefined;

/**
 * @member {module:model/PaymentMethod} payment_method
 */
DocumentInsert.prototype['payment_method'] = undefined;

/**
 * @member {module:model/DocumentSettings} settings
 */
DocumentInsert.prototype['settings'] = undefined;

/**
 * @member {module:model/DocumentInsertType} type
 */
DocumentInsert.prototype['type'] = undefined;

/**
 * @member {String} vendor_id
 */
DocumentInsert.prototype['vendor_id'] = undefined;






export default DocumentInsert;

