/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import Vat from './Vat';

/**
 * The Product model module.
 * @module model/Product
 * @version 3.0.7
 */
class Product {
    /**
     * Constructs a new <code>Product</code>.
     * @alias module:model/Product
     * @param currency {module:model/Currency} 
     * @param name {String} 
     * @param unit {String} 
     * @param vat {module:model/Vat} 
     */
    constructor(currency, name, unit, vat) { 
        
        Product.initialize(this, currency, name, unit, vat);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currency, name, unit, vat) { 
        obj['currency'] = currency;
        obj['name'] = name;
        obj['unit'] = unit;
        obj['vat'] = vat;
    }

    /**
     * Constructs a <code>Product</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Product} obj Optional instance to populate.
     * @return {module:model/Product} The populated <code>Product</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Product();

            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = Currency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('general_ledger_number')) {
                obj['general_ledger_number'] = ApiClient.convertToType(data['general_ledger_number'], 'String');
            }
            if (data.hasOwnProperty('general_ledger_taxcode')) {
                obj['general_ledger_taxcode'] = ApiClient.convertToType(data['general_ledger_taxcode'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('net_unit_price')) {
                obj['net_unit_price'] = ApiClient.convertToType(data['net_unit_price'], 'Number');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('vat')) {
                obj['vat'] = Vat.constructFromObject(data['vat']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Product</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Product</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Product.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['general_ledger_number'] && !(typeof data['general_ledger_number'] === 'string' || data['general_ledger_number'] instanceof String)) {
            throw new Error("Expected the field `general_ledger_number` to be a primitive type in the JSON string but got " + data['general_ledger_number']);
        }
        // ensure the json data is a string
        if (data['general_ledger_taxcode'] && !(typeof data['general_ledger_taxcode'] === 'string' || data['general_ledger_taxcode'] instanceof String)) {
            throw new Error("Expected the field `general_ledger_taxcode` to be a primitive type in the JSON string but got " + data['general_ledger_taxcode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}

Product.RequiredProperties = ["currency", "name", "unit", "vat"];

/**
 * @member {String} comment
 */
Product.prototype['comment'] = undefined;

/**
 * @member {module:model/Currency} currency
 */
Product.prototype['currency'] = undefined;

/**
 * @member {String} general_ledger_number
 */
Product.prototype['general_ledger_number'] = undefined;

/**
 * @member {String} general_ledger_taxcode
 */
Product.prototype['general_ledger_taxcode'] = undefined;

/**
 * @member {Number} id
 */
Product.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Product.prototype['name'] = undefined;

/**
 * @member {Number} net_unit_price
 */
Product.prototype['net_unit_price'] = undefined;

/**
 * @member {String} unit
 */
Product.prototype['unit'] = undefined;

/**
 * @member {module:model/Vat} vat
 */
Product.prototype['vat'] = undefined;






export default Product;

