/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UnitPriceType from './UnitPriceType';
import Vat from './Vat';

/**
 * The DocumentProductData model module.
 * @module model/DocumentProductData
 * @version 3.0.7
 */
class DocumentProductData {
    /**
     * Constructs a new <code>DocumentProductData</code>.
     * @alias module:model/DocumentProductData
     * @param name {String} 
     * @param quantity {Number} 
     * @param unit {String} 
     * @param unitPrice {Number} 
     * @param unitPriceType {module:model/UnitPriceType} 
     * @param vat {module:model/Vat} 
     */
    constructor(name, quantity, unit, unitPrice, unitPriceType, vat) { 
        
        DocumentProductData.initialize(this, name, quantity, unit, unitPrice, unitPriceType, vat);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, quantity, unit, unitPrice, unitPriceType, vat) { 
        obj['name'] = name;
        obj['quantity'] = quantity;
        obj['unit'] = unit;
        obj['unit_price'] = unitPrice;
        obj['unit_price_type'] = unitPriceType;
        obj['vat'] = vat;
    }

    /**
     * Constructs a <code>DocumentProductData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentProductData} obj Optional instance to populate.
     * @return {module:model/DocumentProductData} The populated <code>DocumentProductData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentProductData();

            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('unit_price')) {
                obj['unit_price'] = ApiClient.convertToType(data['unit_price'], 'Number');
            }
            if (data.hasOwnProperty('unit_price_type')) {
                obj['unit_price_type'] = UnitPriceType.constructFromObject(data['unit_price_type']);
            }
            if (data.hasOwnProperty('vat')) {
                obj['vat'] = Vat.constructFromObject(data['vat']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentProductData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentProductData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentProductData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}

DocumentProductData.RequiredProperties = ["name", "quantity", "unit", "unit_price", "unit_price_type", "vat"];

/**
 * @member {String} comment
 */
DocumentProductData.prototype['comment'] = undefined;

/**
 * @member {String} name
 */
DocumentProductData.prototype['name'] = undefined;

/**
 * @member {Number} quantity
 */
DocumentProductData.prototype['quantity'] = undefined;

/**
 * @member {String} unit
 */
DocumentProductData.prototype['unit'] = undefined;

/**
 * @member {Number} unit_price
 */
DocumentProductData.prototype['unit_price'] = undefined;

/**
 * @member {module:model/UnitPriceType} unit_price_type
 */
DocumentProductData.prototype['unit_price_type'] = undefined;

/**
 * @member {module:model/Vat} vat
 */
DocumentProductData.prototype['vat'] = undefined;






export default DocumentProductData;

