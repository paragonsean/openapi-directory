/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DocumentBlock model module.
 * @module model/DocumentBlock
 * @version 3.0.7
 */
class DocumentBlock {
    /**
     * Constructs a new <code>DocumentBlock</code>.
     * @alias module:model/DocumentBlock
     */
    constructor() { 
        
        DocumentBlock.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentBlock</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentBlock} obj Optional instance to populate.
     * @return {module:model/DocumentBlock} The populated <code>DocumentBlock</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentBlock();

            if (data.hasOwnProperty('custom_field1')) {
                obj['custom_field1'] = ApiClient.convertToType(data['custom_field1'], 'String');
            }
            if (data.hasOwnProperty('custom_field2')) {
                obj['custom_field2'] = ApiClient.convertToType(data['custom_field2'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentBlock</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentBlock</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['custom_field1'] && !(typeof data['custom_field1'] === 'string' || data['custom_field1'] instanceof String)) {
            throw new Error("Expected the field `custom_field1` to be a primitive type in the JSON string but got " + data['custom_field1']);
        }
        // ensure the json data is a string
        if (data['custom_field2'] && !(typeof data['custom_field2'] === 'string' || data['custom_field2'] instanceof String)) {
            throw new Error("Expected the field `custom_field2` to be a primitive type in the JSON string but got " + data['custom_field2']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }

        return true;
    }


}



/**
 * @member {String} custom_field1
 */
DocumentBlock.prototype['custom_field1'] = undefined;

/**
 * @member {String} custom_field2
 */
DocumentBlock.prototype['custom_field2'] = undefined;

/**
 * @member {Number} id
 */
DocumentBlock.prototype['id'] = undefined;

/**
 * @member {String} name
 */
DocumentBlock.prototype['name'] = undefined;

/**
 * @member {String} prefix
 */
DocumentBlock.prototype['prefix'] = undefined;






export default DocumentBlock;

