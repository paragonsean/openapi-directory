/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Country from './Country';

/**
 * The Address model module.
 * @module model/Address
 * @version 3.0.7
 */
class Address {
    /**
     * Constructs a new <code>Address</code>.
     * @alias module:model/Address
     * @param address {String} 
     * @param city {String} 
     * @param countryCode {module:model/Country} 
     * @param postCode {String} 
     */
    constructor(address, city, countryCode, postCode) { 
        
        Address.initialize(this, address, city, countryCode, postCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, city, countryCode, postCode) { 
        obj['address'] = address;
        obj['city'] = city;
        obj['country_code'] = countryCode;
        obj['post_code'] = postCode;
    }

    /**
     * Constructs a <code>Address</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Address} obj Optional instance to populate.
     * @return {module:model/Address} The populated <code>Address</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Address();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = Country.constructFromObject(data['country_code']);
            }
            if (data.hasOwnProperty('post_code')) {
                obj['post_code'] = ApiClient.convertToType(data['post_code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Address</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Address</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Address.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['post_code'] && !(typeof data['post_code'] === 'string' || data['post_code'] instanceof String)) {
            throw new Error("Expected the field `post_code` to be a primitive type in the JSON string but got " + data['post_code']);
        }

        return true;
    }


}

Address.RequiredProperties = ["address", "city", "country_code", "post_code"];

/**
 * @member {String} address
 */
Address.prototype['address'] = undefined;

/**
 * @member {String} city
 */
Address.prototype['city'] = undefined;

/**
 * @member {module:model/Country} country_code
 */
Address.prototype['country_code'] = undefined;

/**
 * @member {String} post_code
 */
Address.prototype['post_code'] = undefined;






export default Address;

