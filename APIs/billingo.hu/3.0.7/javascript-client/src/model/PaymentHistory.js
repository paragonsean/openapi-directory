/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentMethod from './PaymentMethod';

/**
 * The PaymentHistory model module.
 * @module model/PaymentHistory
 * @version 3.0.7
 */
class PaymentHistory {
    /**
     * Constructs a new <code>PaymentHistory</code>.
     * @alias module:model/PaymentHistory
     * @param date {Date} 
     * @param paymentMethod {module:model/PaymentMethod} 
     * @param price {Number} 
     */
    constructor(date, paymentMethod, price) { 
        
        PaymentHistory.initialize(this, date, paymentMethod, price);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, date, paymentMethod, price) { 
        obj['date'] = date;
        obj['payment_method'] = paymentMethod;
        obj['price'] = price;
    }

    /**
     * Constructs a <code>PaymentHistory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentHistory} obj Optional instance to populate.
     * @return {module:model/PaymentHistory} The populated <code>PaymentHistory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentHistory();

            if (data.hasOwnProperty('conversion_rate')) {
                obj['conversion_rate'] = ApiClient.convertToType(data['conversion_rate'], 'Number');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('payment_method')) {
                obj['payment_method'] = PaymentMethod.constructFromObject(data['payment_method']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('voucher_number')) {
                obj['voucher_number'] = ApiClient.convertToType(data['voucher_number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentHistory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentHistory</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentHistory.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['voucher_number'] && !(typeof data['voucher_number'] === 'string' || data['voucher_number'] instanceof String)) {
            throw new Error("Expected the field `voucher_number` to be a primitive type in the JSON string but got " + data['voucher_number']);
        }

        return true;
    }


}

PaymentHistory.RequiredProperties = ["date", "payment_method", "price"];

/**
 * @member {Number} conversion_rate
 */
PaymentHistory.prototype['conversion_rate'] = undefined;

/**
 * @member {Date} date
 */
PaymentHistory.prototype['date'] = undefined;

/**
 * @member {module:model/PaymentMethod} payment_method
 */
PaymentHistory.prototype['payment_method'] = undefined;

/**
 * @member {Number} price
 */
PaymentHistory.prototype['price'] = undefined;

/**
 * @member {String} voucher_number
 */
PaymentHistory.prototype['voucher_number'] = undefined;






export default PaymentHistory;

