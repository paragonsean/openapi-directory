/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import DocumentItem from './DocumentItem';
import DocumentLanguage from './DocumentLanguage';
import DocumentNotificationStatus from './DocumentNotificationStatus';
import DocumentOrganization from './DocumentOrganization';
import DocumentSettings from './DocumentSettings';
import DocumentSummary from './DocumentSummary';
import DocumentType from './DocumentType';
import Partner from './Partner';
import PaymentMethod from './PaymentMethod';
import PaymentStatus from './PaymentStatus';

/**
 * The Document model module.
 * @module model/Document
 * @version 3.0.7
 */
class Document {
    /**
     * Constructs a new <code>Document</code>.
     * Document object representing your invoice.
     * @alias module:model/Document
     */
    constructor() { 
        
        Document.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Document} obj Optional instance to populate.
     * @return {module:model/Document} The populated <code>Document</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Document();

            if (data.hasOwnProperty('block_id')) {
                obj['block_id'] = ApiClient.convertToType(data['block_id'], 'Number');
            }
            if (data.hasOwnProperty('cancelled')) {
                obj['cancelled'] = ApiClient.convertToType(data['cancelled'], 'Boolean');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('conversion_rate')) {
                obj['conversion_rate'] = ApiClient.convertToType(data['conversion_rate'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = Currency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('due_date')) {
                obj['due_date'] = ApiClient.convertToType(data['due_date'], 'Date');
            }
            if (data.hasOwnProperty('electronic')) {
                obj['electronic'] = ApiClient.convertToType(data['electronic'], 'Boolean');
            }
            if (data.hasOwnProperty('fulfillment_date')) {
                obj['fulfillment_date'] = ApiClient.convertToType(data['fulfillment_date'], 'Date');
            }
            if (data.hasOwnProperty('gross_total')) {
                obj['gross_total'] = ApiClient.convertToType(data['gross_total'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('invoice_date')) {
                obj['invoice_date'] = ApiClient.convertToType(data['invoice_date'], 'Date');
            }
            if (data.hasOwnProperty('invoice_number')) {
                obj['invoice_number'] = ApiClient.convertToType(data['invoice_number'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [DocumentItem]);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = DocumentLanguage.constructFromObject(data['language']);
            }
            if (data.hasOwnProperty('notification_status')) {
                obj['notification_status'] = DocumentNotificationStatus.constructFromObject(data['notification_status']);
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = DocumentOrganization.constructFromObject(data['organization']);
            }
            if (data.hasOwnProperty('paid_date')) {
                obj['paid_date'] = ApiClient.convertToType(data['paid_date'], 'Date');
            }
            if (data.hasOwnProperty('partner')) {
                obj['partner'] = Partner.constructFromObject(data['partner']);
            }
            if (data.hasOwnProperty('payment_method')) {
                obj['payment_method'] = PaymentMethod.constructFromObject(data['payment_method']);
            }
            if (data.hasOwnProperty('payment_status')) {
                obj['payment_status'] = PaymentStatus.constructFromObject(data['payment_status']);
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = DocumentSettings.constructFromObject(data['settings']);
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = DocumentSummary.constructFromObject(data['summary']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = DocumentType.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Document</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Document</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['invoice_number'] && !(typeof data['invoice_number'] === 'string' || data['invoice_number'] instanceof String)) {
            throw new Error("Expected the field `invoice_number` to be a primitive type in the JSON string but got " + data['invoice_number']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                DocumentItem.validateJSON(item);
            };
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          DocumentOrganization.validateJSON(data['organization']);
        }
        // validate the optional field `partner`
        if (data['partner']) { // data not null
          Partner.validateJSON(data['partner']);
        }
        // validate the optional field `settings`
        if (data['settings']) { // data not null
          DocumentSettings.validateJSON(data['settings']);
        }
        // validate the optional field `summary`
        if (data['summary']) { // data not null
          DocumentSummary.validateJSON(data['summary']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}



/**
 * DocumentBlock's identifier.
 * @member {Number} block_id
 */
Document.prototype['block_id'] = undefined;

/**
 * @member {Boolean} cancelled
 */
Document.prototype['cancelled'] = undefined;

/**
 * @member {String} comment
 */
Document.prototype['comment'] = undefined;

/**
 * @member {Number} conversion_rate
 */
Document.prototype['conversion_rate'] = undefined;

/**
 * @member {module:model/Currency} currency
 */
Document.prototype['currency'] = undefined;

/**
 * @member {Date} due_date
 */
Document.prototype['due_date'] = undefined;

/**
 * @member {Boolean} electronic
 */
Document.prototype['electronic'] = undefined;

/**
 * @member {Date} fulfillment_date
 */
Document.prototype['fulfillment_date'] = undefined;

/**
 * The document's gross total price.
 * @member {Number} gross_total
 */
Document.prototype['gross_total'] = undefined;

/**
 * The document's unique identifier.
 * @member {Number} id
 */
Document.prototype['id'] = undefined;

/**
 * @member {Date} invoice_date
 */
Document.prototype['invoice_date'] = undefined;

/**
 * The document's invoice number.
 * @member {String} invoice_number
 */
Document.prototype['invoice_number'] = undefined;

/**
 * @member {Array.<module:model/DocumentItem>} items
 */
Document.prototype['items'] = undefined;

/**
 * @member {module:model/DocumentLanguage} language
 */
Document.prototype['language'] = undefined;

/**
 * @member {module:model/DocumentNotificationStatus} notification_status
 */
Document.prototype['notification_status'] = undefined;

/**
 * @member {module:model/DocumentOrganization} organization
 */
Document.prototype['organization'] = undefined;

/**
 * @member {Date} paid_date
 */
Document.prototype['paid_date'] = undefined;

/**
 * @member {module:model/Partner} partner
 */
Document.prototype['partner'] = undefined;

/**
 * @member {module:model/PaymentMethod} payment_method
 */
Document.prototype['payment_method'] = undefined;

/**
 * @member {module:model/PaymentStatus} payment_status
 */
Document.prototype['payment_status'] = undefined;

/**
 * @member {module:model/DocumentSettings} settings
 */
Document.prototype['settings'] = undefined;

/**
 * @member {module:model/DocumentSummary} summary
 */
Document.prototype['summary'] = undefined;

/**
 * @member {Array.<String>} tags
 */
Document.prototype['tags'] = undefined;

/**
 * @member {module:model/DocumentType} type
 */
Document.prototype['type'] = undefined;






export default Document;

