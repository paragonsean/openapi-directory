/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OnlinePayment from './OnlinePayment';
import Round from './Round';

/**
 * The DocumentSettings model module.
 * @module model/DocumentSettings
 * @version 3.0.7
 */
class DocumentSettings {
    /**
     * Constructs a new <code>DocumentSettings</code>.
     * @alias module:model/DocumentSettings
     */
    constructor() { 
        
        DocumentSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['mediated_service'] = false;
        obj['without_financial_fulfillment'] = false;
    }

    /**
     * Constructs a <code>DocumentSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentSettings} obj Optional instance to populate.
     * @return {module:model/DocumentSettings} The populated <code>DocumentSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentSettings();

            if (data.hasOwnProperty('mediated_service')) {
                obj['mediated_service'] = ApiClient.convertToType(data['mediated_service'], 'Boolean');
            }
            if (data.hasOwnProperty('online_payment')) {
                obj['online_payment'] = OnlinePayment.constructFromObject(data['online_payment']);
            }
            if (data.hasOwnProperty('place_id')) {
                obj['place_id'] = ApiClient.convertToType(data['place_id'], 'Number');
            }
            if (data.hasOwnProperty('round')) {
                obj['round'] = Round.constructFromObject(data['round']);
            }
            if (data.hasOwnProperty('without_financial_fulfillment')) {
                obj['without_financial_fulfillment'] = ApiClient.convertToType(data['without_financial_fulfillment'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentSettings</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * @member {Boolean} mediated_service
 * @default false
 */
DocumentSettings.prototype['mediated_service'] = false;

/**
 * @member {module:model/OnlinePayment} online_payment
 */
DocumentSettings.prototype['online_payment'] = undefined;

/**
 * @member {Number} place_id
 */
DocumentSettings.prototype['place_id'] = undefined;

/**
 * @member {module:model/Round} round
 */
DocumentSettings.prototype['round'] = undefined;

/**
 * @member {Boolean} without_financial_fulfillment
 * @default false
 */
DocumentSettings.prototype['without_financial_fulfillment'] = false;






export default DocumentSettings;

