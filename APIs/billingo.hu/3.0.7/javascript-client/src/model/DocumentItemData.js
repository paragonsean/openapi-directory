/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DocumentItemData model module.
 * @module model/DocumentItemData
 * @version 3.0.7
 */
class DocumentItemData {
    /**
     * Constructs a new <code>DocumentItemData</code>.
     * @alias module:model/DocumentItemData
     * @param productId {Number} 
     * @param quantity {Number} 
     */
    constructor(productId, quantity) { 
        
        DocumentItemData.initialize(this, productId, quantity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, productId, quantity) { 
        obj['product_id'] = productId;
        obj['quantity'] = quantity;
    }

    /**
     * Constructs a <code>DocumentItemData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentItemData} obj Optional instance to populate.
     * @return {module:model/DocumentItemData} The populated <code>DocumentItemData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentItemData();

            if (data.hasOwnProperty('product_id')) {
                obj['product_id'] = ApiClient.convertToType(data['product_id'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentItemData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentItemData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentItemData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

DocumentItemData.RequiredProperties = ["product_id", "quantity"];

/**
 * @member {Number} product_id
 */
DocumentItemData.prototype['product_id'] = undefined;

/**
 * @member {Number} quantity
 */
DocumentItemData.prototype['quantity'] = undefined;






export default DocumentItemData;

