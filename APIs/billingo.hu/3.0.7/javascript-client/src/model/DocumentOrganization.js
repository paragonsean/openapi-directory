/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import DocumentBankAccount from './DocumentBankAccount';

/**
 * The DocumentOrganization model module.
 * @module model/DocumentOrganization
 * @version 3.0.7
 */
class DocumentOrganization {
    /**
     * Constructs a new <code>DocumentOrganization</code>.
     * @alias module:model/DocumentOrganization
     */
    constructor() { 
        
        DocumentOrganization.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentOrganization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentOrganization} obj Optional instance to populate.
     * @return {module:model/DocumentOrganization} The populated <code>DocumentOrganization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentOrganization();

            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('bank_account')) {
                obj['bank_account'] = DocumentBankAccount.constructFromObject(data['bank_account']);
            }
            if (data.hasOwnProperty('cash_settled')) {
                obj['cash_settled'] = ApiClient.convertToType(data['cash_settled'], 'Boolean');
            }
            if (data.hasOwnProperty('eu_tax_number')) {
                obj['eu_tax_number'] = ApiClient.convertToType(data['eu_tax_number'], 'String');
            }
            if (data.hasOwnProperty('ev_number')) {
                obj['ev_number'] = ApiClient.convertToType(data['ev_number'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('small_taxpayer')) {
                obj['small_taxpayer'] = ApiClient.convertToType(data['small_taxpayer'], 'Boolean');
            }
            if (data.hasOwnProperty('tax_number')) {
                obj['tax_number'] = ApiClient.convertToType(data['tax_number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentOrganization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentOrganization</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        // validate the optional field `bank_account`
        if (data['bank_account']) { // data not null
          DocumentBankAccount.validateJSON(data['bank_account']);
        }
        // ensure the json data is a string
        if (data['eu_tax_number'] && !(typeof data['eu_tax_number'] === 'string' || data['eu_tax_number'] instanceof String)) {
            throw new Error("Expected the field `eu_tax_number` to be a primitive type in the JSON string but got " + data['eu_tax_number']);
        }
        // ensure the json data is a string
        if (data['ev_number'] && !(typeof data['ev_number'] === 'string' || data['ev_number'] instanceof String)) {
            throw new Error("Expected the field `ev_number` to be a primitive type in the JSON string but got " + data['ev_number']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['tax_number'] && !(typeof data['tax_number'] === 'string' || data['tax_number'] instanceof String)) {
            throw new Error("Expected the field `tax_number` to be a primitive type in the JSON string but got " + data['tax_number']);
        }

        return true;
    }


}



/**
 * @member {module:model/Address} address
 */
DocumentOrganization.prototype['address'] = undefined;

/**
 * @member {module:model/DocumentBankAccount} bank_account
 */
DocumentOrganization.prototype['bank_account'] = undefined;

/**
 * @member {Boolean} cash_settled
 */
DocumentOrganization.prototype['cash_settled'] = undefined;

/**
 * @member {String} eu_tax_number
 */
DocumentOrganization.prototype['eu_tax_number'] = undefined;

/**
 * @member {String} ev_number
 */
DocumentOrganization.prototype['ev_number'] = undefined;

/**
 * @member {String} name
 */
DocumentOrganization.prototype['name'] = undefined;

/**
 * @member {Boolean} small_taxpayer
 */
DocumentOrganization.prototype['small_taxpayer'] = undefined;

/**
 * @member {String} tax_number
 */
DocumentOrganization.prototype['tax_number'] = undefined;






export default DocumentOrganization;

