/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import PartnerUpsert from './PartnerUpsert';

/**
 * The Partner model module.
 * @module model/Partner
 * @version 3.0.7
 */
class Partner {
    /**
     * Constructs a new <code>Partner</code>.
     * @alias module:model/Partner
     * @implements module:model/PartnerUpsert
     * @param address {module:model/Address} 
     * @param name {String} 
     */
    constructor(address, name) { 
        PartnerUpsert.initialize(this, address, name);
        Partner.initialize(this, address, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, name) { 
        obj['address'] = address;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Partner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Partner} obj Optional instance to populate.
     * @return {module:model/Partner} The populated <code>Partner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Partner();
            PartnerUpsert.constructFromObject(data, obj);

            if (data.hasOwnProperty('account_number')) {
                obj['account_number'] = ApiClient.convertToType(data['account_number'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('emails')) {
                obj['emails'] = ApiClient.convertToType(data['emails'], ['String']);
            }
            if (data.hasOwnProperty('general_ledger_number')) {
                obj['general_ledger_number'] = ApiClient.convertToType(data['general_ledger_number'], 'String');
            }
            if (data.hasOwnProperty('iban')) {
                obj['iban'] = ApiClient.convertToType(data['iban'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('swift')) {
                obj['swift'] = ApiClient.convertToType(data['swift'], 'String');
            }
            if (data.hasOwnProperty('taxcode')) {
                obj['taxcode'] = ApiClient.convertToType(data['taxcode'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Partner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Partner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Partner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_number'] && !(typeof data['account_number'] === 'string' || data['account_number'] instanceof String)) {
            throw new Error("Expected the field `account_number` to be a primitive type in the JSON string but got " + data['account_number']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['emails'])) {
            throw new Error("Expected the field `emails` to be an array in the JSON data but got " + data['emails']);
        }
        // ensure the json data is a string
        if (data['general_ledger_number'] && !(typeof data['general_ledger_number'] === 'string' || data['general_ledger_number'] instanceof String)) {
            throw new Error("Expected the field `general_ledger_number` to be a primitive type in the JSON string but got " + data['general_ledger_number']);
        }
        // ensure the json data is a string
        if (data['iban'] && !(typeof data['iban'] === 'string' || data['iban'] instanceof String)) {
            throw new Error("Expected the field `iban` to be a primitive type in the JSON string but got " + data['iban']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['swift'] && !(typeof data['swift'] === 'string' || data['swift'] instanceof String)) {
            throw new Error("Expected the field `swift` to be a primitive type in the JSON string but got " + data['swift']);
        }
        // ensure the json data is a string
        if (data['taxcode'] && !(typeof data['taxcode'] === 'string' || data['taxcode'] instanceof String)) {
            throw new Error("Expected the field `taxcode` to be a primitive type in the JSON string but got " + data['taxcode']);
        }

        return true;
    }


}

Partner.RequiredProperties = ["address", "name"];

/**
 * @member {String} account_number
 */
Partner.prototype['account_number'] = undefined;

/**
 * @member {module:model/Address} address
 */
Partner.prototype['address'] = undefined;

/**
 * @member {Array.<String>} emails
 */
Partner.prototype['emails'] = undefined;

/**
 * @member {String} general_ledger_number
 */
Partner.prototype['general_ledger_number'] = undefined;

/**
 * @member {String} iban
 */
Partner.prototype['iban'] = undefined;

/**
 * @member {String} name
 */
Partner.prototype['name'] = undefined;

/**
 * @member {String} phone
 */
Partner.prototype['phone'] = undefined;

/**
 * @member {String} swift
 */
Partner.prototype['swift'] = undefined;

/**
 * @member {String} taxcode
 */
Partner.prototype['taxcode'] = undefined;

/**
 * @member {Number} id
 */
Partner.prototype['id'] = undefined;


// Implement PartnerUpsert interface:
/**
 * @member {String} account_number
 */
PartnerUpsert.prototype['account_number'] = undefined;
/**
 * @member {module:model/Address} address
 */
PartnerUpsert.prototype['address'] = undefined;
/**
 * @member {Array.<String>} emails
 */
PartnerUpsert.prototype['emails'] = undefined;
/**
 * @member {String} general_ledger_number
 */
PartnerUpsert.prototype['general_ledger_number'] = undefined;
/**
 * @member {String} iban
 */
PartnerUpsert.prototype['iban'] = undefined;
/**
 * @member {String} name
 */
PartnerUpsert.prototype['name'] = undefined;
/**
 * @member {String} phone
 */
PartnerUpsert.prototype['phone'] = undefined;
/**
 * @member {String} swift
 */
PartnerUpsert.prototype['swift'] = undefined;
/**
 * @member {String} taxcode
 */
PartnerUpsert.prototype['taxcode'] = undefined;




export default Partner;

