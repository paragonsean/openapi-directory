/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ServerError model module.
 * @module model/ServerError
 * @version 3.0.7
 */
class ServerError {
    /**
     * Constructs a new <code>ServerError</code>.
     * @alias module:model/ServerError
     */
    constructor() { 
        
        ServerError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServerError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServerError} obj Optional instance to populate.
     * @return {module:model/ServerError} The populated <code>ServerError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServerError();

            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('trace_id')) {
                obj['trace_id'] = ApiClient.convertToType(data['trace_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServerError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServerError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['trace_id'] && !(typeof data['trace_id'] === 'string' || data['trace_id'] instanceof String)) {
            throw new Error("Expected the field `trace_id` to be a primitive type in the JSON string but got " + data['trace_id']);
        }

        return true;
    }


}



/**
 * @member {String} message
 */
ServerError.prototype['message'] = undefined;

/**
 * You should send us this ID to investigate the issue.
 * @member {String} trace_id
 */
ServerError.prototype['trace_id'] = undefined;






export default ServerError;

