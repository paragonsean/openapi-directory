/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientError from '../model/ClientError';
import ClientErrorResponse from '../model/ClientErrorResponse';
import Document from '../model/Document';
import DocumentInsert from '../model/DocumentInsert';
import DocumentList from '../model/DocumentList';
import DocumentPublicUrl from '../model/DocumentPublicUrl';
import OnlineSzamlaStatus from '../model/OnlineSzamlaStatus';
import PaymentHistory from '../model/PaymentHistory';
import PaymentMethod from '../model/PaymentMethod';
import PaymentStatus from '../model/PaymentStatus';
import SendDocument from '../model/SendDocument';
import ServerErrorResponse from '../model/ServerErrorResponse';
import ValidationErrorResponse from '../model/ValidationErrorResponse';

/**
* Document service.
* @module api/DocumentApi
* @version 3.0.7
*/
export default class DocumentApi {

    /**
    * Constructs a new DocumentApi. 
    * @alias module:api/DocumentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelDocument operation.
     * @callback module:api/DocumentApi~cancelDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a document
     * Cancel a document. Returns a cancellation document object if the cancellation is succeded.
     * @param {Number} id 
     * @param {module:api/DocumentApi~cancelDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    cancelDocument(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelDocument");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/documents/{id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDocument operation.
     * @callback module:api/DocumentApi~createDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a document
     * Create a new document. Returns a document object if the create is succeded.
     * @param {module:model/DocumentInsert} documentInsert DocumentInsert object that you would like to store.
     * @param {module:api/DocumentApi~createDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    createDocument(documentInsert, callback) {
      let postBody = documentInsert;
      // verify the required parameter 'documentInsert' is set
      if (documentInsert === undefined || documentInsert === null) {
        throw new Error("Missing the required parameter 'documentInsert' when calling createDocument");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDocumentFromProforma operation.
     * @callback module:api/DocumentApi~createDocumentFromProformaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a document from proforma.
     * Create a new document from proforma. Returns a document object if the create is succeded.
     * @param {Number} id 
     * @param {module:api/DocumentApi~createDocumentFromProformaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    createDocumentFromProforma(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createDocumentFromProforma");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/documents/{id}/create-from-proforma', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePayment operation.
     * @callback module:api/DocumentApi~deletePaymentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PaymentHistory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all payment history on document
     * Delete all exist payment history on document.
     * @param {Number} id 
     * @param {module:api/DocumentApi~deletePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PaymentHistory>}
     */
    deletePayment(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePayment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PaymentHistory];
      return this.apiClient.callApi(
        '/documents/{id}/payments', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadDocument operation.
     * @callback module:api/DocumentApi~downloadDocumentCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a document in PDF format.
     * Download a document. Returns a document in PDF format.
     * @param {Number} id 
     * @param {module:api/DocumentApi~downloadDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    downloadDocument(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadDocument");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/documents/{id}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocument operation.
     * @callback module:api/DocumentApi~getDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a document
     * Retrieves the details of an existing document.
     * @param {Number} id 
     * @param {module:api/DocumentApi~getDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    getDocument(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDocument");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/documents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOnlineSzamlaStatus operation.
     * @callback module:api/DocumentApi~getOnlineSzamlaStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnlineSzamlaStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a document Online Számla status
     * Retrieves the details of an existing document status.
     * @param {Number} id 
     * @param {module:api/DocumentApi~getOnlineSzamlaStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnlineSzamlaStatus}
     */
    getOnlineSzamlaStatus(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnlineSzamlaStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OnlineSzamlaStatus;
      return this.apiClient.callApi(
        '/documents/{id}/online-szamla', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPayment operation.
     * @callback module:api/DocumentApi~getPaymentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PaymentHistory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a payment histroy
     * Retrieves the details of payment history an existing document.
     * @param {Number} id 
     * @param {module:api/DocumentApi~getPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PaymentHistory>}
     */
    getPayment(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPayment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PaymentHistory];
      return this.apiClient.callApi(
        '/documents/{id}/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicUrl operation.
     * @callback module:api/DocumentApi~getPublicUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentPublicUrl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a document download public url.
     * Retrieves public url to download an existing document.
     * @param {Number} id 
     * @param {module:api/DocumentApi~getPublicUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentPublicUrl}
     */
    getPublicUrl(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPublicUrl");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentPublicUrl;
      return this.apiClient.callApi(
        '/documents/{id}/public-url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDocument operation.
     * @callback module:api/DocumentApi~listDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all documents
     * Returns a list of your documents. The documents are returned sorted by creation date, with the most recent documents appearing first.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {Number} [perPage = 25)] 
     * @param {Number} [blockId] Filter documents by the identifier of your DocumentBlock.
     * @param {Number} [partnerId] Filter documents by the identifier of your Partner.
     * @param {module:model/PaymentMethod} [paymentMethod] Filter documents by PaymentMethod value.
     * @param {module:model/PaymentStatus} [paymentStatus] Filter documents by PaymentStatus value.
     * @param {Date} [startDate] Filter documents by date.
     * @param {Date} [endDate] Filter documents by date.
     * @param {Number} [startNumber] Starting number of the document, should not contain year or any other formatting. Required if `start_year` given
     * @param {Number} [endNumber] Ending number of the document, should not contain year or any other formatting. Required if `end_year` given
     * @param {Number} [startYear] Year for `start_number` parameter. Required if `start_number` given.
     * @param {Number} [endYear] Year for `end_number` parameter. Required if `end_number` given.
     * @param {module:api/DocumentApi~listDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentList}
     */
    listDocument(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'block_id': opts['blockId'],
        'partner_id': opts['partnerId'],
        'payment_method': opts['paymentMethod'],
        'payment_status': opts['paymentStatus'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'start_number': opts['startNumber'],
        'end_number': opts['endNumber'],
        'start_year': opts['startYear'],
        'end_year': opts['endYear']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentList;
      return this.apiClient.callApi(
        '/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendDocument operation.
     * @callback module:api/DocumentApi~sendDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send invoice to given email adresses.
     * Returns a list of emails, where the invoice is sent.
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/SendDocument} [sendDocument] List of email-s where you want to send the invoice.
     * @param {module:api/DocumentApi~sendDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendDocument}
     */
    sendDocument(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['sendDocument'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sendDocument");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendDocument;
      return this.apiClient.callApi(
        '/documents/{id}/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePayment operation.
     * @callback module:api/DocumentApi~updatePaymentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PaymentHistory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update payment history
     * Update payment history an existing document. Returns a payment history object if the update is succeded.
     * @param {Number} id 
     * @param {Array.<module:model/PaymentHistory>} paymentHistory Payment history object that you would like to update.
     * @param {module:api/DocumentApi~updatePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PaymentHistory>}
     */
    updatePayment(id, paymentHistory, callback) {
      let postBody = paymentHistory;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePayment");
      }
      // verify the required parameter 'paymentHistory' is set
      if (paymentHistory === undefined || paymentHistory === null) {
        throw new Error("Missing the required parameter 'paymentHistory' when calling updatePayment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PaymentHistory];
      return this.apiClient.callApi(
        '/documents/{id}/payments', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
