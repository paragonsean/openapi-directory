/**
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Address from './model/Address';
import BankAccount from './model/BankAccount';
import BankAccountList from './model/BankAccountList';
import ClientError from './model/ClientError';
import ClientErrorResponse from './model/ClientErrorResponse';
import ConversationRate from './model/ConversationRate';
import Country from './model/Country';
import Currency from './model/Currency';
import Document from './model/Document';
import DocumentBankAccount from './model/DocumentBankAccount';
import DocumentBlock from './model/DocumentBlock';
import DocumentBlockList from './model/DocumentBlockList';
import DocumentInsert from './model/DocumentInsert';
import DocumentInsertItemsInner from './model/DocumentInsertItemsInner';
import DocumentInsertType from './model/DocumentInsertType';
import DocumentItem from './model/DocumentItem';
import DocumentItemData from './model/DocumentItemData';
import DocumentLanguage from './model/DocumentLanguage';
import DocumentList from './model/DocumentList';
import DocumentNotificationStatus from './model/DocumentNotificationStatus';
import DocumentOrganization from './model/DocumentOrganization';
import DocumentProductData from './model/DocumentProductData';
import DocumentPublicUrl from './model/DocumentPublicUrl';
import DocumentSettings from './model/DocumentSettings';
import DocumentSummary from './model/DocumentSummary';
import DocumentType from './model/DocumentType';
import DocumentVatRateSummary from './model/DocumentVatRateSummary';
import Id from './model/Id';
import OnlinePayment from './model/OnlinePayment';
import OnlineSzamlaStatus from './model/OnlineSzamlaStatus';
import OnlineSzamlaStatusMessage from './model/OnlineSzamlaStatusMessage';
import OrganizationData from './model/OrganizationData';
import Partner from './model/Partner';
import PartnerList from './model/PartnerList';
import PartnerUpsert from './model/PartnerUpsert';
import PaymentHistory from './model/PaymentHistory';
import PaymentMethod from './model/PaymentMethod';
import PaymentStatus from './model/PaymentStatus';
import Product from './model/Product';
import ProductList from './model/ProductList';
import Round from './model/Round';
import SendDocument from './model/SendDocument';
import ServerError from './model/ServerError';
import ServerErrorResponse from './model/ServerErrorResponse';
import UnitPriceType from './model/UnitPriceType';
import ValidationError from './model/ValidationError';
import ValidationErrorResponse from './model/ValidationErrorResponse';
import Vat from './model/Vat';
import BankAccountApi from './api/BankAccountApi';
import CurrencyApi from './api/CurrencyApi';
import DocumentApi from './api/DocumentApi';
import DocumentBlockApi from './api/DocumentBlockApi';
import OrganizationApi from './api/OrganizationApi';
import PartnerApi from './api/PartnerApi';
import ProductApi from './api/ProductApi';
import UtilApi from './api/UtilApi';


/**
* This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var BillingoApiV3 = require('index'); // See note below*.
* var xxxSvc = new BillingoApiV3.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new BillingoApiV3.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new BillingoApiV3.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new BillingoApiV3.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 3.0.7
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Address model constructor.
     * @property {module:model/Address}
     */
    Address,

    /**
     * The BankAccount model constructor.
     * @property {module:model/BankAccount}
     */
    BankAccount,

    /**
     * The BankAccountList model constructor.
     * @property {module:model/BankAccountList}
     */
    BankAccountList,

    /**
     * The ClientError model constructor.
     * @property {module:model/ClientError}
     */
    ClientError,

    /**
     * The ClientErrorResponse model constructor.
     * @property {module:model/ClientErrorResponse}
     */
    ClientErrorResponse,

    /**
     * The ConversationRate model constructor.
     * @property {module:model/ConversationRate}
     */
    ConversationRate,

    /**
     * The Country model constructor.
     * @property {module:model/Country}
     */
    Country,

    /**
     * The Currency model constructor.
     * @property {module:model/Currency}
     */
    Currency,

    /**
     * The Document model constructor.
     * @property {module:model/Document}
     */
    Document,

    /**
     * The DocumentBankAccount model constructor.
     * @property {module:model/DocumentBankAccount}
     */
    DocumentBankAccount,

    /**
     * The DocumentBlock model constructor.
     * @property {module:model/DocumentBlock}
     */
    DocumentBlock,

    /**
     * The DocumentBlockList model constructor.
     * @property {module:model/DocumentBlockList}
     */
    DocumentBlockList,

    /**
     * The DocumentInsert model constructor.
     * @property {module:model/DocumentInsert}
     */
    DocumentInsert,

    /**
     * The DocumentInsertItemsInner model constructor.
     * @property {module:model/DocumentInsertItemsInner}
     */
    DocumentInsertItemsInner,

    /**
     * The DocumentInsertType model constructor.
     * @property {module:model/DocumentInsertType}
     */
    DocumentInsertType,

    /**
     * The DocumentItem model constructor.
     * @property {module:model/DocumentItem}
     */
    DocumentItem,

    /**
     * The DocumentItemData model constructor.
     * @property {module:model/DocumentItemData}
     */
    DocumentItemData,

    /**
     * The DocumentLanguage model constructor.
     * @property {module:model/DocumentLanguage}
     */
    DocumentLanguage,

    /**
     * The DocumentList model constructor.
     * @property {module:model/DocumentList}
     */
    DocumentList,

    /**
     * The DocumentNotificationStatus model constructor.
     * @property {module:model/DocumentNotificationStatus}
     */
    DocumentNotificationStatus,

    /**
     * The DocumentOrganization model constructor.
     * @property {module:model/DocumentOrganization}
     */
    DocumentOrganization,

    /**
     * The DocumentProductData model constructor.
     * @property {module:model/DocumentProductData}
     */
    DocumentProductData,

    /**
     * The DocumentPublicUrl model constructor.
     * @property {module:model/DocumentPublicUrl}
     */
    DocumentPublicUrl,

    /**
     * The DocumentSettings model constructor.
     * @property {module:model/DocumentSettings}
     */
    DocumentSettings,

    /**
     * The DocumentSummary model constructor.
     * @property {module:model/DocumentSummary}
     */
    DocumentSummary,

    /**
     * The DocumentType model constructor.
     * @property {module:model/DocumentType}
     */
    DocumentType,

    /**
     * The DocumentVatRateSummary model constructor.
     * @property {module:model/DocumentVatRateSummary}
     */
    DocumentVatRateSummary,

    /**
     * The Id model constructor.
     * @property {module:model/Id}
     */
    Id,

    /**
     * The OnlinePayment model constructor.
     * @property {module:model/OnlinePayment}
     */
    OnlinePayment,

    /**
     * The OnlineSzamlaStatus model constructor.
     * @property {module:model/OnlineSzamlaStatus}
     */
    OnlineSzamlaStatus,

    /**
     * The OnlineSzamlaStatusMessage model constructor.
     * @property {module:model/OnlineSzamlaStatusMessage}
     */
    OnlineSzamlaStatusMessage,

    /**
     * The OrganizationData model constructor.
     * @property {module:model/OrganizationData}
     */
    OrganizationData,

    /**
     * The Partner model constructor.
     * @property {module:model/Partner}
     */
    Partner,

    /**
     * The PartnerList model constructor.
     * @property {module:model/PartnerList}
     */
    PartnerList,

    /**
     * The PartnerUpsert model constructor.
     * @property {module:model/PartnerUpsert}
     */
    PartnerUpsert,

    /**
     * The PaymentHistory model constructor.
     * @property {module:model/PaymentHistory}
     */
    PaymentHistory,

    /**
     * The PaymentMethod model constructor.
     * @property {module:model/PaymentMethod}
     */
    PaymentMethod,

    /**
     * The PaymentStatus model constructor.
     * @property {module:model/PaymentStatus}
     */
    PaymentStatus,

    /**
     * The Product model constructor.
     * @property {module:model/Product}
     */
    Product,

    /**
     * The ProductList model constructor.
     * @property {module:model/ProductList}
     */
    ProductList,

    /**
     * The Round model constructor.
     * @property {module:model/Round}
     */
    Round,

    /**
     * The SendDocument model constructor.
     * @property {module:model/SendDocument}
     */
    SendDocument,

    /**
     * The ServerError model constructor.
     * @property {module:model/ServerError}
     */
    ServerError,

    /**
     * The ServerErrorResponse model constructor.
     * @property {module:model/ServerErrorResponse}
     */
    ServerErrorResponse,

    /**
     * The UnitPriceType model constructor.
     * @property {module:model/UnitPriceType}
     */
    UnitPriceType,

    /**
     * The ValidationError model constructor.
     * @property {module:model/ValidationError}
     */
    ValidationError,

    /**
     * The ValidationErrorResponse model constructor.
     * @property {module:model/ValidationErrorResponse}
     */
    ValidationErrorResponse,

    /**
     * The Vat model constructor.
     * @property {module:model/Vat}
     */
    Vat,

    /**
    * The BankAccountApi service constructor.
    * @property {module:api/BankAccountApi}
    */
    BankAccountApi,

    /**
    * The CurrencyApi service constructor.
    * @property {module:api/CurrencyApi}
    */
    CurrencyApi,

    /**
    * The DocumentApi service constructor.
    * @property {module:api/DocumentApi}
    */
    DocumentApi,

    /**
    * The DocumentBlockApi service constructor.
    * @property {module:api/DocumentBlockApi}
    */
    DocumentBlockApi,

    /**
    * The OrganizationApi service constructor.
    * @property {module:api/OrganizationApi}
    */
    OrganizationApi,

    /**
    * The PartnerApi service constructor.
    * @property {module:api/PartnerApi}
    */
    PartnerApi,

    /**
    * The ProductApi service constructor.
    * @property {module:api/ProductApi}
    */
    ProductApi,

    /**
    * The UtilApi service constructor.
    * @property {module:api/UtilApi}
    */
    UtilApi
};
