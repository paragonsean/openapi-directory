# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util


class Partner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, address: Address=None, emails: List[str]=None, general_ledger_number: str=None, iban: str=None, name: str=None, phone: str=None, swift: str=None, taxcode: str=None, id: int=None):
        """Partner - a model defined in OpenAPI

        :param account_number: The account_number of this Partner.
        :param address: The address of this Partner.
        :param emails: The emails of this Partner.
        :param general_ledger_number: The general_ledger_number of this Partner.
        :param iban: The iban of this Partner.
        :param name: The name of this Partner.
        :param phone: The phone of this Partner.
        :param swift: The swift of this Partner.
        :param taxcode: The taxcode of this Partner.
        :param id: The id of this Partner.
        """
        self.openapi_types = {
            'account_number': str,
            'address': Address,
            'emails': List[str],
            'general_ledger_number': str,
            'iban': str,
            'name': str,
            'phone': str,
            'swift': str,
            'taxcode': str,
            'id': int
        }

        self.attribute_map = {
            'account_number': 'account_number',
            'address': 'address',
            'emails': 'emails',
            'general_ledger_number': 'general_ledger_number',
            'iban': 'iban',
            'name': 'name',
            'phone': 'phone',
            'swift': 'swift',
            'taxcode': 'taxcode',
            'id': 'id'
        }

        self._account_number = account_number
        self._address = address
        self._emails = emails
        self._general_ledger_number = general_ledger_number
        self._iban = iban
        self._name = name
        self._phone = phone
        self._swift = swift
        self._taxcode = taxcode
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Partner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Partner of this Partner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this Partner.


        :return: The account_number of this Partner.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this Partner.


        :param account_number: The account_number of this Partner.
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def address(self):
        """Gets the address of this Partner.


        :return: The address of this Partner.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Partner.


        :param address: The address of this Partner.
        :type address: Address
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def emails(self):
        """Gets the emails of this Partner.


        :return: The emails of this Partner.
        :rtype: List[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this Partner.


        :param emails: The emails of this Partner.
        :type emails: List[str]
        """

        self._emails = emails

    @property
    def general_ledger_number(self):
        """Gets the general_ledger_number of this Partner.


        :return: The general_ledger_number of this Partner.
        :rtype: str
        """
        return self._general_ledger_number

    @general_ledger_number.setter
    def general_ledger_number(self, general_ledger_number):
        """Sets the general_ledger_number of this Partner.


        :param general_ledger_number: The general_ledger_number of this Partner.
        :type general_ledger_number: str
        """

        self._general_ledger_number = general_ledger_number

    @property
    def iban(self):
        """Gets the iban of this Partner.


        :return: The iban of this Partner.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this Partner.


        :param iban: The iban of this Partner.
        :type iban: str
        """

        self._iban = iban

    @property
    def name(self):
        """Gets the name of this Partner.


        :return: The name of this Partner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Partner.


        :param name: The name of this Partner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this Partner.


        :return: The phone of this Partner.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Partner.


        :param phone: The phone of this Partner.
        :type phone: str
        """

        self._phone = phone

    @property
    def swift(self):
        """Gets the swift of this Partner.


        :return: The swift of this Partner.
        :rtype: str
        """
        return self._swift

    @swift.setter
    def swift(self, swift):
        """Sets the swift of this Partner.


        :param swift: The swift of this Partner.
        :type swift: str
        """

        self._swift = swift

    @property
    def taxcode(self):
        """Gets the taxcode of this Partner.


        :return: The taxcode of this Partner.
        :rtype: str
        """
        return self._taxcode

    @taxcode.setter
    def taxcode(self, taxcode):
        """Sets the taxcode of this Partner.


        :param taxcode: The taxcode of this Partner.
        :type taxcode: str
        """

        self._taxcode = taxcode

    @property
    def id(self):
        """Gets the id of this Partner.


        :return: The id of this Partner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Partner.


        :param id: The id of this Partner.
        :type id: int
        """

        self._id = id
