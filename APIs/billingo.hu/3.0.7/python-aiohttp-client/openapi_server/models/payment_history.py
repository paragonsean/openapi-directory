# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_method import PaymentMethod
from openapi_server import util


class PaymentHistory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conversion_rate: float=None, _date: date=None, payment_method: PaymentMethod=None, price: float=None, voucher_number: str=None):
        """PaymentHistory - a model defined in OpenAPI

        :param conversion_rate: The conversion_rate of this PaymentHistory.
        :param _date: The _date of this PaymentHistory.
        :param payment_method: The payment_method of this PaymentHistory.
        :param price: The price of this PaymentHistory.
        :param voucher_number: The voucher_number of this PaymentHistory.
        """
        self.openapi_types = {
            'conversion_rate': float,
            '_date': date,
            'payment_method': PaymentMethod,
            'price': float,
            'voucher_number': str
        }

        self.attribute_map = {
            'conversion_rate': 'conversion_rate',
            '_date': 'date',
            'payment_method': 'payment_method',
            'price': 'price',
            'voucher_number': 'voucher_number'
        }

        self._conversion_rate = conversion_rate
        self.__date = _date
        self._payment_method = payment_method
        self._price = price
        self._voucher_number = voucher_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentHistory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentHistory of this PaymentHistory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conversion_rate(self):
        """Gets the conversion_rate of this PaymentHistory.


        :return: The conversion_rate of this PaymentHistory.
        :rtype: float
        """
        return self._conversion_rate

    @conversion_rate.setter
    def conversion_rate(self, conversion_rate):
        """Sets the conversion_rate of this PaymentHistory.


        :param conversion_rate: The conversion_rate of this PaymentHistory.
        :type conversion_rate: float
        """

        self._conversion_rate = conversion_rate

    @property
    def _date(self):
        """Gets the _date of this PaymentHistory.


        :return: The _date of this PaymentHistory.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PaymentHistory.


        :param _date: The _date of this PaymentHistory.
        :type _date: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def payment_method(self):
        """Gets the payment_method of this PaymentHistory.


        :return: The payment_method of this PaymentHistory.
        :rtype: PaymentMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this PaymentHistory.


        :param payment_method: The payment_method of this PaymentHistory.
        :type payment_method: PaymentMethod
        """
        if payment_method is None:
            raise ValueError("Invalid value for `payment_method`, must not be `None`")

        self._payment_method = payment_method

    @property
    def price(self):
        """Gets the price of this PaymentHistory.


        :return: The price of this PaymentHistory.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PaymentHistory.


        :param price: The price of this PaymentHistory.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def voucher_number(self):
        """Gets the voucher_number of this PaymentHistory.


        :return: The voucher_number of this PaymentHistory.
        :rtype: str
        """
        return self._voucher_number

    @voucher_number.setter
    def voucher_number(self, voucher_number):
        """Sets the voucher_number of this PaymentHistory.


        :param voucher_number: The voucher_number of this PaymentHistory.
        :type voucher_number: str
        """

        self._voucher_number = voucher_number
