# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document import Document
from openapi_server import util


class DocumentList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_page: int=None, data: List[Document]=None, last_page: int=None, next_page_url: str=None, per_page: int=None, prev_page_url: str=None, total: int=None):
        """DocumentList - a model defined in OpenAPI

        :param current_page: The current_page of this DocumentList.
        :param data: The data of this DocumentList.
        :param last_page: The last_page of this DocumentList.
        :param next_page_url: The next_page_url of this DocumentList.
        :param per_page: The per_page of this DocumentList.
        :param prev_page_url: The prev_page_url of this DocumentList.
        :param total: The total of this DocumentList.
        """
        self.openapi_types = {
            'current_page': int,
            'data': List[Document],
            'last_page': int,
            'next_page_url': str,
            'per_page': int,
            'prev_page_url': str,
            'total': int
        }

        self.attribute_map = {
            'current_page': 'current_page',
            'data': 'data',
            'last_page': 'last_page',
            'next_page_url': 'next_page_url',
            'per_page': 'per_page',
            'prev_page_url': 'prev_page_url',
            'total': 'total'
        }

        self._current_page = current_page
        self._data = data
        self._last_page = last_page
        self._next_page_url = next_page_url
        self._per_page = per_page
        self._prev_page_url = prev_page_url
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentList of this DocumentList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_page(self):
        """Gets the current_page of this DocumentList.


        :return: The current_page of this DocumentList.
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this DocumentList.


        :param current_page: The current_page of this DocumentList.
        :type current_page: int
        """

        self._current_page = current_page

    @property
    def data(self):
        """Gets the data of this DocumentList.


        :return: The data of this DocumentList.
        :rtype: List[Document]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this DocumentList.


        :param data: The data of this DocumentList.
        :type data: List[Document]
        """

        self._data = data

    @property
    def last_page(self):
        """Gets the last_page of this DocumentList.


        :return: The last_page of this DocumentList.
        :rtype: int
        """
        return self._last_page

    @last_page.setter
    def last_page(self, last_page):
        """Sets the last_page of this DocumentList.


        :param last_page: The last_page of this DocumentList.
        :type last_page: int
        """

        self._last_page = last_page

    @property
    def next_page_url(self):
        """Gets the next_page_url of this DocumentList.


        :return: The next_page_url of this DocumentList.
        :rtype: str
        """
        return self._next_page_url

    @next_page_url.setter
    def next_page_url(self, next_page_url):
        """Sets the next_page_url of this DocumentList.


        :param next_page_url: The next_page_url of this DocumentList.
        :type next_page_url: str
        """

        self._next_page_url = next_page_url

    @property
    def per_page(self):
        """Gets the per_page of this DocumentList.


        :return: The per_page of this DocumentList.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this DocumentList.


        :param per_page: The per_page of this DocumentList.
        :type per_page: int
        """

        self._per_page = per_page

    @property
    def prev_page_url(self):
        """Gets the prev_page_url of this DocumentList.


        :return: The prev_page_url of this DocumentList.
        :rtype: str
        """
        return self._prev_page_url

    @prev_page_url.setter
    def prev_page_url(self, prev_page_url):
        """Sets the prev_page_url of this DocumentList.


        :param prev_page_url: The prev_page_url of this DocumentList.
        :type prev_page_url: str
        """

        self._prev_page_url = prev_page_url

    @property
    def total(self):
        """Gets the total of this DocumentList.


        :return: The total of this DocumentList.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this DocumentList.


        :param total: The total of this DocumentList.
        :type total: int
        """

        self._total = total
