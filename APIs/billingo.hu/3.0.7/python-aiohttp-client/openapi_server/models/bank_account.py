# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server import util


class BankAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, account_number_iban: str=None, currency: Currency=None, id: int=None, name: str=None, need_qr: bool=False, swift: str=None):
        """BankAccount - a model defined in OpenAPI

        :param account_number: The account_number of this BankAccount.
        :param account_number_iban: The account_number_iban of this BankAccount.
        :param currency: The currency of this BankAccount.
        :param id: The id of this BankAccount.
        :param name: The name of this BankAccount.
        :param need_qr: The need_qr of this BankAccount.
        :param swift: The swift of this BankAccount.
        """
        self.openapi_types = {
            'account_number': str,
            'account_number_iban': str,
            'currency': Currency,
            'id': int,
            'name': str,
            'need_qr': bool,
            'swift': str
        }

        self.attribute_map = {
            'account_number': 'account_number',
            'account_number_iban': 'account_number_iban',
            'currency': 'currency',
            'id': 'id',
            'name': 'name',
            'need_qr': 'need_qr',
            'swift': 'swift'
        }

        self._account_number = account_number
        self._account_number_iban = account_number_iban
        self._currency = currency
        self._id = id
        self._name = name
        self._need_qr = need_qr
        self._swift = swift

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAccount of this BankAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this BankAccount.


        :return: The account_number of this BankAccount.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BankAccount.


        :param account_number: The account_number of this BankAccount.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")

        self._account_number = account_number

    @property
    def account_number_iban(self):
        """Gets the account_number_iban of this BankAccount.


        :return: The account_number_iban of this BankAccount.
        :rtype: str
        """
        return self._account_number_iban

    @account_number_iban.setter
    def account_number_iban(self, account_number_iban):
        """Sets the account_number_iban of this BankAccount.


        :param account_number_iban: The account_number_iban of this BankAccount.
        :type account_number_iban: str
        """

        self._account_number_iban = account_number_iban

    @property
    def currency(self):
        """Gets the currency of this BankAccount.


        :return: The currency of this BankAccount.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BankAccount.


        :param currency: The currency of this BankAccount.
        :type currency: Currency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def id(self):
        """Gets the id of this BankAccount.


        :return: The id of this BankAccount.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankAccount.


        :param id: The id of this BankAccount.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BankAccount.


        :return: The name of this BankAccount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BankAccount.


        :param name: The name of this BankAccount.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def need_qr(self):
        """Gets the need_qr of this BankAccount.


        :return: The need_qr of this BankAccount.
        :rtype: bool
        """
        return self._need_qr

    @need_qr.setter
    def need_qr(self, need_qr):
        """Sets the need_qr of this BankAccount.


        :param need_qr: The need_qr of this BankAccount.
        :type need_qr: bool
        """

        self._need_qr = need_qr

    @property
    def swift(self):
        """Gets the swift of this BankAccount.


        :return: The swift of this BankAccount.
        :rtype: str
        """
        return self._swift

    @swift.setter
    def swift(self, swift):
        """Sets the swift of this BankAccount.


        :param swift: The swift of this BankAccount.
        :type swift: str
        """

        self._swift = swift
