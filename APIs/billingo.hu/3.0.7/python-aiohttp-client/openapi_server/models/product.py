# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.vat import Vat
from openapi_server import util


class Product(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, currency: Currency=None, general_ledger_number: str=None, general_ledger_taxcode: str=None, id: int=None, name: str=None, net_unit_price: float=None, unit: str=None, vat: Vat=None):
        """Product - a model defined in OpenAPI

        :param comment: The comment of this Product.
        :param currency: The currency of this Product.
        :param general_ledger_number: The general_ledger_number of this Product.
        :param general_ledger_taxcode: The general_ledger_taxcode of this Product.
        :param id: The id of this Product.
        :param name: The name of this Product.
        :param net_unit_price: The net_unit_price of this Product.
        :param unit: The unit of this Product.
        :param vat: The vat of this Product.
        """
        self.openapi_types = {
            'comment': str,
            'currency': Currency,
            'general_ledger_number': str,
            'general_ledger_taxcode': str,
            'id': int,
            'name': str,
            'net_unit_price': float,
            'unit': str,
            'vat': Vat
        }

        self.attribute_map = {
            'comment': 'comment',
            'currency': 'currency',
            'general_ledger_number': 'general_ledger_number',
            'general_ledger_taxcode': 'general_ledger_taxcode',
            'id': 'id',
            'name': 'name',
            'net_unit_price': 'net_unit_price',
            'unit': 'unit',
            'vat': 'vat'
        }

        self._comment = comment
        self._currency = currency
        self._general_ledger_number = general_ledger_number
        self._general_ledger_taxcode = general_ledger_taxcode
        self._id = id
        self._name = name
        self._net_unit_price = net_unit_price
        self._unit = unit
        self._vat = vat

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Product of this Product.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this Product.


        :return: The comment of this Product.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Product.


        :param comment: The comment of this Product.
        :type comment: str
        """

        self._comment = comment

    @property
    def currency(self):
        """Gets the currency of this Product.


        :return: The currency of this Product.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Product.


        :param currency: The currency of this Product.
        :type currency: Currency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def general_ledger_number(self):
        """Gets the general_ledger_number of this Product.


        :return: The general_ledger_number of this Product.
        :rtype: str
        """
        return self._general_ledger_number

    @general_ledger_number.setter
    def general_ledger_number(self, general_ledger_number):
        """Sets the general_ledger_number of this Product.


        :param general_ledger_number: The general_ledger_number of this Product.
        :type general_ledger_number: str
        """

        self._general_ledger_number = general_ledger_number

    @property
    def general_ledger_taxcode(self):
        """Gets the general_ledger_taxcode of this Product.


        :return: The general_ledger_taxcode of this Product.
        :rtype: str
        """
        return self._general_ledger_taxcode

    @general_ledger_taxcode.setter
    def general_ledger_taxcode(self, general_ledger_taxcode):
        """Sets the general_ledger_taxcode of this Product.


        :param general_ledger_taxcode: The general_ledger_taxcode of this Product.
        :type general_ledger_taxcode: str
        """

        self._general_ledger_taxcode = general_ledger_taxcode

    @property
    def id(self):
        """Gets the id of this Product.


        :return: The id of this Product.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Product.


        :param id: The id of this Product.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Product.


        :return: The name of this Product.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Product.


        :param name: The name of this Product.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def net_unit_price(self):
        """Gets the net_unit_price of this Product.


        :return: The net_unit_price of this Product.
        :rtype: float
        """
        return self._net_unit_price

    @net_unit_price.setter
    def net_unit_price(self, net_unit_price):
        """Sets the net_unit_price of this Product.


        :param net_unit_price: The net_unit_price of this Product.
        :type net_unit_price: float
        """

        self._net_unit_price = net_unit_price

    @property
    def unit(self):
        """Gets the unit of this Product.


        :return: The unit of this Product.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Product.


        :param unit: The unit of this Product.
        :type unit: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")

        self._unit = unit

    @property
    def vat(self):
        """Gets the vat of this Product.


        :return: The vat of this Product.
        :rtype: Vat
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this Product.


        :param vat: The vat of this Product.
        :type vat: Vat
        """
        if vat is None:
            raise ValueError("Invalid value for `vat`, must not be `None`")

        self._vat = vat
