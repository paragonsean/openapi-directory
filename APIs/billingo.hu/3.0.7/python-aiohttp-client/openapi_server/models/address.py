# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country import Country
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, city: str=None, country_code: Country=None, post_code: str=None):
        """Address - a model defined in OpenAPI

        :param address: The address of this Address.
        :param city: The city of this Address.
        :param country_code: The country_code of this Address.
        :param post_code: The post_code of this Address.
        """
        self.openapi_types = {
            'address': str,
            'city': str,
            'country_code': Country,
            'post_code': str
        }

        self.attribute_map = {
            'address': 'address',
            'city': 'city',
            'country_code': 'country_code',
            'post_code': 'post_code'
        }

        self._address = address
        self._city = city
        self._country_code = country_code
        self._post_code = post_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Address.


        :return: The address of this Address.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Address.


        :param address: The address of this Address.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def city(self):
        """Gets the city of this Address.


        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.


        :param city: The city of this Address.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def country_code(self):
        """Gets the country_code of this Address.


        :return: The country_code of this Address.
        :rtype: Country
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Address.


        :param country_code: The country_code of this Address.
        :type country_code: Country
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def post_code(self):
        """Gets the post_code of this Address.


        :return: The post_code of this Address.
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this Address.


        :param post_code: The post_code of this Address.
        :type post_code: str
        """
        if post_code is None:
            raise ValueError("Invalid value for `post_code`, must not be `None`")

        self._post_code = post_code
