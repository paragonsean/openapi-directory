# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server import util


class ConversationRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conversation_rate: float=None, from_currency: Currency=None, to_currency: Currency=None):
        """ConversationRate - a model defined in OpenAPI

        :param conversation_rate: The conversation_rate of this ConversationRate.
        :param from_currency: The from_currency of this ConversationRate.
        :param to_currency: The to_currency of this ConversationRate.
        """
        self.openapi_types = {
            'conversation_rate': float,
            'from_currency': Currency,
            'to_currency': Currency
        }

        self.attribute_map = {
            'conversation_rate': 'conversation_rate',
            'from_currency': 'from_currency',
            'to_currency': 'to_currency'
        }

        self._conversation_rate = conversation_rate
        self._from_currency = from_currency
        self._to_currency = to_currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConversationRate of this ConversationRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conversation_rate(self):
        """Gets the conversation_rate of this ConversationRate.


        :return: The conversation_rate of this ConversationRate.
        :rtype: float
        """
        return self._conversation_rate

    @conversation_rate.setter
    def conversation_rate(self, conversation_rate):
        """Sets the conversation_rate of this ConversationRate.


        :param conversation_rate: The conversation_rate of this ConversationRate.
        :type conversation_rate: float
        """

        self._conversation_rate = conversation_rate

    @property
    def from_currency(self):
        """Gets the from_currency of this ConversationRate.


        :return: The from_currency of this ConversationRate.
        :rtype: Currency
        """
        return self._from_currency

    @from_currency.setter
    def from_currency(self, from_currency):
        """Sets the from_currency of this ConversationRate.


        :param from_currency: The from_currency of this ConversationRate.
        :type from_currency: Currency
        """

        self._from_currency = from_currency

    @property
    def to_currency(self):
        """Gets the to_currency of this ConversationRate.


        :return: The to_currency of this ConversationRate.
        :rtype: Currency
        """
        return self._to_currency

    @to_currency.setter
    def to_currency(self, to_currency):
        """Sets the to_currency of this ConversationRate.


        :param to_currency: The to_currency of this ConversationRate.
        :type to_currency: Currency
        """

        self._to_currency = to_currency
