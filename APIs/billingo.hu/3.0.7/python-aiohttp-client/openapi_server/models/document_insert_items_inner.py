# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_item_data import DocumentItemData
from openapi_server.models.document_product_data import DocumentProductData
from openapi_server.models.unit_price_type import UnitPriceType
from openapi_server.models.vat import Vat
from openapi_server import util


class DocumentInsertItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_id: int=None, quantity: float=None, comment: str=None, name: str=None, unit: str=None, unit_price: float=None, unit_price_type: UnitPriceType=None, vat: Vat=None):
        """DocumentInsertItemsInner - a model defined in OpenAPI

        :param product_id: The product_id of this DocumentInsertItemsInner.
        :param quantity: The quantity of this DocumentInsertItemsInner.
        :param comment: The comment of this DocumentInsertItemsInner.
        :param name: The name of this DocumentInsertItemsInner.
        :param unit: The unit of this DocumentInsertItemsInner.
        :param unit_price: The unit_price of this DocumentInsertItemsInner.
        :param unit_price_type: The unit_price_type of this DocumentInsertItemsInner.
        :param vat: The vat of this DocumentInsertItemsInner.
        """
        self.openapi_types = {
            'product_id': int,
            'quantity': float,
            'comment': str,
            'name': str,
            'unit': str,
            'unit_price': float,
            'unit_price_type': UnitPriceType,
            'vat': Vat
        }

        self.attribute_map = {
            'product_id': 'product_id',
            'quantity': 'quantity',
            'comment': 'comment',
            'name': 'name',
            'unit': 'unit',
            'unit_price': 'unit_price',
            'unit_price_type': 'unit_price_type',
            'vat': 'vat'
        }

        self._product_id = product_id
        self._quantity = quantity
        self._comment = comment
        self._name = name
        self._unit = unit
        self._unit_price = unit_price
        self._unit_price_type = unit_price_type
        self._vat = vat

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentInsertItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentInsert_items_inner of this DocumentInsertItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_id(self):
        """Gets the product_id of this DocumentInsertItemsInner.


        :return: The product_id of this DocumentInsertItemsInner.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this DocumentInsertItemsInner.


        :param product_id: The product_id of this DocumentInsertItemsInner.
        :type product_id: int
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this DocumentInsertItemsInner.


        :return: The quantity of this DocumentInsertItemsInner.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this DocumentInsertItemsInner.


        :param quantity: The quantity of this DocumentInsertItemsInner.
        :type quantity: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def comment(self):
        """Gets the comment of this DocumentInsertItemsInner.


        :return: The comment of this DocumentInsertItemsInner.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this DocumentInsertItemsInner.


        :param comment: The comment of this DocumentInsertItemsInner.
        :type comment: str
        """

        self._comment = comment

    @property
    def name(self):
        """Gets the name of this DocumentInsertItemsInner.


        :return: The name of this DocumentInsertItemsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentInsertItemsInner.


        :param name: The name of this DocumentInsertItemsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def unit(self):
        """Gets the unit of this DocumentInsertItemsInner.


        :return: The unit of this DocumentInsertItemsInner.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this DocumentInsertItemsInner.


        :param unit: The unit of this DocumentInsertItemsInner.
        :type unit: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")

        self._unit = unit

    @property
    def unit_price(self):
        """Gets the unit_price of this DocumentInsertItemsInner.


        :return: The unit_price of this DocumentInsertItemsInner.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this DocumentInsertItemsInner.


        :param unit_price: The unit_price of this DocumentInsertItemsInner.
        :type unit_price: float
        """
        if unit_price is None:
            raise ValueError("Invalid value for `unit_price`, must not be `None`")

        self._unit_price = unit_price

    @property
    def unit_price_type(self):
        """Gets the unit_price_type of this DocumentInsertItemsInner.


        :return: The unit_price_type of this DocumentInsertItemsInner.
        :rtype: UnitPriceType
        """
        return self._unit_price_type

    @unit_price_type.setter
    def unit_price_type(self, unit_price_type):
        """Sets the unit_price_type of this DocumentInsertItemsInner.


        :param unit_price_type: The unit_price_type of this DocumentInsertItemsInner.
        :type unit_price_type: UnitPriceType
        """
        if unit_price_type is None:
            raise ValueError("Invalid value for `unit_price_type`, must not be `None`")

        self._unit_price_type = unit_price_type

    @property
    def vat(self):
        """Gets the vat of this DocumentInsertItemsInner.


        :return: The vat of this DocumentInsertItemsInner.
        :rtype: Vat
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this DocumentInsertItemsInner.


        :param vat: The vat of this DocumentInsertItemsInner.
        :type vat: Vat
        """
        if vat is None:
            raise ValueError("Invalid value for `vat`, must not be `None`")

        self._vat = vat
