# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.online_payment import OnlinePayment
from openapi_server.models.round import Round
from openapi_server import util


class DocumentSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mediated_service: bool=False, online_payment: OnlinePayment=None, place_id: int=None, round: Round=None, without_financial_fulfillment: bool=False):
        """DocumentSettings - a model defined in OpenAPI

        :param mediated_service: The mediated_service of this DocumentSettings.
        :param online_payment: The online_payment of this DocumentSettings.
        :param place_id: The place_id of this DocumentSettings.
        :param round: The round of this DocumentSettings.
        :param without_financial_fulfillment: The without_financial_fulfillment of this DocumentSettings.
        """
        self.openapi_types = {
            'mediated_service': bool,
            'online_payment': OnlinePayment,
            'place_id': int,
            'round': Round,
            'without_financial_fulfillment': bool
        }

        self.attribute_map = {
            'mediated_service': 'mediated_service',
            'online_payment': 'online_payment',
            'place_id': 'place_id',
            'round': 'round',
            'without_financial_fulfillment': 'without_financial_fulfillment'
        }

        self._mediated_service = mediated_service
        self._online_payment = online_payment
        self._place_id = place_id
        self._round = round
        self._without_financial_fulfillment = without_financial_fulfillment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentSettings of this DocumentSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mediated_service(self):
        """Gets the mediated_service of this DocumentSettings.


        :return: The mediated_service of this DocumentSettings.
        :rtype: bool
        """
        return self._mediated_service

    @mediated_service.setter
    def mediated_service(self, mediated_service):
        """Sets the mediated_service of this DocumentSettings.


        :param mediated_service: The mediated_service of this DocumentSettings.
        :type mediated_service: bool
        """

        self._mediated_service = mediated_service

    @property
    def online_payment(self):
        """Gets the online_payment of this DocumentSettings.


        :return: The online_payment of this DocumentSettings.
        :rtype: OnlinePayment
        """
        return self._online_payment

    @online_payment.setter
    def online_payment(self, online_payment):
        """Sets the online_payment of this DocumentSettings.


        :param online_payment: The online_payment of this DocumentSettings.
        :type online_payment: OnlinePayment
        """

        self._online_payment = online_payment

    @property
    def place_id(self):
        """Gets the place_id of this DocumentSettings.


        :return: The place_id of this DocumentSettings.
        :rtype: int
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this DocumentSettings.


        :param place_id: The place_id of this DocumentSettings.
        :type place_id: int
        """

        self._place_id = place_id

    @property
    def round(self):
        """Gets the round of this DocumentSettings.


        :return: The round of this DocumentSettings.
        :rtype: Round
        """
        return self._round

    @round.setter
    def round(self, round):
        """Sets the round of this DocumentSettings.


        :param round: The round of this DocumentSettings.
        :type round: Round
        """

        self._round = round

    @property
    def without_financial_fulfillment(self):
        """Gets the without_financial_fulfillment of this DocumentSettings.


        :return: The without_financial_fulfillment of this DocumentSettings.
        :rtype: bool
        """
        return self._without_financial_fulfillment

    @without_financial_fulfillment.setter
    def without_financial_fulfillment(self, without_financial_fulfillment):
        """Sets the without_financial_fulfillment of this DocumentSettings.


        :param without_financial_fulfillment: The without_financial_fulfillment of this DocumentSettings.
        :type without_financial_fulfillment: bool
        """

        self._without_financial_fulfillment = without_financial_fulfillment
