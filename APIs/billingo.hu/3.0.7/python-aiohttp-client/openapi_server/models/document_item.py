# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vat import Vat
from openapi_server import util


class DocumentItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gross_amount: float=None, name: str=None, net_amount: float=None, net_unit_amount: float=None, product_id: int=None, quantity: float=None, vat: Vat=None, vat_amount: float=None):
        """DocumentItem - a model defined in OpenAPI

        :param gross_amount: The gross_amount of this DocumentItem.
        :param name: The name of this DocumentItem.
        :param net_amount: The net_amount of this DocumentItem.
        :param net_unit_amount: The net_unit_amount of this DocumentItem.
        :param product_id: The product_id of this DocumentItem.
        :param quantity: The quantity of this DocumentItem.
        :param vat: The vat of this DocumentItem.
        :param vat_amount: The vat_amount of this DocumentItem.
        """
        self.openapi_types = {
            'gross_amount': float,
            'name': str,
            'net_amount': float,
            'net_unit_amount': float,
            'product_id': int,
            'quantity': float,
            'vat': Vat,
            'vat_amount': float
        }

        self.attribute_map = {
            'gross_amount': 'gross_amount',
            'name': 'name',
            'net_amount': 'net_amount',
            'net_unit_amount': 'net_unit_amount',
            'product_id': 'product_id',
            'quantity': 'quantity',
            'vat': 'vat',
            'vat_amount': 'vat_amount'
        }

        self._gross_amount = gross_amount
        self._name = name
        self._net_amount = net_amount
        self._net_unit_amount = net_unit_amount
        self._product_id = product_id
        self._quantity = quantity
        self._vat = vat
        self._vat_amount = vat_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentItem of this DocumentItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gross_amount(self):
        """Gets the gross_amount of this DocumentItem.


        :return: The gross_amount of this DocumentItem.
        :rtype: float
        """
        return self._gross_amount

    @gross_amount.setter
    def gross_amount(self, gross_amount):
        """Sets the gross_amount of this DocumentItem.


        :param gross_amount: The gross_amount of this DocumentItem.
        :type gross_amount: float
        """

        self._gross_amount = gross_amount

    @property
    def name(self):
        """Gets the name of this DocumentItem.


        :return: The name of this DocumentItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentItem.


        :param name: The name of this DocumentItem.
        :type name: str
        """

        self._name = name

    @property
    def net_amount(self):
        """Gets the net_amount of this DocumentItem.


        :return: The net_amount of this DocumentItem.
        :rtype: float
        """
        return self._net_amount

    @net_amount.setter
    def net_amount(self, net_amount):
        """Sets the net_amount of this DocumentItem.


        :param net_amount: The net_amount of this DocumentItem.
        :type net_amount: float
        """

        self._net_amount = net_amount

    @property
    def net_unit_amount(self):
        """Gets the net_unit_amount of this DocumentItem.


        :return: The net_unit_amount of this DocumentItem.
        :rtype: float
        """
        return self._net_unit_amount

    @net_unit_amount.setter
    def net_unit_amount(self, net_unit_amount):
        """Sets the net_unit_amount of this DocumentItem.


        :param net_unit_amount: The net_unit_amount of this DocumentItem.
        :type net_unit_amount: float
        """

        self._net_unit_amount = net_unit_amount

    @property
    def product_id(self):
        """Gets the product_id of this DocumentItem.


        :return: The product_id of this DocumentItem.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this DocumentItem.


        :param product_id: The product_id of this DocumentItem.
        :type product_id: int
        """

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this DocumentItem.


        :return: The quantity of this DocumentItem.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this DocumentItem.


        :param quantity: The quantity of this DocumentItem.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def vat(self):
        """Gets the vat of this DocumentItem.


        :return: The vat of this DocumentItem.
        :rtype: Vat
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this DocumentItem.


        :param vat: The vat of this DocumentItem.
        :type vat: Vat
        """

        self._vat = vat

    @property
    def vat_amount(self):
        """Gets the vat_amount of this DocumentItem.


        :return: The vat_amount of this DocumentItem.
        :rtype: float
        """
        return self._vat_amount

    @vat_amount.setter
    def vat_amount(self, vat_amount):
        """Sets the vat_amount of this DocumentItem.


        :param vat_amount: The vat_amount of this DocumentItem.
        :type vat_amount: float
        """

        self._vat_amount = vat_amount
