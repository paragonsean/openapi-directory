# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DocumentItemData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_id: int=None, quantity: float=None):
        """DocumentItemData - a model defined in OpenAPI

        :param product_id: The product_id of this DocumentItemData.
        :param quantity: The quantity of this DocumentItemData.
        """
        self.openapi_types = {
            'product_id': int,
            'quantity': float
        }

        self.attribute_map = {
            'product_id': 'product_id',
            'quantity': 'quantity'
        }

        self._product_id = product_id
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentItemData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentItemData of this DocumentItemData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_id(self):
        """Gets the product_id of this DocumentItemData.


        :return: The product_id of this DocumentItemData.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this DocumentItemData.


        :param product_id: The product_id of this DocumentItemData.
        :type product_id: int
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this DocumentItemData.


        :return: The quantity of this DocumentItemData.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this DocumentItemData.


        :param quantity: The quantity of this DocumentItemData.
        :type quantity: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity
