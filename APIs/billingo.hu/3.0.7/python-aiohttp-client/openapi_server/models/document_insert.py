# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.document_insert_items_inner import DocumentInsertItemsInner
from openapi_server.models.document_insert_type import DocumentInsertType
from openapi_server.models.document_language import DocumentLanguage
from openapi_server.models.document_settings import DocumentSettings
from openapi_server.models.payment_method import PaymentMethod
from openapi_server import util


class DocumentInsert(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bank_account_id: int=None, block_id: int=None, comment: str=None, conversion_rate: float=None, currency: Currency=None, due_date: date=None, electronic: bool=False, fulfillment_date: date=None, items: List[DocumentInsertItemsInner]=None, language: DocumentLanguage=None, paid: bool=False, partner_id: int=None, payment_method: PaymentMethod=None, settings: DocumentSettings=None, type: DocumentInsertType=None, vendor_id: str=None):
        """DocumentInsert - a model defined in OpenAPI

        :param bank_account_id: The bank_account_id of this DocumentInsert.
        :param block_id: The block_id of this DocumentInsert.
        :param comment: The comment of this DocumentInsert.
        :param conversion_rate: The conversion_rate of this DocumentInsert.
        :param currency: The currency of this DocumentInsert.
        :param due_date: The due_date of this DocumentInsert.
        :param electronic: The electronic of this DocumentInsert.
        :param fulfillment_date: The fulfillment_date of this DocumentInsert.
        :param items: The items of this DocumentInsert.
        :param language: The language of this DocumentInsert.
        :param paid: The paid of this DocumentInsert.
        :param partner_id: The partner_id of this DocumentInsert.
        :param payment_method: The payment_method of this DocumentInsert.
        :param settings: The settings of this DocumentInsert.
        :param type: The type of this DocumentInsert.
        :param vendor_id: The vendor_id of this DocumentInsert.
        """
        self.openapi_types = {
            'bank_account_id': int,
            'block_id': int,
            'comment': str,
            'conversion_rate': float,
            'currency': Currency,
            'due_date': date,
            'electronic': bool,
            'fulfillment_date': date,
            'items': List[DocumentInsertItemsInner],
            'language': DocumentLanguage,
            'paid': bool,
            'partner_id': int,
            'payment_method': PaymentMethod,
            'settings': DocumentSettings,
            'type': DocumentInsertType,
            'vendor_id': str
        }

        self.attribute_map = {
            'bank_account_id': 'bank_account_id',
            'block_id': 'block_id',
            'comment': 'comment',
            'conversion_rate': 'conversion_rate',
            'currency': 'currency',
            'due_date': 'due_date',
            'electronic': 'electronic',
            'fulfillment_date': 'fulfillment_date',
            'items': 'items',
            'language': 'language',
            'paid': 'paid',
            'partner_id': 'partner_id',
            'payment_method': 'payment_method',
            'settings': 'settings',
            'type': 'type',
            'vendor_id': 'vendor_id'
        }

        self._bank_account_id = bank_account_id
        self._block_id = block_id
        self._comment = comment
        self._conversion_rate = conversion_rate
        self._currency = currency
        self._due_date = due_date
        self._electronic = electronic
        self._fulfillment_date = fulfillment_date
        self._items = items
        self._language = language
        self._paid = paid
        self._partner_id = partner_id
        self._payment_method = payment_method
        self._settings = settings
        self._type = type
        self._vendor_id = vendor_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentInsert':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentInsert of this DocumentInsert.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bank_account_id(self):
        """Gets the bank_account_id of this DocumentInsert.


        :return: The bank_account_id of this DocumentInsert.
        :rtype: int
        """
        return self._bank_account_id

    @bank_account_id.setter
    def bank_account_id(self, bank_account_id):
        """Sets the bank_account_id of this DocumentInsert.


        :param bank_account_id: The bank_account_id of this DocumentInsert.
        :type bank_account_id: int
        """

        self._bank_account_id = bank_account_id

    @property
    def block_id(self):
        """Gets the block_id of this DocumentInsert.


        :return: The block_id of this DocumentInsert.
        :rtype: int
        """
        return self._block_id

    @block_id.setter
    def block_id(self, block_id):
        """Sets the block_id of this DocumentInsert.


        :param block_id: The block_id of this DocumentInsert.
        :type block_id: int
        """
        if block_id is None:
            raise ValueError("Invalid value for `block_id`, must not be `None`")

        self._block_id = block_id

    @property
    def comment(self):
        """Gets the comment of this DocumentInsert.


        :return: The comment of this DocumentInsert.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this DocumentInsert.


        :param comment: The comment of this DocumentInsert.
        :type comment: str
        """

        self._comment = comment

    @property
    def conversion_rate(self):
        """Gets the conversion_rate of this DocumentInsert.


        :return: The conversion_rate of this DocumentInsert.
        :rtype: float
        """
        return self._conversion_rate

    @conversion_rate.setter
    def conversion_rate(self, conversion_rate):
        """Sets the conversion_rate of this DocumentInsert.


        :param conversion_rate: The conversion_rate of this DocumentInsert.
        :type conversion_rate: float
        """

        self._conversion_rate = conversion_rate

    @property
    def currency(self):
        """Gets the currency of this DocumentInsert.


        :return: The currency of this DocumentInsert.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this DocumentInsert.


        :param currency: The currency of this DocumentInsert.
        :type currency: Currency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def due_date(self):
        """Gets the due_date of this DocumentInsert.


        :return: The due_date of this DocumentInsert.
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this DocumentInsert.


        :param due_date: The due_date of this DocumentInsert.
        :type due_date: date
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")

        self._due_date = due_date

    @property
    def electronic(self):
        """Gets the electronic of this DocumentInsert.


        :return: The electronic of this DocumentInsert.
        :rtype: bool
        """
        return self._electronic

    @electronic.setter
    def electronic(self, electronic):
        """Sets the electronic of this DocumentInsert.


        :param electronic: The electronic of this DocumentInsert.
        :type electronic: bool
        """

        self._electronic = electronic

    @property
    def fulfillment_date(self):
        """Gets the fulfillment_date of this DocumentInsert.


        :return: The fulfillment_date of this DocumentInsert.
        :rtype: date
        """
        return self._fulfillment_date

    @fulfillment_date.setter
    def fulfillment_date(self, fulfillment_date):
        """Sets the fulfillment_date of this DocumentInsert.


        :param fulfillment_date: The fulfillment_date of this DocumentInsert.
        :type fulfillment_date: date
        """
        if fulfillment_date is None:
            raise ValueError("Invalid value for `fulfillment_date`, must not be `None`")

        self._fulfillment_date = fulfillment_date

    @property
    def items(self):
        """Gets the items of this DocumentInsert.


        :return: The items of this DocumentInsert.
        :rtype: List[DocumentInsertItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this DocumentInsert.


        :param items: The items of this DocumentInsert.
        :type items: List[DocumentInsertItemsInner]
        """

        self._items = items

    @property
    def language(self):
        """Gets the language of this DocumentInsert.


        :return: The language of this DocumentInsert.
        :rtype: DocumentLanguage
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this DocumentInsert.


        :param language: The language of this DocumentInsert.
        :type language: DocumentLanguage
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def paid(self):
        """Gets the paid of this DocumentInsert.


        :return: The paid of this DocumentInsert.
        :rtype: bool
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this DocumentInsert.


        :param paid: The paid of this DocumentInsert.
        :type paid: bool
        """

        self._paid = paid

    @property
    def partner_id(self):
        """Gets the partner_id of this DocumentInsert.


        :return: The partner_id of this DocumentInsert.
        :rtype: int
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this DocumentInsert.


        :param partner_id: The partner_id of this DocumentInsert.
        :type partner_id: int
        """
        if partner_id is None:
            raise ValueError("Invalid value for `partner_id`, must not be `None`")

        self._partner_id = partner_id

    @property
    def payment_method(self):
        """Gets the payment_method of this DocumentInsert.


        :return: The payment_method of this DocumentInsert.
        :rtype: PaymentMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this DocumentInsert.


        :param payment_method: The payment_method of this DocumentInsert.
        :type payment_method: PaymentMethod
        """
        if payment_method is None:
            raise ValueError("Invalid value for `payment_method`, must not be `None`")

        self._payment_method = payment_method

    @property
    def settings(self):
        """Gets the settings of this DocumentInsert.


        :return: The settings of this DocumentInsert.
        :rtype: DocumentSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this DocumentInsert.


        :param settings: The settings of this DocumentInsert.
        :type settings: DocumentSettings
        """

        self._settings = settings

    @property
    def type(self):
        """Gets the type of this DocumentInsert.


        :return: The type of this DocumentInsert.
        :rtype: DocumentInsertType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DocumentInsert.


        :param type: The type of this DocumentInsert.
        :type type: DocumentInsertType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def vendor_id(self):
        """Gets the vendor_id of this DocumentInsert.


        :return: The vendor_id of this DocumentInsert.
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this DocumentInsert.


        :param vendor_id: The vendor_id of this DocumentInsert.
        :type vendor_id: str
        """

        self._vendor_id = vendor_id
