# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.document_bank_account import DocumentBankAccount
from openapi_server import util


class DocumentOrganization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, bank_account: DocumentBankAccount=None, cash_settled: bool=None, eu_tax_number: str=None, ev_number: str=None, name: str=None, small_taxpayer: bool=None, tax_number: str=None):
        """DocumentOrganization - a model defined in OpenAPI

        :param address: The address of this DocumentOrganization.
        :param bank_account: The bank_account of this DocumentOrganization.
        :param cash_settled: The cash_settled of this DocumentOrganization.
        :param eu_tax_number: The eu_tax_number of this DocumentOrganization.
        :param ev_number: The ev_number of this DocumentOrganization.
        :param name: The name of this DocumentOrganization.
        :param small_taxpayer: The small_taxpayer of this DocumentOrganization.
        :param tax_number: The tax_number of this DocumentOrganization.
        """
        self.openapi_types = {
            'address': Address,
            'bank_account': DocumentBankAccount,
            'cash_settled': bool,
            'eu_tax_number': str,
            'ev_number': str,
            'name': str,
            'small_taxpayer': bool,
            'tax_number': str
        }

        self.attribute_map = {
            'address': 'address',
            'bank_account': 'bank_account',
            'cash_settled': 'cash_settled',
            'eu_tax_number': 'eu_tax_number',
            'ev_number': 'ev_number',
            'name': 'name',
            'small_taxpayer': 'small_taxpayer',
            'tax_number': 'tax_number'
        }

        self._address = address
        self._bank_account = bank_account
        self._cash_settled = cash_settled
        self._eu_tax_number = eu_tax_number
        self._ev_number = ev_number
        self._name = name
        self._small_taxpayer = small_taxpayer
        self._tax_number = tax_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentOrganization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentOrganization of this DocumentOrganization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this DocumentOrganization.


        :return: The address of this DocumentOrganization.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DocumentOrganization.


        :param address: The address of this DocumentOrganization.
        :type address: Address
        """

        self._address = address

    @property
    def bank_account(self):
        """Gets the bank_account of this DocumentOrganization.


        :return: The bank_account of this DocumentOrganization.
        :rtype: DocumentBankAccount
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this DocumentOrganization.


        :param bank_account: The bank_account of this DocumentOrganization.
        :type bank_account: DocumentBankAccount
        """

        self._bank_account = bank_account

    @property
    def cash_settled(self):
        """Gets the cash_settled of this DocumentOrganization.


        :return: The cash_settled of this DocumentOrganization.
        :rtype: bool
        """
        return self._cash_settled

    @cash_settled.setter
    def cash_settled(self, cash_settled):
        """Sets the cash_settled of this DocumentOrganization.


        :param cash_settled: The cash_settled of this DocumentOrganization.
        :type cash_settled: bool
        """

        self._cash_settled = cash_settled

    @property
    def eu_tax_number(self):
        """Gets the eu_tax_number of this DocumentOrganization.


        :return: The eu_tax_number of this DocumentOrganization.
        :rtype: str
        """
        return self._eu_tax_number

    @eu_tax_number.setter
    def eu_tax_number(self, eu_tax_number):
        """Sets the eu_tax_number of this DocumentOrganization.


        :param eu_tax_number: The eu_tax_number of this DocumentOrganization.
        :type eu_tax_number: str
        """

        self._eu_tax_number = eu_tax_number

    @property
    def ev_number(self):
        """Gets the ev_number of this DocumentOrganization.


        :return: The ev_number of this DocumentOrganization.
        :rtype: str
        """
        return self._ev_number

    @ev_number.setter
    def ev_number(self, ev_number):
        """Sets the ev_number of this DocumentOrganization.


        :param ev_number: The ev_number of this DocumentOrganization.
        :type ev_number: str
        """

        self._ev_number = ev_number

    @property
    def name(self):
        """Gets the name of this DocumentOrganization.


        :return: The name of this DocumentOrganization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentOrganization.


        :param name: The name of this DocumentOrganization.
        :type name: str
        """

        self._name = name

    @property
    def small_taxpayer(self):
        """Gets the small_taxpayer of this DocumentOrganization.


        :return: The small_taxpayer of this DocumentOrganization.
        :rtype: bool
        """
        return self._small_taxpayer

    @small_taxpayer.setter
    def small_taxpayer(self, small_taxpayer):
        """Sets the small_taxpayer of this DocumentOrganization.


        :param small_taxpayer: The small_taxpayer of this DocumentOrganization.
        :type small_taxpayer: bool
        """

        self._small_taxpayer = small_taxpayer

    @property
    def tax_number(self):
        """Gets the tax_number of this DocumentOrganization.


        :return: The tax_number of this DocumentOrganization.
        :rtype: str
        """
        return self._tax_number

    @tax_number.setter
    def tax_number(self, tax_number):
        """Sets the tax_number of this DocumentOrganization.


        :param tax_number: The tax_number of this DocumentOrganization.
        :type tax_number: str
        """

        self._tax_number = tax_number
