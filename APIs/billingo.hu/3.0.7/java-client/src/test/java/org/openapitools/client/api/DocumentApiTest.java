/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ClientError;
import org.openapitools.client.model.ClientErrorResponse;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.DocumentInsert;
import org.openapitools.client.model.DocumentList;
import org.openapitools.client.model.DocumentPublicUrl;
import java.io.File;
import java.time.LocalDate;
import org.openapitools.client.model.OnlineSzamlaStatus;
import org.openapitools.client.model.PaymentHistory;
import org.openapitools.client.model.PaymentMethod;
import org.openapitools.client.model.PaymentStatus;
import org.openapitools.client.model.SendDocument;
import org.openapitools.client.model.ServerErrorResponse;
import org.openapitools.client.model.ValidationErrorResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocumentApi
 */
@Disabled
public class DocumentApiTest {

    private final DocumentApi api = new DocumentApi();

    /**
     * Cancel a document
     *
     * Cancel a document. Returns a cancellation document object if the cancellation is succeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelDocumentTest() throws ApiException {
        Integer id = null;
        Document response = api.cancelDocument(id);
        // TODO: test validations
    }

    /**
     * Create a document
     *
     * Create a new document. Returns a document object if the create is succeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDocumentTest() throws ApiException {
        DocumentInsert documentInsert = null;
        Document response = api.createDocument(documentInsert);
        // TODO: test validations
    }

    /**
     * Create a document from proforma.
     *
     * Create a new document from proforma. Returns a document object if the create is succeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDocumentFromProformaTest() throws ApiException {
        Integer id = null;
        Document response = api.createDocumentFromProforma(id);
        // TODO: test validations
    }

    /**
     * Delete all payment history on document
     *
     * Delete all exist payment history on document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePaymentTest() throws ApiException {
        Integer id = null;
        List<PaymentHistory> response = api.deletePayment(id);
        // TODO: test validations
    }

    /**
     * Download a document in PDF format.
     *
     * Download a document. Returns a document in PDF format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadDocumentTest() throws ApiException {
        Integer id = null;
        File response = api.downloadDocument(id);
        // TODO: test validations
    }

    /**
     * Retrieve a document
     *
     * Retrieves the details of an existing document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentTest() throws ApiException {
        Integer id = null;
        Document response = api.getDocument(id);
        // TODO: test validations
    }

    /**
     * Retrieve a document Online Sz√°mla status
     *
     * Retrieves the details of an existing document status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOnlineSzamlaStatusTest() throws ApiException {
        Integer id = null;
        OnlineSzamlaStatus response = api.getOnlineSzamlaStatus(id);
        // TODO: test validations
    }

    /**
     * Retrieve a payment histroy
     *
     * Retrieves the details of payment history an existing document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentTest() throws ApiException {
        Integer id = null;
        List<PaymentHistory> response = api.getPayment(id);
        // TODO: test validations
    }

    /**
     * Retrieve a document download public url.
     *
     * Retrieves public url to download an existing document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicUrlTest() throws ApiException {
        Integer id = null;
        DocumentPublicUrl response = api.getPublicUrl(id);
        // TODO: test validations
    }

    /**
     * List all documents
     *
     * Returns a list of your documents. The documents are returned sorted by creation date, with the most recent documents appearing first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDocumentTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        Integer blockId = null;
        Integer partnerId = null;
        PaymentMethod paymentMethod = null;
        PaymentStatus paymentStatus = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        Integer startNumber = null;
        Integer endNumber = null;
        Integer startYear = null;
        Integer endYear = null;
        DocumentList response = api.listDocument(page, perPage, blockId, partnerId, paymentMethod, paymentStatus, startDate, endDate, startNumber, endNumber, startYear, endYear);
        // TODO: test validations
    }

    /**
     * Send invoice to given email adresses.
     *
     * Returns a list of emails, where the invoice is sent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendDocumentTest() throws ApiException {
        Integer id = null;
        SendDocument sendDocument = null;
        SendDocument response = api.sendDocument(id, sendDocument);
        // TODO: test validations
    }

    /**
     * Update payment history
     *
     * Update payment history an existing document. Returns a payment history object if the update is succeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaymentTest() throws ApiException {
        Integer id = null;
        List<PaymentHistory> paymentHistory = null;
        List<PaymentHistory> response = api.updatePayment(id, paymentHistory);
        // TODO: test validations
    }

}
