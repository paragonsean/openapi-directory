/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.DocumentInsertItemsInner;
import org.openapitools.client.model.DocumentInsertType;
import org.openapitools.client.model.DocumentLanguage;
import org.openapitools.client.model.DocumentSettings;
import org.openapitools.client.model.PaymentMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentInsert
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:20.421806-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentInsert {
  public static final String SERIALIZED_NAME_BANK_ACCOUNT_ID = "bank_account_id";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_ID)
  private Integer bankAccountId;

  public static final String SERIALIZED_NAME_BLOCK_ID = "block_id";
  @SerializedName(SERIALIZED_NAME_BLOCK_ID)
  private Integer blockId;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CONVERSION_RATE = "conversion_rate";
  @SerializedName(SERIALIZED_NAME_CONVERSION_RATE)
  private Float conversionRate;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_DUE_DATE = "due_date";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private LocalDate dueDate;

  public static final String SERIALIZED_NAME_ELECTRONIC = "electronic";
  @SerializedName(SERIALIZED_NAME_ELECTRONIC)
  private Boolean electronic = false;

  public static final String SERIALIZED_NAME_FULFILLMENT_DATE = "fulfillment_date";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_DATE)
  private LocalDate fulfillmentDate;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<DocumentInsertItemsInner> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private DocumentLanguage language;

  public static final String SERIALIZED_NAME_PAID = "paid";
  @SerializedName(SERIALIZED_NAME_PAID)
  private Boolean paid = false;

  public static final String SERIALIZED_NAME_PARTNER_ID = "partner_id";
  @SerializedName(SERIALIZED_NAME_PARTNER_ID)
  private Integer partnerId;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private PaymentMethod paymentMethod;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private DocumentSettings settings;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private DocumentInsertType type;

  public static final String SERIALIZED_NAME_VENDOR_ID = "vendor_id";
  @SerializedName(SERIALIZED_NAME_VENDOR_ID)
  private String vendorId;

  public DocumentInsert() {
  }

  public DocumentInsert bankAccountId(Integer bankAccountId) {
    this.bankAccountId = bankAccountId;
    return this;
  }

  /**
   * Get bankAccountId
   * @return bankAccountId
   */
  @javax.annotation.Nullable
  public Integer getBankAccountId() {
    return bankAccountId;
  }

  public void setBankAccountId(Integer bankAccountId) {
    this.bankAccountId = bankAccountId;
  }


  public DocumentInsert blockId(Integer blockId) {
    this.blockId = blockId;
    return this;
  }

  /**
   * Get blockId
   * @return blockId
   */
  @javax.annotation.Nonnull
  public Integer getBlockId() {
    return blockId;
  }

  public void setBlockId(Integer blockId) {
    this.blockId = blockId;
  }


  public DocumentInsert comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public DocumentInsert conversionRate(Float conversionRate) {
    this.conversionRate = conversionRate;
    return this;
  }

  /**
   * Get conversionRate
   * @return conversionRate
   */
  @javax.annotation.Nullable
  public Float getConversionRate() {
    return conversionRate;
  }

  public void setConversionRate(Float conversionRate) {
    this.conversionRate = conversionRate;
  }


  public DocumentInsert currency(Currency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nonnull
  public Currency getCurrency() {
    return currency;
  }

  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public DocumentInsert dueDate(LocalDate dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Get dueDate
   * @return dueDate
   */
  @javax.annotation.Nonnull
  public LocalDate getDueDate() {
    return dueDate;
  }

  public void setDueDate(LocalDate dueDate) {
    this.dueDate = dueDate;
  }


  public DocumentInsert electronic(Boolean electronic) {
    this.electronic = electronic;
    return this;
  }

  /**
   * Get electronic
   * @return electronic
   */
  @javax.annotation.Nullable
  public Boolean getElectronic() {
    return electronic;
  }

  public void setElectronic(Boolean electronic) {
    this.electronic = electronic;
  }


  public DocumentInsert fulfillmentDate(LocalDate fulfillmentDate) {
    this.fulfillmentDate = fulfillmentDate;
    return this;
  }

  /**
   * Get fulfillmentDate
   * @return fulfillmentDate
   */
  @javax.annotation.Nonnull
  public LocalDate getFulfillmentDate() {
    return fulfillmentDate;
  }

  public void setFulfillmentDate(LocalDate fulfillmentDate) {
    this.fulfillmentDate = fulfillmentDate;
  }


  public DocumentInsert items(List<DocumentInsertItemsInner> items) {
    this.items = items;
    return this;
  }

  public DocumentInsert addItemsItem(DocumentInsertItemsInner itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public List<DocumentInsertItemsInner> getItems() {
    return items;
  }

  public void setItems(List<DocumentInsertItemsInner> items) {
    this.items = items;
  }


  public DocumentInsert language(DocumentLanguage language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nonnull
  public DocumentLanguage getLanguage() {
    return language;
  }

  public void setLanguage(DocumentLanguage language) {
    this.language = language;
  }


  public DocumentInsert paid(Boolean paid) {
    this.paid = paid;
    return this;
  }

  /**
   * Get paid
   * @return paid
   */
  @javax.annotation.Nullable
  public Boolean getPaid() {
    return paid;
  }

  public void setPaid(Boolean paid) {
    this.paid = paid;
  }


  public DocumentInsert partnerId(Integer partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  /**
   * Get partnerId
   * @return partnerId
   */
  @javax.annotation.Nonnull
  public Integer getPartnerId() {
    return partnerId;
  }

  public void setPartnerId(Integer partnerId) {
    this.partnerId = partnerId;
  }


  public DocumentInsert paymentMethod(PaymentMethod paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  /**
   * Get paymentMethod
   * @return paymentMethod
   */
  @javax.annotation.Nonnull
  public PaymentMethod getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(PaymentMethod paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public DocumentInsert settings(DocumentSettings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nullable
  public DocumentSettings getSettings() {
    return settings;
  }

  public void setSettings(DocumentSettings settings) {
    this.settings = settings;
  }


  public DocumentInsert type(DocumentInsertType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public DocumentInsertType getType() {
    return type;
  }

  public void setType(DocumentInsertType type) {
    this.type = type;
  }


  public DocumentInsert vendorId(String vendorId) {
    this.vendorId = vendorId;
    return this;
  }

  /**
   * Get vendorId
   * @return vendorId
   */
  @javax.annotation.Nullable
  public String getVendorId() {
    return vendorId;
  }

  public void setVendorId(String vendorId) {
    this.vendorId = vendorId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentInsert documentInsert = (DocumentInsert) o;
    return Objects.equals(this.bankAccountId, documentInsert.bankAccountId) &&
        Objects.equals(this.blockId, documentInsert.blockId) &&
        Objects.equals(this.comment, documentInsert.comment) &&
        Objects.equals(this.conversionRate, documentInsert.conversionRate) &&
        Objects.equals(this.currency, documentInsert.currency) &&
        Objects.equals(this.dueDate, documentInsert.dueDate) &&
        Objects.equals(this.electronic, documentInsert.electronic) &&
        Objects.equals(this.fulfillmentDate, documentInsert.fulfillmentDate) &&
        Objects.equals(this.items, documentInsert.items) &&
        Objects.equals(this.language, documentInsert.language) &&
        Objects.equals(this.paid, documentInsert.paid) &&
        Objects.equals(this.partnerId, documentInsert.partnerId) &&
        Objects.equals(this.paymentMethod, documentInsert.paymentMethod) &&
        Objects.equals(this.settings, documentInsert.settings) &&
        Objects.equals(this.type, documentInsert.type) &&
        Objects.equals(this.vendorId, documentInsert.vendorId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bankAccountId, blockId, comment, conversionRate, currency, dueDate, electronic, fulfillmentDate, items, language, paid, partnerId, paymentMethod, settings, type, vendorId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentInsert {\n");
    sb.append("    bankAccountId: ").append(toIndentedString(bankAccountId)).append("\n");
    sb.append("    blockId: ").append(toIndentedString(blockId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    conversionRate: ").append(toIndentedString(conversionRate)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    electronic: ").append(toIndentedString(electronic)).append("\n");
    sb.append("    fulfillmentDate: ").append(toIndentedString(fulfillmentDate)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    paid: ").append(toIndentedString(paid)).append("\n");
    sb.append("    partnerId: ").append(toIndentedString(partnerId)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vendorId: ").append(toIndentedString(vendorId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bank_account_id");
    openapiFields.add("block_id");
    openapiFields.add("comment");
    openapiFields.add("conversion_rate");
    openapiFields.add("currency");
    openapiFields.add("due_date");
    openapiFields.add("electronic");
    openapiFields.add("fulfillment_date");
    openapiFields.add("items");
    openapiFields.add("language");
    openapiFields.add("paid");
    openapiFields.add("partner_id");
    openapiFields.add("payment_method");
    openapiFields.add("settings");
    openapiFields.add("type");
    openapiFields.add("vendor_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("block_id");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("due_date");
    openapiRequiredFields.add("fulfillment_date");
    openapiRequiredFields.add("language");
    openapiRequiredFields.add("partner_id");
    openapiRequiredFields.add("payment_method");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentInsert
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentInsert.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentInsert is not found in the empty JSON string", DocumentInsert.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentInsert.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentInsert` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentInsert.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      // validate the required field `currency`
      Currency.validateJsonElement(jsonObj.get("currency"));
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            DocumentInsertItemsInner.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      // validate the required field `language`
      DocumentLanguage.validateJsonElement(jsonObj.get("language"));
      // validate the required field `payment_method`
      PaymentMethod.validateJsonElement(jsonObj.get("payment_method"));
      // validate the optional field `settings`
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        DocumentSettings.validateJsonElement(jsonObj.get("settings"));
      }
      // validate the required field `type`
      DocumentInsertType.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("vendor_id") != null && !jsonObj.get("vendor_id").isJsonNull()) && !jsonObj.get("vendor_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentInsert.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentInsert' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentInsert> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentInsert.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentInsert>() {
           @Override
           public void write(JsonWriter out, DocumentInsert value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentInsert read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentInsert given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentInsert
   * @throws IOException if the JSON string is invalid with respect to DocumentInsert
   */
  public static DocumentInsert fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentInsert.class);
  }

  /**
   * Convert an instance of DocumentInsert to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

