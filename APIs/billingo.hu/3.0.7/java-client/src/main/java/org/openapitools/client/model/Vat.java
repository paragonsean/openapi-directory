/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.7
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets Vat
 */
@JsonAdapter(Vat.Adapter.class)
public enum Vat {
  
  _0_("0%"),
  
  _1_("1%"),
  
  _10_("10%"),
  
  _11_("11%"),
  
  _12_("12%"),
  
  _13_("13%"),
  
  _14_("14%"),
  
  _15_("15%"),
  
  _16_("16%"),
  
  _17_("17%"),
  
  _18_("18%"),
  
  _19_("19%"),
  
  _2_("2%"),
  
  _20_("20%"),
  
  _21_("21%"),
  
  _22_("22%"),
  
  _23_("23%"),
  
  _24_("24%"),
  
  _25_("25%"),
  
  _26_("26%"),
  
  _27_("27%"),
  
  _3_("3%"),
  
  _4_("4%"),
  
  _5_("5%"),
  
  _6_("6%"),
  
  _7_("7%"),
  
  _8_("8%"),
  
  _9_("9%"),
  
  AAM("AAM"),
  
  AM("AM"),
  
  EU("EU"),
  
  EUK("EUK"),
  
  F_AFA("F.AFA"),
  
  FAD("FAD"),
  
  K_AFA("K.AFA"),
  
  MAA("MAA"),
  
  TAM("TAM"),
  
  _KK("ÁKK"),
  
  _THK("ÁTHK");

  private String value;

  Vat(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Vat fromValue(String value) {
    for (Vat b : Vat.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Vat> {
    @Override
    public void write(final JsonWriter jsonWriter, final Vat enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Vat read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Vat.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    Vat.fromValue(value);
  }
}

