/**
 * Auckland Museum API
 * This is technical documentation for the Auckland Museum API 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Sparql service.
* @module api/SparqlApi
* @version 2.0.0
*/
export default class SparqlApi {

    /**
    * Constructs a new SparqlApi. 
    * @alias module:api/SparqlApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSparql operation.
     * @callback module:api/SparqlApi~getSparqlCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Auckland Museum SPARQL endpoint
     * You can execute your [SPARQL](http://www.w3.org/TR/rdf-sparql-query/) queries against this endpoint.  The sparql query should be provided as the value of the request parameter `query`. Set the `Accept` header to `application/sparql-results+xml` to get results in XML. Set it to `application/sparql-results+json` to get results in JSON.   **Note:** This endpoints supports [JSON-P](http://json-p.org/). In order to get a JSON-P response, set the query parameter `callback` to your preferred callback function name. The default function name is `callback()`. When using JSON-P, there is no need to set the `Accept` header because the response will always be in `application/javascript`. 
     * @param {String} query sparql query
     * @param {Object} opts Optional parameters
     * @param {String} [callback = 'callback')] The [JSON-P](http://json-p.org/) callback parameter
     * @param {Boolean} [infer = true)] Whether to get inferred results in the response
     * @param {module:api/SparqlApi~getSparqlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getSparql(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getSparql");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'callback': opts['callback'],
        'infer': opts['infer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/sparql-results+json', 'application/sparql-results+xml', 'application/javascript'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/sparql', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSparql operation.
     * @callback module:api/SparqlApi~postSparqlCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Auckland Museum SPARQL endpoint
     * You can execute your [SPARQL](http://www.w3.org/TR/rdf-sparql-query/) queries against this endpoint. The sparql query should be provided as the value of the request parameter `query`. Set the `Accept` header to `application/sparql-results+xml` to get results in XML. Set it to `application/sparql-results+json` to get results in JSON.  
     * @param {String} query sparql query
     * @param {Object} opts Optional parameters
     * @param {Boolean} [infer = true)] Whether to get inferred results in the response
     * @param {module:api/SparqlApi~postSparqlCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postSparql(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling postSparql");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'query': query,
        'infer': opts['infer']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sparql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
