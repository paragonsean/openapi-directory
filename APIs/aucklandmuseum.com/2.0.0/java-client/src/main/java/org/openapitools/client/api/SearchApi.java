/*
 * Auckland Museum API
 * This is technical documentation for the Auckland Museum API 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getSearch
     * @param index search index name Possible values: * &#x60;collectionsonline&#x60; * &#x60;cenotaph&#x60;  (required)
     * @param operation One of the supported elasticsearch operations like &#x60;_search&#x60; or &#x60;_suggest&#x60; (required)
     * @param q One of the supported elasticsearch query parameter values for key &#x60;q&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchCall(String index, String operation, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{index}/{operation}"
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "operation" + "}", localVarApiClient.escapeString(operation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSearchValidateBeforeCall(String index, String operation, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling getSearch(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling getSearch(Async)");
        }

        return getSearchCall(index, operation, q, _callback);

    }

    /**
     * Perform simple search queries over Auckland Museum Collections and Cenotaph data
     * Use this endpoint to perform simple search queries for finding information and subjects you may be interested in  Searches performed via this endpoint run against an [Elastic](www.elastic.co) server. This endpoint mirrors the Elastic search API documented [here](https://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-search.html)  Use the   - &#x60;collectionsonline&#x60; index to perform searches over other all Collections data   - &#x60;cenotaph&#x60; index to perform searches over Cenotaph data 
     * @param index search index name Possible values: * &#x60;collectionsonline&#x60; * &#x60;cenotaph&#x60;  (required)
     * @param operation One of the supported elasticsearch operations like &#x60;_search&#x60; or &#x60;_suggest&#x60; (required)
     * @param q One of the supported elasticsearch query parameter values for key &#x60;q&#x60; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public void getSearch(String index, String operation, String q) throws ApiException {
        getSearchWithHttpInfo(index, operation, q);
    }

    /**
     * Perform simple search queries over Auckland Museum Collections and Cenotaph data
     * Use this endpoint to perform simple search queries for finding information and subjects you may be interested in  Searches performed via this endpoint run against an [Elastic](www.elastic.co) server. This endpoint mirrors the Elastic search API documented [here](https://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-search.html)  Use the   - &#x60;collectionsonline&#x60; index to perform searches over other all Collections data   - &#x60;cenotaph&#x60; index to perform searches over Cenotaph data 
     * @param index search index name Possible values: * &#x60;collectionsonline&#x60; * &#x60;cenotaph&#x60;  (required)
     * @param operation One of the supported elasticsearch operations like &#x60;_search&#x60; or &#x60;_suggest&#x60; (required)
     * @param q One of the supported elasticsearch query parameter values for key &#x60;q&#x60; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSearchWithHttpInfo(String index, String operation, String q) throws ApiException {
        okhttp3.Call localVarCall = getSearchValidateBeforeCall(index, operation, q, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Perform simple search queries over Auckland Museum Collections and Cenotaph data (asynchronously)
     * Use this endpoint to perform simple search queries for finding information and subjects you may be interested in  Searches performed via this endpoint run against an [Elastic](www.elastic.co) server. This endpoint mirrors the Elastic search API documented [here](https://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-search.html)  Use the   - &#x60;collectionsonline&#x60; index to perform searches over other all Collections data   - &#x60;cenotaph&#x60; index to perform searches over Cenotaph data 
     * @param index search index name Possible values: * &#x60;collectionsonline&#x60; * &#x60;cenotaph&#x60;  (required)
     * @param operation One of the supported elasticsearch operations like &#x60;_search&#x60; or &#x60;_suggest&#x60; (required)
     * @param q One of the supported elasticsearch query parameter values for key &#x60;q&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSearchAsync(String index, String operation, String q, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSearchValidateBeforeCall(index, operation, q, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSearch
     * @param index search index name Possible values: * &#x60;collectionsonline&#x60; * &#x60;cenotaph&#x60;  (required)
     * @param operation One of the supported elasticsearch operations like &#x60;_search&#x60; or &#x60;_suggest&#x60; (required)
     * @param body body (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSearchCall(String index, String operation, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/search/{index}/{operation}"
            .replace("{" + "index" + "}", localVarApiClient.escapeString(index.toString()))
            .replace("{" + "operation" + "}", localVarApiClient.escapeString(operation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSearchValidateBeforeCall(String index, String operation, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling postSearch(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling postSearch(Async)");
        }

        return postSearchCall(index, operation, body, _callback);

    }

    /**
     * Perform complex search queries over Auckland Museum Collections and Cenotaph data
     * Searches performed via this endpoint run against an [Elastic](www.elastic.co) server. This endpoint mirrors the Elastic search API documented [here](https://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-search.html)  Use the   - &#x60;collectionsonline&#x60; index to perform searches over other all Collections data   - &#x60;cenotaph&#x60; index to perform searches over Cenotaph data 
     * @param index search index name Possible values: * &#x60;collectionsonline&#x60; * &#x60;cenotaph&#x60;  (required)
     * @param operation One of the supported elasticsearch operations like &#x60;_search&#x60; or &#x60;_suggest&#x60; (required)
     * @param body body (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public void postSearch(String index, String operation, Object body) throws ApiException {
        postSearchWithHttpInfo(index, operation, body);
    }

    /**
     * Perform complex search queries over Auckland Museum Collections and Cenotaph data
     * Searches performed via this endpoint run against an [Elastic](www.elastic.co) server. This endpoint mirrors the Elastic search API documented [here](https://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-search.html)  Use the   - &#x60;collectionsonline&#x60; index to perform searches over other all Collections data   - &#x60;cenotaph&#x60; index to perform searches over Cenotaph data 
     * @param index search index name Possible values: * &#x60;collectionsonline&#x60; * &#x60;cenotaph&#x60;  (required)
     * @param operation One of the supported elasticsearch operations like &#x60;_search&#x60; or &#x60;_suggest&#x60; (required)
     * @param body body (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postSearchWithHttpInfo(String index, String operation, Object body) throws ApiException {
        okhttp3.Call localVarCall = postSearchValidateBeforeCall(index, operation, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Perform complex search queries over Auckland Museum Collections and Cenotaph data (asynchronously)
     * Searches performed via this endpoint run against an [Elastic](www.elastic.co) server. This endpoint mirrors the Elastic search API documented [here](https://www.elastic.co/guide/en/elasticsearch/reference/1.5/search-search.html)  Use the   - &#x60;collectionsonline&#x60; index to perform searches over other all Collections data   - &#x60;cenotaph&#x60; index to perform searches over Cenotaph data 
     * @param index search index name Possible values: * &#x60;collectionsonline&#x60; * &#x60;cenotaph&#x60;  (required)
     * @param operation One of the supported elasticsearch operations like &#x60;_search&#x60; or &#x60;_suggest&#x60; (required)
     * @param body body (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSearchAsync(String index, String operation, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSearchValidateBeforeCall(index, operation, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
