/*
 * Auckland Museum API
 * This is technical documentation for the Auckland Museum API 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SparqlApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SparqlApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SparqlApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getSparql
     * @param query sparql query (required)
     * @param paramCallback The [JSON-P](http://json-p.org/) callback parameter (optional, default to callback)
     * @param infer Whether to get inferred results in the response (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSparqlCall(String query, String paramCallback, Boolean infer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sparql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (infer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("infer", infer));
        }

        final String[] localVarAccepts = {
            "application/sparql-results+json",
            "application/sparql-results+xml",
            "application/javascript"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSparqlValidateBeforeCall(String query, String paramCallback, Boolean infer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getSparql(Async)");
        }

        return getSparqlCall(query, paramCallback, infer, _callback);

    }

    /**
     * Auckland Museum SPARQL endpoint
     * You can execute your [SPARQL](http://www.w3.org/TR/rdf-sparql-query/) queries against this endpoint.  The sparql query should be provided as the value of the request parameter &#x60;query&#x60;. Set the &#x60;Accept&#x60; header to &#x60;application/sparql-results+xml&#x60; to get results in XML. Set it to &#x60;application/sparql-results+json&#x60; to get results in JSON.   **Note:** This endpoints supports [JSON-P](http://json-p.org/). In order to get a JSON-P response, set the query parameter &#x60;callback&#x60; to your preferred callback function name. The default function name is &#x60;callback()&#x60;. When using JSON-P, there is no need to set the &#x60;Accept&#x60; header because the response will always be in &#x60;application/javascript&#x60;. 
     * @param query sparql query (required)
     * @param paramCallback The [JSON-P](http://json-p.org/) callback parameter (optional, default to callback)
     * @param infer Whether to get inferred results in the response (optional, default to true)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public Object getSparql(String query, String paramCallback, Boolean infer) throws ApiException {
        ApiResponse<Object> localVarResp = getSparqlWithHttpInfo(query, paramCallback, infer);
        return localVarResp.getData();
    }

    /**
     * Auckland Museum SPARQL endpoint
     * You can execute your [SPARQL](http://www.w3.org/TR/rdf-sparql-query/) queries against this endpoint.  The sparql query should be provided as the value of the request parameter &#x60;query&#x60;. Set the &#x60;Accept&#x60; header to &#x60;application/sparql-results+xml&#x60; to get results in XML. Set it to &#x60;application/sparql-results+json&#x60; to get results in JSON.   **Note:** This endpoints supports [JSON-P](http://json-p.org/). In order to get a JSON-P response, set the query parameter &#x60;callback&#x60; to your preferred callback function name. The default function name is &#x60;callback()&#x60;. When using JSON-P, there is no need to set the &#x60;Accept&#x60; header because the response will always be in &#x60;application/javascript&#x60;. 
     * @param query sparql query (required)
     * @param paramCallback The [JSON-P](http://json-p.org/) callback parameter (optional, default to callback)
     * @param infer Whether to get inferred results in the response (optional, default to true)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getSparqlWithHttpInfo(String query, String paramCallback, Boolean infer) throws ApiException {
        okhttp3.Call localVarCall = getSparqlValidateBeforeCall(query, paramCallback, infer, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Auckland Museum SPARQL endpoint (asynchronously)
     * You can execute your [SPARQL](http://www.w3.org/TR/rdf-sparql-query/) queries against this endpoint.  The sparql query should be provided as the value of the request parameter &#x60;query&#x60;. Set the &#x60;Accept&#x60; header to &#x60;application/sparql-results+xml&#x60; to get results in XML. Set it to &#x60;application/sparql-results+json&#x60; to get results in JSON.   **Note:** This endpoints supports [JSON-P](http://json-p.org/). In order to get a JSON-P response, set the query parameter &#x60;callback&#x60; to your preferred callback function name. The default function name is &#x60;callback()&#x60;. When using JSON-P, there is no need to set the &#x60;Accept&#x60; header because the response will always be in &#x60;application/javascript&#x60;. 
     * @param query sparql query (required)
     * @param paramCallback The [JSON-P](http://json-p.org/) callback parameter (optional, default to callback)
     * @param infer Whether to get inferred results in the response (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSparqlAsync(String query, String paramCallback, Boolean infer, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSparqlValidateBeforeCall(query, paramCallback, infer, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSparql
     * @param query sparql query (required)
     * @param infer Whether to get inferred results in the response (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSparqlCall(String query, Boolean infer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sparql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarFormParams.put("query", query);
        }

        if (infer != null) {
            localVarFormParams.put("infer", infer);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSparqlValidateBeforeCall(String query, Boolean infer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling postSparql(Async)");
        }

        return postSparqlCall(query, infer, _callback);

    }

    /**
     * Auckland Museum SPARQL endpoint
     * You can execute your [SPARQL](http://www.w3.org/TR/rdf-sparql-query/) queries against this endpoint. The sparql query should be provided as the value of the request parameter &#x60;query&#x60;. Set the &#x60;Accept&#x60; header to &#x60;application/sparql-results+xml&#x60; to get results in XML. Set it to &#x60;application/sparql-results+json&#x60; to get results in JSON.  
     * @param query sparql query (required)
     * @param infer Whether to get inferred results in the response (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void postSparql(String query, Boolean infer) throws ApiException {
        postSparqlWithHttpInfo(query, infer);
    }

    /**
     * Auckland Museum SPARQL endpoint
     * You can execute your [SPARQL](http://www.w3.org/TR/rdf-sparql-query/) queries against this endpoint. The sparql query should be provided as the value of the request parameter &#x60;query&#x60;. Set the &#x60;Accept&#x60; header to &#x60;application/sparql-results+xml&#x60; to get results in XML. Set it to &#x60;application/sparql-results+json&#x60; to get results in JSON.  
     * @param query sparql query (required)
     * @param infer Whether to get inferred results in the response (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postSparqlWithHttpInfo(String query, Boolean infer) throws ApiException {
        okhttp3.Call localVarCall = postSparqlValidateBeforeCall(query, infer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Auckland Museum SPARQL endpoint (asynchronously)
     * You can execute your [SPARQL](http://www.w3.org/TR/rdf-sparql-query/) queries against this endpoint. The sparql query should be provided as the value of the request parameter &#x60;query&#x60;. Set the &#x60;Accept&#x60; header to &#x60;application/sparql-results+xml&#x60; to get results in XML. Set it to &#x60;application/sparql-results+json&#x60; to get results in JSON.  
     * @param query sparql query (required)
     * @param infer Whether to get inferred results in the response (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSparqlAsync(String query, Boolean infer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSparqlValidateBeforeCall(query, infer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
