# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AreaAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area_type: str=None, description: str=None, name: str=None, rank: int=None):
        """AreaAttributes - a model defined in OpenAPI

        :param area_type: The area_type of this AreaAttributes.
        :param description: The description of this AreaAttributes.
        :param name: The name of this AreaAttributes.
        :param rank: The rank of this AreaAttributes.
        """
        self.openapi_types = {
            'area_type': str,
            'description': str,
            'name': str,
            'rank': int
        }

        self.attribute_map = {
            'area_type': 'areaType',
            'description': 'description',
            'name': 'name',
            'rank': 'rank'
        }

        self._area_type = area_type
        self._description = description
        self._name = name
        self._rank = rank

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AreaAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AreaAttributes of this AreaAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area_type(self):
        """Gets the area_type of this AreaAttributes.


        :return: The area_type of this AreaAttributes.
        :rtype: str
        """
        return self._area_type

    @area_type.setter
    def area_type(self, area_type):
        """Sets the area_type of this AreaAttributes.


        :param area_type: The area_type of this AreaAttributes.
        :type area_type: str
        """
        allowed_values = ["LEVEL", "SECTION", "AREA"]  # noqa: E501
        if area_type not in allowed_values:
            raise ValueError(
                "Invalid value for `area_type` ({0}), must be one of {1}"
                .format(area_type, allowed_values)
            )

        self._area_type = area_type

    @property
    def description(self):
        """Gets the description of this AreaAttributes.


        :return: The description of this AreaAttributes.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AreaAttributes.


        :param description: The description of this AreaAttributes.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this AreaAttributes.


        :return: The name of this AreaAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AreaAttributes.


        :param name: The name of this AreaAttributes.
        :type name: str
        """

        self._name = name

    @property
    def rank(self):
        """Gets the rank of this AreaAttributes.


        :return: The rank of this AreaAttributes.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this AreaAttributes.


        :param rank: The rank of this AreaAttributes.
        :type rank: int
        """

        self._rank = rank
