# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.response_object_list_area_simple_links import ResponseObjectListAreaSimpleLinks
from openapi_server.models.response_object_list_attribute_ref_simple_links import ResponseObjectListAttributeRefSimpleLinks
from openapi_server.models.response_object_list_hold_ref_simple_links import ResponseObjectListHoldRefSimpleLinks
from openapi_server.models.response_object_list_password_simple_links import ResponseObjectListPasswordSimpleLinks
from openapi_server.models.response_object_list_price_zone_simple_links import ResponseObjectListPriceZoneSimpleLinks
from openapi_server import util


class OfferingResponseEmbeddedData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, areas: ResponseObjectListAreaSimpleLinks=None, attributes_refs: ResponseObjectListAttributeRefSimpleLinks=None, holds: ResponseObjectListHoldRefSimpleLinks=None, passwords: ResponseObjectListPasswordSimpleLinks=None, price_zones: ResponseObjectListPriceZoneSimpleLinks=None):
        """OfferingResponseEmbeddedData - a model defined in OpenAPI

        :param areas: The areas of this OfferingResponseEmbeddedData.
        :param attributes_refs: The attributes_refs of this OfferingResponseEmbeddedData.
        :param holds: The holds of this OfferingResponseEmbeddedData.
        :param passwords: The passwords of this OfferingResponseEmbeddedData.
        :param price_zones: The price_zones of this OfferingResponseEmbeddedData.
        """
        self.openapi_types = {
            'areas': ResponseObjectListAreaSimpleLinks,
            'attributes_refs': ResponseObjectListAttributeRefSimpleLinks,
            'holds': ResponseObjectListHoldRefSimpleLinks,
            'passwords': ResponseObjectListPasswordSimpleLinks,
            'price_zones': ResponseObjectListPriceZoneSimpleLinks
        }

        self.attribute_map = {
            'areas': 'areas',
            'attributes_refs': 'attributesRefs',
            'holds': 'holds',
            'passwords': 'passwords',
            'price_zones': 'priceZones'
        }

        self._areas = areas
        self._attributes_refs = attributes_refs
        self._holds = holds
        self._passwords = passwords
        self._price_zones = price_zones

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OfferingResponseEmbeddedData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OfferingResponseEmbeddedData of this OfferingResponseEmbeddedData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def areas(self):
        """Gets the areas of this OfferingResponseEmbeddedData.


        :return: The areas of this OfferingResponseEmbeddedData.
        :rtype: ResponseObjectListAreaSimpleLinks
        """
        return self._areas

    @areas.setter
    def areas(self, areas):
        """Sets the areas of this OfferingResponseEmbeddedData.


        :param areas: The areas of this OfferingResponseEmbeddedData.
        :type areas: ResponseObjectListAreaSimpleLinks
        """

        self._areas = areas

    @property
    def attributes_refs(self):
        """Gets the attributes_refs of this OfferingResponseEmbeddedData.


        :return: The attributes_refs of this OfferingResponseEmbeddedData.
        :rtype: ResponseObjectListAttributeRefSimpleLinks
        """
        return self._attributes_refs

    @attributes_refs.setter
    def attributes_refs(self, attributes_refs):
        """Sets the attributes_refs of this OfferingResponseEmbeddedData.


        :param attributes_refs: The attributes_refs of this OfferingResponseEmbeddedData.
        :type attributes_refs: ResponseObjectListAttributeRefSimpleLinks
        """

        self._attributes_refs = attributes_refs

    @property
    def holds(self):
        """Gets the holds of this OfferingResponseEmbeddedData.


        :return: The holds of this OfferingResponseEmbeddedData.
        :rtype: ResponseObjectListHoldRefSimpleLinks
        """
        return self._holds

    @holds.setter
    def holds(self, holds):
        """Sets the holds of this OfferingResponseEmbeddedData.


        :param holds: The holds of this OfferingResponseEmbeddedData.
        :type holds: ResponseObjectListHoldRefSimpleLinks
        """

        self._holds = holds

    @property
    def passwords(self):
        """Gets the passwords of this OfferingResponseEmbeddedData.


        :return: The passwords of this OfferingResponseEmbeddedData.
        :rtype: ResponseObjectListPasswordSimpleLinks
        """
        return self._passwords

    @passwords.setter
    def passwords(self, passwords):
        """Sets the passwords of this OfferingResponseEmbeddedData.


        :param passwords: The passwords of this OfferingResponseEmbeddedData.
        :type passwords: ResponseObjectListPasswordSimpleLinks
        """

        self._passwords = passwords

    @property
    def price_zones(self):
        """Gets the price_zones of this OfferingResponseEmbeddedData.


        :return: The price_zones of this OfferingResponseEmbeddedData.
        :rtype: ResponseObjectListPriceZoneSimpleLinks
        """
        return self._price_zones

    @price_zones.setter
    def price_zones(self, price_zones):
        """Sets the price_zones of this OfferingResponseEmbeddedData.


        :param price_zones: The price_zones of this OfferingResponseEmbeddedData.
        :type price_zones: ResponseObjectListPriceZoneSimpleLinks
        """

        self._price_zones = price_zones
