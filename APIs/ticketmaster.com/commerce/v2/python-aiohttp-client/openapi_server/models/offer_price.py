# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.offer_price_fee import OfferPriceFee
from openapi_server.models.offer_price_tax import OfferPriceTax
from openapi_server import util


class OfferPrice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fees: List[OfferPriceFee]=None, price_zone: str=None, taxes: List[OfferPriceTax]=None, total: str=None, value: str=None):
        """OfferPrice - a model defined in OpenAPI

        :param fees: The fees of this OfferPrice.
        :param price_zone: The price_zone of this OfferPrice.
        :param taxes: The taxes of this OfferPrice.
        :param total: The total of this OfferPrice.
        :param value: The value of this OfferPrice.
        """
        self.openapi_types = {
            'fees': List[OfferPriceFee],
            'price_zone': str,
            'taxes': List[OfferPriceTax],
            'total': str,
            'value': str
        }

        self.attribute_map = {
            'fees': 'fees',
            'price_zone': 'priceZone',
            'taxes': 'taxes',
            'total': 'total',
            'value': 'value'
        }

        self._fees = fees
        self._price_zone = price_zone
        self._taxes = taxes
        self._total = total
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OfferPrice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OfferPrice of this OfferPrice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fees(self):
        """Gets the fees of this OfferPrice.


        :return: The fees of this OfferPrice.
        :rtype: List[OfferPriceFee]
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this OfferPrice.


        :param fees: The fees of this OfferPrice.
        :type fees: List[OfferPriceFee]
        """

        self._fees = fees

    @property
    def price_zone(self):
        """Gets the price_zone of this OfferPrice.


        :return: The price_zone of this OfferPrice.
        :rtype: str
        """
        return self._price_zone

    @price_zone.setter
    def price_zone(self, price_zone):
        """Sets the price_zone of this OfferPrice.


        :param price_zone: The price_zone of this OfferPrice.
        :type price_zone: str
        """

        self._price_zone = price_zone

    @property
    def taxes(self):
        """Gets the taxes of this OfferPrice.


        :return: The taxes of this OfferPrice.
        :rtype: List[OfferPriceTax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this OfferPrice.


        :param taxes: The taxes of this OfferPrice.
        :type taxes: List[OfferPriceTax]
        """

        self._taxes = taxes

    @property
    def total(self):
        """Gets the total of this OfferPrice.


        :return: The total of this OfferPrice.
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OfferPrice.


        :param total: The total of this OfferPrice.
        :type total: str
        """

        self._total = total

    @property
    def value(self):
        """Gets the value of this OfferPrice.


        :return: The value of this OfferPrice.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this OfferPrice.


        :param value: The value of this OfferPrice.
        :type value: str
        """

        self._value = value
