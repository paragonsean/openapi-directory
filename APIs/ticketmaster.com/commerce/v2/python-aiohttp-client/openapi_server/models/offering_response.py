# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.limit import Limit
from openapi_server.models.offer import Offer
from openapi_server.models.offering_response_embedded_data import OfferingResponseEmbeddedData
from openapi_server.models.offering_response_metadata import OfferingResponseMetadata
from openapi_server.models.response_object_list_offered_price_simple_links import ResponseObjectListOfferedPriceSimpleLinks
from openapi_server import util


class OfferingResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embedded: OfferingResponseEmbeddedData=None, debug: List[str]=None, limits: Limit=None, metadata: OfferingResponseMetadata=None, offers: List[Offer]=None, prices: ResponseObjectListOfferedPriceSimpleLinks=None):
        """OfferingResponse - a model defined in OpenAPI

        :param embedded: The embedded of this OfferingResponse.
        :param debug: The debug of this OfferingResponse.
        :param limits: The limits of this OfferingResponse.
        :param metadata: The metadata of this OfferingResponse.
        :param offers: The offers of this OfferingResponse.
        :param prices: The prices of this OfferingResponse.
        """
        self.openapi_types = {
            'embedded': OfferingResponseEmbeddedData,
            'debug': List[str],
            'limits': Limit,
            'metadata': OfferingResponseMetadata,
            'offers': List[Offer],
            'prices': ResponseObjectListOfferedPriceSimpleLinks
        }

        self.attribute_map = {
            'embedded': '_embedded',
            'debug': 'debug',
            'limits': 'limits',
            'metadata': 'metadata',
            'offers': 'offers',
            'prices': 'prices'
        }

        self._embedded = embedded
        self._debug = debug
        self._limits = limits
        self._metadata = metadata
        self._offers = offers
        self._prices = prices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OfferingResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OfferingResponse of this OfferingResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embedded(self):
        """Gets the embedded of this OfferingResponse.


        :return: The embedded of this OfferingResponse.
        :rtype: OfferingResponseEmbeddedData
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this OfferingResponse.


        :param embedded: The embedded of this OfferingResponse.
        :type embedded: OfferingResponseEmbeddedData
        """

        self._embedded = embedded

    @property
    def debug(self):
        """Gets the debug of this OfferingResponse.


        :return: The debug of this OfferingResponse.
        :rtype: List[str]
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """Sets the debug of this OfferingResponse.


        :param debug: The debug of this OfferingResponse.
        :type debug: List[str]
        """

        self._debug = debug

    @property
    def limits(self):
        """Gets the limits of this OfferingResponse.


        :return: The limits of this OfferingResponse.
        :rtype: Limit
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this OfferingResponse.


        :param limits: The limits of this OfferingResponse.
        :type limits: Limit
        """

        self._limits = limits

    @property
    def metadata(self):
        """Gets the metadata of this OfferingResponse.


        :return: The metadata of this OfferingResponse.
        :rtype: OfferingResponseMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OfferingResponse.


        :param metadata: The metadata of this OfferingResponse.
        :type metadata: OfferingResponseMetadata
        """

        self._metadata = metadata

    @property
    def offers(self):
        """Gets the offers of this OfferingResponse.


        :return: The offers of this OfferingResponse.
        :rtype: List[Offer]
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this OfferingResponse.


        :param offers: The offers of this OfferingResponse.
        :type offers: List[Offer]
        """

        self._offers = offers

    @property
    def prices(self):
        """Gets the prices of this OfferingResponse.


        :return: The prices of this OfferingResponse.
        :rtype: ResponseObjectListOfferedPriceSimpleLinks
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this OfferingResponse.


        :param prices: The prices of this OfferingResponse.
        :type prices: ResponseObjectListOfferedPriceSimpleLinks
        """

        self._prices = prices
