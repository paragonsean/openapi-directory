# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.prompt import Prompt
from openapi_server import util


class PasswordAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end: datetime=None, exclusive: bool=False, link: str=None, link_label: str=None, name: str=None, prompts: List[Prompt]=None, start: datetime=None, text: str=None, text_label: str=None, type: str=None):
        """PasswordAttributes - a model defined in OpenAPI

        :param end: The end of this PasswordAttributes.
        :param exclusive: The exclusive of this PasswordAttributes.
        :param link: The link of this PasswordAttributes.
        :param link_label: The link_label of this PasswordAttributes.
        :param name: The name of this PasswordAttributes.
        :param prompts: The prompts of this PasswordAttributes.
        :param start: The start of this PasswordAttributes.
        :param text: The text of this PasswordAttributes.
        :param text_label: The text_label of this PasswordAttributes.
        :param type: The type of this PasswordAttributes.
        """
        self.openapi_types = {
            'end': datetime,
            'exclusive': bool,
            'link': str,
            'link_label': str,
            'name': str,
            'prompts': List[Prompt],
            'start': datetime,
            'text': str,
            'text_label': str,
            'type': str
        }

        self.attribute_map = {
            'end': 'end',
            'exclusive': 'exclusive',
            'link': 'link',
            'link_label': 'linkLabel',
            'name': 'name',
            'prompts': 'prompts',
            'start': 'start',
            'text': 'text',
            'text_label': 'textLabel',
            'type': 'type'
        }

        self._end = end
        self._exclusive = exclusive
        self._link = link
        self._link_label = link_label
        self._name = name
        self._prompts = prompts
        self._start = start
        self._text = text
        self._text_label = text_label
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PasswordAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PasswordAttributes of this PasswordAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end(self):
        """Gets the end of this PasswordAttributes.


        :return: The end of this PasswordAttributes.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this PasswordAttributes.


        :param end: The end of this PasswordAttributes.
        :type end: datetime
        """

        self._end = end

    @property
    def exclusive(self):
        """Gets the exclusive of this PasswordAttributes.


        :return: The exclusive of this PasswordAttributes.
        :rtype: bool
        """
        return self._exclusive

    @exclusive.setter
    def exclusive(self, exclusive):
        """Sets the exclusive of this PasswordAttributes.


        :param exclusive: The exclusive of this PasswordAttributes.
        :type exclusive: bool
        """

        self._exclusive = exclusive

    @property
    def link(self):
        """Gets the link of this PasswordAttributes.


        :return: The link of this PasswordAttributes.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this PasswordAttributes.


        :param link: The link of this PasswordAttributes.
        :type link: str
        """

        self._link = link

    @property
    def link_label(self):
        """Gets the link_label of this PasswordAttributes.


        :return: The link_label of this PasswordAttributes.
        :rtype: str
        """
        return self._link_label

    @link_label.setter
    def link_label(self, link_label):
        """Sets the link_label of this PasswordAttributes.


        :param link_label: The link_label of this PasswordAttributes.
        :type link_label: str
        """

        self._link_label = link_label

    @property
    def name(self):
        """Gets the name of this PasswordAttributes.


        :return: The name of this PasswordAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PasswordAttributes.


        :param name: The name of this PasswordAttributes.
        :type name: str
        """

        self._name = name

    @property
    def prompts(self):
        """Gets the prompts of this PasswordAttributes.


        :return: The prompts of this PasswordAttributes.
        :rtype: List[Prompt]
        """
        return self._prompts

    @prompts.setter
    def prompts(self, prompts):
        """Sets the prompts of this PasswordAttributes.


        :param prompts: The prompts of this PasswordAttributes.
        :type prompts: List[Prompt]
        """

        self._prompts = prompts

    @property
    def start(self):
        """Gets the start of this PasswordAttributes.


        :return: The start of this PasswordAttributes.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this PasswordAttributes.


        :param start: The start of this PasswordAttributes.
        :type start: datetime
        """

        self._start = start

    @property
    def text(self):
        """Gets the text of this PasswordAttributes.


        :return: The text of this PasswordAttributes.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PasswordAttributes.


        :param text: The text of this PasswordAttributes.
        :type text: str
        """

        self._text = text

    @property
    def text_label(self):
        """Gets the text_label of this PasswordAttributes.


        :return: The text_label of this PasswordAttributes.
        :rtype: str
        """
        return self._text_label

    @text_label.setter
    def text_label(self, text_label):
        """Sets the text_label of this PasswordAttributes.


        :param text_label: The text_label of this PasswordAttributes.
        :type text_label: str
        """

        self._text_label = text_label

    @property
    def type(self):
        """Gets the type of this PasswordAttributes.


        :return: The type of this PasswordAttributes.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PasswordAttributes.


        :param type: The type of this PasswordAttributes.
        :type type: str
        """

        self._type = type
