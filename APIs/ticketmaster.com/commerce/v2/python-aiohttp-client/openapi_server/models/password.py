# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.password_attributes import PasswordAttributes
from openapi_server.models.password_metadata import PasswordMetadata
from openapi_server.models.password_relationships import PasswordRelationships
from openapi_server.models.simple_links import SimpleLinks
from openapi_server import util


class Password(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: SimpleLinks=None, attributes: PasswordAttributes=None, id: str=None, metadata: PasswordMetadata=None, relationships: PasswordRelationships=None, type: str=None):
        """Password - a model defined in OpenAPI

        :param links: The links of this Password.
        :param attributes: The attributes of this Password.
        :param id: The id of this Password.
        :param metadata: The metadata of this Password.
        :param relationships: The relationships of this Password.
        :param type: The type of this Password.
        """
        self.openapi_types = {
            'links': SimpleLinks,
            'attributes': PasswordAttributes,
            'id': str,
            'metadata': PasswordMetadata,
            'relationships': PasswordRelationships,
            'type': str
        }

        self.attribute_map = {
            'links': '_links',
            'attributes': 'attributes',
            'id': 'id',
            'metadata': 'metadata',
            'relationships': 'relationships',
            'type': 'type'
        }

        self._links = links
        self._attributes = attributes
        self._id = id
        self._metadata = metadata
        self._relationships = relationships
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Password':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Password of this Password.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this Password.


        :return: The links of this Password.
        :rtype: SimpleLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Password.


        :param links: The links of this Password.
        :type links: SimpleLinks
        """

        self._links = links

    @property
    def attributes(self):
        """Gets the attributes of this Password.


        :return: The attributes of this Password.
        :rtype: PasswordAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Password.


        :param attributes: The attributes of this Password.
        :type attributes: PasswordAttributes
        """

        self._attributes = attributes

    @property
    def id(self):
        """Gets the id of this Password.


        :return: The id of this Password.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Password.


        :param id: The id of this Password.
        :type id: str
        """

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this Password.


        :return: The metadata of this Password.
        :rtype: PasswordMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Password.


        :param metadata: The metadata of this Password.
        :type metadata: PasswordMetadata
        """

        self._metadata = metadata

    @property
    def relationships(self):
        """Gets the relationships of this Password.


        :return: The relationships of this Password.
        :rtype: PasswordRelationships
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """Sets the relationships of this Password.


        :param relationships: The relationships of this Password.
        :type relationships: PasswordRelationships
        """

        self._relationships = relationships

    @property
    def type(self):
        """Gets the type of this Password.


        :return: The type of this Password.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Password.


        :param type: The type of this Password.
        :type type: str
        """

        self._type = type
