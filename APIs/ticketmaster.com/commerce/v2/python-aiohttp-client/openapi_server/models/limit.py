# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Limit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max: int=None, max_accessible_seats: int=None, max_companion_seats_per_accessible_seat: int=None, min: int=None, multiples: int=None, sellable_qty: str=None):
        """Limit - a model defined in OpenAPI

        :param max: The max of this Limit.
        :param max_accessible_seats: The max_accessible_seats of this Limit.
        :param max_companion_seats_per_accessible_seat: The max_companion_seats_per_accessible_seat of this Limit.
        :param min: The min of this Limit.
        :param multiples: The multiples of this Limit.
        :param sellable_qty: The sellable_qty of this Limit.
        """
        self.openapi_types = {
            'max': int,
            'max_accessible_seats': int,
            'max_companion_seats_per_accessible_seat': int,
            'min': int,
            'multiples': int,
            'sellable_qty': str
        }

        self.attribute_map = {
            'max': 'max',
            'max_accessible_seats': 'maxAccessibleSeats',
            'max_companion_seats_per_accessible_seat': 'maxCompanionSeatsPerAccessibleSeat',
            'min': 'min',
            'multiples': 'multiples',
            'sellable_qty': 'sellableQty'
        }

        self._max = max
        self._max_accessible_seats = max_accessible_seats
        self._max_companion_seats_per_accessible_seat = max_companion_seats_per_accessible_seat
        self._min = min
        self._multiples = multiples
        self._sellable_qty = sellable_qty

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Limit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Limit of this Limit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max(self):
        """Gets the max of this Limit.


        :return: The max of this Limit.
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this Limit.


        :param max: The max of this Limit.
        :type max: int
        """

        self._max = max

    @property
    def max_accessible_seats(self):
        """Gets the max_accessible_seats of this Limit.


        :return: The max_accessible_seats of this Limit.
        :rtype: int
        """
        return self._max_accessible_seats

    @max_accessible_seats.setter
    def max_accessible_seats(self, max_accessible_seats):
        """Sets the max_accessible_seats of this Limit.


        :param max_accessible_seats: The max_accessible_seats of this Limit.
        :type max_accessible_seats: int
        """

        self._max_accessible_seats = max_accessible_seats

    @property
    def max_companion_seats_per_accessible_seat(self):
        """Gets the max_companion_seats_per_accessible_seat of this Limit.


        :return: The max_companion_seats_per_accessible_seat of this Limit.
        :rtype: int
        """
        return self._max_companion_seats_per_accessible_seat

    @max_companion_seats_per_accessible_seat.setter
    def max_companion_seats_per_accessible_seat(self, max_companion_seats_per_accessible_seat):
        """Sets the max_companion_seats_per_accessible_seat of this Limit.


        :param max_companion_seats_per_accessible_seat: The max_companion_seats_per_accessible_seat of this Limit.
        :type max_companion_seats_per_accessible_seat: int
        """

        self._max_companion_seats_per_accessible_seat = max_companion_seats_per_accessible_seat

    @property
    def min(self):
        """Gets the min of this Limit.


        :return: The min of this Limit.
        :rtype: int
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this Limit.


        :param min: The min of this Limit.
        :type min: int
        """

        self._min = min

    @property
    def multiples(self):
        """Gets the multiples of this Limit.


        :return: The multiples of this Limit.
        :rtype: int
        """
        return self._multiples

    @multiples.setter
    def multiples(self, multiples):
        """Sets the multiples of this Limit.


        :param multiples: The multiples of this Limit.
        :type multiples: int
        """

        self._multiples = multiples

    @property
    def sellable_qty(self):
        """Gets the sellable_qty of this Limit.


        :return: The sellable_qty of this Limit.
        :rtype: str
        """
        return self._sellable_qty

    @sellable_qty.setter
    def sellable_qty(self, sellable_qty):
        """Sets the sellable_qty of this Limit.


        :param sellable_qty: The sellable_qty of this Limit.
        :type sellable_qty: str
        """

        self._sellable_qty = sellable_qty
