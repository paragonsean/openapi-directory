/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CommerceApi);
  }
}(this, function(expect, CommerceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CommerceApi.Limit();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Limit', function() {
    it('should create an instance of Limit', function() {
      // uncomment below and update the code to test Limit
      //var instance = new CommerceApi.Limit();
      //expect(instance).to.be.a(CommerceApi.Limit);
    });

    it('should have the property max (base name: "max")', function() {
      // uncomment below and update the code to test the property max
      //var instance = new CommerceApi.Limit();
      //expect(instance).to.be();
    });

    it('should have the property maxAccessibleSeats (base name: "maxAccessibleSeats")', function() {
      // uncomment below and update the code to test the property maxAccessibleSeats
      //var instance = new CommerceApi.Limit();
      //expect(instance).to.be();
    });

    it('should have the property maxCompanionSeatsPerAccessibleSeat (base name: "maxCompanionSeatsPerAccessibleSeat")', function() {
      // uncomment below and update the code to test the property maxCompanionSeatsPerAccessibleSeat
      //var instance = new CommerceApi.Limit();
      //expect(instance).to.be();
    });

    it('should have the property min (base name: "min")', function() {
      // uncomment below and update the code to test the property min
      //var instance = new CommerceApi.Limit();
      //expect(instance).to.be();
    });

    it('should have the property multiples (base name: "multiples")', function() {
      // uncomment below and update the code to test the property multiples
      //var instance = new CommerceApi.Limit();
      //expect(instance).to.be();
    });

    it('should have the property sellableQty (base name: "sellableQty")', function() {
      // uncomment below and update the code to test the property sellableQty
      //var instance = new CommerceApi.Limit();
      //expect(instance).to.be();
    });

  });

}));
