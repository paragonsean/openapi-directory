/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CommerceApi);
  }
}(this, function(expect, CommerceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CommerceApi.OfferRelationships();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OfferRelationships', function() {
    it('should create an instance of OfferRelationships', function() {
      // uncomment below and update the code to test OfferRelationships
      //var instance = new CommerceApi.OfferRelationships();
      //expect(instance).to.be.a(CommerceApi.OfferRelationships);
    });

    it('should have the property areas (base name: "areas")', function() {
      // uncomment below and update the code to test the property areas
      //var instance = new CommerceApi.OfferRelationships();
      //expect(instance).to.be();
    });

    it('should have the property offerSets (base name: "offerSets")', function() {
      // uncomment below and update the code to test the property offerSets
      //var instance = new CommerceApi.OfferRelationships();
      //expect(instance).to.be();
    });

    it('should have the property passwords (base name: "passwords")', function() {
      // uncomment below and update the code to test the property passwords
      //var instance = new CommerceApi.OfferRelationships();
      //expect(instance).to.be();
    });

    it('should have the property priceZones (base name: "priceZones")', function() {
      // uncomment below and update the code to test the property priceZones
      //var instance = new CommerceApi.OfferRelationships();
      //expect(instance).to.be();
    });

    it('should have the property products (base name: "products")', function() {
      // uncomment below and update the code to test the property products
      //var instance = new CommerceApi.OfferRelationships();
      //expect(instance).to.be();
    });

  });

}));
