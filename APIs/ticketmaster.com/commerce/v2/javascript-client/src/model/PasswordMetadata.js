/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PasswordMetadata model module.
 * @module model/PasswordMetadata
 * @version v2
 */
class PasswordMetadata {
    /**
     * Constructs a new <code>PasswordMetadata</code>.
     * @alias module:model/PasswordMetadata
     */
    constructor() { 
        
        PasswordMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PasswordMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PasswordMetadata} obj Optional instance to populate.
     * @return {module:model/PasswordMetadata} The populated <code>PasswordMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PasswordMetadata();

            if (data.hasOwnProperty('offerIds')) {
                obj['offerIds'] = ApiClient.convertToType(data['offerIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PasswordMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PasswordMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['offerIds'])) {
            throw new Error("Expected the field `offerIds` to be an array in the JSON data but got " + data['offerIds']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} offerIds
 */
PasswordMetadata.prototype['offerIds'] = undefined;






export default PasswordMetadata;

