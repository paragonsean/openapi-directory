/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OfferingResponse from '../model/OfferingResponse';

/**
* Default service.
* @module api/DefaultApi
* @version v2
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getEventOffers operation.
     * @callback module:api/DefaultApi~getEventOffersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OfferingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Event Offers
     * Returns Event Offers.
     * @param {String} eventId Event Identifier
     * @param {Object} opts Optional parameters
     * @param {String} [X_SSL_CERT_UID] API Key for external API developer
     * @param {String} [X_TM_ACCESS_TOKEN] Access token for
     * @param {String} [accessToken] Query Param Access Token
     * @param {String} [apiKey] Query Param API Key for external API developer
     * @param {String} [body] displayId to un-hide protected offers
     * @param {module:api/DefaultApi~getEventOffersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OfferingResponse}
     */
    getEventOffers(eventId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getEventOffers");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
        'access_token': opts['accessToken'],
        'api-key': opts['apiKey']
      };
      let headerParams = {
        'X-SSL-CERT-UID': opts['X_SSL_CERT_UID'],
        'X-TM-ACCESS-TOKEN': opts['X_TM_ACCESS_TOKEN']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = OfferingResponse;
      return this.apiClient.callApi(
        '/commerce/v2/events/{eventId}/offers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
