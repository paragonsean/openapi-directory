/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs – These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Area from './model/Area';
import AreaAttributes from './model/AreaAttributes';
import AreaRelationships from './model/AreaRelationships';
import AttributeRef from './model/AttributeRef';
import AttributeRefAttributes from './model/AttributeRefAttributes';
import EventMappingView from './model/EventMappingView';
import HoldRef from './model/HoldRef';
import HrefLinkValue from './model/HrefLinkValue';
import Limit from './model/Limit';
import Offer from './model/Offer';
import OfferAttributes from './model/OfferAttributes';
import OfferDetails from './model/OfferDetails';
import OfferPrice from './model/OfferPrice';
import OfferPriceFee from './model/OfferPriceFee';
import OfferPriceTax from './model/OfferPriceTax';
import OfferRelationships from './model/OfferRelationships';
import OfferedPrice from './model/OfferedPrice';
import OfferedPriceAttributes from './model/OfferedPriceAttributes';
import OfferedPriceRelationships from './model/OfferedPriceRelationships';
import OfferingResponse from './model/OfferingResponse';
import OfferingResponseEmbeddedData from './model/OfferingResponseEmbeddedData';
import OfferingResponseMetadata from './model/OfferingResponseMetadata';
import Password from './model/Password';
import PasswordAttributes from './model/PasswordAttributes';
import PasswordMetadata from './model/PasswordMetadata';
import PasswordRelationships from './model/PasswordRelationships';
import PriceZone from './model/PriceZone';
import PriceZoneAttributes from './model/PriceZoneAttributes';
import PriceZoneRelationships from './model/PriceZoneRelationships';
import Prompt from './model/Prompt';
import ResponseObjectListAreaSimpleLinks from './model/ResponseObjectListAreaSimpleLinks';
import ResponseObjectListAttributeRefSimpleLinks from './model/ResponseObjectListAttributeRefSimpleLinks';
import ResponseObjectListHoldRefSimpleLinks from './model/ResponseObjectListHoldRefSimpleLinks';
import ResponseObjectListOfferedPriceSimpleLinks from './model/ResponseObjectListOfferedPriceSimpleLinks';
import ResponseObjectListPasswordSimpleLinks from './model/ResponseObjectListPasswordSimpleLinks';
import ResponseObjectListPriceZoneSimpleLinks from './model/ResponseObjectListPriceZoneSimpleLinks';
import ResponseObjectRef from './model/ResponseObjectRef';
import ResponseObjectRefList from './model/ResponseObjectRefList';
import ResponseObjectRefListSimpleLinks from './model/ResponseObjectRefListSimpleLinks';
import SimpleLinks from './model/SimpleLinks';
import Source from './model/Source';
import DefaultApi from './api/DefaultApi';


/**
* Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs – These APIs require approved access from Ticketmaster..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var CommerceApi = require('index'); // See note below*.
* var xxxSvc = new CommerceApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new CommerceApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new CommerceApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new CommerceApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v2
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Area model constructor.
     * @property {module:model/Area}
     */
    Area,

    /**
     * The AreaAttributes model constructor.
     * @property {module:model/AreaAttributes}
     */
    AreaAttributes,

    /**
     * The AreaRelationships model constructor.
     * @property {module:model/AreaRelationships}
     */
    AreaRelationships,

    /**
     * The AttributeRef model constructor.
     * @property {module:model/AttributeRef}
     */
    AttributeRef,

    /**
     * The AttributeRefAttributes model constructor.
     * @property {module:model/AttributeRefAttributes}
     */
    AttributeRefAttributes,

    /**
     * The EventMappingView model constructor.
     * @property {module:model/EventMappingView}
     */
    EventMappingView,

    /**
     * The HoldRef model constructor.
     * @property {module:model/HoldRef}
     */
    HoldRef,

    /**
     * The HrefLinkValue model constructor.
     * @property {module:model/HrefLinkValue}
     */
    HrefLinkValue,

    /**
     * The Limit model constructor.
     * @property {module:model/Limit}
     */
    Limit,

    /**
     * The Offer model constructor.
     * @property {module:model/Offer}
     */
    Offer,

    /**
     * The OfferAttributes model constructor.
     * @property {module:model/OfferAttributes}
     */
    OfferAttributes,

    /**
     * The OfferDetails model constructor.
     * @property {module:model/OfferDetails}
     */
    OfferDetails,

    /**
     * The OfferPrice model constructor.
     * @property {module:model/OfferPrice}
     */
    OfferPrice,

    /**
     * The OfferPriceFee model constructor.
     * @property {module:model/OfferPriceFee}
     */
    OfferPriceFee,

    /**
     * The OfferPriceTax model constructor.
     * @property {module:model/OfferPriceTax}
     */
    OfferPriceTax,

    /**
     * The OfferRelationships model constructor.
     * @property {module:model/OfferRelationships}
     */
    OfferRelationships,

    /**
     * The OfferedPrice model constructor.
     * @property {module:model/OfferedPrice}
     */
    OfferedPrice,

    /**
     * The OfferedPriceAttributes model constructor.
     * @property {module:model/OfferedPriceAttributes}
     */
    OfferedPriceAttributes,

    /**
     * The OfferedPriceRelationships model constructor.
     * @property {module:model/OfferedPriceRelationships}
     */
    OfferedPriceRelationships,

    /**
     * The OfferingResponse model constructor.
     * @property {module:model/OfferingResponse}
     */
    OfferingResponse,

    /**
     * The OfferingResponseEmbeddedData model constructor.
     * @property {module:model/OfferingResponseEmbeddedData}
     */
    OfferingResponseEmbeddedData,

    /**
     * The OfferingResponseMetadata model constructor.
     * @property {module:model/OfferingResponseMetadata}
     */
    OfferingResponseMetadata,

    /**
     * The Password model constructor.
     * @property {module:model/Password}
     */
    Password,

    /**
     * The PasswordAttributes model constructor.
     * @property {module:model/PasswordAttributes}
     */
    PasswordAttributes,

    /**
     * The PasswordMetadata model constructor.
     * @property {module:model/PasswordMetadata}
     */
    PasswordMetadata,

    /**
     * The PasswordRelationships model constructor.
     * @property {module:model/PasswordRelationships}
     */
    PasswordRelationships,

    /**
     * The PriceZone model constructor.
     * @property {module:model/PriceZone}
     */
    PriceZone,

    /**
     * The PriceZoneAttributes model constructor.
     * @property {module:model/PriceZoneAttributes}
     */
    PriceZoneAttributes,

    /**
     * The PriceZoneRelationships model constructor.
     * @property {module:model/PriceZoneRelationships}
     */
    PriceZoneRelationships,

    /**
     * The Prompt model constructor.
     * @property {module:model/Prompt}
     */
    Prompt,

    /**
     * The ResponseObjectListAreaSimpleLinks model constructor.
     * @property {module:model/ResponseObjectListAreaSimpleLinks}
     */
    ResponseObjectListAreaSimpleLinks,

    /**
     * The ResponseObjectListAttributeRefSimpleLinks model constructor.
     * @property {module:model/ResponseObjectListAttributeRefSimpleLinks}
     */
    ResponseObjectListAttributeRefSimpleLinks,

    /**
     * The ResponseObjectListHoldRefSimpleLinks model constructor.
     * @property {module:model/ResponseObjectListHoldRefSimpleLinks}
     */
    ResponseObjectListHoldRefSimpleLinks,

    /**
     * The ResponseObjectListOfferedPriceSimpleLinks model constructor.
     * @property {module:model/ResponseObjectListOfferedPriceSimpleLinks}
     */
    ResponseObjectListOfferedPriceSimpleLinks,

    /**
     * The ResponseObjectListPasswordSimpleLinks model constructor.
     * @property {module:model/ResponseObjectListPasswordSimpleLinks}
     */
    ResponseObjectListPasswordSimpleLinks,

    /**
     * The ResponseObjectListPriceZoneSimpleLinks model constructor.
     * @property {module:model/ResponseObjectListPriceZoneSimpleLinks}
     */
    ResponseObjectListPriceZoneSimpleLinks,

    /**
     * The ResponseObjectRef model constructor.
     * @property {module:model/ResponseObjectRef}
     */
    ResponseObjectRef,

    /**
     * The ResponseObjectRefList model constructor.
     * @property {module:model/ResponseObjectRefList}
     */
    ResponseObjectRefList,

    /**
     * The ResponseObjectRefListSimpleLinks model constructor.
     * @property {module:model/ResponseObjectRefListSimpleLinks}
     */
    ResponseObjectRefListSimpleLinks,

    /**
     * The SimpleLinks model constructor.
     * @property {module:model/SimpleLinks}
     */
    SimpleLinks,

    /**
     * The Source model constructor.
     * @property {module:model/Source}
     */
    Source,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
