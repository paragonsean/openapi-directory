/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILimit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILimit::OAILimit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILimit::OAILimit() {
    this->initializeModel();
}

OAILimit::~OAILimit() {}

void OAILimit::initializeModel() {

    m_max_isSet = false;
    m_max_isValid = false;

    m_max_accessible_seats_isSet = false;
    m_max_accessible_seats_isValid = false;

    m_max_companion_seats_per_accessible_seat_isSet = false;
    m_max_companion_seats_per_accessible_seat_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;

    m_multiples_isSet = false;
    m_multiples_isValid = false;

    m_sellable_qty_isSet = false;
    m_sellable_qty_isValid = false;
}

void OAILimit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILimit::fromJsonObject(QJsonObject json) {

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_max_accessible_seats_isValid = ::OpenAPI::fromJsonValue(m_max_accessible_seats, json[QString("maxAccessibleSeats")]);
    m_max_accessible_seats_isSet = !json[QString("maxAccessibleSeats")].isNull() && m_max_accessible_seats_isValid;

    m_max_companion_seats_per_accessible_seat_isValid = ::OpenAPI::fromJsonValue(m_max_companion_seats_per_accessible_seat, json[QString("maxCompanionSeatsPerAccessibleSeat")]);
    m_max_companion_seats_per_accessible_seat_isSet = !json[QString("maxCompanionSeatsPerAccessibleSeat")].isNull() && m_max_companion_seats_per_accessible_seat_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;

    m_multiples_isValid = ::OpenAPI::fromJsonValue(m_multiples, json[QString("multiples")]);
    m_multiples_isSet = !json[QString("multiples")].isNull() && m_multiples_isValid;

    m_sellable_qty_isValid = ::OpenAPI::fromJsonValue(m_sellable_qty, json[QString("sellableQty")]);
    m_sellable_qty_isSet = !json[QString("sellableQty")].isNull() && m_sellable_qty_isValid;
}

QString OAILimit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILimit::asJsonObject() const {
    QJsonObject obj;
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_max_accessible_seats_isSet) {
        obj.insert(QString("maxAccessibleSeats"), ::OpenAPI::toJsonValue(m_max_accessible_seats));
    }
    if (m_max_companion_seats_per_accessible_seat_isSet) {
        obj.insert(QString("maxCompanionSeatsPerAccessibleSeat"), ::OpenAPI::toJsonValue(m_max_companion_seats_per_accessible_seat));
    }
    if (m_min_isSet) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_multiples_isSet) {
        obj.insert(QString("multiples"), ::OpenAPI::toJsonValue(m_multiples));
    }
    if (m_sellable_qty_isSet) {
        obj.insert(QString("sellableQty"), ::OpenAPI::toJsonValue(m_sellable_qty));
    }
    return obj;
}

qint32 OAILimit::getMax() const {
    return m_max;
}
void OAILimit::setMax(const qint32 &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAILimit::is_max_Set() const{
    return m_max_isSet;
}

bool OAILimit::is_max_Valid() const{
    return m_max_isValid;
}

qint32 OAILimit::getMaxAccessibleSeats() const {
    return m_max_accessible_seats;
}
void OAILimit::setMaxAccessibleSeats(const qint32 &max_accessible_seats) {
    m_max_accessible_seats = max_accessible_seats;
    m_max_accessible_seats_isSet = true;
}

bool OAILimit::is_max_accessible_seats_Set() const{
    return m_max_accessible_seats_isSet;
}

bool OAILimit::is_max_accessible_seats_Valid() const{
    return m_max_accessible_seats_isValid;
}

qint32 OAILimit::getMaxCompanionSeatsPerAccessibleSeat() const {
    return m_max_companion_seats_per_accessible_seat;
}
void OAILimit::setMaxCompanionSeatsPerAccessibleSeat(const qint32 &max_companion_seats_per_accessible_seat) {
    m_max_companion_seats_per_accessible_seat = max_companion_seats_per_accessible_seat;
    m_max_companion_seats_per_accessible_seat_isSet = true;
}

bool OAILimit::is_max_companion_seats_per_accessible_seat_Set() const{
    return m_max_companion_seats_per_accessible_seat_isSet;
}

bool OAILimit::is_max_companion_seats_per_accessible_seat_Valid() const{
    return m_max_companion_seats_per_accessible_seat_isValid;
}

qint32 OAILimit::getMin() const {
    return m_min;
}
void OAILimit::setMin(const qint32 &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAILimit::is_min_Set() const{
    return m_min_isSet;
}

bool OAILimit::is_min_Valid() const{
    return m_min_isValid;
}

qint32 OAILimit::getMultiples() const {
    return m_multiples;
}
void OAILimit::setMultiples(const qint32 &multiples) {
    m_multiples = multiples;
    m_multiples_isSet = true;
}

bool OAILimit::is_multiples_Set() const{
    return m_multiples_isSet;
}

bool OAILimit::is_multiples_Valid() const{
    return m_multiples_isValid;
}

QString OAILimit::getSellableQty() const {
    return m_sellable_qty;
}
void OAILimit::setSellableQty(const QString &sellable_qty) {
    m_sellable_qty = sellable_qty;
    m_sellable_qty_isSet = true;
}

bool OAILimit::is_sellable_qty_Set() const{
    return m_sellable_qty_isSet;
}

bool OAILimit::is_sellable_qty_Valid() const{
    return m_sellable_qty_isValid;
}

bool OAILimit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_accessible_seats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_companion_seats_per_accessible_seat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiples_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sellable_qty_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILimit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
