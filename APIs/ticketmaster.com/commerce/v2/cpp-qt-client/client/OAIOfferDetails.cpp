/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferDetails::OAIOfferDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferDetails::OAIOfferDetails() {
    this->initializeModel();
}

OAIOfferDetails::~OAIOfferDetails() {}

void OAIOfferDetails::initializeModel() {

    m_link_isSet = false;
    m_link_isValid = false;

    m_link_text_isSet = false;
    m_link_text_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIOfferDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferDetails::fromJsonObject(QJsonObject json) {

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_link_text_isValid = ::OpenAPI::fromJsonValue(m_link_text, json[QString("linkText")]);
    m_link_text_isSet = !json[QString("linkText")].isNull() && m_link_text_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIOfferDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_link_text_isSet) {
        obj.insert(QString("linkText"), ::OpenAPI::toJsonValue(m_link_text));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIOfferDetails::getLink() const {
    return m_link;
}
void OAIOfferDetails::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIOfferDetails::is_link_Set() const{
    return m_link_isSet;
}

bool OAIOfferDetails::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIOfferDetails::getLinkText() const {
    return m_link_text;
}
void OAIOfferDetails::setLinkText(const QString &link_text) {
    m_link_text = link_text;
    m_link_text_isSet = true;
}

bool OAIOfferDetails::is_link_text_Set() const{
    return m_link_text_isSet;
}

bool OAIOfferDetails::is_link_text_Valid() const{
    return m_link_text_isValid;
}

QString OAIOfferDetails::getText() const {
    return m_text;
}
void OAIOfferDetails::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIOfferDetails::is_text_Set() const{
    return m_text_isSet;
}

bool OAIOfferDetails::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIOfferDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
