/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventMappingView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventMappingView::OAIEventMappingView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventMappingView::OAIEventMappingView() {
    this->initializeModel();
}

OAIEventMappingView::~OAIEventMappingView() {}

void OAIEventMappingView::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEventMappingView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventMappingView::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEventMappingView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventMappingView::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIEventMappingView::getId() const {
    return m_id;
}
void OAIEventMappingView::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEventMappingView::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEventMappingView::is_id_Valid() const{
    return m_id_isValid;
}

OAISource OAIEventMappingView::getSource() const {
    return m_source;
}
void OAIEventMappingView::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIEventMappingView::is_source_Set() const{
    return m_source_isSet;
}

bool OAIEventMappingView::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIEventMappingView::getType() const {
    return m_type;
}
void OAIEventMappingView::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEventMappingView::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEventMappingView::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEventMappingView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventMappingView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
