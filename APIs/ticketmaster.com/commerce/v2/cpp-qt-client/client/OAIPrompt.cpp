/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrompt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrompt::OAIPrompt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrompt::OAIPrompt() {
    this->initializeModel();
}

OAIPrompt::~OAIPrompt() {}

void OAIPrompt::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIPrompt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrompt::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIPrompt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrompt::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIPrompt::getId() const {
    return m_id;
}
void OAIPrompt::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPrompt::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPrompt::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPrompt::getText() const {
    return m_text;
}
void OAIPrompt::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPrompt::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPrompt::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIPrompt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrompt::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
