/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOfferingResponse.h
 *
 * 
 */

#ifndef OAIOfferingResponse_H
#define OAIOfferingResponse_H

#include <QJsonObject>

#include "OAILimit.h"
#include "OAIOffer.h"
#include "OAIOfferingResponseEmbeddedData.h"
#include "OAIOfferingResponseMetadata.h"
#include "OAIResponseObjectListOfferedPriceSimpleLinks.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOfferingResponseEmbeddedData;
class OAILimit;
class OAIOfferingResponseMetadata;
class OAIOffer;
class OAIResponseObjectListOfferedPriceSimpleLinks;

class OAIOfferingResponse : public OAIObject {
public:
    OAIOfferingResponse();
    OAIOfferingResponse(QString json);
    ~OAIOfferingResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIOfferingResponseEmbeddedData getEmbedded() const;
    void setEmbedded(const OAIOfferingResponseEmbeddedData &_embedded);
    bool is__embedded_Set() const;
    bool is__embedded_Valid() const;

    QList<QString> getDebug() const;
    void setDebug(const QList<QString> &debug);
    bool is_debug_Set() const;
    bool is_debug_Valid() const;

    OAILimit getLimits() const;
    void setLimits(const OAILimit &limits);
    bool is_limits_Set() const;
    bool is_limits_Valid() const;

    OAIOfferingResponseMetadata getMetadata() const;
    void setMetadata(const OAIOfferingResponseMetadata &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QList<OAIOffer> getOffers() const;
    void setOffers(const QList<OAIOffer> &offers);
    bool is_offers_Set() const;
    bool is_offers_Valid() const;

    OAIResponseObjectListOfferedPriceSimpleLinks getPrices() const;
    void setPrices(const OAIResponseObjectListOfferedPriceSimpleLinks &prices);
    bool is_prices_Set() const;
    bool is_prices_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIOfferingResponseEmbeddedData m__embedded;
    bool m__embedded_isSet;
    bool m__embedded_isValid;

    QList<QString> m_debug;
    bool m_debug_isSet;
    bool m_debug_isValid;

    OAILimit m_limits;
    bool m_limits_isSet;
    bool m_limits_isValid;

    OAIOfferingResponseMetadata m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QList<OAIOffer> m_offers;
    bool m_offers_isSet;
    bool m_offers_isValid;

    OAIResponseObjectListOfferedPriceSimpleLinks m_prices;
    bool m_prices_isSet;
    bool m_prices_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOfferingResponse)

#endif // OAIOfferingResponse_H
