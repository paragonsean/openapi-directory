/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPasswordAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPasswordAttributes::OAIPasswordAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPasswordAttributes::OAIPasswordAttributes() {
    this->initializeModel();
}

OAIPasswordAttributes::~OAIPasswordAttributes() {}

void OAIPasswordAttributes::initializeModel() {

    m_end_isSet = false;
    m_end_isValid = false;

    m_exclusive_isSet = false;
    m_exclusive_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_link_label_isSet = false;
    m_link_label_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_prompts_isSet = false;
    m_prompts_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_text_label_isSet = false;
    m_text_label_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPasswordAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPasswordAttributes::fromJsonObject(QJsonObject json) {

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_exclusive_isValid = ::OpenAPI::fromJsonValue(m_exclusive, json[QString("exclusive")]);
    m_exclusive_isSet = !json[QString("exclusive")].isNull() && m_exclusive_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_link_label_isValid = ::OpenAPI::fromJsonValue(m_link_label, json[QString("linkLabel")]);
    m_link_label_isSet = !json[QString("linkLabel")].isNull() && m_link_label_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_prompts_isValid = ::OpenAPI::fromJsonValue(m_prompts, json[QString("prompts")]);
    m_prompts_isSet = !json[QString("prompts")].isNull() && m_prompts_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_text_label_isValid = ::OpenAPI::fromJsonValue(m_text_label, json[QString("textLabel")]);
    m_text_label_isSet = !json[QString("textLabel")].isNull() && m_text_label_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPasswordAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPasswordAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_exclusive_isSet) {
        obj.insert(QString("exclusive"), ::OpenAPI::toJsonValue(m_exclusive));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_link_label_isSet) {
        obj.insert(QString("linkLabel"), ::OpenAPI::toJsonValue(m_link_label));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_prompts.size() > 0) {
        obj.insert(QString("prompts"), ::OpenAPI::toJsonValue(m_prompts));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_text_label_isSet) {
        obj.insert(QString("textLabel"), ::OpenAPI::toJsonValue(m_text_label));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QDateTime OAIPasswordAttributes::getEnd() const {
    return m_end;
}
void OAIPasswordAttributes::setEnd(const QDateTime &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIPasswordAttributes::is_end_Set() const{
    return m_end_isSet;
}

bool OAIPasswordAttributes::is_end_Valid() const{
    return m_end_isValid;
}

bool OAIPasswordAttributes::isExclusive() const {
    return m_exclusive;
}
void OAIPasswordAttributes::setExclusive(const bool &exclusive) {
    m_exclusive = exclusive;
    m_exclusive_isSet = true;
}

bool OAIPasswordAttributes::is_exclusive_Set() const{
    return m_exclusive_isSet;
}

bool OAIPasswordAttributes::is_exclusive_Valid() const{
    return m_exclusive_isValid;
}

QString OAIPasswordAttributes::getLink() const {
    return m_link;
}
void OAIPasswordAttributes::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIPasswordAttributes::is_link_Set() const{
    return m_link_isSet;
}

bool OAIPasswordAttributes::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIPasswordAttributes::getLinkLabel() const {
    return m_link_label;
}
void OAIPasswordAttributes::setLinkLabel(const QString &link_label) {
    m_link_label = link_label;
    m_link_label_isSet = true;
}

bool OAIPasswordAttributes::is_link_label_Set() const{
    return m_link_label_isSet;
}

bool OAIPasswordAttributes::is_link_label_Valid() const{
    return m_link_label_isValid;
}

QString OAIPasswordAttributes::getName() const {
    return m_name;
}
void OAIPasswordAttributes::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPasswordAttributes::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPasswordAttributes::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPrompt> OAIPasswordAttributes::getPrompts() const {
    return m_prompts;
}
void OAIPasswordAttributes::setPrompts(const QList<OAIPrompt> &prompts) {
    m_prompts = prompts;
    m_prompts_isSet = true;
}

bool OAIPasswordAttributes::is_prompts_Set() const{
    return m_prompts_isSet;
}

bool OAIPasswordAttributes::is_prompts_Valid() const{
    return m_prompts_isValid;
}

QDateTime OAIPasswordAttributes::getStart() const {
    return m_start;
}
void OAIPasswordAttributes::setStart(const QDateTime &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIPasswordAttributes::is_start_Set() const{
    return m_start_isSet;
}

bool OAIPasswordAttributes::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIPasswordAttributes::getText() const {
    return m_text;
}
void OAIPasswordAttributes::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPasswordAttributes::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPasswordAttributes::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIPasswordAttributes::getTextLabel() const {
    return m_text_label;
}
void OAIPasswordAttributes::setTextLabel(const QString &text_label) {
    m_text_label = text_label;
    m_text_label_isSet = true;
}

bool OAIPasswordAttributes::is_text_label_Set() const{
    return m_text_label_isSet;
}

bool OAIPasswordAttributes::is_text_label_Valid() const{
    return m_text_label_isValid;
}

QString OAIPasswordAttributes::getType() const {
    return m_type;
}
void OAIPasswordAttributes::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPasswordAttributes::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPasswordAttributes::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPasswordAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prompts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPasswordAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
