/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILimit.h
 *
 * 
 */

#ifndef OAILimit_H
#define OAILimit_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILimit : public OAIObject {
public:
    OAILimit();
    OAILimit(QString json);
    ~OAILimit() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getMax() const;
    void setMax(const qint32 &max);
    bool is_max_Set() const;
    bool is_max_Valid() const;

    qint32 getMaxAccessibleSeats() const;
    void setMaxAccessibleSeats(const qint32 &max_accessible_seats);
    bool is_max_accessible_seats_Set() const;
    bool is_max_accessible_seats_Valid() const;

    qint32 getMaxCompanionSeatsPerAccessibleSeat() const;
    void setMaxCompanionSeatsPerAccessibleSeat(const qint32 &max_companion_seats_per_accessible_seat);
    bool is_max_companion_seats_per_accessible_seat_Set() const;
    bool is_max_companion_seats_per_accessible_seat_Valid() const;

    qint32 getMin() const;
    void setMin(const qint32 &min);
    bool is_min_Set() const;
    bool is_min_Valid() const;

    qint32 getMultiples() const;
    void setMultiples(const qint32 &multiples);
    bool is_multiples_Set() const;
    bool is_multiples_Valid() const;

    QString getSellableQty() const;
    void setSellableQty(const QString &sellable_qty);
    bool is_sellable_qty_Set() const;
    bool is_sellable_qty_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_max;
    bool m_max_isSet;
    bool m_max_isValid;

    qint32 m_max_accessible_seats;
    bool m_max_accessible_seats_isSet;
    bool m_max_accessible_seats_isValid;

    qint32 m_max_companion_seats_per_accessible_seat;
    bool m_max_companion_seats_per_accessible_seat_isSet;
    bool m_max_companion_seats_per_accessible_seat_isValid;

    qint32 m_min;
    bool m_min_isSet;
    bool m_min_isValid;

    qint32 m_multiples;
    bool m_multiples_isSet;
    bool m_multiples_isValid;

    QString m_sellable_qty;
    bool m_sellable_qty_isSet;
    bool m_sellable_qty_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILimit)

#endif // OAILimit_H
