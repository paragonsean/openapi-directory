/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferPrice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferPrice::OAIOfferPrice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferPrice::OAIOfferPrice() {
    this->initializeModel();
}

OAIOfferPrice::~OAIOfferPrice() {}

void OAIOfferPrice::initializeModel() {

    m_fees_isSet = false;
    m_fees_isValid = false;

    m_price_zone_isSet = false;
    m_price_zone_isValid = false;

    m_taxes_isSet = false;
    m_taxes_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIOfferPrice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferPrice::fromJsonObject(QJsonObject json) {

    m_fees_isValid = ::OpenAPI::fromJsonValue(m_fees, json[QString("fees")]);
    m_fees_isSet = !json[QString("fees")].isNull() && m_fees_isValid;

    m_price_zone_isValid = ::OpenAPI::fromJsonValue(m_price_zone, json[QString("priceZone")]);
    m_price_zone_isSet = !json[QString("priceZone")].isNull() && m_price_zone_isValid;

    m_taxes_isValid = ::OpenAPI::fromJsonValue(m_taxes, json[QString("taxes")]);
    m_taxes_isSet = !json[QString("taxes")].isNull() && m_taxes_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIOfferPrice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferPrice::asJsonObject() const {
    QJsonObject obj;
    if (m_fees.size() > 0) {
        obj.insert(QString("fees"), ::OpenAPI::toJsonValue(m_fees));
    }
    if (m_price_zone_isSet) {
        obj.insert(QString("priceZone"), ::OpenAPI::toJsonValue(m_price_zone));
    }
    if (m_taxes.size() > 0) {
        obj.insert(QString("taxes"), ::OpenAPI::toJsonValue(m_taxes));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QList<OAIOfferPriceFee> OAIOfferPrice::getFees() const {
    return m_fees;
}
void OAIOfferPrice::setFees(const QList<OAIOfferPriceFee> &fees) {
    m_fees = fees;
    m_fees_isSet = true;
}

bool OAIOfferPrice::is_fees_Set() const{
    return m_fees_isSet;
}

bool OAIOfferPrice::is_fees_Valid() const{
    return m_fees_isValid;
}

QString OAIOfferPrice::getPriceZone() const {
    return m_price_zone;
}
void OAIOfferPrice::setPriceZone(const QString &price_zone) {
    m_price_zone = price_zone;
    m_price_zone_isSet = true;
}

bool OAIOfferPrice::is_price_zone_Set() const{
    return m_price_zone_isSet;
}

bool OAIOfferPrice::is_price_zone_Valid() const{
    return m_price_zone_isValid;
}

QList<OAIOfferPriceTax> OAIOfferPrice::getTaxes() const {
    return m_taxes;
}
void OAIOfferPrice::setTaxes(const QList<OAIOfferPriceTax> &taxes) {
    m_taxes = taxes;
    m_taxes_isSet = true;
}

bool OAIOfferPrice::is_taxes_Set() const{
    return m_taxes_isSet;
}

bool OAIOfferPrice::is_taxes_Valid() const{
    return m_taxes_isValid;
}

QString OAIOfferPrice::getTotal() const {
    return m_total;
}
void OAIOfferPrice::setTotal(const QString &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIOfferPrice::is_total_Set() const{
    return m_total_isSet;
}

bool OAIOfferPrice::is_total_Valid() const{
    return m_total_isValid;
}

QString OAIOfferPrice::getValue() const {
    return m_value;
}
void OAIOfferPrice::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIOfferPrice::is_value_Set() const{
    return m_value_isSet;
}

bool OAIOfferPrice::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIOfferPrice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferPrice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
