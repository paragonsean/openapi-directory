/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferRelationships.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferRelationships::OAIOfferRelationships(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferRelationships::OAIOfferRelationships() {
    this->initializeModel();
}

OAIOfferRelationships::~OAIOfferRelationships() {}

void OAIOfferRelationships::initializeModel() {

    m_areas_isSet = false;
    m_areas_isValid = false;

    m_offer_sets_isSet = false;
    m_offer_sets_isValid = false;

    m_passwords_isSet = false;
    m_passwords_isValid = false;

    m_price_zones_isSet = false;
    m_price_zones_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;
}

void OAIOfferRelationships::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferRelationships::fromJsonObject(QJsonObject json) {

    m_areas_isValid = ::OpenAPI::fromJsonValue(m_areas, json[QString("areas")]);
    m_areas_isSet = !json[QString("areas")].isNull() && m_areas_isValid;

    m_offer_sets_isValid = ::OpenAPI::fromJsonValue(m_offer_sets, json[QString("offerSets")]);
    m_offer_sets_isSet = !json[QString("offerSets")].isNull() && m_offer_sets_isValid;

    m_passwords_isValid = ::OpenAPI::fromJsonValue(m_passwords, json[QString("passwords")]);
    m_passwords_isSet = !json[QString("passwords")].isNull() && m_passwords_isValid;

    m_price_zones_isValid = ::OpenAPI::fromJsonValue(m_price_zones, json[QString("priceZones")]);
    m_price_zones_isSet = !json[QString("priceZones")].isNull() && m_price_zones_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;
}

QString OAIOfferRelationships::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferRelationships::asJsonObject() const {
    QJsonObject obj;
    if (m_areas.isSet()) {
        obj.insert(QString("areas"), ::OpenAPI::toJsonValue(m_areas));
    }
    if (m_offer_sets.isSet()) {
        obj.insert(QString("offerSets"), ::OpenAPI::toJsonValue(m_offer_sets));
    }
    if (m_passwords.isSet()) {
        obj.insert(QString("passwords"), ::OpenAPI::toJsonValue(m_passwords));
    }
    if (m_price_zones.isSet()) {
        obj.insert(QString("priceZones"), ::OpenAPI::toJsonValue(m_price_zones));
    }
    if (m_products.isSet()) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    return obj;
}

OAIResponseObjectRefList OAIOfferRelationships::getAreas() const {
    return m_areas;
}
void OAIOfferRelationships::setAreas(const OAIResponseObjectRefList &areas) {
    m_areas = areas;
    m_areas_isSet = true;
}

bool OAIOfferRelationships::is_areas_Set() const{
    return m_areas_isSet;
}

bool OAIOfferRelationships::is_areas_Valid() const{
    return m_areas_isValid;
}

OAIResponseObjectRefList OAIOfferRelationships::getOfferSets() const {
    return m_offer_sets;
}
void OAIOfferRelationships::setOfferSets(const OAIResponseObjectRefList &offer_sets) {
    m_offer_sets = offer_sets;
    m_offer_sets_isSet = true;
}

bool OAIOfferRelationships::is_offer_sets_Set() const{
    return m_offer_sets_isSet;
}

bool OAIOfferRelationships::is_offer_sets_Valid() const{
    return m_offer_sets_isValid;
}

OAIResponseObjectRefList OAIOfferRelationships::getPasswords() const {
    return m_passwords;
}
void OAIOfferRelationships::setPasswords(const OAIResponseObjectRefList &passwords) {
    m_passwords = passwords;
    m_passwords_isSet = true;
}

bool OAIOfferRelationships::is_passwords_Set() const{
    return m_passwords_isSet;
}

bool OAIOfferRelationships::is_passwords_Valid() const{
    return m_passwords_isValid;
}

OAIResponseObjectRefList OAIOfferRelationships::getPriceZones() const {
    return m_price_zones;
}
void OAIOfferRelationships::setPriceZones(const OAIResponseObjectRefList &price_zones) {
    m_price_zones = price_zones;
    m_price_zones_isSet = true;
}

bool OAIOfferRelationships::is_price_zones_Set() const{
    return m_price_zones_isSet;
}

bool OAIOfferRelationships::is_price_zones_Valid() const{
    return m_price_zones_isValid;
}

OAIResponseObjectRefList OAIOfferRelationships::getProducts() const {
    return m_products;
}
void OAIOfferRelationships::setProducts(const OAIResponseObjectRefList &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIOfferRelationships::is_products_Set() const{
    return m_products_isSet;
}

bool OAIOfferRelationships::is_products_Valid() const{
    return m_products_isValid;
}

bool OAIOfferRelationships::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_areas.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_sets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passwords.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferRelationships::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
