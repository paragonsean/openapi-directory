/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseObjectListHoldRefSimpleLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseObjectListHoldRefSimpleLinks::OAIResponseObjectListHoldRefSimpleLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseObjectListHoldRefSimpleLinks::OAIResponseObjectListHoldRefSimpleLinks() {
    this->initializeModel();
}

OAIResponseObjectListHoldRefSimpleLinks::~OAIResponseObjectListHoldRefSimpleLinks() {}

void OAIResponseObjectListHoldRefSimpleLinks::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;
}

void OAIResponseObjectListHoldRefSimpleLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseObjectListHoldRefSimpleLinks::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;
}

QString OAIResponseObjectListHoldRefSimpleLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseObjectListHoldRefSimpleLinks::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    return obj;
}

OAISimpleLinks OAIResponseObjectListHoldRefSimpleLinks::getLinks() const {
    return m__links;
}
void OAIResponseObjectListHoldRefSimpleLinks::setLinks(const OAISimpleLinks &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIResponseObjectListHoldRefSimpleLinks::is__links_Set() const{
    return m__links_isSet;
}

bool OAIResponseObjectListHoldRefSimpleLinks::is__links_Valid() const{
    return m__links_isValid;
}

QList<OAIHoldRef> OAIResponseObjectListHoldRefSimpleLinks::getData() const {
    return m_data;
}
void OAIResponseObjectListHoldRefSimpleLinks::setData(const QList<OAIHoldRef> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIResponseObjectListHoldRefSimpleLinks::is_data_Set() const{
    return m_data_isSet;
}

bool OAIResponseObjectListHoldRefSimpleLinks::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIResponseObjectListHoldRefSimpleLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseObjectListHoldRefSimpleLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
