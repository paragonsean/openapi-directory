/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeRefAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeRefAttributes::OAIAttributeRefAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeRefAttributes::OAIAttributeRefAttributes() {
    this->initializeModel();
}

OAIAttributeRefAttributes::~OAIAttributeRefAttributes() {}

void OAIAttributeRefAttributes::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIAttributeRefAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeRefAttributes::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;
}

QString OAIAttributeRefAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeRefAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAIAttributeRefAttributes::getDescription() const {
    return m_description;
}
void OAIAttributeRefAttributes::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAttributeRefAttributes::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAttributeRefAttributes::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIAttributeRefAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeRefAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
