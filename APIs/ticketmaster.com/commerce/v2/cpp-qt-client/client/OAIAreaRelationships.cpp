/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAreaRelationships.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAreaRelationships::OAIAreaRelationships(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAreaRelationships::OAIAreaRelationships() {
    this->initializeModel();
}

OAIAreaRelationships::~OAIAreaRelationships() {}

void OAIAreaRelationships::initializeModel() {

    m_areas_isSet = false;
    m_areas_isValid = false;

    m_offers_isSet = false;
    m_offers_isValid = false;

    m_price_zones_isSet = false;
    m_price_zones_isValid = false;
}

void OAIAreaRelationships::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAreaRelationships::fromJsonObject(QJsonObject json) {

    m_areas_isValid = ::OpenAPI::fromJsonValue(m_areas, json[QString("areas")]);
    m_areas_isSet = !json[QString("areas")].isNull() && m_areas_isValid;

    m_offers_isValid = ::OpenAPI::fromJsonValue(m_offers, json[QString("offers")]);
    m_offers_isSet = !json[QString("offers")].isNull() && m_offers_isValid;

    m_price_zones_isValid = ::OpenAPI::fromJsonValue(m_price_zones, json[QString("priceZones")]);
    m_price_zones_isSet = !json[QString("priceZones")].isNull() && m_price_zones_isValid;
}

QString OAIAreaRelationships::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAreaRelationships::asJsonObject() const {
    QJsonObject obj;
    if (m_areas.isSet()) {
        obj.insert(QString("areas"), ::OpenAPI::toJsonValue(m_areas));
    }
    if (m_offers.isSet()) {
        obj.insert(QString("offers"), ::OpenAPI::toJsonValue(m_offers));
    }
    if (m_price_zones.isSet()) {
        obj.insert(QString("priceZones"), ::OpenAPI::toJsonValue(m_price_zones));
    }
    return obj;
}

OAIResponseObjectRefList OAIAreaRelationships::getAreas() const {
    return m_areas;
}
void OAIAreaRelationships::setAreas(const OAIResponseObjectRefList &areas) {
    m_areas = areas;
    m_areas_isSet = true;
}

bool OAIAreaRelationships::is_areas_Set() const{
    return m_areas_isSet;
}

bool OAIAreaRelationships::is_areas_Valid() const{
    return m_areas_isValid;
}

OAIResponseObjectRefList OAIAreaRelationships::getOffers() const {
    return m_offers;
}
void OAIAreaRelationships::setOffers(const OAIResponseObjectRefList &offers) {
    m_offers = offers;
    m_offers_isSet = true;
}

bool OAIAreaRelationships::is_offers_Set() const{
    return m_offers_isSet;
}

bool OAIAreaRelationships::is_offers_Valid() const{
    return m_offers_isValid;
}

OAIResponseObjectRefList OAIAreaRelationships::getPriceZones() const {
    return m_price_zones;
}
void OAIAreaRelationships::setPriceZones(const OAIResponseObjectRefList &price_zones) {
    m_price_zones = price_zones;
    m_price_zones_isSet = true;
}

bool OAIAreaRelationships::is_price_zones_Set() const{
    return m_price_zones_isSet;
}

bool OAIAreaRelationships::is_price_zones_Valid() const{
    return m_price_zones_isValid;
}

bool OAIAreaRelationships::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_areas.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAreaRelationships::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
