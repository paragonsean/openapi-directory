/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimpleLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimpleLinks::OAISimpleLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimpleLinks::OAISimpleLinks() {
    this->initializeModel();
}

OAISimpleLinks::~OAISimpleLinks() {}

void OAISimpleLinks::initializeModel() {

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAISimpleLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimpleLinks::fromJsonObject(QJsonObject json) {

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAISimpleLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimpleLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

OAIHrefLinkValue OAISimpleLinks::getSelf() const {
    return m_self;
}
void OAISimpleLinks::setSelf(const OAIHrefLinkValue &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAISimpleLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAISimpleLinks::is_self_Valid() const{
    return m_self_isValid;
}

bool OAISimpleLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimpleLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
