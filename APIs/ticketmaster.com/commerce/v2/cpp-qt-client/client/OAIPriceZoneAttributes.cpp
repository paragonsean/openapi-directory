/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPriceZoneAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPriceZoneAttributes::OAIPriceZoneAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPriceZoneAttributes::OAIPriceZoneAttributes() {
    this->initializeModel();
}

OAIPriceZoneAttributes::~OAIPriceZoneAttributes() {}

void OAIPriceZoneAttributes::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIPriceZoneAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPriceZoneAttributes::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIPriceZoneAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPriceZoneAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIPriceZoneAttributes::getCurrency() const {
    return m_currency;
}
void OAIPriceZoneAttributes::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPriceZoneAttributes::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPriceZoneAttributes::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIPriceZoneAttributes::getName() const {
    return m_name;
}
void OAIPriceZoneAttributes::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPriceZoneAttributes::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPriceZoneAttributes::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPriceZoneAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPriceZoneAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
