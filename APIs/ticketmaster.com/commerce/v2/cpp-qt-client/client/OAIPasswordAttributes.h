/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPasswordAttributes.h
 *
 * 
 */

#ifndef OAIPasswordAttributes_H
#define OAIPasswordAttributes_H

#include <QJsonObject>

#include "OAIPrompt.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPrompt;

class OAIPasswordAttributes : public OAIObject {
public:
    OAIPasswordAttributes();
    OAIPasswordAttributes(QString json);
    ~OAIPasswordAttributes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getEnd() const;
    void setEnd(const QDateTime &end);
    bool is_end_Set() const;
    bool is_end_Valid() const;

    bool isExclusive() const;
    void setExclusive(const bool &exclusive);
    bool is_exclusive_Set() const;
    bool is_exclusive_Valid() const;

    QString getLink() const;
    void setLink(const QString &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    QString getLinkLabel() const;
    void setLinkLabel(const QString &link_label);
    bool is_link_label_Set() const;
    bool is_link_label_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIPrompt> getPrompts() const;
    void setPrompts(const QList<OAIPrompt> &prompts);
    bool is_prompts_Set() const;
    bool is_prompts_Valid() const;

    QDateTime getStart() const;
    void setStart(const QDateTime &start);
    bool is_start_Set() const;
    bool is_start_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    QString getTextLabel() const;
    void setTextLabel(const QString &text_label);
    bool is_text_label_Set() const;
    bool is_text_label_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_end;
    bool m_end_isSet;
    bool m_end_isValid;

    bool m_exclusive;
    bool m_exclusive_isSet;
    bool m_exclusive_isValid;

    QString m_link;
    bool m_link_isSet;
    bool m_link_isValid;

    QString m_link_label;
    bool m_link_label_isSet;
    bool m_link_label_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIPrompt> m_prompts;
    bool m_prompts_isSet;
    bool m_prompts_isValid;

    QDateTime m_start;
    bool m_start_isSet;
    bool m_start_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    QString m_text_label;
    bool m_text_label_isSet;
    bool m_text_label_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPasswordAttributes)

#endif // OAIPasswordAttributes_H
