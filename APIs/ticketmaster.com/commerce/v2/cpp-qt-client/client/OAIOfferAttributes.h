/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOfferAttributes.h
 *
 * 
 */

#ifndef OAIOfferAttributes_H
#define OAIOfferAttributes_H

#include <QJsonObject>

#include "OAILimit.h"
#include "OAIOfferDetails.h"
#include "OAIOfferPrice.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILimit;
class OAIOfferDetails;
class OAIOfferPrice;

class OAIOfferAttributes : public OAIObject {
public:
    OAIOfferAttributes();
    OAIOfferAttributes(QString json);
    ~OAIOfferAttributes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QDateTime getEnd() const;
    void setEnd(const QDateTime &end);
    bool is_end_Set() const;
    bool is_end_Valid() const;

    OAILimit getLimit() const;
    void setLimit(const OAILimit &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIOfferDetails getOfferDetails() const;
    void setOfferDetails(const OAIOfferDetails &offer_details);
    bool is_offer_details_Set() const;
    bool is_offer_details_Valid() const;

    QString getOfferType() const;
    void setOfferType(const QString &offer_type);
    bool is_offer_type_Set() const;
    bool is_offer_type_Valid() const;

    QList<OAIOfferPrice> getPrices() const;
    void setPrices(const QList<OAIOfferPrice> &prices);
    bool is_prices_Set() const;
    bool is_prices_Valid() const;

    qint32 getRank() const;
    void setRank(const qint32 &rank);
    bool is_rank_Set() const;
    bool is_rank_Valid() const;

    QDateTime getStart() const;
    void setStart(const QDateTime &start);
    bool is_start_Set() const;
    bool is_start_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QDateTime m_end;
    bool m_end_isSet;
    bool m_end_isValid;

    OAILimit m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIOfferDetails m_offer_details;
    bool m_offer_details_isSet;
    bool m_offer_details_isValid;

    QString m_offer_type;
    bool m_offer_type_isSet;
    bool m_offer_type_isValid;

    QList<OAIOfferPrice> m_prices;
    bool m_prices_isSet;
    bool m_prices_isValid;

    qint32 m_rank;
    bool m_rank_isSet;
    bool m_rank_isValid;

    QDateTime m_start;
    bool m_start_isSet;
    bool m_start_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOfferAttributes)

#endif // OAIOfferAttributes_H
