/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOffer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOffer::OAIOffer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOffer::OAIOffer() {
    this->initializeModel();
}

OAIOffer::~OAIOffer() {}

void OAIOffer::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_relationships_isSet = false;
    m_relationships_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIOffer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOffer::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_relationships_isValid = ::OpenAPI::fromJsonValue(m_relationships, json[QString("relationships")]);
    m_relationships_isSet = !json[QString("relationships")].isNull() && m_relationships_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIOffer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOffer::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_relationships.isSet()) {
        obj.insert(QString("relationships"), ::OpenAPI::toJsonValue(m_relationships));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAISimpleLinks OAIOffer::getLinks() const {
    return m__links;
}
void OAIOffer::setLinks(const OAISimpleLinks &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIOffer::is__links_Set() const{
    return m__links_isSet;
}

bool OAIOffer::is__links_Valid() const{
    return m__links_isValid;
}

OAIOfferAttributes OAIOffer::getAttributes() const {
    return m_attributes;
}
void OAIOffer::setAttributes(const OAIOfferAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIOffer::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIOffer::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIOffer::getId() const {
    return m_id;
}
void OAIOffer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOffer::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOffer::is_id_Valid() const{
    return m_id_isValid;
}

OAIOfferRelationships OAIOffer::getRelationships() const {
    return m_relationships;
}
void OAIOffer::setRelationships(const OAIOfferRelationships &relationships) {
    m_relationships = relationships;
    m_relationships_isSet = true;
}

bool OAIOffer::is_relationships_Set() const{
    return m_relationships_isSet;
}

bool OAIOffer::is_relationships_Valid() const{
    return m_relationships_isValid;
}

QString OAIOffer::getType() const {
    return m_type;
}
void OAIOffer::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOffer::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOffer::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIOffer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationships.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOffer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
