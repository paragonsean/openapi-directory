/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAreaAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAreaAttributes::OAIAreaAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAreaAttributes::OAIAreaAttributes() {
    this->initializeModel();
}

OAIAreaAttributes::~OAIAreaAttributes() {}

void OAIAreaAttributes::initializeModel() {

    m_area_type_isSet = false;
    m_area_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;
}

void OAIAreaAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAreaAttributes::fromJsonObject(QJsonObject json) {

    m_area_type_isValid = ::OpenAPI::fromJsonValue(m_area_type, json[QString("areaType")]);
    m_area_type_isSet = !json[QString("areaType")].isNull() && m_area_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;
}

QString OAIAreaAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAreaAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_area_type_isSet) {
        obj.insert(QString("areaType"), ::OpenAPI::toJsonValue(m_area_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    return obj;
}

QString OAIAreaAttributes::getAreaType() const {
    return m_area_type;
}
void OAIAreaAttributes::setAreaType(const QString &area_type) {
    m_area_type = area_type;
    m_area_type_isSet = true;
}

bool OAIAreaAttributes::is_area_type_Set() const{
    return m_area_type_isSet;
}

bool OAIAreaAttributes::is_area_type_Valid() const{
    return m_area_type_isValid;
}

QString OAIAreaAttributes::getDescription() const {
    return m_description;
}
void OAIAreaAttributes::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAreaAttributes::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAreaAttributes::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAreaAttributes::getName() const {
    return m_name;
}
void OAIAreaAttributes::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAreaAttributes::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAreaAttributes::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIAreaAttributes::getRank() const {
    return m_rank;
}
void OAIAreaAttributes::setRank(const qint32 &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAIAreaAttributes::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAIAreaAttributes::is_rank_Valid() const{
    return m_rank_isValid;
}

bool OAIAreaAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAreaAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
