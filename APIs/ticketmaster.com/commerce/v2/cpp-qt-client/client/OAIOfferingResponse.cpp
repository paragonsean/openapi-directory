/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferingResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferingResponse::OAIOfferingResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferingResponse::OAIOfferingResponse() {
    this->initializeModel();
}

OAIOfferingResponse::~OAIOfferingResponse() {}

void OAIOfferingResponse::initializeModel() {

    m__embedded_isSet = false;
    m__embedded_isValid = false;

    m_debug_isSet = false;
    m_debug_isValid = false;

    m_limits_isSet = false;
    m_limits_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_offers_isSet = false;
    m_offers_isValid = false;

    m_prices_isSet = false;
    m_prices_isValid = false;
}

void OAIOfferingResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferingResponse::fromJsonObject(QJsonObject json) {

    m__embedded_isValid = ::OpenAPI::fromJsonValue(m__embedded, json[QString("_embedded")]);
    m__embedded_isSet = !json[QString("_embedded")].isNull() && m__embedded_isValid;

    m_debug_isValid = ::OpenAPI::fromJsonValue(m_debug, json[QString("debug")]);
    m_debug_isSet = !json[QString("debug")].isNull() && m_debug_isValid;

    m_limits_isValid = ::OpenAPI::fromJsonValue(m_limits, json[QString("limits")]);
    m_limits_isSet = !json[QString("limits")].isNull() && m_limits_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_offers_isValid = ::OpenAPI::fromJsonValue(m_offers, json[QString("offers")]);
    m_offers_isSet = !json[QString("offers")].isNull() && m_offers_isValid;

    m_prices_isValid = ::OpenAPI::fromJsonValue(m_prices, json[QString("prices")]);
    m_prices_isSet = !json[QString("prices")].isNull() && m_prices_isValid;
}

QString OAIOfferingResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferingResponse::asJsonObject() const {
    QJsonObject obj;
    if (m__embedded.isSet()) {
        obj.insert(QString("_embedded"), ::OpenAPI::toJsonValue(m__embedded));
    }
    if (m_debug.size() > 0) {
        obj.insert(QString("debug"), ::OpenAPI::toJsonValue(m_debug));
    }
    if (m_limits.isSet()) {
        obj.insert(QString("limits"), ::OpenAPI::toJsonValue(m_limits));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_offers.size() > 0) {
        obj.insert(QString("offers"), ::OpenAPI::toJsonValue(m_offers));
    }
    if (m_prices.isSet()) {
        obj.insert(QString("prices"), ::OpenAPI::toJsonValue(m_prices));
    }
    return obj;
}

OAIOfferingResponseEmbeddedData OAIOfferingResponse::getEmbedded() const {
    return m__embedded;
}
void OAIOfferingResponse::setEmbedded(const OAIOfferingResponseEmbeddedData &_embedded) {
    m__embedded = _embedded;
    m__embedded_isSet = true;
}

bool OAIOfferingResponse::is__embedded_Set() const{
    return m__embedded_isSet;
}

bool OAIOfferingResponse::is__embedded_Valid() const{
    return m__embedded_isValid;
}

QList<QString> OAIOfferingResponse::getDebug() const {
    return m_debug;
}
void OAIOfferingResponse::setDebug(const QList<QString> &debug) {
    m_debug = debug;
    m_debug_isSet = true;
}

bool OAIOfferingResponse::is_debug_Set() const{
    return m_debug_isSet;
}

bool OAIOfferingResponse::is_debug_Valid() const{
    return m_debug_isValid;
}

OAILimit OAIOfferingResponse::getLimits() const {
    return m_limits;
}
void OAIOfferingResponse::setLimits(const OAILimit &limits) {
    m_limits = limits;
    m_limits_isSet = true;
}

bool OAIOfferingResponse::is_limits_Set() const{
    return m_limits_isSet;
}

bool OAIOfferingResponse::is_limits_Valid() const{
    return m_limits_isValid;
}

OAIOfferingResponseMetadata OAIOfferingResponse::getMetadata() const {
    return m_metadata;
}
void OAIOfferingResponse::setMetadata(const OAIOfferingResponseMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIOfferingResponse::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIOfferingResponse::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIOffer> OAIOfferingResponse::getOffers() const {
    return m_offers;
}
void OAIOfferingResponse::setOffers(const QList<OAIOffer> &offers) {
    m_offers = offers;
    m_offers_isSet = true;
}

bool OAIOfferingResponse::is_offers_Set() const{
    return m_offers_isSet;
}

bool OAIOfferingResponse::is_offers_Valid() const{
    return m_offers_isValid;
}

OAIResponseObjectListOfferedPriceSimpleLinks OAIOfferingResponse::getPrices() const {
    return m_prices;
}
void OAIOfferingResponse::setPrices(const OAIResponseObjectListOfferedPriceSimpleLinks &prices) {
    m_prices = prices;
    m_prices_isSet = true;
}

bool OAIOfferingResponse::is_prices_Set() const{
    return m_prices_isSet;
}

bool OAIOfferingResponse::is_prices_Valid() const{
    return m_prices_isValid;
}

bool OAIOfferingResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__embedded.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prices.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferingResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
