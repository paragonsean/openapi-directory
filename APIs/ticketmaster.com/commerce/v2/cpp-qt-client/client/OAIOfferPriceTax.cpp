/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferPriceTax.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferPriceTax::OAIOfferPriceTax(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferPriceTax::OAIOfferPriceTax() {
    this->initializeModel();
}

OAIOfferPriceTax::~OAIOfferPriceTax() {}

void OAIOfferPriceTax::initializeModel() {

    m_label_isSet = false;
    m_label_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIOfferPriceTax::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferPriceTax::fromJsonObject(QJsonObject json) {

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIOfferPriceTax::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferPriceTax::asJsonObject() const {
    QJsonObject obj;
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIOfferPriceTax::getLabel() const {
    return m_label;
}
void OAIOfferPriceTax::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIOfferPriceTax::is_label_Set() const{
    return m_label_isSet;
}

bool OAIOfferPriceTax::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIOfferPriceTax::getType() const {
    return m_type;
}
void OAIOfferPriceTax::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOfferPriceTax::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOfferPriceTax::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIOfferPriceTax::getValue() const {
    return m_value;
}
void OAIOfferPriceTax::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIOfferPriceTax::is_value_Set() const{
    return m_value_isSet;
}

bool OAIOfferPriceTax::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIOfferPriceTax::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferPriceTax::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
