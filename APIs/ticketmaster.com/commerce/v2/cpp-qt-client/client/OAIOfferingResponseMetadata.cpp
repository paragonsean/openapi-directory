/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferingResponseMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferingResponseMetadata::OAIOfferingResponseMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferingResponseMetadata::OAIOfferingResponseMetadata() {
    this->initializeModel();
}

OAIOfferingResponseMetadata::~OAIOfferingResponseMetadata() {}

void OAIOfferingResponseMetadata::initializeModel() {

    m_accessible_seating_enabled_isSet = false;
    m_accessible_seating_enabled_isValid = false;

    m_event_mapping_isSet = false;
    m_event_mapping_isValid = false;
}

void OAIOfferingResponseMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferingResponseMetadata::fromJsonObject(QJsonObject json) {

    m_accessible_seating_enabled_isValid = ::OpenAPI::fromJsonValue(m_accessible_seating_enabled, json[QString("accessibleSeatingEnabled")]);
    m_accessible_seating_enabled_isSet = !json[QString("accessibleSeatingEnabled")].isNull() && m_accessible_seating_enabled_isValid;

    m_event_mapping_isValid = ::OpenAPI::fromJsonValue(m_event_mapping, json[QString("eventMapping")]);
    m_event_mapping_isSet = !json[QString("eventMapping")].isNull() && m_event_mapping_isValid;
}

QString OAIOfferingResponseMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferingResponseMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_accessible_seating_enabled_isSet) {
        obj.insert(QString("accessibleSeatingEnabled"), ::OpenAPI::toJsonValue(m_accessible_seating_enabled));
    }
    if (m_event_mapping.isSet()) {
        obj.insert(QString("eventMapping"), ::OpenAPI::toJsonValue(m_event_mapping));
    }
    return obj;
}

bool OAIOfferingResponseMetadata::isAccessibleSeatingEnabled() const {
    return m_accessible_seating_enabled;
}
void OAIOfferingResponseMetadata::setAccessibleSeatingEnabled(const bool &accessible_seating_enabled) {
    m_accessible_seating_enabled = accessible_seating_enabled;
    m_accessible_seating_enabled_isSet = true;
}

bool OAIOfferingResponseMetadata::is_accessible_seating_enabled_Set() const{
    return m_accessible_seating_enabled_isSet;
}

bool OAIOfferingResponseMetadata::is_accessible_seating_enabled_Valid() const{
    return m_accessible_seating_enabled_isValid;
}

OAIEventMappingView OAIOfferingResponseMetadata::getEventMapping() const {
    return m_event_mapping;
}
void OAIOfferingResponseMetadata::setEventMapping(const OAIEventMappingView &event_mapping) {
    m_event_mapping = event_mapping;
    m_event_mapping_isSet = true;
}

bool OAIOfferingResponseMetadata::is_event_mapping_Set() const{
    return m_event_mapping_isSet;
}

bool OAIOfferingResponseMetadata::is_event_mapping_Valid() const{
    return m_event_mapping_isValid;
}

bool OAIOfferingResponseMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessible_seating_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_mapping.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferingResponseMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
