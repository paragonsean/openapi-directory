/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferingResponseEmbeddedData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferingResponseEmbeddedData::OAIOfferingResponseEmbeddedData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferingResponseEmbeddedData::OAIOfferingResponseEmbeddedData() {
    this->initializeModel();
}

OAIOfferingResponseEmbeddedData::~OAIOfferingResponseEmbeddedData() {}

void OAIOfferingResponseEmbeddedData::initializeModel() {

    m_areas_isSet = false;
    m_areas_isValid = false;

    m_attributes_refs_isSet = false;
    m_attributes_refs_isValid = false;

    m_holds_isSet = false;
    m_holds_isValid = false;

    m_passwords_isSet = false;
    m_passwords_isValid = false;

    m_price_zones_isSet = false;
    m_price_zones_isValid = false;
}

void OAIOfferingResponseEmbeddedData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferingResponseEmbeddedData::fromJsonObject(QJsonObject json) {

    m_areas_isValid = ::OpenAPI::fromJsonValue(m_areas, json[QString("areas")]);
    m_areas_isSet = !json[QString("areas")].isNull() && m_areas_isValid;

    m_attributes_refs_isValid = ::OpenAPI::fromJsonValue(m_attributes_refs, json[QString("attributesRefs")]);
    m_attributes_refs_isSet = !json[QString("attributesRefs")].isNull() && m_attributes_refs_isValid;

    m_holds_isValid = ::OpenAPI::fromJsonValue(m_holds, json[QString("holds")]);
    m_holds_isSet = !json[QString("holds")].isNull() && m_holds_isValid;

    m_passwords_isValid = ::OpenAPI::fromJsonValue(m_passwords, json[QString("passwords")]);
    m_passwords_isSet = !json[QString("passwords")].isNull() && m_passwords_isValid;

    m_price_zones_isValid = ::OpenAPI::fromJsonValue(m_price_zones, json[QString("priceZones")]);
    m_price_zones_isSet = !json[QString("priceZones")].isNull() && m_price_zones_isValid;
}

QString OAIOfferingResponseEmbeddedData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferingResponseEmbeddedData::asJsonObject() const {
    QJsonObject obj;
    if (m_areas.isSet()) {
        obj.insert(QString("areas"), ::OpenAPI::toJsonValue(m_areas));
    }
    if (m_attributes_refs.isSet()) {
        obj.insert(QString("attributesRefs"), ::OpenAPI::toJsonValue(m_attributes_refs));
    }
    if (m_holds.isSet()) {
        obj.insert(QString("holds"), ::OpenAPI::toJsonValue(m_holds));
    }
    if (m_passwords.isSet()) {
        obj.insert(QString("passwords"), ::OpenAPI::toJsonValue(m_passwords));
    }
    if (m_price_zones.isSet()) {
        obj.insert(QString("priceZones"), ::OpenAPI::toJsonValue(m_price_zones));
    }
    return obj;
}

OAIResponseObjectListAreaSimpleLinks OAIOfferingResponseEmbeddedData::getAreas() const {
    return m_areas;
}
void OAIOfferingResponseEmbeddedData::setAreas(const OAIResponseObjectListAreaSimpleLinks &areas) {
    m_areas = areas;
    m_areas_isSet = true;
}

bool OAIOfferingResponseEmbeddedData::is_areas_Set() const{
    return m_areas_isSet;
}

bool OAIOfferingResponseEmbeddedData::is_areas_Valid() const{
    return m_areas_isValid;
}

OAIResponseObjectListAttributeRefSimpleLinks OAIOfferingResponseEmbeddedData::getAttributesRefs() const {
    return m_attributes_refs;
}
void OAIOfferingResponseEmbeddedData::setAttributesRefs(const OAIResponseObjectListAttributeRefSimpleLinks &attributes_refs) {
    m_attributes_refs = attributes_refs;
    m_attributes_refs_isSet = true;
}

bool OAIOfferingResponseEmbeddedData::is_attributes_refs_Set() const{
    return m_attributes_refs_isSet;
}

bool OAIOfferingResponseEmbeddedData::is_attributes_refs_Valid() const{
    return m_attributes_refs_isValid;
}

OAIResponseObjectListHoldRefSimpleLinks OAIOfferingResponseEmbeddedData::getHolds() const {
    return m_holds;
}
void OAIOfferingResponseEmbeddedData::setHolds(const OAIResponseObjectListHoldRefSimpleLinks &holds) {
    m_holds = holds;
    m_holds_isSet = true;
}

bool OAIOfferingResponseEmbeddedData::is_holds_Set() const{
    return m_holds_isSet;
}

bool OAIOfferingResponseEmbeddedData::is_holds_Valid() const{
    return m_holds_isValid;
}

OAIResponseObjectListPasswordSimpleLinks OAIOfferingResponseEmbeddedData::getPasswords() const {
    return m_passwords;
}
void OAIOfferingResponseEmbeddedData::setPasswords(const OAIResponseObjectListPasswordSimpleLinks &passwords) {
    m_passwords = passwords;
    m_passwords_isSet = true;
}

bool OAIOfferingResponseEmbeddedData::is_passwords_Set() const{
    return m_passwords_isSet;
}

bool OAIOfferingResponseEmbeddedData::is_passwords_Valid() const{
    return m_passwords_isValid;
}

OAIResponseObjectListPriceZoneSimpleLinks OAIOfferingResponseEmbeddedData::getPriceZones() const {
    return m_price_zones;
}
void OAIOfferingResponseEmbeddedData::setPriceZones(const OAIResponseObjectListPriceZoneSimpleLinks &price_zones) {
    m_price_zones = price_zones;
    m_price_zones_isSet = true;
}

bool OAIOfferingResponseEmbeddedData::is_price_zones_Set() const{
    return m_price_zones_isSet;
}

bool OAIOfferingResponseEmbeddedData::is_price_zones_Valid() const{
    return m_price_zones_isValid;
}

bool OAIOfferingResponseEmbeddedData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_areas.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_refs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_holds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passwords.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferingResponseEmbeddedData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
