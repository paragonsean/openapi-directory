/**
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferedPriceAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferedPriceAttributes::OAIOfferedPriceAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferedPriceAttributes::OAIOfferedPriceAttributes() {
    this->initializeModel();
}

OAIOfferedPriceAttributes::~OAIOfferedPriceAttributes() {}

void OAIOfferedPriceAttributes::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIOfferedPriceAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferedPriceAttributes::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIOfferedPriceAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferedPriceAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIOfferedPriceAttributes::getCurrency() const {
    return m_currency;
}
void OAIOfferedPriceAttributes::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIOfferedPriceAttributes::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIOfferedPriceAttributes::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIOfferedPriceAttributes::getValue() const {
    return m_value;
}
void OAIOfferedPriceAttributes::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIOfferedPriceAttributes::is_value_Set() const{
    return m_value_isSet;
}

bool OAIOfferedPriceAttributes::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIOfferedPriceAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferedPriceAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
