/*
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EventMappingView;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OfferingResponseMetadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:47.435394-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OfferingResponseMetadata {
  public static final String SERIALIZED_NAME_ACCESSIBLE_SEATING_ENABLED = "accessibleSeatingEnabled";
  @SerializedName(SERIALIZED_NAME_ACCESSIBLE_SEATING_ENABLED)
  private Boolean accessibleSeatingEnabled = false;

  public static final String SERIALIZED_NAME_EVENT_MAPPING = "eventMapping";
  @SerializedName(SERIALIZED_NAME_EVENT_MAPPING)
  private EventMappingView eventMapping;

  public OfferingResponseMetadata() {
  }

  public OfferingResponseMetadata accessibleSeatingEnabled(Boolean accessibleSeatingEnabled) {
    this.accessibleSeatingEnabled = accessibleSeatingEnabled;
    return this;
  }

  /**
   * Get accessibleSeatingEnabled
   * @return accessibleSeatingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAccessibleSeatingEnabled() {
    return accessibleSeatingEnabled;
  }

  public void setAccessibleSeatingEnabled(Boolean accessibleSeatingEnabled) {
    this.accessibleSeatingEnabled = accessibleSeatingEnabled;
  }


  public OfferingResponseMetadata eventMapping(EventMappingView eventMapping) {
    this.eventMapping = eventMapping;
    return this;
  }

  /**
   * Get eventMapping
   * @return eventMapping
   */
  @javax.annotation.Nullable
  public EventMappingView getEventMapping() {
    return eventMapping;
  }

  public void setEventMapping(EventMappingView eventMapping) {
    this.eventMapping = eventMapping;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfferingResponseMetadata offeringResponseMetadata = (OfferingResponseMetadata) o;
    return Objects.equals(this.accessibleSeatingEnabled, offeringResponseMetadata.accessibleSeatingEnabled) &&
        Objects.equals(this.eventMapping, offeringResponseMetadata.eventMapping);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessibleSeatingEnabled, eventMapping);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfferingResponseMetadata {\n");
    sb.append("    accessibleSeatingEnabled: ").append(toIndentedString(accessibleSeatingEnabled)).append("\n");
    sb.append("    eventMapping: ").append(toIndentedString(eventMapping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessibleSeatingEnabled");
    openapiFields.add("eventMapping");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OfferingResponseMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OfferingResponseMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OfferingResponseMetadata is not found in the empty JSON string", OfferingResponseMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OfferingResponseMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OfferingResponseMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `eventMapping`
      if (jsonObj.get("eventMapping") != null && !jsonObj.get("eventMapping").isJsonNull()) {
        EventMappingView.validateJsonElement(jsonObj.get("eventMapping"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OfferingResponseMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OfferingResponseMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OfferingResponseMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OfferingResponseMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<OfferingResponseMetadata>() {
           @Override
           public void write(JsonWriter out, OfferingResponseMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OfferingResponseMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OfferingResponseMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OfferingResponseMetadata
   * @throws IOException if the JSON string is invalid with respect to OfferingResponseMetadata
   */
  public static OfferingResponseMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OfferingResponseMetadata.class);
  }

  /**
   * Convert an instance of OfferingResponseMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

