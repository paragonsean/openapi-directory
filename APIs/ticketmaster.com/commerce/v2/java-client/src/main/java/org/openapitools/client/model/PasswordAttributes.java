/*
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Prompt;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PasswordAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:47.435394-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PasswordAttributes {
  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private OffsetDateTime end;

  public static final String SERIALIZED_NAME_EXCLUSIVE = "exclusive";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE)
  private Boolean exclusive = false;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LINK_LABEL = "linkLabel";
  @SerializedName(SERIALIZED_NAME_LINK_LABEL)
  private String linkLabel;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROMPTS = "prompts";
  @SerializedName(SERIALIZED_NAME_PROMPTS)
  private List<Prompt> prompts = new ArrayList<>();

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private OffsetDateTime start;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TEXT_LABEL = "textLabel";
  @SerializedName(SERIALIZED_NAME_TEXT_LABEL)
  private String textLabel;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public PasswordAttributes() {
  }

  public PasswordAttributes end(OffsetDateTime end) {
    this.end = end;
    return this;
  }

  /**
   * Get end
   * @return end
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEnd() {
    return end;
  }

  public void setEnd(OffsetDateTime end) {
    this.end = end;
  }


  public PasswordAttributes exclusive(Boolean exclusive) {
    this.exclusive = exclusive;
    return this;
  }

  /**
   * Get exclusive
   * @return exclusive
   */
  @javax.annotation.Nullable
  public Boolean getExclusive() {
    return exclusive;
  }

  public void setExclusive(Boolean exclusive) {
    this.exclusive = exclusive;
  }


  public PasswordAttributes link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public PasswordAttributes linkLabel(String linkLabel) {
    this.linkLabel = linkLabel;
    return this;
  }

  /**
   * Get linkLabel
   * @return linkLabel
   */
  @javax.annotation.Nullable
  public String getLinkLabel() {
    return linkLabel;
  }

  public void setLinkLabel(String linkLabel) {
    this.linkLabel = linkLabel;
  }


  public PasswordAttributes name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PasswordAttributes prompts(List<Prompt> prompts) {
    this.prompts = prompts;
    return this;
  }

  public PasswordAttributes addPromptsItem(Prompt promptsItem) {
    if (this.prompts == null) {
      this.prompts = new ArrayList<>();
    }
    this.prompts.add(promptsItem);
    return this;
  }

  /**
   * Get prompts
   * @return prompts
   */
  @javax.annotation.Nullable
  public List<Prompt> getPrompts() {
    return prompts;
  }

  public void setPrompts(List<Prompt> prompts) {
    this.prompts = prompts;
  }


  public PasswordAttributes start(OffsetDateTime start) {
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStart() {
    return start;
  }

  public void setStart(OffsetDateTime start) {
    this.start = start;
  }


  public PasswordAttributes text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public PasswordAttributes textLabel(String textLabel) {
    this.textLabel = textLabel;
    return this;
  }

  /**
   * Get textLabel
   * @return textLabel
   */
  @javax.annotation.Nullable
  public String getTextLabel() {
    return textLabel;
  }

  public void setTextLabel(String textLabel) {
    this.textLabel = textLabel;
  }


  public PasswordAttributes type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasswordAttributes passwordAttributes = (PasswordAttributes) o;
    return Objects.equals(this.end, passwordAttributes.end) &&
        Objects.equals(this.exclusive, passwordAttributes.exclusive) &&
        Objects.equals(this.link, passwordAttributes.link) &&
        Objects.equals(this.linkLabel, passwordAttributes.linkLabel) &&
        Objects.equals(this.name, passwordAttributes.name) &&
        Objects.equals(this.prompts, passwordAttributes.prompts) &&
        Objects.equals(this.start, passwordAttributes.start) &&
        Objects.equals(this.text, passwordAttributes.text) &&
        Objects.equals(this.textLabel, passwordAttributes.textLabel) &&
        Objects.equals(this.type, passwordAttributes.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(end, exclusive, link, linkLabel, name, prompts, start, text, textLabel, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasswordAttributes {\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    exclusive: ").append(toIndentedString(exclusive)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    linkLabel: ").append(toIndentedString(linkLabel)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    prompts: ").append(toIndentedString(prompts)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    textLabel: ").append(toIndentedString(textLabel)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("end");
    openapiFields.add("exclusive");
    openapiFields.add("link");
    openapiFields.add("linkLabel");
    openapiFields.add("name");
    openapiFields.add("prompts");
    openapiFields.add("start");
    openapiFields.add("text");
    openapiFields.add("textLabel");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PasswordAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PasswordAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PasswordAttributes is not found in the empty JSON string", PasswordAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PasswordAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PasswordAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("linkLabel") != null && !jsonObj.get("linkLabel").isJsonNull()) && !jsonObj.get("linkLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkLabel").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("prompts") != null && !jsonObj.get("prompts").isJsonNull()) {
        JsonArray jsonArrayprompts = jsonObj.getAsJsonArray("prompts");
        if (jsonArrayprompts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("prompts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `prompts` to be an array in the JSON string but got `%s`", jsonObj.get("prompts").toString()));
          }

          // validate the optional field `prompts` (array)
          for (int i = 0; i < jsonArrayprompts.size(); i++) {
            Prompt.validateJsonElement(jsonArrayprompts.get(i));
          };
        }
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("textLabel") != null && !jsonObj.get("textLabel").isJsonNull()) && !jsonObj.get("textLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textLabel").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PasswordAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PasswordAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PasswordAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PasswordAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<PasswordAttributes>() {
           @Override
           public void write(JsonWriter out, PasswordAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PasswordAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PasswordAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PasswordAttributes
   * @throws IOException if the JSON string is invalid with respect to PasswordAttributes
   */
  public static PasswordAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PasswordAttributes.class);
  }

  /**
   * Convert an instance of PasswordAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

