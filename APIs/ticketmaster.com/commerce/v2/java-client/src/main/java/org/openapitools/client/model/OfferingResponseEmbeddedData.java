/*
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ResponseObjectListAreaSimpleLinks;
import org.openapitools.client.model.ResponseObjectListAttributeRefSimpleLinks;
import org.openapitools.client.model.ResponseObjectListHoldRefSimpleLinks;
import org.openapitools.client.model.ResponseObjectListPasswordSimpleLinks;
import org.openapitools.client.model.ResponseObjectListPriceZoneSimpleLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OfferingResponseEmbeddedData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:47.435394-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OfferingResponseEmbeddedData {
  public static final String SERIALIZED_NAME_AREAS = "areas";
  @SerializedName(SERIALIZED_NAME_AREAS)
  private ResponseObjectListAreaSimpleLinks areas;

  public static final String SERIALIZED_NAME_ATTRIBUTES_REFS = "attributesRefs";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES_REFS)
  private ResponseObjectListAttributeRefSimpleLinks attributesRefs;

  public static final String SERIALIZED_NAME_HOLDS = "holds";
  @SerializedName(SERIALIZED_NAME_HOLDS)
  private ResponseObjectListHoldRefSimpleLinks holds;

  public static final String SERIALIZED_NAME_PASSWORDS = "passwords";
  @SerializedName(SERIALIZED_NAME_PASSWORDS)
  private ResponseObjectListPasswordSimpleLinks passwords;

  public static final String SERIALIZED_NAME_PRICE_ZONES = "priceZones";
  @SerializedName(SERIALIZED_NAME_PRICE_ZONES)
  private ResponseObjectListPriceZoneSimpleLinks priceZones;

  public OfferingResponseEmbeddedData() {
  }

  public OfferingResponseEmbeddedData areas(ResponseObjectListAreaSimpleLinks areas) {
    this.areas = areas;
    return this;
  }

  /**
   * Get areas
   * @return areas
   */
  @javax.annotation.Nullable
  public ResponseObjectListAreaSimpleLinks getAreas() {
    return areas;
  }

  public void setAreas(ResponseObjectListAreaSimpleLinks areas) {
    this.areas = areas;
  }


  public OfferingResponseEmbeddedData attributesRefs(ResponseObjectListAttributeRefSimpleLinks attributesRefs) {
    this.attributesRefs = attributesRefs;
    return this;
  }

  /**
   * Get attributesRefs
   * @return attributesRefs
   */
  @javax.annotation.Nullable
  public ResponseObjectListAttributeRefSimpleLinks getAttributesRefs() {
    return attributesRefs;
  }

  public void setAttributesRefs(ResponseObjectListAttributeRefSimpleLinks attributesRefs) {
    this.attributesRefs = attributesRefs;
  }


  public OfferingResponseEmbeddedData holds(ResponseObjectListHoldRefSimpleLinks holds) {
    this.holds = holds;
    return this;
  }

  /**
   * Get holds
   * @return holds
   */
  @javax.annotation.Nullable
  public ResponseObjectListHoldRefSimpleLinks getHolds() {
    return holds;
  }

  public void setHolds(ResponseObjectListHoldRefSimpleLinks holds) {
    this.holds = holds;
  }


  public OfferingResponseEmbeddedData passwords(ResponseObjectListPasswordSimpleLinks passwords) {
    this.passwords = passwords;
    return this;
  }

  /**
   * Get passwords
   * @return passwords
   */
  @javax.annotation.Nullable
  public ResponseObjectListPasswordSimpleLinks getPasswords() {
    return passwords;
  }

  public void setPasswords(ResponseObjectListPasswordSimpleLinks passwords) {
    this.passwords = passwords;
  }


  public OfferingResponseEmbeddedData priceZones(ResponseObjectListPriceZoneSimpleLinks priceZones) {
    this.priceZones = priceZones;
    return this;
  }

  /**
   * Get priceZones
   * @return priceZones
   */
  @javax.annotation.Nullable
  public ResponseObjectListPriceZoneSimpleLinks getPriceZones() {
    return priceZones;
  }

  public void setPriceZones(ResponseObjectListPriceZoneSimpleLinks priceZones) {
    this.priceZones = priceZones;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfferingResponseEmbeddedData offeringResponseEmbeddedData = (OfferingResponseEmbeddedData) o;
    return Objects.equals(this.areas, offeringResponseEmbeddedData.areas) &&
        Objects.equals(this.attributesRefs, offeringResponseEmbeddedData.attributesRefs) &&
        Objects.equals(this.holds, offeringResponseEmbeddedData.holds) &&
        Objects.equals(this.passwords, offeringResponseEmbeddedData.passwords) &&
        Objects.equals(this.priceZones, offeringResponseEmbeddedData.priceZones);
  }

  @Override
  public int hashCode() {
    return Objects.hash(areas, attributesRefs, holds, passwords, priceZones);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfferingResponseEmbeddedData {\n");
    sb.append("    areas: ").append(toIndentedString(areas)).append("\n");
    sb.append("    attributesRefs: ").append(toIndentedString(attributesRefs)).append("\n");
    sb.append("    holds: ").append(toIndentedString(holds)).append("\n");
    sb.append("    passwords: ").append(toIndentedString(passwords)).append("\n");
    sb.append("    priceZones: ").append(toIndentedString(priceZones)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("areas");
    openapiFields.add("attributesRefs");
    openapiFields.add("holds");
    openapiFields.add("passwords");
    openapiFields.add("priceZones");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OfferingResponseEmbeddedData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OfferingResponseEmbeddedData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OfferingResponseEmbeddedData is not found in the empty JSON string", OfferingResponseEmbeddedData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OfferingResponseEmbeddedData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OfferingResponseEmbeddedData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `areas`
      if (jsonObj.get("areas") != null && !jsonObj.get("areas").isJsonNull()) {
        ResponseObjectListAreaSimpleLinks.validateJsonElement(jsonObj.get("areas"));
      }
      // validate the optional field `attributesRefs`
      if (jsonObj.get("attributesRefs") != null && !jsonObj.get("attributesRefs").isJsonNull()) {
        ResponseObjectListAttributeRefSimpleLinks.validateJsonElement(jsonObj.get("attributesRefs"));
      }
      // validate the optional field `holds`
      if (jsonObj.get("holds") != null && !jsonObj.get("holds").isJsonNull()) {
        ResponseObjectListHoldRefSimpleLinks.validateJsonElement(jsonObj.get("holds"));
      }
      // validate the optional field `passwords`
      if (jsonObj.get("passwords") != null && !jsonObj.get("passwords").isJsonNull()) {
        ResponseObjectListPasswordSimpleLinks.validateJsonElement(jsonObj.get("passwords"));
      }
      // validate the optional field `priceZones`
      if (jsonObj.get("priceZones") != null && !jsonObj.get("priceZones").isJsonNull()) {
        ResponseObjectListPriceZoneSimpleLinks.validateJsonElement(jsonObj.get("priceZones"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OfferingResponseEmbeddedData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OfferingResponseEmbeddedData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OfferingResponseEmbeddedData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OfferingResponseEmbeddedData.class));

       return (TypeAdapter<T>) new TypeAdapter<OfferingResponseEmbeddedData>() {
           @Override
           public void write(JsonWriter out, OfferingResponseEmbeddedData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OfferingResponseEmbeddedData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OfferingResponseEmbeddedData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OfferingResponseEmbeddedData
   * @throws IOException if the JSON string is invalid with respect to OfferingResponseEmbeddedData
   */
  public static OfferingResponseEmbeddedData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OfferingResponseEmbeddedData.class);
  }

  /**
   * Convert an instance of OfferingResponseEmbeddedData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

