/*
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ResponseObjectRefList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AreaRelationships
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:47.435394-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AreaRelationships {
  public static final String SERIALIZED_NAME_AREAS = "areas";
  @SerializedName(SERIALIZED_NAME_AREAS)
  private ResponseObjectRefList areas;

  public static final String SERIALIZED_NAME_OFFERS = "offers";
  @SerializedName(SERIALIZED_NAME_OFFERS)
  private ResponseObjectRefList offers;

  public static final String SERIALIZED_NAME_PRICE_ZONES = "priceZones";
  @SerializedName(SERIALIZED_NAME_PRICE_ZONES)
  private ResponseObjectRefList priceZones;

  public AreaRelationships() {
  }

  public AreaRelationships areas(ResponseObjectRefList areas) {
    this.areas = areas;
    return this;
  }

  /**
   * Get areas
   * @return areas
   */
  @javax.annotation.Nullable
  public ResponseObjectRefList getAreas() {
    return areas;
  }

  public void setAreas(ResponseObjectRefList areas) {
    this.areas = areas;
  }


  public AreaRelationships offers(ResponseObjectRefList offers) {
    this.offers = offers;
    return this;
  }

  /**
   * Get offers
   * @return offers
   */
  @javax.annotation.Nullable
  public ResponseObjectRefList getOffers() {
    return offers;
  }

  public void setOffers(ResponseObjectRefList offers) {
    this.offers = offers;
  }


  public AreaRelationships priceZones(ResponseObjectRefList priceZones) {
    this.priceZones = priceZones;
    return this;
  }

  /**
   * Get priceZones
   * @return priceZones
   */
  @javax.annotation.Nullable
  public ResponseObjectRefList getPriceZones() {
    return priceZones;
  }

  public void setPriceZones(ResponseObjectRefList priceZones) {
    this.priceZones = priceZones;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AreaRelationships areaRelationships = (AreaRelationships) o;
    return Objects.equals(this.areas, areaRelationships.areas) &&
        Objects.equals(this.offers, areaRelationships.offers) &&
        Objects.equals(this.priceZones, areaRelationships.priceZones);
  }

  @Override
  public int hashCode() {
    return Objects.hash(areas, offers, priceZones);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AreaRelationships {\n");
    sb.append("    areas: ").append(toIndentedString(areas)).append("\n");
    sb.append("    offers: ").append(toIndentedString(offers)).append("\n");
    sb.append("    priceZones: ").append(toIndentedString(priceZones)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("areas");
    openapiFields.add("offers");
    openapiFields.add("priceZones");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AreaRelationships
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AreaRelationships.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AreaRelationships is not found in the empty JSON string", AreaRelationships.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AreaRelationships.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AreaRelationships` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `areas`
      if (jsonObj.get("areas") != null && !jsonObj.get("areas").isJsonNull()) {
        ResponseObjectRefList.validateJsonElement(jsonObj.get("areas"));
      }
      // validate the optional field `offers`
      if (jsonObj.get("offers") != null && !jsonObj.get("offers").isJsonNull()) {
        ResponseObjectRefList.validateJsonElement(jsonObj.get("offers"));
      }
      // validate the optional field `priceZones`
      if (jsonObj.get("priceZones") != null && !jsonObj.get("priceZones").isJsonNull()) {
        ResponseObjectRefList.validateJsonElement(jsonObj.get("priceZones"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AreaRelationships.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AreaRelationships' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AreaRelationships> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AreaRelationships.class));

       return (TypeAdapter<T>) new TypeAdapter<AreaRelationships>() {
           @Override
           public void write(JsonWriter out, AreaRelationships value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AreaRelationships read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AreaRelationships given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AreaRelationships
   * @throws IOException if the JSON string is invalid with respect to AreaRelationships
   */
  public static AreaRelationships fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AreaRelationships.class);
  }

  /**
   * Convert an instance of AreaRelationships to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

