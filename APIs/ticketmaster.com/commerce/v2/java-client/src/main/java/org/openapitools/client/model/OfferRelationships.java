/*
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ResponseObjectRefList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OfferRelationships
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:47.435394-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OfferRelationships {
  public static final String SERIALIZED_NAME_AREAS = "areas";
  @SerializedName(SERIALIZED_NAME_AREAS)
  private ResponseObjectRefList areas;

  public static final String SERIALIZED_NAME_OFFER_SETS = "offerSets";
  @SerializedName(SERIALIZED_NAME_OFFER_SETS)
  private ResponseObjectRefList offerSets;

  public static final String SERIALIZED_NAME_PASSWORDS = "passwords";
  @SerializedName(SERIALIZED_NAME_PASSWORDS)
  private ResponseObjectRefList passwords;

  public static final String SERIALIZED_NAME_PRICE_ZONES = "priceZones";
  @SerializedName(SERIALIZED_NAME_PRICE_ZONES)
  private ResponseObjectRefList priceZones;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private ResponseObjectRefList products;

  public OfferRelationships() {
  }

  public OfferRelationships areas(ResponseObjectRefList areas) {
    this.areas = areas;
    return this;
  }

  /**
   * Get areas
   * @return areas
   */
  @javax.annotation.Nullable
  public ResponseObjectRefList getAreas() {
    return areas;
  }

  public void setAreas(ResponseObjectRefList areas) {
    this.areas = areas;
  }


  public OfferRelationships offerSets(ResponseObjectRefList offerSets) {
    this.offerSets = offerSets;
    return this;
  }

  /**
   * Get offerSets
   * @return offerSets
   */
  @javax.annotation.Nullable
  public ResponseObjectRefList getOfferSets() {
    return offerSets;
  }

  public void setOfferSets(ResponseObjectRefList offerSets) {
    this.offerSets = offerSets;
  }


  public OfferRelationships passwords(ResponseObjectRefList passwords) {
    this.passwords = passwords;
    return this;
  }

  /**
   * Get passwords
   * @return passwords
   */
  @javax.annotation.Nullable
  public ResponseObjectRefList getPasswords() {
    return passwords;
  }

  public void setPasswords(ResponseObjectRefList passwords) {
    this.passwords = passwords;
  }


  public OfferRelationships priceZones(ResponseObjectRefList priceZones) {
    this.priceZones = priceZones;
    return this;
  }

  /**
   * Get priceZones
   * @return priceZones
   */
  @javax.annotation.Nullable
  public ResponseObjectRefList getPriceZones() {
    return priceZones;
  }

  public void setPriceZones(ResponseObjectRefList priceZones) {
    this.priceZones = priceZones;
  }


  public OfferRelationships products(ResponseObjectRefList products) {
    this.products = products;
    return this;
  }

  /**
   * Get products
   * @return products
   */
  @javax.annotation.Nullable
  public ResponseObjectRefList getProducts() {
    return products;
  }

  public void setProducts(ResponseObjectRefList products) {
    this.products = products;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfferRelationships offerRelationships = (OfferRelationships) o;
    return Objects.equals(this.areas, offerRelationships.areas) &&
        Objects.equals(this.offerSets, offerRelationships.offerSets) &&
        Objects.equals(this.passwords, offerRelationships.passwords) &&
        Objects.equals(this.priceZones, offerRelationships.priceZones) &&
        Objects.equals(this.products, offerRelationships.products);
  }

  @Override
  public int hashCode() {
    return Objects.hash(areas, offerSets, passwords, priceZones, products);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfferRelationships {\n");
    sb.append("    areas: ").append(toIndentedString(areas)).append("\n");
    sb.append("    offerSets: ").append(toIndentedString(offerSets)).append("\n");
    sb.append("    passwords: ").append(toIndentedString(passwords)).append("\n");
    sb.append("    priceZones: ").append(toIndentedString(priceZones)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("areas");
    openapiFields.add("offerSets");
    openapiFields.add("passwords");
    openapiFields.add("priceZones");
    openapiFields.add("products");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OfferRelationships
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OfferRelationships.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OfferRelationships is not found in the empty JSON string", OfferRelationships.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OfferRelationships.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OfferRelationships` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `areas`
      if (jsonObj.get("areas") != null && !jsonObj.get("areas").isJsonNull()) {
        ResponseObjectRefList.validateJsonElement(jsonObj.get("areas"));
      }
      // validate the optional field `offerSets`
      if (jsonObj.get("offerSets") != null && !jsonObj.get("offerSets").isJsonNull()) {
        ResponseObjectRefList.validateJsonElement(jsonObj.get("offerSets"));
      }
      // validate the optional field `passwords`
      if (jsonObj.get("passwords") != null && !jsonObj.get("passwords").isJsonNull()) {
        ResponseObjectRefList.validateJsonElement(jsonObj.get("passwords"));
      }
      // validate the optional field `priceZones`
      if (jsonObj.get("priceZones") != null && !jsonObj.get("priceZones").isJsonNull()) {
        ResponseObjectRefList.validateJsonElement(jsonObj.get("priceZones"));
      }
      // validate the optional field `products`
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull()) {
        ResponseObjectRefList.validateJsonElement(jsonObj.get("products"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OfferRelationships.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OfferRelationships' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OfferRelationships> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OfferRelationships.class));

       return (TypeAdapter<T>) new TypeAdapter<OfferRelationships>() {
           @Override
           public void write(JsonWriter out, OfferRelationships value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OfferRelationships read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OfferRelationships given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OfferRelationships
   * @throws IOException if the JSON string is invalid with respect to OfferRelationships
   */
  public static OfferRelationships fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OfferRelationships.class);
  }

  /**
   * Convert an instance of OfferRelationships to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

