/*
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Limit;
import org.openapitools.client.model.Offer;
import org.openapitools.client.model.OfferingResponseEmbeddedData;
import org.openapitools.client.model.OfferingResponseMetadata;
import org.openapitools.client.model.ResponseObjectListOfferedPriceSimpleLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OfferingResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:47.435394-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OfferingResponse {
  public static final String SERIALIZED_NAME_EMBEDDED = "_embedded";
  @SerializedName(SERIALIZED_NAME_EMBEDDED)
  private OfferingResponseEmbeddedData embedded;

  public static final String SERIALIZED_NAME_DEBUG = "debug";
  @SerializedName(SERIALIZED_NAME_DEBUG)
  private List<String> debug = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIMITS = "limits";
  @SerializedName(SERIALIZED_NAME_LIMITS)
  private Limit limits;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private OfferingResponseMetadata metadata;

  public static final String SERIALIZED_NAME_OFFERS = "offers";
  @SerializedName(SERIALIZED_NAME_OFFERS)
  private List<Offer> offers = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICES = "prices";
  @SerializedName(SERIALIZED_NAME_PRICES)
  private ResponseObjectListOfferedPriceSimpleLinks prices;

  public OfferingResponse() {
  }

  public OfferingResponse embedded(OfferingResponseEmbeddedData embedded) {
    this.embedded = embedded;
    return this;
  }

  /**
   * Get embedded
   * @return embedded
   */
  @javax.annotation.Nullable
  public OfferingResponseEmbeddedData getEmbedded() {
    return embedded;
  }

  public void setEmbedded(OfferingResponseEmbeddedData embedded) {
    this.embedded = embedded;
  }


  public OfferingResponse debug(List<String> debug) {
    this.debug = debug;
    return this;
  }

  public OfferingResponse addDebugItem(String debugItem) {
    if (this.debug == null) {
      this.debug = new ArrayList<>();
    }
    this.debug.add(debugItem);
    return this;
  }

  /**
   * Get debug
   * @return debug
   */
  @javax.annotation.Nullable
  public List<String> getDebug() {
    return debug;
  }

  public void setDebug(List<String> debug) {
    this.debug = debug;
  }


  public OfferingResponse limits(Limit limits) {
    this.limits = limits;
    return this;
  }

  /**
   * Get limits
   * @return limits
   */
  @javax.annotation.Nullable
  public Limit getLimits() {
    return limits;
  }

  public void setLimits(Limit limits) {
    this.limits = limits;
  }


  public OfferingResponse metadata(OfferingResponseMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public OfferingResponseMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(OfferingResponseMetadata metadata) {
    this.metadata = metadata;
  }


  public OfferingResponse offers(List<Offer> offers) {
    this.offers = offers;
    return this;
  }

  public OfferingResponse addOffersItem(Offer offersItem) {
    if (this.offers == null) {
      this.offers = new ArrayList<>();
    }
    this.offers.add(offersItem);
    return this;
  }

  /**
   * Get offers
   * @return offers
   */
  @javax.annotation.Nullable
  public List<Offer> getOffers() {
    return offers;
  }

  public void setOffers(List<Offer> offers) {
    this.offers = offers;
  }


  public OfferingResponse prices(ResponseObjectListOfferedPriceSimpleLinks prices) {
    this.prices = prices;
    return this;
  }

  /**
   * Get prices
   * @return prices
   */
  @javax.annotation.Nullable
  public ResponseObjectListOfferedPriceSimpleLinks getPrices() {
    return prices;
  }

  public void setPrices(ResponseObjectListOfferedPriceSimpleLinks prices) {
    this.prices = prices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OfferingResponse offeringResponse = (OfferingResponse) o;
    return Objects.equals(this.embedded, offeringResponse.embedded) &&
        Objects.equals(this.debug, offeringResponse.debug) &&
        Objects.equals(this.limits, offeringResponse.limits) &&
        Objects.equals(this.metadata, offeringResponse.metadata) &&
        Objects.equals(this.offers, offeringResponse.offers) &&
        Objects.equals(this.prices, offeringResponse.prices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(embedded, debug, limits, metadata, offers, prices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OfferingResponse {\n");
    sb.append("    embedded: ").append(toIndentedString(embedded)).append("\n");
    sb.append("    debug: ").append(toIndentedString(debug)).append("\n");
    sb.append("    limits: ").append(toIndentedString(limits)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    offers: ").append(toIndentedString(offers)).append("\n");
    sb.append("    prices: ").append(toIndentedString(prices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_embedded");
    openapiFields.add("debug");
    openapiFields.add("limits");
    openapiFields.add("metadata");
    openapiFields.add("offers");
    openapiFields.add("prices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OfferingResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OfferingResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OfferingResponse is not found in the empty JSON string", OfferingResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OfferingResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OfferingResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `_embedded`
      if (jsonObj.get("_embedded") != null && !jsonObj.get("_embedded").isJsonNull()) {
        OfferingResponseEmbeddedData.validateJsonElement(jsonObj.get("_embedded"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("debug") != null && !jsonObj.get("debug").isJsonNull() && !jsonObj.get("debug").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `debug` to be an array in the JSON string but got `%s`", jsonObj.get("debug").toString()));
      }
      // validate the optional field `limits`
      if (jsonObj.get("limits") != null && !jsonObj.get("limits").isJsonNull()) {
        Limit.validateJsonElement(jsonObj.get("limits"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        OfferingResponseMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if (jsonObj.get("offers") != null && !jsonObj.get("offers").isJsonNull()) {
        JsonArray jsonArrayoffers = jsonObj.getAsJsonArray("offers");
        if (jsonArrayoffers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("offers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `offers` to be an array in the JSON string but got `%s`", jsonObj.get("offers").toString()));
          }

          // validate the optional field `offers` (array)
          for (int i = 0; i < jsonArrayoffers.size(); i++) {
            Offer.validateJsonElement(jsonArrayoffers.get(i));
          };
        }
      }
      // validate the optional field `prices`
      if (jsonObj.get("prices") != null && !jsonObj.get("prices").isJsonNull()) {
        ResponseObjectListOfferedPriceSimpleLinks.validateJsonElement(jsonObj.get("prices"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OfferingResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OfferingResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OfferingResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OfferingResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<OfferingResponse>() {
           @Override
           public void write(JsonWriter out, OfferingResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OfferingResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OfferingResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OfferingResponse
   * @throws IOException if the JSON string is invalid with respect to OfferingResponse
   */
  public static OfferingResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OfferingResponse.class);
  }

  /**
   * Convert an instance of OfferingResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

