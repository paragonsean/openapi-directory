/*
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.OfferingResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getEventOffers
     * @param eventId Event Identifier (required)
     * @param X_SSL_CERT_UID API Key for external API developer (optional)
     * @param X_TM_ACCESS_TOKEN Access token for (optional)
     * @param accessToken Query Param Access Token (optional)
     * @param apiKey Query Param API Key for external API developer (optional)
     * @param body displayId to un-hide protected offers (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventOffersCall(String eventId, String X_SSL_CERT_UID, String X_TM_ACCESS_TOKEN, String accessToken, String apiKey, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/commerce/v2/events/{eventId}/offers"
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-key", apiKey));
        }

        if (X_SSL_CERT_UID != null) {
            localVarHeaderParams.put("X-SSL-CERT-UID", localVarApiClient.parameterToString(X_SSL_CERT_UID));
        }

        if (X_TM_ACCESS_TOKEN != null) {
            localVarHeaderParams.put("X-TM-ACCESS-TOKEN", localVarApiClient.parameterToString(X_TM_ACCESS_TOKEN));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventOffersValidateBeforeCall(String eventId, String X_SSL_CERT_UID, String X_TM_ACCESS_TOKEN, String accessToken, String apiKey, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEventOffers(Async)");
        }

        return getEventOffersCall(eventId, X_SSL_CERT_UID, X_TM_ACCESS_TOKEN, accessToken, apiKey, body, _callback);

    }

    /**
     * Event Offers
     * Returns Event Offers.
     * @param eventId Event Identifier (required)
     * @param X_SSL_CERT_UID API Key for external API developer (optional)
     * @param X_TM_ACCESS_TOKEN Access token for (optional)
     * @param accessToken Query Param Access Token (optional)
     * @param apiKey Query Param API Key for external API developer (optional)
     * @param body displayId to un-hide protected offers (optional)
     * @return OfferingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OfferingResponse getEventOffers(String eventId, String X_SSL_CERT_UID, String X_TM_ACCESS_TOKEN, String accessToken, String apiKey, String body) throws ApiException {
        ApiResponse<OfferingResponse> localVarResp = getEventOffersWithHttpInfo(eventId, X_SSL_CERT_UID, X_TM_ACCESS_TOKEN, accessToken, apiKey, body);
        return localVarResp.getData();
    }

    /**
     * Event Offers
     * Returns Event Offers.
     * @param eventId Event Identifier (required)
     * @param X_SSL_CERT_UID API Key for external API developer (optional)
     * @param X_TM_ACCESS_TOKEN Access token for (optional)
     * @param accessToken Query Param Access Token (optional)
     * @param apiKey Query Param API Key for external API developer (optional)
     * @param body displayId to un-hide protected offers (optional)
     * @return ApiResponse&lt;OfferingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OfferingResponse> getEventOffersWithHttpInfo(String eventId, String X_SSL_CERT_UID, String X_TM_ACCESS_TOKEN, String accessToken, String apiKey, String body) throws ApiException {
        okhttp3.Call localVarCall = getEventOffersValidateBeforeCall(eventId, X_SSL_CERT_UID, X_TM_ACCESS_TOKEN, accessToken, apiKey, body, null);
        Type localVarReturnType = new TypeToken<OfferingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Event Offers (asynchronously)
     * Returns Event Offers.
     * @param eventId Event Identifier (required)
     * @param X_SSL_CERT_UID API Key for external API developer (optional)
     * @param X_TM_ACCESS_TOKEN Access token for (optional)
     * @param accessToken Query Param Access Token (optional)
     * @param apiKey Query Param API Key for external API developer (optional)
     * @param body displayId to un-hide protected offers (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventOffersAsync(String eventId, String X_SSL_CERT_UID, String X_TM_ACCESS_TOKEN, String accessToken, String apiKey, String body, final ApiCallback<OfferingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventOffersValidateBeforeCall(eventId, X_SSL_CERT_UID, X_TM_ACCESS_TOKEN, accessToken, apiKey, body, _callback);
        Type localVarReturnType = new TypeToken<OfferingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
