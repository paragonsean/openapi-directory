/*
 * Commerce API
 * Use the Ticketmaster Commerce API to look up available offers and products on various Ticketmaster platforms for North America markets. For formal partnerships and relationships, selected offers and products can be carted and transacted on through the cart, delivery, payment and purchase APIs â€“ These APIs require approved access from Ticketmaster.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Limit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:47.435394-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Limit {
  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Integer max;

  public static final String SERIALIZED_NAME_MAX_ACCESSIBLE_SEATS = "maxAccessibleSeats";
  @SerializedName(SERIALIZED_NAME_MAX_ACCESSIBLE_SEATS)
  private Integer maxAccessibleSeats;

  public static final String SERIALIZED_NAME_MAX_COMPANION_SEATS_PER_ACCESSIBLE_SEAT = "maxCompanionSeatsPerAccessibleSeat";
  @SerializedName(SERIALIZED_NAME_MAX_COMPANION_SEATS_PER_ACCESSIBLE_SEAT)
  private Integer maxCompanionSeatsPerAccessibleSeat;

  public static final String SERIALIZED_NAME_MIN = "min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private Integer min;

  public static final String SERIALIZED_NAME_MULTIPLES = "multiples";
  @SerializedName(SERIALIZED_NAME_MULTIPLES)
  private Integer multiples;

  public static final String SERIALIZED_NAME_SELLABLE_QTY = "sellableQty";
  @SerializedName(SERIALIZED_NAME_SELLABLE_QTY)
  private String sellableQty;

  public Limit() {
  }

  public Limit max(Integer max) {
    this.max = max;
    return this;
  }

  /**
   * Get max
   * @return max
   */
  @javax.annotation.Nullable
  public Integer getMax() {
    return max;
  }

  public void setMax(Integer max) {
    this.max = max;
  }


  public Limit maxAccessibleSeats(Integer maxAccessibleSeats) {
    this.maxAccessibleSeats = maxAccessibleSeats;
    return this;
  }

  /**
   * Get maxAccessibleSeats
   * @return maxAccessibleSeats
   */
  @javax.annotation.Nullable
  public Integer getMaxAccessibleSeats() {
    return maxAccessibleSeats;
  }

  public void setMaxAccessibleSeats(Integer maxAccessibleSeats) {
    this.maxAccessibleSeats = maxAccessibleSeats;
  }


  public Limit maxCompanionSeatsPerAccessibleSeat(Integer maxCompanionSeatsPerAccessibleSeat) {
    this.maxCompanionSeatsPerAccessibleSeat = maxCompanionSeatsPerAccessibleSeat;
    return this;
  }

  /**
   * Get maxCompanionSeatsPerAccessibleSeat
   * @return maxCompanionSeatsPerAccessibleSeat
   */
  @javax.annotation.Nullable
  public Integer getMaxCompanionSeatsPerAccessibleSeat() {
    return maxCompanionSeatsPerAccessibleSeat;
  }

  public void setMaxCompanionSeatsPerAccessibleSeat(Integer maxCompanionSeatsPerAccessibleSeat) {
    this.maxCompanionSeatsPerAccessibleSeat = maxCompanionSeatsPerAccessibleSeat;
  }


  public Limit min(Integer min) {
    this.min = min;
    return this;
  }

  /**
   * Get min
   * @return min
   */
  @javax.annotation.Nullable
  public Integer getMin() {
    return min;
  }

  public void setMin(Integer min) {
    this.min = min;
  }


  public Limit multiples(Integer multiples) {
    this.multiples = multiples;
    return this;
  }

  /**
   * Get multiples
   * @return multiples
   */
  @javax.annotation.Nullable
  public Integer getMultiples() {
    return multiples;
  }

  public void setMultiples(Integer multiples) {
    this.multiples = multiples;
  }


  public Limit sellableQty(String sellableQty) {
    this.sellableQty = sellableQty;
    return this;
  }

  /**
   * Get sellableQty
   * @return sellableQty
   */
  @javax.annotation.Nullable
  public String getSellableQty() {
    return sellableQty;
  }

  public void setSellableQty(String sellableQty) {
    this.sellableQty = sellableQty;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Limit limit = (Limit) o;
    return Objects.equals(this.max, limit.max) &&
        Objects.equals(this.maxAccessibleSeats, limit.maxAccessibleSeats) &&
        Objects.equals(this.maxCompanionSeatsPerAccessibleSeat, limit.maxCompanionSeatsPerAccessibleSeat) &&
        Objects.equals(this.min, limit.min) &&
        Objects.equals(this.multiples, limit.multiples) &&
        Objects.equals(this.sellableQty, limit.sellableQty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(max, maxAccessibleSeats, maxCompanionSeatsPerAccessibleSeat, min, multiples, sellableQty);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Limit {\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    maxAccessibleSeats: ").append(toIndentedString(maxAccessibleSeats)).append("\n");
    sb.append("    maxCompanionSeatsPerAccessibleSeat: ").append(toIndentedString(maxCompanionSeatsPerAccessibleSeat)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    multiples: ").append(toIndentedString(multiples)).append("\n");
    sb.append("    sellableQty: ").append(toIndentedString(sellableQty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("max");
    openapiFields.add("maxAccessibleSeats");
    openapiFields.add("maxCompanionSeatsPerAccessibleSeat");
    openapiFields.add("min");
    openapiFields.add("multiples");
    openapiFields.add("sellableQty");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Limit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Limit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Limit is not found in the empty JSON string", Limit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Limit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Limit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sellableQty") != null && !jsonObj.get("sellableQty").isJsonNull()) && !jsonObj.get("sellableQty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellableQty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellableQty").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Limit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Limit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Limit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Limit.class));

       return (TypeAdapter<T>) new TypeAdapter<Limit>() {
           @Override
           public void write(JsonWriter out, Limit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Limit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Limit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Limit
   * @throws IOException if the JSON string is invalid with respect to Limit
   */
  public static Limit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Limit.class);
  }

  /**
   * Convert an instance of Limit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

