/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDateTimeField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDateTimeField::OAIDateTimeField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDateTimeField::OAIDateTimeField() {
    this->initializeModel();
}

OAIDateTimeField::~OAIDateTimeField() {}

void OAIDateTimeField::initializeModel() {

    m_duration_field_isSet = false;
    m_duration_field_isValid = false;

    m_leap_duration_field_isSet = false;
    m_leap_duration_field_isValid = false;

    m_lenient_isSet = false;
    m_lenient_isValid = false;

    m_maximum_value_isSet = false;
    m_maximum_value_isValid = false;

    m_minimum_value_isSet = false;
    m_minimum_value_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_range_duration_field_isSet = false;
    m_range_duration_field_isValid = false;

    m_supported_isSet = false;
    m_supported_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDateTimeField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDateTimeField::fromJsonObject(QJsonObject json) {

    m_duration_field_isValid = ::OpenAPI::fromJsonValue(m_duration_field, json[QString("durationField")]);
    m_duration_field_isSet = !json[QString("durationField")].isNull() && m_duration_field_isValid;

    m_leap_duration_field_isValid = ::OpenAPI::fromJsonValue(m_leap_duration_field, json[QString("leapDurationField")]);
    m_leap_duration_field_isSet = !json[QString("leapDurationField")].isNull() && m_leap_duration_field_isValid;

    m_lenient_isValid = ::OpenAPI::fromJsonValue(m_lenient, json[QString("lenient")]);
    m_lenient_isSet = !json[QString("lenient")].isNull() && m_lenient_isValid;

    m_maximum_value_isValid = ::OpenAPI::fromJsonValue(m_maximum_value, json[QString("maximumValue")]);
    m_maximum_value_isSet = !json[QString("maximumValue")].isNull() && m_maximum_value_isValid;

    m_minimum_value_isValid = ::OpenAPI::fromJsonValue(m_minimum_value, json[QString("minimumValue")]);
    m_minimum_value_isSet = !json[QString("minimumValue")].isNull() && m_minimum_value_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_range_duration_field_isValid = ::OpenAPI::fromJsonValue(m_range_duration_field, json[QString("rangeDurationField")]);
    m_range_duration_field_isSet = !json[QString("rangeDurationField")].isNull() && m_range_duration_field_isValid;

    m_supported_isValid = ::OpenAPI::fromJsonValue(m_supported, json[QString("supported")]);
    m_supported_isSet = !json[QString("supported")].isNull() && m_supported_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDateTimeField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDateTimeField::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_field.isSet()) {
        obj.insert(QString("durationField"), ::OpenAPI::toJsonValue(m_duration_field));
    }
    if (m_leap_duration_field.isSet()) {
        obj.insert(QString("leapDurationField"), ::OpenAPI::toJsonValue(m_leap_duration_field));
    }
    if (m_lenient_isSet) {
        obj.insert(QString("lenient"), ::OpenAPI::toJsonValue(m_lenient));
    }
    if (m_maximum_value_isSet) {
        obj.insert(QString("maximumValue"), ::OpenAPI::toJsonValue(m_maximum_value));
    }
    if (m_minimum_value_isSet) {
        obj.insert(QString("minimumValue"), ::OpenAPI::toJsonValue(m_minimum_value));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_range_duration_field.isSet()) {
        obj.insert(QString("rangeDurationField"), ::OpenAPI::toJsonValue(m_range_duration_field));
    }
    if (m_supported_isSet) {
        obj.insert(QString("supported"), ::OpenAPI::toJsonValue(m_supported));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIDurationField OAIDateTimeField::getDurationField() const {
    return m_duration_field;
}
void OAIDateTimeField::setDurationField(const OAIDurationField &duration_field) {
    m_duration_field = duration_field;
    m_duration_field_isSet = true;
}

bool OAIDateTimeField::is_duration_field_Set() const{
    return m_duration_field_isSet;
}

bool OAIDateTimeField::is_duration_field_Valid() const{
    return m_duration_field_isValid;
}

OAIDurationField OAIDateTimeField::getLeapDurationField() const {
    return m_leap_duration_field;
}
void OAIDateTimeField::setLeapDurationField(const OAIDurationField &leap_duration_field) {
    m_leap_duration_field = leap_duration_field;
    m_leap_duration_field_isSet = true;
}

bool OAIDateTimeField::is_leap_duration_field_Set() const{
    return m_leap_duration_field_isSet;
}

bool OAIDateTimeField::is_leap_duration_field_Valid() const{
    return m_leap_duration_field_isValid;
}

bool OAIDateTimeField::isLenient() const {
    return m_lenient;
}
void OAIDateTimeField::setLenient(const bool &lenient) {
    m_lenient = lenient;
    m_lenient_isSet = true;
}

bool OAIDateTimeField::is_lenient_Set() const{
    return m_lenient_isSet;
}

bool OAIDateTimeField::is_lenient_Valid() const{
    return m_lenient_isValid;
}

qint32 OAIDateTimeField::getMaximumValue() const {
    return m_maximum_value;
}
void OAIDateTimeField::setMaximumValue(const qint32 &maximum_value) {
    m_maximum_value = maximum_value;
    m_maximum_value_isSet = true;
}

bool OAIDateTimeField::is_maximum_value_Set() const{
    return m_maximum_value_isSet;
}

bool OAIDateTimeField::is_maximum_value_Valid() const{
    return m_maximum_value_isValid;
}

qint32 OAIDateTimeField::getMinimumValue() const {
    return m_minimum_value;
}
void OAIDateTimeField::setMinimumValue(const qint32 &minimum_value) {
    m_minimum_value = minimum_value;
    m_minimum_value_isSet = true;
}

bool OAIDateTimeField::is_minimum_value_Set() const{
    return m_minimum_value_isSet;
}

bool OAIDateTimeField::is_minimum_value_Valid() const{
    return m_minimum_value_isValid;
}

QString OAIDateTimeField::getName() const {
    return m_name;
}
void OAIDateTimeField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDateTimeField::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDateTimeField::is_name_Valid() const{
    return m_name_isValid;
}

OAIDurationField OAIDateTimeField::getRangeDurationField() const {
    return m_range_duration_field;
}
void OAIDateTimeField::setRangeDurationField(const OAIDurationField &range_duration_field) {
    m_range_duration_field = range_duration_field;
    m_range_duration_field_isSet = true;
}

bool OAIDateTimeField::is_range_duration_field_Set() const{
    return m_range_duration_field_isSet;
}

bool OAIDateTimeField::is_range_duration_field_Valid() const{
    return m_range_duration_field_isValid;
}

bool OAIDateTimeField::isSupported() const {
    return m_supported;
}
void OAIDateTimeField::setSupported(const bool &supported) {
    m_supported = supported;
    m_supported_isSet = true;
}

bool OAIDateTimeField::is_supported_Set() const{
    return m_supported_isSet;
}

bool OAIDateTimeField::is_supported_Valid() const{
    return m_supported_isValid;
}

OAIDateTimeFieldType OAIDateTimeField::getType() const {
    return m_type;
}
void OAIDateTimeField::setType(const OAIDateTimeFieldType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDateTimeField::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDateTimeField::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDateTimeField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_leap_duration_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lenient_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_duration_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDateTimeField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
