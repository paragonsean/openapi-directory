/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDurationField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDurationField::OAIDurationField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDurationField::OAIDurationField() {
    this->initializeModel();
}

OAIDurationField::~OAIDurationField() {}

void OAIDurationField::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_precise_isSet = false;
    m_precise_isValid = false;

    m_supported_isSet = false;
    m_supported_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unit_millis_isSet = false;
    m_unit_millis_isValid = false;
}

void OAIDurationField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDurationField::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_precise_isValid = ::OpenAPI::fromJsonValue(m_precise, json[QString("precise")]);
    m_precise_isSet = !json[QString("precise")].isNull() && m_precise_isValid;

    m_supported_isValid = ::OpenAPI::fromJsonValue(m_supported, json[QString("supported")]);
    m_supported_isSet = !json[QString("supported")].isNull() && m_supported_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unit_millis_isValid = ::OpenAPI::fromJsonValue(m_unit_millis, json[QString("unitMillis")]);
    m_unit_millis_isSet = !json[QString("unitMillis")].isNull() && m_unit_millis_isValid;
}

QString OAIDurationField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDurationField::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_precise_isSet) {
        obj.insert(QString("precise"), ::OpenAPI::toJsonValue(m_precise));
    }
    if (m_supported_isSet) {
        obj.insert(QString("supported"), ::OpenAPI::toJsonValue(m_supported));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unit_millis_isSet) {
        obj.insert(QString("unitMillis"), ::OpenAPI::toJsonValue(m_unit_millis));
    }
    return obj;
}

QString OAIDurationField::getName() const {
    return m_name;
}
void OAIDurationField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDurationField::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDurationField::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIDurationField::isPrecise() const {
    return m_precise;
}
void OAIDurationField::setPrecise(const bool &precise) {
    m_precise = precise;
    m_precise_isSet = true;
}

bool OAIDurationField::is_precise_Set() const{
    return m_precise_isSet;
}

bool OAIDurationField::is_precise_Valid() const{
    return m_precise_isValid;
}

bool OAIDurationField::isSupported() const {
    return m_supported;
}
void OAIDurationField::setSupported(const bool &supported) {
    m_supported = supported;
    m_supported_isSet = true;
}

bool OAIDurationField::is_supported_Set() const{
    return m_supported_isSet;
}

bool OAIDurationField::is_supported_Valid() const{
    return m_supported_isValid;
}

OAIDurationFieldType OAIDurationField::getType() const {
    return m_type;
}
void OAIDurationField::setType(const OAIDurationFieldType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDurationField::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDurationField::is_type_Valid() const{
    return m_type_isValid;
}

qint64 OAIDurationField::getUnitMillis() const {
    return m_unit_millis;
}
void OAIDurationField::setUnitMillis(const qint64 &unit_millis) {
    m_unit_millis = unit_millis;
    m_unit_millis_isSet = true;
}

bool OAIDurationField::is_unit_millis_Set() const{
    return m_unit_millis_isSet;
}

bool OAIDurationField::is_unit_millis_Valid() const{
    return m_unit_millis_isValid;
}

bool OAIDurationField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precise_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_millis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDurationField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
