/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClassification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClassification::OAIClassification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClassification::OAIClassification() {
    this->initializeModel();
}

OAIClassification::~OAIClassification() {}

void OAIClassification::initializeModel() {

    m_genre_isSet = false;
    m_genre_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_segment_isSet = false;
    m_segment_isValid = false;

    m_sub_genre_isSet = false;
    m_sub_genre_isValid = false;

    m_sub_type_isSet = false;
    m_sub_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIClassification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClassification::fromJsonObject(QJsonObject json) {

    m_genre_isValid = ::OpenAPI::fromJsonValue(m_genre, json[QString("genre")]);
    m_genre_isSet = !json[QString("genre")].isNull() && m_genre_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_segment_isValid = ::OpenAPI::fromJsonValue(m_segment, json[QString("segment")]);
    m_segment_isSet = !json[QString("segment")].isNull() && m_segment_isValid;

    m_sub_genre_isValid = ::OpenAPI::fromJsonValue(m_sub_genre, json[QString("subGenre")]);
    m_sub_genre_isSet = !json[QString("subGenre")].isNull() && m_sub_genre_isValid;

    m_sub_type_isValid = ::OpenAPI::fromJsonValue(m_sub_type, json[QString("subType")]);
    m_sub_type_isSet = !json[QString("subType")].isNull() && m_sub_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIClassification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClassification::asJsonObject() const {
    QJsonObject obj;
    if (m_genre.isSet()) {
        obj.insert(QString("genre"), ::OpenAPI::toJsonValue(m_genre));
    }
    if (m_primary_isSet) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_segment.isSet()) {
        obj.insert(QString("segment"), ::OpenAPI::toJsonValue(m_segment));
    }
    if (m_sub_genre.isSet()) {
        obj.insert(QString("subGenre"), ::OpenAPI::toJsonValue(m_sub_genre));
    }
    if (m_sub_type.isSet()) {
        obj.insert(QString("subType"), ::OpenAPI::toJsonValue(m_sub_type));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAILevel OAIClassification::getGenre() const {
    return m_genre;
}
void OAIClassification::setGenre(const OAILevel &genre) {
    m_genre = genre;
    m_genre_isSet = true;
}

bool OAIClassification::is_genre_Set() const{
    return m_genre_isSet;
}

bool OAIClassification::is_genre_Valid() const{
    return m_genre_isValid;
}

bool OAIClassification::isPrimary() const {
    return m_primary;
}
void OAIClassification::setPrimary(const bool &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAIClassification::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAIClassification::is_primary_Valid() const{
    return m_primary_isValid;
}

OAISegment OAIClassification::getSegment() const {
    return m_segment;
}
void OAIClassification::setSegment(const OAISegment &segment) {
    m_segment = segment;
    m_segment_isSet = true;
}

bool OAIClassification::is_segment_Set() const{
    return m_segment_isSet;
}

bool OAIClassification::is_segment_Valid() const{
    return m_segment_isValid;
}

OAILevel OAIClassification::getSubGenre() const {
    return m_sub_genre;
}
void OAIClassification::setSubGenre(const OAILevel &sub_genre) {
    m_sub_genre = sub_genre;
    m_sub_genre_isSet = true;
}

bool OAIClassification::is_sub_genre_Set() const{
    return m_sub_genre_isSet;
}

bool OAIClassification::is_sub_genre_Valid() const{
    return m_sub_genre_isValid;
}

OAILevel OAIClassification::getSubType() const {
    return m_sub_type;
}
void OAIClassification::setSubType(const OAILevel &sub_type) {
    m_sub_type = sub_type;
    m_sub_type_isSet = true;
}

bool OAIClassification::is_sub_type_Set() const{
    return m_sub_type_isSet;
}

bool OAIClassification::is_sub_type_Valid() const{
    return m_sub_type_isValid;
}

OAILevel OAIClassification::getType() const {
    return m_type;
}
void OAIClassification::setType(const OAILevel &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIClassification::is_type_Set() const{
    return m_type_isSet;
}

bool OAIClassification::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIClassification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_genre.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_genre.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClassification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
