/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEvent.h
 *
 * Event
 */

#ifndef OAIEvent_H
#define OAIEvent_H

#include <QJsonObject>

#include "OAIAttraction.h"
#include "OAIClassification.h"
#include "OAIEventDates.h"
#include "OAIEventSalesDates.h"
#include "OAIImage.h"
#include "OAILocation.h"
#include "OAIObject.h"
#include "OAIPlace.h"
#include "OAIPriceRange.h"
#include "OAIPromoter.h"
#include "OAIPublicVisibility.h"
#include "OAISource.h"
#include "OAIVenue.h"
#include <QList>
#include <QMap>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAttraction;
class OAIClassification;
class OAIEventDates;
class OAIImage;
class OAILocation;
class OAIPlace;
class OAIPriceRange;
class OAIPromoter;
class OAIPublicVisibility;
class OAIEventSalesDates;
class OAISource;
class OAIVenue;

class OAIEvent : public OAIObject {
public:
    OAIEvent();
    OAIEvent(QString json);
    ~OAIEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isActive() const;
    void setActive(const bool &active);
    bool is_active_Set() const;
    bool is_active_Valid() const;

    QMap<QString, QString> getAdditionalInfos() const;
    void setAdditionalInfos(const QMap<QString, QString> &additional_infos);
    bool is_additional_infos_Set() const;
    bool is_additional_infos_Valid() const;

    QList<OAIAttraction> getAttractions() const;
    void setAttractions(const QList<OAIAttraction> &attractions);
    bool is_attractions_Set() const;
    bool is_attractions_Valid() const;

    QList<OAIClassification> getClassifications() const;
    void setClassifications(const QList<OAIClassification> &classifications);
    bool is_classifications_Set() const;
    bool is_classifications_Valid() const;

    OAIEventDates getDates() const;
    void setDates(const OAIEventDates &dates);
    bool is_dates_Set() const;
    bool is_dates_Valid() const;

    QMap<QString, QString> getDescriptions() const;
    void setDescriptions(const QMap<QString, QString> &descriptions);
    bool is_descriptions_Set() const;
    bool is_descriptions_Valid() const;

    bool isDiscoverable() const;
    void setDiscoverable(const bool &discoverable);
    bool is_discoverable_Set() const;
    bool is_discoverable_Valid() const;

    double getDistance() const;
    void setDistance(const double &distance);
    bool is_distance_Set() const;
    bool is_distance_Valid() const;

    QSet<OAIImage> getImages() const;
    void setImages(const QSet<OAIImage> &images);
    bool is_images_Set() const;
    bool is_images_Valid() const;

    QMap<QString, QString> getInfos() const;
    void setInfos(const QMap<QString, QString> &infos);
    bool is_infos_Set() const;
    bool is_infos_Valid() const;

    OAILocation getLocation() const;
    void setLocation(const OAILocation &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QMap<QString, QString> getNames() const;
    void setNames(const QMap<QString, QString> &names);
    bool is_names_Set() const;
    bool is_names_Valid() const;

    OAIPlace getPlace() const;
    void setPlace(const OAIPlace &place);
    bool is_place_Set() const;
    bool is_place_Valid() const;

    QMap<QString, QString> getPleaseNotes() const;
    void setPleaseNotes(const QMap<QString, QString> &please_notes);
    bool is_please_notes_Set() const;
    bool is_please_notes_Valid() const;

    QSet<OAIPriceRange> getPriceRanges() const;
    void setPriceRanges(const QSet<OAIPriceRange> &price_ranges);
    bool is_price_ranges_Set() const;
    bool is_price_ranges_Valid() const;

    OAIPromoter getPromoter() const;
    void setPromoter(const OAIPromoter &promoter);
    bool is_promoter_Set() const;
    bool is_promoter_Valid() const;

    OAIPublicVisibility getPublicVisibility() const;
    void setPublicVisibility(const OAIPublicVisibility &public_visibility);
    bool is_public_visibility_Set() const;
    bool is_public_visibility_Valid() const;

    QMap<QString, QString> getReferences() const;
    void setReferences(const QMap<QString, QString> &references);
    bool is_references_Set() const;
    bool is_references_Valid() const;

    QList<OAIObject> getRelationships() const;
    void setRelationships(const QList<OAIObject> &relationships);
    bool is_relationships_Set() const;
    bool is_relationships_Valid() const;

    OAIEventSalesDates getSales() const;
    void setSales(const OAIEventSalesDates &sales);
    bool is_sales_Set() const;
    bool is_sales_Valid() const;

    OAISource getSource() const;
    void setSource(const OAISource &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    bool isTest() const;
    void setTest(const bool &test);
    bool is_test_Set() const;
    bool is_test_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUnits() const;
    void setUnits(const QString &units);
    bool is_units_Set() const;
    bool is_units_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    OAIVenue getVenue() const;
    void setVenue(const OAIVenue &venue);
    bool is_venue_Set() const;
    bool is_venue_Valid() const;

    qint64 getVersion() const;
    void setVersion(const qint64 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_active;
    bool m_active_isSet;
    bool m_active_isValid;

    QMap<QString, QString> m_additional_infos;
    bool m_additional_infos_isSet;
    bool m_additional_infos_isValid;

    QList<OAIAttraction> m_attractions;
    bool m_attractions_isSet;
    bool m_attractions_isValid;

    QList<OAIClassification> m_classifications;
    bool m_classifications_isSet;
    bool m_classifications_isValid;

    OAIEventDates m_dates;
    bool m_dates_isSet;
    bool m_dates_isValid;

    QMap<QString, QString> m_descriptions;
    bool m_descriptions_isSet;
    bool m_descriptions_isValid;

    bool m_discoverable;
    bool m_discoverable_isSet;
    bool m_discoverable_isValid;

    double m_distance;
    bool m_distance_isSet;
    bool m_distance_isValid;

    QSet<OAIImage> m_images;
    bool m_images_isSet;
    bool m_images_isValid;

    QMap<QString, QString> m_infos;
    bool m_infos_isSet;
    bool m_infos_isValid;

    OAILocation m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QMap<QString, QString> m_names;
    bool m_names_isSet;
    bool m_names_isValid;

    OAIPlace m_place;
    bool m_place_isSet;
    bool m_place_isValid;

    QMap<QString, QString> m_please_notes;
    bool m_please_notes_isSet;
    bool m_please_notes_isValid;

    QSet<OAIPriceRange> m_price_ranges;
    bool m_price_ranges_isSet;
    bool m_price_ranges_isValid;

    OAIPromoter m_promoter;
    bool m_promoter_isSet;
    bool m_promoter_isValid;

    OAIPublicVisibility m_public_visibility;
    bool m_public_visibility_isSet;
    bool m_public_visibility_isValid;

    QMap<QString, QString> m_references;
    bool m_references_isSet;
    bool m_references_isValid;

    QList<OAIObject> m_relationships;
    bool m_relationships_isSet;
    bool m_relationships_isValid;

    OAIEventSalesDates m_sales;
    bool m_sales_isSet;
    bool m_sales_isValid;

    OAISource m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    bool m_test;
    bool m_test_isSet;
    bool m_test_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_units;
    bool m_units_isSet;
    bool m_units_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    OAIVenue m_venue;
    bool m_venue_isSet;
    bool m_venue_isValid;

    qint64 m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEvent)

#endif // OAIEvent_H
