/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocalTime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocalTime::OAILocalTime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocalTime::OAILocalTime() {
    this->initializeModel();
}

OAILocalTime::~OAILocalTime() {}

void OAILocalTime::initializeModel() {

    m_chronology_isSet = false;
    m_chronology_isValid = false;

    m_field_types_isSet = false;
    m_field_types_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_hour_of_day_isSet = false;
    m_hour_of_day_isValid = false;

    m_millis_of_day_isSet = false;
    m_millis_of_day_isValid = false;

    m_millis_of_second_isSet = false;
    m_millis_of_second_isValid = false;

    m_minute_of_hour_isSet = false;
    m_minute_of_hour_isValid = false;

    m_second_of_minute_isSet = false;
    m_second_of_minute_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAILocalTime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocalTime::fromJsonObject(QJsonObject json) {

    m_chronology_isValid = ::OpenAPI::fromJsonValue(m_chronology, json[QString("chronology")]);
    m_chronology_isSet = !json[QString("chronology")].isNull() && m_chronology_isValid;

    m_field_types_isValid = ::OpenAPI::fromJsonValue(m_field_types, json[QString("fieldTypes")]);
    m_field_types_isSet = !json[QString("fieldTypes")].isNull() && m_field_types_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_hour_of_day_isValid = ::OpenAPI::fromJsonValue(m_hour_of_day, json[QString("hourOfDay")]);
    m_hour_of_day_isSet = !json[QString("hourOfDay")].isNull() && m_hour_of_day_isValid;

    m_millis_of_day_isValid = ::OpenAPI::fromJsonValue(m_millis_of_day, json[QString("millisOfDay")]);
    m_millis_of_day_isSet = !json[QString("millisOfDay")].isNull() && m_millis_of_day_isValid;

    m_millis_of_second_isValid = ::OpenAPI::fromJsonValue(m_millis_of_second, json[QString("millisOfSecond")]);
    m_millis_of_second_isSet = !json[QString("millisOfSecond")].isNull() && m_millis_of_second_isValid;

    m_minute_of_hour_isValid = ::OpenAPI::fromJsonValue(m_minute_of_hour, json[QString("minuteOfHour")]);
    m_minute_of_hour_isSet = !json[QString("minuteOfHour")].isNull() && m_minute_of_hour_isValid;

    m_second_of_minute_isValid = ::OpenAPI::fromJsonValue(m_second_of_minute, json[QString("secondOfMinute")]);
    m_second_of_minute_isSet = !json[QString("secondOfMinute")].isNull() && m_second_of_minute_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAILocalTime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocalTime::asJsonObject() const {
    QJsonObject obj;
    if (m_chronology.isSet()) {
        obj.insert(QString("chronology"), ::OpenAPI::toJsonValue(m_chronology));
    }
    if (m_field_types.size() > 0) {
        obj.insert(QString("fieldTypes"), ::OpenAPI::toJsonValue(m_field_types));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_hour_of_day_isSet) {
        obj.insert(QString("hourOfDay"), ::OpenAPI::toJsonValue(m_hour_of_day));
    }
    if (m_millis_of_day_isSet) {
        obj.insert(QString("millisOfDay"), ::OpenAPI::toJsonValue(m_millis_of_day));
    }
    if (m_millis_of_second_isSet) {
        obj.insert(QString("millisOfSecond"), ::OpenAPI::toJsonValue(m_millis_of_second));
    }
    if (m_minute_of_hour_isSet) {
        obj.insert(QString("minuteOfHour"), ::OpenAPI::toJsonValue(m_minute_of_hour));
    }
    if (m_second_of_minute_isSet) {
        obj.insert(QString("secondOfMinute"), ::OpenAPI::toJsonValue(m_second_of_minute));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

OAIChronology OAILocalTime::getChronology() const {
    return m_chronology;
}
void OAILocalTime::setChronology(const OAIChronology &chronology) {
    m_chronology = chronology;
    m_chronology_isSet = true;
}

bool OAILocalTime::is_chronology_Set() const{
    return m_chronology_isSet;
}

bool OAILocalTime::is_chronology_Valid() const{
    return m_chronology_isValid;
}

QList<OAIDateTimeFieldType> OAILocalTime::getFieldTypes() const {
    return m_field_types;
}
void OAILocalTime::setFieldTypes(const QList<OAIDateTimeFieldType> &field_types) {
    m_field_types = field_types;
    m_field_types_isSet = true;
}

bool OAILocalTime::is_field_types_Set() const{
    return m_field_types_isSet;
}

bool OAILocalTime::is_field_types_Valid() const{
    return m_field_types_isValid;
}

QList<OAIDateTimeField> OAILocalTime::getFields() const {
    return m_fields;
}
void OAILocalTime::setFields(const QList<OAIDateTimeField> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAILocalTime::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAILocalTime::is_fields_Valid() const{
    return m_fields_isValid;
}

qint32 OAILocalTime::getHourOfDay() const {
    return m_hour_of_day;
}
void OAILocalTime::setHourOfDay(const qint32 &hour_of_day) {
    m_hour_of_day = hour_of_day;
    m_hour_of_day_isSet = true;
}

bool OAILocalTime::is_hour_of_day_Set() const{
    return m_hour_of_day_isSet;
}

bool OAILocalTime::is_hour_of_day_Valid() const{
    return m_hour_of_day_isValid;
}

qint32 OAILocalTime::getMillisOfDay() const {
    return m_millis_of_day;
}
void OAILocalTime::setMillisOfDay(const qint32 &millis_of_day) {
    m_millis_of_day = millis_of_day;
    m_millis_of_day_isSet = true;
}

bool OAILocalTime::is_millis_of_day_Set() const{
    return m_millis_of_day_isSet;
}

bool OAILocalTime::is_millis_of_day_Valid() const{
    return m_millis_of_day_isValid;
}

qint32 OAILocalTime::getMillisOfSecond() const {
    return m_millis_of_second;
}
void OAILocalTime::setMillisOfSecond(const qint32 &millis_of_second) {
    m_millis_of_second = millis_of_second;
    m_millis_of_second_isSet = true;
}

bool OAILocalTime::is_millis_of_second_Set() const{
    return m_millis_of_second_isSet;
}

bool OAILocalTime::is_millis_of_second_Valid() const{
    return m_millis_of_second_isValid;
}

qint32 OAILocalTime::getMinuteOfHour() const {
    return m_minute_of_hour;
}
void OAILocalTime::setMinuteOfHour(const qint32 &minute_of_hour) {
    m_minute_of_hour = minute_of_hour;
    m_minute_of_hour_isSet = true;
}

bool OAILocalTime::is_minute_of_hour_Set() const{
    return m_minute_of_hour_isSet;
}

bool OAILocalTime::is_minute_of_hour_Valid() const{
    return m_minute_of_hour_isValid;
}

qint32 OAILocalTime::getSecondOfMinute() const {
    return m_second_of_minute;
}
void OAILocalTime::setSecondOfMinute(const qint32 &second_of_minute) {
    m_second_of_minute = second_of_minute;
    m_second_of_minute_isSet = true;
}

bool OAILocalTime::is_second_of_minute_Set() const{
    return m_second_of_minute_isSet;
}

bool OAILocalTime::is_second_of_minute_Valid() const{
    return m_second_of_minute_isValid;
}

QList<qint32> OAILocalTime::getValues() const {
    return m_values;
}
void OAILocalTime::setValues(const QList<qint32> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAILocalTime::is_values_Set() const{
    return m_values_isSet;
}

bool OAILocalTime::is_values_Valid() const{
    return m_values_isValid;
}

bool OAILocalTime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chronology.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hour_of_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_millis_of_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_millis_of_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minute_of_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_of_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocalTime::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
