/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventDates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventDates::OAIEventDates(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventDates::OAIEventDates() {
    this->initializeModel();
}

OAIEventDates::~OAIEventDates() {}

void OAIEventDates::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;
}

void OAIEventDates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventDates::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;
}

QString OAIEventDates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventDates::asJsonObject() const {
    QJsonObject obj;
    if (m_access.isSet()) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_end.isSet()) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_start.isSet()) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    return obj;
}

OAIAccessDates OAIEventDates::getAccess() const {
    return m_access;
}
void OAIEventDates::setAccess(const OAIAccessDates &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIEventDates::is_access_Set() const{
    return m_access_isSet;
}

bool OAIEventDates::is_access_Valid() const{
    return m_access_isValid;
}

OAIEndDates OAIEventDates::getEnd() const {
    return m_end;
}
void OAIEventDates::setEnd(const OAIEndDates &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIEventDates::is_end_Set() const{
    return m_end_isSet;
}

bool OAIEventDates::is_end_Valid() const{
    return m_end_isValid;
}

OAIStartDates OAIEventDates::getStart() const {
    return m_start;
}
void OAIEventDates::setStart(const OAIStartDates &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIEventDates::is_start_Set() const{
    return m_start_isSet;
}

bool OAIEventDates::is_start_Valid() const{
    return m_start_isValid;
}

OAIEventStatus OAIEventDates::getStatus() const {
    return m_status;
}
void OAIEventDates::setStatus(const OAIEventStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEventDates::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEventDates::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIEventDates::getTimezone() const {
    return m_timezone;
}
void OAIEventDates::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIEventDates::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIEventDates::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAIEventDates::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventDates::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
