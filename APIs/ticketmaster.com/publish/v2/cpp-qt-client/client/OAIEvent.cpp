/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_additional_infos_isSet = false;
    m_additional_infos_isValid = false;

    m_attractions_isSet = false;
    m_attractions_isValid = false;

    m_classifications_isSet = false;
    m_classifications_isValid = false;

    m_dates_isSet = false;
    m_dates_isValid = false;

    m_descriptions_isSet = false;
    m_descriptions_isValid = false;

    m_discoverable_isSet = false;
    m_discoverable_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_infos_isSet = false;
    m_infos_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_place_isSet = false;
    m_place_isValid = false;

    m_please_notes_isSet = false;
    m_please_notes_isValid = false;

    m_price_ranges_isSet = false;
    m_price_ranges_isValid = false;

    m_promoter_isSet = false;
    m_promoter_isValid = false;

    m_public_visibility_isSet = false;
    m_public_visibility_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;

    m_relationships_isSet = false;
    m_relationships_isValid = false;

    m_sales_isSet = false;
    m_sales_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_venue_isSet = false;
    m_venue_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_additional_infos_isValid = ::OpenAPI::fromJsonValue(m_additional_infos, json[QString("additionalInfos")]);
    m_additional_infos_isSet = !json[QString("additionalInfos")].isNull() && m_additional_infos_isValid;

    m_attractions_isValid = ::OpenAPI::fromJsonValue(m_attractions, json[QString("attractions")]);
    m_attractions_isSet = !json[QString("attractions")].isNull() && m_attractions_isValid;

    m_classifications_isValid = ::OpenAPI::fromJsonValue(m_classifications, json[QString("classifications")]);
    m_classifications_isSet = !json[QString("classifications")].isNull() && m_classifications_isValid;

    m_dates_isValid = ::OpenAPI::fromJsonValue(m_dates, json[QString("dates")]);
    m_dates_isSet = !json[QString("dates")].isNull() && m_dates_isValid;

    m_descriptions_isValid = ::OpenAPI::fromJsonValue(m_descriptions, json[QString("descriptions")]);
    m_descriptions_isSet = !json[QString("descriptions")].isNull() && m_descriptions_isValid;

    m_discoverable_isValid = ::OpenAPI::fromJsonValue(m_discoverable, json[QString("discoverable")]);
    m_discoverable_isSet = !json[QString("discoverable")].isNull() && m_discoverable_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_infos_isValid = ::OpenAPI::fromJsonValue(m_infos, json[QString("infos")]);
    m_infos_isSet = !json[QString("infos")].isNull() && m_infos_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_place_isValid = ::OpenAPI::fromJsonValue(m_place, json[QString("place")]);
    m_place_isSet = !json[QString("place")].isNull() && m_place_isValid;

    m_please_notes_isValid = ::OpenAPI::fromJsonValue(m_please_notes, json[QString("pleaseNotes")]);
    m_please_notes_isSet = !json[QString("pleaseNotes")].isNull() && m_please_notes_isValid;

    m_price_ranges_isValid = ::OpenAPI::fromJsonValue(m_price_ranges, json[QString("priceRanges")]);
    m_price_ranges_isSet = !json[QString("priceRanges")].isNull() && m_price_ranges_isValid;

    m_promoter_isValid = ::OpenAPI::fromJsonValue(m_promoter, json[QString("promoter")]);
    m_promoter_isSet = !json[QString("promoter")].isNull() && m_promoter_isValid;

    m_public_visibility_isValid = ::OpenAPI::fromJsonValue(m_public_visibility, json[QString("publicVisibility")]);
    m_public_visibility_isSet = !json[QString("publicVisibility")].isNull() && m_public_visibility_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;

    m_relationships_isValid = ::OpenAPI::fromJsonValue(m_relationships, json[QString("relationships")]);
    m_relationships_isSet = !json[QString("relationships")].isNull() && m_relationships_isValid;

    m_sales_isValid = ::OpenAPI::fromJsonValue(m_sales, json[QString("sales")]);
    m_sales_isSet = !json[QString("sales")].isNull() && m_sales_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_venue_isValid = ::OpenAPI::fromJsonValue(m_venue, json[QString("venue")]);
    m_venue_isSet = !json[QString("venue")].isNull() && m_venue_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_additional_infos.size() > 0) {
        obj.insert(QString("additionalInfos"), ::OpenAPI::toJsonValue(m_additional_infos));
    }
    if (m_attractions.size() > 0) {
        obj.insert(QString("attractions"), ::OpenAPI::toJsonValue(m_attractions));
    }
    if (m_classifications.size() > 0) {
        obj.insert(QString("classifications"), ::OpenAPI::toJsonValue(m_classifications));
    }
    if (m_dates.isSet()) {
        obj.insert(QString("dates"), ::OpenAPI::toJsonValue(m_dates));
    }
    if (m_descriptions.size() > 0) {
        obj.insert(QString("descriptions"), ::OpenAPI::toJsonValue(m_descriptions));
    }
    if (m_discoverable_isSet) {
        obj.insert(QString("discoverable"), ::OpenAPI::toJsonValue(m_discoverable));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_infos.size() > 0) {
        obj.insert(QString("infos"), ::OpenAPI::toJsonValue(m_infos));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_place.isSet()) {
        obj.insert(QString("place"), ::OpenAPI::toJsonValue(m_place));
    }
    if (m_please_notes.size() > 0) {
        obj.insert(QString("pleaseNotes"), ::OpenAPI::toJsonValue(m_please_notes));
    }
    if (m_price_ranges.size() > 0) {
        obj.insert(QString("priceRanges"), ::OpenAPI::toJsonValue(m_price_ranges));
    }
    if (m_promoter.isSet()) {
        obj.insert(QString("promoter"), ::OpenAPI::toJsonValue(m_promoter));
    }
    if (m_public_visibility.isSet()) {
        obj.insert(QString("publicVisibility"), ::OpenAPI::toJsonValue(m_public_visibility));
    }
    if (m_references.size() > 0) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(m_references));
    }
    if (m_relationships.size() > 0) {
        obj.insert(QString("relationships"), ::OpenAPI::toJsonValue(m_relationships));
    }
    if (m_sales.isSet()) {
        obj.insert(QString("sales"), ::OpenAPI::toJsonValue(m_sales));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_test_isSet) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_units_isSet) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_venue.isSet()) {
        obj.insert(QString("venue"), ::OpenAPI::toJsonValue(m_venue));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIEvent::isActive() const {
    return m_active;
}
void OAIEvent::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIEvent::is_active_Set() const{
    return m_active_isSet;
}

bool OAIEvent::is_active_Valid() const{
    return m_active_isValid;
}

QMap<QString, QString> OAIEvent::getAdditionalInfos() const {
    return m_additional_infos;
}
void OAIEvent::setAdditionalInfos(const QMap<QString, QString> &additional_infos) {
    m_additional_infos = additional_infos;
    m_additional_infos_isSet = true;
}

bool OAIEvent::is_additional_infos_Set() const{
    return m_additional_infos_isSet;
}

bool OAIEvent::is_additional_infos_Valid() const{
    return m_additional_infos_isValid;
}

QList<OAIAttraction> OAIEvent::getAttractions() const {
    return m_attractions;
}
void OAIEvent::setAttractions(const QList<OAIAttraction> &attractions) {
    m_attractions = attractions;
    m_attractions_isSet = true;
}

bool OAIEvent::is_attractions_Set() const{
    return m_attractions_isSet;
}

bool OAIEvent::is_attractions_Valid() const{
    return m_attractions_isValid;
}

QList<OAIClassification> OAIEvent::getClassifications() const {
    return m_classifications;
}
void OAIEvent::setClassifications(const QList<OAIClassification> &classifications) {
    m_classifications = classifications;
    m_classifications_isSet = true;
}

bool OAIEvent::is_classifications_Set() const{
    return m_classifications_isSet;
}

bool OAIEvent::is_classifications_Valid() const{
    return m_classifications_isValid;
}

OAIEventDates OAIEvent::getDates() const {
    return m_dates;
}
void OAIEvent::setDates(const OAIEventDates &dates) {
    m_dates = dates;
    m_dates_isSet = true;
}

bool OAIEvent::is_dates_Set() const{
    return m_dates_isSet;
}

bool OAIEvent::is_dates_Valid() const{
    return m_dates_isValid;
}

QMap<QString, QString> OAIEvent::getDescriptions() const {
    return m_descriptions;
}
void OAIEvent::setDescriptions(const QMap<QString, QString> &descriptions) {
    m_descriptions = descriptions;
    m_descriptions_isSet = true;
}

bool OAIEvent::is_descriptions_Set() const{
    return m_descriptions_isSet;
}

bool OAIEvent::is_descriptions_Valid() const{
    return m_descriptions_isValid;
}

bool OAIEvent::isDiscoverable() const {
    return m_discoverable;
}
void OAIEvent::setDiscoverable(const bool &discoverable) {
    m_discoverable = discoverable;
    m_discoverable_isSet = true;
}

bool OAIEvent::is_discoverable_Set() const{
    return m_discoverable_isSet;
}

bool OAIEvent::is_discoverable_Valid() const{
    return m_discoverable_isValid;
}

double OAIEvent::getDistance() const {
    return m_distance;
}
void OAIEvent::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIEvent::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIEvent::is_distance_Valid() const{
    return m_distance_isValid;
}

QSet<OAIImage> OAIEvent::getImages() const {
    return m_images;
}
void OAIEvent::setImages(const QSet<OAIImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIEvent::is_images_Set() const{
    return m_images_isSet;
}

bool OAIEvent::is_images_Valid() const{
    return m_images_isValid;
}

QMap<QString, QString> OAIEvent::getInfos() const {
    return m_infos;
}
void OAIEvent::setInfos(const QMap<QString, QString> &infos) {
    m_infos = infos;
    m_infos_isSet = true;
}

bool OAIEvent::is_infos_Set() const{
    return m_infos_isSet;
}

bool OAIEvent::is_infos_Valid() const{
    return m_infos_isValid;
}

OAILocation OAIEvent::getLocation() const {
    return m_location;
}
void OAIEvent::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIEvent::is_location_Set() const{
    return m_location_isSet;
}

bool OAIEvent::is_location_Valid() const{
    return m_location_isValid;
}

QMap<QString, QString> OAIEvent::getNames() const {
    return m_names;
}
void OAIEvent::setNames(const QMap<QString, QString> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIEvent::is_names_Set() const{
    return m_names_isSet;
}

bool OAIEvent::is_names_Valid() const{
    return m_names_isValid;
}

OAIPlace OAIEvent::getPlace() const {
    return m_place;
}
void OAIEvent::setPlace(const OAIPlace &place) {
    m_place = place;
    m_place_isSet = true;
}

bool OAIEvent::is_place_Set() const{
    return m_place_isSet;
}

bool OAIEvent::is_place_Valid() const{
    return m_place_isValid;
}

QMap<QString, QString> OAIEvent::getPleaseNotes() const {
    return m_please_notes;
}
void OAIEvent::setPleaseNotes(const QMap<QString, QString> &please_notes) {
    m_please_notes = please_notes;
    m_please_notes_isSet = true;
}

bool OAIEvent::is_please_notes_Set() const{
    return m_please_notes_isSet;
}

bool OAIEvent::is_please_notes_Valid() const{
    return m_please_notes_isValid;
}

QSet<OAIPriceRange> OAIEvent::getPriceRanges() const {
    return m_price_ranges;
}
void OAIEvent::setPriceRanges(const QSet<OAIPriceRange> &price_ranges) {
    m_price_ranges = price_ranges;
    m_price_ranges_isSet = true;
}

bool OAIEvent::is_price_ranges_Set() const{
    return m_price_ranges_isSet;
}

bool OAIEvent::is_price_ranges_Valid() const{
    return m_price_ranges_isValid;
}

OAIPromoter OAIEvent::getPromoter() const {
    return m_promoter;
}
void OAIEvent::setPromoter(const OAIPromoter &promoter) {
    m_promoter = promoter;
    m_promoter_isSet = true;
}

bool OAIEvent::is_promoter_Set() const{
    return m_promoter_isSet;
}

bool OAIEvent::is_promoter_Valid() const{
    return m_promoter_isValid;
}

OAIPublicVisibility OAIEvent::getPublicVisibility() const {
    return m_public_visibility;
}
void OAIEvent::setPublicVisibility(const OAIPublicVisibility &public_visibility) {
    m_public_visibility = public_visibility;
    m_public_visibility_isSet = true;
}

bool OAIEvent::is_public_visibility_Set() const{
    return m_public_visibility_isSet;
}

bool OAIEvent::is_public_visibility_Valid() const{
    return m_public_visibility_isValid;
}

QMap<QString, QString> OAIEvent::getReferences() const {
    return m_references;
}
void OAIEvent::setReferences(const QMap<QString, QString> &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAIEvent::is_references_Set() const{
    return m_references_isSet;
}

bool OAIEvent::is_references_Valid() const{
    return m_references_isValid;
}

QList<OAIObject> OAIEvent::getRelationships() const {
    return m_relationships;
}
void OAIEvent::setRelationships(const QList<OAIObject> &relationships) {
    m_relationships = relationships;
    m_relationships_isSet = true;
}

bool OAIEvent::is_relationships_Set() const{
    return m_relationships_isSet;
}

bool OAIEvent::is_relationships_Valid() const{
    return m_relationships_isValid;
}

OAIEventSalesDates OAIEvent::getSales() const {
    return m_sales;
}
void OAIEvent::setSales(const OAIEventSalesDates &sales) {
    m_sales = sales;
    m_sales_isSet = true;
}

bool OAIEvent::is_sales_Set() const{
    return m_sales_isSet;
}

bool OAIEvent::is_sales_Valid() const{
    return m_sales_isValid;
}

OAISource OAIEvent::getSource() const {
    return m_source;
}
void OAIEvent::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIEvent::is_source_Set() const{
    return m_source_isSet;
}

bool OAIEvent::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIEvent::isTest() const {
    return m_test;
}
void OAIEvent::setTest(const bool &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAIEvent::is_test_Set() const{
    return m_test_isSet;
}

bool OAIEvent::is_test_Valid() const{
    return m_test_isValid;
}

QString OAIEvent::getType() const {
    return m_type;
}
void OAIEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEvent::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIEvent::getUnits() const {
    return m_units;
}
void OAIEvent::setUnits(const QString &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAIEvent::is_units_Set() const{
    return m_units_isSet;
}

bool OAIEvent::is_units_Valid() const{
    return m_units_isValid;
}

QString OAIEvent::getUrl() const {
    return m_url;
}
void OAIEvent::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEvent::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEvent::is_url_Valid() const{
    return m_url_isValid;
}

OAIVenue OAIEvent::getVenue() const {
    return m_venue;
}
void OAIEvent::setVenue(const OAIVenue &venue) {
    m_venue = venue;
    m_venue_isSet = true;
}

bool OAIEvent::is_venue_Set() const{
    return m_venue_isSet;
}

bool OAIEvent::is_venue_Valid() const{
    return m_venue_isValid;
}

qint64 OAIEvent::getVersion() const {
    return m_version;
}
void OAIEvent::setVersion(const qint64 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIEvent::is_version_Set() const{
    return m_version_isSet;
}

bool OAIEvent::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attractions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_classifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_descriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_discoverable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_place.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_please_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_promoter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationships.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
