/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPresale.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPresale::OAIPresale(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPresale::OAIPresale() {
    this->initializeModel();
}

OAIPresale::~OAIPresale() {}

void OAIPresale::initializeModel() {

    m_descriptions_isSet = false;
    m_descriptions_isValid = false;

    m_end_date_time_isSet = false;
    m_end_date_time_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPresale::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPresale::fromJsonObject(QJsonObject json) {

    m_descriptions_isValid = ::OpenAPI::fromJsonValue(m_descriptions, json[QString("descriptions")]);
    m_descriptions_isSet = !json[QString("descriptions")].isNull() && m_descriptions_isValid;

    m_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_end_date_time, json[QString("endDateTime")]);
    m_end_date_time_isSet = !json[QString("endDateTime")].isNull() && m_end_date_time_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPresale::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPresale::asJsonObject() const {
    QJsonObject obj;
    if (m_descriptions.size() > 0) {
        obj.insert(QString("descriptions"), ::OpenAPI::toJsonValue(m_descriptions));
    }
    if (m_end_date_time_isSet) {
        obj.insert(QString("endDateTime"), ::OpenAPI::toJsonValue(m_end_date_time));
    }
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QMap<QString, QString> OAIPresale::getDescriptions() const {
    return m_descriptions;
}
void OAIPresale::setDescriptions(const QMap<QString, QString> &descriptions) {
    m_descriptions = descriptions;
    m_descriptions_isSet = true;
}

bool OAIPresale::is_descriptions_Set() const{
    return m_descriptions_isSet;
}

bool OAIPresale::is_descriptions_Valid() const{
    return m_descriptions_isValid;
}

QDateTime OAIPresale::getEndDateTime() const {
    return m_end_date_time;
}
void OAIPresale::setEndDateTime(const QDateTime &end_date_time) {
    m_end_date_time = end_date_time;
    m_end_date_time_isSet = true;
}

bool OAIPresale::is_end_date_time_Set() const{
    return m_end_date_time_isSet;
}

bool OAIPresale::is_end_date_time_Valid() const{
    return m_end_date_time_isValid;
}

QMap<QString, QString> OAIPresale::getNames() const {
    return m_names;
}
void OAIPresale::setNames(const QMap<QString, QString> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIPresale::is_names_Set() const{
    return m_names_isSet;
}

bool OAIPresale::is_names_Valid() const{
    return m_names_isValid;
}

QDateTime OAIPresale::getStartDateTime() const {
    return m_start_date_time;
}
void OAIPresale::setStartDateTime(const QDateTime &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIPresale::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIPresale::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

QString OAIPresale::getUrl() const {
    return m_url;
}
void OAIPresale::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPresale::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPresale::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPresale::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_descriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPresale::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
