/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDateTimeFieldType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDateTimeFieldType::OAIDateTimeFieldType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDateTimeFieldType::OAIDateTimeFieldType() {
    this->initializeModel();
}

OAIDateTimeFieldType::~OAIDateTimeFieldType() {}

void OAIDateTimeFieldType::initializeModel() {

    m_duration_type_isSet = false;
    m_duration_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_range_duration_type_isSet = false;
    m_range_duration_type_isValid = false;
}

void OAIDateTimeFieldType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDateTimeFieldType::fromJsonObject(QJsonObject json) {

    m_duration_type_isValid = ::OpenAPI::fromJsonValue(m_duration_type, json[QString("durationType")]);
    m_duration_type_isSet = !json[QString("durationType")].isNull() && m_duration_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_range_duration_type_isValid = ::OpenAPI::fromJsonValue(m_range_duration_type, json[QString("rangeDurationType")]);
    m_range_duration_type_isSet = !json[QString("rangeDurationType")].isNull() && m_range_duration_type_isValid;
}

QString OAIDateTimeFieldType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDateTimeFieldType::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_type.isSet()) {
        obj.insert(QString("durationType"), ::OpenAPI::toJsonValue(m_duration_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_range_duration_type.isSet()) {
        obj.insert(QString("rangeDurationType"), ::OpenAPI::toJsonValue(m_range_duration_type));
    }
    return obj;
}

OAIDurationFieldType OAIDateTimeFieldType::getDurationType() const {
    return m_duration_type;
}
void OAIDateTimeFieldType::setDurationType(const OAIDurationFieldType &duration_type) {
    m_duration_type = duration_type;
    m_duration_type_isSet = true;
}

bool OAIDateTimeFieldType::is_duration_type_Set() const{
    return m_duration_type_isSet;
}

bool OAIDateTimeFieldType::is_duration_type_Valid() const{
    return m_duration_type_isValid;
}

QString OAIDateTimeFieldType::getName() const {
    return m_name;
}
void OAIDateTimeFieldType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDateTimeFieldType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDateTimeFieldType::is_name_Valid() const{
    return m_name_isValid;
}

OAIDurationFieldType OAIDateTimeFieldType::getRangeDurationType() const {
    return m_range_duration_type;
}
void OAIDateTimeFieldType::setRangeDurationType(const OAIDurationFieldType &range_duration_type) {
    m_range_duration_type = range_duration_type;
    m_range_duration_type_isSet = true;
}

bool OAIDateTimeFieldType::is_range_duration_type_Set() const{
    return m_range_duration_type_isSet;
}

bool OAIDateTimeFieldType::is_range_duration_type_Valid() const{
    return m_range_duration_type_isValid;
}

bool OAIDateTimeFieldType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_duration_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDateTimeFieldType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
