/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddress::OAIAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddress::OAIAddress() {
    this->initializeModel();
}

OAIAddress::~OAIAddress() {}

void OAIAddress::initializeModel() {

    m_line1s_isSet = false;
    m_line1s_isValid = false;

    m_line2s_isSet = false;
    m_line2s_isValid = false;

    m_line3s_isSet = false;
    m_line3s_isValid = false;
}

void OAIAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddress::fromJsonObject(QJsonObject json) {

    m_line1s_isValid = ::OpenAPI::fromJsonValue(m_line1s, json[QString("line1s")]);
    m_line1s_isSet = !json[QString("line1s")].isNull() && m_line1s_isValid;

    m_line2s_isValid = ::OpenAPI::fromJsonValue(m_line2s, json[QString("line2s")]);
    m_line2s_isSet = !json[QString("line2s")].isNull() && m_line2s_isValid;

    m_line3s_isValid = ::OpenAPI::fromJsonValue(m_line3s, json[QString("line3s")]);
    m_line3s_isSet = !json[QString("line3s")].isNull() && m_line3s_isValid;
}

QString OAIAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_line1s.size() > 0) {
        obj.insert(QString("line1s"), ::OpenAPI::toJsonValue(m_line1s));
    }
    if (m_line2s.size() > 0) {
        obj.insert(QString("line2s"), ::OpenAPI::toJsonValue(m_line2s));
    }
    if (m_line3s.size() > 0) {
        obj.insert(QString("line3s"), ::OpenAPI::toJsonValue(m_line3s));
    }
    return obj;
}

QMap<QString, QString> OAIAddress::getLine1s() const {
    return m_line1s;
}
void OAIAddress::setLine1s(const QMap<QString, QString> &line1s) {
    m_line1s = line1s;
    m_line1s_isSet = true;
}

bool OAIAddress::is_line1s_Set() const{
    return m_line1s_isSet;
}

bool OAIAddress::is_line1s_Valid() const{
    return m_line1s_isValid;
}

QMap<QString, QString> OAIAddress::getLine2s() const {
    return m_line2s;
}
void OAIAddress::setLine2s(const QMap<QString, QString> &line2s) {
    m_line2s = line2s;
    m_line2s_isSet = true;
}

bool OAIAddress::is_line2s_Set() const{
    return m_line2s_isSet;
}

bool OAIAddress::is_line2s_Valid() const{
    return m_line2s_isValid;
}

QMap<QString, QString> OAIAddress::getLine3s() const {
    return m_line3s;
}
void OAIAddress::setLine3s(const QMap<QString, QString> &line3s) {
    m_line3s = line3s;
    m_line3s_isSet = true;
}

bool OAIAddress::is_line3s_Set() const{
    return m_line3s_isSet;
}

bool OAIAddress::is_line3s_Valid() const{
    return m_line3s_isValid;
}

bool OAIAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_line1s.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_line2s.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_line3s.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
