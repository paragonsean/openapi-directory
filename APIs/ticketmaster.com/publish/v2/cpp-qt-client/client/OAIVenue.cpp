/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVenue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVenue::OAIVenue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVenue::OAIVenue() {
    this->initializeModel();
}

OAIVenue::~OAIVenue() {}

void OAIVenue::initializeModel() {

    m_accessible_seating_details_isSet = false;
    m_accessible_seating_details_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_additional_infos_isSet = false;
    m_additional_infos_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_box_office_info_isSet = false;
    m_box_office_info_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_descriptions_isSet = false;
    m_descriptions_isValid = false;

    m_discoverable_isSet = false;
    m_discoverable_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_dma_isSet = false;
    m_dma_isValid = false;

    m_general_info_isSet = false;
    m_general_info_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_markets_isSet = false;
    m_markets_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_parking_details_isSet = false;
    m_parking_details_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;

    m_relationships_isSet = false;
    m_relationships_isValid = false;

    m_social_isSet = false;
    m_social_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIVenue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVenue::fromJsonObject(QJsonObject json) {

    m_accessible_seating_details_isValid = ::OpenAPI::fromJsonValue(m_accessible_seating_details, json[QString("accessibleSeatingDetails")]);
    m_accessible_seating_details_isSet = !json[QString("accessibleSeatingDetails")].isNull() && m_accessible_seating_details_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_additional_infos_isValid = ::OpenAPI::fromJsonValue(m_additional_infos, json[QString("additionalInfos")]);
    m_additional_infos_isSet = !json[QString("additionalInfos")].isNull() && m_additional_infos_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_box_office_info_isValid = ::OpenAPI::fromJsonValue(m_box_office_info, json[QString("boxOfficeInfo")]);
    m_box_office_info_isSet = !json[QString("boxOfficeInfo")].isNull() && m_box_office_info_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_descriptions_isValid = ::OpenAPI::fromJsonValue(m_descriptions, json[QString("descriptions")]);
    m_descriptions_isSet = !json[QString("descriptions")].isNull() && m_descriptions_isValid;

    m_discoverable_isValid = ::OpenAPI::fromJsonValue(m_discoverable, json[QString("discoverable")]);
    m_discoverable_isSet = !json[QString("discoverable")].isNull() && m_discoverable_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_dma_isValid = ::OpenAPI::fromJsonValue(m_dma, json[QString("dma")]);
    m_dma_isSet = !json[QString("dma")].isNull() && m_dma_isValid;

    m_general_info_isValid = ::OpenAPI::fromJsonValue(m_general_info, json[QString("generalInfo")]);
    m_general_info_isSet = !json[QString("generalInfo")].isNull() && m_general_info_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_markets_isValid = ::OpenAPI::fromJsonValue(m_markets, json[QString("markets")]);
    m_markets_isSet = !json[QString("markets")].isNull() && m_markets_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_parking_details_isValid = ::OpenAPI::fromJsonValue(m_parking_details, json[QString("parkingDetails")]);
    m_parking_details_isSet = !json[QString("parkingDetails")].isNull() && m_parking_details_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;

    m_relationships_isValid = ::OpenAPI::fromJsonValue(m_relationships, json[QString("relationships")]);
    m_relationships_isSet = !json[QString("relationships")].isNull() && m_relationships_isValid;

    m_social_isValid = ::OpenAPI::fromJsonValue(m_social, json[QString("social")]);
    m_social_isSet = !json[QString("social")].isNull() && m_social_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("units")]);
    m_units_isSet = !json[QString("units")].isNull() && m_units_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIVenue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVenue::asJsonObject() const {
    QJsonObject obj;
    if (m_accessible_seating_details.size() > 0) {
        obj.insert(QString("accessibleSeatingDetails"), ::OpenAPI::toJsonValue(m_accessible_seating_details));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_additional_infos.size() > 0) {
        obj.insert(QString("additionalInfos"), ::OpenAPI::toJsonValue(m_additional_infos));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_box_office_info.isSet()) {
        obj.insert(QString("boxOfficeInfo"), ::OpenAPI::toJsonValue(m_box_office_info));
    }
    if (m_city.isSet()) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_descriptions.size() > 0) {
        obj.insert(QString("descriptions"), ::OpenAPI::toJsonValue(m_descriptions));
    }
    if (m_discoverable_isSet) {
        obj.insert(QString("discoverable"), ::OpenAPI::toJsonValue(m_discoverable));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_dma.size() > 0) {
        obj.insert(QString("dma"), ::OpenAPI::toJsonValue(m_dma));
    }
    if (m_general_info.isSet()) {
        obj.insert(QString("generalInfo"), ::OpenAPI::toJsonValue(m_general_info));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_markets.size() > 0) {
        obj.insert(QString("markets"), ::OpenAPI::toJsonValue(m_markets));
    }
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_parking_details.size() > 0) {
        obj.insert(QString("parkingDetails"), ::OpenAPI::toJsonValue(m_parking_details));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_references.size() > 0) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(m_references));
    }
    if (m_relationships.size() > 0) {
        obj.insert(QString("relationships"), ::OpenAPI::toJsonValue(m_relationships));
    }
    if (m_social.isSet()) {
        obj.insert(QString("social"), ::OpenAPI::toJsonValue(m_social));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_test_isSet) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_units_isSet) {
        obj.insert(QString("units"), ::OpenAPI::toJsonValue(m_units));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QMap<QString, QString> OAIVenue::getAccessibleSeatingDetails() const {
    return m_accessible_seating_details;
}
void OAIVenue::setAccessibleSeatingDetails(const QMap<QString, QString> &accessible_seating_details) {
    m_accessible_seating_details = accessible_seating_details;
    m_accessible_seating_details_isSet = true;
}

bool OAIVenue::is_accessible_seating_details_Set() const{
    return m_accessible_seating_details_isSet;
}

bool OAIVenue::is_accessible_seating_details_Valid() const{
    return m_accessible_seating_details_isValid;
}

bool OAIVenue::isActive() const {
    return m_active;
}
void OAIVenue::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIVenue::is_active_Set() const{
    return m_active_isSet;
}

bool OAIVenue::is_active_Valid() const{
    return m_active_isValid;
}

QMap<QString, QString> OAIVenue::getAdditionalInfos() const {
    return m_additional_infos;
}
void OAIVenue::setAdditionalInfos(const QMap<QString, QString> &additional_infos) {
    m_additional_infos = additional_infos;
    m_additional_infos_isSet = true;
}

bool OAIVenue::is_additional_infos_Set() const{
    return m_additional_infos_isSet;
}

bool OAIVenue::is_additional_infos_Valid() const{
    return m_additional_infos_isValid;
}

OAIAddress OAIVenue::getAddress() const {
    return m_address;
}
void OAIVenue::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIVenue::is_address_Set() const{
    return m_address_isSet;
}

bool OAIVenue::is_address_Valid() const{
    return m_address_isValid;
}

OAIVenueBoxOfficeInfo OAIVenue::getBoxOfficeInfo() const {
    return m_box_office_info;
}
void OAIVenue::setBoxOfficeInfo(const OAIVenueBoxOfficeInfo &box_office_info) {
    m_box_office_info = box_office_info;
    m_box_office_info_isSet = true;
}

bool OAIVenue::is_box_office_info_Set() const{
    return m_box_office_info_isSet;
}

bool OAIVenue::is_box_office_info_Valid() const{
    return m_box_office_info_isValid;
}

OAICity OAIVenue::getCity() const {
    return m_city;
}
void OAIVenue::setCity(const OAICity &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIVenue::is_city_Set() const{
    return m_city_isSet;
}

bool OAIVenue::is_city_Valid() const{
    return m_city_isValid;
}

OAICountry OAIVenue::getCountry() const {
    return m_country;
}
void OAIVenue::setCountry(const OAICountry &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIVenue::is_country_Set() const{
    return m_country_isSet;
}

bool OAIVenue::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIVenue::getCurrency() const {
    return m_currency;
}
void OAIVenue::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIVenue::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIVenue::is_currency_Valid() const{
    return m_currency_isValid;
}

QMap<QString, QString> OAIVenue::getDescriptions() const {
    return m_descriptions;
}
void OAIVenue::setDescriptions(const QMap<QString, QString> &descriptions) {
    m_descriptions = descriptions;
    m_descriptions_isSet = true;
}

bool OAIVenue::is_descriptions_Set() const{
    return m_descriptions_isSet;
}

bool OAIVenue::is_descriptions_Valid() const{
    return m_descriptions_isValid;
}

bool OAIVenue::isDiscoverable() const {
    return m_discoverable;
}
void OAIVenue::setDiscoverable(const bool &discoverable) {
    m_discoverable = discoverable;
    m_discoverable_isSet = true;
}

bool OAIVenue::is_discoverable_Set() const{
    return m_discoverable_isSet;
}

bool OAIVenue::is_discoverable_Valid() const{
    return m_discoverable_isValid;
}

double OAIVenue::getDistance() const {
    return m_distance;
}
void OAIVenue::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIVenue::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIVenue::is_distance_Valid() const{
    return m_distance_isValid;
}

QList<OAIDma> OAIVenue::getDma() const {
    return m_dma;
}
void OAIVenue::setDma(const QList<OAIDma> &dma) {
    m_dma = dma;
    m_dma_isSet = true;
}

bool OAIVenue::is_dma_Set() const{
    return m_dma_isSet;
}

bool OAIVenue::is_dma_Valid() const{
    return m_dma_isValid;
}

OAIVenueGeneralInfo OAIVenue::getGeneralInfo() const {
    return m_general_info;
}
void OAIVenue::setGeneralInfo(const OAIVenueGeneralInfo &general_info) {
    m_general_info = general_info;
    m_general_info_isSet = true;
}

bool OAIVenue::is_general_info_Set() const{
    return m_general_info_isSet;
}

bool OAIVenue::is_general_info_Valid() const{
    return m_general_info_isValid;
}

QSet<OAIImage> OAIVenue::getImages() const {
    return m_images;
}
void OAIVenue::setImages(const QSet<OAIImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIVenue::is_images_Set() const{
    return m_images_isSet;
}

bool OAIVenue::is_images_Valid() const{
    return m_images_isValid;
}

OAILocation OAIVenue::getLocation() const {
    return m_location;
}
void OAIVenue::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIVenue::is_location_Set() const{
    return m_location_isSet;
}

bool OAIVenue::is_location_Valid() const{
    return m_location_isValid;
}

QList<OAIMarket> OAIVenue::getMarkets() const {
    return m_markets;
}
void OAIVenue::setMarkets(const QList<OAIMarket> &markets) {
    m_markets = markets;
    m_markets_isSet = true;
}

bool OAIVenue::is_markets_Set() const{
    return m_markets_isSet;
}

bool OAIVenue::is_markets_Valid() const{
    return m_markets_isValid;
}

QMap<QString, QString> OAIVenue::getNames() const {
    return m_names;
}
void OAIVenue::setNames(const QMap<QString, QString> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIVenue::is_names_Set() const{
    return m_names_isSet;
}

bool OAIVenue::is_names_Valid() const{
    return m_names_isValid;
}

QMap<QString, QString> OAIVenue::getParkingDetails() const {
    return m_parking_details;
}
void OAIVenue::setParkingDetails(const QMap<QString, QString> &parking_details) {
    m_parking_details = parking_details;
    m_parking_details_isSet = true;
}

bool OAIVenue::is_parking_details_Set() const{
    return m_parking_details_isSet;
}

bool OAIVenue::is_parking_details_Valid() const{
    return m_parking_details_isValid;
}

QString OAIVenue::getPostalCode() const {
    return m_postal_code;
}
void OAIVenue::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIVenue::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIVenue::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QMap<QString, QString> OAIVenue::getReferences() const {
    return m_references;
}
void OAIVenue::setReferences(const QMap<QString, QString> &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAIVenue::is_references_Set() const{
    return m_references_isSet;
}

bool OAIVenue::is_references_Valid() const{
    return m_references_isValid;
}

QList<OAIObject> OAIVenue::getRelationships() const {
    return m_relationships;
}
void OAIVenue::setRelationships(const QList<OAIObject> &relationships) {
    m_relationships = relationships;
    m_relationships_isSet = true;
}

bool OAIVenue::is_relationships_Set() const{
    return m_relationships_isSet;
}

bool OAIVenue::is_relationships_Valid() const{
    return m_relationships_isValid;
}

OAISocial OAIVenue::getSocial() const {
    return m_social;
}
void OAIVenue::setSocial(const OAISocial &social) {
    m_social = social;
    m_social_isSet = true;
}

bool OAIVenue::is_social_Set() const{
    return m_social_isSet;
}

bool OAIVenue::is_social_Valid() const{
    return m_social_isValid;
}

OAISource OAIVenue::getSource() const {
    return m_source;
}
void OAIVenue::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIVenue::is_source_Set() const{
    return m_source_isSet;
}

bool OAIVenue::is_source_Valid() const{
    return m_source_isValid;
}

OAIState OAIVenue::getState() const {
    return m_state;
}
void OAIVenue::setState(const OAIState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIVenue::is_state_Set() const{
    return m_state_isSet;
}

bool OAIVenue::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIVenue::isTest() const {
    return m_test;
}
void OAIVenue::setTest(const bool &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAIVenue::is_test_Set() const{
    return m_test_isSet;
}

bool OAIVenue::is_test_Valid() const{
    return m_test_isValid;
}

QString OAIVenue::getTimezone() const {
    return m_timezone;
}
void OAIVenue::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIVenue::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIVenue::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIVenue::getType() const {
    return m_type;
}
void OAIVenue::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVenue::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVenue::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIVenue::getUnits() const {
    return m_units;
}
void OAIVenue::setUnits(const QString &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAIVenue::is_units_Set() const{
    return m_units_isSet;
}

bool OAIVenue::is_units_Valid() const{
    return m_units_isValid;
}

QString OAIVenue::getUrl() const {
    return m_url;
}
void OAIVenue::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVenue::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVenue::is_url_Valid() const{
    return m_url_isValid;
}

qint64 OAIVenue::getVersion() const {
    return m_version;
}
void OAIVenue::setVersion(const qint64 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIVenue::is_version_Set() const{
    return m_version_isSet;
}

bool OAIVenue::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIVenue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessible_seating_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_box_office_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_city.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_descriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_discoverable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dma.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_markets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parking_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationships.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_social.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVenue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
