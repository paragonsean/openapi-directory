/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessDates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessDates::OAIAccessDates(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessDates::OAIAccessDates() {
    this->initializeModel();
}

OAIAccessDates::~OAIAccessDates() {}

void OAIAccessDates::initializeModel() {

    m_end_approximate_isSet = false;
    m_end_approximate_isValid = false;

    m_end_date_time_isSet = false;
    m_end_date_time_isValid = false;

    m_start_approximate_isSet = false;
    m_start_approximate_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;
}

void OAIAccessDates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessDates::fromJsonObject(QJsonObject json) {

    m_end_approximate_isValid = ::OpenAPI::fromJsonValue(m_end_approximate, json[QString("endApproximate")]);
    m_end_approximate_isSet = !json[QString("endApproximate")].isNull() && m_end_approximate_isValid;

    m_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_end_date_time, json[QString("endDateTime")]);
    m_end_date_time_isSet = !json[QString("endDateTime")].isNull() && m_end_date_time_isValid;

    m_start_approximate_isValid = ::OpenAPI::fromJsonValue(m_start_approximate, json[QString("startApproximate")]);
    m_start_approximate_isSet = !json[QString("startApproximate")].isNull() && m_start_approximate_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;
}

QString OAIAccessDates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessDates::asJsonObject() const {
    QJsonObject obj;
    if (m_end_approximate_isSet) {
        obj.insert(QString("endApproximate"), ::OpenAPI::toJsonValue(m_end_approximate));
    }
    if (m_end_date_time_isSet) {
        obj.insert(QString("endDateTime"), ::OpenAPI::toJsonValue(m_end_date_time));
    }
    if (m_start_approximate_isSet) {
        obj.insert(QString("startApproximate"), ::OpenAPI::toJsonValue(m_start_approximate));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    return obj;
}

bool OAIAccessDates::isEndApproximate() const {
    return m_end_approximate;
}
void OAIAccessDates::setEndApproximate(const bool &end_approximate) {
    m_end_approximate = end_approximate;
    m_end_approximate_isSet = true;
}

bool OAIAccessDates::is_end_approximate_Set() const{
    return m_end_approximate_isSet;
}

bool OAIAccessDates::is_end_approximate_Valid() const{
    return m_end_approximate_isValid;
}

QDateTime OAIAccessDates::getEndDateTime() const {
    return m_end_date_time;
}
void OAIAccessDates::setEndDateTime(const QDateTime &end_date_time) {
    m_end_date_time = end_date_time;
    m_end_date_time_isSet = true;
}

bool OAIAccessDates::is_end_date_time_Set() const{
    return m_end_date_time_isSet;
}

bool OAIAccessDates::is_end_date_time_Valid() const{
    return m_end_date_time_isValid;
}

bool OAIAccessDates::isStartApproximate() const {
    return m_start_approximate;
}
void OAIAccessDates::setStartApproximate(const bool &start_approximate) {
    m_start_approximate = start_approximate;
    m_start_approximate_isSet = true;
}

bool OAIAccessDates::is_start_approximate_Set() const{
    return m_start_approximate_isSet;
}

bool OAIAccessDates::is_start_approximate_Valid() const{
    return m_start_approximate_isValid;
}

QDateTime OAIAccessDates::getStartDateTime() const {
    return m_start_date_time;
}
void OAIAccessDates::setStartDateTime(const QDateTime &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIAccessDates::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIAccessDates::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

bool OAIAccessDates::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_approximate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_approximate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessDates::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
