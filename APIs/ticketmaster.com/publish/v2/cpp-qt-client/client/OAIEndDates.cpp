/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndDates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndDates::OAIEndDates(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndDates::OAIEndDates() {
    this->initializeModel();
}

OAIEndDates::~OAIEndDates() {}

void OAIEndDates::initializeModel() {

    m_approximate_isSet = false;
    m_approximate_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_local_time_isSet = false;
    m_local_time_isValid = false;
}

void OAIEndDates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndDates::fromJsonObject(QJsonObject json) {

    m_approximate_isValid = ::OpenAPI::fromJsonValue(m_approximate, json[QString("approximate")]);
    m_approximate_isSet = !json[QString("approximate")].isNull() && m_approximate_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("dateTime")]);
    m_date_time_isSet = !json[QString("dateTime")].isNull() && m_date_time_isValid;

    m_local_time_isValid = ::OpenAPI::fromJsonValue(m_local_time, json[QString("localTime")]);
    m_local_time_isSet = !json[QString("localTime")].isNull() && m_local_time_isValid;
}

QString OAIEndDates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndDates::asJsonObject() const {
    QJsonObject obj;
    if (m_approximate_isSet) {
        obj.insert(QString("approximate"), ::OpenAPI::toJsonValue(m_approximate));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("dateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_local_time.isSet()) {
        obj.insert(QString("localTime"), ::OpenAPI::toJsonValue(m_local_time));
    }
    return obj;
}

bool OAIEndDates::isApproximate() const {
    return m_approximate;
}
void OAIEndDates::setApproximate(const bool &approximate) {
    m_approximate = approximate;
    m_approximate_isSet = true;
}

bool OAIEndDates::is_approximate_Set() const{
    return m_approximate_isSet;
}

bool OAIEndDates::is_approximate_Valid() const{
    return m_approximate_isValid;
}

QDateTime OAIEndDates::getDateTime() const {
    return m_date_time;
}
void OAIEndDates::setDateTime(const QDateTime &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAIEndDates::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAIEndDates::is_date_time_Valid() const{
    return m_date_time_isValid;
}

OAILocalTime OAIEndDates::getLocalTime() const {
    return m_local_time;
}
void OAIEndDates::setLocalTime(const OAILocalTime &local_time) {
    m_local_time = local_time;
    m_local_time_isSet = true;
}

bool OAIEndDates::is_local_time_Set() const{
    return m_local_time_isSet;
}

bool OAIEndDates::is_local_time_Valid() const{
    return m_local_time_isValid;
}

bool OAIEndDates::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approximate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_time.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndDates::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
