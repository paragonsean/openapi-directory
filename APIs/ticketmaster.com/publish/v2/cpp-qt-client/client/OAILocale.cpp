/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocale.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocale::OAILocale(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocale::OAILocale() {
    this->initializeModel();
}

OAILocale::~OAILocale() {}

void OAILocale::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_display_country_isSet = false;
    m_display_country_isValid = false;

    m_display_language_isSet = false;
    m_display_language_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_display_script_isSet = false;
    m_display_script_isValid = false;

    m_display_variant_isSet = false;
    m_display_variant_isValid = false;

    m_extension_keys_isSet = false;
    m_extension_keys_isValid = false;

    m_iso3_country_isSet = false;
    m_iso3_country_isValid = false;

    m_iso3_language_isSet = false;
    m_iso3_language_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_unicode_locale_attributes_isSet = false;
    m_unicode_locale_attributes_isValid = false;

    m_unicode_locale_keys_isSet = false;
    m_unicode_locale_keys_isValid = false;

    m_variant_isSet = false;
    m_variant_isValid = false;
}

void OAILocale::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocale::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_display_country_isValid = ::OpenAPI::fromJsonValue(m_display_country, json[QString("displayCountry")]);
    m_display_country_isSet = !json[QString("displayCountry")].isNull() && m_display_country_isValid;

    m_display_language_isValid = ::OpenAPI::fromJsonValue(m_display_language, json[QString("displayLanguage")]);
    m_display_language_isSet = !json[QString("displayLanguage")].isNull() && m_display_language_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_display_script_isValid = ::OpenAPI::fromJsonValue(m_display_script, json[QString("displayScript")]);
    m_display_script_isSet = !json[QString("displayScript")].isNull() && m_display_script_isValid;

    m_display_variant_isValid = ::OpenAPI::fromJsonValue(m_display_variant, json[QString("displayVariant")]);
    m_display_variant_isSet = !json[QString("displayVariant")].isNull() && m_display_variant_isValid;

    m_extension_keys_isValid = ::OpenAPI::fromJsonValue(m_extension_keys, json[QString("extensionKeys")]);
    m_extension_keys_isSet = !json[QString("extensionKeys")].isNull() && m_extension_keys_isValid;

    m_iso3_country_isValid = ::OpenAPI::fromJsonValue(m_iso3_country, json[QString("iso3Country")]);
    m_iso3_country_isSet = !json[QString("iso3Country")].isNull() && m_iso3_country_isValid;

    m_iso3_language_isValid = ::OpenAPI::fromJsonValue(m_iso3_language, json[QString("iso3Language")]);
    m_iso3_language_isSet = !json[QString("iso3Language")].isNull() && m_iso3_language_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_unicode_locale_attributes_isValid = ::OpenAPI::fromJsonValue(m_unicode_locale_attributes, json[QString("unicodeLocaleAttributes")]);
    m_unicode_locale_attributes_isSet = !json[QString("unicodeLocaleAttributes")].isNull() && m_unicode_locale_attributes_isValid;

    m_unicode_locale_keys_isValid = ::OpenAPI::fromJsonValue(m_unicode_locale_keys, json[QString("unicodeLocaleKeys")]);
    m_unicode_locale_keys_isSet = !json[QString("unicodeLocaleKeys")].isNull() && m_unicode_locale_keys_isValid;

    m_variant_isValid = ::OpenAPI::fromJsonValue(m_variant, json[QString("variant")]);
    m_variant_isSet = !json[QString("variant")].isNull() && m_variant_isValid;
}

QString OAILocale::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocale::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_display_country_isSet) {
        obj.insert(QString("displayCountry"), ::OpenAPI::toJsonValue(m_display_country));
    }
    if (m_display_language_isSet) {
        obj.insert(QString("displayLanguage"), ::OpenAPI::toJsonValue(m_display_language));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_display_script_isSet) {
        obj.insert(QString("displayScript"), ::OpenAPI::toJsonValue(m_display_script));
    }
    if (m_display_variant_isSet) {
        obj.insert(QString("displayVariant"), ::OpenAPI::toJsonValue(m_display_variant));
    }
    if (m_extension_keys.size() > 0) {
        obj.insert(QString("extensionKeys"), ::OpenAPI::toJsonValue(m_extension_keys));
    }
    if (m_iso3_country_isSet) {
        obj.insert(QString("iso3Country"), ::OpenAPI::toJsonValue(m_iso3_country));
    }
    if (m_iso3_language_isSet) {
        obj.insert(QString("iso3Language"), ::OpenAPI::toJsonValue(m_iso3_language));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_unicode_locale_attributes.size() > 0) {
        obj.insert(QString("unicodeLocaleAttributes"), ::OpenAPI::toJsonValue(m_unicode_locale_attributes));
    }
    if (m_unicode_locale_keys.size() > 0) {
        obj.insert(QString("unicodeLocaleKeys"), ::OpenAPI::toJsonValue(m_unicode_locale_keys));
    }
    if (m_variant_isSet) {
        obj.insert(QString("variant"), ::OpenAPI::toJsonValue(m_variant));
    }
    return obj;
}

QString OAILocale::getCountry() const {
    return m_country;
}
void OAILocale::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAILocale::is_country_Set() const{
    return m_country_isSet;
}

bool OAILocale::is_country_Valid() const{
    return m_country_isValid;
}

QString OAILocale::getDisplayCountry() const {
    return m_display_country;
}
void OAILocale::setDisplayCountry(const QString &display_country) {
    m_display_country = display_country;
    m_display_country_isSet = true;
}

bool OAILocale::is_display_country_Set() const{
    return m_display_country_isSet;
}

bool OAILocale::is_display_country_Valid() const{
    return m_display_country_isValid;
}

QString OAILocale::getDisplayLanguage() const {
    return m_display_language;
}
void OAILocale::setDisplayLanguage(const QString &display_language) {
    m_display_language = display_language;
    m_display_language_isSet = true;
}

bool OAILocale::is_display_language_Set() const{
    return m_display_language_isSet;
}

bool OAILocale::is_display_language_Valid() const{
    return m_display_language_isValid;
}

QString OAILocale::getDisplayName() const {
    return m_display_name;
}
void OAILocale::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAILocale::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAILocale::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAILocale::getDisplayScript() const {
    return m_display_script;
}
void OAILocale::setDisplayScript(const QString &display_script) {
    m_display_script = display_script;
    m_display_script_isSet = true;
}

bool OAILocale::is_display_script_Set() const{
    return m_display_script_isSet;
}

bool OAILocale::is_display_script_Valid() const{
    return m_display_script_isValid;
}

QString OAILocale::getDisplayVariant() const {
    return m_display_variant;
}
void OAILocale::setDisplayVariant(const QString &display_variant) {
    m_display_variant = display_variant;
    m_display_variant_isSet = true;
}

bool OAILocale::is_display_variant_Set() const{
    return m_display_variant_isSet;
}

bool OAILocale::is_display_variant_Valid() const{
    return m_display_variant_isValid;
}

QSet<QString> OAILocale::getExtensionKeys() const {
    return m_extension_keys;
}
void OAILocale::setExtensionKeys(const QSet<QString> &extension_keys) {
    m_extension_keys = extension_keys;
    m_extension_keys_isSet = true;
}

bool OAILocale::is_extension_keys_Set() const{
    return m_extension_keys_isSet;
}

bool OAILocale::is_extension_keys_Valid() const{
    return m_extension_keys_isValid;
}

QString OAILocale::getIso3Country() const {
    return m_iso3_country;
}
void OAILocale::setIso3Country(const QString &iso3_country) {
    m_iso3_country = iso3_country;
    m_iso3_country_isSet = true;
}

bool OAILocale::is_iso3_country_Set() const{
    return m_iso3_country_isSet;
}

bool OAILocale::is_iso3_country_Valid() const{
    return m_iso3_country_isValid;
}

QString OAILocale::getIso3Language() const {
    return m_iso3_language;
}
void OAILocale::setIso3Language(const QString &iso3_language) {
    m_iso3_language = iso3_language;
    m_iso3_language_isSet = true;
}

bool OAILocale::is_iso3_language_Set() const{
    return m_iso3_language_isSet;
}

bool OAILocale::is_iso3_language_Valid() const{
    return m_iso3_language_isValid;
}

QString OAILocale::getLanguage() const {
    return m_language;
}
void OAILocale::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAILocale::is_language_Set() const{
    return m_language_isSet;
}

bool OAILocale::is_language_Valid() const{
    return m_language_isValid;
}

QString OAILocale::getScript() const {
    return m_script;
}
void OAILocale::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAILocale::is_script_Set() const{
    return m_script_isSet;
}

bool OAILocale::is_script_Valid() const{
    return m_script_isValid;
}

QSet<QString> OAILocale::getUnicodeLocaleAttributes() const {
    return m_unicode_locale_attributes;
}
void OAILocale::setUnicodeLocaleAttributes(const QSet<QString> &unicode_locale_attributes) {
    m_unicode_locale_attributes = unicode_locale_attributes;
    m_unicode_locale_attributes_isSet = true;
}

bool OAILocale::is_unicode_locale_attributes_Set() const{
    return m_unicode_locale_attributes_isSet;
}

bool OAILocale::is_unicode_locale_attributes_Valid() const{
    return m_unicode_locale_attributes_isValid;
}

QSet<QString> OAILocale::getUnicodeLocaleKeys() const {
    return m_unicode_locale_keys;
}
void OAILocale::setUnicodeLocaleKeys(const QSet<QString> &unicode_locale_keys) {
    m_unicode_locale_keys = unicode_locale_keys;
    m_unicode_locale_keys_isSet = true;
}

bool OAILocale::is_unicode_locale_keys_Set() const{
    return m_unicode_locale_keys_isSet;
}

bool OAILocale::is_unicode_locale_keys_Valid() const{
    return m_unicode_locale_keys_isValid;
}

QString OAILocale::getVariant() const {
    return m_variant;
}
void OAILocale::setVariant(const QString &variant) {
    m_variant = variant;
    m_variant_isSet = true;
}

bool OAILocale::is_variant_Set() const{
    return m_variant_isSet;
}

bool OAILocale::is_variant_Valid() const{
    return m_variant_isValid;
}

bool OAILocale::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso3_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso3_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unicode_locale_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unicode_locale_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocale::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
