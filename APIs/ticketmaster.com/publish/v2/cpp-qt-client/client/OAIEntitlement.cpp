/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntitlement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntitlement::OAIEntitlement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntitlement::OAIEntitlement() {
    this->initializeModel();
}

OAIEntitlement::~OAIEntitlement() {}

void OAIEntitlement::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_related_entity_id_isSet = false;
    m_related_entity_id_isValid = false;

    m_related_entity_source_isSet = false;
    m_related_entity_source_isValid = false;

    m_related_entity_type_isSet = false;
    m_related_entity_type_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_version_number_isSet = false;
    m_version_number_isValid = false;
}

void OAIEntitlement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntitlement::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_related_entity_id_isValid = ::OpenAPI::fromJsonValue(m_related_entity_id, json[QString("relatedEntityId")]);
    m_related_entity_id_isSet = !json[QString("relatedEntityId")].isNull() && m_related_entity_id_isValid;

    m_related_entity_source_isValid = ::OpenAPI::fromJsonValue(m_related_entity_source, json[QString("relatedEntitySource")]);
    m_related_entity_source_isSet = !json[QString("relatedEntitySource")].isNull() && m_related_entity_source_isValid;

    m_related_entity_type_isValid = ::OpenAPI::fromJsonValue(m_related_entity_type, json[QString("relatedEntityType")]);
    m_related_entity_type_isSet = !json[QString("relatedEntityType")].isNull() && m_related_entity_type_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_version_number_isValid = ::OpenAPI::fromJsonValue(m_version_number, json[QString("versionNumber")]);
    m_version_number_isSet = !json[QString("versionNumber")].isNull() && m_version_number_isValid;
}

QString OAIEntitlement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntitlement::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_related_entity_id_isSet) {
        obj.insert(QString("relatedEntityId"), ::OpenAPI::toJsonValue(m_related_entity_id));
    }
    if (m_related_entity_source.isSet()) {
        obj.insert(QString("relatedEntitySource"), ::OpenAPI::toJsonValue(m_related_entity_source));
    }
    if (m_related_entity_type_isSet) {
        obj.insert(QString("relatedEntityType"), ::OpenAPI::toJsonValue(m_related_entity_type));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_version_number_isSet) {
        obj.insert(QString("versionNumber"), ::OpenAPI::toJsonValue(m_version_number));
    }
    return obj;
}

OAIObject OAIEntitlement::getData() const {
    return m_data;
}
void OAIEntitlement::setData(const OAIObject &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIEntitlement::is_data_Set() const{
    return m_data_isSet;
}

bool OAIEntitlement::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIEntitlement::getRelatedEntityId() const {
    return m_related_entity_id;
}
void OAIEntitlement::setRelatedEntityId(const QString &related_entity_id) {
    m_related_entity_id = related_entity_id;
    m_related_entity_id_isSet = true;
}

bool OAIEntitlement::is_related_entity_id_Set() const{
    return m_related_entity_id_isSet;
}

bool OAIEntitlement::is_related_entity_id_Valid() const{
    return m_related_entity_id_isValid;
}

OAISource OAIEntitlement::getRelatedEntitySource() const {
    return m_related_entity_source;
}
void OAIEntitlement::setRelatedEntitySource(const OAISource &related_entity_source) {
    m_related_entity_source = related_entity_source;
    m_related_entity_source_isSet = true;
}

bool OAIEntitlement::is_related_entity_source_Set() const{
    return m_related_entity_source_isSet;
}

bool OAIEntitlement::is_related_entity_source_Valid() const{
    return m_related_entity_source_isValid;
}

QString OAIEntitlement::getRelatedEntityType() const {
    return m_related_entity_type;
}
void OAIEntitlement::setRelatedEntityType(const QString &related_entity_type) {
    m_related_entity_type = related_entity_type;
    m_related_entity_type_isSet = true;
}

bool OAIEntitlement::is_related_entity_type_Set() const{
    return m_related_entity_type_isSet;
}

bool OAIEntitlement::is_related_entity_type_Valid() const{
    return m_related_entity_type_isValid;
}

QString OAIEntitlement::getSource() const {
    return m_source;
}
void OAIEntitlement::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIEntitlement::is_source_Set() const{
    return m_source_isSet;
}

bool OAIEntitlement::is_source_Valid() const{
    return m_source_isValid;
}

qint64 OAIEntitlement::getVersionNumber() const {
    return m_version_number;
}
void OAIEntitlement::setVersionNumber(const qint64 &version_number) {
    m_version_number = version_number;
    m_version_number_isSet = true;
}

bool OAIEntitlement::is_version_number_Set() const{
    return m_version_number_isSet;
}

bool OAIEntitlement::is_version_number_Valid() const{
    return m_version_number_isValid;
}

bool OAIEntitlement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_entity_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntitlement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_related_entity_type_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
