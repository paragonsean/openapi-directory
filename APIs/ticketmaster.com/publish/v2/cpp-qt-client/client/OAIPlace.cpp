/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlace::OAIPlace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlace::OAIPlace() {
    this->initializeModel();
}

OAIPlace::~OAIPlace() {}

void OAIPlace::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_area_isSet = false;
    m_area_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIPlace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlace::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_area_isValid = ::OpenAPI::fromJsonValue(m_area, json[QString("area")]);
    m_area_isSet = !json[QString("area")].isNull() && m_area_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIPlace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlace::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_area.isSet()) {
        obj.insert(QString("area"), ::OpenAPI::toJsonValue(m_area));
    }
    if (m_city.isSet()) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIAddress OAIPlace::getAddress() const {
    return m_address;
}
void OAIPlace::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPlace::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPlace::is_address_Valid() const{
    return m_address_isValid;
}

OAIArea OAIPlace::getArea() const {
    return m_area;
}
void OAIPlace::setArea(const OAIArea &area) {
    m_area = area;
    m_area_isSet = true;
}

bool OAIPlace::is_area_Set() const{
    return m_area_isSet;
}

bool OAIPlace::is_area_Valid() const{
    return m_area_isValid;
}

OAICity OAIPlace::getCity() const {
    return m_city;
}
void OAIPlace::setCity(const OAICity &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIPlace::is_city_Set() const{
    return m_city_isSet;
}

bool OAIPlace::is_city_Valid() const{
    return m_city_isValid;
}

OAICountry OAIPlace::getCountry() const {
    return m_country;
}
void OAIPlace::setCountry(const OAICountry &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPlace::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPlace::is_country_Valid() const{
    return m_country_isValid;
}

OAILocation OAIPlace::getLocation() const {
    return m_location;
}
void OAIPlace::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPlace::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPlace::is_location_Valid() const{
    return m_location_isValid;
}

QMap<QString, QString> OAIPlace::getNames() const {
    return m_names;
}
void OAIPlace::setNames(const QMap<QString, QString> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIPlace::is_names_Set() const{
    return m_names_isSet;
}

bool OAIPlace::is_names_Valid() const{
    return m_names_isValid;
}

QString OAIPlace::getPostalCode() const {
    return m_postal_code;
}
void OAIPlace::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIPlace::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIPlace::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

OAIState OAIPlace::getState() const {
    return m_state;
}
void OAIPlace::setState(const OAIState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPlace::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPlace::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIPlace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_area.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_city.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
