/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVenueGeneralInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVenueGeneralInfo::OAIVenueGeneralInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVenueGeneralInfo::OAIVenueGeneralInfo() {
    this->initializeModel();
}

OAIVenueGeneralInfo::~OAIVenueGeneralInfo() {}

void OAIVenueGeneralInfo::initializeModel() {

    m_child_rules_isSet = false;
    m_child_rules_isValid = false;

    m_general_rules_isSet = false;
    m_general_rules_isValid = false;
}

void OAIVenueGeneralInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVenueGeneralInfo::fromJsonObject(QJsonObject json) {

    m_child_rules_isValid = ::OpenAPI::fromJsonValue(m_child_rules, json[QString("childRules")]);
    m_child_rules_isSet = !json[QString("childRules")].isNull() && m_child_rules_isValid;

    m_general_rules_isValid = ::OpenAPI::fromJsonValue(m_general_rules, json[QString("generalRules")]);
    m_general_rules_isSet = !json[QString("generalRules")].isNull() && m_general_rules_isValid;
}

QString OAIVenueGeneralInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVenueGeneralInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_child_rules.size() > 0) {
        obj.insert(QString("childRules"), ::OpenAPI::toJsonValue(m_child_rules));
    }
    if (m_general_rules.size() > 0) {
        obj.insert(QString("generalRules"), ::OpenAPI::toJsonValue(m_general_rules));
    }
    return obj;
}

QMap<QString, QString> OAIVenueGeneralInfo::getChildRules() const {
    return m_child_rules;
}
void OAIVenueGeneralInfo::setChildRules(const QMap<QString, QString> &child_rules) {
    m_child_rules = child_rules;
    m_child_rules_isSet = true;
}

bool OAIVenueGeneralInfo::is_child_rules_Set() const{
    return m_child_rules_isSet;
}

bool OAIVenueGeneralInfo::is_child_rules_Valid() const{
    return m_child_rules_isValid;
}

QMap<QString, QString> OAIVenueGeneralInfo::getGeneralRules() const {
    return m_general_rules;
}
void OAIVenueGeneralInfo::setGeneralRules(const QMap<QString, QString> &general_rules) {
    m_general_rules = general_rules;
    m_general_rules_isSet = true;
}

bool OAIVenueGeneralInfo::is_general_rules_Set() const{
    return m_general_rules_isSet;
}

bool OAIVenueGeneralInfo::is_general_rules_Valid() const{
    return m_general_rules_isValid;
}

bool OAIVenueGeneralInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVenueGeneralInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
