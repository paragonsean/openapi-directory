/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIngestionResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIngestionResult::OAIIngestionResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIngestionResult::OAIIngestionResult() {
    this->initializeModel();
}

OAIIngestionResult::~OAIIngestionResult() {}

void OAIIngestionResult::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_ignored_properties_isSet = false;
    m_ignored_properties_isValid = false;

    m_invalid_properties_isSet = false;
    m_invalid_properties_isValid = false;

    m_invalid_values_isSet = false;
    m_invalid_values_isValid = false;

    m_missing_properties_isSet = false;
    m_missing_properties_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_unknown_properties_isSet = false;
    m_unknown_properties_isValid = false;
}

void OAIIngestionResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIngestionResult::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ignored_properties_isValid = ::OpenAPI::fromJsonValue(m_ignored_properties, json[QString("ignoredProperties")]);
    m_ignored_properties_isSet = !json[QString("ignoredProperties")].isNull() && m_ignored_properties_isValid;

    m_invalid_properties_isValid = ::OpenAPI::fromJsonValue(m_invalid_properties, json[QString("invalidProperties")]);
    m_invalid_properties_isSet = !json[QString("invalidProperties")].isNull() && m_invalid_properties_isValid;

    m_invalid_values_isValid = ::OpenAPI::fromJsonValue(m_invalid_values, json[QString("invalidValues")]);
    m_invalid_values_isSet = !json[QString("invalidValues")].isNull() && m_invalid_values_isValid;

    m_missing_properties_isValid = ::OpenAPI::fromJsonValue(m_missing_properties, json[QString("missingProperties")]);
    m_missing_properties_isSet = !json[QString("missingProperties")].isNull() && m_missing_properties_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_unknown_properties_isValid = ::OpenAPI::fromJsonValue(m_unknown_properties, json[QString("unknownProperties")]);
    m_unknown_properties_isSet = !json[QString("unknownProperties")].isNull() && m_unknown_properties_isValid;
}

QString OAIIngestionResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIngestionResult::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ignored_properties.size() > 0) {
        obj.insert(QString("ignoredProperties"), ::OpenAPI::toJsonValue(m_ignored_properties));
    }
    if (m_invalid_properties.size() > 0) {
        obj.insert(QString("invalidProperties"), ::OpenAPI::toJsonValue(m_invalid_properties));
    }
    if (m_invalid_values.size() > 0) {
        obj.insert(QString("invalidValues"), ::OpenAPI::toJsonValue(m_invalid_values));
    }
    if (m_missing_properties.size() > 0) {
        obj.insert(QString("missingProperties"), ::OpenAPI::toJsonValue(m_missing_properties));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_unknown_properties.size() > 0) {
        obj.insert(QString("unknownProperties"), ::OpenAPI::toJsonValue(m_unknown_properties));
    }
    return obj;
}

QString OAIIngestionResult::getId() const {
    return m_id;
}
void OAIIngestionResult::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIngestionResult::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIngestionResult::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, OAIObject> OAIIngestionResult::getIgnoredProperties() const {
    return m_ignored_properties;
}
void OAIIngestionResult::setIgnoredProperties(const QMap<QString, OAIObject> &ignored_properties) {
    m_ignored_properties = ignored_properties;
    m_ignored_properties_isSet = true;
}

bool OAIIngestionResult::is_ignored_properties_Set() const{
    return m_ignored_properties_isSet;
}

bool OAIIngestionResult::is_ignored_properties_Valid() const{
    return m_ignored_properties_isValid;
}

QMap<QString, OAIObject> OAIIngestionResult::getInvalidProperties() const {
    return m_invalid_properties;
}
void OAIIngestionResult::setInvalidProperties(const QMap<QString, OAIObject> &invalid_properties) {
    m_invalid_properties = invalid_properties;
    m_invalid_properties_isSet = true;
}

bool OAIIngestionResult::is_invalid_properties_Set() const{
    return m_invalid_properties_isSet;
}

bool OAIIngestionResult::is_invalid_properties_Valid() const{
    return m_invalid_properties_isValid;
}

QMap<QString, OAIObject> OAIIngestionResult::getInvalidValues() const {
    return m_invalid_values;
}
void OAIIngestionResult::setInvalidValues(const QMap<QString, OAIObject> &invalid_values) {
    m_invalid_values = invalid_values;
    m_invalid_values_isSet = true;
}

bool OAIIngestionResult::is_invalid_values_Set() const{
    return m_invalid_values_isSet;
}

bool OAIIngestionResult::is_invalid_values_Valid() const{
    return m_invalid_values_isValid;
}

QMap<QString, OAIObject> OAIIngestionResult::getMissingProperties() const {
    return m_missing_properties;
}
void OAIIngestionResult::setMissingProperties(const QMap<QString, OAIObject> &missing_properties) {
    m_missing_properties = missing_properties;
    m_missing_properties_isSet = true;
}

bool OAIIngestionResult::is_missing_properties_Set() const{
    return m_missing_properties_isSet;
}

bool OAIIngestionResult::is_missing_properties_Valid() const{
    return m_missing_properties_isValid;
}

QString OAIIngestionResult::getStatus() const {
    return m_status;
}
void OAIIngestionResult::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIIngestionResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIIngestionResult::is_status_Valid() const{
    return m_status_isValid;
}

QMap<QString, OAIObject> OAIIngestionResult::getUnknownProperties() const {
    return m_unknown_properties;
}
void OAIIngestionResult::setUnknownProperties(const QMap<QString, OAIObject> &unknown_properties) {
    m_unknown_properties = unknown_properties;
    m_unknown_properties_isSet = true;
}

bool OAIIngestionResult::is_unknown_properties_Set() const{
    return m_unknown_properties_isSet;
}

bool OAIIngestionResult::is_unknown_properties_Valid() const{
    return m_unknown_properties_isValid;
}

bool OAIIngestionResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignored_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unknown_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIngestionResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
