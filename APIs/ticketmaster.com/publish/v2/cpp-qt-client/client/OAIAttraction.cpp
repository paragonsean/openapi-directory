/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttraction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttraction::OAIAttraction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttraction::OAIAttraction() {
    this->initializeModel();
}

OAIAttraction::~OAIAttraction() {}

void OAIAttraction::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_additional_infos_isSet = false;
    m_additional_infos_isValid = false;

    m_classifications_isSet = false;
    m_classifications_isValid = false;

    m_descriptions_isSet = false;
    m_descriptions_isValid = false;

    m_discoverable_isSet = false;
    m_discoverable_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_references_isSet = false;
    m_references_isValid = false;

    m_relationships_isSet = false;
    m_relationships_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIAttraction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttraction::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_additional_infos_isValid = ::OpenAPI::fromJsonValue(m_additional_infos, json[QString("additionalInfos")]);
    m_additional_infos_isSet = !json[QString("additionalInfos")].isNull() && m_additional_infos_isValid;

    m_classifications_isValid = ::OpenAPI::fromJsonValue(m_classifications, json[QString("classifications")]);
    m_classifications_isSet = !json[QString("classifications")].isNull() && m_classifications_isValid;

    m_descriptions_isValid = ::OpenAPI::fromJsonValue(m_descriptions, json[QString("descriptions")]);
    m_descriptions_isSet = !json[QString("descriptions")].isNull() && m_descriptions_isValid;

    m_discoverable_isValid = ::OpenAPI::fromJsonValue(m_discoverable, json[QString("discoverable")]);
    m_discoverable_isSet = !json[QString("discoverable")].isNull() && m_discoverable_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_references_isValid = ::OpenAPI::fromJsonValue(m_references, json[QString("references")]);
    m_references_isSet = !json[QString("references")].isNull() && m_references_isValid;

    m_relationships_isValid = ::OpenAPI::fromJsonValue(m_relationships, json[QString("relationships")]);
    m_relationships_isSet = !json[QString("relationships")].isNull() && m_relationships_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIAttraction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttraction::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_additional_infos.size() > 0) {
        obj.insert(QString("additionalInfos"), ::OpenAPI::toJsonValue(m_additional_infos));
    }
    if (m_classifications.size() > 0) {
        obj.insert(QString("classifications"), ::OpenAPI::toJsonValue(m_classifications));
    }
    if (m_descriptions.size() > 0) {
        obj.insert(QString("descriptions"), ::OpenAPI::toJsonValue(m_descriptions));
    }
    if (m_discoverable_isSet) {
        obj.insert(QString("discoverable"), ::OpenAPI::toJsonValue(m_discoverable));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_references.size() > 0) {
        obj.insert(QString("references"), ::OpenAPI::toJsonValue(m_references));
    }
    if (m_relationships.size() > 0) {
        obj.insert(QString("relationships"), ::OpenAPI::toJsonValue(m_relationships));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_test_isSet) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIAttraction::isActive() const {
    return m_active;
}
void OAIAttraction::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIAttraction::is_active_Set() const{
    return m_active_isSet;
}

bool OAIAttraction::is_active_Valid() const{
    return m_active_isValid;
}

QMap<QString, QString> OAIAttraction::getAdditionalInfos() const {
    return m_additional_infos;
}
void OAIAttraction::setAdditionalInfos(const QMap<QString, QString> &additional_infos) {
    m_additional_infos = additional_infos;
    m_additional_infos_isSet = true;
}

bool OAIAttraction::is_additional_infos_Set() const{
    return m_additional_infos_isSet;
}

bool OAIAttraction::is_additional_infos_Valid() const{
    return m_additional_infos_isValid;
}

QList<OAIClassification> OAIAttraction::getClassifications() const {
    return m_classifications;
}
void OAIAttraction::setClassifications(const QList<OAIClassification> &classifications) {
    m_classifications = classifications;
    m_classifications_isSet = true;
}

bool OAIAttraction::is_classifications_Set() const{
    return m_classifications_isSet;
}

bool OAIAttraction::is_classifications_Valid() const{
    return m_classifications_isValid;
}

QMap<QString, QString> OAIAttraction::getDescriptions() const {
    return m_descriptions;
}
void OAIAttraction::setDescriptions(const QMap<QString, QString> &descriptions) {
    m_descriptions = descriptions;
    m_descriptions_isSet = true;
}

bool OAIAttraction::is_descriptions_Set() const{
    return m_descriptions_isSet;
}

bool OAIAttraction::is_descriptions_Valid() const{
    return m_descriptions_isValid;
}

bool OAIAttraction::isDiscoverable() const {
    return m_discoverable;
}
void OAIAttraction::setDiscoverable(const bool &discoverable) {
    m_discoverable = discoverable;
    m_discoverable_isSet = true;
}

bool OAIAttraction::is_discoverable_Set() const{
    return m_discoverable_isSet;
}

bool OAIAttraction::is_discoverable_Valid() const{
    return m_discoverable_isValid;
}

QSet<OAIImage> OAIAttraction::getImages() const {
    return m_images;
}
void OAIAttraction::setImages(const QSet<OAIImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIAttraction::is_images_Set() const{
    return m_images_isSet;
}

bool OAIAttraction::is_images_Valid() const{
    return m_images_isValid;
}

QMap<QString, QString> OAIAttraction::getNames() const {
    return m_names;
}
void OAIAttraction::setNames(const QMap<QString, QString> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIAttraction::is_names_Set() const{
    return m_names_isSet;
}

bool OAIAttraction::is_names_Valid() const{
    return m_names_isValid;
}

QMap<QString, QString> OAIAttraction::getReferences() const {
    return m_references;
}
void OAIAttraction::setReferences(const QMap<QString, QString> &references) {
    m_references = references;
    m_references_isSet = true;
}

bool OAIAttraction::is_references_Set() const{
    return m_references_isSet;
}

bool OAIAttraction::is_references_Valid() const{
    return m_references_isValid;
}

QList<OAIObject> OAIAttraction::getRelationships() const {
    return m_relationships;
}
void OAIAttraction::setRelationships(const QList<OAIObject> &relationships) {
    m_relationships = relationships;
    m_relationships_isSet = true;
}

bool OAIAttraction::is_relationships_Set() const{
    return m_relationships_isSet;
}

bool OAIAttraction::is_relationships_Valid() const{
    return m_relationships_isValid;
}

OAISource OAIAttraction::getSource() const {
    return m_source;
}
void OAIAttraction::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIAttraction::is_source_Set() const{
    return m_source_isSet;
}

bool OAIAttraction::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIAttraction::isTest() const {
    return m_test;
}
void OAIAttraction::setTest(const bool &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAIAttraction::is_test_Set() const{
    return m_test_isSet;
}

bool OAIAttraction::is_test_Valid() const{
    return m_test_isValid;
}

QString OAIAttraction::getType() const {
    return m_type;
}
void OAIAttraction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAttraction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAttraction::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAttraction::getUrl() const {
    return m_url;
}
void OAIAttraction::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAttraction::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAttraction::is_url_Valid() const{
    return m_url_isValid;
}

qint64 OAIAttraction::getVersion() const {
    return m_version;
}
void OAIAttraction::setVersion(const qint64 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIAttraction::is_version_Set() const{
    return m_version_isSet;
}

bool OAIAttraction::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIAttraction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_classifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_descriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_discoverable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationships.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttraction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
