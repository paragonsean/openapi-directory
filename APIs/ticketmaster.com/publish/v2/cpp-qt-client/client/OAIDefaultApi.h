/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttraction.h"
#include "OAIAugmentationData.h"
#include "OAIEntitlement.h"
#include "OAIEvent.h"
#include "OAIExtensionData.h"
#include "OAIIngestionResult.h"
#include "OAIVenue.h"
#include "OAIVideo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tmps_correlation_id QString [required]
    * @param[in]  oai_augmentation_data OAIAugmentationData [required]
    */
    virtual void patchAttraction(const QString &id, const QString &tmps_correlation_id, const OAIAugmentationData &oai_augmentation_data);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tmps_correlation_id QString [required]
    * @param[in]  oai_augmentation_data OAIAugmentationData [required]
    */
    virtual void patchEvent(const QString &id, const QString &tmps_correlation_id, const OAIAugmentationData &oai_augmentation_data);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tmps_correlation_id QString [required]
    * @param[in]  oai_augmentation_data OAIAugmentationData [required]
    */
    virtual void patchVenue(const QString &id, const QString &tmps_correlation_id, const OAIAugmentationData &oai_augmentation_data);

    /**
    * @param[in]  tmps_correlation_id QString [required]
    * @param[in]  oai_attraction OAIAttraction [required]
    */
    virtual void publishAttraction(const QString &tmps_correlation_id, const OAIAttraction &oai_attraction);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tmps_correlation_id QString [required]
    * @param[in]  oai_video OAIVideo [required]
    */
    virtual void publishAttractionVideos(const QString &id, const QString &tmps_correlation_id, const OAIVideo &oai_video);

    /**
    * @param[in]  tmps_correlation_id QString [required]
    * @param[in]  oai_entitlement OAIEntitlement [required]
    */
    virtual void publishEntitlements(const QString &tmps_correlation_id, const OAIEntitlement &oai_entitlement);

    /**
    * @param[in]  tmps_correlation_id QString [required]
    * @param[in]  oai_event OAIEvent [required]
    */
    virtual void publishEvent(const QString &tmps_correlation_id, const OAIEvent &oai_event);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tmps_correlation_id QString [required]
    * @param[in]  oai_video OAIVideo [required]
    */
    virtual void publishEventVideos(const QString &id, const QString &tmps_correlation_id, const OAIVideo &oai_video);

    /**
    * @param[in]  tmps_correlation_id QString [required]
    * @param[in]  oai_extension_data OAIExtensionData [required]
    */
    virtual void publishExtension(const QString &tmps_correlation_id, const OAIExtensionData &oai_extension_data);

    /**
    * @param[in]  tmps_correlation_id QString [required]
    * @param[in]  oai_venue OAIVenue [required]
    */
    virtual void publishVenue(const QString &tmps_correlation_id, const OAIVenue &oai_venue);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void patchAttractionCallback(OAIHttpRequestWorker *worker);
    void patchEventCallback(OAIHttpRequestWorker *worker);
    void patchVenueCallback(OAIHttpRequestWorker *worker);
    void publishAttractionCallback(OAIHttpRequestWorker *worker);
    void publishAttractionVideosCallback(OAIHttpRequestWorker *worker);
    void publishEntitlementsCallback(OAIHttpRequestWorker *worker);
    void publishEventCallback(OAIHttpRequestWorker *worker);
    void publishEventVideosCallback(OAIHttpRequestWorker *worker);
    void publishExtensionCallback(OAIHttpRequestWorker *worker);
    void publishVenueCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void patchAttractionSignal(OAIIngestionResult summary);
    void patchEventSignal(OAIIngestionResult summary);
    void patchVenueSignal(OAIIngestionResult summary);
    void publishAttractionSignal(OAIIngestionResult summary);
    void publishAttractionVideosSignal(OAIIngestionResult summary);
    void publishEntitlementsSignal(OAIIngestionResult summary);
    void publishEventSignal(OAIIngestionResult summary);
    void publishEventVideosSignal(OAIIngestionResult summary);
    void publishExtensionSignal(OAIIngestionResult summary);
    void publishVenueSignal(OAIIngestionResult summary);


    void patchAttractionSignalFull(OAIHttpRequestWorker *worker, OAIIngestionResult summary);
    void patchEventSignalFull(OAIHttpRequestWorker *worker, OAIIngestionResult summary);
    void patchVenueSignalFull(OAIHttpRequestWorker *worker, OAIIngestionResult summary);
    void publishAttractionSignalFull(OAIHttpRequestWorker *worker, OAIIngestionResult summary);
    void publishAttractionVideosSignalFull(OAIHttpRequestWorker *worker, OAIIngestionResult summary);
    void publishEntitlementsSignalFull(OAIHttpRequestWorker *worker, OAIIngestionResult summary);
    void publishEventSignalFull(OAIHttpRequestWorker *worker, OAIIngestionResult summary);
    void publishEventVideosSignalFull(OAIHttpRequestWorker *worker, OAIIngestionResult summary);
    void publishExtensionSignalFull(OAIHttpRequestWorker *worker, OAIIngestionResult summary);
    void publishVenueSignalFull(OAIHttpRequestWorker *worker, OAIIngestionResult summary);

    Q_DECL_DEPRECATED_X("Use patchAttractionSignalError() instead")
    void patchAttractionSignalE(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchAttractionSignalError(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchEventSignalError() instead")
    void patchEventSignalE(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchEventSignalError(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchVenueSignalError() instead")
    void patchVenueSignalE(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchVenueSignalError(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishAttractionSignalError() instead")
    void publishAttractionSignalE(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publishAttractionSignalError(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishAttractionVideosSignalError() instead")
    void publishAttractionVideosSignalE(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publishAttractionVideosSignalError(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishEntitlementsSignalError() instead")
    void publishEntitlementsSignalE(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publishEntitlementsSignalError(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishEventSignalError() instead")
    void publishEventSignalE(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publishEventSignalError(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishEventVideosSignalError() instead")
    void publishEventVideosSignalE(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publishEventVideosSignalError(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishExtensionSignalError() instead")
    void publishExtensionSignalE(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publishExtensionSignalError(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishVenueSignalError() instead")
    void publishVenueSignalE(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publishVenueSignalError(OAIIngestionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use patchAttractionSignalErrorFull() instead")
    void patchAttractionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchAttractionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchEventSignalErrorFull() instead")
    void patchEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchVenueSignalErrorFull() instead")
    void patchVenueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchVenueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishAttractionSignalErrorFull() instead")
    void publishAttractionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publishAttractionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishAttractionVideosSignalErrorFull() instead")
    void publishAttractionVideosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publishAttractionVideosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishEntitlementsSignalErrorFull() instead")
    void publishEntitlementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publishEntitlementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishEventSignalErrorFull() instead")
    void publishEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publishEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishEventVideosSignalErrorFull() instead")
    void publishEventVideosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publishEventVideosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishExtensionSignalErrorFull() instead")
    void publishExtensionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publishExtensionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishVenueSignalErrorFull() instead")
    void publishVenueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publishVenueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
