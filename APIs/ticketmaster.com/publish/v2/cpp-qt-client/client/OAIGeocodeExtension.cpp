/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeocodeExtension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeocodeExtension::OAIGeocodeExtension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeocodeExtension::OAIGeocodeExtension() {
    this->initializeModel();
}

OAIGeocodeExtension::~OAIGeocodeExtension() {}

void OAIGeocodeExtension::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_formatted_address_isSet = false;
    m_formatted_address_isValid = false;

    m_geometry_isSet = false;
    m_geometry_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_route_isSet = false;
    m_route_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_street_number_isSet = false;
    m_street_number_isValid = false;
}

void OAIGeocodeExtension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeocodeExtension::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_formatted_address_isValid = ::OpenAPI::fromJsonValue(m_formatted_address, json[QString("formattedAddress")]);
    m_formatted_address_isSet = !json[QString("formattedAddress")].isNull() && m_formatted_address_isValid;

    m_geometry_isValid = ::OpenAPI::fromJsonValue(m_geometry, json[QString("geometry")]);
    m_geometry_isSet = !json[QString("geometry")].isNull() && m_geometry_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_route_isValid = ::OpenAPI::fromJsonValue(m_route, json[QString("route")]);
    m_route_isSet = !json[QString("route")].isNull() && m_route_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_street_number_isValid = ::OpenAPI::fromJsonValue(m_street_number, json[QString("streetNumber")]);
    m_street_number_isSet = !json[QString("streetNumber")].isNull() && m_street_number_isValid;
}

QString OAIGeocodeExtension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeocodeExtension::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_county_isSet) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_formatted_address_isSet) {
        obj.insert(QString("formattedAddress"), ::OpenAPI::toJsonValue(m_formatted_address));
    }
    if (m_geometry.isSet()) {
        obj.insert(QString("geometry"), ::OpenAPI::toJsonValue(m_geometry));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_route_isSet) {
        obj.insert(QString("route"), ::OpenAPI::toJsonValue(m_route));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_street_number_isSet) {
        obj.insert(QString("streetNumber"), ::OpenAPI::toJsonValue(m_street_number));
    }
    return obj;
}

QString OAIGeocodeExtension::getCity() const {
    return m_city;
}
void OAIGeocodeExtension::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIGeocodeExtension::is_city_Set() const{
    return m_city_isSet;
}

bool OAIGeocodeExtension::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIGeocodeExtension::getCountry() const {
    return m_country;
}
void OAIGeocodeExtension::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIGeocodeExtension::is_country_Set() const{
    return m_country_isSet;
}

bool OAIGeocodeExtension::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIGeocodeExtension::getCounty() const {
    return m_county;
}
void OAIGeocodeExtension::setCounty(const QString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAIGeocodeExtension::is_county_Set() const{
    return m_county_isSet;
}

bool OAIGeocodeExtension::is_county_Valid() const{
    return m_county_isValid;
}

QString OAIGeocodeExtension::getFormattedAddress() const {
    return m_formatted_address;
}
void OAIGeocodeExtension::setFormattedAddress(const QString &formatted_address) {
    m_formatted_address = formatted_address;
    m_formatted_address_isSet = true;
}

bool OAIGeocodeExtension::is_formatted_address_Set() const{
    return m_formatted_address_isSet;
}

bool OAIGeocodeExtension::is_formatted_address_Valid() const{
    return m_formatted_address_isValid;
}

OAIGeometry OAIGeocodeExtension::getGeometry() const {
    return m_geometry;
}
void OAIGeocodeExtension::setGeometry(const OAIGeometry &geometry) {
    m_geometry = geometry;
    m_geometry_isSet = true;
}

bool OAIGeocodeExtension::is_geometry_Set() const{
    return m_geometry_isSet;
}

bool OAIGeocodeExtension::is_geometry_Valid() const{
    return m_geometry_isValid;
}

QString OAIGeocodeExtension::getPostalCode() const {
    return m_postal_code;
}
void OAIGeocodeExtension::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIGeocodeExtension::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIGeocodeExtension::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIGeocodeExtension::getRoute() const {
    return m_route;
}
void OAIGeocodeExtension::setRoute(const QString &route) {
    m_route = route;
    m_route_isSet = true;
}

bool OAIGeocodeExtension::is_route_Set() const{
    return m_route_isSet;
}

bool OAIGeocodeExtension::is_route_Valid() const{
    return m_route_isValid;
}

QString OAIGeocodeExtension::getState() const {
    return m_state;
}
void OAIGeocodeExtension::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGeocodeExtension::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGeocodeExtension::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIGeocodeExtension::getStreetNumber() const {
    return m_street_number;
}
void OAIGeocodeExtension::setStreetNumber(const QString &street_number) {
    m_street_number = street_number;
    m_street_number_isSet = true;
}

bool OAIGeocodeExtension::is_street_number_Set() const{
    return m_street_number_isSet;
}

bool OAIGeocodeExtension::is_street_number_Valid() const{
    return m_street_number_isValid;
}

bool OAIGeocodeExtension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geometry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeocodeExtension::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
