/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImage::OAIImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImage::OAIImage() {
    this->initializeModel();
}

OAIImage::~OAIImage() {}

void OAIImage::initializeModel() {

    m_attribution_isSet = false;
    m_attribution_isValid = false;

    m_domains_isSet = false;
    m_domains_isValid = false;

    m_fallback_isSet = false;
    m_fallback_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_ratio_isSet = false;
    m_ratio_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImage::fromJsonObject(QJsonObject json) {

    m_attribution_isValid = ::OpenAPI::fromJsonValue(m_attribution, json[QString("attribution")]);
    m_attribution_isSet = !json[QString("attribution")].isNull() && m_attribution_isValid;

    m_domains_isValid = ::OpenAPI::fromJsonValue(m_domains, json[QString("domains")]);
    m_domains_isSet = !json[QString("domains")].isNull() && m_domains_isValid;

    m_fallback_isValid = ::OpenAPI::fromJsonValue(m_fallback, json[QString("fallback")]);
    m_fallback_isSet = !json[QString("fallback")].isNull() && m_fallback_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_ratio_isValid = ::OpenAPI::fromJsonValue(m_ratio, json[QString("ratio")]);
    m_ratio_isSet = !json[QString("ratio")].isNull() && m_ratio_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImage::asJsonObject() const {
    QJsonObject obj;
    if (m_attribution_isSet) {
        obj.insert(QString("attribution"), ::OpenAPI::toJsonValue(m_attribution));
    }
    if (m_domains.size() > 0) {
        obj.insert(QString("domains"), ::OpenAPI::toJsonValue(m_domains));
    }
    if (m_fallback_isSet) {
        obj.insert(QString("fallback"), ::OpenAPI::toJsonValue(m_fallback));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_ratio_isSet) {
        obj.insert(QString("ratio"), ::OpenAPI::toJsonValue(m_ratio));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIImage::getAttribution() const {
    return m_attribution;
}
void OAIImage::setAttribution(const QString &attribution) {
    m_attribution = attribution;
    m_attribution_isSet = true;
}

bool OAIImage::is_attribution_Set() const{
    return m_attribution_isSet;
}

bool OAIImage::is_attribution_Valid() const{
    return m_attribution_isValid;
}

QSet<QString> OAIImage::getDomains() const {
    return m_domains;
}
void OAIImage::setDomains(const QSet<QString> &domains) {
    m_domains = domains;
    m_domains_isSet = true;
}

bool OAIImage::is_domains_Set() const{
    return m_domains_isSet;
}

bool OAIImage::is_domains_Valid() const{
    return m_domains_isValid;
}

bool OAIImage::isFallback() const {
    return m_fallback;
}
void OAIImage::setFallback(const bool &fallback) {
    m_fallback = fallback;
    m_fallback_isSet = true;
}

bool OAIImage::is_fallback_Set() const{
    return m_fallback_isSet;
}

bool OAIImage::is_fallback_Valid() const{
    return m_fallback_isValid;
}

qint32 OAIImage::getHeight() const {
    return m_height;
}
void OAIImage::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIImage::is_height_Set() const{
    return m_height_isSet;
}

bool OAIImage::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIImage::getRatio() const {
    return m_ratio;
}
void OAIImage::setRatio(const QString &ratio) {
    m_ratio = ratio;
    m_ratio_isSet = true;
}

bool OAIImage::is_ratio_Set() const{
    return m_ratio_isSet;
}

bool OAIImage::is_ratio_Valid() const{
    return m_ratio_isValid;
}

QString OAIImage::getUrl() const {
    return m_url;
}
void OAIImage::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIImage::is_url_Set() const{
    return m_url_isSet;
}

bool OAIImage::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIImage::getWidth() const {
    return m_width;
}
void OAIImage::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIImage::is_width_Set() const{
    return m_width_isSet;
}

bool OAIImage::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fallback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
