/*
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Venue box office information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:43.443928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VenueBoxOfficeInfo {
  public static final String SERIALIZED_NAME_ACCEPTED_PAYMENT_DETAILS = "acceptedPaymentDetails";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_PAYMENT_DETAILS)
  private Map<String, String> acceptedPaymentDetails = new HashMap<>();

  public static final String SERIALIZED_NAME_OPEN_HOURS_DETAILS = "openHoursDetails";
  @SerializedName(SERIALIZED_NAME_OPEN_HOURS_DETAILS)
  private Map<String, String> openHoursDetails = new HashMap<>();

  public static final String SERIALIZED_NAME_PHONE_NUMBER_DETAILS = "phoneNumberDetails";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_DETAILS)
  private Map<String, String> phoneNumberDetails = new HashMap<>();

  public static final String SERIALIZED_NAME_WILL_CALL_DETAILS = "willCallDetails";
  @SerializedName(SERIALIZED_NAME_WILL_CALL_DETAILS)
  private Map<String, String> willCallDetails = new HashMap<>();

  public VenueBoxOfficeInfo() {
  }

  public VenueBoxOfficeInfo acceptedPaymentDetails(Map<String, String> acceptedPaymentDetails) {
    this.acceptedPaymentDetails = acceptedPaymentDetails;
    return this;
  }

  public VenueBoxOfficeInfo putAcceptedPaymentDetailsItem(String key, String acceptedPaymentDetailsItem) {
    if (this.acceptedPaymentDetails == null) {
      this.acceptedPaymentDetails = new HashMap<>();
    }
    this.acceptedPaymentDetails.put(key, acceptedPaymentDetailsItem);
    return this;
  }

  /**
   * Venue box office accepted payment details - multi-lingual fields
   * @return acceptedPaymentDetails
   */
  @javax.annotation.Nullable
  public Map<String, String> getAcceptedPaymentDetails() {
    return acceptedPaymentDetails;
  }

  public void setAcceptedPaymentDetails(Map<String, String> acceptedPaymentDetails) {
    this.acceptedPaymentDetails = acceptedPaymentDetails;
  }


  public VenueBoxOfficeInfo openHoursDetails(Map<String, String> openHoursDetails) {
    this.openHoursDetails = openHoursDetails;
    return this;
  }

  public VenueBoxOfficeInfo putOpenHoursDetailsItem(String key, String openHoursDetailsItem) {
    if (this.openHoursDetails == null) {
      this.openHoursDetails = new HashMap<>();
    }
    this.openHoursDetails.put(key, openHoursDetailsItem);
    return this;
  }

  /**
   * Venue box office opening hours - multi-lingual fields
   * @return openHoursDetails
   */
  @javax.annotation.Nullable
  public Map<String, String> getOpenHoursDetails() {
    return openHoursDetails;
  }

  public void setOpenHoursDetails(Map<String, String> openHoursDetails) {
    this.openHoursDetails = openHoursDetails;
  }


  public VenueBoxOfficeInfo phoneNumberDetails(Map<String, String> phoneNumberDetails) {
    this.phoneNumberDetails = phoneNumberDetails;
    return this;
  }

  public VenueBoxOfficeInfo putPhoneNumberDetailsItem(String key, String phoneNumberDetailsItem) {
    if (this.phoneNumberDetails == null) {
      this.phoneNumberDetails = new HashMap<>();
    }
    this.phoneNumberDetails.put(key, phoneNumberDetailsItem);
    return this;
  }

  /**
   * Venue box office phone number - multi-lingual fields
   * @return phoneNumberDetails
   */
  @javax.annotation.Nullable
  public Map<String, String> getPhoneNumberDetails() {
    return phoneNumberDetails;
  }

  public void setPhoneNumberDetails(Map<String, String> phoneNumberDetails) {
    this.phoneNumberDetails = phoneNumberDetails;
  }


  public VenueBoxOfficeInfo willCallDetails(Map<String, String> willCallDetails) {
    this.willCallDetails = willCallDetails;
    return this;
  }

  public VenueBoxOfficeInfo putWillCallDetailsItem(String key, String willCallDetailsItem) {
    if (this.willCallDetails == null) {
      this.willCallDetails = new HashMap<>();
    }
    this.willCallDetails.put(key, willCallDetailsItem);
    return this;
  }

  /**
   * Venue box office will call details - multi-lingual fields
   * @return willCallDetails
   */
  @javax.annotation.Nullable
  public Map<String, String> getWillCallDetails() {
    return willCallDetails;
  }

  public void setWillCallDetails(Map<String, String> willCallDetails) {
    this.willCallDetails = willCallDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VenueBoxOfficeInfo venueBoxOfficeInfo = (VenueBoxOfficeInfo) o;
    return Objects.equals(this.acceptedPaymentDetails, venueBoxOfficeInfo.acceptedPaymentDetails) &&
        Objects.equals(this.openHoursDetails, venueBoxOfficeInfo.openHoursDetails) &&
        Objects.equals(this.phoneNumberDetails, venueBoxOfficeInfo.phoneNumberDetails) &&
        Objects.equals(this.willCallDetails, venueBoxOfficeInfo.willCallDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptedPaymentDetails, openHoursDetails, phoneNumberDetails, willCallDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VenueBoxOfficeInfo {\n");
    sb.append("    acceptedPaymentDetails: ").append(toIndentedString(acceptedPaymentDetails)).append("\n");
    sb.append("    openHoursDetails: ").append(toIndentedString(openHoursDetails)).append("\n");
    sb.append("    phoneNumberDetails: ").append(toIndentedString(phoneNumberDetails)).append("\n");
    sb.append("    willCallDetails: ").append(toIndentedString(willCallDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptedPaymentDetails");
    openapiFields.add("openHoursDetails");
    openapiFields.add("phoneNumberDetails");
    openapiFields.add("willCallDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VenueBoxOfficeInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VenueBoxOfficeInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VenueBoxOfficeInfo is not found in the empty JSON string", VenueBoxOfficeInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VenueBoxOfficeInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VenueBoxOfficeInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VenueBoxOfficeInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VenueBoxOfficeInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VenueBoxOfficeInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VenueBoxOfficeInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<VenueBoxOfficeInfo>() {
           @Override
           public void write(JsonWriter out, VenueBoxOfficeInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VenueBoxOfficeInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VenueBoxOfficeInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VenueBoxOfficeInfo
   * @throws IOException if the JSON string is invalid with respect to VenueBoxOfficeInfo
   */
  public static VenueBoxOfficeInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VenueBoxOfficeInfo.class);
  }

  /**
   * Convert an instance of VenueBoxOfficeInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

