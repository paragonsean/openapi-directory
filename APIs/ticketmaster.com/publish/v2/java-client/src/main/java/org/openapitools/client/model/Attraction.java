/*
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.openapitools.client.model.Classification;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.Source;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Attraction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:43.443928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attraction {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active = false;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFOS = "additionalInfos";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFOS)
  private Map<String, String> additionalInfos = new HashMap<>();

  public static final String SERIALIZED_NAME_CLASSIFICATIONS = "classifications";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATIONS)
  private List<Classification> classifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTIONS = "descriptions";
  @SerializedName(SERIALIZED_NAME_DESCRIPTIONS)
  private Map<String, String> descriptions = new HashMap<>();

  public static final String SERIALIZED_NAME_DISCOVERABLE = "discoverable";
  @SerializedName(SERIALIZED_NAME_DISCOVERABLE)
  private Boolean discoverable = false;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private Set<Image> images = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_NAMES = "names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  private Map<String, String> names = new HashMap<>();

  public static final String SERIALIZED_NAME_REFERENCES = "references";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  private Map<String, String> references = new HashMap<>();

  public static final String SERIALIZED_NAME_RELATIONSHIPS = "relationships";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIPS)
  private List<Object> relationships = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private Source source;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Boolean test = false;

  /**
   * Type of the entity
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EVENT("event"),
    
    VENUE("venue"),
    
    ATTRACTION("attraction");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Long version;

  public Attraction() {
  }

  public Attraction active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Indicate if the entity is active, inactive entity won&#39;t appear in Discovery API
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public Attraction additionalInfos(Map<String, String> additionalInfos) {
    this.additionalInfos = additionalInfos;
    return this;
  }

  public Attraction putAdditionalInfosItem(String key, String additionalInfosItem) {
    if (this.additionalInfos == null) {
      this.additionalInfos = new HashMap<>();
    }
    this.additionalInfos.put(key, additionalInfosItem);
    return this;
  }

  /**
   * Additional informations of the entity - multi-lingual fields
   * @return additionalInfos
   */
  @javax.annotation.Nullable
  public Map<String, String> getAdditionalInfos() {
    return additionalInfos;
  }

  public void setAdditionalInfos(Map<String, String> additionalInfos) {
    this.additionalInfos = additionalInfos;
  }


  public Attraction classifications(List<Classification> classifications) {
    this.classifications = classifications;
    return this;
  }

  public Attraction addClassificationsItem(Classification classificationsItem) {
    if (this.classifications == null) {
      this.classifications = new ArrayList<>();
    }
    this.classifications.add(classificationsItem);
    return this;
  }

  /**
   * Attraction&#39;s classifications
   * @return classifications
   */
  @javax.annotation.Nullable
  public List<Classification> getClassifications() {
    return classifications;
  }

  public void setClassifications(List<Classification> classifications) {
    this.classifications = classifications;
  }


  public Attraction descriptions(Map<String, String> descriptions) {
    this.descriptions = descriptions;
    return this;
  }

  public Attraction putDescriptionsItem(String key, String descriptionsItem) {
    if (this.descriptions == null) {
      this.descriptions = new HashMap<>();
    }
    this.descriptions.put(key, descriptionsItem);
    return this;
  }

  /**
   * Descriptions of the entity - multi-lingual fields
   * @return descriptions
   */
  @javax.annotation.Nullable
  public Map<String, String> getDescriptions() {
    return descriptions;
  }

  public void setDescriptions(Map<String, String> descriptions) {
    this.descriptions = descriptions;
  }


  public Attraction discoverable(Boolean discoverable) {
    this.discoverable = discoverable;
    return this;
  }

  /**
   * True if the entity is dicoverable in discovery API
   * @return discoverable
   */
  @javax.annotation.Nullable
  public Boolean getDiscoverable() {
    return discoverable;
  }

  public void setDiscoverable(Boolean discoverable) {
    this.discoverable = discoverable;
  }


  public Attraction images(Set<Image> images) {
    this.images = images;
    return this;
  }

  public Attraction addImagesItem(Image imagesItem) {
    if (this.images == null) {
      this.images = new LinkedHashSet<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Images of the entity
   * @return images
   */
  @javax.annotation.Nullable
  public Set<Image> getImages() {
    return images;
  }

  public void setImages(Set<Image> images) {
    this.images = images;
  }


  public Attraction names(Map<String, String> names) {
    this.names = names;
    return this;
  }

  public Attraction putNamesItem(String key, String namesItem) {
    if (this.names == null) {
      this.names = new HashMap<>();
    }
    this.names.put(key, namesItem);
    return this;
  }

  /**
   * Names of the entity - multi-lingual fields
   * @return names
   */
  @javax.annotation.Nullable
  public Map<String, String> getNames() {
    return names;
  }

  public void setNames(Map<String, String> names) {
    this.names = names;
  }


  public Attraction references(Map<String, String> references) {
    this.references = references;
    return this;
  }

  public Attraction putReferencesItem(String key, String referencesItem) {
    if (this.references == null) {
      this.references = new HashMap<>();
    }
    this.references.put(key, referencesItem);
    return this;
  }

  /**
   * References of this entity in an other system. Reference is the exact same entity
   * @return references
   */
  @javax.annotation.Nullable
  public Map<String, String> getReferences() {
    return references;
  }

  public void setReferences(Map<String, String> references) {
    this.references = references;
  }


  public Attraction relationships(List<Object> relationships) {
    this.relationships = relationships;
    return this;
  }

  public Attraction addRelationshipsItem(Object relationshipsItem) {
    if (this.relationships == null) {
      this.relationships = new ArrayList<>();
    }
    this.relationships.add(relationshipsItem);
    return this;
  }

  /**
   * Relationships on the entity, like if the entity is a duplicate of another one
   * @return relationships
   */
  @javax.annotation.Nullable
  public List<Object> getRelationships() {
    return relationships;
  }

  public void setRelationships(List<Object> relationships) {
    this.relationships = relationships;
  }


  public Attraction source(Source source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public Source getSource() {
    return source;
  }

  public void setSource(Source source) {
    this.source = source;
  }


  public Attraction test(Boolean test) {
    this.test = test;
    return this;
  }

  /**
   * Indicate if this is a test entity, by default test entities won&#39;t appear in discovery API
   * @return test
   */
  @javax.annotation.Nullable
  public Boolean getTest() {
    return test;
  }

  public void setTest(Boolean test) {
    this.test = test;
  }


  public Attraction type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the entity
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Attraction url(String url) {
    this.url = url;
    return this;
  }

  /**
   * URL of a web site detail page of the entity
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Attraction version(Long version) {
    this.version = version;
    return this;
  }

  /**
   * Version of the entity. Version is to avoid updated an entity with an older version
   * @return version
   */
  @javax.annotation.Nullable
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attraction attraction = (Attraction) o;
    return Objects.equals(this.active, attraction.active) &&
        Objects.equals(this.additionalInfos, attraction.additionalInfos) &&
        Objects.equals(this.classifications, attraction.classifications) &&
        Objects.equals(this.descriptions, attraction.descriptions) &&
        Objects.equals(this.discoverable, attraction.discoverable) &&
        Objects.equals(this.images, attraction.images) &&
        Objects.equals(this.names, attraction.names) &&
        Objects.equals(this.references, attraction.references) &&
        Objects.equals(this.relationships, attraction.relationships) &&
        Objects.equals(this.source, attraction.source) &&
        Objects.equals(this.test, attraction.test) &&
        Objects.equals(this.type, attraction.type) &&
        Objects.equals(this.url, attraction.url) &&
        Objects.equals(this.version, attraction.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, additionalInfos, classifications, descriptions, discoverable, images, names, references, relationships, source, test, type, url, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attraction {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    additionalInfos: ").append(toIndentedString(additionalInfos)).append("\n");
    sb.append("    classifications: ").append(toIndentedString(classifications)).append("\n");
    sb.append("    descriptions: ").append(toIndentedString(descriptions)).append("\n");
    sb.append("    discoverable: ").append(toIndentedString(discoverable)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    relationships: ").append(toIndentedString(relationships)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("additionalInfos");
    openapiFields.add("classifications");
    openapiFields.add("descriptions");
    openapiFields.add("discoverable");
    openapiFields.add("images");
    openapiFields.add("names");
    openapiFields.add("references");
    openapiFields.add("relationships");
    openapiFields.add("source");
    openapiFields.add("test");
    openapiFields.add("type");
    openapiFields.add("url");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attraction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attraction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attraction is not found in the empty JSON string", Attraction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attraction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attraction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Attraction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("classifications") != null && !jsonObj.get("classifications").isJsonNull()) {
        JsonArray jsonArrayclassifications = jsonObj.getAsJsonArray("classifications");
        if (jsonArrayclassifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("classifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `classifications` to be an array in the JSON string but got `%s`", jsonObj.get("classifications").toString()));
          }

          // validate the optional field `classifications` (array)
          for (int i = 0; i < jsonArrayclassifications.size(); i++) {
            Classification.validateJsonElement(jsonArrayclassifications.get(i));
          };
        }
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            Image.validateJsonElement(jsonArrayimages.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("relationships") != null && !jsonObj.get("relationships").isJsonNull() && !jsonObj.get("relationships").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationships` to be an array in the JSON string but got `%s`", jsonObj.get("relationships").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        Source.validateJsonElement(jsonObj.get("source"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attraction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attraction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attraction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attraction.class));

       return (TypeAdapter<T>) new TypeAdapter<Attraction>() {
           @Override
           public void write(JsonWriter out, Attraction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attraction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attraction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attraction
   * @throws IOException if the JSON string is invalid with respect to Attraction
   */
  public static Attraction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attraction.class);
  }

  /**
   * Convert an instance of Attraction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

