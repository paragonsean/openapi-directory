/*
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Attraction;
import org.openapitools.client.model.AugmentationData;
import org.openapitools.client.model.Entitlement;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.ExtensionData;
import org.openapitools.client.model.IngestionResult;
import org.openapitools.client.model.Venue;
import org.openapitools.client.model.Video;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for patchAttraction
     * @param id ID of the attraction the patch will be applied (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param augmentationData Patch to apply (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAttractionCall(String id, String tmPSCorrelationId, AugmentationData augmentationData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = augmentationData;

        // create path and map variables
        String localVarPath = "/publish/v2/attractions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tmPSCorrelationId != null) {
            localVarHeaderParams.put("TMPS-Correlation-Id", localVarApiClient.parameterToString(tmPSCorrelationId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchAttractionValidateBeforeCall(String id, String tmPSCorrelationId, AugmentationData augmentationData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling patchAttraction(Async)");
        }

        // verify the required parameter 'tmPSCorrelationId' is set
        if (tmPSCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'tmPSCorrelationId' when calling patchAttraction(Async)");
        }

        // verify the required parameter 'augmentationData' is set
        if (augmentationData == null) {
            throw new ApiException("Missing the required parameter 'augmentationData' when calling patchAttraction(Async)");
        }

        return patchAttractionCall(id, tmPSCorrelationId, augmentationData, _callback);

    }

    /**
     * Publish a patch on an attraction
     * Since 1.0.0
     * @param id ID of the attraction the patch will be applied (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param augmentationData Patch to apply (required)
     * @return IngestionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public IngestionResult patchAttraction(String id, String tmPSCorrelationId, AugmentationData augmentationData) throws ApiException {
        ApiResponse<IngestionResult> localVarResp = patchAttractionWithHttpInfo(id, tmPSCorrelationId, augmentationData);
        return localVarResp.getData();
    }

    /**
     * Publish a patch on an attraction
     * Since 1.0.0
     * @param id ID of the attraction the patch will be applied (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param augmentationData Patch to apply (required)
     * @return ApiResponse&lt;IngestionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IngestionResult> patchAttractionWithHttpInfo(String id, String tmPSCorrelationId, AugmentationData augmentationData) throws ApiException {
        okhttp3.Call localVarCall = patchAttractionValidateBeforeCall(id, tmPSCorrelationId, augmentationData, null);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish a patch on an attraction (asynchronously)
     * Since 1.0.0
     * @param id ID of the attraction the patch will be applied (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param augmentationData Patch to apply (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAttractionAsync(String id, String tmPSCorrelationId, AugmentationData augmentationData, final ApiCallback<IngestionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchAttractionValidateBeforeCall(id, tmPSCorrelationId, augmentationData, _callback);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchEvent
     * @param id ID of the event the patch will be applied (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param augmentationData Patch to apply (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchEventCall(String id, String tmPSCorrelationId, AugmentationData augmentationData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = augmentationData;

        // create path and map variables
        String localVarPath = "/publish/v2/events/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tmPSCorrelationId != null) {
            localVarHeaderParams.put("TMPS-Correlation-Id", localVarApiClient.parameterToString(tmPSCorrelationId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchEventValidateBeforeCall(String id, String tmPSCorrelationId, AugmentationData augmentationData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling patchEvent(Async)");
        }

        // verify the required parameter 'tmPSCorrelationId' is set
        if (tmPSCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'tmPSCorrelationId' when calling patchEvent(Async)");
        }

        // verify the required parameter 'augmentationData' is set
        if (augmentationData == null) {
            throw new ApiException("Missing the required parameter 'augmentationData' when calling patchEvent(Async)");
        }

        return patchEventCall(id, tmPSCorrelationId, augmentationData, _callback);

    }

    /**
     * Publish a patch on an event
     * Since 1.0.0
     * @param id ID of the event the patch will be applied (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param augmentationData Patch to apply (required)
     * @return IngestionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public IngestionResult patchEvent(String id, String tmPSCorrelationId, AugmentationData augmentationData) throws ApiException {
        ApiResponse<IngestionResult> localVarResp = patchEventWithHttpInfo(id, tmPSCorrelationId, augmentationData);
        return localVarResp.getData();
    }

    /**
     * Publish a patch on an event
     * Since 1.0.0
     * @param id ID of the event the patch will be applied (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param augmentationData Patch to apply (required)
     * @return ApiResponse&lt;IngestionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IngestionResult> patchEventWithHttpInfo(String id, String tmPSCorrelationId, AugmentationData augmentationData) throws ApiException {
        okhttp3.Call localVarCall = patchEventValidateBeforeCall(id, tmPSCorrelationId, augmentationData, null);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish a patch on an event (asynchronously)
     * Since 1.0.0
     * @param id ID of the event the patch will be applied (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param augmentationData Patch to apply (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchEventAsync(String id, String tmPSCorrelationId, AugmentationData augmentationData, final ApiCallback<IngestionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchEventValidateBeforeCall(id, tmPSCorrelationId, augmentationData, _callback);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchVenue
     * @param id ID of the venue the patch will be applied (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param augmentationData Patch to apply (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchVenueCall(String id, String tmPSCorrelationId, AugmentationData augmentationData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = augmentationData;

        // create path and map variables
        String localVarPath = "/publish/v2/venues/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tmPSCorrelationId != null) {
            localVarHeaderParams.put("TMPS-Correlation-Id", localVarApiClient.parameterToString(tmPSCorrelationId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchVenueValidateBeforeCall(String id, String tmPSCorrelationId, AugmentationData augmentationData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling patchVenue(Async)");
        }

        // verify the required parameter 'tmPSCorrelationId' is set
        if (tmPSCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'tmPSCorrelationId' when calling patchVenue(Async)");
        }

        // verify the required parameter 'augmentationData' is set
        if (augmentationData == null) {
            throw new ApiException("Missing the required parameter 'augmentationData' when calling patchVenue(Async)");
        }

        return patchVenueCall(id, tmPSCorrelationId, augmentationData, _callback);

    }

    /**
     * Publish a patch on a venue
     * Since 1.0.0
     * @param id ID of the venue the patch will be applied (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param augmentationData Patch to apply (required)
     * @return IngestionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public IngestionResult patchVenue(String id, String tmPSCorrelationId, AugmentationData augmentationData) throws ApiException {
        ApiResponse<IngestionResult> localVarResp = patchVenueWithHttpInfo(id, tmPSCorrelationId, augmentationData);
        return localVarResp.getData();
    }

    /**
     * Publish a patch on a venue
     * Since 1.0.0
     * @param id ID of the venue the patch will be applied (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param augmentationData Patch to apply (required)
     * @return ApiResponse&lt;IngestionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IngestionResult> patchVenueWithHttpInfo(String id, String tmPSCorrelationId, AugmentationData augmentationData) throws ApiException {
        okhttp3.Call localVarCall = patchVenueValidateBeforeCall(id, tmPSCorrelationId, augmentationData, null);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish a patch on a venue (asynchronously)
     * Since 1.0.0
     * @param id ID of the venue the patch will be applied (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param augmentationData Patch to apply (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchVenueAsync(String id, String tmPSCorrelationId, AugmentationData augmentationData, final ApiCallback<IngestionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchVenueValidateBeforeCall(id, tmPSCorrelationId, augmentationData, _callback);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publishAttraction
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param attraction Attraction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishAttractionCall(String tmPSCorrelationId, Attraction attraction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attraction;

        // create path and map variables
        String localVarPath = "/publish/v2/attractions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tmPSCorrelationId != null) {
            localVarHeaderParams.put("TMPS-Correlation-Id", localVarApiClient.parameterToString(tmPSCorrelationId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishAttractionValidateBeforeCall(String tmPSCorrelationId, Attraction attraction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tmPSCorrelationId' is set
        if (tmPSCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'tmPSCorrelationId' when calling publishAttraction(Async)");
        }

        // verify the required parameter 'attraction' is set
        if (attraction == null) {
            throw new ApiException("Missing the required parameter 'attraction' when calling publishAttraction(Async)");
        }

        return publishAttractionCall(tmPSCorrelationId, attraction, _callback);

    }

    /**
     * Publish an attractions
     * Since 1.0.0
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param attraction Attraction (required)
     * @return IngestionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public IngestionResult publishAttraction(String tmPSCorrelationId, Attraction attraction) throws ApiException {
        ApiResponse<IngestionResult> localVarResp = publishAttractionWithHttpInfo(tmPSCorrelationId, attraction);
        return localVarResp.getData();
    }

    /**
     * Publish an attractions
     * Since 1.0.0
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param attraction Attraction (required)
     * @return ApiResponse&lt;IngestionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IngestionResult> publishAttractionWithHttpInfo(String tmPSCorrelationId, Attraction attraction) throws ApiException {
        okhttp3.Call localVarCall = publishAttractionValidateBeforeCall(tmPSCorrelationId, attraction, null);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish an attractions (asynchronously)
     * Since 1.0.0
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param attraction Attraction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishAttractionAsync(String tmPSCorrelationId, Attraction attraction, final ApiCallback<IngestionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishAttractionValidateBeforeCall(tmPSCorrelationId, attraction, _callback);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publishAttractionVideos
     * @param id ID of the attraction the video is linked to (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param video Video data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishAttractionVideosCall(String id, String tmPSCorrelationId, Video video, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = video;

        // create path and map variables
        String localVarPath = "/publish/v2/attractions/{id}/videos"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tmPSCorrelationId != null) {
            localVarHeaderParams.put("TMPS-Correlation-Id", localVarApiClient.parameterToString(tmPSCorrelationId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishAttractionVideosValidateBeforeCall(String id, String tmPSCorrelationId, Video video, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling publishAttractionVideos(Async)");
        }

        // verify the required parameter 'tmPSCorrelationId' is set
        if (tmPSCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'tmPSCorrelationId' when calling publishAttractionVideos(Async)");
        }

        // verify the required parameter 'video' is set
        if (video == null) {
            throw new ApiException("Missing the required parameter 'video' when calling publishAttractionVideos(Async)");
        }

        return publishAttractionVideosCall(id, tmPSCorrelationId, video, _callback);

    }

    /**
     * Publish a video on an attraction
     * Since 1.0.0
     * @param id ID of the attraction the video is linked to (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param video Video data (required)
     * @return IngestionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public IngestionResult publishAttractionVideos(String id, String tmPSCorrelationId, Video video) throws ApiException {
        ApiResponse<IngestionResult> localVarResp = publishAttractionVideosWithHttpInfo(id, tmPSCorrelationId, video);
        return localVarResp.getData();
    }

    /**
     * Publish a video on an attraction
     * Since 1.0.0
     * @param id ID of the attraction the video is linked to (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param video Video data (required)
     * @return ApiResponse&lt;IngestionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IngestionResult> publishAttractionVideosWithHttpInfo(String id, String tmPSCorrelationId, Video video) throws ApiException {
        okhttp3.Call localVarCall = publishAttractionVideosValidateBeforeCall(id, tmPSCorrelationId, video, null);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish a video on an attraction (asynchronously)
     * Since 1.0.0
     * @param id ID of the attraction the video is linked to (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param video Video data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishAttractionVideosAsync(String id, String tmPSCorrelationId, Video video, final ApiCallback<IngestionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishAttractionVideosValidateBeforeCall(id, tmPSCorrelationId, video, _callback);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publishEntitlements
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param entitlement Entitlements information to add to the entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishEntitlementsCall(String tmPSCorrelationId, Entitlement entitlement, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entitlement;

        // create path and map variables
        String localVarPath = "/publish/v2/entitlements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tmPSCorrelationId != null) {
            localVarHeaderParams.put("TMPS-Correlation-Id", localVarApiClient.parameterToString(tmPSCorrelationId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishEntitlementsValidateBeforeCall(String tmPSCorrelationId, Entitlement entitlement, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tmPSCorrelationId' is set
        if (tmPSCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'tmPSCorrelationId' when calling publishEntitlements(Async)");
        }

        // verify the required parameter 'entitlement' is set
        if (entitlement == null) {
            throw new ApiException("Missing the required parameter 'entitlement' when calling publishEntitlements(Async)");
        }

        return publishEntitlementsCall(tmPSCorrelationId, entitlement, _callback);

    }

    /**
     * Publish entitlements on an entity
     * Since 2.0.0
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param entitlement Entitlements information to add to the entity (required)
     * @return IngestionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public IngestionResult publishEntitlements(String tmPSCorrelationId, Entitlement entitlement) throws ApiException {
        ApiResponse<IngestionResult> localVarResp = publishEntitlementsWithHttpInfo(tmPSCorrelationId, entitlement);
        return localVarResp.getData();
    }

    /**
     * Publish entitlements on an entity
     * Since 2.0.0
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param entitlement Entitlements information to add to the entity (required)
     * @return ApiResponse&lt;IngestionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IngestionResult> publishEntitlementsWithHttpInfo(String tmPSCorrelationId, Entitlement entitlement) throws ApiException {
        okhttp3.Call localVarCall = publishEntitlementsValidateBeforeCall(tmPSCorrelationId, entitlement, null);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish entitlements on an entity (asynchronously)
     * Since 2.0.0
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param entitlement Entitlements information to add to the entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishEntitlementsAsync(String tmPSCorrelationId, Entitlement entitlement, final ApiCallback<IngestionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishEntitlementsValidateBeforeCall(tmPSCorrelationId, entitlement, _callback);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publishEvent
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param event Event (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishEventCall(String tmPSCorrelationId, Event event, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = event;

        // create path and map variables
        String localVarPath = "/publish/v2/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tmPSCorrelationId != null) {
            localVarHeaderParams.put("TMPS-Correlation-Id", localVarApiClient.parameterToString(tmPSCorrelationId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishEventValidateBeforeCall(String tmPSCorrelationId, Event event, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tmPSCorrelationId' is set
        if (tmPSCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'tmPSCorrelationId' when calling publishEvent(Async)");
        }

        // verify the required parameter 'event' is set
        if (event == null) {
            throw new ApiException("Missing the required parameter 'event' when calling publishEvent(Async)");
        }

        return publishEventCall(tmPSCorrelationId, event, _callback);

    }

    /**
     * Publish an event
     * Since 1.0.0
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param event Event (required)
     * @return IngestionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public IngestionResult publishEvent(String tmPSCorrelationId, Event event) throws ApiException {
        ApiResponse<IngestionResult> localVarResp = publishEventWithHttpInfo(tmPSCorrelationId, event);
        return localVarResp.getData();
    }

    /**
     * Publish an event
     * Since 1.0.0
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param event Event (required)
     * @return ApiResponse&lt;IngestionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IngestionResult> publishEventWithHttpInfo(String tmPSCorrelationId, Event event) throws ApiException {
        okhttp3.Call localVarCall = publishEventValidateBeforeCall(tmPSCorrelationId, event, null);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish an event (asynchronously)
     * Since 1.0.0
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param event Event (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishEventAsync(String tmPSCorrelationId, Event event, final ApiCallback<IngestionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishEventValidateBeforeCall(tmPSCorrelationId, event, _callback);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publishEventVideos
     * @param id ID of the event the video is linked to (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param video Video data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishEventVideosCall(String id, String tmPSCorrelationId, Video video, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = video;

        // create path and map variables
        String localVarPath = "/publish/v2/events/{id}/videos"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tmPSCorrelationId != null) {
            localVarHeaderParams.put("TMPS-Correlation-Id", localVarApiClient.parameterToString(tmPSCorrelationId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishEventVideosValidateBeforeCall(String id, String tmPSCorrelationId, Video video, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling publishEventVideos(Async)");
        }

        // verify the required parameter 'tmPSCorrelationId' is set
        if (tmPSCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'tmPSCorrelationId' when calling publishEventVideos(Async)");
        }

        // verify the required parameter 'video' is set
        if (video == null) {
            throw new ApiException("Missing the required parameter 'video' when calling publishEventVideos(Async)");
        }

        return publishEventVideosCall(id, tmPSCorrelationId, video, _callback);

    }

    /**
     * Publish a video on an event
     * Since 1.0.0
     * @param id ID of the event the video is linked to (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param video Video data (required)
     * @return IngestionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public IngestionResult publishEventVideos(String id, String tmPSCorrelationId, Video video) throws ApiException {
        ApiResponse<IngestionResult> localVarResp = publishEventVideosWithHttpInfo(id, tmPSCorrelationId, video);
        return localVarResp.getData();
    }

    /**
     * Publish a video on an event
     * Since 1.0.0
     * @param id ID of the event the video is linked to (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param video Video data (required)
     * @return ApiResponse&lt;IngestionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IngestionResult> publishEventVideosWithHttpInfo(String id, String tmPSCorrelationId, Video video) throws ApiException {
        okhttp3.Call localVarCall = publishEventVideosValidateBeforeCall(id, tmPSCorrelationId, video, null);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish a video on an event (asynchronously)
     * Since 1.0.0
     * @param id ID of the event the video is linked to (required)
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param video Video data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishEventVideosAsync(String id, String tmPSCorrelationId, Video video, final ApiCallback<IngestionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishEventVideosValidateBeforeCall(id, tmPSCorrelationId, video, _callback);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publishExtension
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param extensionData Extension information to add to the entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishExtensionCall(String tmPSCorrelationId, ExtensionData extensionData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = extensionData;

        // create path and map variables
        String localVarPath = "/publish/v2/extensions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tmPSCorrelationId != null) {
            localVarHeaderParams.put("TMPS-Correlation-Id", localVarApiClient.parameterToString(tmPSCorrelationId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishExtensionValidateBeforeCall(String tmPSCorrelationId, ExtensionData extensionData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tmPSCorrelationId' is set
        if (tmPSCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'tmPSCorrelationId' when calling publishExtension(Async)");
        }

        // verify the required parameter 'extensionData' is set
        if (extensionData == null) {
            throw new ApiException("Missing the required parameter 'extensionData' when calling publishExtension(Async)");
        }

        return publishExtensionCall(tmPSCorrelationId, extensionData, _callback);

    }

    /**
     * Publish extension on an entity
     * Since 1.0.0
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param extensionData Extension information to add to the entity (required)
     * @return IngestionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public IngestionResult publishExtension(String tmPSCorrelationId, ExtensionData extensionData) throws ApiException {
        ApiResponse<IngestionResult> localVarResp = publishExtensionWithHttpInfo(tmPSCorrelationId, extensionData);
        return localVarResp.getData();
    }

    /**
     * Publish extension on an entity
     * Since 1.0.0
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param extensionData Extension information to add to the entity (required)
     * @return ApiResponse&lt;IngestionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IngestionResult> publishExtensionWithHttpInfo(String tmPSCorrelationId, ExtensionData extensionData) throws ApiException {
        okhttp3.Call localVarCall = publishExtensionValidateBeforeCall(tmPSCorrelationId, extensionData, null);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish extension on an entity (asynchronously)
     * Since 1.0.0
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param extensionData Extension information to add to the entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishExtensionAsync(String tmPSCorrelationId, ExtensionData extensionData, final ApiCallback<IngestionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishExtensionValidateBeforeCall(tmPSCorrelationId, extensionData, _callback);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publishVenue
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param venue Venue (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishVenueCall(String tmPSCorrelationId, Venue venue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = venue;

        // create path and map variables
        String localVarPath = "/publish/v2/venues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tmPSCorrelationId != null) {
            localVarHeaderParams.put("TMPS-Correlation-Id", localVarApiClient.parameterToString(tmPSCorrelationId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishVenueValidateBeforeCall(String tmPSCorrelationId, Venue venue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tmPSCorrelationId' is set
        if (tmPSCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'tmPSCorrelationId' when calling publishVenue(Async)");
        }

        // verify the required parameter 'venue' is set
        if (venue == null) {
            throw new ApiException("Missing the required parameter 'venue' when calling publishVenue(Async)");
        }

        return publishVenueCall(tmPSCorrelationId, venue, _callback);

    }

    /**
     * Publish a venue
     * Since 1.0.0
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param venue Venue (required)
     * @return IngestionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public IngestionResult publishVenue(String tmPSCorrelationId, Venue venue) throws ApiException {
        ApiResponse<IngestionResult> localVarResp = publishVenueWithHttpInfo(tmPSCorrelationId, venue);
        return localVarResp.getData();
    }

    /**
     * Publish a venue
     * Since 1.0.0
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param venue Venue (required)
     * @return ApiResponse&lt;IngestionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IngestionResult> publishVenueWithHttpInfo(String tmPSCorrelationId, Venue venue) throws ApiException {
        okhttp3.Call localVarCall = publishVenueValidateBeforeCall(tmPSCorrelationId, venue, null);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish a venue (asynchronously)
     * Since 1.0.0
     * @param tmPSCorrelationId Unique correlation id to be able to trace the request in our system (required)
     * @param venue Venue (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishVenueAsync(String tmPSCorrelationId, Venue venue, final ApiCallback<IngestionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishVenueValidateBeforeCall(tmPSCorrelationId, venue, _callback);
        Type localVarReturnType = new TypeToken<IngestionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
