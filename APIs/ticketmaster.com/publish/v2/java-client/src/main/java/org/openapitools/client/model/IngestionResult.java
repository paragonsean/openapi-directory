/*
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This class defines the IngestionResult on the Publish API
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:43.443928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IngestionResult {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IGNORED_PROPERTIES = "ignoredProperties";
  @SerializedName(SERIALIZED_NAME_IGNORED_PROPERTIES)
  private Map<String, Object> ignoredProperties = new HashMap<>();

  public static final String SERIALIZED_NAME_INVALID_PROPERTIES = "invalidProperties";
  @SerializedName(SERIALIZED_NAME_INVALID_PROPERTIES)
  private Map<String, Object> invalidProperties = new HashMap<>();

  public static final String SERIALIZED_NAME_INVALID_VALUES = "invalidValues";
  @SerializedName(SERIALIZED_NAME_INVALID_VALUES)
  private Map<String, Object> invalidValues = new HashMap<>();

  public static final String SERIALIZED_NAME_MISSING_PROPERTIES = "missingProperties";
  @SerializedName(SERIALIZED_NAME_MISSING_PROPERTIES)
  private Map<String, Object> missingProperties = new HashMap<>();

  /**
   * Status of the result
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ERROR("Error"),
    
    SUCCESS_WARNING("SuccessWarning"),
    
    SUCCESS("Success");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_UNKNOWN_PROPERTIES = "unknownProperties";
  @SerializedName(SERIALIZED_NAME_UNKNOWN_PROPERTIES)
  private Map<String, Object> unknownProperties = new HashMap<>();

  public IngestionResult() {
  }

  public IngestionResult id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Id of the entity ingested in the discovery api
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public IngestionResult ignoredProperties(Map<String, Object> ignoredProperties) {
    this.ignoredProperties = ignoredProperties;
    return this;
  }

  public IngestionResult putIgnoredPropertiesItem(String key, Object ignoredPropertiesItem) {
    if (this.ignoredProperties == null) {
      this.ignoredProperties = new HashMap<>();
    }
    this.ignoredProperties.put(key, ignoredPropertiesItem);
    return this;
  }

  /**
   * List properties that are ignored in the validation
   * @return ignoredProperties
   */
  @javax.annotation.Nullable
  public Map<String, Object> getIgnoredProperties() {
    return ignoredProperties;
  }

  public void setIgnoredProperties(Map<String, Object> ignoredProperties) {
    this.ignoredProperties = ignoredProperties;
  }


  public IngestionResult invalidProperties(Map<String, Object> invalidProperties) {
    this.invalidProperties = invalidProperties;
    return this;
  }

  public IngestionResult putInvalidPropertiesItem(String key, Object invalidPropertiesItem) {
    if (this.invalidProperties == null) {
      this.invalidProperties = new HashMap<>();
    }
    this.invalidProperties.put(key, invalidPropertiesItem);
    return this;
  }

  /**
   * List of invalid properties
   * @return invalidProperties
   */
  @javax.annotation.Nullable
  public Map<String, Object> getInvalidProperties() {
    return invalidProperties;
  }

  public void setInvalidProperties(Map<String, Object> invalidProperties) {
    this.invalidProperties = invalidProperties;
  }


  public IngestionResult invalidValues(Map<String, Object> invalidValues) {
    this.invalidValues = invalidValues;
    return this;
  }

  public IngestionResult putInvalidValuesItem(String key, Object invalidValuesItem) {
    if (this.invalidValues == null) {
      this.invalidValues = new HashMap<>();
    }
    this.invalidValues.put(key, invalidValuesItem);
    return this;
  }

  /**
   * List of invalid values
   * @return invalidValues
   */
  @javax.annotation.Nullable
  public Map<String, Object> getInvalidValues() {
    return invalidValues;
  }

  public void setInvalidValues(Map<String, Object> invalidValues) {
    this.invalidValues = invalidValues;
  }


  public IngestionResult missingProperties(Map<String, Object> missingProperties) {
    this.missingProperties = missingProperties;
    return this;
  }

  public IngestionResult putMissingPropertiesItem(String key, Object missingPropertiesItem) {
    if (this.missingProperties == null) {
      this.missingProperties = new HashMap<>();
    }
    this.missingProperties.put(key, missingPropertiesItem);
    return this;
  }

  /**
   * List of properties that should be present in your entity to ease its dicovery
   * @return missingProperties
   */
  @javax.annotation.Nullable
  public Map<String, Object> getMissingProperties() {
    return missingProperties;
  }

  public void setMissingProperties(Map<String, Object> missingProperties) {
    this.missingProperties = missingProperties;
  }


  public IngestionResult status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the result
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public IngestionResult unknownProperties(Map<String, Object> unknownProperties) {
    this.unknownProperties = unknownProperties;
    return this;
  }

  public IngestionResult putUnknownPropertiesItem(String key, Object unknownPropertiesItem) {
    if (this.unknownProperties == null) {
      this.unknownProperties = new HashMap<>();
    }
    this.unknownProperties.put(key, unknownPropertiesItem);
    return this;
  }

  /**
   * List of unknown properties that will be dropped
   * @return unknownProperties
   */
  @javax.annotation.Nullable
  public Map<String, Object> getUnknownProperties() {
    return unknownProperties;
  }

  public void setUnknownProperties(Map<String, Object> unknownProperties) {
    this.unknownProperties = unknownProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IngestionResult ingestionResult = (IngestionResult) o;
    return Objects.equals(this.id, ingestionResult.id) &&
        Objects.equals(this.ignoredProperties, ingestionResult.ignoredProperties) &&
        Objects.equals(this.invalidProperties, ingestionResult.invalidProperties) &&
        Objects.equals(this.invalidValues, ingestionResult.invalidValues) &&
        Objects.equals(this.missingProperties, ingestionResult.missingProperties) &&
        Objects.equals(this.status, ingestionResult.status) &&
        Objects.equals(this.unknownProperties, ingestionResult.unknownProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, ignoredProperties, invalidProperties, invalidValues, missingProperties, status, unknownProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IngestionResult {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ignoredProperties: ").append(toIndentedString(ignoredProperties)).append("\n");
    sb.append("    invalidProperties: ").append(toIndentedString(invalidProperties)).append("\n");
    sb.append("    invalidValues: ").append(toIndentedString(invalidValues)).append("\n");
    sb.append("    missingProperties: ").append(toIndentedString(missingProperties)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    unknownProperties: ").append(toIndentedString(unknownProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("ignoredProperties");
    openapiFields.add("invalidProperties");
    openapiFields.add("invalidValues");
    openapiFields.add("missingProperties");
    openapiFields.add("status");
    openapiFields.add("unknownProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IngestionResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IngestionResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IngestionResult is not found in the empty JSON string", IngestionResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IngestionResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IngestionResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IngestionResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IngestionResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IngestionResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IngestionResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IngestionResult.class));

       return (TypeAdapter<T>) new TypeAdapter<IngestionResult>() {
           @Override
           public void write(JsonWriter out, IngestionResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IngestionResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IngestionResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IngestionResult
   * @throws IOException if the JSON string is invalid with respect to IngestionResult
   */
  public static IngestionResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IngestionResult.class);
  }

  /**
   * Convert an instance of IngestionResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

