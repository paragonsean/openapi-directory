/*
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ModelLocalTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Event&#39;s End Dates
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:43.443928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndDates {
  public static final String SERIALIZED_NAME_APPROXIMATE = "approximate";
  @SerializedName(SERIALIZED_NAME_APPROXIMATE)
  private Boolean approximate = false;

  public static final String SERIALIZED_NAME_DATE_TIME = "dateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private OffsetDateTime dateTime;

  public static final String SERIALIZED_NAME_LOCAL_TIME = "localTime";
  @SerializedName(SERIALIZED_NAME_LOCAL_TIME)
  private ModelLocalTime _localTime;

  public EndDates() {
  }

  public EndDates approximate(Boolean approximate) {
    this.approximate = approximate;
    return this;
  }

  /**
   * Boolean flag to indicate whether or not the end date is approximated
   * @return approximate
   */
  @javax.annotation.Nullable
  public Boolean getApproximate() {
    return approximate;
  }

  public void setApproximate(Boolean approximate) {
    this.approximate = approximate;
  }


  public EndDates dateTime(OffsetDateTime dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * The event end date time
   * @return dateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateTime() {
    return dateTime;
  }

  public void setDateTime(OffsetDateTime dateTime) {
    this.dateTime = dateTime;
  }


  public EndDates _localTime(ModelLocalTime _localTime) {
    this._localTime = _localTime;
    return this;
  }

  /**
   * Get _localTime
   * @return _localTime
   */
  @javax.annotation.Nullable
  public ModelLocalTime getLocalTime() {
    return _localTime;
  }

  public void setLocalTime(ModelLocalTime _localTime) {
    this._localTime = _localTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndDates endDates = (EndDates) o;
    return Objects.equals(this.approximate, endDates.approximate) &&
        Objects.equals(this.dateTime, endDates.dateTime) &&
        Objects.equals(this._localTime, endDates._localTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approximate, dateTime, _localTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndDates {\n");
    sb.append("    approximate: ").append(toIndentedString(approximate)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    _localTime: ").append(toIndentedString(_localTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approximate");
    openapiFields.add("dateTime");
    openapiFields.add("localTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndDates
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndDates.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndDates is not found in the empty JSON string", EndDates.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndDates.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndDates` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `localTime`
      if (jsonObj.get("localTime") != null && !jsonObj.get("localTime").isJsonNull()) {
        ModelLocalTime.validateJsonElement(jsonObj.get("localTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndDates.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndDates' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndDates> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndDates.class));

       return (TypeAdapter<T>) new TypeAdapter<EndDates>() {
           @Override
           public void write(JsonWriter out, EndDates value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndDates read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndDates given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndDates
   * @throws IOException if the JSON string is invalid with respect to EndDates
   */
  public static EndDates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndDates.class);
  }

  /**
   * Convert an instance of EndDates to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

