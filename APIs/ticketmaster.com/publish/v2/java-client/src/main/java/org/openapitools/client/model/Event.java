/*
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.openapitools.client.model.Attraction;
import org.openapitools.client.model.Classification;
import org.openapitools.client.model.EventDates;
import org.openapitools.client.model.EventSalesDates;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.Place;
import org.openapitools.client.model.PriceRange;
import org.openapitools.client.model.Promoter;
import org.openapitools.client.model.PublicVisibility;
import org.openapitools.client.model.Source;
import org.openapitools.client.model.Venue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Event
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:43.443928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Event {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active = false;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFOS = "additionalInfos";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFOS)
  private Map<String, String> additionalInfos = new HashMap<>();

  public static final String SERIALIZED_NAME_ATTRACTIONS = "attractions";
  @SerializedName(SERIALIZED_NAME_ATTRACTIONS)
  private List<Attraction> attractions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLASSIFICATIONS = "classifications";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATIONS)
  private List<Classification> classifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATES = "dates";
  @SerializedName(SERIALIZED_NAME_DATES)
  private EventDates dates;

  public static final String SERIALIZED_NAME_DESCRIPTIONS = "descriptions";
  @SerializedName(SERIALIZED_NAME_DESCRIPTIONS)
  private Map<String, String> descriptions = new HashMap<>();

  public static final String SERIALIZED_NAME_DISCOVERABLE = "discoverable";
  @SerializedName(SERIALIZED_NAME_DISCOVERABLE)
  private Boolean discoverable = false;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Double distance;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private Set<Image> images = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_INFOS = "infos";
  @SerializedName(SERIALIZED_NAME_INFOS)
  private Map<String, String> infos = new HashMap<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_NAMES = "names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  private Map<String, String> names = new HashMap<>();

  public static final String SERIALIZED_NAME_PLACE = "place";
  @SerializedName(SERIALIZED_NAME_PLACE)
  private Place place;

  public static final String SERIALIZED_NAME_PLEASE_NOTES = "pleaseNotes";
  @SerializedName(SERIALIZED_NAME_PLEASE_NOTES)
  private Map<String, String> pleaseNotes = new HashMap<>();

  public static final String SERIALIZED_NAME_PRICE_RANGES = "priceRanges";
  @SerializedName(SERIALIZED_NAME_PRICE_RANGES)
  private Set<PriceRange> priceRanges = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_PROMOTER = "promoter";
  @SerializedName(SERIALIZED_NAME_PROMOTER)
  private Promoter promoter;

  public static final String SERIALIZED_NAME_PUBLIC_VISIBILITY = "publicVisibility";
  @SerializedName(SERIALIZED_NAME_PUBLIC_VISIBILITY)
  private PublicVisibility publicVisibility;

  public static final String SERIALIZED_NAME_REFERENCES = "references";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  private Map<String, String> references = new HashMap<>();

  public static final String SERIALIZED_NAME_RELATIONSHIPS = "relationships";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIPS)
  private List<Object> relationships = new ArrayList<>();

  public static final String SERIALIZED_NAME_SALES = "sales";
  @SerializedName(SERIALIZED_NAME_SALES)
  private EventSalesDates sales;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private Source source;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Boolean test = false;

  /**
   * Type of the entity
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EVENT("event"),
    
    VENUE("venue"),
    
    ATTRACTION("attraction");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VENUE = "venue";
  @SerializedName(SERIALIZED_NAME_VENUE)
  private Venue venue;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Long version;

  public Event() {
  }

  public Event active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Indicate if the entity is active, inactive entity won&#39;t appear in Discovery API
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public Event additionalInfos(Map<String, String> additionalInfos) {
    this.additionalInfos = additionalInfos;
    return this;
  }

  public Event putAdditionalInfosItem(String key, String additionalInfosItem) {
    if (this.additionalInfos == null) {
      this.additionalInfos = new HashMap<>();
    }
    this.additionalInfos.put(key, additionalInfosItem);
    return this;
  }

  /**
   * Additional informations of the entity - multi-lingual fields
   * @return additionalInfos
   */
  @javax.annotation.Nullable
  public Map<String, String> getAdditionalInfos() {
    return additionalInfos;
  }

  public void setAdditionalInfos(Map<String, String> additionalInfos) {
    this.additionalInfos = additionalInfos;
  }


  public Event attractions(List<Attraction> attractions) {
    this.attractions = attractions;
    return this;
  }

  public Event addAttractionsItem(Attraction attractionsItem) {
    if (this.attractions == null) {
      this.attractions = new ArrayList<>();
    }
    this.attractions.add(attractionsItem);
    return this;
  }

  /**
   * Ordered Attraction related to the event
   * @return attractions
   */
  @javax.annotation.Nullable
  public List<Attraction> getAttractions() {
    return attractions;
  }

  public void setAttractions(List<Attraction> attractions) {
    this.attractions = attractions;
  }


  public Event classifications(List<Classification> classifications) {
    this.classifications = classifications;
    return this;
  }

  public Event addClassificationsItem(Classification classificationsItem) {
    if (this.classifications == null) {
      this.classifications = new ArrayList<>();
    }
    this.classifications.add(classificationsItem);
    return this;
  }

  /**
   * Event&#39;s classifications
   * @return classifications
   */
  @javax.annotation.Nullable
  public List<Classification> getClassifications() {
    return classifications;
  }

  public void setClassifications(List<Classification> classifications) {
    this.classifications = classifications;
  }


  public Event dates(EventDates dates) {
    this.dates = dates;
    return this;
  }

  /**
   * Get dates
   * @return dates
   */
  @javax.annotation.Nullable
  public EventDates getDates() {
    return dates;
  }

  public void setDates(EventDates dates) {
    this.dates = dates;
  }


  public Event descriptions(Map<String, String> descriptions) {
    this.descriptions = descriptions;
    return this;
  }

  public Event putDescriptionsItem(String key, String descriptionsItem) {
    if (this.descriptions == null) {
      this.descriptions = new HashMap<>();
    }
    this.descriptions.put(key, descriptionsItem);
    return this;
  }

  /**
   * Descriptions of the entity - multi-lingual fields
   * @return descriptions
   */
  @javax.annotation.Nullable
  public Map<String, String> getDescriptions() {
    return descriptions;
  }

  public void setDescriptions(Map<String, String> descriptions) {
    this.descriptions = descriptions;
  }


  public Event discoverable(Boolean discoverable) {
    this.discoverable = discoverable;
    return this;
  }

  /**
   * True if the entity is dicoverable in discovery API
   * @return discoverable
   */
  @javax.annotation.Nullable
  public Boolean getDiscoverable() {
    return discoverable;
  }

  public void setDiscoverable(Boolean discoverable) {
    this.discoverable = discoverable;
  }


  public Event distance(Double distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Get distance
   * @return distance
   */
  @javax.annotation.Nullable
  public Double getDistance() {
    return distance;
  }

  public void setDistance(Double distance) {
    this.distance = distance;
  }


  public Event images(Set<Image> images) {
    this.images = images;
    return this;
  }

  public Event addImagesItem(Image imagesItem) {
    if (this.images == null) {
      this.images = new LinkedHashSet<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Images of the entity
   * @return images
   */
  @javax.annotation.Nullable
  public Set<Image> getImages() {
    return images;
  }

  public void setImages(Set<Image> images) {
    this.images = images;
  }


  public Event infos(Map<String, String> infos) {
    this.infos = infos;
    return this;
  }

  public Event putInfosItem(String key, String infosItem) {
    if (this.infos == null) {
      this.infos = new HashMap<>();
    }
    this.infos.put(key, infosItem);
    return this;
  }

  /**
   * Any information related to the event - multi-lingual fields
   * @return infos
   */
  @javax.annotation.Nullable
  public Map<String, String> getInfos() {
    return infos;
  }

  public void setInfos(Map<String, String> infos) {
    this.infos = infos;
  }


  public Event location(Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  public Event names(Map<String, String> names) {
    this.names = names;
    return this;
  }

  public Event putNamesItem(String key, String namesItem) {
    if (this.names == null) {
      this.names = new HashMap<>();
    }
    this.names.put(key, namesItem);
    return this;
  }

  /**
   * Names of the entity - multi-lingual fields
   * @return names
   */
  @javax.annotation.Nullable
  public Map<String, String> getNames() {
    return names;
  }

  public void setNames(Map<String, String> names) {
    this.names = names;
  }


  public Event place(Place place) {
    this.place = place;
    return this;
  }

  /**
   * Get place
   * @return place
   */
  @javax.annotation.Nullable
  public Place getPlace() {
    return place;
  }

  public void setPlace(Place place) {
    this.place = place;
  }


  public Event pleaseNotes(Map<String, String> pleaseNotes) {
    this.pleaseNotes = pleaseNotes;
    return this;
  }

  public Event putPleaseNotesItem(String key, String pleaseNotesItem) {
    if (this.pleaseNotes == null) {
      this.pleaseNotes = new HashMap<>();
    }
    this.pleaseNotes.put(key, pleaseNotesItem);
    return this;
  }

  /**
   * Any notes related to the event - multi-lingual fields
   * @return pleaseNotes
   */
  @javax.annotation.Nullable
  public Map<String, String> getPleaseNotes() {
    return pleaseNotes;
  }

  public void setPleaseNotes(Map<String, String> pleaseNotes) {
    this.pleaseNotes = pleaseNotes;
  }


  public Event priceRanges(Set<PriceRange> priceRanges) {
    this.priceRanges = priceRanges;
    return this;
  }

  public Event addPriceRangesItem(PriceRange priceRangesItem) {
    if (this.priceRanges == null) {
      this.priceRanges = new LinkedHashSet<>();
    }
    this.priceRanges.add(priceRangesItem);
    return this;
  }

  /**
   * Price ranges of this event
   * @return priceRanges
   */
  @javax.annotation.Nullable
  public Set<PriceRange> getPriceRanges() {
    return priceRanges;
  }

  public void setPriceRanges(Set<PriceRange> priceRanges) {
    this.priceRanges = priceRanges;
  }


  public Event promoter(Promoter promoter) {
    this.promoter = promoter;
    return this;
  }

  /**
   * Get promoter
   * @return promoter
   */
  @javax.annotation.Nullable
  public Promoter getPromoter() {
    return promoter;
  }

  public void setPromoter(Promoter promoter) {
    this.promoter = promoter;
  }


  public Event publicVisibility(PublicVisibility publicVisibility) {
    this.publicVisibility = publicVisibility;
    return this;
  }

  /**
   * Get publicVisibility
   * @return publicVisibility
   */
  @javax.annotation.Nullable
  public PublicVisibility getPublicVisibility() {
    return publicVisibility;
  }

  public void setPublicVisibility(PublicVisibility publicVisibility) {
    this.publicVisibility = publicVisibility;
  }


  public Event references(Map<String, String> references) {
    this.references = references;
    return this;
  }

  public Event putReferencesItem(String key, String referencesItem) {
    if (this.references == null) {
      this.references = new HashMap<>();
    }
    this.references.put(key, referencesItem);
    return this;
  }

  /**
   * References of this entity in an other system. Reference is the exact same entity
   * @return references
   */
  @javax.annotation.Nullable
  public Map<String, String> getReferences() {
    return references;
  }

  public void setReferences(Map<String, String> references) {
    this.references = references;
  }


  public Event relationships(List<Object> relationships) {
    this.relationships = relationships;
    return this;
  }

  public Event addRelationshipsItem(Object relationshipsItem) {
    if (this.relationships == null) {
      this.relationships = new ArrayList<>();
    }
    this.relationships.add(relationshipsItem);
    return this;
  }

  /**
   * Relationships on the entity, like if the entity is a duplicate of another one
   * @return relationships
   */
  @javax.annotation.Nullable
  public List<Object> getRelationships() {
    return relationships;
  }

  public void setRelationships(List<Object> relationships) {
    this.relationships = relationships;
  }


  public Event sales(EventSalesDates sales) {
    this.sales = sales;
    return this;
  }

  /**
   * Get sales
   * @return sales
   */
  @javax.annotation.Nullable
  public EventSalesDates getSales() {
    return sales;
  }

  public void setSales(EventSalesDates sales) {
    this.sales = sales;
  }


  public Event source(Source source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public Source getSource() {
    return source;
  }

  public void setSource(Source source) {
    this.source = source;
  }


  public Event test(Boolean test) {
    this.test = test;
    return this;
  }

  /**
   * Indicate if this is a test entity, by default test entities won&#39;t appear in discovery API
   * @return test
   */
  @javax.annotation.Nullable
  public Boolean getTest() {
    return test;
  }

  public void setTest(Boolean test) {
    this.test = test;
  }


  public Event type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the entity
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Event units(String units) {
    this.units = units;
    return this;
  }

  /**
   * Get units
   * @return units
   */
  @javax.annotation.Nullable
  public String getUnits() {
    return units;
  }

  public void setUnits(String units) {
    this.units = units;
  }


  public Event url(String url) {
    this.url = url;
    return this;
  }

  /**
   * URL of a web site detail page of the entity
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Event venue(Venue venue) {
    this.venue = venue;
    return this;
  }

  /**
   * Get venue
   * @return venue
   */
  @javax.annotation.Nullable
  public Venue getVenue() {
    return venue;
  }

  public void setVenue(Venue venue) {
    this.venue = venue;
  }


  public Event version(Long version) {
    this.version = version;
    return this;
  }

  /**
   * Version of the entity. Version is to avoid updated an entity with an older version
   * @return version
   */
  @javax.annotation.Nullable
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.active, event.active) &&
        Objects.equals(this.additionalInfos, event.additionalInfos) &&
        Objects.equals(this.attractions, event.attractions) &&
        Objects.equals(this.classifications, event.classifications) &&
        Objects.equals(this.dates, event.dates) &&
        Objects.equals(this.descriptions, event.descriptions) &&
        Objects.equals(this.discoverable, event.discoverable) &&
        Objects.equals(this.distance, event.distance) &&
        Objects.equals(this.images, event.images) &&
        Objects.equals(this.infos, event.infos) &&
        Objects.equals(this.location, event.location) &&
        Objects.equals(this.names, event.names) &&
        Objects.equals(this.place, event.place) &&
        Objects.equals(this.pleaseNotes, event.pleaseNotes) &&
        Objects.equals(this.priceRanges, event.priceRanges) &&
        Objects.equals(this.promoter, event.promoter) &&
        Objects.equals(this.publicVisibility, event.publicVisibility) &&
        Objects.equals(this.references, event.references) &&
        Objects.equals(this.relationships, event.relationships) &&
        Objects.equals(this.sales, event.sales) &&
        Objects.equals(this.source, event.source) &&
        Objects.equals(this.test, event.test) &&
        Objects.equals(this.type, event.type) &&
        Objects.equals(this.units, event.units) &&
        Objects.equals(this.url, event.url) &&
        Objects.equals(this.venue, event.venue) &&
        Objects.equals(this.version, event.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, additionalInfos, attractions, classifications, dates, descriptions, discoverable, distance, images, infos, location, names, place, pleaseNotes, priceRanges, promoter, publicVisibility, references, relationships, sales, source, test, type, units, url, venue, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    additionalInfos: ").append(toIndentedString(additionalInfos)).append("\n");
    sb.append("    attractions: ").append(toIndentedString(attractions)).append("\n");
    sb.append("    classifications: ").append(toIndentedString(classifications)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    descriptions: ").append(toIndentedString(descriptions)).append("\n");
    sb.append("    discoverable: ").append(toIndentedString(discoverable)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    infos: ").append(toIndentedString(infos)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    pleaseNotes: ").append(toIndentedString(pleaseNotes)).append("\n");
    sb.append("    priceRanges: ").append(toIndentedString(priceRanges)).append("\n");
    sb.append("    promoter: ").append(toIndentedString(promoter)).append("\n");
    sb.append("    publicVisibility: ").append(toIndentedString(publicVisibility)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    relationships: ").append(toIndentedString(relationships)).append("\n");
    sb.append("    sales: ").append(toIndentedString(sales)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    venue: ").append(toIndentedString(venue)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("additionalInfos");
    openapiFields.add("attractions");
    openapiFields.add("classifications");
    openapiFields.add("dates");
    openapiFields.add("descriptions");
    openapiFields.add("discoverable");
    openapiFields.add("distance");
    openapiFields.add("images");
    openapiFields.add("infos");
    openapiFields.add("location");
    openapiFields.add("names");
    openapiFields.add("place");
    openapiFields.add("pleaseNotes");
    openapiFields.add("priceRanges");
    openapiFields.add("promoter");
    openapiFields.add("publicVisibility");
    openapiFields.add("references");
    openapiFields.add("relationships");
    openapiFields.add("sales");
    openapiFields.add("source");
    openapiFields.add("test");
    openapiFields.add("type");
    openapiFields.add("units");
    openapiFields.add("url");
    openapiFields.add("venue");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Event.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("attractions") != null && !jsonObj.get("attractions").isJsonNull()) {
        JsonArray jsonArrayattractions = jsonObj.getAsJsonArray("attractions");
        if (jsonArrayattractions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attractions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attractions` to be an array in the JSON string but got `%s`", jsonObj.get("attractions").toString()));
          }

          // validate the optional field `attractions` (array)
          for (int i = 0; i < jsonArrayattractions.size(); i++) {
            Attraction.validateJsonElement(jsonArrayattractions.get(i));
          };
        }
      }
      if (jsonObj.get("classifications") != null && !jsonObj.get("classifications").isJsonNull()) {
        JsonArray jsonArrayclassifications = jsonObj.getAsJsonArray("classifications");
        if (jsonArrayclassifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("classifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `classifications` to be an array in the JSON string but got `%s`", jsonObj.get("classifications").toString()));
          }

          // validate the optional field `classifications` (array)
          for (int i = 0; i < jsonArrayclassifications.size(); i++) {
            Classification.validateJsonElement(jsonArrayclassifications.get(i));
          };
        }
      }
      // validate the optional field `dates`
      if (jsonObj.get("dates") != null && !jsonObj.get("dates").isJsonNull()) {
        EventDates.validateJsonElement(jsonObj.get("dates"));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            Image.validateJsonElement(jsonArrayimages.get(i));
          };
        }
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `place`
      if (jsonObj.get("place") != null && !jsonObj.get("place").isJsonNull()) {
        Place.validateJsonElement(jsonObj.get("place"));
      }
      if (jsonObj.get("priceRanges") != null && !jsonObj.get("priceRanges").isJsonNull()) {
        JsonArray jsonArraypriceRanges = jsonObj.getAsJsonArray("priceRanges");
        if (jsonArraypriceRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("priceRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `priceRanges` to be an array in the JSON string but got `%s`", jsonObj.get("priceRanges").toString()));
          }

          // validate the optional field `priceRanges` (array)
          for (int i = 0; i < jsonArraypriceRanges.size(); i++) {
            PriceRange.validateJsonElement(jsonArraypriceRanges.get(i));
          };
        }
      }
      // validate the optional field `promoter`
      if (jsonObj.get("promoter") != null && !jsonObj.get("promoter").isJsonNull()) {
        Promoter.validateJsonElement(jsonObj.get("promoter"));
      }
      // validate the optional field `publicVisibility`
      if (jsonObj.get("publicVisibility") != null && !jsonObj.get("publicVisibility").isJsonNull()) {
        PublicVisibility.validateJsonElement(jsonObj.get("publicVisibility"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("relationships") != null && !jsonObj.get("relationships").isJsonNull() && !jsonObj.get("relationships").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationships` to be an array in the JSON string but got `%s`", jsonObj.get("relationships").toString()));
      }
      // validate the optional field `sales`
      if (jsonObj.get("sales") != null && !jsonObj.get("sales").isJsonNull()) {
        EventSalesDates.validateJsonElement(jsonObj.get("sales"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        Source.validateJsonElement(jsonObj.get("source"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("units") != null && !jsonObj.get("units").isJsonNull()) && !jsonObj.get("units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `venue`
      if (jsonObj.get("venue") != null && !jsonObj.get("venue").isJsonNull()) {
        Venue.validateJsonElement(jsonObj.get("venue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Event
   * @throws IOException if the JSON string is invalid with respect to Event
   */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

  /**
   * Convert an instance of Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

