/*
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.City;
import org.openapitools.client.model.Country;
import org.openapitools.client.model.Dma;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.Market;
import org.openapitools.client.model.Social;
import org.openapitools.client.model.Source;
import org.openapitools.client.model.State;
import org.openapitools.client.model.VenueBoxOfficeInfo;
import org.openapitools.client.model.VenueGeneralInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Venue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:43.443928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Venue {
  public static final String SERIALIZED_NAME_ACCESSIBLE_SEATING_DETAILS = "accessibleSeatingDetails";
  @SerializedName(SERIALIZED_NAME_ACCESSIBLE_SEATING_DETAILS)
  private Map<String, String> accessibleSeatingDetails = new HashMap<>();

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active = false;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFOS = "additionalInfos";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFOS)
  private Map<String, String> additionalInfos = new HashMap<>();

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_BOX_OFFICE_INFO = "boxOfficeInfo";
  @SerializedName(SERIALIZED_NAME_BOX_OFFICE_INFO)
  private VenueBoxOfficeInfo boxOfficeInfo;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private City city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private Country country;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DESCRIPTIONS = "descriptions";
  @SerializedName(SERIALIZED_NAME_DESCRIPTIONS)
  private Map<String, String> descriptions = new HashMap<>();

  public static final String SERIALIZED_NAME_DISCOVERABLE = "discoverable";
  @SerializedName(SERIALIZED_NAME_DISCOVERABLE)
  private Boolean discoverable = false;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Double distance;

  public static final String SERIALIZED_NAME_DMA = "dma";
  @SerializedName(SERIALIZED_NAME_DMA)
  private List<Dma> dma = new ArrayList<>();

  public static final String SERIALIZED_NAME_GENERAL_INFO = "generalInfo";
  @SerializedName(SERIALIZED_NAME_GENERAL_INFO)
  private VenueGeneralInfo generalInfo;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private Set<Image> images = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_MARKETS = "markets";
  @SerializedName(SERIALIZED_NAME_MARKETS)
  private List<Market> markets = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAMES = "names";
  @SerializedName(SERIALIZED_NAME_NAMES)
  private Map<String, String> names = new HashMap<>();

  public static final String SERIALIZED_NAME_PARKING_DETAILS = "parkingDetails";
  @SerializedName(SERIALIZED_NAME_PARKING_DETAILS)
  private Map<String, String> parkingDetails = new HashMap<>();

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_REFERENCES = "references";
  @SerializedName(SERIALIZED_NAME_REFERENCES)
  private Map<String, String> references = new HashMap<>();

  public static final String SERIALIZED_NAME_RELATIONSHIPS = "relationships";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIPS)
  private List<Object> relationships = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOCIAL = "social";
  @SerializedName(SERIALIZED_NAME_SOCIAL)
  private Social social;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private Source source;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private State state;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Boolean test = false;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  /**
   * Type of the entity
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EVENT("event"),
    
    VENUE("venue"),
    
    ATTRACTION("attraction");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Long version;

  public Venue() {
  }

  public Venue accessibleSeatingDetails(Map<String, String> accessibleSeatingDetails) {
    this.accessibleSeatingDetails = accessibleSeatingDetails;
    return this;
  }

  public Venue putAccessibleSeatingDetailsItem(String key, String accessibleSeatingDetailsItem) {
    if (this.accessibleSeatingDetails == null) {
      this.accessibleSeatingDetails = new HashMap<>();
    }
    this.accessibleSeatingDetails.put(key, accessibleSeatingDetailsItem);
    return this;
  }

  /**
   * Venue accessible seating details - multi-lingual fields
   * @return accessibleSeatingDetails
   */
  @javax.annotation.Nullable
  public Map<String, String> getAccessibleSeatingDetails() {
    return accessibleSeatingDetails;
  }

  public void setAccessibleSeatingDetails(Map<String, String> accessibleSeatingDetails) {
    this.accessibleSeatingDetails = accessibleSeatingDetails;
  }


  public Venue active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Indicate if the entity is active, inactive entity won&#39;t appear in Discovery API
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public Venue additionalInfos(Map<String, String> additionalInfos) {
    this.additionalInfos = additionalInfos;
    return this;
  }

  public Venue putAdditionalInfosItem(String key, String additionalInfosItem) {
    if (this.additionalInfos == null) {
      this.additionalInfos = new HashMap<>();
    }
    this.additionalInfos.put(key, additionalInfosItem);
    return this;
  }

  /**
   * Additional informations of the entity - multi-lingual fields
   * @return additionalInfos
   */
  @javax.annotation.Nullable
  public Map<String, String> getAdditionalInfos() {
    return additionalInfos;
  }

  public void setAdditionalInfos(Map<String, String> additionalInfos) {
    this.additionalInfos = additionalInfos;
  }


  public Venue address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public Venue boxOfficeInfo(VenueBoxOfficeInfo boxOfficeInfo) {
    this.boxOfficeInfo = boxOfficeInfo;
    return this;
  }

  /**
   * Get boxOfficeInfo
   * @return boxOfficeInfo
   */
  @javax.annotation.Nullable
  public VenueBoxOfficeInfo getBoxOfficeInfo() {
    return boxOfficeInfo;
  }

  public void setBoxOfficeInfo(VenueBoxOfficeInfo boxOfficeInfo) {
    this.boxOfficeInfo = boxOfficeInfo;
  }


  public Venue city(City city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public City getCity() {
    return city;
  }

  public void setCity(City city) {
    this.city = city;
  }


  public Venue country(Country country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public Country getCountry() {
    return country;
  }

  public void setCountry(Country country) {
    this.country = country;
  }


  public Venue currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Default currency of ticket prices for events in this venue
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Venue descriptions(Map<String, String> descriptions) {
    this.descriptions = descriptions;
    return this;
  }

  public Venue putDescriptionsItem(String key, String descriptionsItem) {
    if (this.descriptions == null) {
      this.descriptions = new HashMap<>();
    }
    this.descriptions.put(key, descriptionsItem);
    return this;
  }

  /**
   * Descriptions of the entity - multi-lingual fields
   * @return descriptions
   */
  @javax.annotation.Nullable
  public Map<String, String> getDescriptions() {
    return descriptions;
  }

  public void setDescriptions(Map<String, String> descriptions) {
    this.descriptions = descriptions;
  }


  public Venue discoverable(Boolean discoverable) {
    this.discoverable = discoverable;
    return this;
  }

  /**
   * True if the entity is dicoverable in discovery API
   * @return discoverable
   */
  @javax.annotation.Nullable
  public Boolean getDiscoverable() {
    return discoverable;
  }

  public void setDiscoverable(Boolean discoverable) {
    this.discoverable = discoverable;
  }


  public Venue distance(Double distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Get distance
   * @return distance
   */
  @javax.annotation.Nullable
  public Double getDistance() {
    return distance;
  }

  public void setDistance(Double distance) {
    this.distance = distance;
  }


  public Venue dma(List<Dma> dma) {
    this.dma = dma;
    return this;
  }

  public Venue addDmaItem(Dma dmaItem) {
    if (this.dma == null) {
      this.dma = new ArrayList<>();
    }
    this.dma.add(dmaItem);
    return this;
  }

  /**
   * The list of associated DMAs (Designated Market Areas) of the venue
   * @return dma
   */
  @javax.annotation.Nullable
  public List<Dma> getDma() {
    return dma;
  }

  public void setDma(List<Dma> dma) {
    this.dma = dma;
  }


  public Venue generalInfo(VenueGeneralInfo generalInfo) {
    this.generalInfo = generalInfo;
    return this;
  }

  /**
   * Get generalInfo
   * @return generalInfo
   */
  @javax.annotation.Nullable
  public VenueGeneralInfo getGeneralInfo() {
    return generalInfo;
  }

  public void setGeneralInfo(VenueGeneralInfo generalInfo) {
    this.generalInfo = generalInfo;
  }


  public Venue images(Set<Image> images) {
    this.images = images;
    return this;
  }

  public Venue addImagesItem(Image imagesItem) {
    if (this.images == null) {
      this.images = new LinkedHashSet<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Images of the entity
   * @return images
   */
  @javax.annotation.Nullable
  public Set<Image> getImages() {
    return images;
  }

  public void setImages(Set<Image> images) {
    this.images = images;
  }


  public Venue location(Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  public Venue markets(List<Market> markets) {
    this.markets = markets;
    return this;
  }

  public Venue addMarketsItem(Market marketsItem) {
    if (this.markets == null) {
      this.markets = new ArrayList<>();
    }
    this.markets.add(marketsItem);
    return this;
  }

  /**
   * Markets of the venue
   * @return markets
   */
  @javax.annotation.Nullable
  public List<Market> getMarkets() {
    return markets;
  }

  public void setMarkets(List<Market> markets) {
    this.markets = markets;
  }


  public Venue names(Map<String, String> names) {
    this.names = names;
    return this;
  }

  public Venue putNamesItem(String key, String namesItem) {
    if (this.names == null) {
      this.names = new HashMap<>();
    }
    this.names.put(key, namesItem);
    return this;
  }

  /**
   * Names of the entity - multi-lingual fields
   * @return names
   */
  @javax.annotation.Nullable
  public Map<String, String> getNames() {
    return names;
  }

  public void setNames(Map<String, String> names) {
    this.names = names;
  }


  public Venue parkingDetails(Map<String, String> parkingDetails) {
    this.parkingDetails = parkingDetails;
    return this;
  }

  public Venue putParkingDetailsItem(String key, String parkingDetailsItem) {
    if (this.parkingDetails == null) {
      this.parkingDetails = new HashMap<>();
    }
    this.parkingDetails.put(key, parkingDetailsItem);
    return this;
  }

  /**
   * Venue parking info - multi-lingual fields
   * @return parkingDetails
   */
  @javax.annotation.Nullable
  public Map<String, String> getParkingDetails() {
    return parkingDetails;
  }

  public void setParkingDetails(Map<String, String> parkingDetails) {
    this.parkingDetails = parkingDetails;
  }


  public Venue postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Postal code / zipcode of the venue
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public Venue references(Map<String, String> references) {
    this.references = references;
    return this;
  }

  public Venue putReferencesItem(String key, String referencesItem) {
    if (this.references == null) {
      this.references = new HashMap<>();
    }
    this.references.put(key, referencesItem);
    return this;
  }

  /**
   * References of this entity in an other system. Reference is the exact same entity
   * @return references
   */
  @javax.annotation.Nullable
  public Map<String, String> getReferences() {
    return references;
  }

  public void setReferences(Map<String, String> references) {
    this.references = references;
  }


  public Venue relationships(List<Object> relationships) {
    this.relationships = relationships;
    return this;
  }

  public Venue addRelationshipsItem(Object relationshipsItem) {
    if (this.relationships == null) {
      this.relationships = new ArrayList<>();
    }
    this.relationships.add(relationshipsItem);
    return this;
  }

  /**
   * Relationships on the entity, like if the entity is a duplicate of another one
   * @return relationships
   */
  @javax.annotation.Nullable
  public List<Object> getRelationships() {
    return relationships;
  }

  public void setRelationships(List<Object> relationships) {
    this.relationships = relationships;
  }


  public Venue social(Social social) {
    this.social = social;
    return this;
  }

  /**
   * Get social
   * @return social
   */
  @javax.annotation.Nullable
  public Social getSocial() {
    return social;
  }

  public void setSocial(Social social) {
    this.social = social;
  }


  public Venue source(Source source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public Source getSource() {
    return source;
  }

  public void setSource(Source source) {
    this.source = source;
  }


  public Venue state(State state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public State getState() {
    return state;
  }

  public void setState(State state) {
    this.state = state;
  }


  public Venue test(Boolean test) {
    this.test = test;
    return this;
  }

  /**
   * Indicate if this is a test entity, by default test entities won&#39;t appear in discovery API
   * @return test
   */
  @javax.annotation.Nullable
  public Boolean getTest() {
    return test;
  }

  public void setTest(Boolean test) {
    this.test = test;
  }


  public Venue timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Timezone of the venue
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public Venue type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the entity
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Venue units(String units) {
    this.units = units;
    return this;
  }

  /**
   * Get units
   * @return units
   */
  @javax.annotation.Nullable
  public String getUnits() {
    return units;
  }

  public void setUnits(String units) {
    this.units = units;
  }


  public Venue url(String url) {
    this.url = url;
    return this;
  }

  /**
   * URL of a web site detail page of the entity
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Venue version(Long version) {
    this.version = version;
    return this;
  }

  /**
   * Version of the entity. Version is to avoid updated an entity with an older version
   * @return version
   */
  @javax.annotation.Nullable
  public Long getVersion() {
    return version;
  }

  public void setVersion(Long version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Venue venue = (Venue) o;
    return Objects.equals(this.accessibleSeatingDetails, venue.accessibleSeatingDetails) &&
        Objects.equals(this.active, venue.active) &&
        Objects.equals(this.additionalInfos, venue.additionalInfos) &&
        Objects.equals(this.address, venue.address) &&
        Objects.equals(this.boxOfficeInfo, venue.boxOfficeInfo) &&
        Objects.equals(this.city, venue.city) &&
        Objects.equals(this.country, venue.country) &&
        Objects.equals(this.currency, venue.currency) &&
        Objects.equals(this.descriptions, venue.descriptions) &&
        Objects.equals(this.discoverable, venue.discoverable) &&
        Objects.equals(this.distance, venue.distance) &&
        Objects.equals(this.dma, venue.dma) &&
        Objects.equals(this.generalInfo, venue.generalInfo) &&
        Objects.equals(this.images, venue.images) &&
        Objects.equals(this.location, venue.location) &&
        Objects.equals(this.markets, venue.markets) &&
        Objects.equals(this.names, venue.names) &&
        Objects.equals(this.parkingDetails, venue.parkingDetails) &&
        Objects.equals(this.postalCode, venue.postalCode) &&
        Objects.equals(this.references, venue.references) &&
        Objects.equals(this.relationships, venue.relationships) &&
        Objects.equals(this.social, venue.social) &&
        Objects.equals(this.source, venue.source) &&
        Objects.equals(this.state, venue.state) &&
        Objects.equals(this.test, venue.test) &&
        Objects.equals(this.timezone, venue.timezone) &&
        Objects.equals(this.type, venue.type) &&
        Objects.equals(this.units, venue.units) &&
        Objects.equals(this.url, venue.url) &&
        Objects.equals(this.version, venue.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessibleSeatingDetails, active, additionalInfos, address, boxOfficeInfo, city, country, currency, descriptions, discoverable, distance, dma, generalInfo, images, location, markets, names, parkingDetails, postalCode, references, relationships, social, source, state, test, timezone, type, units, url, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Venue {\n");
    sb.append("    accessibleSeatingDetails: ").append(toIndentedString(accessibleSeatingDetails)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    additionalInfos: ").append(toIndentedString(additionalInfos)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    boxOfficeInfo: ").append(toIndentedString(boxOfficeInfo)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    descriptions: ").append(toIndentedString(descriptions)).append("\n");
    sb.append("    discoverable: ").append(toIndentedString(discoverable)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    dma: ").append(toIndentedString(dma)).append("\n");
    sb.append("    generalInfo: ").append(toIndentedString(generalInfo)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    markets: ").append(toIndentedString(markets)).append("\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    parkingDetails: ").append(toIndentedString(parkingDetails)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    relationships: ").append(toIndentedString(relationships)).append("\n");
    sb.append("    social: ").append(toIndentedString(social)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessibleSeatingDetails");
    openapiFields.add("active");
    openapiFields.add("additionalInfos");
    openapiFields.add("address");
    openapiFields.add("boxOfficeInfo");
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("currency");
    openapiFields.add("descriptions");
    openapiFields.add("discoverable");
    openapiFields.add("distance");
    openapiFields.add("dma");
    openapiFields.add("generalInfo");
    openapiFields.add("images");
    openapiFields.add("location");
    openapiFields.add("markets");
    openapiFields.add("names");
    openapiFields.add("parkingDetails");
    openapiFields.add("postalCode");
    openapiFields.add("references");
    openapiFields.add("relationships");
    openapiFields.add("social");
    openapiFields.add("source");
    openapiFields.add("state");
    openapiFields.add("test");
    openapiFields.add("timezone");
    openapiFields.add("type");
    openapiFields.add("units");
    openapiFields.add("url");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Venue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Venue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Venue is not found in the empty JSON string", Venue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Venue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Venue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Venue.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `boxOfficeInfo`
      if (jsonObj.get("boxOfficeInfo") != null && !jsonObj.get("boxOfficeInfo").isJsonNull()) {
        VenueBoxOfficeInfo.validateJsonElement(jsonObj.get("boxOfficeInfo"));
      }
      // validate the optional field `city`
      if (jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) {
        City.validateJsonElement(jsonObj.get("city"));
      }
      // validate the optional field `country`
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) {
        Country.validateJsonElement(jsonObj.get("country"));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (jsonObj.get("dma") != null && !jsonObj.get("dma").isJsonNull()) {
        JsonArray jsonArraydma = jsonObj.getAsJsonArray("dma");
        if (jsonArraydma != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dma").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dma` to be an array in the JSON string but got `%s`", jsonObj.get("dma").toString()));
          }

          // validate the optional field `dma` (array)
          for (int i = 0; i < jsonArraydma.size(); i++) {
            Dma.validateJsonElement(jsonArraydma.get(i));
          };
        }
      }
      // validate the optional field `generalInfo`
      if (jsonObj.get("generalInfo") != null && !jsonObj.get("generalInfo").isJsonNull()) {
        VenueGeneralInfo.validateJsonElement(jsonObj.get("generalInfo"));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            Image.validateJsonElement(jsonArrayimages.get(i));
          };
        }
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("location"));
      }
      if (jsonObj.get("markets") != null && !jsonObj.get("markets").isJsonNull()) {
        JsonArray jsonArraymarkets = jsonObj.getAsJsonArray("markets");
        if (jsonArraymarkets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("markets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `markets` to be an array in the JSON string but got `%s`", jsonObj.get("markets").toString()));
          }

          // validate the optional field `markets` (array)
          for (int i = 0; i < jsonArraymarkets.size(); i++) {
            Market.validateJsonElement(jsonArraymarkets.get(i));
          };
        }
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("relationships") != null && !jsonObj.get("relationships").isJsonNull() && !jsonObj.get("relationships").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationships` to be an array in the JSON string but got `%s`", jsonObj.get("relationships").toString()));
      }
      // validate the optional field `social`
      if (jsonObj.get("social") != null && !jsonObj.get("social").isJsonNull()) {
        Social.validateJsonElement(jsonObj.get("social"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        Source.validateJsonElement(jsonObj.get("source"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        State.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("units") != null && !jsonObj.get("units").isJsonNull()) && !jsonObj.get("units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Venue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Venue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Venue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Venue.class));

       return (TypeAdapter<T>) new TypeAdapter<Venue>() {
           @Override
           public void write(JsonWriter out, Venue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Venue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Venue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Venue
   * @throws IOException if the JSON string is invalid with respect to Venue
   */
  public static Venue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Venue.class);
  }

  /**
   * Convert an instance of Venue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

