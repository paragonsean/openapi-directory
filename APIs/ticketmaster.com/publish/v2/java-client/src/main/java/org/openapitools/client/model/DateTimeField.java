/*
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DateTimeFieldType;
import org.openapitools.client.model.DurationField;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DateTimeField
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:43.443928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DateTimeField {
  public static final String SERIALIZED_NAME_DURATION_FIELD = "durationField";
  @SerializedName(SERIALIZED_NAME_DURATION_FIELD)
  private DurationField durationField;

  public static final String SERIALIZED_NAME_LEAP_DURATION_FIELD = "leapDurationField";
  @SerializedName(SERIALIZED_NAME_LEAP_DURATION_FIELD)
  private DurationField leapDurationField;

  public static final String SERIALIZED_NAME_LENIENT = "lenient";
  @SerializedName(SERIALIZED_NAME_LENIENT)
  private Boolean lenient = false;

  public static final String SERIALIZED_NAME_MAXIMUM_VALUE = "maximumValue";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_VALUE)
  private Integer maximumValue;

  public static final String SERIALIZED_NAME_MINIMUM_VALUE = "minimumValue";
  @SerializedName(SERIALIZED_NAME_MINIMUM_VALUE)
  private Integer minimumValue;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RANGE_DURATION_FIELD = "rangeDurationField";
  @SerializedName(SERIALIZED_NAME_RANGE_DURATION_FIELD)
  private DurationField rangeDurationField;

  public static final String SERIALIZED_NAME_SUPPORTED = "supported";
  @SerializedName(SERIALIZED_NAME_SUPPORTED)
  private Boolean supported = false;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private DateTimeFieldType type;

  public DateTimeField() {
  }

  public DateTimeField durationField(DurationField durationField) {
    this.durationField = durationField;
    return this;
  }

  /**
   * Get durationField
   * @return durationField
   */
  @javax.annotation.Nullable
  public DurationField getDurationField() {
    return durationField;
  }

  public void setDurationField(DurationField durationField) {
    this.durationField = durationField;
  }


  public DateTimeField leapDurationField(DurationField leapDurationField) {
    this.leapDurationField = leapDurationField;
    return this;
  }

  /**
   * Get leapDurationField
   * @return leapDurationField
   */
  @javax.annotation.Nullable
  public DurationField getLeapDurationField() {
    return leapDurationField;
  }

  public void setLeapDurationField(DurationField leapDurationField) {
    this.leapDurationField = leapDurationField;
  }


  public DateTimeField lenient(Boolean lenient) {
    this.lenient = lenient;
    return this;
  }

  /**
   * Get lenient
   * @return lenient
   */
  @javax.annotation.Nullable
  public Boolean getLenient() {
    return lenient;
  }

  public void setLenient(Boolean lenient) {
    this.lenient = lenient;
  }


  public DateTimeField maximumValue(Integer maximumValue) {
    this.maximumValue = maximumValue;
    return this;
  }

  /**
   * Get maximumValue
   * @return maximumValue
   */
  @javax.annotation.Nullable
  public Integer getMaximumValue() {
    return maximumValue;
  }

  public void setMaximumValue(Integer maximumValue) {
    this.maximumValue = maximumValue;
  }


  public DateTimeField minimumValue(Integer minimumValue) {
    this.minimumValue = minimumValue;
    return this;
  }

  /**
   * Get minimumValue
   * @return minimumValue
   */
  @javax.annotation.Nullable
  public Integer getMinimumValue() {
    return minimumValue;
  }

  public void setMinimumValue(Integer minimumValue) {
    this.minimumValue = minimumValue;
  }


  public DateTimeField name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DateTimeField rangeDurationField(DurationField rangeDurationField) {
    this.rangeDurationField = rangeDurationField;
    return this;
  }

  /**
   * Get rangeDurationField
   * @return rangeDurationField
   */
  @javax.annotation.Nullable
  public DurationField getRangeDurationField() {
    return rangeDurationField;
  }

  public void setRangeDurationField(DurationField rangeDurationField) {
    this.rangeDurationField = rangeDurationField;
  }


  public DateTimeField supported(Boolean supported) {
    this.supported = supported;
    return this;
  }

  /**
   * Get supported
   * @return supported
   */
  @javax.annotation.Nullable
  public Boolean getSupported() {
    return supported;
  }

  public void setSupported(Boolean supported) {
    this.supported = supported;
  }


  public DateTimeField type(DateTimeFieldType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public DateTimeFieldType getType() {
    return type;
  }

  public void setType(DateTimeFieldType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DateTimeField dateTimeField = (DateTimeField) o;
    return Objects.equals(this.durationField, dateTimeField.durationField) &&
        Objects.equals(this.leapDurationField, dateTimeField.leapDurationField) &&
        Objects.equals(this.lenient, dateTimeField.lenient) &&
        Objects.equals(this.maximumValue, dateTimeField.maximumValue) &&
        Objects.equals(this.minimumValue, dateTimeField.minimumValue) &&
        Objects.equals(this.name, dateTimeField.name) &&
        Objects.equals(this.rangeDurationField, dateTimeField.rangeDurationField) &&
        Objects.equals(this.supported, dateTimeField.supported) &&
        Objects.equals(this.type, dateTimeField.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(durationField, leapDurationField, lenient, maximumValue, minimumValue, name, rangeDurationField, supported, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DateTimeField {\n");
    sb.append("    durationField: ").append(toIndentedString(durationField)).append("\n");
    sb.append("    leapDurationField: ").append(toIndentedString(leapDurationField)).append("\n");
    sb.append("    lenient: ").append(toIndentedString(lenient)).append("\n");
    sb.append("    maximumValue: ").append(toIndentedString(maximumValue)).append("\n");
    sb.append("    minimumValue: ").append(toIndentedString(minimumValue)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rangeDurationField: ").append(toIndentedString(rangeDurationField)).append("\n");
    sb.append("    supported: ").append(toIndentedString(supported)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("durationField");
    openapiFields.add("leapDurationField");
    openapiFields.add("lenient");
    openapiFields.add("maximumValue");
    openapiFields.add("minimumValue");
    openapiFields.add("name");
    openapiFields.add("rangeDurationField");
    openapiFields.add("supported");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DateTimeField
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DateTimeField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DateTimeField is not found in the empty JSON string", DateTimeField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DateTimeField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DateTimeField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `durationField`
      if (jsonObj.get("durationField") != null && !jsonObj.get("durationField").isJsonNull()) {
        DurationField.validateJsonElement(jsonObj.get("durationField"));
      }
      // validate the optional field `leapDurationField`
      if (jsonObj.get("leapDurationField") != null && !jsonObj.get("leapDurationField").isJsonNull()) {
        DurationField.validateJsonElement(jsonObj.get("leapDurationField"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `rangeDurationField`
      if (jsonObj.get("rangeDurationField") != null && !jsonObj.get("rangeDurationField").isJsonNull()) {
        DurationField.validateJsonElement(jsonObj.get("rangeDurationField"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        DateTimeFieldType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DateTimeField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DateTimeField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DateTimeField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DateTimeField.class));

       return (TypeAdapter<T>) new TypeAdapter<DateTimeField>() {
           @Override
           public void write(JsonWriter out, DateTimeField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DateTimeField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DateTimeField given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DateTimeField
   * @throws IOException if the JSON string is invalid with respect to DateTimeField
   */
  public static DateTimeField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DateTimeField.class);
  }

  /**
   * Convert an instance of DateTimeField to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

