/*
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Change;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This class defines the Augmentation Data on the Publish API
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:43.443928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AugmentationData {
  public static final String SERIALIZED_NAME_CHANGES = "changes";
  @SerializedName(SERIALIZED_NAME_CHANGES)
  private List<Change> changes = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELATED_ENTITY_ID = "relatedEntityId";
  @SerializedName(SERIALIZED_NAME_RELATED_ENTITY_ID)
  private String relatedEntityId;

  /**
   * The type of the entity to apply the augmentation data.
   */
  @JsonAdapter(RelatedEntityTypeEnum.Adapter.class)
  public enum RelatedEntityTypeEnum {
    EVENT("event"),
    
    ATTRACTION("attraction"),
    
    VENUE("venue");

    private String value;

    RelatedEntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelatedEntityTypeEnum fromValue(String value) {
      for (RelatedEntityTypeEnum b : RelatedEntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelatedEntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelatedEntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelatedEntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelatedEntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelatedEntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATED_ENTITY_TYPE = "relatedEntityType";
  @SerializedName(SERIALIZED_NAME_RELATED_ENTITY_TYPE)
  private RelatedEntityTypeEnum relatedEntityType;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Float score;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_VERSION_NUMBER = "versionNumber";
  @SerializedName(SERIALIZED_NAME_VERSION_NUMBER)
  private Long versionNumber;

  public AugmentationData() {
  }

  public AugmentationData changes(List<Change> changes) {
    this.changes = changes;
    return this;
  }

  public AugmentationData addChangesItem(Change changesItem) {
    if (this.changes == null) {
      this.changes = new ArrayList<>();
    }
    this.changes.add(changesItem);
    return this;
  }

  /**
   * List of changes to apply to the related entity
   * @return changes
   */
  @javax.annotation.Nonnull
  public List<Change> getChanges() {
    return changes;
  }

  public void setChanges(List<Change> changes) {
    this.changes = changes;
  }


  public AugmentationData relatedEntityId(String relatedEntityId) {
    this.relatedEntityId = relatedEntityId;
    return this;
  }

  /**
   * Id of the entity to apply the augmentation data.
   * @return relatedEntityId
   */
  @javax.annotation.Nonnull
  public String getRelatedEntityId() {
    return relatedEntityId;
  }

  public void setRelatedEntityId(String relatedEntityId) {
    this.relatedEntityId = relatedEntityId;
  }


  public AugmentationData relatedEntityType(RelatedEntityTypeEnum relatedEntityType) {
    this.relatedEntityType = relatedEntityType;
    return this;
  }

  /**
   * The type of the entity to apply the augmentation data.
   * @return relatedEntityType
   */
  @javax.annotation.Nonnull
  public RelatedEntityTypeEnum getRelatedEntityType() {
    return relatedEntityType;
  }

  public void setRelatedEntityType(RelatedEntityTypeEnum relatedEntityType) {
    this.relatedEntityType = relatedEntityType;
  }


  public AugmentationData score(Float score) {
    this.score = score;
    return this;
  }

  /**
   * The confidence (%) level of the accuracy of this augmention data. 100 is the better
   * @return score
   */
  @javax.annotation.Nullable
  public Float getScore() {
    return score;
  }

  public void setScore(Float score) {
    this.score = score;
  }


  public AugmentationData source(String source) {
    this.source = source;
    return this;
  }

  /**
   * The source where the augementation data came from
   * @return source
   */
  @javax.annotation.Nonnull
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public AugmentationData versionNumber(Long versionNumber) {
    this.versionNumber = versionNumber;
    return this;
  }

  /**
   * Vesion of this augmentation data. This field is to avoid updating entity with old data. 
   * @return versionNumber
   */
  @javax.annotation.Nonnull
  public Long getVersionNumber() {
    return versionNumber;
  }

  public void setVersionNumber(Long versionNumber) {
    this.versionNumber = versionNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AugmentationData augmentationData = (AugmentationData) o;
    return Objects.equals(this.changes, augmentationData.changes) &&
        Objects.equals(this.relatedEntityId, augmentationData.relatedEntityId) &&
        Objects.equals(this.relatedEntityType, augmentationData.relatedEntityType) &&
        Objects.equals(this.score, augmentationData.score) &&
        Objects.equals(this.source, augmentationData.source) &&
        Objects.equals(this.versionNumber, augmentationData.versionNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changes, relatedEntityId, relatedEntityType, score, source, versionNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AugmentationData {\n");
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("    relatedEntityId: ").append(toIndentedString(relatedEntityId)).append("\n");
    sb.append("    relatedEntityType: ").append(toIndentedString(relatedEntityType)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changes");
    openapiFields.add("relatedEntityId");
    openapiFields.add("relatedEntityType");
    openapiFields.add("score");
    openapiFields.add("source");
    openapiFields.add("versionNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("changes");
    openapiRequiredFields.add("relatedEntityId");
    openapiRequiredFields.add("relatedEntityType");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("versionNumber");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AugmentationData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AugmentationData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AugmentationData is not found in the empty JSON string", AugmentationData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AugmentationData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AugmentationData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AugmentationData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("changes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `changes` to be an array in the JSON string but got `%s`", jsonObj.get("changes").toString()));
      }

      JsonArray jsonArraychanges = jsonObj.getAsJsonArray("changes");
      // validate the required field `changes` (array)
      for (int i = 0; i < jsonArraychanges.size(); i++) {
        Change.validateJsonElement(jsonArraychanges.get(i));
      };
      if (!jsonObj.get("relatedEntityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedEntityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relatedEntityId").toString()));
      }
      if (!jsonObj.get("relatedEntityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedEntityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relatedEntityType").toString()));
      }
      // validate the required field `relatedEntityType`
      RelatedEntityTypeEnum.validateJsonElement(jsonObj.get("relatedEntityType"));
      if (!jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AugmentationData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AugmentationData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AugmentationData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AugmentationData.class));

       return (TypeAdapter<T>) new TypeAdapter<AugmentationData>() {
           @Override
           public void write(JsonWriter out, AugmentationData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AugmentationData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AugmentationData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AugmentationData
   * @throws IOException if the JSON string is invalid with respect to AugmentationData
   */
  public static AugmentationData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AugmentationData.class);
  }

  /**
   * Convert an instance of AugmentationData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

