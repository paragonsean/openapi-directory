/*
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Source;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This class defines an extenstion data on the Publish API
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:43.443928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExtensionData {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_RELATED_ENTITY_ID = "relatedEntityId";
  @SerializedName(SERIALIZED_NAME_RELATED_ENTITY_ID)
  private String relatedEntityId;

  public static final String SERIALIZED_NAME_RELATED_ENTITY_SOURCE = "relatedEntitySource";
  @SerializedName(SERIALIZED_NAME_RELATED_ENTITY_SOURCE)
  private Source relatedEntitySource;

  /**
   * The type of the entity to add this extensions to
   */
  @JsonAdapter(RelatedEntityTypeEnum.Adapter.class)
  public enum RelatedEntityTypeEnum {
    EVENT("event"),
    
    VENUE("venue"),
    
    ATTRACTION("attraction");

    private String value;

    RelatedEntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelatedEntityTypeEnum fromValue(String value) {
      for (RelatedEntityTypeEnum b : RelatedEntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelatedEntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelatedEntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelatedEntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelatedEntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelatedEntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATED_ENTITY_TYPE = "relatedEntityType";
  @SerializedName(SERIALIZED_NAME_RELATED_ENTITY_TYPE)
  private RelatedEntityTypeEnum relatedEntityType;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VERSION_NUMBER = "versionNumber";
  @SerializedName(SERIALIZED_NAME_VERSION_NUMBER)
  private Long versionNumber;

  public ExtensionData() {
  }

  public ExtensionData data(Object data) {
    this.data = data;
    return this;
  }

  /**
   * The actual information to add to the entity
   * @return data
   */
  @javax.annotation.Nonnull
  public Object getData() {
    return data;
  }

  public void setData(Object data) {
    this.data = data;
  }


  public ExtensionData relatedEntityId(String relatedEntityId) {
    this.relatedEntityId = relatedEntityId;
    return this;
  }

  /**
   * Id of the entity to add this extionsion to. If the relatedEntityId is Null, a relatedEntitySource MUST be provided
   * @return relatedEntityId
   */
  @javax.annotation.Nullable
  public String getRelatedEntityId() {
    return relatedEntityId;
  }

  public void setRelatedEntityId(String relatedEntityId) {
    this.relatedEntityId = relatedEntityId;
  }


  public ExtensionData relatedEntitySource(Source relatedEntitySource) {
    this.relatedEntitySource = relatedEntitySource;
    return this;
  }

  /**
   * Get relatedEntitySource
   * @return relatedEntitySource
   */
  @javax.annotation.Nullable
  public Source getRelatedEntitySource() {
    return relatedEntitySource;
  }

  public void setRelatedEntitySource(Source relatedEntitySource) {
    this.relatedEntitySource = relatedEntitySource;
  }


  public ExtensionData relatedEntityType(RelatedEntityTypeEnum relatedEntityType) {
    this.relatedEntityType = relatedEntityType;
    return this;
  }

  /**
   * The type of the entity to add this extensions to
   * @return relatedEntityType
   */
  @javax.annotation.Nonnull
  public RelatedEntityTypeEnum getRelatedEntityType() {
    return relatedEntityType;
  }

  public void setRelatedEntityType(RelatedEntityTypeEnum relatedEntityType) {
    this.relatedEntityType = relatedEntityType;
  }


  public ExtensionData source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Source of the extension, where it came from
   * @return source
   */
  @javax.annotation.Nonnull
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public ExtensionData type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the extension. This represent the data sent
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ExtensionData versionNumber(Long versionNumber) {
    this.versionNumber = versionNumber;
    return this;
  }

  /**
   * Version of the extensions. Version is to prevent to override an extension with an older one
   * @return versionNumber
   */
  @javax.annotation.Nullable
  public Long getVersionNumber() {
    return versionNumber;
  }

  public void setVersionNumber(Long versionNumber) {
    this.versionNumber = versionNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtensionData extensionData = (ExtensionData) o;
    return Objects.equals(this.data, extensionData.data) &&
        Objects.equals(this.relatedEntityId, extensionData.relatedEntityId) &&
        Objects.equals(this.relatedEntitySource, extensionData.relatedEntitySource) &&
        Objects.equals(this.relatedEntityType, extensionData.relatedEntityType) &&
        Objects.equals(this.source, extensionData.source) &&
        Objects.equals(this.type, extensionData.type) &&
        Objects.equals(this.versionNumber, extensionData.versionNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, relatedEntityId, relatedEntitySource, relatedEntityType, source, type, versionNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtensionData {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    relatedEntityId: ").append(toIndentedString(relatedEntityId)).append("\n");
    sb.append("    relatedEntitySource: ").append(toIndentedString(relatedEntitySource)).append("\n");
    sb.append("    relatedEntityType: ").append(toIndentedString(relatedEntityType)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("relatedEntityId");
    openapiFields.add("relatedEntitySource");
    openapiFields.add("relatedEntityType");
    openapiFields.add("source");
    openapiFields.add("type");
    openapiFields.add("versionNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("relatedEntityType");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExtensionData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExtensionData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExtensionData is not found in the empty JSON string", ExtensionData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExtensionData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExtensionData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExtensionData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("relatedEntityId") != null && !jsonObj.get("relatedEntityId").isJsonNull()) && !jsonObj.get("relatedEntityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedEntityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relatedEntityId").toString()));
      }
      // validate the optional field `relatedEntitySource`
      if (jsonObj.get("relatedEntitySource") != null && !jsonObj.get("relatedEntitySource").isJsonNull()) {
        Source.validateJsonElement(jsonObj.get("relatedEntitySource"));
      }
      if (!jsonObj.get("relatedEntityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedEntityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relatedEntityType").toString()));
      }
      // validate the required field `relatedEntityType`
      RelatedEntityTypeEnum.validateJsonElement(jsonObj.get("relatedEntityType"));
      if (!jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExtensionData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExtensionData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExtensionData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExtensionData.class));

       return (TypeAdapter<T>) new TypeAdapter<ExtensionData>() {
           @Override
           public void write(JsonWriter out, ExtensionData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExtensionData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExtensionData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExtensionData
   * @throws IOException if the JSON string is invalid with respect to ExtensionData
   */
  public static ExtensionData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExtensionData.class);
  }

  /**
   * Convert an instance of ExtensionData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

