/*
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Attraction;
import org.openapitools.client.model.AugmentationData;
import org.openapitools.client.model.Entitlement;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.ExtensionData;
import org.openapitools.client.model.IngestionResult;
import org.openapitools.client.model.Venue;
import org.openapitools.client.model.Video;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Publish a patch on an attraction
     *
     * Since 1.0.0
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchAttractionTest() throws ApiException {
        String id = null;
        String tmPSCorrelationId = null;
        AugmentationData augmentationData = null;
        IngestionResult response = api.patchAttraction(id, tmPSCorrelationId, augmentationData);
        // TODO: test validations
    }

    /**
     * Publish a patch on an event
     *
     * Since 1.0.0
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchEventTest() throws ApiException {
        String id = null;
        String tmPSCorrelationId = null;
        AugmentationData augmentationData = null;
        IngestionResult response = api.patchEvent(id, tmPSCorrelationId, augmentationData);
        // TODO: test validations
    }

    /**
     * Publish a patch on a venue
     *
     * Since 1.0.0
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchVenueTest() throws ApiException {
        String id = null;
        String tmPSCorrelationId = null;
        AugmentationData augmentationData = null;
        IngestionResult response = api.patchVenue(id, tmPSCorrelationId, augmentationData);
        // TODO: test validations
    }

    /**
     * Publish an attractions
     *
     * Since 1.0.0
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishAttractionTest() throws ApiException {
        String tmPSCorrelationId = null;
        Attraction attraction = null;
        IngestionResult response = api.publishAttraction(tmPSCorrelationId, attraction);
        // TODO: test validations
    }

    /**
     * Publish a video on an attraction
     *
     * Since 1.0.0
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishAttractionVideosTest() throws ApiException {
        String id = null;
        String tmPSCorrelationId = null;
        Video video = null;
        IngestionResult response = api.publishAttractionVideos(id, tmPSCorrelationId, video);
        // TODO: test validations
    }

    /**
     * Publish entitlements on an entity
     *
     * Since 2.0.0
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishEntitlementsTest() throws ApiException {
        String tmPSCorrelationId = null;
        Entitlement entitlement = null;
        IngestionResult response = api.publishEntitlements(tmPSCorrelationId, entitlement);
        // TODO: test validations
    }

    /**
     * Publish an event
     *
     * Since 1.0.0
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishEventTest() throws ApiException {
        String tmPSCorrelationId = null;
        Event event = null;
        IngestionResult response = api.publishEvent(tmPSCorrelationId, event);
        // TODO: test validations
    }

    /**
     * Publish a video on an event
     *
     * Since 1.0.0
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishEventVideosTest() throws ApiException {
        String id = null;
        String tmPSCorrelationId = null;
        Video video = null;
        IngestionResult response = api.publishEventVideos(id, tmPSCorrelationId, video);
        // TODO: test validations
    }

    /**
     * Publish extension on an entity
     *
     * Since 1.0.0
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishExtensionTest() throws ApiException {
        String tmPSCorrelationId = null;
        ExtensionData extensionData = null;
        IngestionResult response = api.publishExtension(tmPSCorrelationId, extensionData);
        // TODO: test validations
    }

    /**
     * Publish a venue
     *
     * Since 1.0.0
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishVenueTest() throws ApiException {
        String tmPSCorrelationId = null;
        Venue venue = null;
        IngestionResult response = api.publishVenue(tmPSCorrelationId, venue);
        // TODO: test validations
    }

}
