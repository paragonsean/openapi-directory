/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Locale model module.
 * @module model/Locale
 * @version v2
 */
class Locale {
    /**
     * Constructs a new <code>Locale</code>.
     * @alias module:model/Locale
     */
    constructor() { 
        
        Locale.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Locale</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Locale} obj Optional instance to populate.
     * @return {module:model/Locale} The populated <code>Locale</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Locale();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('displayCountry')) {
                obj['displayCountry'] = ApiClient.convertToType(data['displayCountry'], 'String');
            }
            if (data.hasOwnProperty('displayLanguage')) {
                obj['displayLanguage'] = ApiClient.convertToType(data['displayLanguage'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('displayScript')) {
                obj['displayScript'] = ApiClient.convertToType(data['displayScript'], 'String');
            }
            if (data.hasOwnProperty('displayVariant')) {
                obj['displayVariant'] = ApiClient.convertToType(data['displayVariant'], 'String');
            }
            if (data.hasOwnProperty('extensionKeys')) {
                obj['extensionKeys'] = ApiClient.convertToType(data['extensionKeys'], ['String']);
            }
            if (data.hasOwnProperty('iso3Country')) {
                obj['iso3Country'] = ApiClient.convertToType(data['iso3Country'], 'String');
            }
            if (data.hasOwnProperty('iso3Language')) {
                obj['iso3Language'] = ApiClient.convertToType(data['iso3Language'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('script')) {
                obj['script'] = ApiClient.convertToType(data['script'], 'String');
            }
            if (data.hasOwnProperty('unicodeLocaleAttributes')) {
                obj['unicodeLocaleAttributes'] = ApiClient.convertToType(data['unicodeLocaleAttributes'], ['String']);
            }
            if (data.hasOwnProperty('unicodeLocaleKeys')) {
                obj['unicodeLocaleKeys'] = ApiClient.convertToType(data['unicodeLocaleKeys'], ['String']);
            }
            if (data.hasOwnProperty('variant')) {
                obj['variant'] = ApiClient.convertToType(data['variant'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Locale</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Locale</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['displayCountry'] && !(typeof data['displayCountry'] === 'string' || data['displayCountry'] instanceof String)) {
            throw new Error("Expected the field `displayCountry` to be a primitive type in the JSON string but got " + data['displayCountry']);
        }
        // ensure the json data is a string
        if (data['displayLanguage'] && !(typeof data['displayLanguage'] === 'string' || data['displayLanguage'] instanceof String)) {
            throw new Error("Expected the field `displayLanguage` to be a primitive type in the JSON string but got " + data['displayLanguage']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['displayScript'] && !(typeof data['displayScript'] === 'string' || data['displayScript'] instanceof String)) {
            throw new Error("Expected the field `displayScript` to be a primitive type in the JSON string but got " + data['displayScript']);
        }
        // ensure the json data is a string
        if (data['displayVariant'] && !(typeof data['displayVariant'] === 'string' || data['displayVariant'] instanceof String)) {
            throw new Error("Expected the field `displayVariant` to be a primitive type in the JSON string but got " + data['displayVariant']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['extensionKeys'])) {
            throw new Error("Expected the field `extensionKeys` to be an array in the JSON data but got " + data['extensionKeys']);
        }
        // ensure the json data is a string
        if (data['iso3Country'] && !(typeof data['iso3Country'] === 'string' || data['iso3Country'] instanceof String)) {
            throw new Error("Expected the field `iso3Country` to be a primitive type in the JSON string but got " + data['iso3Country']);
        }
        // ensure the json data is a string
        if (data['iso3Language'] && !(typeof data['iso3Language'] === 'string' || data['iso3Language'] instanceof String)) {
            throw new Error("Expected the field `iso3Language` to be a primitive type in the JSON string but got " + data['iso3Language']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['script'] && !(typeof data['script'] === 'string' || data['script'] instanceof String)) {
            throw new Error("Expected the field `script` to be a primitive type in the JSON string but got " + data['script']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['unicodeLocaleAttributes'])) {
            throw new Error("Expected the field `unicodeLocaleAttributes` to be an array in the JSON data but got " + data['unicodeLocaleAttributes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['unicodeLocaleKeys'])) {
            throw new Error("Expected the field `unicodeLocaleKeys` to be an array in the JSON data but got " + data['unicodeLocaleKeys']);
        }
        // ensure the json data is a string
        if (data['variant'] && !(typeof data['variant'] === 'string' || data['variant'] instanceof String)) {
            throw new Error("Expected the field `variant` to be a primitive type in the JSON string but got " + data['variant']);
        }

        return true;
    }


}



/**
 * @member {String} country
 */
Locale.prototype['country'] = undefined;

/**
 * @member {String} displayCountry
 */
Locale.prototype['displayCountry'] = undefined;

/**
 * @member {String} displayLanguage
 */
Locale.prototype['displayLanguage'] = undefined;

/**
 * @member {String} displayName
 */
Locale.prototype['displayName'] = undefined;

/**
 * @member {String} displayScript
 */
Locale.prototype['displayScript'] = undefined;

/**
 * @member {String} displayVariant
 */
Locale.prototype['displayVariant'] = undefined;

/**
 * @member {Array.<String>} extensionKeys
 */
Locale.prototype['extensionKeys'] = undefined;

/**
 * @member {String} iso3Country
 */
Locale.prototype['iso3Country'] = undefined;

/**
 * @member {String} iso3Language
 */
Locale.prototype['iso3Language'] = undefined;

/**
 * @member {String} language
 */
Locale.prototype['language'] = undefined;

/**
 * @member {String} script
 */
Locale.prototype['script'] = undefined;

/**
 * @member {Array.<String>} unicodeLocaleAttributes
 */
Locale.prototype['unicodeLocaleAttributes'] = undefined;

/**
 * @member {Array.<String>} unicodeLocaleKeys
 */
Locale.prototype['unicodeLocaleKeys'] = undefined;

/**
 * @member {String} variant
 */
Locale.prototype['variant'] = undefined;






export default Locale;

