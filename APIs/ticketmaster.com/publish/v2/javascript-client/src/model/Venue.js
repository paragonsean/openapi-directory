/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import City from './City';
import Country from './Country';
import Dma from './Dma';
import Image from './Image';
import Location from './Location';
import Market from './Market';
import Social from './Social';
import Source from './Source';
import State from './State';
import VenueBoxOfficeInfo from './VenueBoxOfficeInfo';
import VenueGeneralInfo from './VenueGeneralInfo';

/**
 * The Venue model module.
 * @module model/Venue
 * @version v2
 */
class Venue {
    /**
     * Constructs a new <code>Venue</code>.
     * Venue
     * @alias module:model/Venue
     * @param type {module:model/Venue.TypeEnum} Type of the entity
     */
    constructor(type) { 
        
        Venue.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['active'] = false;
        obj['discoverable'] = false;
        obj['test'] = false;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Venue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Venue} obj Optional instance to populate.
     * @return {module:model/Venue} The populated <code>Venue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Venue();

            if (data.hasOwnProperty('accessibleSeatingDetails')) {
                obj['accessibleSeatingDetails'] = ApiClient.convertToType(data['accessibleSeatingDetails'], {'String': 'String'});
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('additionalInfos')) {
                obj['additionalInfos'] = ApiClient.convertToType(data['additionalInfos'], {'String': 'String'});
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('boxOfficeInfo')) {
                obj['boxOfficeInfo'] = VenueBoxOfficeInfo.constructFromObject(data['boxOfficeInfo']);
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = City.constructFromObject(data['city']);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = Country.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('descriptions')) {
                obj['descriptions'] = ApiClient.convertToType(data['descriptions'], {'String': 'String'});
            }
            if (data.hasOwnProperty('discoverable')) {
                obj['discoverable'] = ApiClient.convertToType(data['discoverable'], 'Boolean');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('dma')) {
                obj['dma'] = ApiClient.convertToType(data['dma'], [Dma]);
            }
            if (data.hasOwnProperty('generalInfo')) {
                obj['generalInfo'] = VenueGeneralInfo.constructFromObject(data['generalInfo']);
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [Image]);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('markets')) {
                obj['markets'] = ApiClient.convertToType(data['markets'], [Market]);
            }
            if (data.hasOwnProperty('names')) {
                obj['names'] = ApiClient.convertToType(data['names'], {'String': 'String'});
            }
            if (data.hasOwnProperty('parkingDetails')) {
                obj['parkingDetails'] = ApiClient.convertToType(data['parkingDetails'], {'String': 'String'});
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('references')) {
                obj['references'] = ApiClient.convertToType(data['references'], {'String': 'String'});
            }
            if (data.hasOwnProperty('relationships')) {
                obj['relationships'] = ApiClient.convertToType(data['relationships'], [Object]);
            }
            if (data.hasOwnProperty('social')) {
                obj['social'] = Social.constructFromObject(data['social']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = Source.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = State.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('test')) {
                obj['test'] = ApiClient.convertToType(data['test'], 'Boolean');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('units')) {
                obj['units'] = ApiClient.convertToType(data['units'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Venue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Venue</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Venue.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        // validate the optional field `boxOfficeInfo`
        if (data['boxOfficeInfo']) { // data not null
          VenueBoxOfficeInfo.validateJSON(data['boxOfficeInfo']);
        }
        // validate the optional field `city`
        if (data['city']) { // data not null
          City.validateJSON(data['city']);
        }
        // validate the optional field `country`
        if (data['country']) { // data not null
          Country.validateJSON(data['country']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        if (data['dma']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dma'])) {
                throw new Error("Expected the field `dma` to be an array in the JSON data but got " + data['dma']);
            }
            // validate the optional field `dma` (array)
            for (const item of data['dma']) {
                Dma.validateJSON(item);
            };
        }
        // validate the optional field `generalInfo`
        if (data['generalInfo']) { // data not null
          VenueGeneralInfo.validateJSON(data['generalInfo']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                Image.validateJSON(item);
            };
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        if (data['markets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['markets'])) {
                throw new Error("Expected the field `markets` to be an array in the JSON data but got " + data['markets']);
            }
            // validate the optional field `markets` (array)
            for (const item of data['markets']) {
                Market.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['relationships'])) {
            throw new Error("Expected the field `relationships` to be an array in the JSON data but got " + data['relationships']);
        }
        // validate the optional field `social`
        if (data['social']) { // data not null
          Social.validateJSON(data['social']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          Source.validateJSON(data['source']);
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          State.validateJSON(data['state']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['units'] && !(typeof data['units'] === 'string' || data['units'] instanceof String)) {
            throw new Error("Expected the field `units` to be a primitive type in the JSON string but got " + data['units']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Venue.RequiredProperties = ["type"];

/**
 * Venue accessible seating details - multi-lingual fields
 * @member {Object.<String, String>} accessibleSeatingDetails
 */
Venue.prototype['accessibleSeatingDetails'] = undefined;

/**
 * Indicate if the entity is active, inactive entity won't appear in Discovery API
 * @member {Boolean} active
 * @default false
 */
Venue.prototype['active'] = false;

/**
 * Additional informations of the entity - multi-lingual fields
 * @member {Object.<String, String>} additionalInfos
 */
Venue.prototype['additionalInfos'] = undefined;

/**
 * @member {module:model/Address} address
 */
Venue.prototype['address'] = undefined;

/**
 * @member {module:model/VenueBoxOfficeInfo} boxOfficeInfo
 */
Venue.prototype['boxOfficeInfo'] = undefined;

/**
 * @member {module:model/City} city
 */
Venue.prototype['city'] = undefined;

/**
 * @member {module:model/Country} country
 */
Venue.prototype['country'] = undefined;

/**
 * Default currency of ticket prices for events in this venue
 * @member {String} currency
 */
Venue.prototype['currency'] = undefined;

/**
 * Descriptions of the entity - multi-lingual fields
 * @member {Object.<String, String>} descriptions
 */
Venue.prototype['descriptions'] = undefined;

/**
 * True if the entity is dicoverable in discovery API
 * @member {Boolean} discoverable
 * @default false
 */
Venue.prototype['discoverable'] = false;

/**
 * @member {Number} distance
 */
Venue.prototype['distance'] = undefined;

/**
 * The list of associated DMAs (Designated Market Areas) of the venue
 * @member {Array.<module:model/Dma>} dma
 */
Venue.prototype['dma'] = undefined;

/**
 * @member {module:model/VenueGeneralInfo} generalInfo
 */
Venue.prototype['generalInfo'] = undefined;

/**
 * Images of the entity
 * @member {Array.<module:model/Image>} images
 */
Venue.prototype['images'] = undefined;

/**
 * @member {module:model/Location} location
 */
Venue.prototype['location'] = undefined;

/**
 * Markets of the venue
 * @member {Array.<module:model/Market>} markets
 */
Venue.prototype['markets'] = undefined;

/**
 * Names of the entity - multi-lingual fields
 * @member {Object.<String, String>} names
 */
Venue.prototype['names'] = undefined;

/**
 * Venue parking info - multi-lingual fields
 * @member {Object.<String, String>} parkingDetails
 */
Venue.prototype['parkingDetails'] = undefined;

/**
 * Postal code / zipcode of the venue
 * @member {String} postalCode
 */
Venue.prototype['postalCode'] = undefined;

/**
 * References of this entity in an other system. Reference is the exact same entity
 * @member {Object.<String, String>} references
 */
Venue.prototype['references'] = undefined;

/**
 * Relationships on the entity, like if the entity is a duplicate of another one
 * @member {Array.<Object>} relationships
 */
Venue.prototype['relationships'] = undefined;

/**
 * @member {module:model/Social} social
 */
Venue.prototype['social'] = undefined;

/**
 * @member {module:model/Source} source
 */
Venue.prototype['source'] = undefined;

/**
 * @member {module:model/State} state
 */
Venue.prototype['state'] = undefined;

/**
 * Indicate if this is a test entity, by default test entities won't appear in discovery API
 * @member {Boolean} test
 * @default false
 */
Venue.prototype['test'] = false;

/**
 * Timezone of the venue
 * @member {String} timezone
 */
Venue.prototype['timezone'] = undefined;

/**
 * Type of the entity
 * @member {module:model/Venue.TypeEnum} type
 */
Venue.prototype['type'] = undefined;

/**
 * @member {String} units
 */
Venue.prototype['units'] = undefined;

/**
 * URL of a web site detail page of the entity
 * @member {String} url
 */
Venue.prototype['url'] = undefined;

/**
 * Version of the entity. Version is to avoid updated an entity with an older version
 * @member {Number} version
 */
Venue.prototype['version'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Venue['TypeEnum'] = {

    /**
     * value: "event"
     * @const
     */
    "event": "event",

    /**
     * value: "venue"
     * @const
     */
    "venue": "venue",

    /**
     * value: "attraction"
     * @const
     */
    "attraction": "attraction"
};



export default Venue;

