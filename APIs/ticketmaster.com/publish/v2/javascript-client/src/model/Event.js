/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attraction from './Attraction';
import Classification from './Classification';
import EventDates from './EventDates';
import EventSalesDates from './EventSalesDates';
import Image from './Image';
import Location from './Location';
import Place from './Place';
import PriceRange from './PriceRange';
import Promoter from './Promoter';
import PublicVisibility from './PublicVisibility';
import Source from './Source';
import Venue from './Venue';

/**
 * The Event model module.
 * @module model/Event
 * @version v2
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * Event
     * @alias module:model/Event
     * @param type {module:model/Event.TypeEnum} Type of the entity
     */
    constructor(type) { 
        
        Event.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['active'] = false;
        obj['discoverable'] = false;
        obj['test'] = false;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('additionalInfos')) {
                obj['additionalInfos'] = ApiClient.convertToType(data['additionalInfos'], {'String': 'String'});
            }
            if (data.hasOwnProperty('attractions')) {
                obj['attractions'] = ApiClient.convertToType(data['attractions'], [Attraction]);
            }
            if (data.hasOwnProperty('classifications')) {
                obj['classifications'] = ApiClient.convertToType(data['classifications'], [Classification]);
            }
            if (data.hasOwnProperty('dates')) {
                obj['dates'] = EventDates.constructFromObject(data['dates']);
            }
            if (data.hasOwnProperty('descriptions')) {
                obj['descriptions'] = ApiClient.convertToType(data['descriptions'], {'String': 'String'});
            }
            if (data.hasOwnProperty('discoverable')) {
                obj['discoverable'] = ApiClient.convertToType(data['discoverable'], 'Boolean');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [Image]);
            }
            if (data.hasOwnProperty('infos')) {
                obj['infos'] = ApiClient.convertToType(data['infos'], {'String': 'String'});
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('names')) {
                obj['names'] = ApiClient.convertToType(data['names'], {'String': 'String'});
            }
            if (data.hasOwnProperty('place')) {
                obj['place'] = Place.constructFromObject(data['place']);
            }
            if (data.hasOwnProperty('pleaseNotes')) {
                obj['pleaseNotes'] = ApiClient.convertToType(data['pleaseNotes'], {'String': 'String'});
            }
            if (data.hasOwnProperty('priceRanges')) {
                obj['priceRanges'] = ApiClient.convertToType(data['priceRanges'], [PriceRange]);
            }
            if (data.hasOwnProperty('promoter')) {
                obj['promoter'] = Promoter.constructFromObject(data['promoter']);
            }
            if (data.hasOwnProperty('publicVisibility')) {
                obj['publicVisibility'] = PublicVisibility.constructFromObject(data['publicVisibility']);
            }
            if (data.hasOwnProperty('references')) {
                obj['references'] = ApiClient.convertToType(data['references'], {'String': 'String'});
            }
            if (data.hasOwnProperty('relationships')) {
                obj['relationships'] = ApiClient.convertToType(data['relationships'], [Object]);
            }
            if (data.hasOwnProperty('sales')) {
                obj['sales'] = EventSalesDates.constructFromObject(data['sales']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = Source.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('test')) {
                obj['test'] = ApiClient.convertToType(data['test'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('units')) {
                obj['units'] = ApiClient.convertToType(data['units'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('venue')) {
                obj['venue'] = Venue.constructFromObject(data['venue']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Event</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Event</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Event.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['attractions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attractions'])) {
                throw new Error("Expected the field `attractions` to be an array in the JSON data but got " + data['attractions']);
            }
            // validate the optional field `attractions` (array)
            for (const item of data['attractions']) {
                Attraction.validateJSON(item);
            };
        }
        if (data['classifications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['classifications'])) {
                throw new Error("Expected the field `classifications` to be an array in the JSON data but got " + data['classifications']);
            }
            // validate the optional field `classifications` (array)
            for (const item of data['classifications']) {
                Classification.validateJSON(item);
            };
        }
        // validate the optional field `dates`
        if (data['dates']) { // data not null
          EventDates.validateJSON(data['dates']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                Image.validateJSON(item);
            };
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // validate the optional field `place`
        if (data['place']) { // data not null
          Place.validateJSON(data['place']);
        }
        if (data['priceRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['priceRanges'])) {
                throw new Error("Expected the field `priceRanges` to be an array in the JSON data but got " + data['priceRanges']);
            }
            // validate the optional field `priceRanges` (array)
            for (const item of data['priceRanges']) {
                PriceRange.validateJSON(item);
            };
        }
        // validate the optional field `promoter`
        if (data['promoter']) { // data not null
          Promoter.validateJSON(data['promoter']);
        }
        // validate the optional field `publicVisibility`
        if (data['publicVisibility']) { // data not null
          PublicVisibility.validateJSON(data['publicVisibility']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['relationships'])) {
            throw new Error("Expected the field `relationships` to be an array in the JSON data but got " + data['relationships']);
        }
        // validate the optional field `sales`
        if (data['sales']) { // data not null
          EventSalesDates.validateJSON(data['sales']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          Source.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['units'] && !(typeof data['units'] === 'string' || data['units'] instanceof String)) {
            throw new Error("Expected the field `units` to be a primitive type in the JSON string but got " + data['units']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `venue`
        if (data['venue']) { // data not null
          Venue.validateJSON(data['venue']);
        }

        return true;
    }


}

Event.RequiredProperties = ["type"];

/**
 * Indicate if the entity is active, inactive entity won't appear in Discovery API
 * @member {Boolean} active
 * @default false
 */
Event.prototype['active'] = false;

/**
 * Additional informations of the entity - multi-lingual fields
 * @member {Object.<String, String>} additionalInfos
 */
Event.prototype['additionalInfos'] = undefined;

/**
 * Ordered Attraction related to the event
 * @member {Array.<module:model/Attraction>} attractions
 */
Event.prototype['attractions'] = undefined;

/**
 * Event's classifications
 * @member {Array.<module:model/Classification>} classifications
 */
Event.prototype['classifications'] = undefined;

/**
 * @member {module:model/EventDates} dates
 */
Event.prototype['dates'] = undefined;

/**
 * Descriptions of the entity - multi-lingual fields
 * @member {Object.<String, String>} descriptions
 */
Event.prototype['descriptions'] = undefined;

/**
 * True if the entity is dicoverable in discovery API
 * @member {Boolean} discoverable
 * @default false
 */
Event.prototype['discoverable'] = false;

/**
 * @member {Number} distance
 */
Event.prototype['distance'] = undefined;

/**
 * Images of the entity
 * @member {Array.<module:model/Image>} images
 */
Event.prototype['images'] = undefined;

/**
 * Any information related to the event - multi-lingual fields
 * @member {Object.<String, String>} infos
 */
Event.prototype['infos'] = undefined;

/**
 * @member {module:model/Location} location
 */
Event.prototype['location'] = undefined;

/**
 * Names of the entity - multi-lingual fields
 * @member {Object.<String, String>} names
 */
Event.prototype['names'] = undefined;

/**
 * @member {module:model/Place} place
 */
Event.prototype['place'] = undefined;

/**
 * Any notes related to the event - multi-lingual fields
 * @member {Object.<String, String>} pleaseNotes
 */
Event.prototype['pleaseNotes'] = undefined;

/**
 * Price ranges of this event
 * @member {Array.<module:model/PriceRange>} priceRanges
 */
Event.prototype['priceRanges'] = undefined;

/**
 * @member {module:model/Promoter} promoter
 */
Event.prototype['promoter'] = undefined;

/**
 * @member {module:model/PublicVisibility} publicVisibility
 */
Event.prototype['publicVisibility'] = undefined;

/**
 * References of this entity in an other system. Reference is the exact same entity
 * @member {Object.<String, String>} references
 */
Event.prototype['references'] = undefined;

/**
 * Relationships on the entity, like if the entity is a duplicate of another one
 * @member {Array.<Object>} relationships
 */
Event.prototype['relationships'] = undefined;

/**
 * @member {module:model/EventSalesDates} sales
 */
Event.prototype['sales'] = undefined;

/**
 * @member {module:model/Source} source
 */
Event.prototype['source'] = undefined;

/**
 * Indicate if this is a test entity, by default test entities won't appear in discovery API
 * @member {Boolean} test
 * @default false
 */
Event.prototype['test'] = false;

/**
 * Type of the entity
 * @member {module:model/Event.TypeEnum} type
 */
Event.prototype['type'] = undefined;

/**
 * @member {String} units
 */
Event.prototype['units'] = undefined;

/**
 * URL of a web site detail page of the entity
 * @member {String} url
 */
Event.prototype['url'] = undefined;

/**
 * @member {module:model/Venue} venue
 */
Event.prototype['venue'] = undefined;

/**
 * Version of the entity. Version is to avoid updated an entity with an older version
 * @member {Number} version
 */
Event.prototype['version'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Event['TypeEnum'] = {

    /**
     * value: "event"
     * @const
     */
    "event": "event",

    /**
     * value: "venue"
     * @const
     */
    "venue": "venue",

    /**
     * value: "attraction"
     * @const
     */
    "attraction": "attraction"
};



export default Event;

