/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Area from './Area';
import City from './City';
import Country from './Country';
import Location from './Location';
import State from './State';

/**
 * The Place model module.
 * @module model/Place
 * @version v2
 */
class Place {
    /**
     * Constructs a new <code>Place</code>.
     * Place
     * @alias module:model/Place
     */
    constructor() { 
        
        Place.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Place</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Place} obj Optional instance to populate.
     * @return {module:model/Place} The populated <code>Place</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Place();

            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('area')) {
                obj['area'] = Area.constructFromObject(data['area']);
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = City.constructFromObject(data['city']);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = Country.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('names')) {
                obj['names'] = ApiClient.convertToType(data['names'], {'String': 'String'});
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = State.constructFromObject(data['state']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Place</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Place</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        // validate the optional field `area`
        if (data['area']) { // data not null
          Area.validateJSON(data['area']);
        }
        // validate the optional field `city`
        if (data['city']) { // data not null
          City.validateJSON(data['city']);
        }
        // validate the optional field `country`
        if (data['country']) { // data not null
          Country.validateJSON(data['country']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          State.validateJSON(data['state']);
        }

        return true;
    }


}



/**
 * @member {module:model/Address} address
 */
Place.prototype['address'] = undefined;

/**
 * @member {module:model/Area} area
 */
Place.prototype['area'] = undefined;

/**
 * @member {module:model/City} city
 */
Place.prototype['city'] = undefined;

/**
 * @member {module:model/Country} country
 */
Place.prototype['country'] = undefined;

/**
 * @member {module:model/Location} location
 */
Place.prototype['location'] = undefined;

/**
 * Names of the entity - multi-lingual fields
 * @member {Object.<String, String>} names
 */
Place.prototype['names'] = undefined;

/**
 * Postal code / zipcode of the place
 * @member {String} postalCode
 */
Place.prototype['postalCode'] = undefined;

/**
 * @member {module:model/State} state
 */
Place.prototype['state'] = undefined;






export default Place;

