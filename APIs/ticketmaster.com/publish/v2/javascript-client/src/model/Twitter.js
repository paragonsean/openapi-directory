/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Twitter model module.
 * @module model/Twitter
 * @version v2
 */
class Twitter {
    /**
     * Constructs a new <code>Twitter</code>.
     * Twitter data
     * @alias module:model/Twitter
     */
    constructor() { 
        
        Twitter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Twitter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Twitter} obj Optional instance to populate.
     * @return {module:model/Twitter} The populated <code>Twitter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Twitter();

            if (data.hasOwnProperty('handle')) {
                obj['handle'] = ApiClient.convertToType(data['handle'], 'String');
            }
            if (data.hasOwnProperty('hashtags')) {
                obj['hashtags'] = ApiClient.convertToType(data['hashtags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Twitter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Twitter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['handle'] && !(typeof data['handle'] === 'string' || data['handle'] instanceof String)) {
            throw new Error("Expected the field `handle` to be a primitive type in the JSON string but got " + data['handle']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['hashtags'])) {
            throw new Error("Expected the field `hashtags` to be an array in the JSON data but got " + data['hashtags']);
        }

        return true;
    }


}



/**
 * Twitter handle
 * @member {module:model/Twitter.HandleEnum} handle
 */
Twitter.prototype['handle'] = undefined;

/**
 * Twitter hashtags
 * @member {Array.<String>} hashtags
 */
Twitter.prototype['hashtags'] = undefined;





/**
 * Allowed values for the <code>handle</code> property.
 * @enum {String}
 * @readonly
 */
Twitter['HandleEnum'] = {

    /**
     * value: "@a Twitter handle"
     * @const
     */
    "@a Twitter handle": "@a Twitter handle"
};



export default Twitter;

