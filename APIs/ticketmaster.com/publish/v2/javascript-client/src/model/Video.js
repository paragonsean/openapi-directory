/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LicensingInformation from './LicensingInformation';
import Source from './Source';

/**
 * The Video model module.
 * @module model/Video
 * @version v2
 */
class Video {
    /**
     * Constructs a new <code>Video</code>.
     * This class defines an entitlement data on the Publish API
     * @alias module:model/Video
     * @param licensingInformation {module:model/LicensingInformation} 
     * @param source {module:model/Source} 
     * @param url {String} The url of the video
     */
    constructor(licensingInformation, source, url) { 
        
        Video.initialize(this, licensingInformation, source, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, licensingInformation, source, url) { 
        obj['licensingInformation'] = licensingInformation;
        obj['source'] = source;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Video</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Video} obj Optional instance to populate.
     * @return {module:model/Video} The populated <code>Video</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Video();

            if (data.hasOwnProperty('embedUrl')) {
                obj['embedUrl'] = ApiClient.convertToType(data['embedUrl'], 'String');
            }
            if (data.hasOwnProperty('licensingInformation')) {
                obj['licensingInformation'] = LicensingInformation.constructFromObject(data['licensingInformation']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = Source.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Video</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Video</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Video.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['embedUrl'] && !(typeof data['embedUrl'] === 'string' || data['embedUrl'] instanceof String)) {
            throw new Error("Expected the field `embedUrl` to be a primitive type in the JSON string but got " + data['embedUrl']);
        }
        // validate the optional field `licensingInformation`
        if (data['licensingInformation']) { // data not null
          LicensingInformation.validateJSON(data['licensingInformation']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          Source.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Video.RequiredProperties = ["licensingInformation", "source", "url"];

/**
 * The url of the embeded video
 * @member {String} embedUrl
 */
Video.prototype['embedUrl'] = undefined;

/**
 * @member {module:model/LicensingInformation} licensingInformation
 */
Video.prototype['licensingInformation'] = undefined;

/**
 * @member {module:model/Source} source
 */
Video.prototype['source'] = undefined;

/**
 * The url of the video
 * @member {String} url
 */
Video.prototype['url'] = undefined;






export default Video;

