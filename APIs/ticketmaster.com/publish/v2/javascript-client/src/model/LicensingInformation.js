/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RegionRestrictions from './RegionRestrictions';

/**
 * The LicensingInformation model module.
 * @module model/LicensingInformation
 * @version v2
 */
class LicensingInformation {
    /**
     * Constructs a new <code>LicensingInformation</code>.
     * This class defines an entitlement data on the Publish API
     * @alias module:model/LicensingInformation
     * @param license {String} License name
     */
    constructor(license) { 
        
        LicensingInformation.initialize(this, license);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, license) { 
        obj['license'] = license;
    }

    /**
     * Constructs a <code>LicensingInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LicensingInformation} obj Optional instance to populate.
     * @return {module:model/LicensingInformation} The populated <code>LicensingInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LicensingInformation();

            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('regionRestriction')) {
                obj['regionRestriction'] = RegionRestrictions.constructFromObject(data['regionRestriction']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LicensingInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LicensingInformation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LicensingInformation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // validate the optional field `regionRestriction`
        if (data['regionRestriction']) { // data not null
          RegionRestrictions.validateJSON(data['regionRestriction']);
        }

        return true;
    }


}

LicensingInformation.RequiredProperties = ["license"];

/**
 * License name
 * @member {String} license
 */
LicensingInformation.prototype['license'] = undefined;

/**
 * @member {module:model/RegionRestrictions} regionRestriction
 */
LicensingInformation.prototype['regionRestriction'] = undefined;






export default LicensingInformation;

