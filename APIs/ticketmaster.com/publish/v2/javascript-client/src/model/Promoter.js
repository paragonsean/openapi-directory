/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Promoter model module.
 * @module model/Promoter
 * @version v2
 */
class Promoter {
    /**
     * Constructs a new <code>Promoter</code>.
     * Promoter
     * @alias module:model/Promoter
     */
    constructor() { 
        
        Promoter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Promoter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Promoter} obj Optional instance to populate.
     * @return {module:model/Promoter} The populated <code>Promoter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Promoter();

            if (data.hasOwnProperty('descriptions')) {
                obj['descriptions'] = ApiClient.convertToType(data['descriptions'], {'String': 'String'});
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('names')) {
                obj['names'] = ApiClient.convertToType(data['names'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Promoter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Promoter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}



/**
 * Description of the promoter - multi-lingual fields
 * @member {Object.<String, String>} descriptions
 */
Promoter.prototype['descriptions'] = undefined;

/**
 * Id of the promoter
 * @member {String} id
 */
Promoter.prototype['id'] = undefined;

/**
 * Name of the promoter - multi-lingual fields
 * @member {Object.<String, String>} names
 */
Promoter.prototype['names'] = undefined;






export default Promoter;

