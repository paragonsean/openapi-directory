/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccessDates from './AccessDates';
import EndDates from './EndDates';
import EventStatus from './EventStatus';
import StartDates from './StartDates';

/**
 * The EventDates model module.
 * @module model/EventDates
 * @version v2
 */
class EventDates {
    /**
     * Constructs a new <code>EventDates</code>.
     * Event&#39;s Dates
     * @alias module:model/EventDates
     */
    constructor() { 
        
        EventDates.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventDates</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventDates} obj Optional instance to populate.
     * @return {module:model/EventDates} The populated <code>EventDates</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventDates();

            if (data.hasOwnProperty('access')) {
                obj['access'] = AccessDates.constructFromObject(data['access']);
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = EndDates.constructFromObject(data['end']);
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = StartDates.constructFromObject(data['start']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = EventStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventDates</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventDates</code>.
     */
    static validateJSON(data) {
        // validate the optional field `access`
        if (data['access']) { // data not null
          AccessDates.validateJSON(data['access']);
        }
        // validate the optional field `end`
        if (data['end']) { // data not null
          EndDates.validateJSON(data['end']);
        }
        // validate the optional field `start`
        if (data['start']) { // data not null
          StartDates.validateJSON(data['start']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          EventStatus.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }

        return true;
    }


}



/**
 * @member {module:model/AccessDates} access
 */
EventDates.prototype['access'] = undefined;

/**
 * @member {module:model/EndDates} end
 */
EventDates.prototype['end'] = undefined;

/**
 * @member {module:model/StartDates} start
 */
EventDates.prototype['start'] = undefined;

/**
 * @member {module:model/EventStatus} status
 */
EventDates.prototype['status'] = undefined;

/**
 * Event's timezone
 * @member {String} timezone
 */
EventDates.prototype['timezone'] = undefined;






export default EventDates;

