/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Geometry from './Geometry';

/**
 * The GeocodeExtension model module.
 * @module model/GeocodeExtension
 * @version v2
 */
class GeocodeExtension {
    /**
     * Constructs a new <code>GeocodeExtension</code>.
     * @alias module:model/GeocodeExtension
     */
    constructor() { 
        
        GeocodeExtension.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GeocodeExtension</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeocodeExtension} obj Optional instance to populate.
     * @return {module:model/GeocodeExtension} The populated <code>GeocodeExtension</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeocodeExtension();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('county')) {
                obj['county'] = ApiClient.convertToType(data['county'], 'String');
            }
            if (data.hasOwnProperty('formattedAddress')) {
                obj['formattedAddress'] = ApiClient.convertToType(data['formattedAddress'], 'String');
            }
            if (data.hasOwnProperty('geometry')) {
                obj['geometry'] = Geometry.constructFromObject(data['geometry']);
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('route')) {
                obj['route'] = ApiClient.convertToType(data['route'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('streetNumber')) {
                obj['streetNumber'] = ApiClient.convertToType(data['streetNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeocodeExtension</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeocodeExtension</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['county'] && !(typeof data['county'] === 'string' || data['county'] instanceof String)) {
            throw new Error("Expected the field `county` to be a primitive type in the JSON string but got " + data['county']);
        }
        // ensure the json data is a string
        if (data['formattedAddress'] && !(typeof data['formattedAddress'] === 'string' || data['formattedAddress'] instanceof String)) {
            throw new Error("Expected the field `formattedAddress` to be a primitive type in the JSON string but got " + data['formattedAddress']);
        }
        // validate the optional field `geometry`
        if (data['geometry']) { // data not null
          Geometry.validateJSON(data['geometry']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['route'] && !(typeof data['route'] === 'string' || data['route'] instanceof String)) {
            throw new Error("Expected the field `route` to be a primitive type in the JSON string but got " + data['route']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['streetNumber'] && !(typeof data['streetNumber'] === 'string' || data['streetNumber'] instanceof String)) {
            throw new Error("Expected the field `streetNumber` to be a primitive type in the JSON string but got " + data['streetNumber']);
        }

        return true;
    }


}



/**
 * @member {String} city
 */
GeocodeExtension.prototype['city'] = undefined;

/**
 * @member {String} country
 */
GeocodeExtension.prototype['country'] = undefined;

/**
 * @member {String} county
 */
GeocodeExtension.prototype['county'] = undefined;

/**
 * @member {String} formattedAddress
 */
GeocodeExtension.prototype['formattedAddress'] = undefined;

/**
 * @member {module:model/Geometry} geometry
 */
GeocodeExtension.prototype['geometry'] = undefined;

/**
 * @member {String} postalCode
 */
GeocodeExtension.prototype['postalCode'] = undefined;

/**
 * @member {String} route
 */
GeocodeExtension.prototype['route'] = undefined;

/**
 * @member {String} state
 */
GeocodeExtension.prototype['state'] = undefined;

/**
 * @member {String} streetNumber
 */
GeocodeExtension.prototype['streetNumber'] = undefined;






export default GeocodeExtension;

