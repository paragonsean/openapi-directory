/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Image model module.
 * @module model/Image
 * @version v2
 */
class Image {
    /**
     * Constructs a new <code>Image</code>.
     * Image
     * @alias module:model/Image
     */
    constructor() { 
        
        Image.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['fallback'] = false;
    }

    /**
     * Constructs a <code>Image</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Image} obj Optional instance to populate.
     * @return {module:model/Image} The populated <code>Image</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Image();

            if (data.hasOwnProperty('attribution')) {
                obj['attribution'] = ApiClient.convertToType(data['attribution'], 'String');
            }
            if (data.hasOwnProperty('domains')) {
                obj['domains'] = ApiClient.convertToType(data['domains'], ['String']);
            }
            if (data.hasOwnProperty('fallback')) {
                obj['fallback'] = ApiClient.convertToType(data['fallback'], 'Boolean');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('ratio')) {
                obj['ratio'] = ApiClient.convertToType(data['ratio'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Image</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Image</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attribution'] && !(typeof data['attribution'] === 'string' || data['attribution'] instanceof String)) {
            throw new Error("Expected the field `attribution` to be a primitive type in the JSON string but got " + data['attribution']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['domains'])) {
            throw new Error("Expected the field `domains` to be an array in the JSON data but got " + data['domains']);
        }
        // ensure the json data is a string
        if (data['ratio'] && !(typeof data['ratio'] === 'string' || data['ratio'] instanceof String)) {
            throw new Error("Expected the field `ratio` to be a primitive type in the JSON string but got " + data['ratio']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * Attribution of the image
 * @member {String} attribution
 */
Image.prototype['attribution'] = undefined;

/**
 * Domains on which this image should be displayed
 * @member {Array.<String>} domains
 */
Image.prototype['domains'] = undefined;

/**
 * true if the image is not the event's image but a fallbak image
 * @member {Boolean} fallback
 * @default false
 */
Image.prototype['fallback'] = false;

/**
 * Height of the image
 * @member {Number} height
 */
Image.prototype['height'] = undefined;

/**
 * Aspect ratio of the image
 * @member {module:model/Image.RatioEnum} ratio
 */
Image.prototype['ratio'] = undefined;

/**
 * Public URL of the image
 * @member {String} url
 */
Image.prototype['url'] = undefined;

/**
 * Width of the image
 * @member {Number} width
 */
Image.prototype['width'] = undefined;





/**
 * Allowed values for the <code>ratio</code> property.
 * @enum {String}
 * @readonly
 */
Image['RatioEnum'] = {

    /**
     * value: "169"
     * @const
     */
    "169": "169",

    /**
     * value: "32"
     * @const
     */
    "32": "32",

    /**
     * value: "43"
     * @const
     */
    "43": "43"
};



export default Image;

