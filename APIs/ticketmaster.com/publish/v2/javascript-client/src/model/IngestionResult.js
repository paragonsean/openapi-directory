/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IngestionResult model module.
 * @module model/IngestionResult
 * @version v2
 */
class IngestionResult {
    /**
     * Constructs a new <code>IngestionResult</code>.
     * This class defines the IngestionResult on the Publish API
     * @alias module:model/IngestionResult
     * @param status {module:model/IngestionResult.StatusEnum} Status of the result
     */
    constructor(status) { 
        
        IngestionResult.initialize(this, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status) { 
        obj['status'] = status;
    }

    /**
     * Constructs a <code>IngestionResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IngestionResult} obj Optional instance to populate.
     * @return {module:model/IngestionResult} The populated <code>IngestionResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IngestionResult();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ignoredProperties')) {
                obj['ignoredProperties'] = ApiClient.convertToType(data['ignoredProperties'], {'String': Object});
            }
            if (data.hasOwnProperty('invalidProperties')) {
                obj['invalidProperties'] = ApiClient.convertToType(data['invalidProperties'], {'String': Object});
            }
            if (data.hasOwnProperty('invalidValues')) {
                obj['invalidValues'] = ApiClient.convertToType(data['invalidValues'], {'String': Object});
            }
            if (data.hasOwnProperty('missingProperties')) {
                obj['missingProperties'] = ApiClient.convertToType(data['missingProperties'], {'String': Object});
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('unknownProperties')) {
                obj['unknownProperties'] = ApiClient.convertToType(data['unknownProperties'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IngestionResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IngestionResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IngestionResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

IngestionResult.RequiredProperties = ["status"];

/**
 * Id of the entity ingested in the discovery api
 * @member {String} id
 */
IngestionResult.prototype['id'] = undefined;

/**
 * List properties that are ignored in the validation
 * @member {Object.<String, Object>} ignoredProperties
 */
IngestionResult.prototype['ignoredProperties'] = undefined;

/**
 * List of invalid properties
 * @member {Object.<String, Object>} invalidProperties
 */
IngestionResult.prototype['invalidProperties'] = undefined;

/**
 * List of invalid values
 * @member {Object.<String, Object>} invalidValues
 */
IngestionResult.prototype['invalidValues'] = undefined;

/**
 * List of properties that should be present in your entity to ease its dicovery
 * @member {Object.<String, Object>} missingProperties
 */
IngestionResult.prototype['missingProperties'] = undefined;

/**
 * Status of the result
 * @member {module:model/IngestionResult.StatusEnum} status
 */
IngestionResult.prototype['status'] = undefined;

/**
 * List of unknown properties that will be dropped
 * @member {Object.<String, Object>} unknownProperties
 */
IngestionResult.prototype['unknownProperties'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
IngestionResult['StatusEnum'] = {

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error",

    /**
     * value: "SuccessWarning"
     * @const
     */
    "SuccessWarning": "SuccessWarning",

    /**
     * value: "Success"
     * @const
     */
    "Success": "Success"
};



export default IngestionResult;

