/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Chronology from './Chronology';
import DateTimeField from './DateTimeField';
import DateTimeFieldType from './DateTimeFieldType';

/**
 * The LocalTime model module.
 * @module model/LocalTime
 * @version v2
 */
class LocalTime {
    /**
     * Constructs a new <code>LocalTime</code>.
     * @alias module:model/LocalTime
     */
    constructor() { 
        
        LocalTime.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocalTime</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocalTime} obj Optional instance to populate.
     * @return {module:model/LocalTime} The populated <code>LocalTime</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocalTime();

            if (data.hasOwnProperty('chronology')) {
                obj['chronology'] = Chronology.constructFromObject(data['chronology']);
            }
            if (data.hasOwnProperty('fieldTypes')) {
                obj['fieldTypes'] = ApiClient.convertToType(data['fieldTypes'], [DateTimeFieldType]);
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [DateTimeField]);
            }
            if (data.hasOwnProperty('hourOfDay')) {
                obj['hourOfDay'] = ApiClient.convertToType(data['hourOfDay'], 'Number');
            }
            if (data.hasOwnProperty('millisOfDay')) {
                obj['millisOfDay'] = ApiClient.convertToType(data['millisOfDay'], 'Number');
            }
            if (data.hasOwnProperty('millisOfSecond')) {
                obj['millisOfSecond'] = ApiClient.convertToType(data['millisOfSecond'], 'Number');
            }
            if (data.hasOwnProperty('minuteOfHour')) {
                obj['minuteOfHour'] = ApiClient.convertToType(data['minuteOfHour'], 'Number');
            }
            if (data.hasOwnProperty('secondOfMinute')) {
                obj['secondOfMinute'] = ApiClient.convertToType(data['secondOfMinute'], 'Number');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocalTime</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocalTime</code>.
     */
    static validateJSON(data) {
        // validate the optional field `chronology`
        if (data['chronology']) { // data not null
          Chronology.validateJSON(data['chronology']);
        }
        if (data['fieldTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fieldTypes'])) {
                throw new Error("Expected the field `fieldTypes` to be an array in the JSON data but got " + data['fieldTypes']);
            }
            // validate the optional field `fieldTypes` (array)
            for (const item of data['fieldTypes']) {
                DateTimeFieldType.validateJSON(item);
            };
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                DateTimeField.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}



/**
 * @member {module:model/Chronology} chronology
 */
LocalTime.prototype['chronology'] = undefined;

/**
 * @member {Array.<module:model/DateTimeFieldType>} fieldTypes
 */
LocalTime.prototype['fieldTypes'] = undefined;

/**
 * @member {Array.<module:model/DateTimeField>} fields
 */
LocalTime.prototype['fields'] = undefined;

/**
 * @member {Number} hourOfDay
 */
LocalTime.prototype['hourOfDay'] = undefined;

/**
 * @member {Number} millisOfDay
 */
LocalTime.prototype['millisOfDay'] = undefined;

/**
 * @member {Number} millisOfSecond
 */
LocalTime.prototype['millisOfSecond'] = undefined;

/**
 * @member {Number} minuteOfHour
 */
LocalTime.prototype['minuteOfHour'] = undefined;

/**
 * @member {Number} secondOfMinute
 */
LocalTime.prototype['secondOfMinute'] = undefined;

/**
 * @member {Array.<Number>} values
 */
LocalTime.prototype['values'] = undefined;






export default LocalTime;

