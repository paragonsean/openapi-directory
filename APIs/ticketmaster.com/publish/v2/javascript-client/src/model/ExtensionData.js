/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Source from './Source';

/**
 * The ExtensionData model module.
 * @module model/ExtensionData
 * @version v2
 */
class ExtensionData {
    /**
     * Constructs a new <code>ExtensionData</code>.
     * This class defines an extenstion data on the Publish API
     * @alias module:model/ExtensionData
     * @param data {Object} The actual information to add to the entity
     * @param relatedEntityType {module:model/ExtensionData.RelatedEntityTypeEnum} The type of the entity to add this extensions to
     * @param source {String} Source of the extension, where it came from
     * @param type {String} The type of the extension. This represent the data sent
     */
    constructor(data, relatedEntityType, source, type) { 
        
        ExtensionData.initialize(this, data, relatedEntityType, source, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, relatedEntityType, source, type) { 
        obj['data'] = data;
        obj['relatedEntityType'] = relatedEntityType;
        obj['source'] = source;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ExtensionData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExtensionData} obj Optional instance to populate.
     * @return {module:model/ExtensionData} The populated <code>ExtensionData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExtensionData();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], Object);
            }
            if (data.hasOwnProperty('relatedEntityId')) {
                obj['relatedEntityId'] = ApiClient.convertToType(data['relatedEntityId'], 'String');
            }
            if (data.hasOwnProperty('relatedEntitySource')) {
                obj['relatedEntitySource'] = Source.constructFromObject(data['relatedEntitySource']);
            }
            if (data.hasOwnProperty('relatedEntityType')) {
                obj['relatedEntityType'] = ApiClient.convertToType(data['relatedEntityType'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('versionNumber')) {
                obj['versionNumber'] = ApiClient.convertToType(data['versionNumber'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExtensionData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExtensionData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExtensionData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['relatedEntityId'] && !(typeof data['relatedEntityId'] === 'string' || data['relatedEntityId'] instanceof String)) {
            throw new Error("Expected the field `relatedEntityId` to be a primitive type in the JSON string but got " + data['relatedEntityId']);
        }
        // validate the optional field `relatedEntitySource`
        if (data['relatedEntitySource']) { // data not null
          Source.validateJSON(data['relatedEntitySource']);
        }
        // ensure the json data is a string
        if (data['relatedEntityType'] && !(typeof data['relatedEntityType'] === 'string' || data['relatedEntityType'] instanceof String)) {
            throw new Error("Expected the field `relatedEntityType` to be a primitive type in the JSON string but got " + data['relatedEntityType']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ExtensionData.RequiredProperties = ["data", "relatedEntityType", "source", "type"];

/**
 * The actual information to add to the entity
 * @member {Object} data
 */
ExtensionData.prototype['data'] = undefined;

/**
 * Id of the entity to add this extionsion to. If the relatedEntityId is Null, a relatedEntitySource MUST be provided
 * @member {String} relatedEntityId
 */
ExtensionData.prototype['relatedEntityId'] = undefined;

/**
 * @member {module:model/Source} relatedEntitySource
 */
ExtensionData.prototype['relatedEntitySource'] = undefined;

/**
 * The type of the entity to add this extensions to
 * @member {module:model/ExtensionData.RelatedEntityTypeEnum} relatedEntityType
 */
ExtensionData.prototype['relatedEntityType'] = undefined;

/**
 * Source of the extension, where it came from
 * @member {String} source
 */
ExtensionData.prototype['source'] = undefined;

/**
 * The type of the extension. This represent the data sent
 * @member {String} type
 */
ExtensionData.prototype['type'] = undefined;

/**
 * Version of the extensions. Version is to prevent to override an extension with an older one
 * @member {Number} versionNumber
 */
ExtensionData.prototype['versionNumber'] = undefined;





/**
 * Allowed values for the <code>relatedEntityType</code> property.
 * @enum {String}
 * @readonly
 */
ExtensionData['RelatedEntityTypeEnum'] = {

    /**
     * value: "event"
     * @const
     */
    "event": "event",

    /**
     * value: "venue"
     * @const
     */
    "venue": "venue",

    /**
     * value: "attraction"
     * @const
     */
    "attraction": "attraction"
};



export default ExtensionData;

