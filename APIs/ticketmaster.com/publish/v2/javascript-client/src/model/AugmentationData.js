/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Change from './Change';

/**
 * The AugmentationData model module.
 * @module model/AugmentationData
 * @version v2
 */
class AugmentationData {
    /**
     * Constructs a new <code>AugmentationData</code>.
     * This class defines the Augmentation Data on the Publish API
     * @alias module:model/AugmentationData
     * @param changes {Array.<module:model/Change>} List of changes to apply to the related entity
     * @param relatedEntityId {String} Id of the entity to apply the augmentation data.
     * @param relatedEntityType {module:model/AugmentationData.RelatedEntityTypeEnum} The type of the entity to apply the augmentation data.
     * @param source {String} The source where the augementation data came from
     * @param versionNumber {Number} Vesion of this augmentation data. This field is to avoid updating entity with old data. 
     */
    constructor(changes, relatedEntityId, relatedEntityType, source, versionNumber) { 
        
        AugmentationData.initialize(this, changes, relatedEntityId, relatedEntityType, source, versionNumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, changes, relatedEntityId, relatedEntityType, source, versionNumber) { 
        obj['changes'] = changes;
        obj['relatedEntityId'] = relatedEntityId;
        obj['relatedEntityType'] = relatedEntityType;
        obj['source'] = source;
        obj['versionNumber'] = versionNumber;
    }

    /**
     * Constructs a <code>AugmentationData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AugmentationData} obj Optional instance to populate.
     * @return {module:model/AugmentationData} The populated <code>AugmentationData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AugmentationData();

            if (data.hasOwnProperty('changes')) {
                obj['changes'] = ApiClient.convertToType(data['changes'], [Change]);
            }
            if (data.hasOwnProperty('relatedEntityId')) {
                obj['relatedEntityId'] = ApiClient.convertToType(data['relatedEntityId'], 'String');
            }
            if (data.hasOwnProperty('relatedEntityType')) {
                obj['relatedEntityType'] = ApiClient.convertToType(data['relatedEntityType'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('versionNumber')) {
                obj['versionNumber'] = ApiClient.convertToType(data['versionNumber'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AugmentationData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AugmentationData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AugmentationData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['changes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['changes'])) {
                throw new Error("Expected the field `changes` to be an array in the JSON data but got " + data['changes']);
            }
            // validate the optional field `changes` (array)
            for (const item of data['changes']) {
                Change.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['relatedEntityId'] && !(typeof data['relatedEntityId'] === 'string' || data['relatedEntityId'] instanceof String)) {
            throw new Error("Expected the field `relatedEntityId` to be a primitive type in the JSON string but got " + data['relatedEntityId']);
        }
        // ensure the json data is a string
        if (data['relatedEntityType'] && !(typeof data['relatedEntityType'] === 'string' || data['relatedEntityType'] instanceof String)) {
            throw new Error("Expected the field `relatedEntityType` to be a primitive type in the JSON string but got " + data['relatedEntityType']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}

AugmentationData.RequiredProperties = ["changes", "relatedEntityId", "relatedEntityType", "source", "versionNumber"];

/**
 * List of changes to apply to the related entity
 * @member {Array.<module:model/Change>} changes
 */
AugmentationData.prototype['changes'] = undefined;

/**
 * Id of the entity to apply the augmentation data.
 * @member {String} relatedEntityId
 */
AugmentationData.prototype['relatedEntityId'] = undefined;

/**
 * The type of the entity to apply the augmentation data.
 * @member {module:model/AugmentationData.RelatedEntityTypeEnum} relatedEntityType
 */
AugmentationData.prototype['relatedEntityType'] = undefined;

/**
 * The confidence (%) level of the accuracy of this augmention data. 100 is the better
 * @member {Number} score
 */
AugmentationData.prototype['score'] = undefined;

/**
 * The source where the augementation data came from
 * @member {String} source
 */
AugmentationData.prototype['source'] = undefined;

/**
 * Vesion of this augmentation data. This field is to avoid updating entity with old data. 
 * @member {Number} versionNumber
 */
AugmentationData.prototype['versionNumber'] = undefined;





/**
 * Allowed values for the <code>relatedEntityType</code> property.
 * @enum {String}
 * @readonly
 */
AugmentationData['RelatedEntityTypeEnum'] = {

    /**
     * value: "event"
     * @const
     */
    "event": "event",

    /**
     * value: "attraction"
     * @const
     */
    "attraction": "attraction",

    /**
     * value: "venue"
     * @const
     */
    "venue": "venue"
};



export default AugmentationData;

