/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocalTime from './LocalTime';

/**
 * The StartDates model module.
 * @module model/StartDates
 * @version v2
 */
class StartDates {
    /**
     * Constructs a new <code>StartDates</code>.
     * Event&#39;s Start Dates
     * @alias module:model/StartDates
     */
    constructor() { 
        
        StartDates.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['dateTBA'] = false;
        obj['dateTBD'] = false;
        obj['noSpecificTime'] = false;
        obj['timeTBA'] = false;
    }

    /**
     * Constructs a <code>StartDates</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartDates} obj Optional instance to populate.
     * @return {module:model/StartDates} The populated <code>StartDates</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartDates();

            if (data.hasOwnProperty('dateTBA')) {
                obj['dateTBA'] = ApiClient.convertToType(data['dateTBA'], 'Boolean');
            }
            if (data.hasOwnProperty('dateTBD')) {
                obj['dateTBD'] = ApiClient.convertToType(data['dateTBD'], 'Boolean');
            }
            if (data.hasOwnProperty('dateTime')) {
                obj['dateTime'] = ApiClient.convertToType(data['dateTime'], 'Date');
            }
            if (data.hasOwnProperty('localDate')) {
                obj['localDate'] = ApiClient.convertToType(data['localDate'], 'Date');
            }
            if (data.hasOwnProperty('localTime')) {
                obj['localTime'] = LocalTime.constructFromObject(data['localTime']);
            }
            if (data.hasOwnProperty('noSpecificTime')) {
                obj['noSpecificTime'] = ApiClient.convertToType(data['noSpecificTime'], 'Boolean');
            }
            if (data.hasOwnProperty('timeTBA')) {
                obj['timeTBA'] = ApiClient.convertToType(data['timeTBA'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartDates</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartDates</code>.
     */
    static validateJSON(data) {
        // validate the optional field `localTime`
        if (data['localTime']) { // data not null
          LocalTime.validateJSON(data['localTime']);
        }

        return true;
    }


}



/**
 * Boolean flag to indicate whether or not the start date is TBA
 * @member {Boolean} dateTBA
 * @default false
 */
StartDates.prototype['dateTBA'] = false;

/**
 * Boolean flag to indicate whether or not the start date is TBD
 * @member {Boolean} dateTBD
 * @default false
 */
StartDates.prototype['dateTBD'] = false;

/**
 * The event start datetime
 * @member {Date} dateTime
 */
StartDates.prototype['dateTime'] = undefined;

/**
 * The event start date in local date
 * @member {Date} localDate
 */
StartDates.prototype['localDate'] = undefined;

/**
 * @member {module:model/LocalTime} localTime
 */
StartDates.prototype['localTime'] = undefined;

/**
 * Boolean flag to indicate whether or not the event has no specific time
 * @member {Boolean} noSpecificTime
 * @default false
 */
StartDates.prototype['noSpecificTime'] = false;

/**
 * Boolean flag to indicate whether or not the start time is TBA
 * @member {Boolean} timeTBA
 * @default false
 */
StartDates.prototype['timeTBA'] = false;






export default StartDates;

