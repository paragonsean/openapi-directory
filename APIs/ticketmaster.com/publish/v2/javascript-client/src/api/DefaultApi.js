/**
 * ticketmaster publish api
 * Publish API
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Attraction from '../model/Attraction';
import AugmentationData from '../model/AugmentationData';
import Entitlement from '../model/Entitlement';
import Event from '../model/Event';
import ExtensionData from '../model/ExtensionData';
import IngestionResult from '../model/IngestionResult';
import Venue from '../model/Venue';
import Video from '../model/Video';

/**
* Default service.
* @module api/DefaultApi
* @version v2
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the patchAttraction operation.
     * @callback module:api/DefaultApi~patchAttractionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IngestionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish a patch on an attraction
     * Since 1.0.0
     * @param {String} id ID of the attraction the patch will be applied
     * @param {String} tMPSCorrelationId Unique correlation id to be able to trace the request in our system
     * @param {module:model/AugmentationData} augmentationData Patch to apply
     * @param {module:api/DefaultApi~patchAttractionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IngestionResult}
     */
    patchAttraction(id, tMPSCorrelationId, augmentationData, callback) {
      let postBody = augmentationData;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchAttraction");
      }
      // verify the required parameter 'tMPSCorrelationId' is set
      if (tMPSCorrelationId === undefined || tMPSCorrelationId === null) {
        throw new Error("Missing the required parameter 'tMPSCorrelationId' when calling patchAttraction");
      }
      // verify the required parameter 'augmentationData' is set
      if (augmentationData === undefined || augmentationData === null) {
        throw new Error("Missing the required parameter 'augmentationData' when calling patchAttraction");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'TMPS-Correlation-Id': tMPSCorrelationId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = IngestionResult;
      return this.apiClient.callApi(
        '/publish/v2/attractions/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchEvent operation.
     * @callback module:api/DefaultApi~patchEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IngestionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish a patch on an event
     * Since 1.0.0
     * @param {String} id ID of the event the patch will be applied
     * @param {String} tMPSCorrelationId Unique correlation id to be able to trace the request in our system
     * @param {module:model/AugmentationData} augmentationData Patch to apply
     * @param {module:api/DefaultApi~patchEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IngestionResult}
     */
    patchEvent(id, tMPSCorrelationId, augmentationData, callback) {
      let postBody = augmentationData;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchEvent");
      }
      // verify the required parameter 'tMPSCorrelationId' is set
      if (tMPSCorrelationId === undefined || tMPSCorrelationId === null) {
        throw new Error("Missing the required parameter 'tMPSCorrelationId' when calling patchEvent");
      }
      // verify the required parameter 'augmentationData' is set
      if (augmentationData === undefined || augmentationData === null) {
        throw new Error("Missing the required parameter 'augmentationData' when calling patchEvent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'TMPS-Correlation-Id': tMPSCorrelationId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = IngestionResult;
      return this.apiClient.callApi(
        '/publish/v2/events/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchVenue operation.
     * @callback module:api/DefaultApi~patchVenueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IngestionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish a patch on a venue
     * Since 1.0.0
     * @param {String} id ID of the venue the patch will be applied
     * @param {String} tMPSCorrelationId Unique correlation id to be able to trace the request in our system
     * @param {module:model/AugmentationData} augmentationData Patch to apply
     * @param {module:api/DefaultApi~patchVenueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IngestionResult}
     */
    patchVenue(id, tMPSCorrelationId, augmentationData, callback) {
      let postBody = augmentationData;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchVenue");
      }
      // verify the required parameter 'tMPSCorrelationId' is set
      if (tMPSCorrelationId === undefined || tMPSCorrelationId === null) {
        throw new Error("Missing the required parameter 'tMPSCorrelationId' when calling patchVenue");
      }
      // verify the required parameter 'augmentationData' is set
      if (augmentationData === undefined || augmentationData === null) {
        throw new Error("Missing the required parameter 'augmentationData' when calling patchVenue");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'TMPS-Correlation-Id': tMPSCorrelationId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = IngestionResult;
      return this.apiClient.callApi(
        '/publish/v2/venues/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishAttraction operation.
     * @callback module:api/DefaultApi~publishAttractionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IngestionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish an attractions
     * Since 1.0.0
     * @param {String} tMPSCorrelationId Unique correlation id to be able to trace the request in our system
     * @param {module:model/Attraction} attraction Attraction
     * @param {module:api/DefaultApi~publishAttractionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IngestionResult}
     */
    publishAttraction(tMPSCorrelationId, attraction, callback) {
      let postBody = attraction;
      // verify the required parameter 'tMPSCorrelationId' is set
      if (tMPSCorrelationId === undefined || tMPSCorrelationId === null) {
        throw new Error("Missing the required parameter 'tMPSCorrelationId' when calling publishAttraction");
      }
      // verify the required parameter 'attraction' is set
      if (attraction === undefined || attraction === null) {
        throw new Error("Missing the required parameter 'attraction' when calling publishAttraction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TMPS-Correlation-Id': tMPSCorrelationId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = IngestionResult;
      return this.apiClient.callApi(
        '/publish/v2/attractions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishAttractionVideos operation.
     * @callback module:api/DefaultApi~publishAttractionVideosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IngestionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish a video on an attraction
     * Since 1.0.0
     * @param {String} id ID of the attraction the video is linked to
     * @param {String} tMPSCorrelationId Unique correlation id to be able to trace the request in our system
     * @param {module:model/Video} video Video data
     * @param {module:api/DefaultApi~publishAttractionVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IngestionResult}
     */
    publishAttractionVideos(id, tMPSCorrelationId, video, callback) {
      let postBody = video;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publishAttractionVideos");
      }
      // verify the required parameter 'tMPSCorrelationId' is set
      if (tMPSCorrelationId === undefined || tMPSCorrelationId === null) {
        throw new Error("Missing the required parameter 'tMPSCorrelationId' when calling publishAttractionVideos");
      }
      // verify the required parameter 'video' is set
      if (video === undefined || video === null) {
        throw new Error("Missing the required parameter 'video' when calling publishAttractionVideos");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'TMPS-Correlation-Id': tMPSCorrelationId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = IngestionResult;
      return this.apiClient.callApi(
        '/publish/v2/attractions/{id}/videos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishEntitlements operation.
     * @callback module:api/DefaultApi~publishEntitlementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IngestionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish entitlements on an entity
     * Since 2.0.0
     * @param {String} tMPSCorrelationId Unique correlation id to be able to trace the request in our system
     * @param {module:model/Entitlement} entitlement Entitlements information to add to the entity
     * @param {module:api/DefaultApi~publishEntitlementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IngestionResult}
     */
    publishEntitlements(tMPSCorrelationId, entitlement, callback) {
      let postBody = entitlement;
      // verify the required parameter 'tMPSCorrelationId' is set
      if (tMPSCorrelationId === undefined || tMPSCorrelationId === null) {
        throw new Error("Missing the required parameter 'tMPSCorrelationId' when calling publishEntitlements");
      }
      // verify the required parameter 'entitlement' is set
      if (entitlement === undefined || entitlement === null) {
        throw new Error("Missing the required parameter 'entitlement' when calling publishEntitlements");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TMPS-Correlation-Id': tMPSCorrelationId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = IngestionResult;
      return this.apiClient.callApi(
        '/publish/v2/entitlements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishEvent operation.
     * @callback module:api/DefaultApi~publishEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IngestionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish an event
     * Since 1.0.0
     * @param {String} tMPSCorrelationId Unique correlation id to be able to trace the request in our system
     * @param {module:model/Event} event Event
     * @param {module:api/DefaultApi~publishEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IngestionResult}
     */
    publishEvent(tMPSCorrelationId, event, callback) {
      let postBody = event;
      // verify the required parameter 'tMPSCorrelationId' is set
      if (tMPSCorrelationId === undefined || tMPSCorrelationId === null) {
        throw new Error("Missing the required parameter 'tMPSCorrelationId' when calling publishEvent");
      }
      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling publishEvent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TMPS-Correlation-Id': tMPSCorrelationId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = IngestionResult;
      return this.apiClient.callApi(
        '/publish/v2/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishEventVideos operation.
     * @callback module:api/DefaultApi~publishEventVideosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IngestionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish a video on an event
     * Since 1.0.0
     * @param {String} id ID of the event the video is linked to
     * @param {String} tMPSCorrelationId Unique correlation id to be able to trace the request in our system
     * @param {module:model/Video} video Video data
     * @param {module:api/DefaultApi~publishEventVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IngestionResult}
     */
    publishEventVideos(id, tMPSCorrelationId, video, callback) {
      let postBody = video;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling publishEventVideos");
      }
      // verify the required parameter 'tMPSCorrelationId' is set
      if (tMPSCorrelationId === undefined || tMPSCorrelationId === null) {
        throw new Error("Missing the required parameter 'tMPSCorrelationId' when calling publishEventVideos");
      }
      // verify the required parameter 'video' is set
      if (video === undefined || video === null) {
        throw new Error("Missing the required parameter 'video' when calling publishEventVideos");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'TMPS-Correlation-Id': tMPSCorrelationId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = IngestionResult;
      return this.apiClient.callApi(
        '/publish/v2/events/{id}/videos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishExtension operation.
     * @callback module:api/DefaultApi~publishExtensionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IngestionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish extension on an entity
     * Since 1.0.0
     * @param {String} tMPSCorrelationId Unique correlation id to be able to trace the request in our system
     * @param {module:model/ExtensionData} extensionData Extension information to add to the entity
     * @param {module:api/DefaultApi~publishExtensionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IngestionResult}
     */
    publishExtension(tMPSCorrelationId, extensionData, callback) {
      let postBody = extensionData;
      // verify the required parameter 'tMPSCorrelationId' is set
      if (tMPSCorrelationId === undefined || tMPSCorrelationId === null) {
        throw new Error("Missing the required parameter 'tMPSCorrelationId' when calling publishExtension");
      }
      // verify the required parameter 'extensionData' is set
      if (extensionData === undefined || extensionData === null) {
        throw new Error("Missing the required parameter 'extensionData' when calling publishExtension");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TMPS-Correlation-Id': tMPSCorrelationId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = IngestionResult;
      return this.apiClient.callApi(
        '/publish/v2/extensions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishVenue operation.
     * @callback module:api/DefaultApi~publishVenueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IngestionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish a venue
     * Since 1.0.0
     * @param {String} tMPSCorrelationId Unique correlation id to be able to trace the request in our system
     * @param {module:model/Venue} venue Venue
     * @param {module:api/DefaultApi~publishVenueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IngestionResult}
     */
    publishVenue(tMPSCorrelationId, venue, callback) {
      let postBody = venue;
      // verify the required parameter 'tMPSCorrelationId' is set
      if (tMPSCorrelationId === undefined || tMPSCorrelationId === null) {
        throw new Error("Missing the required parameter 'tMPSCorrelationId' when calling publishVenue");
      }
      // verify the required parameter 'venue' is set
      if (venue === undefined || venue === null) {
        throw new Error("Missing the required parameter 'venue' when calling publishVenue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'TMPS-Correlation-Id': tMPSCorrelationId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = IngestionResult;
      return this.apiClient.callApi(
        '/publish/v2/venues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
