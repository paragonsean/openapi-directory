# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.area import Area
from openapi_server.models.city import City
from openapi_server.models.country import Country
from openapi_server.models.location import Location
from openapi_server.models.state import State
from openapi_server import util


class Place(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, area: Area=None, city: City=None, country: Country=None, location: Location=None, names: Dict[str, str]=None, postal_code: str=None, state: State=None):
        """Place - a model defined in OpenAPI

        :param address: The address of this Place.
        :param area: The area of this Place.
        :param city: The city of this Place.
        :param country: The country of this Place.
        :param location: The location of this Place.
        :param names: The names of this Place.
        :param postal_code: The postal_code of this Place.
        :param state: The state of this Place.
        """
        self.openapi_types = {
            'address': Address,
            'area': Area,
            'city': City,
            'country': Country,
            'location': Location,
            'names': Dict[str, str],
            'postal_code': str,
            'state': State
        }

        self.attribute_map = {
            'address': 'address',
            'area': 'area',
            'city': 'city',
            'country': 'country',
            'location': 'location',
            'names': 'names',
            'postal_code': 'postalCode',
            'state': 'state'
        }

        self._address = address
        self._area = area
        self._city = city
        self._country = country
        self._location = location
        self._names = names
        self._postal_code = postal_code
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Place':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Place of this Place.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Place.


        :return: The address of this Place.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Place.


        :param address: The address of this Place.
        :type address: Address
        """

        self._address = address

    @property
    def area(self):
        """Gets the area of this Place.


        :return: The area of this Place.
        :rtype: Area
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this Place.


        :param area: The area of this Place.
        :type area: Area
        """

        self._area = area

    @property
    def city(self):
        """Gets the city of this Place.


        :return: The city of this Place.
        :rtype: City
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Place.


        :param city: The city of this Place.
        :type city: City
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Place.


        :return: The country of this Place.
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Place.


        :param country: The country of this Place.
        :type country: Country
        """

        self._country = country

    @property
    def location(self):
        """Gets the location of this Place.


        :return: The location of this Place.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Place.


        :param location: The location of this Place.
        :type location: Location
        """

        self._location = location

    @property
    def names(self):
        """Gets the names of this Place.

        Names of the entity - multi-lingual fields

        :return: The names of this Place.
        :rtype: Dict[str, str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this Place.

        Names of the entity - multi-lingual fields

        :param names: The names of this Place.
        :type names: Dict[str, str]
        """

        self._names = names

    @property
    def postal_code(self):
        """Gets the postal_code of this Place.

        Postal code / zipcode of the place

        :return: The postal_code of this Place.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Place.

        Postal code / zipcode of the place

        :param postal_code: The postal_code of this Place.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this Place.


        :return: The state of this Place.
        :rtype: State
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Place.


        :param state: The state of this Place.
        :type state: State
        """

        self._state = state
