# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PriceRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, max: float=None, min: float=None, type: str=None):
        """PriceRange - a model defined in OpenAPI

        :param currency: The currency of this PriceRange.
        :param max: The max of this PriceRange.
        :param min: The min of this PriceRange.
        :param type: The type of this PriceRange.
        """
        self.openapi_types = {
            'currency': str,
            'max': float,
            'min': float,
            'type': str
        }

        self.attribute_map = {
            'currency': 'currency',
            'max': 'max',
            'min': 'min',
            'type': 'type'
        }

        self._currency = currency
        self._max = max
        self._min = min
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PriceRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PriceRange of this PriceRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this PriceRange.

        Currency

        :return: The currency of this PriceRange.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PriceRange.

        Currency

        :param currency: The currency of this PriceRange.
        :type currency: str
        """

        self._currency = currency

    @property
    def max(self):
        """Gets the max of this PriceRange.

        Maximum price

        :return: The max of this PriceRange.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this PriceRange.

        Maximum price

        :param max: The max of this PriceRange.
        :type max: float
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this PriceRange.

        Minimum price

        :return: The min of this PriceRange.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this PriceRange.

        Minimum price

        :param min: The min of this PriceRange.
        :type min: float
        """

        self._min = min

    @property
    def type(self):
        """Gets the type of this PriceRange.

        Type of price

        :return: The type of this PriceRange.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PriceRange.

        Type of price

        :param type: The type of this PriceRange.
        :type type: str
        """
        allowed_values = ["standard"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
