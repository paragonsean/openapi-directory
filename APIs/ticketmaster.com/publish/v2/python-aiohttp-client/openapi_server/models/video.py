# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.licensing_information import LicensingInformation
from openapi_server.models.source import Source
from openapi_server import util


class Video(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embed_url: str=None, licensing_information: LicensingInformation=None, source: Source=None, url: str=None):
        """Video - a model defined in OpenAPI

        :param embed_url: The embed_url of this Video.
        :param licensing_information: The licensing_information of this Video.
        :param source: The source of this Video.
        :param url: The url of this Video.
        """
        self.openapi_types = {
            'embed_url': str,
            'licensing_information': LicensingInformation,
            'source': Source,
            'url': str
        }

        self.attribute_map = {
            'embed_url': 'embedUrl',
            'licensing_information': 'licensingInformation',
            'source': 'source',
            'url': 'url'
        }

        self._embed_url = embed_url
        self._licensing_information = licensing_information
        self._source = source
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Video':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Video of this Video.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embed_url(self):
        """Gets the embed_url of this Video.

        The url of the embeded video

        :return: The embed_url of this Video.
        :rtype: str
        """
        return self._embed_url

    @embed_url.setter
    def embed_url(self, embed_url):
        """Sets the embed_url of this Video.

        The url of the embeded video

        :param embed_url: The embed_url of this Video.
        :type embed_url: str
        """

        self._embed_url = embed_url

    @property
    def licensing_information(self):
        """Gets the licensing_information of this Video.


        :return: The licensing_information of this Video.
        :rtype: LicensingInformation
        """
        return self._licensing_information

    @licensing_information.setter
    def licensing_information(self, licensing_information):
        """Sets the licensing_information of this Video.


        :param licensing_information: The licensing_information of this Video.
        :type licensing_information: LicensingInformation
        """
        if licensing_information is None:
            raise ValueError("Invalid value for `licensing_information`, must not be `None`")

        self._licensing_information = licensing_information

    @property
    def source(self):
        """Gets the source of this Video.


        :return: The source of this Video.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Video.


        :param source: The source of this Video.
        :type source: Source
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def url(self):
        """Gets the url of this Video.

        The url of the video

        :return: The url of this Video.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Video.

        The url of the video

        :param url: The url of this Video.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
