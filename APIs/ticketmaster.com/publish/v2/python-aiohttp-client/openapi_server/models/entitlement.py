# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source import Source
import re
from openapi_server import util


class Entitlement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: object=None, related_entity_id: str=None, related_entity_source: Source=None, related_entity_type: str=None, source: str=None, version_number: int=None):
        """Entitlement - a model defined in OpenAPI

        :param data: The data of this Entitlement.
        :param related_entity_id: The related_entity_id of this Entitlement.
        :param related_entity_source: The related_entity_source of this Entitlement.
        :param related_entity_type: The related_entity_type of this Entitlement.
        :param source: The source of this Entitlement.
        :param version_number: The version_number of this Entitlement.
        """
        self.openapi_types = {
            'data': object,
            'related_entity_id': str,
            'related_entity_source': Source,
            'related_entity_type': str,
            'source': str,
            'version_number': int
        }

        self.attribute_map = {
            'data': 'data',
            'related_entity_id': 'relatedEntityId',
            'related_entity_source': 'relatedEntitySource',
            'related_entity_type': 'relatedEntityType',
            'source': 'source',
            'version_number': 'versionNumber'
        }

        self._data = data
        self._related_entity_id = related_entity_id
        self._related_entity_source = related_entity_source
        self._related_entity_type = related_entity_type
        self._source = source
        self._version_number = version_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Entitlement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Entitlement of this Entitlement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this Entitlement.

        The actual entitlements information to add to the entity

        :return: The data of this Entitlement.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Entitlement.

        The actual entitlements information to add to the entity

        :param data: The data of this Entitlement.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def related_entity_id(self):
        """Gets the related_entity_id of this Entitlement.

        Id of the entity to add this extionsion to. If the relatedEntityId is Null, a relatedEntitySource MUST be provided

        :return: The related_entity_id of this Entitlement.
        :rtype: str
        """
        return self._related_entity_id

    @related_entity_id.setter
    def related_entity_id(self, related_entity_id):
        """Sets the related_entity_id of this Entitlement.

        Id of the entity to add this extionsion to. If the relatedEntityId is Null, a relatedEntitySource MUST be provided

        :param related_entity_id: The related_entity_id of this Entitlement.
        :type related_entity_id: str
        """

        self._related_entity_id = related_entity_id

    @property
    def related_entity_source(self):
        """Gets the related_entity_source of this Entitlement.


        :return: The related_entity_source of this Entitlement.
        :rtype: Source
        """
        return self._related_entity_source

    @related_entity_source.setter
    def related_entity_source(self, related_entity_source):
        """Sets the related_entity_source of this Entitlement.


        :param related_entity_source: The related_entity_source of this Entitlement.
        :type related_entity_source: Source
        """

        self._related_entity_source = related_entity_source

    @property
    def related_entity_type(self):
        """Gets the related_entity_type of this Entitlement.

        The type of the entity to add this entitlement to

        :return: The related_entity_type of this Entitlement.
        :rtype: str
        """
        return self._related_entity_type

    @related_entity_type.setter
    def related_entity_type(self, related_entity_type):
        """Sets the related_entity_type of this Entitlement.

        The type of the entity to add this entitlement to

        :param related_entity_type: The related_entity_type of this Entitlement.
        :type related_entity_type: str
        """
        allowed_values = ["event", "venue", "attraction"]  # noqa: E501
        if related_entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `related_entity_type` ({0}), must be one of {1}"
                .format(related_entity_type, allowed_values)
            )

        self._related_entity_type = related_entity_type

    @property
    def source(self):
        """Gets the source of this Entitlement.

        Source of the extension, where it came from

        :return: The source of this Entitlement.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Entitlement.

        Source of the extension, where it came from

        :param source: The source of this Entitlement.
        :type source: str
        """
        allowed_values = ["ticketmaster"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def version_number(self):
        """Gets the version_number of this Entitlement.

        Version of the entitlements. Version is to prevent to override an entitlements with an older one

        :return: The version_number of this Entitlement.
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this Entitlement.

        Version of the entitlements. Version is to prevent to override an entitlements with an older one

        :param version_number: The version_number of this Entitlement.
        :type version_number: int
        """

        self._version_number = version_number
