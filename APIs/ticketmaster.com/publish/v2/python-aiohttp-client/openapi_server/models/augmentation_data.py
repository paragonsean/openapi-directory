# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change import Change
from openapi_server import util


class AugmentationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changes: List[Change]=None, related_entity_id: str=None, related_entity_type: str=None, score: float=None, source: str=None, version_number: int=None):
        """AugmentationData - a model defined in OpenAPI

        :param changes: The changes of this AugmentationData.
        :param related_entity_id: The related_entity_id of this AugmentationData.
        :param related_entity_type: The related_entity_type of this AugmentationData.
        :param score: The score of this AugmentationData.
        :param source: The source of this AugmentationData.
        :param version_number: The version_number of this AugmentationData.
        """
        self.openapi_types = {
            'changes': List[Change],
            'related_entity_id': str,
            'related_entity_type': str,
            'score': float,
            'source': str,
            'version_number': int
        }

        self.attribute_map = {
            'changes': 'changes',
            'related_entity_id': 'relatedEntityId',
            'related_entity_type': 'relatedEntityType',
            'score': 'score',
            'source': 'source',
            'version_number': 'versionNumber'
        }

        self._changes = changes
        self._related_entity_id = related_entity_id
        self._related_entity_type = related_entity_type
        self._score = score
        self._source = source
        self._version_number = version_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AugmentationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AugmentationData of this AugmentationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changes(self):
        """Gets the changes of this AugmentationData.

        List of changes to apply to the related entity

        :return: The changes of this AugmentationData.
        :rtype: List[Change]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this AugmentationData.

        List of changes to apply to the related entity

        :param changes: The changes of this AugmentationData.
        :type changes: List[Change]
        """
        if changes is None:
            raise ValueError("Invalid value for `changes`, must not be `None`")

        self._changes = changes

    @property
    def related_entity_id(self):
        """Gets the related_entity_id of this AugmentationData.

        Id of the entity to apply the augmentation data.

        :return: The related_entity_id of this AugmentationData.
        :rtype: str
        """
        return self._related_entity_id

    @related_entity_id.setter
    def related_entity_id(self, related_entity_id):
        """Sets the related_entity_id of this AugmentationData.

        Id of the entity to apply the augmentation data.

        :param related_entity_id: The related_entity_id of this AugmentationData.
        :type related_entity_id: str
        """
        if related_entity_id is None:
            raise ValueError("Invalid value for `related_entity_id`, must not be `None`")

        self._related_entity_id = related_entity_id

    @property
    def related_entity_type(self):
        """Gets the related_entity_type of this AugmentationData.

        The type of the entity to apply the augmentation data.

        :return: The related_entity_type of this AugmentationData.
        :rtype: str
        """
        return self._related_entity_type

    @related_entity_type.setter
    def related_entity_type(self, related_entity_type):
        """Sets the related_entity_type of this AugmentationData.

        The type of the entity to apply the augmentation data.

        :param related_entity_type: The related_entity_type of this AugmentationData.
        :type related_entity_type: str
        """
        allowed_values = ["event", "attraction", "venue"]  # noqa: E501
        if related_entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `related_entity_type` ({0}), must be one of {1}"
                .format(related_entity_type, allowed_values)
            )

        self._related_entity_type = related_entity_type

    @property
    def score(self):
        """Gets the score of this AugmentationData.

        The confidence (%) level of the accuracy of this augmention data. 100 is the better

        :return: The score of this AugmentationData.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this AugmentationData.

        The confidence (%) level of the accuracy of this augmention data. 100 is the better

        :param score: The score of this AugmentationData.
        :type score: float
        """

        self._score = score

    @property
    def source(self):
        """Gets the source of this AugmentationData.

        The source where the augementation data came from

        :return: The source of this AugmentationData.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AugmentationData.

        The source where the augementation data came from

        :param source: The source of this AugmentationData.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def version_number(self):
        """Gets the version_number of this AugmentationData.

        Vesion of this augmentation data. This field is to avoid updating entity with old data. 

        :return: The version_number of this AugmentationData.
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this AugmentationData.

        Vesion of this augmentation data. This field is to avoid updating entity with old data. 

        :param version_number: The version_number of this AugmentationData.
        :type version_number: int
        """
        if version_number is None:
            raise ValueError("Invalid value for `version_number`, must not be `None`")

        self._version_number = version_number
