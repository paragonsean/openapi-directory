# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.local_time import LocalTime
from openapi_server import util


class StartDates(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_tba: bool=False, date_tbd: bool=False, date_time: datetime=None, local_date: date=None, local_time: LocalTime=None, no_specific_time: bool=False, time_tba: bool=False):
        """StartDates - a model defined in OpenAPI

        :param date_tba: The date_tba of this StartDates.
        :param date_tbd: The date_tbd of this StartDates.
        :param date_time: The date_time of this StartDates.
        :param local_date: The local_date of this StartDates.
        :param local_time: The local_time of this StartDates.
        :param no_specific_time: The no_specific_time of this StartDates.
        :param time_tba: The time_tba of this StartDates.
        """
        self.openapi_types = {
            'date_tba': bool,
            'date_tbd': bool,
            'date_time': datetime,
            'local_date': date,
            'local_time': LocalTime,
            'no_specific_time': bool,
            'time_tba': bool
        }

        self.attribute_map = {
            'date_tba': 'dateTBA',
            'date_tbd': 'dateTBD',
            'date_time': 'dateTime',
            'local_date': 'localDate',
            'local_time': 'localTime',
            'no_specific_time': 'noSpecificTime',
            'time_tba': 'timeTBA'
        }

        self._date_tba = date_tba
        self._date_tbd = date_tbd
        self._date_time = date_time
        self._local_date = local_date
        self._local_time = local_time
        self._no_specific_time = no_specific_time
        self._time_tba = time_tba

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartDates':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartDates of this StartDates.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_tba(self):
        """Gets the date_tba of this StartDates.

        Boolean flag to indicate whether or not the start date is TBA

        :return: The date_tba of this StartDates.
        :rtype: bool
        """
        return self._date_tba

    @date_tba.setter
    def date_tba(self, date_tba):
        """Sets the date_tba of this StartDates.

        Boolean flag to indicate whether or not the start date is TBA

        :param date_tba: The date_tba of this StartDates.
        :type date_tba: bool
        """

        self._date_tba = date_tba

    @property
    def date_tbd(self):
        """Gets the date_tbd of this StartDates.

        Boolean flag to indicate whether or not the start date is TBD

        :return: The date_tbd of this StartDates.
        :rtype: bool
        """
        return self._date_tbd

    @date_tbd.setter
    def date_tbd(self, date_tbd):
        """Sets the date_tbd of this StartDates.

        Boolean flag to indicate whether or not the start date is TBD

        :param date_tbd: The date_tbd of this StartDates.
        :type date_tbd: bool
        """

        self._date_tbd = date_tbd

    @property
    def date_time(self):
        """Gets the date_time of this StartDates.

        The event start datetime

        :return: The date_time of this StartDates.
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this StartDates.

        The event start datetime

        :param date_time: The date_time of this StartDates.
        :type date_time: datetime
        """

        self._date_time = date_time

    @property
    def local_date(self):
        """Gets the local_date of this StartDates.

        The event start date in local date

        :return: The local_date of this StartDates.
        :rtype: date
        """
        return self._local_date

    @local_date.setter
    def local_date(self, local_date):
        """Sets the local_date of this StartDates.

        The event start date in local date

        :param local_date: The local_date of this StartDates.
        :type local_date: date
        """

        self._local_date = local_date

    @property
    def local_time(self):
        """Gets the local_time of this StartDates.


        :return: The local_time of this StartDates.
        :rtype: LocalTime
        """
        return self._local_time

    @local_time.setter
    def local_time(self, local_time):
        """Sets the local_time of this StartDates.


        :param local_time: The local_time of this StartDates.
        :type local_time: LocalTime
        """

        self._local_time = local_time

    @property
    def no_specific_time(self):
        """Gets the no_specific_time of this StartDates.

        Boolean flag to indicate whether or not the event has no specific time

        :return: The no_specific_time of this StartDates.
        :rtype: bool
        """
        return self._no_specific_time

    @no_specific_time.setter
    def no_specific_time(self, no_specific_time):
        """Sets the no_specific_time of this StartDates.

        Boolean flag to indicate whether or not the event has no specific time

        :param no_specific_time: The no_specific_time of this StartDates.
        :type no_specific_time: bool
        """

        self._no_specific_time = no_specific_time

    @property
    def time_tba(self):
        """Gets the time_tba of this StartDates.

        Boolean flag to indicate whether or not the start time is TBA

        :return: The time_tba of this StartDates.
        :rtype: bool
        """
        return self._time_tba

    @time_tba.setter
    def time_tba(self, time_tba):
        """Sets the time_tba of this StartDates.

        Boolean flag to indicate whether or not the start time is TBA

        :param time_tba: The time_tba of this StartDates.
        :type time_tba: bool
        """

        self._time_tba = time_tba
