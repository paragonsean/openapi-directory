# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Country(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, names: Dict[str, str]=None):
        """Country - a model defined in OpenAPI

        :param country_code: The country_code of this Country.
        :param names: The names of this Country.
        """
        self.openapi_types = {
            'country_code': str,
            'names': Dict[str, str]
        }

        self.attribute_map = {
            'country_code': 'countryCode',
            'names': 'names'
        }

        self._country_code = country_code
        self._names = names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Country':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Country of this Country.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this Country.

        Country code (ISO 3166)

        :return: The country_code of this Country.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Country.

        Country code (ISO 3166)

        :param country_code: The country_code of this Country.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def names(self):
        """Gets the names of this Country.

        Names of the entity - multi-lingual fields

        :return: The names of this Country.
        :rtype: Dict[str, str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this Country.

        Names of the entity - multi-lingual fields

        :param names: The names of this Country.
        :type names: Dict[str, str]
        """

        self._names = names
