# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attraction import Attraction
from openapi_server.models.classification import Classification
from openapi_server.models.event_dates import EventDates
from openapi_server.models.event_sales_dates import EventSalesDates
from openapi_server.models.image import Image
from openapi_server.models.location import Location
from openapi_server.models.place import Place
from openapi_server.models.price_range import PriceRange
from openapi_server.models.promoter import Promoter
from openapi_server.models.public_visibility import PublicVisibility
from openapi_server.models.source import Source
from openapi_server.models.venue import Venue
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=False, additional_infos: Dict[str, str]=None, attractions: List[Attraction]=None, classifications: List[Classification]=None, dates: EventDates=None, descriptions: Dict[str, str]=None, discoverable: bool=False, distance: float=None, images: list[Image]=None, infos: Dict[str, str]=None, location: Location=None, names: Dict[str, str]=None, place: Place=None, please_notes: Dict[str, str]=None, price_ranges: list[PriceRange]=None, promoter: Promoter=None, public_visibility: PublicVisibility=None, references: Dict[str, str]=None, relationships: List[object]=None, sales: EventSalesDates=None, source: Source=None, test: bool=False, type: str=None, units: str=None, url: str=None, venue: Venue=None, version: int=None):
        """Event - a model defined in OpenAPI

        :param active: The active of this Event.
        :param additional_infos: The additional_infos of this Event.
        :param attractions: The attractions of this Event.
        :param classifications: The classifications of this Event.
        :param dates: The dates of this Event.
        :param descriptions: The descriptions of this Event.
        :param discoverable: The discoverable of this Event.
        :param distance: The distance of this Event.
        :param images: The images of this Event.
        :param infos: The infos of this Event.
        :param location: The location of this Event.
        :param names: The names of this Event.
        :param place: The place of this Event.
        :param please_notes: The please_notes of this Event.
        :param price_ranges: The price_ranges of this Event.
        :param promoter: The promoter of this Event.
        :param public_visibility: The public_visibility of this Event.
        :param references: The references of this Event.
        :param relationships: The relationships of this Event.
        :param sales: The sales of this Event.
        :param source: The source of this Event.
        :param test: The test of this Event.
        :param type: The type of this Event.
        :param units: The units of this Event.
        :param url: The url of this Event.
        :param venue: The venue of this Event.
        :param version: The version of this Event.
        """
        self.openapi_types = {
            'active': bool,
            'additional_infos': Dict[str, str],
            'attractions': List[Attraction],
            'classifications': List[Classification],
            'dates': EventDates,
            'descriptions': Dict[str, str],
            'discoverable': bool,
            'distance': float,
            'images': list[Image],
            'infos': Dict[str, str],
            'location': Location,
            'names': Dict[str, str],
            'place': Place,
            'please_notes': Dict[str, str],
            'price_ranges': list[PriceRange],
            'promoter': Promoter,
            'public_visibility': PublicVisibility,
            'references': Dict[str, str],
            'relationships': List[object],
            'sales': EventSalesDates,
            'source': Source,
            'test': bool,
            'type': str,
            'units': str,
            'url': str,
            'venue': Venue,
            'version': int
        }

        self.attribute_map = {
            'active': 'active',
            'additional_infos': 'additionalInfos',
            'attractions': 'attractions',
            'classifications': 'classifications',
            'dates': 'dates',
            'descriptions': 'descriptions',
            'discoverable': 'discoverable',
            'distance': 'distance',
            'images': 'images',
            'infos': 'infos',
            'location': 'location',
            'names': 'names',
            'place': 'place',
            'please_notes': 'pleaseNotes',
            'price_ranges': 'priceRanges',
            'promoter': 'promoter',
            'public_visibility': 'publicVisibility',
            'references': 'references',
            'relationships': 'relationships',
            'sales': 'sales',
            'source': 'source',
            'test': 'test',
            'type': 'type',
            'units': 'units',
            'url': 'url',
            'venue': 'venue',
            'version': 'version'
        }

        self._active = active
        self._additional_infos = additional_infos
        self._attractions = attractions
        self._classifications = classifications
        self._dates = dates
        self._descriptions = descriptions
        self._discoverable = discoverable
        self._distance = distance
        self._images = images
        self._infos = infos
        self._location = location
        self._names = names
        self._place = place
        self._please_notes = please_notes
        self._price_ranges = price_ranges
        self._promoter = promoter
        self._public_visibility = public_visibility
        self._references = references
        self._relationships = relationships
        self._sales = sales
        self._source = source
        self._test = test
        self._type = type
        self._units = units
        self._url = url
        self._venue = venue
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Event.

        Indicate if the entity is active, inactive entity won't appear in Discovery API

        :return: The active of this Event.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Event.

        Indicate if the entity is active, inactive entity won't appear in Discovery API

        :param active: The active of this Event.
        :type active: bool
        """

        self._active = active

    @property
    def additional_infos(self):
        """Gets the additional_infos of this Event.

        Additional informations of the entity - multi-lingual fields

        :return: The additional_infos of this Event.
        :rtype: Dict[str, str]
        """
        return self._additional_infos

    @additional_infos.setter
    def additional_infos(self, additional_infos):
        """Sets the additional_infos of this Event.

        Additional informations of the entity - multi-lingual fields

        :param additional_infos: The additional_infos of this Event.
        :type additional_infos: Dict[str, str]
        """

        self._additional_infos = additional_infos

    @property
    def attractions(self):
        """Gets the attractions of this Event.

        Ordered Attraction related to the event

        :return: The attractions of this Event.
        :rtype: List[Attraction]
        """
        return self._attractions

    @attractions.setter
    def attractions(self, attractions):
        """Sets the attractions of this Event.

        Ordered Attraction related to the event

        :param attractions: The attractions of this Event.
        :type attractions: List[Attraction]
        """

        self._attractions = attractions

    @property
    def classifications(self):
        """Gets the classifications of this Event.

        Event's classifications

        :return: The classifications of this Event.
        :rtype: List[Classification]
        """
        return self._classifications

    @classifications.setter
    def classifications(self, classifications):
        """Sets the classifications of this Event.

        Event's classifications

        :param classifications: The classifications of this Event.
        :type classifications: List[Classification]
        """

        self._classifications = classifications

    @property
    def dates(self):
        """Gets the dates of this Event.


        :return: The dates of this Event.
        :rtype: EventDates
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """Sets the dates of this Event.


        :param dates: The dates of this Event.
        :type dates: EventDates
        """

        self._dates = dates

    @property
    def descriptions(self):
        """Gets the descriptions of this Event.

        Descriptions of the entity - multi-lingual fields

        :return: The descriptions of this Event.
        :rtype: Dict[str, str]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """Sets the descriptions of this Event.

        Descriptions of the entity - multi-lingual fields

        :param descriptions: The descriptions of this Event.
        :type descriptions: Dict[str, str]
        """

        self._descriptions = descriptions

    @property
    def discoverable(self):
        """Gets the discoverable of this Event.

        True if the entity is dicoverable in discovery API

        :return: The discoverable of this Event.
        :rtype: bool
        """
        return self._discoverable

    @discoverable.setter
    def discoverable(self, discoverable):
        """Sets the discoverable of this Event.

        True if the entity is dicoverable in discovery API

        :param discoverable: The discoverable of this Event.
        :type discoverable: bool
        """

        self._discoverable = discoverable

    @property
    def distance(self):
        """Gets the distance of this Event.


        :return: The distance of this Event.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Event.


        :param distance: The distance of this Event.
        :type distance: float
        """

        self._distance = distance

    @property
    def images(self):
        """Gets the images of this Event.

        Images of the entity

        :return: The images of this Event.
        :rtype: list[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Event.

        Images of the entity

        :param images: The images of this Event.
        :type images: list[Image]
        """

        self._images = images

    @property
    def infos(self):
        """Gets the infos of this Event.

        Any information related to the event - multi-lingual fields

        :return: The infos of this Event.
        :rtype: Dict[str, str]
        """
        return self._infos

    @infos.setter
    def infos(self, infos):
        """Sets the infos of this Event.

        Any information related to the event - multi-lingual fields

        :param infos: The infos of this Event.
        :type infos: Dict[str, str]
        """

        self._infos = infos

    @property
    def location(self):
        """Gets the location of this Event.


        :return: The location of this Event.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Event.


        :param location: The location of this Event.
        :type location: Location
        """

        self._location = location

    @property
    def names(self):
        """Gets the names of this Event.

        Names of the entity - multi-lingual fields

        :return: The names of this Event.
        :rtype: Dict[str, str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this Event.

        Names of the entity - multi-lingual fields

        :param names: The names of this Event.
        :type names: Dict[str, str]
        """

        self._names = names

    @property
    def place(self):
        """Gets the place of this Event.


        :return: The place of this Event.
        :rtype: Place
        """
        return self._place

    @place.setter
    def place(self, place):
        """Sets the place of this Event.


        :param place: The place of this Event.
        :type place: Place
        """

        self._place = place

    @property
    def please_notes(self):
        """Gets the please_notes of this Event.

        Any notes related to the event - multi-lingual fields

        :return: The please_notes of this Event.
        :rtype: Dict[str, str]
        """
        return self._please_notes

    @please_notes.setter
    def please_notes(self, please_notes):
        """Sets the please_notes of this Event.

        Any notes related to the event - multi-lingual fields

        :param please_notes: The please_notes of this Event.
        :type please_notes: Dict[str, str]
        """

        self._please_notes = please_notes

    @property
    def price_ranges(self):
        """Gets the price_ranges of this Event.

        Price ranges of this event

        :return: The price_ranges of this Event.
        :rtype: list[PriceRange]
        """
        return self._price_ranges

    @price_ranges.setter
    def price_ranges(self, price_ranges):
        """Sets the price_ranges of this Event.

        Price ranges of this event

        :param price_ranges: The price_ranges of this Event.
        :type price_ranges: list[PriceRange]
        """

        self._price_ranges = price_ranges

    @property
    def promoter(self):
        """Gets the promoter of this Event.


        :return: The promoter of this Event.
        :rtype: Promoter
        """
        return self._promoter

    @promoter.setter
    def promoter(self, promoter):
        """Sets the promoter of this Event.


        :param promoter: The promoter of this Event.
        :type promoter: Promoter
        """

        self._promoter = promoter

    @property
    def public_visibility(self):
        """Gets the public_visibility of this Event.


        :return: The public_visibility of this Event.
        :rtype: PublicVisibility
        """
        return self._public_visibility

    @public_visibility.setter
    def public_visibility(self, public_visibility):
        """Sets the public_visibility of this Event.


        :param public_visibility: The public_visibility of this Event.
        :type public_visibility: PublicVisibility
        """

        self._public_visibility = public_visibility

    @property
    def references(self):
        """Gets the references of this Event.

        References of this entity in an other system. Reference is the exact same entity

        :return: The references of this Event.
        :rtype: Dict[str, str]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this Event.

        References of this entity in an other system. Reference is the exact same entity

        :param references: The references of this Event.
        :type references: Dict[str, str]
        """

        self._references = references

    @property
    def relationships(self):
        """Gets the relationships of this Event.

        Relationships on the entity, like if the entity is a duplicate of another one

        :return: The relationships of this Event.
        :rtype: List[object]
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """Sets the relationships of this Event.

        Relationships on the entity, like if the entity is a duplicate of another one

        :param relationships: The relationships of this Event.
        :type relationships: List[object]
        """

        self._relationships = relationships

    @property
    def sales(self):
        """Gets the sales of this Event.


        :return: The sales of this Event.
        :rtype: EventSalesDates
        """
        return self._sales

    @sales.setter
    def sales(self, sales):
        """Sets the sales of this Event.


        :param sales: The sales of this Event.
        :type sales: EventSalesDates
        """

        self._sales = sales

    @property
    def source(self):
        """Gets the source of this Event.


        :return: The source of this Event.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Event.


        :param source: The source of this Event.
        :type source: Source
        """

        self._source = source

    @property
    def test(self):
        """Gets the test of this Event.

        Indicate if this is a test entity, by default test entities won't appear in discovery API

        :return: The test of this Event.
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this Event.

        Indicate if this is a test entity, by default test entities won't appear in discovery API

        :param test: The test of this Event.
        :type test: bool
        """

        self._test = test

    @property
    def type(self):
        """Gets the type of this Event.

        Type of the entity

        :return: The type of this Event.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.

        Type of the entity

        :param type: The type of this Event.
        :type type: str
        """
        allowed_values = ["event", "venue", "attraction"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def units(self):
        """Gets the units of this Event.


        :return: The units of this Event.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Event.


        :param units: The units of this Event.
        :type units: str
        """

        self._units = units

    @property
    def url(self):
        """Gets the url of this Event.

        URL of a web site detail page of the entity

        :return: The url of this Event.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Event.

        URL of a web site detail page of the entity

        :param url: The url of this Event.
        :type url: str
        """

        self._url = url

    @property
    def venue(self):
        """Gets the venue of this Event.


        :return: The venue of this Event.
        :rtype: Venue
        """
        return self._venue

    @venue.setter
    def venue(self, venue):
        """Sets the venue of this Event.


        :param venue: The venue of this Event.
        :type venue: Venue
        """

        self._venue = venue

    @property
    def version(self):
        """Gets the version of this Event.

        Version of the entity. Version is to avoid updated an entity with an older version

        :return: The version of this Event.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Event.

        Version of the entity. Version is to avoid updated an entity with an older version

        :param version: The version of this Event.
        :type version: int
        """

        self._version = version
