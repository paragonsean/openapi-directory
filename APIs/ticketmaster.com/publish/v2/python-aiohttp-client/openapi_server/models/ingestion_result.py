# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IngestionResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, ignored_properties: Dict[str, object]=None, invalid_properties: Dict[str, object]=None, invalid_values: Dict[str, object]=None, missing_properties: Dict[str, object]=None, status: str=None, unknown_properties: Dict[str, object]=None):
        """IngestionResult - a model defined in OpenAPI

        :param id: The id of this IngestionResult.
        :param ignored_properties: The ignored_properties of this IngestionResult.
        :param invalid_properties: The invalid_properties of this IngestionResult.
        :param invalid_values: The invalid_values of this IngestionResult.
        :param missing_properties: The missing_properties of this IngestionResult.
        :param status: The status of this IngestionResult.
        :param unknown_properties: The unknown_properties of this IngestionResult.
        """
        self.openapi_types = {
            'id': str,
            'ignored_properties': Dict[str, object],
            'invalid_properties': Dict[str, object],
            'invalid_values': Dict[str, object],
            'missing_properties': Dict[str, object],
            'status': str,
            'unknown_properties': Dict[str, object]
        }

        self.attribute_map = {
            'id': 'id',
            'ignored_properties': 'ignoredProperties',
            'invalid_properties': 'invalidProperties',
            'invalid_values': 'invalidValues',
            'missing_properties': 'missingProperties',
            'status': 'status',
            'unknown_properties': 'unknownProperties'
        }

        self._id = id
        self._ignored_properties = ignored_properties
        self._invalid_properties = invalid_properties
        self._invalid_values = invalid_values
        self._missing_properties = missing_properties
        self._status = status
        self._unknown_properties = unknown_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IngestionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IngestionResult of this IngestionResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this IngestionResult.

        Id of the entity ingested in the discovery api

        :return: The id of this IngestionResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IngestionResult.

        Id of the entity ingested in the discovery api

        :param id: The id of this IngestionResult.
        :type id: str
        """

        self._id = id

    @property
    def ignored_properties(self):
        """Gets the ignored_properties of this IngestionResult.

        List properties that are ignored in the validation

        :return: The ignored_properties of this IngestionResult.
        :rtype: Dict[str, object]
        """
        return self._ignored_properties

    @ignored_properties.setter
    def ignored_properties(self, ignored_properties):
        """Sets the ignored_properties of this IngestionResult.

        List properties that are ignored in the validation

        :param ignored_properties: The ignored_properties of this IngestionResult.
        :type ignored_properties: Dict[str, object]
        """

        self._ignored_properties = ignored_properties

    @property
    def invalid_properties(self):
        """Gets the invalid_properties of this IngestionResult.

        List of invalid properties

        :return: The invalid_properties of this IngestionResult.
        :rtype: Dict[str, object]
        """
        return self._invalid_properties

    @invalid_properties.setter
    def invalid_properties(self, invalid_properties):
        """Sets the invalid_properties of this IngestionResult.

        List of invalid properties

        :param invalid_properties: The invalid_properties of this IngestionResult.
        :type invalid_properties: Dict[str, object]
        """

        self._invalid_properties = invalid_properties

    @property
    def invalid_values(self):
        """Gets the invalid_values of this IngestionResult.

        List of invalid values

        :return: The invalid_values of this IngestionResult.
        :rtype: Dict[str, object]
        """
        return self._invalid_values

    @invalid_values.setter
    def invalid_values(self, invalid_values):
        """Sets the invalid_values of this IngestionResult.

        List of invalid values

        :param invalid_values: The invalid_values of this IngestionResult.
        :type invalid_values: Dict[str, object]
        """

        self._invalid_values = invalid_values

    @property
    def missing_properties(self):
        """Gets the missing_properties of this IngestionResult.

        List of properties that should be present in your entity to ease its dicovery

        :return: The missing_properties of this IngestionResult.
        :rtype: Dict[str, object]
        """
        return self._missing_properties

    @missing_properties.setter
    def missing_properties(self, missing_properties):
        """Sets the missing_properties of this IngestionResult.

        List of properties that should be present in your entity to ease its dicovery

        :param missing_properties: The missing_properties of this IngestionResult.
        :type missing_properties: Dict[str, object]
        """

        self._missing_properties = missing_properties

    @property
    def status(self):
        """Gets the status of this IngestionResult.

        Status of the result

        :return: The status of this IngestionResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IngestionResult.

        Status of the result

        :param status: The status of this IngestionResult.
        :type status: str
        """
        allowed_values = ["Error", "SuccessWarning", "Success"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def unknown_properties(self):
        """Gets the unknown_properties of this IngestionResult.

        List of unknown properties that will be dropped

        :return: The unknown_properties of this IngestionResult.
        :rtype: Dict[str, object]
        """
        return self._unknown_properties

    @unknown_properties.setter
    def unknown_properties(self, unknown_properties):
        """Sets the unknown_properties of this IngestionResult.

        List of unknown properties that will be dropped

        :param unknown_properties: The unknown_properties of this IngestionResult.
        :type unknown_properties: Dict[str, object]
        """

        self._unknown_properties = unknown_properties
