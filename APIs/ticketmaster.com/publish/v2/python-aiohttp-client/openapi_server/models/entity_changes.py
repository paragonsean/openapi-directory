# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EntityChanges(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changes: list[str]=None, newly_created: bool=False):
        """EntityChanges - a model defined in OpenAPI

        :param changes: The changes of this EntityChanges.
        :param newly_created: The newly_created of this EntityChanges.
        """
        self.openapi_types = {
            'changes': list[str],
            'newly_created': bool
        }

        self.attribute_map = {
            'changes': 'changes',
            'newly_created': 'newlyCreated'
        }

        self._changes = changes
        self._newly_created = newly_created

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityChanges':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityChanges of this EntityChanges.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changes(self):
        """Gets the changes of this EntityChanges.


        :return: The changes of this EntityChanges.
        :rtype: list[str]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this EntityChanges.


        :param changes: The changes of this EntityChanges.
        :type changes: list[str]
        """

        self._changes = changes

    @property
    def newly_created(self):
        """Gets the newly_created of this EntityChanges.


        :return: The newly_created of this EntityChanges.
        :rtype: bool
        """
        return self._newly_created

    @newly_created.setter
    def newly_created(self, newly_created):
        """Sets the newly_created of this EntityChanges.


        :param newly_created: The newly_created of this EntityChanges.
        :type newly_created: bool
        """

        self._newly_created = newly_created
