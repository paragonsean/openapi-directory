# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.level import Level
from openapi_server.models.segment import Segment
from openapi_server import util


class Classification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, genre: Level=None, primary: bool=False, segment: Segment=None, sub_genre: Level=None, sub_type: Level=None, type: Level=None):
        """Classification - a model defined in OpenAPI

        :param genre: The genre of this Classification.
        :param primary: The primary of this Classification.
        :param segment: The segment of this Classification.
        :param sub_genre: The sub_genre of this Classification.
        :param sub_type: The sub_type of this Classification.
        :param type: The type of this Classification.
        """
        self.openapi_types = {
            'genre': Level,
            'primary': bool,
            'segment': Segment,
            'sub_genre': Level,
            'sub_type': Level,
            'type': Level
        }

        self.attribute_map = {
            'genre': 'genre',
            'primary': 'primary',
            'segment': 'segment',
            'sub_genre': 'subGenre',
            'sub_type': 'subType',
            'type': 'type'
        }

        self._genre = genre
        self._primary = primary
        self._segment = segment
        self._sub_genre = sub_genre
        self._sub_type = sub_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Classification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Classification of this Classification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def genre(self):
        """Gets the genre of this Classification.


        :return: The genre of this Classification.
        :rtype: Level
        """
        return self._genre

    @genre.setter
    def genre(self, genre):
        """Sets the genre of this Classification.


        :param genre: The genre of this Classification.
        :type genre: Level
        """

        self._genre = genre

    @property
    def primary(self):
        """Gets the primary of this Classification.


        :return: The primary of this Classification.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this Classification.


        :param primary: The primary of this Classification.
        :type primary: bool
        """

        self._primary = primary

    @property
    def segment(self):
        """Gets the segment of this Classification.


        :return: The segment of this Classification.
        :rtype: Segment
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this Classification.


        :param segment: The segment of this Classification.
        :type segment: Segment
        """

        self._segment = segment

    @property
    def sub_genre(self):
        """Gets the sub_genre of this Classification.


        :return: The sub_genre of this Classification.
        :rtype: Level
        """
        return self._sub_genre

    @sub_genre.setter
    def sub_genre(self, sub_genre):
        """Sets the sub_genre of this Classification.


        :param sub_genre: The sub_genre of this Classification.
        :type sub_genre: Level
        """

        self._sub_genre = sub_genre

    @property
    def sub_type(self):
        """Gets the sub_type of this Classification.


        :return: The sub_type of this Classification.
        :rtype: Level
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this Classification.


        :param sub_type: The sub_type of this Classification.
        :type sub_type: Level
        """

        self._sub_type = sub_type

    @property
    def type(self):
        """Gets the type of this Classification.


        :return: The type of this Classification.
        :rtype: Level
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Classification.


        :param type: The type of this Classification.
        :type type: Level
        """

        self._type = type
