# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.region_restrictions import RegionRestrictions
from openapi_server import util


class LicensingInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license: str=None, region_restriction: RegionRestrictions=None):
        """LicensingInformation - a model defined in OpenAPI

        :param license: The license of this LicensingInformation.
        :param region_restriction: The region_restriction of this LicensingInformation.
        """
        self.openapi_types = {
            'license': str,
            'region_restriction': RegionRestrictions
        }

        self.attribute_map = {
            'license': 'license',
            'region_restriction': 'regionRestriction'
        }

        self._license = license
        self._region_restriction = region_restriction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicensingInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicensingInformation of this LicensingInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license(self):
        """Gets the license of this LicensingInformation.

        License name

        :return: The license of this LicensingInformation.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this LicensingInformation.

        License name

        :param license: The license of this LicensingInformation.
        :type license: str
        """
        if license is None:
            raise ValueError("Invalid value for `license`, must not be `None`")

        self._license = license

    @property
    def region_restriction(self):
        """Gets the region_restriction of this LicensingInformation.


        :return: The region_restriction of this LicensingInformation.
        :rtype: RegionRestrictions
        """
        return self._region_restriction

    @region_restriction.setter
    def region_restriction(self, region_restriction):
        """Sets the region_restriction of this LicensingInformation.


        :param region_restriction: The region_restriction of this LicensingInformation.
        :type region_restriction: RegionRestrictions
        """

        self._region_restriction = region_restriction
