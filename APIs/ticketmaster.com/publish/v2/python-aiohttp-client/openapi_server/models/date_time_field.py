# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_time_field_type import DateTimeFieldType
from openapi_server.models.duration_field import DurationField
from openapi_server import util


class DateTimeField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration_field: DurationField=None, leap_duration_field: DurationField=None, lenient: bool=False, maximum_value: int=None, minimum_value: int=None, name: str=None, range_duration_field: DurationField=None, supported: bool=False, type: DateTimeFieldType=None):
        """DateTimeField - a model defined in OpenAPI

        :param duration_field: The duration_field of this DateTimeField.
        :param leap_duration_field: The leap_duration_field of this DateTimeField.
        :param lenient: The lenient of this DateTimeField.
        :param maximum_value: The maximum_value of this DateTimeField.
        :param minimum_value: The minimum_value of this DateTimeField.
        :param name: The name of this DateTimeField.
        :param range_duration_field: The range_duration_field of this DateTimeField.
        :param supported: The supported of this DateTimeField.
        :param type: The type of this DateTimeField.
        """
        self.openapi_types = {
            'duration_field': DurationField,
            'leap_duration_field': DurationField,
            'lenient': bool,
            'maximum_value': int,
            'minimum_value': int,
            'name': str,
            'range_duration_field': DurationField,
            'supported': bool,
            'type': DateTimeFieldType
        }

        self.attribute_map = {
            'duration_field': 'durationField',
            'leap_duration_field': 'leapDurationField',
            'lenient': 'lenient',
            'maximum_value': 'maximumValue',
            'minimum_value': 'minimumValue',
            'name': 'name',
            'range_duration_field': 'rangeDurationField',
            'supported': 'supported',
            'type': 'type'
        }

        self._duration_field = duration_field
        self._leap_duration_field = leap_duration_field
        self._lenient = lenient
        self._maximum_value = maximum_value
        self._minimum_value = minimum_value
        self._name = name
        self._range_duration_field = range_duration_field
        self._supported = supported
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DateTimeField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DateTimeField of this DateTimeField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration_field(self):
        """Gets the duration_field of this DateTimeField.


        :return: The duration_field of this DateTimeField.
        :rtype: DurationField
        """
        return self._duration_field

    @duration_field.setter
    def duration_field(self, duration_field):
        """Sets the duration_field of this DateTimeField.


        :param duration_field: The duration_field of this DateTimeField.
        :type duration_field: DurationField
        """

        self._duration_field = duration_field

    @property
    def leap_duration_field(self):
        """Gets the leap_duration_field of this DateTimeField.


        :return: The leap_duration_field of this DateTimeField.
        :rtype: DurationField
        """
        return self._leap_duration_field

    @leap_duration_field.setter
    def leap_duration_field(self, leap_duration_field):
        """Sets the leap_duration_field of this DateTimeField.


        :param leap_duration_field: The leap_duration_field of this DateTimeField.
        :type leap_duration_field: DurationField
        """

        self._leap_duration_field = leap_duration_field

    @property
    def lenient(self):
        """Gets the lenient of this DateTimeField.


        :return: The lenient of this DateTimeField.
        :rtype: bool
        """
        return self._lenient

    @lenient.setter
    def lenient(self, lenient):
        """Sets the lenient of this DateTimeField.


        :param lenient: The lenient of this DateTimeField.
        :type lenient: bool
        """

        self._lenient = lenient

    @property
    def maximum_value(self):
        """Gets the maximum_value of this DateTimeField.


        :return: The maximum_value of this DateTimeField.
        :rtype: int
        """
        return self._maximum_value

    @maximum_value.setter
    def maximum_value(self, maximum_value):
        """Sets the maximum_value of this DateTimeField.


        :param maximum_value: The maximum_value of this DateTimeField.
        :type maximum_value: int
        """

        self._maximum_value = maximum_value

    @property
    def minimum_value(self):
        """Gets the minimum_value of this DateTimeField.


        :return: The minimum_value of this DateTimeField.
        :rtype: int
        """
        return self._minimum_value

    @minimum_value.setter
    def minimum_value(self, minimum_value):
        """Sets the minimum_value of this DateTimeField.


        :param minimum_value: The minimum_value of this DateTimeField.
        :type minimum_value: int
        """

        self._minimum_value = minimum_value

    @property
    def name(self):
        """Gets the name of this DateTimeField.


        :return: The name of this DateTimeField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DateTimeField.


        :param name: The name of this DateTimeField.
        :type name: str
        """

        self._name = name

    @property
    def range_duration_field(self):
        """Gets the range_duration_field of this DateTimeField.


        :return: The range_duration_field of this DateTimeField.
        :rtype: DurationField
        """
        return self._range_duration_field

    @range_duration_field.setter
    def range_duration_field(self, range_duration_field):
        """Sets the range_duration_field of this DateTimeField.


        :param range_duration_field: The range_duration_field of this DateTimeField.
        :type range_duration_field: DurationField
        """

        self._range_duration_field = range_duration_field

    @property
    def supported(self):
        """Gets the supported of this DateTimeField.


        :return: The supported of this DateTimeField.
        :rtype: bool
        """
        return self._supported

    @supported.setter
    def supported(self, supported):
        """Sets the supported of this DateTimeField.


        :param supported: The supported of this DateTimeField.
        :type supported: bool
        """

        self._supported = supported

    @property
    def type(self):
        """Gets the type of this DateTimeField.


        :return: The type of this DateTimeField.
        :rtype: DateTimeFieldType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DateTimeField.


        :param type: The type of this DateTimeField.
        :type type: DateTimeFieldType
        """

        self._type = type
