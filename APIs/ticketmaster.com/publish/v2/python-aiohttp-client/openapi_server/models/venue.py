# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.city import City
from openapi_server.models.country import Country
from openapi_server.models.dma import Dma
from openapi_server.models.image import Image
from openapi_server.models.location import Location
from openapi_server.models.market import Market
from openapi_server.models.social import Social
from openapi_server.models.source import Source
from openapi_server.models.state import State
from openapi_server.models.venue_box_office_info import VenueBoxOfficeInfo
from openapi_server.models.venue_general_info import VenueGeneralInfo
from openapi_server import util


class Venue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accessible_seating_details: Dict[str, str]=None, active: bool=False, additional_infos: Dict[str, str]=None, address: Address=None, box_office_info: VenueBoxOfficeInfo=None, city: City=None, country: Country=None, currency: str=None, descriptions: Dict[str, str]=None, discoverable: bool=False, distance: float=None, dma: List[Dma]=None, general_info: VenueGeneralInfo=None, images: list[Image]=None, location: Location=None, markets: List[Market]=None, names: Dict[str, str]=None, parking_details: Dict[str, str]=None, postal_code: str=None, references: Dict[str, str]=None, relationships: List[object]=None, social: Social=None, source: Source=None, state: State=None, test: bool=False, timezone: str=None, type: str=None, units: str=None, url: str=None, version: int=None):
        """Venue - a model defined in OpenAPI

        :param accessible_seating_details: The accessible_seating_details of this Venue.
        :param active: The active of this Venue.
        :param additional_infos: The additional_infos of this Venue.
        :param address: The address of this Venue.
        :param box_office_info: The box_office_info of this Venue.
        :param city: The city of this Venue.
        :param country: The country of this Venue.
        :param currency: The currency of this Venue.
        :param descriptions: The descriptions of this Venue.
        :param discoverable: The discoverable of this Venue.
        :param distance: The distance of this Venue.
        :param dma: The dma of this Venue.
        :param general_info: The general_info of this Venue.
        :param images: The images of this Venue.
        :param location: The location of this Venue.
        :param markets: The markets of this Venue.
        :param names: The names of this Venue.
        :param parking_details: The parking_details of this Venue.
        :param postal_code: The postal_code of this Venue.
        :param references: The references of this Venue.
        :param relationships: The relationships of this Venue.
        :param social: The social of this Venue.
        :param source: The source of this Venue.
        :param state: The state of this Venue.
        :param test: The test of this Venue.
        :param timezone: The timezone of this Venue.
        :param type: The type of this Venue.
        :param units: The units of this Venue.
        :param url: The url of this Venue.
        :param version: The version of this Venue.
        """
        self.openapi_types = {
            'accessible_seating_details': Dict[str, str],
            'active': bool,
            'additional_infos': Dict[str, str],
            'address': Address,
            'box_office_info': VenueBoxOfficeInfo,
            'city': City,
            'country': Country,
            'currency': str,
            'descriptions': Dict[str, str],
            'discoverable': bool,
            'distance': float,
            'dma': List[Dma],
            'general_info': VenueGeneralInfo,
            'images': list[Image],
            'location': Location,
            'markets': List[Market],
            'names': Dict[str, str],
            'parking_details': Dict[str, str],
            'postal_code': str,
            'references': Dict[str, str],
            'relationships': List[object],
            'social': Social,
            'source': Source,
            'state': State,
            'test': bool,
            'timezone': str,
            'type': str,
            'units': str,
            'url': str,
            'version': int
        }

        self.attribute_map = {
            'accessible_seating_details': 'accessibleSeatingDetails',
            'active': 'active',
            'additional_infos': 'additionalInfos',
            'address': 'address',
            'box_office_info': 'boxOfficeInfo',
            'city': 'city',
            'country': 'country',
            'currency': 'currency',
            'descriptions': 'descriptions',
            'discoverable': 'discoverable',
            'distance': 'distance',
            'dma': 'dma',
            'general_info': 'generalInfo',
            'images': 'images',
            'location': 'location',
            'markets': 'markets',
            'names': 'names',
            'parking_details': 'parkingDetails',
            'postal_code': 'postalCode',
            'references': 'references',
            'relationships': 'relationships',
            'social': 'social',
            'source': 'source',
            'state': 'state',
            'test': 'test',
            'timezone': 'timezone',
            'type': 'type',
            'units': 'units',
            'url': 'url',
            'version': 'version'
        }

        self._accessible_seating_details = accessible_seating_details
        self._active = active
        self._additional_infos = additional_infos
        self._address = address
        self._box_office_info = box_office_info
        self._city = city
        self._country = country
        self._currency = currency
        self._descriptions = descriptions
        self._discoverable = discoverable
        self._distance = distance
        self._dma = dma
        self._general_info = general_info
        self._images = images
        self._location = location
        self._markets = markets
        self._names = names
        self._parking_details = parking_details
        self._postal_code = postal_code
        self._references = references
        self._relationships = relationships
        self._social = social
        self._source = source
        self._state = state
        self._test = test
        self._timezone = timezone
        self._type = type
        self._units = units
        self._url = url
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Venue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Venue of this Venue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accessible_seating_details(self):
        """Gets the accessible_seating_details of this Venue.

        Venue accessible seating details - multi-lingual fields

        :return: The accessible_seating_details of this Venue.
        :rtype: Dict[str, str]
        """
        return self._accessible_seating_details

    @accessible_seating_details.setter
    def accessible_seating_details(self, accessible_seating_details):
        """Sets the accessible_seating_details of this Venue.

        Venue accessible seating details - multi-lingual fields

        :param accessible_seating_details: The accessible_seating_details of this Venue.
        :type accessible_seating_details: Dict[str, str]
        """

        self._accessible_seating_details = accessible_seating_details

    @property
    def active(self):
        """Gets the active of this Venue.

        Indicate if the entity is active, inactive entity won't appear in Discovery API

        :return: The active of this Venue.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Venue.

        Indicate if the entity is active, inactive entity won't appear in Discovery API

        :param active: The active of this Venue.
        :type active: bool
        """

        self._active = active

    @property
    def additional_infos(self):
        """Gets the additional_infos of this Venue.

        Additional informations of the entity - multi-lingual fields

        :return: The additional_infos of this Venue.
        :rtype: Dict[str, str]
        """
        return self._additional_infos

    @additional_infos.setter
    def additional_infos(self, additional_infos):
        """Sets the additional_infos of this Venue.

        Additional informations of the entity - multi-lingual fields

        :param additional_infos: The additional_infos of this Venue.
        :type additional_infos: Dict[str, str]
        """

        self._additional_infos = additional_infos

    @property
    def address(self):
        """Gets the address of this Venue.


        :return: The address of this Venue.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Venue.


        :param address: The address of this Venue.
        :type address: Address
        """

        self._address = address

    @property
    def box_office_info(self):
        """Gets the box_office_info of this Venue.


        :return: The box_office_info of this Venue.
        :rtype: VenueBoxOfficeInfo
        """
        return self._box_office_info

    @box_office_info.setter
    def box_office_info(self, box_office_info):
        """Sets the box_office_info of this Venue.


        :param box_office_info: The box_office_info of this Venue.
        :type box_office_info: VenueBoxOfficeInfo
        """

        self._box_office_info = box_office_info

    @property
    def city(self):
        """Gets the city of this Venue.


        :return: The city of this Venue.
        :rtype: City
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Venue.


        :param city: The city of this Venue.
        :type city: City
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Venue.


        :return: The country of this Venue.
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Venue.


        :param country: The country of this Venue.
        :type country: Country
        """

        self._country = country

    @property
    def currency(self):
        """Gets the currency of this Venue.

        Default currency of ticket prices for events in this venue

        :return: The currency of this Venue.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Venue.

        Default currency of ticket prices for events in this venue

        :param currency: The currency of this Venue.
        :type currency: str
        """

        self._currency = currency

    @property
    def descriptions(self):
        """Gets the descriptions of this Venue.

        Descriptions of the entity - multi-lingual fields

        :return: The descriptions of this Venue.
        :rtype: Dict[str, str]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """Sets the descriptions of this Venue.

        Descriptions of the entity - multi-lingual fields

        :param descriptions: The descriptions of this Venue.
        :type descriptions: Dict[str, str]
        """

        self._descriptions = descriptions

    @property
    def discoverable(self):
        """Gets the discoverable of this Venue.

        True if the entity is dicoverable in discovery API

        :return: The discoverable of this Venue.
        :rtype: bool
        """
        return self._discoverable

    @discoverable.setter
    def discoverable(self, discoverable):
        """Sets the discoverable of this Venue.

        True if the entity is dicoverable in discovery API

        :param discoverable: The discoverable of this Venue.
        :type discoverable: bool
        """

        self._discoverable = discoverable

    @property
    def distance(self):
        """Gets the distance of this Venue.


        :return: The distance of this Venue.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Venue.


        :param distance: The distance of this Venue.
        :type distance: float
        """

        self._distance = distance

    @property
    def dma(self):
        """Gets the dma of this Venue.

        The list of associated DMAs (Designated Market Areas) of the venue

        :return: The dma of this Venue.
        :rtype: List[Dma]
        """
        return self._dma

    @dma.setter
    def dma(self, dma):
        """Sets the dma of this Venue.

        The list of associated DMAs (Designated Market Areas) of the venue

        :param dma: The dma of this Venue.
        :type dma: List[Dma]
        """

        self._dma = dma

    @property
    def general_info(self):
        """Gets the general_info of this Venue.


        :return: The general_info of this Venue.
        :rtype: VenueGeneralInfo
        """
        return self._general_info

    @general_info.setter
    def general_info(self, general_info):
        """Sets the general_info of this Venue.


        :param general_info: The general_info of this Venue.
        :type general_info: VenueGeneralInfo
        """

        self._general_info = general_info

    @property
    def images(self):
        """Gets the images of this Venue.

        Images of the entity

        :return: The images of this Venue.
        :rtype: list[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Venue.

        Images of the entity

        :param images: The images of this Venue.
        :type images: list[Image]
        """

        self._images = images

    @property
    def location(self):
        """Gets the location of this Venue.


        :return: The location of this Venue.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Venue.


        :param location: The location of this Venue.
        :type location: Location
        """

        self._location = location

    @property
    def markets(self):
        """Gets the markets of this Venue.

        Markets of the venue

        :return: The markets of this Venue.
        :rtype: List[Market]
        """
        return self._markets

    @markets.setter
    def markets(self, markets):
        """Sets the markets of this Venue.

        Markets of the venue

        :param markets: The markets of this Venue.
        :type markets: List[Market]
        """

        self._markets = markets

    @property
    def names(self):
        """Gets the names of this Venue.

        Names of the entity - multi-lingual fields

        :return: The names of this Venue.
        :rtype: Dict[str, str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this Venue.

        Names of the entity - multi-lingual fields

        :param names: The names of this Venue.
        :type names: Dict[str, str]
        """

        self._names = names

    @property
    def parking_details(self):
        """Gets the parking_details of this Venue.

        Venue parking info - multi-lingual fields

        :return: The parking_details of this Venue.
        :rtype: Dict[str, str]
        """
        return self._parking_details

    @parking_details.setter
    def parking_details(self, parking_details):
        """Sets the parking_details of this Venue.

        Venue parking info - multi-lingual fields

        :param parking_details: The parking_details of this Venue.
        :type parking_details: Dict[str, str]
        """

        self._parking_details = parking_details

    @property
    def postal_code(self):
        """Gets the postal_code of this Venue.

        Postal code / zipcode of the venue

        :return: The postal_code of this Venue.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Venue.

        Postal code / zipcode of the venue

        :param postal_code: The postal_code of this Venue.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def references(self):
        """Gets the references of this Venue.

        References of this entity in an other system. Reference is the exact same entity

        :return: The references of this Venue.
        :rtype: Dict[str, str]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this Venue.

        References of this entity in an other system. Reference is the exact same entity

        :param references: The references of this Venue.
        :type references: Dict[str, str]
        """

        self._references = references

    @property
    def relationships(self):
        """Gets the relationships of this Venue.

        Relationships on the entity, like if the entity is a duplicate of another one

        :return: The relationships of this Venue.
        :rtype: List[object]
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """Sets the relationships of this Venue.

        Relationships on the entity, like if the entity is a duplicate of another one

        :param relationships: The relationships of this Venue.
        :type relationships: List[object]
        """

        self._relationships = relationships

    @property
    def social(self):
        """Gets the social of this Venue.


        :return: The social of this Venue.
        :rtype: Social
        """
        return self._social

    @social.setter
    def social(self, social):
        """Sets the social of this Venue.


        :param social: The social of this Venue.
        :type social: Social
        """

        self._social = social

    @property
    def source(self):
        """Gets the source of this Venue.


        :return: The source of this Venue.
        :rtype: Source
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Venue.


        :param source: The source of this Venue.
        :type source: Source
        """

        self._source = source

    @property
    def state(self):
        """Gets the state of this Venue.


        :return: The state of this Venue.
        :rtype: State
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Venue.


        :param state: The state of this Venue.
        :type state: State
        """

        self._state = state

    @property
    def test(self):
        """Gets the test of this Venue.

        Indicate if this is a test entity, by default test entities won't appear in discovery API

        :return: The test of this Venue.
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this Venue.

        Indicate if this is a test entity, by default test entities won't appear in discovery API

        :param test: The test of this Venue.
        :type test: bool
        """

        self._test = test

    @property
    def timezone(self):
        """Gets the timezone of this Venue.

        Timezone of the venue

        :return: The timezone of this Venue.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Venue.

        Timezone of the venue

        :param timezone: The timezone of this Venue.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def type(self):
        """Gets the type of this Venue.

        Type of the entity

        :return: The type of this Venue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Venue.

        Type of the entity

        :param type: The type of this Venue.
        :type type: str
        """
        allowed_values = ["event", "venue", "attraction"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def units(self):
        """Gets the units of this Venue.


        :return: The units of this Venue.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Venue.


        :param units: The units of this Venue.
        :type units: str
        """

        self._units = units

    @property
    def url(self):
        """Gets the url of this Venue.

        URL of a web site detail page of the entity

        :return: The url of this Venue.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Venue.

        URL of a web site detail page of the entity

        :param url: The url of this Venue.
        :type url: str
        """

        self._url = url

    @property
    def version(self):
        """Gets the version of this Venue.

        Version of the entity. Version is to avoid updated an entity with an older version

        :return: The version of this Venue.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Venue.

        Version of the entity. Version is to avoid updated an entity with an older version

        :param version: The version of this Venue.
        :type version: int
        """

        self._version = version
