# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Image(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribution: str=None, domains: list[str]=None, fallback: bool=False, height: int=None, ratio: str=None, url: str=None, width: int=None):
        """Image - a model defined in OpenAPI

        :param attribution: The attribution of this Image.
        :param domains: The domains of this Image.
        :param fallback: The fallback of this Image.
        :param height: The height of this Image.
        :param ratio: The ratio of this Image.
        :param url: The url of this Image.
        :param width: The width of this Image.
        """
        self.openapi_types = {
            'attribution': str,
            'domains': list[str],
            'fallback': bool,
            'height': int,
            'ratio': str,
            'url': str,
            'width': int
        }

        self.attribute_map = {
            'attribution': 'attribution',
            'domains': 'domains',
            'fallback': 'fallback',
            'height': 'height',
            'ratio': 'ratio',
            'url': 'url',
            'width': 'width'
        }

        self._attribution = attribution
        self._domains = domains
        self._fallback = fallback
        self._height = height
        self._ratio = ratio
        self._url = url
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Image':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Image of this Image.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribution(self):
        """Gets the attribution of this Image.

        Attribution of the image

        :return: The attribution of this Image.
        :rtype: str
        """
        return self._attribution

    @attribution.setter
    def attribution(self, attribution):
        """Sets the attribution of this Image.

        Attribution of the image

        :param attribution: The attribution of this Image.
        :type attribution: str
        """

        self._attribution = attribution

    @property
    def domains(self):
        """Gets the domains of this Image.

        Domains on which this image should be displayed

        :return: The domains of this Image.
        :rtype: list[str]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this Image.

        Domains on which this image should be displayed

        :param domains: The domains of this Image.
        :type domains: list[str]
        """

        self._domains = domains

    @property
    def fallback(self):
        """Gets the fallback of this Image.

        true if the image is not the event's image but a fallbak image

        :return: The fallback of this Image.
        :rtype: bool
        """
        return self._fallback

    @fallback.setter
    def fallback(self, fallback):
        """Sets the fallback of this Image.

        true if the image is not the event's image but a fallbak image

        :param fallback: The fallback of this Image.
        :type fallback: bool
        """

        self._fallback = fallback

    @property
    def height(self):
        """Gets the height of this Image.

        Height of the image

        :return: The height of this Image.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Image.

        Height of the image

        :param height: The height of this Image.
        :type height: int
        """

        self._height = height

    @property
    def ratio(self):
        """Gets the ratio of this Image.

        Aspect ratio of the image

        :return: The ratio of this Image.
        :rtype: str
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this Image.

        Aspect ratio of the image

        :param ratio: The ratio of this Image.
        :type ratio: str
        """
        allowed_values = ["169", "32", "43"]  # noqa: E501
        if ratio not in allowed_values:
            raise ValueError(
                "Invalid value for `ratio` ({0}), must be one of {1}"
                .format(ratio, allowed_values)
            )

        self._ratio = ratio

    @property
    def url(self):
        """Gets the url of this Image.

        Public URL of the image

        :return: The url of this Image.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Image.

        Public URL of the image

        :param url: The url of this Image.
        :type url: str
        """

        self._url = url

    @property
    def width(self):
        """Gets the width of this Image.

        Width of the image

        :return: The width of this Image.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Image.

        Width of the image

        :param width: The width of this Image.
        :type width: int
        """

        self._width = width
