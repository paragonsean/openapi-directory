# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geometry import Geometry
from openapi_server import util


class GeocodeExtension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, county: str=None, formatted_address: str=None, geometry: Geometry=None, postal_code: str=None, route: str=None, state: str=None, street_number: str=None):
        """GeocodeExtension - a model defined in OpenAPI

        :param city: The city of this GeocodeExtension.
        :param country: The country of this GeocodeExtension.
        :param county: The county of this GeocodeExtension.
        :param formatted_address: The formatted_address of this GeocodeExtension.
        :param geometry: The geometry of this GeocodeExtension.
        :param postal_code: The postal_code of this GeocodeExtension.
        :param route: The route of this GeocodeExtension.
        :param state: The state of this GeocodeExtension.
        :param street_number: The street_number of this GeocodeExtension.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'county': str,
            'formatted_address': str,
            'geometry': Geometry,
            'postal_code': str,
            'route': str,
            'state': str,
            'street_number': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'county': 'county',
            'formatted_address': 'formattedAddress',
            'geometry': 'geometry',
            'postal_code': 'postalCode',
            'route': 'route',
            'state': 'state',
            'street_number': 'streetNumber'
        }

        self._city = city
        self._country = country
        self._county = county
        self._formatted_address = formatted_address
        self._geometry = geometry
        self._postal_code = postal_code
        self._route = route
        self._state = state
        self._street_number = street_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeocodeExtension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeocodeExtension of this GeocodeExtension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this GeocodeExtension.


        :return: The city of this GeocodeExtension.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this GeocodeExtension.


        :param city: The city of this GeocodeExtension.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this GeocodeExtension.


        :return: The country of this GeocodeExtension.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this GeocodeExtension.


        :param country: The country of this GeocodeExtension.
        :type country: str
        """

        self._country = country

    @property
    def county(self):
        """Gets the county of this GeocodeExtension.


        :return: The county of this GeocodeExtension.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this GeocodeExtension.


        :param county: The county of this GeocodeExtension.
        :type county: str
        """

        self._county = county

    @property
    def formatted_address(self):
        """Gets the formatted_address of this GeocodeExtension.


        :return: The formatted_address of this GeocodeExtension.
        :rtype: str
        """
        return self._formatted_address

    @formatted_address.setter
    def formatted_address(self, formatted_address):
        """Sets the formatted_address of this GeocodeExtension.


        :param formatted_address: The formatted_address of this GeocodeExtension.
        :type formatted_address: str
        """

        self._formatted_address = formatted_address

    @property
    def geometry(self):
        """Gets the geometry of this GeocodeExtension.


        :return: The geometry of this GeocodeExtension.
        :rtype: Geometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this GeocodeExtension.


        :param geometry: The geometry of this GeocodeExtension.
        :type geometry: Geometry
        """

        self._geometry = geometry

    @property
    def postal_code(self):
        """Gets the postal_code of this GeocodeExtension.


        :return: The postal_code of this GeocodeExtension.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this GeocodeExtension.


        :param postal_code: The postal_code of this GeocodeExtension.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def route(self):
        """Gets the route of this GeocodeExtension.


        :return: The route of this GeocodeExtension.
        :rtype: str
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this GeocodeExtension.


        :param route: The route of this GeocodeExtension.
        :type route: str
        """

        self._route = route

    @property
    def state(self):
        """Gets the state of this GeocodeExtension.


        :return: The state of this GeocodeExtension.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GeocodeExtension.


        :param state: The state of this GeocodeExtension.
        :type state: str
        """

        self._state = state

    @property
    def street_number(self):
        """Gets the street_number of this GeocodeExtension.


        :return: The street_number of this GeocodeExtension.
        :rtype: str
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number):
        """Sets the street_number of this GeocodeExtension.


        :param street_number: The street_number of this GeocodeExtension.
        :type street_number: str
        """

        self._street_number = street_number
