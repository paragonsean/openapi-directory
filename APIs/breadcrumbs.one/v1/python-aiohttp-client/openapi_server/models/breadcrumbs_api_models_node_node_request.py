# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BreadcrumbsAPIModelsNodeNodeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, chain: str='ETH', token_address: str=None):
        """BreadcrumbsAPIModelsNodeNodeRequest - a model defined in OpenAPI

        :param address: The address of this BreadcrumbsAPIModelsNodeNodeRequest.
        :param chain: The chain of this BreadcrumbsAPIModelsNodeNodeRequest.
        :param token_address: The token_address of this BreadcrumbsAPIModelsNodeNodeRequest.
        """
        self.openapi_types = {
            'address': str,
            'chain': str,
            'token_address': str
        }

        self.attribute_map = {
            'address': 'address',
            'chain': 'chain',
            'token_address': 'token_address'
        }

        self._address = address
        self._chain = chain
        self._token_address = token_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BreadcrumbsAPIModelsNodeNodeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Breadcrumbs.API.Models.Node.NodeRequest of this BreadcrumbsAPIModelsNodeNodeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this BreadcrumbsAPIModelsNodeNodeRequest.

        Blockchain address

        :return: The address of this BreadcrumbsAPIModelsNodeNodeRequest.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this BreadcrumbsAPIModelsNodeNodeRequest.

        Blockchain address

        :param address: The address of this BreadcrumbsAPIModelsNodeNodeRequest.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")
        if address is not None and len(address) < 1:
            raise ValueError("Invalid value for `address`, length must be greater than or equal to `1`")

        self._address = address

    @property
    def chain(self):
        """Gets the chain of this BreadcrumbsAPIModelsNodeNodeRequest.

        Blockchain eg: ETH, BTC, MATIC, RON, SOL, TRX

        :return: The chain of this BreadcrumbsAPIModelsNodeNodeRequest.
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this BreadcrumbsAPIModelsNodeNodeRequest.

        Blockchain eg: ETH, BTC, MATIC, RON, SOL, TRX

        :param chain: The chain of this BreadcrumbsAPIModelsNodeNodeRequest.
        :type chain: str
        """
        allowed_values = ["ETH", "BTC", "MATIC", "RON", "SOL", "TRX"]  # noqa: E501
        if chain not in allowed_values:
            raise ValueError(
                "Invalid value for `chain` ({0}), must be one of {1}"
                .format(chain, allowed_values)
            )

        self._chain = chain

    @property
    def token_address(self):
        """Gets the token_address of this BreadcrumbsAPIModelsNodeNodeRequest.

        If set, will only show transactions from this token

        :return: The token_address of this BreadcrumbsAPIModelsNodeNodeRequest.
        :rtype: str
        """
        return self._token_address

    @token_address.setter
    def token_address(self, token_address):
        """Sets the token_address of this BreadcrumbsAPIModelsNodeNodeRequest.

        If set, will only show transactions from this token

        :param token_address: The token_address of this BreadcrumbsAPIModelsNodeNodeRequest.
        :type token_address: str
        """

        self._token_address = token_address
