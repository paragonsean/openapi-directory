# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.breadcrumbs_api_models_address_address_response import BreadcrumbsAPIModelsAddressAddressResponse
from openapi_server import util


class BreadcrumbsAPIModelsNodeNodeResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_tags: List[str]=None, incoming: List[BreadcrumbsAPIModelsAddressAddressResponse]=None, outgoing: List[BreadcrumbsAPIModelsAddressAddressResponse]=None):
        """BreadcrumbsAPIModelsNodeNodeResponse - a model defined in OpenAPI

        :param entity_tags: The entity_tags of this BreadcrumbsAPIModelsNodeNodeResponse.
        :param incoming: The incoming of this BreadcrumbsAPIModelsNodeNodeResponse.
        :param outgoing: The outgoing of this BreadcrumbsAPIModelsNodeNodeResponse.
        """
        self.openapi_types = {
            'entity_tags': List[str],
            'incoming': List[BreadcrumbsAPIModelsAddressAddressResponse],
            'outgoing': List[BreadcrumbsAPIModelsAddressAddressResponse]
        }

        self.attribute_map = {
            'entity_tags': 'entity_tags',
            'incoming': 'incoming',
            'outgoing': 'outgoing'
        }

        self._entity_tags = entity_tags
        self._incoming = incoming
        self._outgoing = outgoing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BreadcrumbsAPIModelsNodeNodeResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Breadcrumbs.API.Models.Node.NodeResponse of this BreadcrumbsAPIModelsNodeNodeResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_tags(self):
        """Gets the entity_tags of this BreadcrumbsAPIModelsNodeNodeResponse.


        :return: The entity_tags of this BreadcrumbsAPIModelsNodeNodeResponse.
        :rtype: List[str]
        """
        return self._entity_tags

    @entity_tags.setter
    def entity_tags(self, entity_tags):
        """Sets the entity_tags of this BreadcrumbsAPIModelsNodeNodeResponse.


        :param entity_tags: The entity_tags of this BreadcrumbsAPIModelsNodeNodeResponse.
        :type entity_tags: List[str]
        """

        self._entity_tags = entity_tags

    @property
    def incoming(self):
        """Gets the incoming of this BreadcrumbsAPIModelsNodeNodeResponse.


        :return: The incoming of this BreadcrumbsAPIModelsNodeNodeResponse.
        :rtype: List[BreadcrumbsAPIModelsAddressAddressResponse]
        """
        return self._incoming

    @incoming.setter
    def incoming(self, incoming):
        """Sets the incoming of this BreadcrumbsAPIModelsNodeNodeResponse.


        :param incoming: The incoming of this BreadcrumbsAPIModelsNodeNodeResponse.
        :type incoming: List[BreadcrumbsAPIModelsAddressAddressResponse]
        """

        self._incoming = incoming

    @property
    def outgoing(self):
        """Gets the outgoing of this BreadcrumbsAPIModelsNodeNodeResponse.


        :return: The outgoing of this BreadcrumbsAPIModelsNodeNodeResponse.
        :rtype: List[BreadcrumbsAPIModelsAddressAddressResponse]
        """
        return self._outgoing

    @outgoing.setter
    def outgoing(self, outgoing):
        """Sets the outgoing of this BreadcrumbsAPIModelsNodeNodeResponse.


        :param outgoing: The outgoing of this BreadcrumbsAPIModelsNodeNodeResponse.
        :type outgoing: List[BreadcrumbsAPIModelsAddressAddressResponse]
        """

        self._outgoing = outgoing
