# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BreadcrumbsAPIModelsPathfinderPathfinderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chain: str='ETH', destination_addresses: List[str]=None, direction_type: str='Incoming', entity_tags: List[str]=["Exchange"], search_type: str='ShortestPath', source_address: str=None):
        """BreadcrumbsAPIModelsPathfinderPathfinderRequest - a model defined in OpenAPI

        :param chain: The chain of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        :param destination_addresses: The destination_addresses of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        :param direction_type: The direction_type of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        :param entity_tags: The entity_tags of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        :param search_type: The search_type of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        :param source_address: The source_address of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        """
        self.openapi_types = {
            'chain': str,
            'destination_addresses': List[str],
            'direction_type': str,
            'entity_tags': List[str],
            'search_type': str,
            'source_address': str
        }

        self.attribute_map = {
            'chain': 'chain',
            'destination_addresses': 'destination_addresses',
            'direction_type': 'direction_type',
            'entity_tags': 'entity_tags',
            'search_type': 'search_type',
            'source_address': 'source_address'
        }

        self._chain = chain
        self._destination_addresses = destination_addresses
        self._direction_type = direction_type
        self._entity_tags = entity_tags
        self._search_type = search_type
        self._source_address = source_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BreadcrumbsAPIModelsPathfinderPathfinderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Breadcrumbs.API.Models.Pathfinder.PathfinderRequest of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chain(self):
        """Gets the chain of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.

        Blockchain eg: ETH, BTC, SOL

        :return: The chain of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.

        Blockchain eg: ETH, BTC, SOL

        :param chain: The chain of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        :type chain: str
        """
        allowed_values = ["ETH", "BTC", "SOL"]  # noqa: E501
        if chain not in allowed_values:
            raise ValueError(
                "Invalid value for `chain` ({0}), must be one of {1}"
                .format(chain, allowed_values)
            )

        self._chain = chain

    @property
    def destination_addresses(self):
        """Gets the destination_addresses of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.

        Required if search_type is either Shortest/Multiple Path.  If you know where did the money went or come from.

        :return: The destination_addresses of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        :rtype: List[str]
        """
        return self._destination_addresses

    @destination_addresses.setter
    def destination_addresses(self, destination_addresses):
        """Sets the destination_addresses of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.

        Required if search_type is either Shortest/Multiple Path.  If you know where did the money went or come from.

        :param destination_addresses: The destination_addresses of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        :type destination_addresses: List[str]
        """

        self._destination_addresses = destination_addresses

    @property
    def direction_type(self):
        """Gets the direction_type of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.

        Direction type is what direction it should go. Accepts: 0 = Incoming and 1 = Outgoing only

        :return: The direction_type of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        :rtype: str
        """
        return self._direction_type

    @direction_type.setter
    def direction_type(self, direction_type):
        """Sets the direction_type of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.

        Direction type is what direction it should go. Accepts: 0 = Incoming and 1 = Outgoing only

        :param direction_type: The direction_type of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        :type direction_type: str
        """
        allowed_values = ["Incoming", "Outgoing"]  # noqa: E501
        if direction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `direction_type` ({0}), must be one of {1}"
                .format(direction_type, allowed_values)
            )

        self._direction_type = direction_type

    @property
    def entity_tags(self):
        """Gets the entity_tags of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.

        Required if search_type is Closest Entity.  Available values are: Exchange, DEX, Mining, ICO, Mixer

        :return: The entity_tags of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        :rtype: List[str]
        """
        return self._entity_tags

    @entity_tags.setter
    def entity_tags(self, entity_tags):
        """Sets the entity_tags of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.

        Required if search_type is Closest Entity.  Available values are: Exchange, DEX, Mining, ICO, Mixer

        :param entity_tags: The entity_tags of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        :type entity_tags: List[str]
        """
        allowed_values = [None,"Exchange", "DEX", "Mining", "ICO", "Mixer"]  # noqa: E501
        if not set(entity_tags).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `entity_tags` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(entity_tags) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._entity_tags = entity_tags

    @property
    def search_type(self):
        """Gets the search_type of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.

        Search type values: 1 = Shortest Path, 2 = Multiple Path, 3 = Closest Entity and 4 = Closest Illicit

        :return: The search_type of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        :rtype: str
        """
        return self._search_type

    @search_type.setter
    def search_type(self, search_type):
        """Sets the search_type of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.

        Search type values: 1 = Shortest Path, 2 = Multiple Path, 3 = Closest Entity and 4 = Closest Illicit

        :param search_type: The search_type of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        :type search_type: str
        """
        allowed_values = ["ShortestPath", "MultiplePath", "ClosestEntity", "ClosestIllicit"]  # noqa: E501
        if search_type not in allowed_values:
            raise ValueError(
                "Invalid value for `search_type` ({0}), must be one of {1}"
                .format(search_type, allowed_values)
            )

        self._search_type = search_type

    @property
    def source_address(self):
        """Gets the source_address of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.

        Source address is where you want to start your search

        :return: The source_address of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.

        Source address is where you want to start your search

        :param source_address: The source_address of this BreadcrumbsAPIModelsPathfinderPathfinderRequest.
        :type source_address: str
        """
        if source_address is None:
            raise ValueError("Invalid value for `source_address`, must not be `None`")
        if source_address is not None and len(source_address) < 1:
            raise ValueError("Invalid value for `source_address`, length must be greater than or equal to `1`")

        self._source_address = source_address
