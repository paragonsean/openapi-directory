/*
 * Breadcrumbs One
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BreadcrumbsAPIModelsAddressRiskExposureResponse;
import org.openapitools.client.model.BreadcrumbsAPIModelsTransactionRiskResponse;
import org.openapitools.client.model.BreadcrumbsResponseUnauthorizedResponse;
import org.openapitools.client.model.BreadcrumbsResponseUnprocessableResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RiskApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RiskApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RiskApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for riskAddressGet
     * @param chain Blockchain eg: ETH, BTC, MATIC, RON, SOL, TRX (required)
     * @param address Blockchain address (required)
     * @param includeExposure If set to &#x60;true&#x60;, will search the one nearest illicit address (incoming and outgoing) from the specified address (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAddressGetCall(String chain, String address, Boolean includeExposure, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/risk/address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (chain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chain", chain));
        }

        if (address != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address", address));
        }

        if (includeExposure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_exposure", includeExposure));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAddressGetValidateBeforeCall(String chain, String address, Boolean includeExposure, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chain' is set
        if (chain == null) {
            throw new ApiException("Missing the required parameter 'chain' when calling riskAddressGet(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling riskAddressGet(Async)");
        }

        return riskAddressGetCall(chain, address, includeExposure, _callback);

    }

    /**
     * Will check the risk score for single address
     * 
     * @param chain Blockchain eg: ETH, BTC, MATIC, RON, SOL, TRX (required)
     * @param address Blockchain address (required)
     * @param includeExposure If set to &#x60;true&#x60;, will search the one nearest illicit address (incoming and outgoing) from the specified address (optional, default to false)
     * @return BreadcrumbsAPIModelsAddressRiskExposureResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public BreadcrumbsAPIModelsAddressRiskExposureResponse riskAddressGet(String chain, String address, Boolean includeExposure) throws ApiException {
        ApiResponse<BreadcrumbsAPIModelsAddressRiskExposureResponse> localVarResp = riskAddressGetWithHttpInfo(chain, address, includeExposure);
        return localVarResp.getData();
    }

    /**
     * Will check the risk score for single address
     * 
     * @param chain Blockchain eg: ETH, BTC, MATIC, RON, SOL, TRX (required)
     * @param address Blockchain address (required)
     * @param includeExposure If set to &#x60;true&#x60;, will search the one nearest illicit address (incoming and outgoing) from the specified address (optional, default to false)
     * @return ApiResponse&lt;BreadcrumbsAPIModelsAddressRiskExposureResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BreadcrumbsAPIModelsAddressRiskExposureResponse> riskAddressGetWithHttpInfo(String chain, String address, Boolean includeExposure) throws ApiException {
        okhttp3.Call localVarCall = riskAddressGetValidateBeforeCall(chain, address, includeExposure, null);
        Type localVarReturnType = new TypeToken<BreadcrumbsAPIModelsAddressRiskExposureResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Will check the risk score for single address (asynchronously)
     * 
     * @param chain Blockchain eg: ETH, BTC, MATIC, RON, SOL, TRX (required)
     * @param address Blockchain address (required)
     * @param includeExposure If set to &#x60;true&#x60;, will search the one nearest illicit address (incoming and outgoing) from the specified address (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAddressGetAsync(String chain, String address, Boolean includeExposure, final ApiCallback<BreadcrumbsAPIModelsAddressRiskExposureResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAddressGetValidateBeforeCall(chain, address, includeExposure, _callback);
        Type localVarReturnType = new TypeToken<BreadcrumbsAPIModelsAddressRiskExposureResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskTransactionGet
     * @param chain Blockchain eg: ETH, BTC, MATIC, RON, SOL, TRX (required)
     * @param hash Blockchain hash (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskTransactionGetCall(String chain, String hash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/risk/transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (chain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chain", chain));
        }

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskTransactionGetValidateBeforeCall(String chain, String hash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chain' is set
        if (chain == null) {
            throw new ApiException("Missing the required parameter 'chain' when calling riskTransactionGet(Async)");
        }

        // verify the required parameter 'hash' is set
        if (hash == null) {
            throw new ApiException("Missing the required parameter 'hash' when calling riskTransactionGet(Async)");
        }

        return riskTransactionGetCall(chain, hash, _callback);

    }

    /**
     * Will check the risk score for every addresses in a transaction
     * 
     * @param chain Blockchain eg: ETH, BTC, MATIC, RON, SOL, TRX (required)
     * @param hash Blockchain hash (required)
     * @return BreadcrumbsAPIModelsTransactionRiskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public BreadcrumbsAPIModelsTransactionRiskResponse riskTransactionGet(String chain, String hash) throws ApiException {
        ApiResponse<BreadcrumbsAPIModelsTransactionRiskResponse> localVarResp = riskTransactionGetWithHttpInfo(chain, hash);
        return localVarResp.getData();
    }

    /**
     * Will check the risk score for every addresses in a transaction
     * 
     * @param chain Blockchain eg: ETH, BTC, MATIC, RON, SOL, TRX (required)
     * @param hash Blockchain hash (required)
     * @return ApiResponse&lt;BreadcrumbsAPIModelsTransactionRiskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BreadcrumbsAPIModelsTransactionRiskResponse> riskTransactionGetWithHttpInfo(String chain, String hash) throws ApiException {
        okhttp3.Call localVarCall = riskTransactionGetValidateBeforeCall(chain, hash, null);
        Type localVarReturnType = new TypeToken<BreadcrumbsAPIModelsTransactionRiskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Will check the risk score for every addresses in a transaction (asynchronously)
     * 
     * @param chain Blockchain eg: ETH, BTC, MATIC, RON, SOL, TRX (required)
     * @param hash Blockchain hash (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Client Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskTransactionGetAsync(String chain, String hash, final ApiCallback<BreadcrumbsAPIModelsTransactionRiskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskTransactionGetValidateBeforeCall(chain, hash, _callback);
        Type localVarReturnType = new TypeToken<BreadcrumbsAPIModelsTransactionRiskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
