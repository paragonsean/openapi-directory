/**
 * Breadcrumbs One
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse() {
    this->initializeModel();
}

OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::~OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse() {}

void OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::initializeModel() {

    m_path_found_isSet = false;
    m_path_found_isValid = false;

    m_result_hops_isSet = false;
    m_result_hops_isValid = false;

    m_result_paths_isSet = false;
    m_result_paths_isValid = false;
}

void OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::fromJsonObject(QJsonObject json) {

    m_path_found_isValid = ::OpenAPI::fromJsonValue(m_path_found, json[QString("path_found")]);
    m_path_found_isSet = !json[QString("path_found")].isNull() && m_path_found_isValid;

    m_result_hops_isValid = ::OpenAPI::fromJsonValue(m_result_hops, json[QString("result_hops")]);
    m_result_hops_isSet = !json[QString("result_hops")].isNull() && m_result_hops_isValid;

    if(json["result_paths"].isArray()){
        auto arr = json["result_paths"].toArray();
        m_result_paths_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_result_paths_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_result_paths_isSet = !jval.isNull() && m_result_paths_isValid;
                m_result_paths.push_back(item);
            }
        }
    }
}

QString OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_path_found_isSet) {
        obj.insert(QString("path_found"), ::OpenAPI::toJsonValue(m_path_found));
    }
    if (m_result_hops_isSet) {
        obj.insert(QString("result_hops"), ::OpenAPI::toJsonValue(m_result_hops));
    }
    if (m_result_paths.size() > 0) {
        
        obj.insert(QString("result_paths"), toJsonValue(m_result_paths));
    }
    return obj;
}

bool OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::isPathFound() const {
    return m_path_found;
}
void OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::setPathFound(const bool &path_found) {
    m_path_found = path_found;
    m_path_found_isSet = true;
}

bool OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::is_path_found_Set() const{
    return m_path_found_isSet;
}

bool OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::is_path_found_Valid() const{
    return m_path_found_isValid;
}

qint32 OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::getResultHops() const {
    return m_result_hops;
}
void OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::setResultHops(const qint32 &result_hops) {
    m_result_hops = result_hops;
    m_result_hops_isSet = true;
}

bool OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::is_result_hops_Set() const{
    return m_result_hops_isSet;
}

bool OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::is_result_hops_Valid() const{
    return m_result_hops_isValid;
}

QList<QList<QString>> OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::getResultPaths() const {
    return m_result_paths;
}
void OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::setResultPaths(const QList<QList<QString>> &result_paths) {
    m_result_paths = result_paths;
    m_result_paths_isSet = true;
}

bool OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::is_result_paths_Set() const{
    return m_result_paths_isSet;
}

bool OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::is_result_paths_Valid() const{
    return m_result_paths_isValid;
}

bool OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_path_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_hops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBreadcrumbs_API_Models_Pathfinder_PathfinderResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
