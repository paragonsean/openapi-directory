/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Definition model module.
 * @module model/Definition
 * @version 4.0
 */
class Definition {
    /**
     * Constructs a new <code>Definition</code>.
     * @alias module:model/Definition
     */
    constructor() { 
        
        Definition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Definition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Definition} obj Optional instance to populate.
     * @return {module:model/Definition} The populated <code>Definition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Definition();

            if (data.hasOwnProperty('attributionText')) {
                obj['attributionText'] = ApiClient.convertToType(data['attributionText'], 'String');
            }
            if (data.hasOwnProperty('attributionUrl')) {
                obj['attributionUrl'] = ApiClient.convertToType(data['attributionUrl'], 'String');
            }
            if (data.hasOwnProperty('citations')) {
                obj['citations'] = ApiClient.convertToType(data['citations'], [Object]);
            }
            if (data.hasOwnProperty('exampleUses')) {
                obj['exampleUses'] = ApiClient.convertToType(data['exampleUses'], [Object]);
            }
            if (data.hasOwnProperty('extendedText')) {
                obj['extendedText'] = ApiClient.convertToType(data['extendedText'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [Object]);
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], [Object]);
            }
            if (data.hasOwnProperty('partOfSpeech')) {
                obj['partOfSpeech'] = ApiClient.convertToType(data['partOfSpeech'], 'String');
            }
            if (data.hasOwnProperty('relatedWords')) {
                obj['relatedWords'] = ApiClient.convertToType(data['relatedWords'], [Object]);
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('seqString')) {
                obj['seqString'] = ApiClient.convertToType(data['seqString'], 'String');
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'String');
            }
            if (data.hasOwnProperty('sourceDictionary')) {
                obj['sourceDictionary'] = ApiClient.convertToType(data['sourceDictionary'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('textProns')) {
                obj['textProns'] = ApiClient.convertToType(data['textProns'], [Object]);
            }
            if (data.hasOwnProperty('word')) {
                obj['word'] = ApiClient.convertToType(data['word'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Definition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Definition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attributionText'] && !(typeof data['attributionText'] === 'string' || data['attributionText'] instanceof String)) {
            throw new Error("Expected the field `attributionText` to be a primitive type in the JSON string but got " + data['attributionText']);
        }
        // ensure the json data is a string
        if (data['attributionUrl'] && !(typeof data['attributionUrl'] === 'string' || data['attributionUrl'] instanceof String)) {
            throw new Error("Expected the field `attributionUrl` to be a primitive type in the JSON string but got " + data['attributionUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['citations'])) {
            throw new Error("Expected the field `citations` to be an array in the JSON data but got " + data['citations']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['exampleUses'])) {
            throw new Error("Expected the field `exampleUses` to be an array in the JSON data but got " + data['exampleUses']);
        }
        // ensure the json data is a string
        if (data['extendedText'] && !(typeof data['extendedText'] === 'string' || data['extendedText'] instanceof String)) {
            throw new Error("Expected the field `extendedText` to be a primitive type in the JSON string but got " + data['extendedText']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['notes'])) {
            throw new Error("Expected the field `notes` to be an array in the JSON data but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['partOfSpeech'] && !(typeof data['partOfSpeech'] === 'string' || data['partOfSpeech'] instanceof String)) {
            throw new Error("Expected the field `partOfSpeech` to be a primitive type in the JSON string but got " + data['partOfSpeech']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['relatedWords'])) {
            throw new Error("Expected the field `relatedWords` to be an array in the JSON data but got " + data['relatedWords']);
        }
        // ensure the json data is a string
        if (data['seqString'] && !(typeof data['seqString'] === 'string' || data['seqString'] instanceof String)) {
            throw new Error("Expected the field `seqString` to be a primitive type in the JSON string but got " + data['seqString']);
        }
        // ensure the json data is a string
        if (data['sequence'] && !(typeof data['sequence'] === 'string' || data['sequence'] instanceof String)) {
            throw new Error("Expected the field `sequence` to be a primitive type in the JSON string but got " + data['sequence']);
        }
        // ensure the json data is a string
        if (data['sourceDictionary'] && !(typeof data['sourceDictionary'] === 'string' || data['sourceDictionary'] instanceof String)) {
            throw new Error("Expected the field `sourceDictionary` to be a primitive type in the JSON string but got " + data['sourceDictionary']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['textProns'])) {
            throw new Error("Expected the field `textProns` to be an array in the JSON data but got " + data['textProns']);
        }
        // ensure the json data is a string
        if (data['word'] && !(typeof data['word'] === 'string' || data['word'] instanceof String)) {
            throw new Error("Expected the field `word` to be a primitive type in the JSON string but got " + data['word']);
        }

        return true;
    }


}



/**
 * @member {String} attributionText
 */
Definition.prototype['attributionText'] = undefined;

/**
 * @member {String} attributionUrl
 */
Definition.prototype['attributionUrl'] = undefined;

/**
 * @member {Array.<Object>} citations
 */
Definition.prototype['citations'] = undefined;

/**
 * @member {Array.<Object>} exampleUses
 */
Definition.prototype['exampleUses'] = undefined;

/**
 * @member {String} extendedText
 */
Definition.prototype['extendedText'] = undefined;

/**
 * @member {Array.<Object>} labels
 */
Definition.prototype['labels'] = undefined;

/**
 * @member {Array.<Object>} notes
 */
Definition.prototype['notes'] = undefined;

/**
 * @member {String} partOfSpeech
 */
Definition.prototype['partOfSpeech'] = undefined;

/**
 * @member {Array.<Object>} relatedWords
 */
Definition.prototype['relatedWords'] = undefined;

/**
 * @member {Number} score
 */
Definition.prototype['score'] = undefined;

/**
 * @member {String} seqString
 */
Definition.prototype['seqString'] = undefined;

/**
 * @member {String} sequence
 */
Definition.prototype['sequence'] = undefined;

/**
 * @member {String} sourceDictionary
 */
Definition.prototype['sourceDictionary'] = undefined;

/**
 * @member {String} text
 */
Definition.prototype['text'] = undefined;

/**
 * @member {Array.<Object>} textProns
 */
Definition.prototype['textProns'] = undefined;

/**
 * @member {String} word
 */
Definition.prototype['word'] = undefined;






export default Definition;

