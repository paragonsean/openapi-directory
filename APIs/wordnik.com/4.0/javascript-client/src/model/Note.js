/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Note model module.
 * @module model/Note
 * @version 4.0
 */
class Note {
    /**
     * Constructs a new <code>Note</code>.
     * @alias module:model/Note
     */
    constructor() { 
        
        Note.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Note</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Note} obj Optional instance to populate.
     * @return {module:model/Note} The populated <code>Note</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Note();

            if (data.hasOwnProperty('appliesTo')) {
                obj['appliesTo'] = ApiClient.convertToType(data['appliesTo'], ['String']);
            }
            if (data.hasOwnProperty('noteType')) {
                obj['noteType'] = ApiClient.convertToType(data['noteType'], 'String');
            }
            if (data.hasOwnProperty('pos')) {
                obj['pos'] = ApiClient.convertToType(data['pos'], 'Number');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Note</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Note</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['appliesTo'])) {
            throw new Error("Expected the field `appliesTo` to be an array in the JSON data but got " + data['appliesTo']);
        }
        // ensure the json data is a string
        if (data['noteType'] && !(typeof data['noteType'] === 'string' || data['noteType'] instanceof String)) {
            throw new Error("Expected the field `noteType` to be a primitive type in the JSON string but got " + data['noteType']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} appliesTo
 */
Note.prototype['appliesTo'] = undefined;

/**
 * @member {String} noteType
 */
Note.prototype['noteType'] = undefined;

/**
 * @member {Number} pos
 */
Note.prototype['pos'] = undefined;

/**
 * @member {String} value
 */
Note.prototype['value'] = undefined;






export default Note;

