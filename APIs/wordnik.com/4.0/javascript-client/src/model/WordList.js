/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WordList model module.
 * @module model/WordList
 * @version 4.0
 */
class WordList {
    /**
     * Constructs a new <code>WordList</code>.
     * @alias module:model/WordList
     * @param id {Number} 
     */
    constructor(id) { 
        
        WordList.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>WordList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WordList} obj Optional instance to populate.
     * @return {module:model/WordList} The populated <code>WordList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WordList();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lastActivityAt')) {
                obj['lastActivityAt'] = ApiClient.convertToType(data['lastActivityAt'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('numberWordsInList')) {
                obj['numberWordsInList'] = ApiClient.convertToType(data['numberWordsInList'], 'Number');
            }
            if (data.hasOwnProperty('permalink')) {
                obj['permalink'] = ApiClient.convertToType(data['permalink'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'Number');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WordList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WordList</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WordList.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['permalink'] && !(typeof data['permalink'] === 'string' || data['permalink'] instanceof String)) {
            throw new Error("Expected the field `permalink` to be a primitive type in the JSON string but got " + data['permalink']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

WordList.RequiredProperties = ["id"];

/**
 * @member {Date} createdAt
 */
WordList.prototype['createdAt'] = undefined;

/**
 * @member {String} description
 */
WordList.prototype['description'] = undefined;

/**
 * @member {Number} id
 */
WordList.prototype['id'] = undefined;

/**
 * @member {Date} lastActivityAt
 */
WordList.prototype['lastActivityAt'] = undefined;

/**
 * @member {String} name
 */
WordList.prototype['name'] = undefined;

/**
 * @member {Number} numberWordsInList
 */
WordList.prototype['numberWordsInList'] = undefined;

/**
 * @member {String} permalink
 */
WordList.prototype['permalink'] = undefined;

/**
 * @member {String} type
 */
WordList.prototype['type'] = undefined;

/**
 * @member {Date} updatedAt
 */
WordList.prototype['updatedAt'] = undefined;

/**
 * @member {Number} userId
 */
WordList.prototype['userId'] = undefined;

/**
 * @member {String} username
 */
WordList.prototype['username'] = undefined;






export default WordList;

