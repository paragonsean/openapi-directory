/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScoredWord model module.
 * @module model/ScoredWord
 * @version 4.0
 */
class ScoredWord {
    /**
     * Constructs a new <code>ScoredWord</code>.
     * @alias module:model/ScoredWord
     */
    constructor() { 
        
        ScoredWord.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScoredWord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScoredWord} obj Optional instance to populate.
     * @return {module:model/ScoredWord} The populated <code>ScoredWord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScoredWord();

            if (data.hasOwnProperty('baseWordScore')) {
                obj['baseWordScore'] = ApiClient.convertToType(data['baseWordScore'], 'Number');
            }
            if (data.hasOwnProperty('docTermCount')) {
                obj['docTermCount'] = ApiClient.convertToType(data['docTermCount'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lemma')) {
                obj['lemma'] = ApiClient.convertToType(data['lemma'], 'String');
            }
            if (data.hasOwnProperty('partOfSpeech')) {
                obj['partOfSpeech'] = ApiClient.convertToType(data['partOfSpeech'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('sentenceId')) {
                obj['sentenceId'] = ApiClient.convertToType(data['sentenceId'], 'Number');
            }
            if (data.hasOwnProperty('stopword')) {
                obj['stopword'] = ApiClient.convertToType(data['stopword'], 'Boolean');
            }
            if (data.hasOwnProperty('word')) {
                obj['word'] = ApiClient.convertToType(data['word'], 'String');
            }
            if (data.hasOwnProperty('wordType')) {
                obj['wordType'] = ApiClient.convertToType(data['wordType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScoredWord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScoredWord</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['lemma'] && !(typeof data['lemma'] === 'string' || data['lemma'] instanceof String)) {
            throw new Error("Expected the field `lemma` to be a primitive type in the JSON string but got " + data['lemma']);
        }
        // ensure the json data is a string
        if (data['partOfSpeech'] && !(typeof data['partOfSpeech'] === 'string' || data['partOfSpeech'] instanceof String)) {
            throw new Error("Expected the field `partOfSpeech` to be a primitive type in the JSON string but got " + data['partOfSpeech']);
        }
        // ensure the json data is a string
        if (data['word'] && !(typeof data['word'] === 'string' || data['word'] instanceof String)) {
            throw new Error("Expected the field `word` to be a primitive type in the JSON string but got " + data['word']);
        }
        // ensure the json data is a string
        if (data['wordType'] && !(typeof data['wordType'] === 'string' || data['wordType'] instanceof String)) {
            throw new Error("Expected the field `wordType` to be a primitive type in the JSON string but got " + data['wordType']);
        }

        return true;
    }


}



/**
 * @member {Number} baseWordScore
 */
ScoredWord.prototype['baseWordScore'] = undefined;

/**
 * @member {Number} docTermCount
 */
ScoredWord.prototype['docTermCount'] = undefined;

/**
 * @member {Number} id
 */
ScoredWord.prototype['id'] = undefined;

/**
 * @member {String} lemma
 */
ScoredWord.prototype['lemma'] = undefined;

/**
 * @member {String} partOfSpeech
 */
ScoredWord.prototype['partOfSpeech'] = undefined;

/**
 * @member {Number} position
 */
ScoredWord.prototype['position'] = undefined;

/**
 * @member {Number} score
 */
ScoredWord.prototype['score'] = undefined;

/**
 * @member {Number} sentenceId
 */
ScoredWord.prototype['sentenceId'] = undefined;

/**
 * @member {Boolean} stopword
 */
ScoredWord.prototype['stopword'] = undefined;

/**
 * @member {String} word
 */
ScoredWord.prototype['word'] = undefined;

/**
 * @member {String} wordType
 */
ScoredWord.prototype['wordType'] = undefined;






export default ScoredWord;

