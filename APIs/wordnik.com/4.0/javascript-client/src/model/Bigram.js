/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Bigram model module.
 * @module model/Bigram
 * @version 4.0
 */
class Bigram {
    /**
     * Constructs a new <code>Bigram</code>.
     * @alias module:model/Bigram
     */
    constructor() { 
        
        Bigram.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Bigram</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Bigram} obj Optional instance to populate.
     * @return {module:model/Bigram} The populated <code>Bigram</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Bigram();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('gram1')) {
                obj['gram1'] = ApiClient.convertToType(data['gram1'], 'String');
            }
            if (data.hasOwnProperty('gram2')) {
                obj['gram2'] = ApiClient.convertToType(data['gram2'], 'String');
            }
            if (data.hasOwnProperty('mi')) {
                obj['mi'] = ApiClient.convertToType(data['mi'], 'Number');
            }
            if (data.hasOwnProperty('wlmi')) {
                obj['wlmi'] = ApiClient.convertToType(data['wlmi'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Bigram</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Bigram</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['gram1'] && !(typeof data['gram1'] === 'string' || data['gram1'] instanceof String)) {
            throw new Error("Expected the field `gram1` to be a primitive type in the JSON string but got " + data['gram1']);
        }
        // ensure the json data is a string
        if (data['gram2'] && !(typeof data['gram2'] === 'string' || data['gram2'] instanceof String)) {
            throw new Error("Expected the field `gram2` to be a primitive type in the JSON string but got " + data['gram2']);
        }

        return true;
    }


}



/**
 * @member {Number} count
 */
Bigram.prototype['count'] = undefined;

/**
 * @member {String} gram1
 */
Bigram.prototype['gram1'] = undefined;

/**
 * @member {String} gram2
 */
Bigram.prototype['gram2'] = undefined;

/**
 * @member {Number} mi
 */
Bigram.prototype['mi'] = undefined;

/**
 * @member {Number} wlmi
 */
Bigram.prototype['wlmi'] = undefined;






export default Bigram;

