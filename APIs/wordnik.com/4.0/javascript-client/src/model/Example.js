/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentProvider from './ContentProvider';
import ScoredWord from './ScoredWord';
import Sentence from './Sentence';

/**
 * The Example model module.
 * @module model/Example
 * @version 4.0
 */
class Example {
    /**
     * Constructs a new <code>Example</code>.
     * @alias module:model/Example
     */
    constructor() { 
        
        Example.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Example</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Example} obj Optional instance to populate.
     * @return {module:model/Example} The populated <code>Example</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Example();

            if (data.hasOwnProperty('documentId')) {
                obj['documentId'] = ApiClient.convertToType(data['documentId'], 'Number');
            }
            if (data.hasOwnProperty('exampleId')) {
                obj['exampleId'] = ApiClient.convertToType(data['exampleId'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ContentProvider.constructFromObject(data['provider']);
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'Number');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ScoredWord.constructFromObject(data['score']);
            }
            if (data.hasOwnProperty('sentence')) {
                obj['sentence'] = Sentence.constructFromObject(data['sentence']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('word')) {
                obj['word'] = ApiClient.convertToType(data['word'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Example</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Example</code>.
     */
    static validateJSON(data) {
        // validate the optional field `provider`
        if (data['provider']) { // data not null
          ContentProvider.validateJSON(data['provider']);
        }
        // validate the optional field `score`
        if (data['score']) { // data not null
          ScoredWord.validateJSON(data['score']);
        }
        // validate the optional field `sentence`
        if (data['sentence']) { // data not null
          Sentence.validateJSON(data['sentence']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['word'] && !(typeof data['word'] === 'string' || data['word'] instanceof String)) {
            throw new Error("Expected the field `word` to be a primitive type in the JSON string but got " + data['word']);
        }

        return true;
    }


}



/**
 * @member {Number} documentId
 */
Example.prototype['documentId'] = undefined;

/**
 * @member {Number} exampleId
 */
Example.prototype['exampleId'] = undefined;

/**
 * @member {Number} id
 */
Example.prototype['id'] = undefined;

/**
 * @member {module:model/ContentProvider} provider
 */
Example.prototype['provider'] = undefined;

/**
 * @member {Number} rating
 */
Example.prototype['rating'] = undefined;

/**
 * @member {module:model/ScoredWord} score
 */
Example.prototype['score'] = undefined;

/**
 * @member {module:model/Sentence} sentence
 */
Example.prototype['sentence'] = undefined;

/**
 * @member {String} text
 */
Example.prototype['text'] = undefined;

/**
 * @member {String} title
 */
Example.prototype['title'] = undefined;

/**
 * @member {String} url
 */
Example.prototype['url'] = undefined;

/**
 * @member {String} word
 */
Example.prototype['word'] = undefined;

/**
 * @member {Number} year
 */
Example.prototype['year'] = undefined;






export default Example;

