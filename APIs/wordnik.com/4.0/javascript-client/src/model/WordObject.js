/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WordObject model module.
 * @module model/WordObject
 * @version 4.0
 */
class WordObject {
    /**
     * Constructs a new <code>WordObject</code>.
     * @alias module:model/WordObject
     * @param id {Number} 
     */
    constructor(id) { 
        
        WordObject.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>WordObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WordObject} obj Optional instance to populate.
     * @return {module:model/WordObject} The populated <code>WordObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WordObject();

            if (data.hasOwnProperty('canonicalForm')) {
                obj['canonicalForm'] = ApiClient.convertToType(data['canonicalForm'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('originalWord')) {
                obj['originalWord'] = ApiClient.convertToType(data['originalWord'], 'String');
            }
            if (data.hasOwnProperty('suggestions')) {
                obj['suggestions'] = ApiClient.convertToType(data['suggestions'], ['String']);
            }
            if (data.hasOwnProperty('vulgar')) {
                obj['vulgar'] = ApiClient.convertToType(data['vulgar'], 'String');
            }
            if (data.hasOwnProperty('word')) {
                obj['word'] = ApiClient.convertToType(data['word'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WordObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WordObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WordObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['canonicalForm'] && !(typeof data['canonicalForm'] === 'string' || data['canonicalForm'] instanceof String)) {
            throw new Error("Expected the field `canonicalForm` to be a primitive type in the JSON string but got " + data['canonicalForm']);
        }
        // ensure the json data is a string
        if (data['originalWord'] && !(typeof data['originalWord'] === 'string' || data['originalWord'] instanceof String)) {
            throw new Error("Expected the field `originalWord` to be a primitive type in the JSON string but got " + data['originalWord']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['suggestions'])) {
            throw new Error("Expected the field `suggestions` to be an array in the JSON data but got " + data['suggestions']);
        }
        // ensure the json data is a string
        if (data['vulgar'] && !(typeof data['vulgar'] === 'string' || data['vulgar'] instanceof String)) {
            throw new Error("Expected the field `vulgar` to be a primitive type in the JSON string but got " + data['vulgar']);
        }
        // ensure the json data is a string
        if (data['word'] && !(typeof data['word'] === 'string' || data['word'] instanceof String)) {
            throw new Error("Expected the field `word` to be a primitive type in the JSON string but got " + data['word']);
        }

        return true;
    }


}

WordObject.RequiredProperties = ["id"];

/**
 * @member {String} canonicalForm
 */
WordObject.prototype['canonicalForm'] = undefined;

/**
 * @member {Number} id
 */
WordObject.prototype['id'] = undefined;

/**
 * @member {String} originalWord
 */
WordObject.prototype['originalWord'] = undefined;

/**
 * @member {Array.<String>} suggestions
 */
WordObject.prototype['suggestions'] = undefined;

/**
 * @member {String} vulgar
 */
WordObject.prototype['vulgar'] = undefined;

/**
 * @member {String} word
 */
WordObject.prototype['word'] = undefined;






export default WordObject;

