/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentProvider from './ContentProvider';

/**
 * The WordOfTheDay model module.
 * @module model/WordOfTheDay
 * @version 4.0
 */
class WordOfTheDay {
    /**
     * Constructs a new <code>WordOfTheDay</code>.
     * @alias module:model/WordOfTheDay
     * @param id {Number} 
     */
    constructor(id) { 
        
        WordOfTheDay.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>WordOfTheDay</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WordOfTheDay} obj Optional instance to populate.
     * @return {module:model/WordOfTheDay} The populated <code>WordOfTheDay</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WordOfTheDay();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('contentProvider')) {
                obj['contentProvider'] = ContentProvider.constructFromObject(data['contentProvider']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'String');
            }
            if (data.hasOwnProperty('definitions')) {
                obj['definitions'] = ApiClient.convertToType(data['definitions'], [Object]);
            }
            if (data.hasOwnProperty('examples')) {
                obj['examples'] = ApiClient.convertToType(data['examples'], [Object]);
            }
            if (data.hasOwnProperty('htmlExtra')) {
                obj['htmlExtra'] = ApiClient.convertToType(data['htmlExtra'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'String');
            }
            if (data.hasOwnProperty('publishDate')) {
                obj['publishDate'] = ApiClient.convertToType(data['publishDate'], 'Date');
            }
            if (data.hasOwnProperty('word')) {
                obj['word'] = ApiClient.convertToType(data['word'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WordOfTheDay</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WordOfTheDay</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WordOfTheDay.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // validate the optional field `contentProvider`
        if (data['contentProvider']) { // data not null
          ContentProvider.validateJSON(data['contentProvider']);
        }
        // ensure the json data is a string
        if (data['createdBy'] && !(typeof data['createdBy'] === 'string' || data['createdBy'] instanceof String)) {
            throw new Error("Expected the field `createdBy` to be a primitive type in the JSON string but got " + data['createdBy']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['definitions'])) {
            throw new Error("Expected the field `definitions` to be an array in the JSON data but got " + data['definitions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['examples'])) {
            throw new Error("Expected the field `examples` to be an array in the JSON data but got " + data['examples']);
        }
        // ensure the json data is a string
        if (data['htmlExtra'] && !(typeof data['htmlExtra'] === 'string' || data['htmlExtra'] instanceof String)) {
            throw new Error("Expected the field `htmlExtra` to be a primitive type in the JSON string but got " + data['htmlExtra']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['parentId'] && !(typeof data['parentId'] === 'string' || data['parentId'] instanceof String)) {
            throw new Error("Expected the field `parentId` to be a primitive type in the JSON string but got " + data['parentId']);
        }
        // ensure the json data is a string
        if (data['word'] && !(typeof data['word'] === 'string' || data['word'] instanceof String)) {
            throw new Error("Expected the field `word` to be a primitive type in the JSON string but got " + data['word']);
        }

        return true;
    }


}

WordOfTheDay.RequiredProperties = ["id"];

/**
 * @member {String} category
 */
WordOfTheDay.prototype['category'] = undefined;

/**
 * @member {module:model/ContentProvider} contentProvider
 */
WordOfTheDay.prototype['contentProvider'] = undefined;

/**
 * @member {Date} createdAt
 */
WordOfTheDay.prototype['createdAt'] = undefined;

/**
 * @member {String} createdBy
 */
WordOfTheDay.prototype['createdBy'] = undefined;

/**
 * @member {Array.<Object>} definitions
 */
WordOfTheDay.prototype['definitions'] = undefined;

/**
 * @member {Array.<Object>} examples
 */
WordOfTheDay.prototype['examples'] = undefined;

/**
 * @member {String} htmlExtra
 */
WordOfTheDay.prototype['htmlExtra'] = undefined;

/**
 * @member {Number} id
 */
WordOfTheDay.prototype['id'] = undefined;

/**
 * @member {String} note
 */
WordOfTheDay.prototype['note'] = undefined;

/**
 * @member {String} parentId
 */
WordOfTheDay.prototype['parentId'] = undefined;

/**
 * @member {Date} publishDate
 */
WordOfTheDay.prototype['publishDate'] = undefined;

/**
 * @member {String} word
 */
WordOfTheDay.prototype['word'] = undefined;






export default WordOfTheDay;

