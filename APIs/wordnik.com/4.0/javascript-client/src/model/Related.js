/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Related model module.
 * @module model/Related
 * @version 4.0
 */
class Related {
    /**
     * Constructs a new <code>Related</code>.
     * @alias module:model/Related
     */
    constructor() { 
        
        Related.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Related</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Related} obj Optional instance to populate.
     * @return {module:model/Related} The populated <code>Related</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Related();

            if (data.hasOwnProperty('gram')) {
                obj['gram'] = ApiClient.convertToType(data['gram'], 'String');
            }
            if (data.hasOwnProperty('label1')) {
                obj['label1'] = ApiClient.convertToType(data['label1'], 'String');
            }
            if (data.hasOwnProperty('label2')) {
                obj['label2'] = ApiClient.convertToType(data['label2'], 'String');
            }
            if (data.hasOwnProperty('label3')) {
                obj['label3'] = ApiClient.convertToType(data['label3'], 'String');
            }
            if (data.hasOwnProperty('label4')) {
                obj['label4'] = ApiClient.convertToType(data['label4'], 'String');
            }
            if (data.hasOwnProperty('relationshipType')) {
                obj['relationshipType'] = ApiClient.convertToType(data['relationshipType'], 'String');
            }
            if (data.hasOwnProperty('words')) {
                obj['words'] = ApiClient.convertToType(data['words'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Related</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Related</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['gram'] && !(typeof data['gram'] === 'string' || data['gram'] instanceof String)) {
            throw new Error("Expected the field `gram` to be a primitive type in the JSON string but got " + data['gram']);
        }
        // ensure the json data is a string
        if (data['label1'] && !(typeof data['label1'] === 'string' || data['label1'] instanceof String)) {
            throw new Error("Expected the field `label1` to be a primitive type in the JSON string but got " + data['label1']);
        }
        // ensure the json data is a string
        if (data['label2'] && !(typeof data['label2'] === 'string' || data['label2'] instanceof String)) {
            throw new Error("Expected the field `label2` to be a primitive type in the JSON string but got " + data['label2']);
        }
        // ensure the json data is a string
        if (data['label3'] && !(typeof data['label3'] === 'string' || data['label3'] instanceof String)) {
            throw new Error("Expected the field `label3` to be a primitive type in the JSON string but got " + data['label3']);
        }
        // ensure the json data is a string
        if (data['label4'] && !(typeof data['label4'] === 'string' || data['label4'] instanceof String)) {
            throw new Error("Expected the field `label4` to be a primitive type in the JSON string but got " + data['label4']);
        }
        // ensure the json data is a string
        if (data['relationshipType'] && !(typeof data['relationshipType'] === 'string' || data['relationshipType'] instanceof String)) {
            throw new Error("Expected the field `relationshipType` to be a primitive type in the JSON string but got " + data['relationshipType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['words'])) {
            throw new Error("Expected the field `words` to be an array in the JSON data but got " + data['words']);
        }

        return true;
    }


}



/**
 * @member {String} gram
 */
Related.prototype['gram'] = undefined;

/**
 * @member {String} label1
 */
Related.prototype['label1'] = undefined;

/**
 * @member {String} label2
 */
Related.prototype['label2'] = undefined;

/**
 * @member {String} label3
 */
Related.prototype['label3'] = undefined;

/**
 * @member {String} label4
 */
Related.prototype['label4'] = undefined;

/**
 * @member {String} relationshipType
 */
Related.prototype['relationshipType'] = undefined;

/**
 * @member {Array.<String>} words
 */
Related.prototype['words'] = undefined;






export default Related;

