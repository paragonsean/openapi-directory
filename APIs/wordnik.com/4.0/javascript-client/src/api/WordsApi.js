/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefinitionSearchResults from '../model/DefinitionSearchResults';
import WordObject from '../model/WordObject';
import WordOfTheDay from '../model/WordOfTheDay';
import WordSearchResults from '../model/WordSearchResults';

/**
* Words service.
* @module api/WordsApi
* @version 4.0
*/
export default class WordsApi {

    /**
    * Constructs a new WordsApi. 
    * @alias module:api/WordsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getRandomWord operation.
     * @callback module:api/WordsApi~getRandomWordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WordObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single random WordObject
     * @param {Object} opts Optional parameters
     * @param {String} [hasDictionaryDef = 'true')] Only return words with dictionary definitions
     * @param {String} [includePartOfSpeech] CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
     * @param {String} [excludePartOfSpeech] CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
     * @param {Number} [minCorpusCount = 0)] Minimum corpus frequency for terms
     * @param {Number} [maxCorpusCount = -1)] Maximum corpus frequency for terms
     * @param {Number} [minDictionaryCount = 1)] Minimum dictionary count
     * @param {Number} [maxDictionaryCount = -1)] Maximum dictionary count
     * @param {Number} [minLength = 5)] Minimum word length
     * @param {Number} [maxLength = -1)] Maximum word length
     * @param {module:api/WordsApi~getRandomWordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WordObject}
     */
    getRandomWord(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'hasDictionaryDef': opts['hasDictionaryDef'],
        'includePartOfSpeech': opts['includePartOfSpeech'],
        'excludePartOfSpeech': opts['excludePartOfSpeech'],
        'minCorpusCount': opts['minCorpusCount'],
        'maxCorpusCount': opts['maxCorpusCount'],
        'minDictionaryCount': opts['minDictionaryCount'],
        'maxDictionaryCount': opts['maxDictionaryCount'],
        'minLength': opts['minLength'],
        'maxLength': opts['maxLength']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = WordObject;
      return this.apiClient.callApi(
        '/words.json/randomWord', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRandomWords operation.
     * @callback module:api/WordsApi~getRandomWordsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WordObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of random WordObjects
     * @param {Object} opts Optional parameters
     * @param {String} [hasDictionaryDef = 'true')] Only return words with dictionary definitions
     * @param {String} [includePartOfSpeech] CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
     * @param {String} [excludePartOfSpeech] CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
     * @param {Number} [minCorpusCount = 0)] Minimum corpus frequency for terms
     * @param {Number} [maxCorpusCount = -1)] Maximum corpus frequency for terms
     * @param {Number} [minDictionaryCount = 1)] Minimum dictionary count
     * @param {Number} [maxDictionaryCount = -1)] Maximum dictionary count
     * @param {Number} [minLength = 5)] Minimum word length
     * @param {Number} [maxLength = -1)] Maximum word length
     * @param {module:model/String} [sortBy] Attribute to sort by
     * @param {module:model/String} [sortOrder] Sort direction
     * @param {Number} [limit = 10)] Maximum number of results to return
     * @param {module:api/WordsApi~getRandomWordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WordObject>}
     */
    getRandomWords(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'hasDictionaryDef': opts['hasDictionaryDef'],
        'includePartOfSpeech': opts['includePartOfSpeech'],
        'excludePartOfSpeech': opts['excludePartOfSpeech'],
        'minCorpusCount': opts['minCorpusCount'],
        'maxCorpusCount': opts['maxCorpusCount'],
        'minDictionaryCount': opts['minDictionaryCount'],
        'maxDictionaryCount': opts['maxDictionaryCount'],
        'minLength': opts['minLength'],
        'maxLength': opts['maxLength'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [WordObject];
      return this.apiClient.callApi(
        '/words.json/randomWords', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWordOfTheDay operation.
     * @callback module:api/WordsApi~getWordOfTheDayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WordOfTheDay} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specific WordOfTheDay
     * @param {Object} opts Optional parameters
     * @param {String} [date] Fetches by date in yyyy-MM-dd
     * @param {module:api/WordsApi~getWordOfTheDayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WordOfTheDay}
     */
    getWordOfTheDay(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'date': opts['date']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = WordOfTheDay;
      return this.apiClient.callApi(
        '/words.json/wordOfTheDay', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reverseDictionary operation.
     * @callback module:api/WordsApi~reverseDictionaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefinitionSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reverse dictionary search
     * @param {String} query Search term
     * @param {Object} opts Optional parameters
     * @param {String} [findSenseForWord] Restricts words and finds closest sense
     * @param {module:model/String} [includeSourceDictionaries] Only include these comma-delimited source dictionaries
     * @param {module:model/String} [excludeSourceDictionaries] Exclude these comma-delimited source dictionaries
     * @param {String} [includePartOfSpeech] Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
     * @param {String} [excludePartOfSpeech] Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
     * @param {Number} [minCorpusCount = 5)] Minimum corpus frequency for terms
     * @param {Number} [maxCorpusCount = -1)] Maximum corpus frequency for terms
     * @param {Number} [minLength = 1)] Minimum word length
     * @param {Number} [maxLength = -1)] Maximum word length
     * @param {String} [expandTerms] Expand terms
     * @param {module:model/String} [includeTags = 'false')] Return a closed set of XML tags in response
     * @param {module:model/String} [sortBy] Attribute to sort by
     * @param {module:model/String} [sortOrder] Sort direction
     * @param {String} [skip = '0')] Results to skip
     * @param {Number} [limit = 10)] Maximum number of results to return
     * @param {module:api/WordsApi~reverseDictionaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefinitionSearchResults}
     */
    reverseDictionary(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling reverseDictionary");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'findSenseForWord': opts['findSenseForWord'],
        'includeSourceDictionaries': opts['includeSourceDictionaries'],
        'excludeSourceDictionaries': opts['excludeSourceDictionaries'],
        'includePartOfSpeech': opts['includePartOfSpeech'],
        'excludePartOfSpeech': opts['excludePartOfSpeech'],
        'minCorpusCount': opts['minCorpusCount'],
        'maxCorpusCount': opts['maxCorpusCount'],
        'minLength': opts['minLength'],
        'maxLength': opts['maxLength'],
        'expandTerms': opts['expandTerms'],
        'includeTags': opts['includeTags'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = DefinitionSearchResults;
      return this.apiClient.callApi(
        '/words.json/reverseDictionary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchWords operation.
     * @callback module:api/WordsApi~searchWordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WordSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches words
     * @param {String} query Search query
     * @param {Object} opts Optional parameters
     * @param {String} [allowRegex = 'false')] Search term is a Regular Expression
     * @param {String} [caseSensitive = 'true')] Search case sensitive
     * @param {String} [includePartOfSpeech] Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
     * @param {String} [excludePartOfSpeech] Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)
     * @param {Number} [minCorpusCount = 5)] Minimum corpus frequency for terms
     * @param {Number} [maxCorpusCount = -1)] Maximum corpus frequency for terms
     * @param {Number} [minDictionaryCount = 1)] Minimum number of dictionary entries for words returned
     * @param {Number} [maxDictionaryCount = -1)] Maximum dictionary definition count
     * @param {Number} [minLength = 1)] Minimum word length
     * @param {Number} [maxLength = -1)] Maximum word length
     * @param {Number} [skip = 0)] Results to skip
     * @param {Number} [limit = 10)] Maximum number of results to return
     * @param {module:api/WordsApi~searchWordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WordSearchResults}
     */
    searchWords(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchWords");
      }

      let pathParams = {
        'query': query
      };
      let queryParams = {
        'allowRegex': opts['allowRegex'],
        'caseSensitive': opts['caseSensitive'],
        'includePartOfSpeech': opts['includePartOfSpeech'],
        'excludePartOfSpeech': opts['excludePartOfSpeech'],
        'minCorpusCount': opts['minCorpusCount'],
        'maxCorpusCount': opts['maxCorpusCount'],
        'minDictionaryCount': opts['minDictionaryCount'],
        'maxDictionaryCount': opts['maxDictionaryCount'],
        'minLength': opts['minLength'],
        'maxLength': opts['maxLength'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = WordSearchResults;
      return this.apiClient.callApi(
        '/words.json/search/{query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
