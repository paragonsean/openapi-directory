/**
 * Wordnik
 * Wordnik is the worlds biggest online English dictionary, by number of words
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AudioFile from '../model/AudioFile';
import Bigram from '../model/Bigram';
import Definition from '../model/Definition';
import Example from '../model/Example';
import ExampleSearchResults from '../model/ExampleSearchResults';
import FrequencySummary from '../model/FrequencySummary';
import Related from '../model/Related';
import Syllable from '../model/Syllable';
import TextPron from '../model/TextPron';

/**
* Word service.
* @module api/WordApi
* @version 4.0
*/
export default class WordApi {

    /**
    * Constructs a new WordApi. 
    * @alias module:api/WordApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAudio operation.
     * @callback module:api/WordApi~getAudioCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AudioFile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches audio metadata for a word.
     * The metadata includes a time-expiring fileUrl which allows reading the audio file directly from the API.  Currently only audio pronunciations from the American Heritage Dictionary in mp3 format are supported.
     * @param {String} word Word to get audio for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [useCanonical = 'false')] If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
     * @param {Number} [limit = 50)] Maximum number of results to return
     * @param {module:api/WordApi~getAudioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AudioFile>}
     */
    getAudio(word, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling getAudio");
      }

      let pathParams = {
        'word': word
      };
      let queryParams = {
        'useCanonical': opts['useCanonical'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [AudioFile];
      return this.apiClient.callApi(
        '/word.json/{word}/audio', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDefinitions operation.
     * @callback module:api/WordApi~getDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Definition>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return definitions for a word
     * @param {String} word Word to return definitions for
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 200)] Maximum number of results to return
     * @param {module:model/String} [partOfSpeech] CSV list of part-of-speech types
     * @param {String} [includeRelated = 'false')] Return related words with definitions
     * @param {Array.<module:model/String>} [sourceDictionaries] Source dictionary to return definitions from.  If 'all' is received, results are returned from all sources. If multiple values are received (e.g. 'century,wiktionary'), results are returned from the first specified dictionary that has definitions. If left blank, results are returned from the first dictionary that has definitions. By default, dictionaries are searched in this order: ahd-5, wiktionary, webster, century, wordnet
     * @param {module:model/String} [useCanonical = 'false')] If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
     * @param {module:model/String} [includeTags = 'false')] Return a closed set of XML tags in response
     * @param {module:api/WordApi~getDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Definition>}
     */
    getDefinitions(word, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling getDefinitions");
      }

      let pathParams = {
        'word': word
      };
      let queryParams = {
        'limit': opts['limit'],
        'partOfSpeech': opts['partOfSpeech'],
        'includeRelated': opts['includeRelated'],
        'sourceDictionaries': this.apiClient.buildCollectionParam(opts['sourceDictionaries'], 'csv'),
        'useCanonical': opts['useCanonical'],
        'includeTags': opts['includeTags']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Definition];
      return this.apiClient.callApi(
        '/word.json/{word}/definitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEtymologies operation.
     * @callback module:api/WordApi~getEtymologiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches etymology data
     * @param {String} word Word to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [useCanonical = 'false')] If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
     * @param {module:api/WordApi~getEtymologiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getEtymologies(word, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling getEtymologies");
      }

      let pathParams = {
        'word': word
      };
      let queryParams = {
        'useCanonical': opts['useCanonical']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/word.json/{word}/etymologies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExamples operation.
     * @callback module:api/WordApi~getExamplesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExampleSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns examples for a word
     * @param {String} word Word to return examples for
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [includeDuplicates = 'false')] Show duplicate examples from different sources
     * @param {module:model/String} [useCanonical = 'false')] If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
     * @param {Number} [skip = 0)] Results to skip
     * @param {Number} [limit = 5)] Maximum number of results to return
     * @param {module:api/WordApi~getExamplesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExampleSearchResults}
     */
    getExamples(word, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling getExamples");
      }

      let pathParams = {
        'word': word
      };
      let queryParams = {
        'includeDuplicates': opts['includeDuplicates'],
        'useCanonical': opts['useCanonical'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ExampleSearchResults;
      return this.apiClient.callApi(
        '/word.json/{word}/examples', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHyphenation operation.
     * @callback module:api/WordApi~getHyphenationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Syllable>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns syllable information for a word
     * @param {String} word Word to get syllables for
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [useCanonical = 'false')] If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
     * @param {module:model/String} [sourceDictionary] Get from a single dictionary. Valid options: ahd-5, century, wiktionary, webster, and wordnet.
     * @param {Number} [limit = 50)] Maximum number of results to return
     * @param {module:api/WordApi~getHyphenationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Syllable>}
     */
    getHyphenation(word, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling getHyphenation");
      }

      let pathParams = {
        'word': word
      };
      let queryParams = {
        'useCanonical': opts['useCanonical'],
        'sourceDictionary': opts['sourceDictionary'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Syllable];
      return this.apiClient.callApi(
        '/word.json/{word}/hyphenation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPhrases operation.
     * @callback module:api/WordApi~getPhrasesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Bigram>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches bi-gram phrases for a word
     * @param {String} word Word to fetch phrases for
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 5)] Maximum number of results to return
     * @param {Number} [wlmi = 0)] Minimum WLMI for the phrase
     * @param {module:model/String} [useCanonical = 'false')] If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
     * @param {module:api/WordApi~getPhrasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Bigram>}
     */
    getPhrases(word, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling getPhrases");
      }

      let pathParams = {
        'word': word
      };
      let queryParams = {
        'limit': opts['limit'],
        'wlmi': opts['wlmi'],
        'useCanonical': opts['useCanonical']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Bigram];
      return this.apiClient.callApi(
        '/word.json/{word}/phrases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelatedWords operation.
     * @callback module:api/WordApi~getRelatedWordsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Related>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a word as a string, returns relationships from the Word Graph
     * @param {String} word Word to fetch relationships for
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [useCanonical = 'false')] If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
     * @param {module:model/String} [relationshipTypes] Limits the total results per type of relationship type
     * @param {Number} [limitPerRelationshipType = 10)] Restrict to the supplied relationship types
     * @param {module:api/WordApi~getRelatedWordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Related>}
     */
    getRelatedWords(word, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling getRelatedWords");
      }

      let pathParams = {
        'word': word
      };
      let queryParams = {
        'useCanonical': opts['useCanonical'],
        'relationshipTypes': opts['relationshipTypes'],
        'limitPerRelationshipType': opts['limitPerRelationshipType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Related];
      return this.apiClient.callApi(
        '/word.json/{word}/relatedWords', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScrabbleScore operation.
     * @callback module:api/WordApi~getScrabbleScoreCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the Scrabble score for a word
     * @param {String} word Word to get scrabble score for.
     * @param {module:api/WordApi~getScrabbleScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getScrabbleScore(word, callback) {
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling getScrabbleScore");
      }

      let pathParams = {
        'word': word
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/word.json/{word}/scrabbleScore', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTextPronunciations operation.
     * @callback module:api/WordApi~getTextPronunciationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TextPron>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns text pronunciations for a given word
     * @param {String} word Word to get pronunciations for
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [useCanonical = 'false')] If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
     * @param {module:model/String} [sourceDictionary] Get from a single dictionary
     * @param {module:model/String} [typeFormat] Text pronunciation type
     * @param {Number} [limit = 50)] Maximum number of results to return
     * @param {module:api/WordApi~getTextPronunciationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TextPron>}
     */
    getTextPronunciations(word, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling getTextPronunciations");
      }

      let pathParams = {
        'word': word
      };
      let queryParams = {
        'useCanonical': opts['useCanonical'],
        'sourceDictionary': opts['sourceDictionary'],
        'typeFormat': opts['typeFormat'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TextPron];
      return this.apiClient.callApi(
        '/word.json/{word}/pronunciations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopExample operation.
     * @callback module:api/WordApi~getTopExampleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Example} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a top example for a word
     * @param {String} word Word to fetch examples for
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [useCanonical = 'false')] If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
     * @param {module:api/WordApi~getTopExampleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Example}
     */
    getTopExample(word, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling getTopExample");
      }

      let pathParams = {
        'word': word
      };
      let queryParams = {
        'useCanonical': opts['useCanonical']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Example;
      return this.apiClient.callApi(
        '/word.json/{word}/topExample', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWordFrequency operation.
     * @callback module:api/WordApi~getWordFrequencyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FrequencySummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns word usage over time
     * @param {String} word Word to return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [useCanonical = 'false')] If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
     * @param {Number} [startYear = 1800)] Starting Year
     * @param {Number} [endYear = 2012)] Ending Year
     * @param {module:api/WordApi~getWordFrequencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FrequencySummary}
     */
    getWordFrequency(word, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling getWordFrequency");
      }

      let pathParams = {
        'word': word
      };
      let queryParams = {
        'useCanonical': opts['useCanonical'],
        'startYear': opts['startYear'],
        'endYear': opts['endYear']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = FrequencySummary;
      return this.apiClient.callApi(
        '/word.json/{word}/frequency', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
