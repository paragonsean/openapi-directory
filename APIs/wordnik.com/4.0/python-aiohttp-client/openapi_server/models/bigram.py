# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Bigram(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, gram1: str=None, gram2: str=None, mi: float=None, wlmi: float=None):
        """Bigram - a model defined in OpenAPI

        :param count: The count of this Bigram.
        :param gram1: The gram1 of this Bigram.
        :param gram2: The gram2 of this Bigram.
        :param mi: The mi of this Bigram.
        :param wlmi: The wlmi of this Bigram.
        """
        self.openapi_types = {
            'count': int,
            'gram1': str,
            'gram2': str,
            'mi': float,
            'wlmi': float
        }

        self.attribute_map = {
            'count': 'count',
            'gram1': 'gram1',
            'gram2': 'gram2',
            'mi': 'mi',
            'wlmi': 'wlmi'
        }

        self._count = count
        self._gram1 = gram1
        self._gram2 = gram2
        self._mi = mi
        self._wlmi = wlmi

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Bigram':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bigram of this Bigram.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Bigram.


        :return: The count of this Bigram.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Bigram.


        :param count: The count of this Bigram.
        :type count: int
        """

        self._count = count

    @property
    def gram1(self):
        """Gets the gram1 of this Bigram.


        :return: The gram1 of this Bigram.
        :rtype: str
        """
        return self._gram1

    @gram1.setter
    def gram1(self, gram1):
        """Sets the gram1 of this Bigram.


        :param gram1: The gram1 of this Bigram.
        :type gram1: str
        """

        self._gram1 = gram1

    @property
    def gram2(self):
        """Gets the gram2 of this Bigram.


        :return: The gram2 of this Bigram.
        :rtype: str
        """
        return self._gram2

    @gram2.setter
    def gram2(self, gram2):
        """Sets the gram2 of this Bigram.


        :param gram2: The gram2 of this Bigram.
        :type gram2: str
        """

        self._gram2 = gram2

    @property
    def mi(self):
        """Gets the mi of this Bigram.


        :return: The mi of this Bigram.
        :rtype: float
        """
        return self._mi

    @mi.setter
    def mi(self, mi):
        """Sets the mi of this Bigram.


        :param mi: The mi of this Bigram.
        :type mi: float
        """

        self._mi = mi

    @property
    def wlmi(self):
        """Gets the wlmi of this Bigram.


        :return: The wlmi of this Bigram.
        :rtype: float
        """
        return self._wlmi

    @wlmi.setter
    def wlmi(self, wlmi):
        """Sets the wlmi of this Bigram.


        :param wlmi: The wlmi of this Bigram.
        :type wlmi: float
        """

        self._wlmi = wlmi
